
EX_Three_Phase_Inverter_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001465c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d8  08014900  08014900  00015900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016dd8  08016dd8  00017dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016de0  08016de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016de4  08016de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f4  24000000  08016de8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006dec  240002f4  080170dc  000182f4  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240070e0  080170dc  000190e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000182f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038ed6  00000000  00000000  00018322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d3d  00000000  00000000  000511f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026e8  00000000  00000000  00058f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d53  00000000  00000000  0005b620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000414fe  00000000  00000000  0005d373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037083  00000000  00000000  0009e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176ad3  00000000  00000000  000d58f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024c3c7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b148  00000000  00000000  0024c480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  002575c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000001f4  00000000  00000000  0025763e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  00257832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080148e4 	.word	0x080148e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	080148e4 	.word	0x080148e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f011 ff62 	bl	8012482 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fbc5 	bl	8001d54 <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 fc89 	bl	8000ee6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 fcb4 	bl	8001f5c <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 fc74 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000310 	.word	0x24000310
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f001 fdb7 	bl	80021f4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fac2 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fad9 	bl	8001c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 80006b0:	f010 f930 	bl	8010914 <OLED_Init>
  ad7606_Init();
 80006b4:	f00f fcf0 	bl	8010098 <ad7606_Init>
  INA228_config(INA228_0);
 80006b8:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_FREERTOS_Init+0xa4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f00f fe00 	bl	80102c2 <INA228_config>
  pll_Init_V(&signal_V, 50, 20000, 10.f);
 80006c2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80006c6:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006ca:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8000754 <MX_FREERTOS_Init+0xa8>
 80006ce:	4822      	ldr	r0, [pc, #136]	@ (8000758 <MX_FREERTOS_Init+0xac>)
 80006d0:	f010 fc3e 	bl	8010f50 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006d4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006d8:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000754 <MX_FREERTOS_Init+0xa8>
 80006dc:	481f      	ldr	r0, [pc, #124]	@ (800075c <MX_FREERTOS_Init+0xb0>)
 80006de:	f010 fccf 	bl	8011080 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	481e      	ldr	r0, [pc, #120]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006e6:	f008 fc37 	bl	8008f58 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	481c      	ldr	r0, [pc, #112]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006ee:	f008 fc33 	bl	8008f58 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006f2:	2108      	movs	r1, #8
 80006f4:	481a      	ldr	r0, [pc, #104]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006f6:	f008 fc2f 	bl	8008f58 <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4819      	ldr	r0, [pc, #100]	@ (8000764 <MX_FREERTOS_Init+0xb8>)
 80006fe:	f001 fb4b 	bl	8001d98 <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 8000706:	f00f fd01 	bl	801010c <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_FREERTOS_Init+0xc0>)
 800070c:	2100      	movs	r1, #0
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 8000710:	f00c fa12 	bl	800cb38 <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 800071c:	2100      	movs	r1, #0
 800071e:	4817      	ldr	r0, [pc, #92]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 8000720:	f00c fa0a 	bl	800cb38 <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_FREERTOS_Init+0xd4>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <MX_FREERTOS_Init+0xd8>)
 800072c:	2100      	movs	r1, #0
 800072e:	4816      	ldr	r0, [pc, #88]	@ (8000788 <MX_FREERTOS_Init+0xdc>)
 8000730:	f00c fa02 	bl	800cb38 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a15      	ldr	r2, [pc, #84]	@ (800078c <MX_FREERTOS_Init+0xe0>)
 8000738:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <MX_FREERTOS_Init+0xe4>)
 800073c:	2100      	movs	r1, #0
 800073e:	4815      	ldr	r0, [pc, #84]	@ (8000794 <MX_FREERTOS_Init+0xe8>)
 8000740:	f00c f9fa 	bl	800cb38 <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_FREERTOS_Init+0xec>)
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	0801624c 	.word	0x0801624c
 8000754:	42480000 	.word	0x42480000
 8000758:	24006f8c 	.word	0x24006f8c
 800075c:	24006f90 	.word	0x24006f90
 8000760:	24000508 	.word	0x24000508
 8000764:	24000310 	.word	0x24000310
 8000768:	24000554 	.word	0x24000554
 800076c:	080149ac 	.word	0x080149ac
 8000770:	0800079d 	.word	0x0800079d
 8000774:	24000344 	.word	0x24000344
 8000778:	080149d0 	.word	0x080149d0
 800077c:	080007fd 	.word	0x080007fd
 8000780:	24000348 	.word	0x24000348
 8000784:	080149f4 	.word	0x080149f4
 8000788:	08000815 	.word	0x08000815
 800078c:	2400034c 	.word	0x2400034c
 8000790:	08014a18 	.word	0x08014a18
 8000794:	0800085d 	.word	0x0800085d
 8000798:	24000350 	.word	0x24000350

0800079c <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007a4:	f00e ff38 	bl	800f618 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2102      	movs	r1, #2
 80007ac:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <StartStateLED+0x5c>)
 80007ae:	f001 fed1 	bl	8002554 <HAL_GPIO_WritePin>
    osDelay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b6:	f00c fa51 	bl	800cc5c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007ba:	2101      	movs	r1, #1
 80007bc:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <StartStateLED+0x5c>)
 80007be:	f001 fee2 	bl	8002586 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007c2:	2064      	movs	r0, #100	@ 0x64
 80007c4:	f00c fa4a 	bl	800cc5c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007c8:	2101      	movs	r1, #1
 80007ca:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <StartStateLED+0x5c>)
 80007cc:	f001 fedb 	bl	8002586 <HAL_GPIO_TogglePin>
    osDelay(200);
 80007d0:	20c8      	movs	r0, #200	@ 0xc8
 80007d2:	f00c fa43 	bl	800cc5c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007d6:	2101      	movs	r1, #1
 80007d8:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <StartStateLED+0x5c>)
 80007da:	f001 fed4 	bl	8002586 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007de:	2064      	movs	r0, #100	@ 0x64
 80007e0:	f00c fa3c 	bl	800cc5c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007e4:	2101      	movs	r1, #1
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <StartStateLED+0x5c>)
 80007e8:	f001 fecd 	bl	8002586 <HAL_GPIO_TogglePin>
    osDelay(200);
 80007ec:	20c8      	movs	r0, #200	@ 0xc8
 80007ee:	f00c fa35 	bl	800cc5c <osDelay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007f2:	bf00      	nop
 80007f4:	e7d8      	b.n	80007a8 <StartStateLED+0xc>
 80007f6:	bf00      	nop
 80007f8:	58022000 	.word	0x58022000

080007fc <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    // sprintf((char *)text, "cnt: %ld", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1));
    // OLED_ShowString(0, 24, text, 12);
    // // 获取当前堆栈剩余空间
    // sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
    // OLED_ShowString(0, 48, text, 12);
    OLED_Refresh();
 8000804:	f00f fee2 	bl	80105cc <OLED_Refresh>
    osDelay(100);
 8000808:	2064      	movs	r0, #100	@ 0x64
 800080a:	f00c fa27 	bl	800cc5c <osDelay>
    OLED_Refresh();
 800080e:	bf00      	nop
 8000810:	e7f8      	b.n	8000804 <StartOledShow+0x8>
	...

08000814 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <StartDcSamp+0x3c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f00f fdfd 	bl	8010420 <INA228_getVBUS_V>
 8000826:	eef0 7a40 	vmov.f32	s15, s0
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <StartDcSamp+0x40>)
 800082c:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <StartDcSamp+0x3c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f00f fe77 	bl	8010528 <INA228_getCURRENT_A>
 800083a:	eef0 7a40 	vmov.f32	s15, s0
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <StartDcSamp+0x44>)
 8000840:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f00c fa09 	bl	800cc5c <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 800084a:	bf00      	nop
 800084c:	e7e6      	b.n	800081c <StartDcSamp+0x8>
 800084e:	bf00      	nop
 8000850:	0801624c 	.word	0x0801624c
 8000854:	24006f84 	.word	0x24006f84
 8000858:	24006f88 	.word	0x24006f88

0800085c <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsartDebug */
  /* Infinite loop */
  for (;;)
  {
    CDC_Transmit_FS((uint8_t *)"Hello World!\r\n", 14);
 8000864:	210e      	movs	r1, #14
 8000866:	480b      	ldr	r0, [pc, #44]	@ (8000894 <StartUsartDebug+0x38>)
 8000868:	f00e ff96 	bl	800f798 <CDC_Transmit_FS>
    // 获取当前堆栈剩余空间
    sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
 800086c:	2000      	movs	r0, #0
 800086e:	f00d fde9 	bl	800e444 <uxTaskGetStackHighWaterMark>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	@ (8000898 <StartUsartDebug+0x3c>)
 8000878:	4808      	ldr	r0, [pc, #32]	@ (800089c <StartUsartDebug+0x40>)
 800087a:	f011 fd9f 	bl	80123bc <siprintf>
    OLED_ShowString(0, 48, text, 12);
 800087e:	230c      	movs	r3, #12
 8000880:	4a06      	ldr	r2, [pc, #24]	@ (800089c <StartUsartDebug+0x40>)
 8000882:	2130      	movs	r1, #48	@ 0x30
 8000884:	2000      	movs	r0, #0
 8000886:	f010 f811 	bl	80108ac <OLED_ShowString>
    osDelay(100);
 800088a:	2064      	movs	r0, #100	@ 0x64
 800088c:	f00c f9e6 	bl	800cc5c <osDelay>
    CDC_Transmit_FS((uint8_t *)"Hello World!\r\n", 14);
 8000890:	bf00      	nop
 8000892:	e7e7      	b.n	8000864 <StartUsartDebug+0x8>
 8000894:	0801492c 	.word	0x0801492c
 8000898:	0801493c 	.word	0x0801493c
 800089c:	24000324 	.word	0x24000324

080008a0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b69      	ldr	r3, [pc, #420]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	4a67      	ldr	r2, [pc, #412]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c6:	4b65      	ldr	r3, [pc, #404]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d4:	4b61      	ldr	r3, [pc, #388]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	4a60      	ldr	r2, [pc, #384]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e4:	4b5d      	ldr	r3, [pc, #372]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	4a58      	ldr	r2, [pc, #352]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000902:	4b56      	ldr	r3, [pc, #344]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b52      	ldr	r3, [pc, #328]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	4a51      	ldr	r2, [pc, #324]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000920:	4b4e      	ldr	r3, [pc, #312]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	4a49      	ldr	r2, [pc, #292]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093e:	4b47      	ldr	r3, [pc, #284]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800094c:	4b43      	ldr	r3, [pc, #268]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 8000954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a5c <MX_GPIO_Init+0x1bc>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2120      	movs	r1, #32
 800096e:	483c      	ldr	r0, [pc, #240]	@ (8000a60 <MX_GPIO_Init+0x1c0>)
 8000970:	f001 fdf0 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2102      	movs	r1, #2
 8000978:	483a      	ldr	r0, [pc, #232]	@ (8000a64 <MX_GPIO_Init+0x1c4>)
 800097a:	f001 fdeb 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2188      	movs	r1, #136	@ 0x88
 8000982:	4839      	ldr	r0, [pc, #228]	@ (8000a68 <MX_GPIO_Init+0x1c8>)
 8000984:	f001 fde6 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	4837      	ldr	r0, [pc, #220]	@ (8000a6c <MX_GPIO_Init+0x1cc>)
 800098e:	f001 fde1 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2140      	movs	r1, #64	@ 0x40
 8000996:	4835      	ldr	r0, [pc, #212]	@ (8000a6c <MX_GPIO_Init+0x1cc>)
 8000998:	f001 fddc 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 800099c:	2320      	movs	r3, #32
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	482b      	ldr	r0, [pc, #172]	@ (8000a60 <MX_GPIO_Init+0x1c0>)
 80009b4:	f001 fc1e 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4825      	ldr	r0, [pc, #148]	@ (8000a64 <MX_GPIO_Init+0x1c4>)
 80009d0:	f001 fc10 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 80009d4:	2388      	movs	r3, #136	@ 0x88
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	481f      	ldr	r0, [pc, #124]	@ (8000a68 <MX_GPIO_Init+0x1c8>)
 80009ec:	f001 fc02 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 80009f0:	2340      	movs	r3, #64	@ 0x40
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <MX_GPIO_Init+0x1c8>)
 8000a06:	f001 fbf5 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <MX_GPIO_Init+0x1cc>)
 8000a22:	f001 fbe7 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000a26:	2340      	movs	r3, #64	@ 0x40
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <MX_GPIO_Init+0x1cc>)
 8000a3e:	f001 fbd9 	bl	80021f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2017      	movs	r0, #23
 8000a48:	f001 f8e4 	bl	8001c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a4c:	2017      	movs	r0, #23
 8000a4e:	f001 f8fb 	bl	8001c48 <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	@ 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	58020800 	.word	0x58020800
 8000a64:	58020400 	.word	0x58020400
 8000a68:	58021800 	.word	0x58021800
 8000a6c:	58022000 	.word	0x58022000

08000a70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <MX_I2C1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <MX_I2C1_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000aac:	f001 fda0 	bl	80025f0 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 fa16 	bl	8000ee6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000abe:	f002 fb23 	bl	8003108 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 fa0d 	bl	8000ee6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_I2C1_Init+0x74>)
 8000ad0:	f002 fb65 	bl	800319e <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fa04 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000354 	.word	0x24000354
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	307075b1 	.word	0x307075b1

08000af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ba      	sub	sp, #232	@ 0xe8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	22c0      	movs	r2, #192	@ 0xc0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f011 fcb6 	bl	8012482 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a26      	ldr	r2, [pc, #152]	@ (8000bb4 <HAL_I2C_MspInit+0xc4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d145      	bne.n	8000bac <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b20:	f04f 0208 	mov.w	r2, #8
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fe78 	bl	800582c <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b42:	f000 f9d0 	bl	8000ee6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_I2C_MspInit+0xc8>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <HAL_I2C_MspInit+0xc8>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_I2C_MspInit+0xc8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b64:	23c0      	movs	r3, #192	@ 0xc0
 8000b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <HAL_I2C_MspInit+0xcc>)
 8000b8a:	f001 fb33 	bl	80021f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_I2C_MspInit+0xc8>)
 8000b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b94:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_I2C_MspInit+0xc8>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_I2C_MspInit+0xc8>)
 8000ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bac:	bf00      	nop
 8000bae:	37e8      	adds	r7, #232	@ 0xe8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	58020400 	.word	0x58020400

08000bc0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bc6:	f000 f961 	bl	8000e8c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bca:	4b40      	ldr	r3, [pc, #256]	@ (8000ccc <main+0x10c>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d11b      	bne.n	8000c0e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd6:	f3bf 8f4f 	dsb	sy
}
 8000bda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bdc:	f3bf 8f6f 	isb	sy
}
 8000be0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000be2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ccc <main+0x10c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bea:	f3bf 8f4f 	dsb	sy
}
 8000bee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bf0:	f3bf 8f6f 	isb	sy
}
 8000bf4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bf6:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <main+0x10c>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a34      	ldr	r2, [pc, #208]	@ (8000ccc <main+0x10c>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c02:	f3bf 8f4f 	dsb	sy
}
 8000c06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c08:	f3bf 8f6f 	isb	sy
}
 8000c0c:	e000      	b.n	8000c10 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c0e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ccc <main+0x10c>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d138      	bne.n	8000c8e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ccc <main+0x10c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c24:	f3bf 8f4f 	dsb	sy
}
 8000c28:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ccc <main+0x10c>)
 8000c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c30:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	0b5b      	lsrs	r3, r3, #13
 8000c36:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c3a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c44:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	015a      	lsls	r2, r3, #5
 8000c4a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000c4e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c54:	491d      	ldr	r1, [pc, #116]	@ (8000ccc <main+0x10c>)
 8000c56:	4313      	orrs	r3, r2
 8000c58:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1e5a      	subs	r2, r3, #1
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1ef      	bne.n	8000c46 <main+0x86>
    } while(sets-- != 0U);
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	60ba      	str	r2, [r7, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1e5      	bne.n	8000c3c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c70:	f3bf 8f4f 	dsb	sy
}
 8000c74:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <main+0x10c>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <main+0x10c>)
 8000c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c82:	f3bf 8f4f 	dsb	sy
}
 8000c86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c88:	f3bf 8f6f 	isb	sy
}
 8000c8c:	e000      	b.n	8000c90 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c8e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 fe7c 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f81c 	bl	8000cd0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c98:	f000 f8c8 	bl	8000e2c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9c:	f7ff fe00 	bl	80008a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca0:	f000 f928 	bl	8000ef4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000ca4:	f000 f97c 	bl	8000fa0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ca8:	f000 fd34 	bl	8001714 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000cac:	f7ff fee0 	bl	8000a70 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cb0:	f000 fc68 	bl	8001584 <MX_TIM1_Init>
  MX_DAC1_Init();
 8000cb4:	f7ff fc7a 	bl	80005ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000cb8:	f00e fcae 	bl	800f618 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cbc:	f00b fef2 	bl	800caa4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000cc0:	f7ff fcf4 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cc4:	f00b ff12 	bl	800caec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <main+0x108>
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09e      	sub	sp, #120	@ 0x78
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cda:	224c      	movs	r2, #76	@ 0x4c
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f011 fbcf 	bl	8012482 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2220      	movs	r2, #32
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f011 fbc8 	bl	8012482 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f003 fd3e 	bl	8004774 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b48      	ldr	r3, [pc, #288]	@ (8000e20 <SystemClock_Config+0x150>)
 8000cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d00:	4a47      	ldr	r2, [pc, #284]	@ (8000e20 <SystemClock_Config+0x150>)
 8000d02:	f023 0301 	bic.w	r3, r3, #1
 8000d06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d08:	4b45      	ldr	r3, [pc, #276]	@ (8000e20 <SystemClock_Config+0x150>)
 8000d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b44      	ldr	r3, [pc, #272]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a43      	ldr	r2, [pc, #268]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000d2a:	bf00      	nop
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d38:	d1f8      	bne.n	8000d2c <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e28 <SystemClock_Config+0x158>)
 8000d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d40:	4a39      	ldr	r2, [pc, #228]	@ (8000e28 <SystemClock_Config+0x158>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <SystemClock_Config+0x158>)
 8000d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	4b31      	ldr	r3, [pc, #196]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a30      	ldr	r2, [pc, #192]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <SystemClock_Config+0x150>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d76:	4a2a      	ldr	r2, [pc, #168]	@ (8000e20 <SystemClock_Config+0x150>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d7e:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <SystemClock_Config+0x150>)
 8000d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000d8a:	bf00      	nop
 8000d8c:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <SystemClock_Config+0x154>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d98:	d1f8      	bne.n	8000d8c <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da8:	2302      	movs	r3, #2
 8000daa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000db0:	23c0      	movs	r3, #192	@ 0xc0
 8000db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000db8:	2314      	movs	r3, #20
 8000dba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fd19 	bl	8004808 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ddc:	f000 f883 	bl	8000ee6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000de0:	233f      	movs	r3, #63	@ 0x3f
 8000de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2303      	movs	r3, #3
 8000de6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dec:	2308      	movs	r3, #8
 8000dee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000df0:	2340      	movs	r3, #64	@ 0x40
 8000df2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df4:	2340      	movs	r3, #64	@ 0x40
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2104      	movs	r1, #4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 f957 	bl	80050bc <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e14:	f000 f867 	bl	8000ee6 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3778      	adds	r7, #120	@ 0x78
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58000400 	.word	0x58000400
 8000e24:	58024800 	.word	0x58024800
 8000e28:	58024400 	.word	0x58024400

08000e2c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0b0      	sub	sp, #192	@ 0xc0
 8000e30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	22c0      	movs	r2, #192	@ 0xc0
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f011 fb22 	bl	8012482 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000e3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000e4a:	2319      	movs	r3, #25
 8000e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000e4e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e70:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4618      	mov	r0, r3
 8000e76:	f004 fcd9 	bl	800582c <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000e80:	f000 f831 	bl	8000ee6 <Error_Handler>
  }
}
 8000e84:	bf00      	nop
 8000e86:	37c0      	adds	r7, #192	@ 0xc0
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e9e:	f000 fee1 	bl	8001c64 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000eaa:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000eae:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fefe 	bl	8001cd4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ed8:	2004      	movs	r0, #4
 8000eda:	f000 fedb 	bl	8001c94 <HAL_MPU_Enable>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eea:	b672      	cpsid	i
}
 8000eec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eee:	bf00      	nop
 8000ef0:	e7fd      	b.n	8000eee <Error_Handler+0x8>
	...

08000ef4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000efa:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <MX_SPI1_Init+0xa8>)
 8000efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efe:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f06:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f0c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f14:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f34:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f46:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f54:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_SPI1_Init+0xa4>)
 8000f86:	f005 ffbf 	bl	8006f08 <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f90:	f7ff ffa9 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	240003a8 	.word	0x240003a8
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fa6:	4a29      	ldr	r2, [pc, #164]	@ (800104c <MX_SPI2_Init+0xac>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000faa:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fb4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fb8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fd0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fd8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8000ff8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ffc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8001006:	2200      	movs	r2, #0
 8001008:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPI2_Init+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8001018:	2200      	movs	r2, #0
 800101a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_SPI2_Init+0xa8>)
 800101e:	2200      	movs	r2, #0
 8001020:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8001024:	2200      	movs	r2, #0
 8001026:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <MX_SPI2_Init+0xa8>)
 800102a:	2200      	movs	r2, #0
 800102c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8001030:	2200      	movs	r2, #0
 8001032:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_SPI2_Init+0xa8>)
 8001036:	f005 ff67 	bl	8006f08 <HAL_SPI_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001040:	f7ff ff51 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	24000430 	.word	0x24000430
 800104c:	40003800 	.word	0x40003800

08001050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	@ 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a34      	ldr	r2, [pc, #208]	@ (8001140 <HAL_SPI_MspInit+0xf0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12e      	bne.n	80010d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001078:	4a32      	ldr	r2, [pc, #200]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 800107a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800107e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001082:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 8001084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	4a2b      	ldr	r2, [pc, #172]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 80010ae:	23a0      	movs	r3, #160	@ 0xa0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010be:	2305      	movs	r3, #5
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481f      	ldr	r0, [pc, #124]	@ (8001148 <HAL_SPI_MspInit+0xf8>)
 80010ca:	f001 f893 	bl	80021f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010ce:	e032      	b.n	8001136 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <HAL_SPI_MspInit+0xfc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12d      	bne.n	8001136 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e0:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010ea:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_SPI_MspInit+0xf4>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001116:	2306      	movs	r3, #6
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001126:	2305      	movs	r3, #5
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	@ (8001150 <HAL_SPI_MspInit+0x100>)
 8001132:	f001 f85f 	bl	80021f4 <HAL_GPIO_Init>
}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	@ 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40013000 	.word	0x40013000
 8001144:	58024400 	.word	0x58024400
 8001148:	58020000 	.word	0x58020000
 800114c:	40003800 	.word	0x40003800
 8001150:	58022000 	.word	0x58022000

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_MspInit+0x38>)
 800115c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_MspInit+0x38>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_MspInit+0x38>)
 800116c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	210f      	movs	r1, #15
 800117c:	f06f 0001 	mvn.w	r0, #1
 8001180:	f000 fd48 	bl	8001c14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400

08001190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b090      	sub	sp, #64	@ 0x40
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	d827      	bhi.n	80011ee <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800119e:	2200      	movs	r2, #0
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	2036      	movs	r0, #54	@ 0x36
 80011a4:	f000 fd36 	bl	8001c14 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011a8:	2036      	movs	r0, #54	@ 0x36
 80011aa:	f000 fd4d 	bl	8001c48 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80011ae:	4a29      	ldr	r2, [pc, #164]	@ (8001254 <HAL_InitTick+0xc4>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <HAL_InitTick+0xc8>)
 80011b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ba:	4a27      	ldr	r2, [pc, #156]	@ (8001258 <HAL_InitTick+0xc8>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <HAL_InitTick+0xc8>)
 80011c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d2:	f107 0210 	add.w	r2, r7, #16
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 fae3 	bl	80057a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <HAL_InitTick+0x6a>
 80011ec:	e001      	b.n	80011f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e02b      	b.n	800124a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011f2:	f004 fac3 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 80011f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011f8:	e004      	b.n	8001204 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011fa:	f004 fabf 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 80011fe:	4603      	mov	r3, r0
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001206:	4a15      	ldr	r2, [pc, #84]	@ (800125c <HAL_InitTick+0xcc>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	0c9b      	lsrs	r3, r3, #18
 800120e:	3b01      	subs	r3, #1
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_InitTick+0xd0>)
 8001214:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <HAL_InitTick+0xd4>)
 8001216:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_InitTick+0xd0>)
 800121a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800121e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <HAL_InitTick+0xd0>)
 8001222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001224:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <HAL_InitTick+0xd0>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_InitTick+0xd0>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001232:	480b      	ldr	r0, [pc, #44]	@ (8001260 <HAL_InitTick+0xd0>)
 8001234:	f006 fcd5 	bl	8007be2 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d104      	bne.n	8001248 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800123e:	4808      	ldr	r0, [pc, #32]	@ (8001260 <HAL_InitTick+0xd0>)
 8001240:	f006 fd26 	bl	8007c90 <HAL_TIM_Base_Start_IT>
 8001244:	4603      	mov	r3, r0
 8001246:	e000      	b.n	800124a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	3740      	adds	r7, #64	@ 0x40
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24000008 	.word	0x24000008
 8001258:	58024400 	.word	0x58024400
 800125c:	431bde83 	.word	0x431bde83
 8001260:	240004b8 	.word	0x240004b8
 8001264:	40001000 	.word	0x40001000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 80012a2:	2040      	movs	r0, #64	@ 0x40
 80012a4:	f001 f989 	bl	80025ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <TIM6_DAC_IRQHandler+0x20>)
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80012ba:	4804      	ldr	r0, [pc, #16]	@ (80012cc <TIM6_DAC_IRQHandler+0x20>)
 80012bc:	f000 fdc3 	bl	8001e46 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <TIM6_DAC_IRQHandler+0x24>)
 80012c2:	f006 fecd 	bl	8008060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24000310 	.word	0x24000310
 80012d0:	240004b8 	.word	0x240004b8

080012d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <OTG_FS_IRQHandler+0x10>)
 80012da:	f002 f8ed 	bl	80034b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	240063d4 	.word	0x240063d4

080012e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_kill>:

int _kill(int pid, int sig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001302:	f011 f921 	bl	8012548 <__errno>
 8001306:	4603      	mov	r3, r0
 8001308:	2216      	movs	r2, #22
 800130a:	601a      	str	r2, [r3, #0]
  return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_exit>:

void _exit (int status)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffe7 	bl	80012f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800132a:	bf00      	nop
 800132c:	e7fd      	b.n	800132a <_exit+0x12>

0800132e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e00a      	b.n	8001356 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001340:	f3af 8000 	nop.w
 8001344:	4601      	mov	r1, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf0      	blt.n	8001340 <_read+0x12>
  }

  return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e009      	b.n	800138e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf1      	blt.n	800137a <_write+0x12>
  }
  return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_close>:

int _close(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_isatty>:

int _isatty(int file)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f011 f886 	bl	8012548 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	24080000 	.word	0x24080000
 8001468:	00004000 	.word	0x00004000
 800146c:	24000504 	.word	0x24000504
 8001470:	240070e0 	.word	0x240070e0

08001474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001478:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <SystemInit+0xe4>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147e:	4a36      	ldr	r2, [pc, #216]	@ (8001558 <SystemInit+0xe4>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001488:	4b34      	ldr	r3, [pc, #208]	@ (800155c <SystemInit+0xe8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	2b06      	cmp	r3, #6
 8001492:	d807      	bhi.n	80014a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001494:	4b31      	ldr	r3, [pc, #196]	@ (800155c <SystemInit+0xe8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 030f 	bic.w	r3, r3, #15
 800149c:	4a2f      	ldr	r2, [pc, #188]	@ (800155c <SystemInit+0xe8>)
 800149e:	f043 0307 	orr.w	r3, r3, #7
 80014a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001560 <SystemInit+0xec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001560 <SystemInit+0xec>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <SystemInit+0xec>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <SystemInit+0xec>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4929      	ldr	r1, [pc, #164]	@ (8001560 <SystemInit+0xec>)
 80014bc:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <SystemInit+0xf0>)
 80014be:	4013      	ands	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <SystemInit+0xe8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ce:	4b23      	ldr	r3, [pc, #140]	@ (800155c <SystemInit+0xe8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 030f 	bic.w	r3, r3, #15
 80014d6:	4a21      	ldr	r2, [pc, #132]	@ (800155c <SystemInit+0xe8>)
 80014d8:	f043 0307 	orr.w	r3, r3, #7
 80014dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <SystemInit+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <SystemInit+0xec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <SystemInit+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <SystemInit+0xec>)
 80014f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <SystemInit+0xf4>)
 80014f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <SystemInit+0xec>)
 80014f8:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <SystemInit+0xf8>)
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014fc:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <SystemInit+0xec>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <SystemInit+0xfc>)
 8001500:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <SystemInit+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <SystemInit+0xec>)
 800150a:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <SystemInit+0xfc>)
 800150c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <SystemInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <SystemInit+0xec>)
 8001516:	4a16      	ldr	r2, [pc, #88]	@ (8001570 <SystemInit+0xfc>)
 8001518:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <SystemInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <SystemInit+0xec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <SystemInit+0xec>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <SystemInit+0xec>)
 800152e:	2200      	movs	r2, #0
 8001530:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <SystemInit+0x100>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <SystemInit+0x104>)
 8001538:	4013      	ands	r3, r2
 800153a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800153e:	d202      	bcs.n	8001546 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <SystemInit+0x108>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <SystemInit+0x10c>)
 8001548:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800154c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	52002000 	.word	0x52002000
 8001560:	58024400 	.word	0x58024400
 8001564:	eaf6ed7f 	.word	0xeaf6ed7f
 8001568:	02020200 	.word	0x02020200
 800156c:	01ff0000 	.word	0x01ff0000
 8001570:	01010280 	.word	0x01010280
 8001574:	5c001000 	.word	0x5c001000
 8001578:	ffff0000 	.word	0xffff0000
 800157c:	51008108 	.word	0x51008108
 8001580:	52004000 	.word	0x52004000

08001584 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09a      	sub	sp, #104	@ 0x68
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	222c      	movs	r2, #44	@ 0x2c
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f010 ff5f 	bl	8012482 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c4:	4b51      	ldr	r3, [pc, #324]	@ (800170c <MX_TIM1_Init+0x188>)
 80015c6:	4a52      	ldr	r2, [pc, #328]	@ (8001710 <MX_TIM1_Init+0x18c>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015ca:	4b50      	ldr	r3, [pc, #320]	@ (800170c <MX_TIM1_Init+0x188>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80015d0:	4b4e      	ldr	r3, [pc, #312]	@ (800170c <MX_TIM1_Init+0x188>)
 80015d2:	2220      	movs	r2, #32
 80015d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 80015d6:	4b4d      	ldr	r3, [pc, #308]	@ (800170c <MX_TIM1_Init+0x188>)
 80015d8:	f241 726f 	movw	r2, #5999	@ 0x176f
 80015dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b4b      	ldr	r3, [pc, #300]	@ (800170c <MX_TIM1_Init+0x188>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e4:	4b49      	ldr	r3, [pc, #292]	@ (800170c <MX_TIM1_Init+0x188>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b48      	ldr	r3, [pc, #288]	@ (800170c <MX_TIM1_Init+0x188>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015f0:	4846      	ldr	r0, [pc, #280]	@ (800170c <MX_TIM1_Init+0x188>)
 80015f2:	f006 faf6 	bl	8007be2 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f7ff fc73 	bl	8000ee6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001604:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001606:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800160a:	4619      	mov	r1, r3
 800160c:	483f      	ldr	r0, [pc, #252]	@ (800170c <MX_TIM1_Init+0x188>)
 800160e:	f006 ff43 	bl	8008498 <HAL_TIM_ConfigClockSource>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001618:	f7ff fc65 	bl	8000ee6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800161c:	483b      	ldr	r0, [pc, #236]	@ (800170c <MX_TIM1_Init+0x188>)
 800161e:	f006 fbaf 	bl	8007d80 <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001628:	f7ff fc5d 	bl	8000ee6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001638:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800163c:	4619      	mov	r1, r3
 800163e:	4833      	ldr	r0, [pc, #204]	@ (800170c <MX_TIM1_Init+0x188>)
 8001640:	f007 fd4c 	bl	80090dc <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800164a:	f7ff fc4c 	bl	8000ee6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164e:	2360      	movs	r3, #96	@ 0x60
 8001650:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 8001652:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8001656:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001660:	2304      	movs	r3, #4
 8001662:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4825      	ldr	r0, [pc, #148]	@ (800170c <MX_TIM1_Init+0x188>)
 8001676:	f006 fdfb 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001680:	f7ff fc31 	bl	8000ee6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001684:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001688:	2204      	movs	r2, #4
 800168a:	4619      	mov	r1, r3
 800168c:	481f      	ldr	r0, [pc, #124]	@ (800170c <MX_TIM1_Init+0x188>)
 800168e:	f006 fdef 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001698:	f7ff fc25 	bl	8000ee6 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016a4:	2208      	movs	r2, #8
 80016a6:	4619      	mov	r1, r3
 80016a8:	4818      	ldr	r0, [pc, #96]	@ (800170c <MX_TIM1_Init+0x188>)
 80016aa:	f006 fde1 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80016b4:	f7ff fc17 	bl	8000ee6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	@ (800170c <MX_TIM1_Init+0x188>)
 80016ee:	f007 fd83 	bl	80091f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80016f8:	f7ff fbf5 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016fc:	4803      	ldr	r0, [pc, #12]	@ (800170c <MX_TIM1_Init+0x188>)
 80016fe:	f000 f8b9 	bl	8001874 <HAL_TIM_MspPostInit>

}
 8001702:	bf00      	nop
 8001704:	3768      	adds	r7, #104	@ 0x68
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	24000508 	.word	0x24000508
 8001710:	40010000 	.word	0x40010000

08001714 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08e      	sub	sp, #56	@ 0x38
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001746:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <MX_TIM2_Init+0xec>)
 8001748:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800174c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800174e:	4b2c      	ldr	r3, [pc, #176]	@ (8001800 <MX_TIM2_Init+0xec>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <MX_TIM2_Init+0xec>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <MX_TIM2_Init+0xec>)
 800175c:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001760:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <MX_TIM2_Init+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <MX_TIM2_Init+0xec>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800176e:	4824      	ldr	r0, [pc, #144]	@ (8001800 <MX_TIM2_Init+0xec>)
 8001770:	f006 fa37 	bl	8007be2 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800177a:	f7ff fbb4 	bl	8000ee6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001784:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001788:	4619      	mov	r1, r3
 800178a:	481d      	ldr	r0, [pc, #116]	@ (8001800 <MX_TIM2_Init+0xec>)
 800178c:	f006 fe84 	bl	8008498 <HAL_TIM_ConfigClockSource>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001796:	f7ff fba6 	bl	8000ee6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800179a:	4819      	ldr	r0, [pc, #100]	@ (8001800 <MX_TIM2_Init+0xec>)
 800179c:	f006 faf0 	bl	8007d80 <HAL_TIM_PWM_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017a6:	f7ff fb9e 	bl	8000ee6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	4811      	ldr	r0, [pc, #68]	@ (8001800 <MX_TIM2_Init+0xec>)
 80017ba:	f007 fc8f 	bl	80090dc <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017c4:	f7ff fb8f 	bl	8000ee6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c8:	2360      	movs	r3, #96	@ 0x60
 80017ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80017cc:	f242 3327 	movw	r3, #8999	@ 0x2327
 80017d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	4807      	ldr	r0, [pc, #28]	@ (8001800 <MX_TIM2_Init+0xec>)
 80017e2:	f006 fd45 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80017ec:	f7ff fb7b 	bl	8000ee6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <MX_TIM2_Init+0xec>)
 80017f2:	f000 f83f 	bl	8001874 <HAL_TIM_MspPostInit>

}
 80017f6:	bf00      	nop
 80017f8:	3738      	adds	r7, #56	@ 0x38
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24000554 	.word	0x24000554

08001804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a16      	ldr	r2, [pc, #88]	@ (800186c <HAL_TIM_Base_MspInit+0x68>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10f      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001816:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800181c:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001834:	e013      	b.n	800185e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800183e:	d10e      	bne.n	800185e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <HAL_TIM_Base_MspInit+0x6c>)
 8001852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40010000 	.word	0x40010000
 8001870:	58024400 	.word	0x58024400

08001874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a25      	ldr	r2, [pc, #148]	@ (8001928 <HAL_TIM_MspPostInit+0xb4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d120      	bne.n	80018d8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001896:	4b25      	ldr	r3, [pc, #148]	@ (800192c <HAL_TIM_MspPostInit+0xb8>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189c:	4a23      	ldr	r2, [pc, #140]	@ (800192c <HAL_TIM_MspPostInit+0xb8>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <HAL_TIM_MspPostInit+0xb8>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 80018b4:	f24a 0301 	movw	r3, #40961	@ 0xa001
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4817      	ldr	r0, [pc, #92]	@ (8001930 <HAL_TIM_MspPostInit+0xbc>)
 80018d2:	f000 fc8f 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018d6:	e023      	b.n	8001920 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e0:	d11e      	bne.n	8001920 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_TIM_MspPostInit+0xb8>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e8:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_TIM_MspPostInit+0xb8>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_TIM_MspPostInit+0xb8>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001900:	2301      	movs	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001910:	2301      	movs	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <HAL_TIM_MspPostInit+0xc0>)
 800191c:	f000 fc6a 	bl	80021f4 <HAL_GPIO_Init>
}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	@ 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010000 	.word	0x40010000
 800192c:	58024400 	.word	0x58024400
 8001930:	58020400 	.word	0x58020400
 8001934:	58020000 	.word	0x58020000

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001970 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800193c:	f7ff fd9a 	bl	8001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	@ (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	@ (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f010 fdf5 	bl	8012554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff f929 	bl	8000bc0 <main>
  bx  lr
 800196e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001970:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001974:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001978:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 800197c:	08016de8 	.word	0x08016de8
  ldr r2, =_sbss
 8001980:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001984:	240070e0 	.word	0x240070e0

08001988 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC3_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001992:	2003      	movs	r0, #3
 8001994:	f000 f933 	bl	8001bfe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001998:	f003 fd46 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_Init+0x68>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	4913      	ldr	r1, [pc, #76]	@ (80019f8 <HAL_Init+0x6c>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_Init+0x68>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	4a0e      	ldr	r2, [pc, #56]	@ (80019f8 <HAL_Init+0x6c>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	4a0b      	ldr	r2, [pc, #44]	@ (80019fc <HAL_Init+0x70>)
 80019ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <HAL_Init+0x74>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d6:	2005      	movs	r0, #5
 80019d8:	f7ff fbda 	bl	8001190 <HAL_InitTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e002      	b.n	80019ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019e6:	f7ff fbb5 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	58024400 	.word	0x58024400
 80019f8:	08014a3c 	.word	0x08014a3c
 80019fc:	24000004 	.word	0x24000004
 8001a00:	24000000 	.word	0x24000000

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	2400000c 	.word	0x2400000c
 8001a28:	240005a0 	.word	0x240005a0

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	240005a0 	.word	0x240005a0

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2400000c 	.word	0x2400000c

08001a8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_GetREVID+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0c1b      	lsrs	r3, r3, #16
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	5c001000 	.word	0x5c001000

08001aa4 <__NVIC_SetPriorityGrouping>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	05fa0000 	.word	0x05fa0000

08001aec <__NVIC_GetPriorityGrouping>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	@ (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	@ 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ff4c 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c22:	f7ff ff63 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	6978      	ldr	r0, [r7, #20]
 8001c2e:	f7ff ffb3 	bl	8001b98 <NVIC_EncodePriority>
 8001c32:	4602      	mov	r2, r0
 8001c34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff82 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c40:	bf00      	nop
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff56 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c68:	f3bf 8f5f 	dmb	sy
}
 8001c6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_MPU_Disable+0x28>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <HAL_MPU_Disable+0x28>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c78:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c7a:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_MPU_Disable+0x2c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00
 8001c90:	e000ed90 	.word	0xe000ed90

08001c94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_MPU_Enable+0x38>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <HAL_MPU_Enable+0x3c>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb2:	f3bf 8f4f 	dsb	sy
}
 8001cb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb8:	f3bf 8f6f 	isb	sy
}
 8001cbc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed90 	.word	0xe000ed90
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	785a      	ldrb	r2, [r3, #1]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cf0:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7b1b      	ldrb	r3, [r3, #12]
 8001cfc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7adb      	ldrb	r3, [r3, #11]
 8001d02:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7a9b      	ldrb	r3, [r3, #10]
 8001d0a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7b5b      	ldrb	r3, [r3, #13]
 8001d12:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7b9b      	ldrb	r3, [r3, #14]
 8001d1a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7bdb      	ldrb	r3, [r3, #15]
 8001d22:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7a5b      	ldrb	r3, [r3, #9]
 8001d2a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7a1b      	ldrb	r3, [r3, #8]
 8001d32:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d34:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d3e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d40:	6113      	str	r3, [r2, #16]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed90 	.word	0xe000ed90

08001d54 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e014      	b.n	8001d90 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	791b      	ldrb	r3, [r3, #4]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fc4a 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e046      	b.n	8001e3a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	795b      	ldrb	r3, [r3, #5]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_DAC_Start+0x20>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e040      	b.n	8001e3a <HAL_DAC_Start+0xa2>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d11d      	bne.n	8001e2c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	e014      	b.n	8001e2c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2102      	movs	r1, #2
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0202 	orr.w	r2, r2, #2
 8001e2a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01d      	beq.n	8001ea4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d018      	beq.n	8001ea4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2204      	movs	r2, #4
 8001e76:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e9c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f851 	bl	8001f46 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01d      	beq.n	8001eea <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d018      	beq.n	8001eea <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f043 0202 	orr.w	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ed2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f97b 	bl	80021e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e015      	b.n	8001f3a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3308      	adds	r3, #8
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e004      	b.n	8001f30 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3314      	adds	r3, #20
 8001f2e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	461a      	mov	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_DAC_ConfigChannel+0x1e>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e12a      	b.n	80021d4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	795b      	ldrb	r3, [r3, #5]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_DAC_ConfigChannel+0x2e>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e124      	b.n	80021d4 <HAL_DAC_ConfigChannel+0x278>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2202      	movs	r2, #2
 8001f94:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d17a      	bne.n	8002094 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001f9e:	f7ff fd45 	bl	8001a2c <HAL_GetTick>
 8001fa2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d13d      	bne.n	8002026 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001faa:	e018      	b.n	8001fde <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fac:	f7ff fd3e 	bl	8001a2c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d911      	bls.n	8001fde <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fc0:	4b86      	ldr	r3, [pc, #536]	@ (80021dc <HAL_DAC_ConfigChannel+0x280>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f043 0208 	orr.w	r2, r3, #8
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0fa      	b.n	80021d4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe4:	4b7d      	ldr	r3, [pc, #500]	@ (80021dc <HAL_DAC_ConfigChannel+0x280>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1df      	bne.n	8001fac <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	6992      	ldr	r2, [r2, #24]
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ff6:	e020      	b.n	800203a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ff8:	f7ff fd18 	bl	8001a2c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d90f      	bls.n	8002026 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0a      	bge.n	8002026 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f043 0208 	orr.w	r2, r3, #8
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2203      	movs	r2, #3
 8002020:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0d6      	b.n	80021d4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202c:	2b00      	cmp	r3, #0
 800202e:	dbe3      	blt.n	8001ff8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	6992      	ldr	r2, [r2, #24]
 8002038:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	ea02 0103 	and.w	r1, r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	21ff      	movs	r1, #255	@ 0xff
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	ea02 0103 	and.w	r1, r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d11d      	bne.n	80020d8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	221f      	movs	r2, #31
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2207      	movs	r2, #7
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d102      	bne.n	8002102 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002100:	e00f      	b.n	8002122 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d102      	bne.n	8002110 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800210a:	2301      	movs	r3, #1
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
 800210e:	e008      	b.n	8002122 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002118:	2301      	movs	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
 800211c:	e001      	b.n	8002122 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4313      	orrs	r3, r2
 800212c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43da      	mvns	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	22c0      	movs	r2, #192	@ 0xc0
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80021d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	@ 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20008000 	.word	0x20008000

080021e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002202:	4b89      	ldr	r3, [pc, #548]	@ (8002428 <HAL_GPIO_Init+0x234>)
 8002204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002206:	e194      	b.n	8002532 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8186 	beq.w	800252c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d005      	beq.n	8002238 <HAL_GPIO_Init+0x44>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d130      	bne.n	800229a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226e:	2201      	movs	r2, #1
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 0201 	and.w	r2, r3, #1
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d017      	beq.n	80022d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d123      	bne.n	800232a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	69b9      	ldr	r1, [r7, #24]
 8002326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0203 	and.w	r2, r3, #3
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80e0 	beq.w	800252c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236c:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <HAL_GPIO_Init+0x238>)
 800236e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002372:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <HAL_GPIO_Init+0x238>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800237c:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_GPIO_Init+0x238>)
 800237e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238a:	4a29      	ldr	r2, [pc, #164]	@ (8002430 <HAL_GPIO_Init+0x23c>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a20      	ldr	r2, [pc, #128]	@ (8002434 <HAL_GPIO_Init+0x240>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d052      	beq.n	800245c <HAL_GPIO_Init+0x268>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002438 <HAL_GPIO_Init+0x244>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d031      	beq.n	8002422 <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <HAL_GPIO_Init+0x248>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <HAL_GPIO_Init+0x24c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <HAL_GPIO_Init+0x250>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002448 <HAL_GPIO_Init+0x254>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_GPIO_Init+0x258>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a19      	ldr	r2, [pc, #100]	@ (8002450 <HAL_GPIO_Init+0x25c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a18      	ldr	r2, [pc, #96]	@ (8002454 <HAL_GPIO_Init+0x260>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a17      	ldr	r2, [pc, #92]	@ (8002458 <HAL_GPIO_Init+0x264>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20e>
 80023fe:	2309      	movs	r3, #9
 8002400:	e02d      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002402:	230a      	movs	r3, #10
 8002404:	e02b      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002406:	2308      	movs	r3, #8
 8002408:	e029      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800240a:	2307      	movs	r3, #7
 800240c:	e027      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800240e:	2306      	movs	r3, #6
 8002410:	e025      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002412:	2305      	movs	r3, #5
 8002414:	e023      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002416:	2304      	movs	r3, #4
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800241a:	2303      	movs	r3, #3
 800241c:	e01f      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800241e:	2302      	movs	r3, #2
 8002420:	e01d      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002422:	2301      	movs	r3, #1
 8002424:	e01b      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002426:	bf00      	nop
 8002428:	58000080 	.word	0x58000080
 800242c:	58024400 	.word	0x58024400
 8002430:	58000400 	.word	0x58000400
 8002434:	58020000 	.word	0x58020000
 8002438:	58020400 	.word	0x58020400
 800243c:	58020800 	.word	0x58020800
 8002440:	58020c00 	.word	0x58020c00
 8002444:	58021000 	.word	0x58021000
 8002448:	58021400 	.word	0x58021400
 800244c:	58021800 	.word	0x58021800
 8002450:	58021c00 	.word	0x58021c00
 8002454:	58022000 	.word	0x58022000
 8002458:	58022400 	.word	0x58022400
 800245c:	2300      	movs	r3, #0
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246e:	4938      	ldr	r1, [pc, #224]	@ (8002550 <HAL_GPIO_Init+0x35c>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3301      	adds	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae63 	bne.w	8002208 <HAL_GPIO_Init+0x14>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3724      	adds	r7, #36	@ 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	58000400 	.word	0x58000400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002598:	887a      	ldrh	r2, [r7, #2]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	041a      	lsls	r2, r3, #16
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	400b      	ands	r3, r1
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00f f819 	bl	8011618 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e08b      	b.n	800271a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe fa6a 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	@ 0x24
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002640:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002650:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	e006      	b.n	8002678 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002676:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d108      	bne.n	8002692 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	e007      	b.n	80026a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_I2C_Init+0x134>)
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69d9      	ldr	r1, [r3, #28]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	02008000 	.word	0x02008000

08002728 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	817b      	strh	r3, [r7, #10]
 800273a:	460b      	mov	r3, r1
 800273c:	813b      	strh	r3, [r7, #8]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b20      	cmp	r3, #32
 800274c:	f040 80f9 	bne.w	8002942 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_I2C_Mem_Write+0x34>
 8002756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002762:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0ed      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Mem_Write+0x4e>
 8002772:	2302      	movs	r3, #2
 8002774:	e0e6      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800277e:	f7ff f955 	bl	8001a2c <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2319      	movs	r3, #25
 800278a:	2201      	movs	r2, #1
 800278c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fac3 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0d1      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2221      	movs	r2, #33	@ 0x21
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027c8:	88f8      	ldrh	r0, [r7, #6]
 80027ca:	893a      	ldrh	r2, [r7, #8]
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4603      	mov	r3, r0
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f9d3 	bl	8002b84 <I2C_RequestMemoryWrite>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0a9      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2bff      	cmp	r3, #255	@ 0xff
 80027f8:	d90e      	bls.n	8002818 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	22ff      	movs	r2, #255	@ 0xff
 80027fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002804:	b2da      	uxtb	r2, r3
 8002806:	8979      	ldrh	r1, [r7, #10]
 8002808:	2300      	movs	r3, #0
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fc47 	bl	80030a4 <I2C_TransferConfig>
 8002816:	e00f      	b.n	8002838 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	2300      	movs	r3, #0
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fc36 	bl	80030a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fac6 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e07b      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d034      	beq.n	80028f0 <HAL_I2C_Mem_Write+0x1c8>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d130      	bne.n	80028f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	@ 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fa3f 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e04d      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2bff      	cmp	r3, #255	@ 0xff
 80028b0:	d90e      	bls.n	80028d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	22ff      	movs	r2, #255	@ 0xff
 80028b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fbeb 	bl	80030a4 <I2C_TransferConfig>
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	8979      	ldrh	r1, [r7, #10]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fbda 	bl	80030a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d19e      	bne.n	8002838 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 faac 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01a      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2220      	movs	r2, #32
 8002914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_I2C_Mem_Write+0x224>)
 8002922:	400b      	ands	r3, r1
 8002924:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	fe00e800 	.word	0xfe00e800

08002950 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b20      	cmp	r3, #32
 8002974:	f040 80fd 	bne.w	8002b72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_I2C_Mem_Read+0x34>
 800297e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0f1      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_I2C_Mem_Read+0x4e>
 800299a:	2302      	movs	r3, #2
 800299c:	e0ea      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a6:	f7ff f841 	bl	8001a2c <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2319      	movs	r3, #25
 80029b2:	2201      	movs	r2, #1
 80029b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f9af 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0d5      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2222      	movs	r2, #34	@ 0x22
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2240      	movs	r2, #64	@ 0x40
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f0:	88f8      	ldrh	r0, [r7, #6]
 80029f2:	893a      	ldrh	r2, [r7, #8]
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4603      	mov	r3, r0
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f913 	bl	8002c2c <I2C_RequestMemoryRead>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0ad      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2bff      	cmp	r3, #255	@ 0xff
 8002a20:	d90e      	bls.n	8002a40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	22ff      	movs	r2, #255	@ 0xff
 8002a26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	8979      	ldrh	r1, [r7, #10]
 8002a30:	4b52      	ldr	r3, [pc, #328]	@ (8002b7c <HAL_I2C_Mem_Read+0x22c>)
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fb33 	bl	80030a4 <I2C_TransferConfig>
 8002a3e:	e00f      	b.n	8002a60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	4b4a      	ldr	r3, [pc, #296]	@ (8002b7c <HAL_I2C_Mem_Read+0x22c>)
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fb22 	bl	80030a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a66:	2200      	movs	r2, #0
 8002a68:	2104      	movs	r1, #4
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f956 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07c      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d034      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x1d0>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d130      	bne.n	8002b20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f927 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e04d      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2bff      	cmp	r3, #255	@ 0xff
 8002ae0:	d90e      	bls.n	8002b00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	22ff      	movs	r2, #255	@ 0xff
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fad3 	bl	80030a4 <I2C_TransferConfig>
 8002afe:	e00f      	b.n	8002b20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	8979      	ldrh	r1, [r7, #10]
 8002b12:	2300      	movs	r3, #0
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fac2 	bl	80030a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d19a      	bne.n	8002a60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f994 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e01a      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2220      	movs	r2, #32
 8002b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_I2C_Mem_Read+0x230>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
  }
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	80002400 	.word	0x80002400
 8002b80:	fe00e800 	.word	0xfe00e800

08002b84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	460b      	mov	r3, r1
 8002b98:	813b      	strh	r3, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <I2C_RequestMemoryWrite+0xa4>)
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa79 	bl	80030a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	69b9      	ldr	r1, [r7, #24]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f909 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e02c      	b.n	8002c20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d105      	bne.n	8002bd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bcc:	893b      	ldrh	r3, [r7, #8]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bd6:	e015      	b.n	8002c04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd8:	893b      	ldrh	r3, [r7, #8]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	69b9      	ldr	r1, [r7, #24]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f8ef 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e012      	b.n	8002c20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2180      	movs	r1, #128	@ 0x80
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f884 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	80002000 	.word	0x80002000

08002c2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	817b      	strh	r3, [r7, #10]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	813b      	strh	r3, [r7, #8]
 8002c42:	4613      	mov	r3, r2
 8002c44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	8979      	ldrh	r1, [r7, #10]
 8002c4c:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <I2C_RequestMemoryRead+0xa4>)
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2300      	movs	r3, #0
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fa26 	bl	80030a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f8b6 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e02c      	b.n	8002cc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c7c:	e015      	b.n	8002caa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c7e:	893b      	ldrh	r3, [r7, #8]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f89c 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e012      	b.n	8002cc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca0:	893b      	ldrh	r3, [r7, #8]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2140      	movs	r1, #64	@ 0x40
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f831 	bl	8002d1c <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	80002000 	.word	0x80002000

08002cd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d103      	bne.n	8002cf2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d007      	beq.n	8002d10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	619a      	str	r2, [r3, #24]
  }
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	e03b      	b.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f8d6 	bl	8002ee4 <I2C_IsErrorOccurred>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e041      	b.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d02d      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe fe6f 	bl	8001a2c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d122      	bne.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d113      	bne.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	bf0c      	ite	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	2300      	movne	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d0b4      	beq.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dda:	e033      	b.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f87f 	bl	8002ee4 <I2C_IsErrorOccurred>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e031      	b.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d025      	beq.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7fe fe18 	bl	8001a2c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11a      	bne.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d013      	beq.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d1c4      	bne.n	8002ddc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e68:	e02f      	b.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f838 	bl	8002ee4 <I2C_IsErrorOccurred>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e02d      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe fdd5 	bl	8001a2c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11a      	bne.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d013      	beq.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e007      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d1c8      	bne.n	8002e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d068      	beq.n	8002fe2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2210      	movs	r2, #16
 8002f16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f18:	e049      	b.n	8002fae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d045      	beq.n	8002fae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fd83 	bl	8001a2c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_IsErrorOccurred+0x54>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d13a      	bne.n	8002fae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5a:	d121      	bne.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f62:	d01d      	beq.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d01a      	beq.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f7a:	f7fe fd57 	bl	8001a2c <HAL_GetTick>
 8002f7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f80:	e00e      	b.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f82:	f7fe fd53 	bl	8001a2c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b19      	cmp	r3, #25
 8002f8e:	d907      	bls.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f9e:	e006      	b.n	8002fae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d1e9      	bne.n	8002f82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d003      	beq.n	8002fc4 <I2C_IsErrorOccurred+0xe0>
 8002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0aa      	beq.n	8002f1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003004:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003026:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003048:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01c      	beq.n	8003092 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f7ff fe3b 	bl	8002cd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b0d      	ldr	r3, [pc, #52]	@ (80030a0 <I2C_IsErrorOccurred+0x1bc>)
 800306a:	400b      	ands	r3, r1
 800306c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003096:	4618      	mov	r0, r3
 8003098:	3728      	adds	r7, #40	@ 0x28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	fe00e800 	.word	0xfe00e800

080030a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	4613      	mov	r3, r2
 80030b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030bc:	7a7b      	ldrb	r3, [r7, #9]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	0d5b      	lsrs	r3, r3, #21
 80030de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <I2C_TransferConfig+0x60>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	43db      	mvns	r3, r3
 80030e8:	ea02 0103 	and.w	r1, r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	03ff63ff 	.word	0x03ff63ff

08003108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	d138      	bne.n	8003190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003128:	2302      	movs	r3, #2
 800312a:	e032      	b.n	8003192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	@ 0x24
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800315a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d139      	bne.n	8003228 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031be:	2302      	movs	r3, #2
 80031c0:	e033      	b.n	800322a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2224      	movs	r2, #36	@ 0x24
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af02      	add	r7, sp, #8
 800323c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0fe      	b.n	8003446 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f00c fbe3 	bl	800fa28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2203      	movs	r2, #3
 8003266:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f006 f9a9 	bl	80095c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7c1a      	ldrb	r2, [r3, #16]
 800327c:	f88d 2000 	strb.w	r2, [sp]
 8003280:	3304      	adds	r3, #4
 8003282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003284:	f006 f87a 	bl	800937c <USB_CoreInit>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0d5      	b.n	8003446 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f006 f9a1 	bl	80095e8 <USB_SetCurrentMode>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0c6      	b.n	8003446 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e04a      	b.n	8003354 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3315      	adds	r3, #21
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3314      	adds	r3, #20
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	b298      	uxth	r0, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	332e      	adds	r3, #46	@ 0x2e
 80032fa:	4602      	mov	r2, r0
 80032fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3318      	adds	r3, #24
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	331c      	adds	r3, #28
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3320      	adds	r3, #32
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800333a:	7bfa      	ldrb	r2, [r7, #15]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3324      	adds	r3, #36	@ 0x24
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	3301      	adds	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	791b      	ldrb	r3, [r3, #4]
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	429a      	cmp	r2, r3
 800335c:	d3af      	bcc.n	80032be <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e044      	b.n	80033ee <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	3301      	adds	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	791b      	ldrb	r3, [r3, #4]
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3b5      	bcc.n	8003364 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7c1a      	ldrb	r2, [r3, #16]
 8003400:	f88d 2000 	strb.w	r2, [sp]
 8003404:	3304      	adds	r3, #4
 8003406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003408:	f006 f93a 	bl	8009680 <USB_DevInit>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e013      	b.n	8003446 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7b1b      	ldrb	r3, [r3, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d102      	bne.n	800343a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f001 f96d 	bl	8004714 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f007 f979 	bl	800a736 <USB_DevDisconnect>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_PCD_Start+0x1c>
 8003466:	2302      	movs	r3, #2
 8003468:	e022      	b.n	80034b0 <HAL_PCD_Start+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f006 f884 	bl	80095a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f007 f927 	bl	800a6f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b08d      	sub	sp, #52	@ 0x34
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f007 f9e5 	bl	800a89e <USB_GetMode>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 84b9 	bne.w	8003e4e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f007 f949 	bl	800a778 <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 84af 	beq.w	8003e4c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f007 f936 	bl	800a778 <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d107      	bne.n	8003526 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f002 0202 	and.w	r2, r2, #2
 8003524:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f007 f924 	bl	800a778 <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b10      	cmp	r3, #16
 8003538:	d161      	bne.n	80035fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699a      	ldr	r2, [r3, #24]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0210 	bic.w	r2, r2, #16
 8003548:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	f003 020f 	and.w	r2, r3, #15
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	0c5b      	lsrs	r3, r3, #17
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	2b02      	cmp	r3, #2
 8003574:	d124      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d035      	beq.n	80035ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800358c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	6a38      	ldr	r0, [r7, #32]
 8003596:	f006 ff5b 	bl	800a450 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035a6:	441a      	add	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035b8:	441a      	add	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	615a      	str	r2, [r3, #20]
 80035be:	e016      	b.n	80035ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	0c5b      	lsrs	r3, r3, #17
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d110      	bne.n	80035ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035d2:	2208      	movs	r2, #8
 80035d4:	4619      	mov	r1, r3
 80035d6:	6a38      	ldr	r0, [r7, #32]
 80035d8:	f006 ff3a 	bl	800a450 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e8:	441a      	add	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0210 	orr.w	r2, r2, #16
 80035fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f007 f8b8 	bl	800a778 <USB_ReadInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800360e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003612:	f040 80a7 	bne.w	8003764 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f007 f8bd 	bl	800a79e <USB_ReadDevAllOutEpInterrupt>
 8003624:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003626:	e099      	b.n	800375c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 808e 	beq.w	8003750 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f007 f8e1 	bl	800a806 <USB_ReadDevOutEPInterrupt>
 8003644:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365c:	461a      	mov	r2, r3
 800365e:	2301      	movs	r3, #1
 8003660:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fecf 	bl	8004408 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	2308      	movs	r3, #8
 8003684:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003686:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 ffa5 	bl	80045d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a4:	461a      	mov	r2, r3
 80036a6:	2310      	movs	r3, #16
 80036a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d030      	beq.n	8003716 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b80      	cmp	r3, #128	@ 0x80
 80036be:	d109      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	78db      	ldrb	r3, [r3, #3]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d108      	bne.n	8003704 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f00c fab8 	bl	800fc74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	2302      	movs	r3, #2
 8003714:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372c:	461a      	mov	r2, r3
 800372e:	2320      	movs	r3, #32
 8003730:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800374e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	3301      	adds	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	f47f af62 	bne.w	8003628 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f007 f805 	bl	800a778 <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003778:	f040 80db 	bne.w	8003932 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f007 f826 	bl	800a7d2 <USB_ReadDevAllInEpInterrupt>
 8003786:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800378c:	e0cd      	b.n	800392a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800378e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80c2 	beq.w	800391e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f007 f84c 	bl	800a842 <USB_ReadDevInEPInterrupt>
 80037aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d057      	beq.n	8003866 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	2201      	movs	r2, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	69f9      	ldr	r1, [r7, #28]
 80037d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037d6:	4013      	ands	r3, r2
 80037d8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e6:	461a      	mov	r2, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	799b      	ldrb	r3, [r3, #6]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d132      	bne.n	800385a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3320      	adds	r3, #32
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4403      	add	r3, r0
 8003814:	331c      	adds	r3, #28
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4419      	add	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4403      	add	r3, r0
 8003828:	3320      	adds	r3, #32
 800382a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d113      	bne.n	800385a <HAL_PCD_IRQHandler+0x3a2>
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3324      	adds	r3, #36	@ 0x24
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d108      	bne.n	800385a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003852:	461a      	mov	r2, r3
 8003854:	2101      	movs	r1, #1
 8003856:	f007 f855 	bl	800a904 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	b2db      	uxtb	r3, r3
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f00c f982 	bl	800fb6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800387c:	461a      	mov	r2, r3
 800387e:	2308      	movs	r3, #8
 8003880:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003898:	461a      	mov	r2, r3
 800389a:	2310      	movs	r3, #16
 800389c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b4:	461a      	mov	r2, r3
 80038b6:	2340      	movs	r3, #64	@ 0x40
 80038b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d023      	beq.n	800390c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038c6:	6a38      	ldr	r0, [r7, #32]
 80038c8:	f006 f838 	bl	800993c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	3310      	adds	r3, #16
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	3304      	adds	r3, #4
 80038de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d108      	bne.n	80038fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2200      	movs	r2, #0
 80038ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f00c f9cf 	bl	800fc98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003906:	461a      	mov	r2, r3
 8003908:	2302      	movs	r3, #2
 800390a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003916:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fce8 	bl	80042ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	3301      	adds	r3, #1
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f af2e 	bne.w	800378e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f006 ff1e 	bl	800a778 <USB_ReadInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003942:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003946:	d122      	bne.n	800398e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003962:	2b01      	cmp	r3, #1
 8003964:	d108      	bne.n	8003978 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800396e:	2100      	movs	r1, #0
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fef3 	bl	800475c <HAL_PCDEx_LPM_Callback>
 8003976:	e002      	b.n	800397e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f00c f96d 	bl	800fc58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800398c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f006 fef0 	bl	800a778 <USB_ReadInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a2:	d112      	bne.n	80039ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d102      	bne.n	80039ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f00c f929 	bl	800fc0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80039c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f006 fed2 	bl	800a778 <USB_ReadInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039de:	d121      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80039ee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d111      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a14:	2101      	movs	r1, #1
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fea0 	bl	800475c <HAL_PCDEx_LPM_Callback>
 8003a1c:	e002      	b.n	8003a24 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f00c f8f4 	bl	800fc0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f006 fea5 	bl	800a778 <USB_ReadInterrupts>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a38:	f040 80b7 	bne.w	8003baa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2110      	movs	r1, #16
 8003a56:	4618      	mov	r0, r3
 8003a58:	f005 ff70 	bl	800993c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a60:	e046      	b.n	8003af0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a86:	0151      	lsls	r1, r2, #5
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	440a      	add	r2, r1
 8003a8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003aa8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ac4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ada:	0151      	lsls	r1, r2, #5
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	440a      	add	r2, r1
 8003ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ae4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ae8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	3301      	adds	r3, #1
 8003aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	791b      	ldrb	r3, [r3, #4]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d3b2      	bcc.n	8003a62 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b0a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003b0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	7bdb      	ldrb	r3, [r3, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d016      	beq.n	8003b46 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b28:	f043 030b 	orr.w	r3, r3, #11
 8003b2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b3e:	f043 030b 	orr.w	r3, r3, #11
 8003b42:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b44:	e015      	b.n	8003b72 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b54:	4619      	mov	r1, r3
 8003b56:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b6c:	f043 030b 	orr.w	r3, r3, #11
 8003b70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b80:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b94:	461a      	mov	r2, r3
 8003b96:	f006 feb5 	bl	800a904 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f006 fde2 	bl	800a778 <USB_ReadInterrupts>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bbe:	d123      	bne.n	8003c08 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f006 fe79 	bl	800a8bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f005 ff2d 	bl	8009a2e <USB_GetDevSpeed>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681c      	ldr	r4, [r3, #0]
 8003be0:	f001 fd9c 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8003be4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bea:	461a      	mov	r2, r3
 8003bec:	4620      	mov	r0, r4
 8003bee:	f005 fc37 	bl	8009460 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f00b ffe1 	bl	800fbba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f006 fdb3 	bl	800a778 <USB_ReadInterrupts>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d10a      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f00b ffbe 	bl	800fb9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f002 0208 	and.w	r2, r2, #8
 8003c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f006 fd9e 	bl	800a778 <USB_ReadInterrupts>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c42:	2b80      	cmp	r3, #128	@ 0x80
 8003c44:	d123      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c56:	e014      	b.n	8003c82 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fb08 	bl	800428c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	3301      	adds	r3, #1
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	791b      	ldrb	r3, [r3, #4]
 8003c86:	461a      	mov	r2, r3
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d3e4      	bcc.n	8003c58 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f006 fd70 	bl	800a778 <USB_ReadInterrupts>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca2:	d13c      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca8:	e02b      	b.n	8003d02 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3318      	adds	r3, #24
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d115      	bne.n	8003cfc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da12      	bge.n	8003cfc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3317      	adds	r3, #23
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fac8 	bl	800428c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	3301      	adds	r3, #1
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	791b      	ldrb	r3, [r3, #4]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d3cd      	bcc.n	8003caa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f006 fd28 	bl	800a778 <USB_ReadInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d32:	d156      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d34:	2301      	movs	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d38:	e045      	b.n	8003dc6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d12e      	bne.n	8003dc0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da2b      	bge.n	8003dc0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003d74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d121      	bne.n	8003dc0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003db8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dbc:	6053      	str	r3, [r2, #4]
            break;
 8003dbe:	e008      	b.n	8003dd2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	791b      	ldrb	r3, [r3, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d3b3      	bcc.n	8003d3a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f006 fcc6 	bl	800a778 <USB_ReadInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df6:	d10a      	bne.n	8003e0e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f00b ff5f 	bl	800fcbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f006 fcb0 	bl	800a778 <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d115      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f00b ff4f 	bl	800fcd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	e000      	b.n	8003e4e <HAL_PCD_IRQHandler+0x996>
      return;
 8003e4c:	bf00      	nop
    }
  }
}
 8003e4e:	3734      	adds	r7, #52	@ 0x34
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}

08003e54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_PCD_SetAddress+0x1a>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e012      	b.n	8003e94 <HAL_PCD_SetAddress+0x40>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f006 fc0f 	bl	800a6a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	70fb      	strb	r3, [r7, #3]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	803b      	strh	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da0f      	bge.n	8003ee2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	705a      	strb	r2, [r3, #1]
 8003ee0:	e00f      	b.n	8003f02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f0e:	883a      	ldrh	r2, [r7, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	78ba      	ldrb	r2, [r7, #2]
 8003f18:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f2c:	78bb      	ldrb	r3, [r7, #2]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d102      	bne.n	8003f38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_PCD_EP_Open+0xaa>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e00e      	b.n	8003f64 <HAL_PCD_EP_Open+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f005 fd8f 	bl	8009a78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003f62:	7afb      	ldrb	r3, [r7, #11]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da0f      	bge.n	8003fa0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	3310      	adds	r3, #16
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	705a      	strb	r2, [r3, #1]
 8003f9e:	e00f      	b.n	8003fc0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_PCD_EP_Close+0x6e>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e00e      	b.n	8003ff8 <HAL_PCD_EP_Close+0x8c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f005 fdcd 	bl	8009b88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	460b      	mov	r3, r1
 800400e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004010:	7afb      	ldrb	r3, [r7, #11]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	3304      	adds	r3, #4
 8004028:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2200      	movs	r2, #0
 8004040:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	b2da      	uxtb	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	799b      	ldrb	r3, [r3, #6]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d102      	bne.n	800405c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	799b      	ldrb	r3, [r3, #6]
 8004064:	461a      	mov	r2, r3
 8004066:	6979      	ldr	r1, [r7, #20]
 8004068:	f005 fe6a 	bl	8009d40 <USB_EPStartXfer>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004098:	681b      	ldr	r3, [r3, #0]
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	460b      	mov	r3, r1
 80040b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	3310      	adds	r3, #16
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	3304      	adds	r3, #4
 80040cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2201      	movs	r2, #1
 80040e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e6:	7afb      	ldrb	r3, [r7, #11]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	799b      	ldrb	r3, [r3, #6]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	799b      	ldrb	r3, [r3, #6]
 8004108:	461a      	mov	r2, r3
 800410a:	6979      	ldr	r1, [r7, #20]
 800410c:	f005 fe18 	bl	8009d40 <USB_EPStartXfer>

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	7912      	ldrb	r2, [r2, #4]
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e04f      	b.n	80041d8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413c:	2b00      	cmp	r3, #0
 800413e:	da0f      	bge.n	8004160 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	3310      	adds	r3, #16
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	705a      	strb	r2, [r3, #1]
 800415e:	e00d      	b.n	800417c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	3304      	adds	r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_PCD_EP_SetStall+0x82>
 8004198:	2302      	movs	r3, #2
 800419a:	e01d      	b.n	80041d8 <HAL_PCD_EP_SetStall+0xbe>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f006 f9a8 	bl	800a500 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7999      	ldrb	r1, [r3, #6]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041c8:	461a      	mov	r2, r3
 80041ca:	f006 fb9b 	bl	800a904 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	7912      	ldrb	r2, [r2, #4]
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e042      	b.n	8004284 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004202:	2b00      	cmp	r3, #0
 8004204:	da0f      	bge.n	8004226 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	3310      	adds	r3, #16
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	3304      	adds	r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	705a      	strb	r2, [r3, #1]
 8004224:	e00f      	b.n	8004246 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	3304      	adds	r3, #4
 800423e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	b2da      	uxtb	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_PCD_EP_ClrStall+0x86>
 8004262:	2302      	movs	r3, #2
 8004264:	e00e      	b.n	8004284 <HAL_PCD_EP_ClrStall+0xa4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68f9      	ldr	r1, [r7, #12]
 8004274:	4618      	mov	r0, r3
 8004276:	f006 f9b1 	bl	800a5dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800429c:	2b00      	cmp	r3, #0
 800429e:	da0c      	bge.n	80042ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	3310      	adds	r3, #16
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	3304      	adds	r3, #4
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e00c      	b.n	80042d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	f003 020f 	and.w	r2, r3, #15
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4413      	add	r3, r2
 80042d0:	3304      	adds	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 ffd0 	bl	800a280 <USB_EPStopXfer>
 80042e0:	4603      	mov	r3, r0
 80042e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042e4:	7afb      	ldrb	r3, [r7, #11]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08a      	sub	sp, #40	@ 0x28
 80042f2:	af02      	add	r7, sp, #8
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	3310      	adds	r3, #16
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	3304      	adds	r3, #4
 8004314:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	429a      	cmp	r2, r3
 8004320:	d901      	bls.n	8004326 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e06b      	b.n	80043fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d902      	bls.n	8004342 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3303      	adds	r3, #3
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434a:	e02a      	b.n	80043a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	429a      	cmp	r2, r3
 8004360:	d902      	bls.n	8004368 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3303      	adds	r3, #3
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68d9      	ldr	r1, [r3, #12]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4603      	mov	r3, r0
 8004384:	6978      	ldr	r0, [r7, #20]
 8004386:	f006 f825 	bl	800a3d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	441a      	add	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d809      	bhi.n	80043cc <PCD_WriteEmptyTxFifo+0xde>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d203      	bcs.n	80043cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1bf      	bne.n	800434c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d811      	bhi.n	80043fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	2201      	movs	r2, #1
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	6939      	ldr	r1, [r7, #16]
 80043f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043f8:	4013      	ands	r3, r2
 80043fa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	333c      	adds	r3, #60	@ 0x3c
 8004420:	3304      	adds	r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	799b      	ldrb	r3, [r3, #6]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d17b      	bne.n	8004536 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4a61      	ldr	r2, [pc, #388]	@ (80045d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	f240 80b9 	bls.w	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80b3 	beq.w	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	e0a7      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	2320      	movs	r3, #32
 800448e:	6093      	str	r3, [r2, #8]
 8004490:	e098      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8093 	bne.w	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4a4b      	ldr	r2, [pc, #300]	@ (80045d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d90f      	bls.n	80044c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044bc:	461a      	mov	r2, r3
 80044be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c2:	6093      	str	r3, [r2, #8]
 80044c4:	e07e      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	3304      	adds	r3, #4
 80044da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	0159      	lsls	r1, r3, #5
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	440b      	add	r3, r1
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f2:	1ad2      	subs	r2, r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d114      	bne.n	8004528 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004510:	461a      	mov	r2, r3
 8004512:	2101      	movs	r1, #1
 8004514:	f006 f9f6 	bl	800a904 <USB_EP0_OutStart>
 8004518:	e006      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	441a      	add	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f00b fb00 	bl	800fb34 <HAL_PCD_DataOutStageCallback>
 8004534:	e046      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d124      	bne.n	8004588 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004554:	461a      	mov	r2, r3
 8004556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455a:	6093      	str	r3, [r2, #8]
 800455c:	e032      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	461a      	mov	r2, r3
 8004576:	2320      	movs	r3, #32
 8004578:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f00b fad7 	bl	800fb34 <HAL_PCD_DataOutStageCallback>
 8004586:	e01d      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d114      	bne.n	80045b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045b0:	461a      	mov	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	f006 f9a6 	bl	800a904 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f00b fab8 	bl	800fb34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	4f54300a 	.word	0x4f54300a
 80045d4:	4f54310a 	.word	0x4f54310a

080045d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	333c      	adds	r3, #60	@ 0x3c
 80045f0:	3304      	adds	r3, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <PCD_EP_OutSetupPacket_int+0x88>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d90e      	bls.n	800462c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004624:	461a      	mov	r2, r3
 8004626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800462a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f00b fa6f 	bl	800fb10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <PCD_EP_OutSetupPacket_int+0x88>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d90c      	bls.n	8004654 <PCD_EP_OutSetupPacket_int+0x7c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	799b      	ldrb	r3, [r3, #6]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d108      	bne.n	8004654 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800464c:	461a      	mov	r2, r3
 800464e:	2101      	movs	r1, #1
 8004650:	f006 f958 	bl	800a904 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	4f54300a 	.word	0x4f54300a

08004664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	70fb      	strb	r3, [r7, #3]
 8004670:	4613      	mov	r3, r2
 8004672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004682:	883b      	ldrh	r3, [r7, #0]
 8004684:	0419      	lsls	r1, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	430a      	orrs	r2, r1
 800468e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004690:	e028      	b.n	80046e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	e00d      	b.n	80046c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	3340      	adds	r3, #64	@ 0x40
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	3301      	adds	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d3ec      	bcc.n	80046a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046cc:	883b      	ldrh	r3, [r7, #0]
 80046ce:	0418      	lsls	r0, r3, #16
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	4302      	orrs	r2, r0
 80046dc:	3340      	adds	r3, #64	@ 0x40
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004742:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_PCDEx_ActivateLPM+0x44>)
 8004744:	4313      	orrs	r3, r2
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	10000003 	.word	0x10000003

0800475c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800477c:	4b19      	ldr	r3, [pc, #100]	@ (80047e4 <HAL_PWREx_ConfigSupply+0x70>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b04      	cmp	r3, #4
 8004786:	d00a      	beq.n	800479e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004788:	4b16      	ldr	r3, [pc, #88]	@ (80047e4 <HAL_PWREx_ConfigSupply+0x70>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d001      	beq.n	800479a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e01f      	b.n	80047da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e01d      	b.n	80047da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800479e:	4b11      	ldr	r3, [pc, #68]	@ (80047e4 <HAL_PWREx_ConfigSupply+0x70>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f023 0207 	bic.w	r2, r3, #7
 80047a6:	490f      	ldr	r1, [pc, #60]	@ (80047e4 <HAL_PWREx_ConfigSupply+0x70>)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80047ae:	f7fd f93d 	bl	8001a2c <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047b4:	e009      	b.n	80047ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80047b6:	f7fd f939 	bl	8001a2c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047c4:	d901      	bls.n	80047ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e007      	b.n	80047da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_PWREx_ConfigSupply+0x70>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d6:	d1ee      	bne.n	80047b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	58024800 	.word	0x58024800

080047e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80047ec:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a04      	ldr	r2, [pc, #16]	@ (8004804 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80047f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f6:	60d3      	str	r3, [r2, #12]
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	58024800 	.word	0x58024800

08004808 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08c      	sub	sp, #48	@ 0x30
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f000 bc48 	b.w	80050ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8088 	beq.w	800493a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482a:	4b99      	ldr	r3, [pc, #612]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004834:	4b96      	ldr	r3, [pc, #600]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800483a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483c:	2b10      	cmp	r3, #16
 800483e:	d007      	beq.n	8004850 <HAL_RCC_OscConfig+0x48>
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	2b18      	cmp	r3, #24
 8004844:	d111      	bne.n	800486a <HAL_RCC_OscConfig+0x62>
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d10c      	bne.n	800486a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	4b8f      	ldr	r3, [pc, #572]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d06d      	beq.n	8004938 <HAL_RCC_OscConfig+0x130>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d169      	bne.n	8004938 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f000 bc21 	b.w	80050ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0x7a>
 8004874:	4b86      	ldr	r3, [pc, #536]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a85      	ldr	r2, [pc, #532]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 800487a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e02e      	b.n	80048e0 <HAL_RCC_OscConfig+0xd8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x9c>
 800488a:	4b81      	ldr	r3, [pc, #516]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a80      	ldr	r2, [pc, #512]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b7e      	ldr	r3, [pc, #504]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a7d      	ldr	r2, [pc, #500]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 800489c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e01d      	b.n	80048e0 <HAL_RCC_OscConfig+0xd8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0xc0>
 80048ae:	4b78      	ldr	r3, [pc, #480]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a77      	ldr	r2, [pc, #476]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b75      	ldr	r3, [pc, #468]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a74      	ldr	r2, [pc, #464]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0xd8>
 80048c8:	4b71      	ldr	r3, [pc, #452]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a70      	ldr	r2, [pc, #448]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b6e      	ldr	r3, [pc, #440]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a6d      	ldr	r2, [pc, #436]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd f8a0 	bl	8001a2c <HAL_GetTick>
 80048ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fd f89c 	bl	8001a2c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	@ 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e3d4      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004902:	4b63      	ldr	r3, [pc, #396]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0xe8>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd f88c 	bl	8001a2c <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004918:	f7fd f888 	bl	8001a2c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	@ 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e3c0      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800492a:	4b59      	ldr	r3, [pc, #356]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x110>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80ca 	beq.w	8004adc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004948:	4b51      	ldr	r3, [pc, #324]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004950:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004952:	4b4f      	ldr	r3, [pc, #316]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_RCC_OscConfig+0x166>
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2b18      	cmp	r3, #24
 8004962:	d156      	bne.n	8004a12 <HAL_RCC_OscConfig+0x20a>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d151      	bne.n	8004a12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800496e:	4b48      	ldr	r3, [pc, #288]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_RCC_OscConfig+0x17e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e392      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004986:	4b42      	ldr	r3, [pc, #264]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 0219 	bic.w	r2, r3, #25
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	493f      	ldr	r1, [pc, #252]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fd f848 	bl	8001a2c <HAL_GetTick>
 800499c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a0:	f7fd f844 	bl	8001a2c <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e37c      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049b2:	4b37      	ldr	r3, [pc, #220]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	f7fd f865 	bl	8001a8c <HAL_GetREVID>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d817      	bhi.n	80049fc <HAL_RCC_OscConfig+0x1f4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b40      	cmp	r3, #64	@ 0x40
 80049d2:	d108      	bne.n	80049e6 <HAL_RCC_OscConfig+0x1de>
 80049d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80049dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80049de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049e4:	e07a      	b.n	8004adc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	031b      	lsls	r3, r3, #12
 80049f4:	4926      	ldr	r1, [pc, #152]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fa:	e06f      	b.n	8004adc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fc:	4b24      	ldr	r3, [pc, #144]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	4921      	ldr	r1, [pc, #132]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a10:	e064      	b.n	8004adc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d047      	beq.n	8004aaa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 0219 	bic.w	r2, r3, #25
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	491a      	ldr	r1, [pc, #104]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fc fffe 	bl	8001a2c <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a34:	f7fc fffa 	bl	8001a2c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e332      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a46:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a52:	f7fd f81b 	bl	8001a8c <HAL_GetREVID>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d819      	bhi.n	8004a94 <HAL_RCC_OscConfig+0x28c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b40      	cmp	r3, #64	@ 0x40
 8004a66:	d108      	bne.n	8004a7a <HAL_RCC_OscConfig+0x272>
 8004a68:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a70:	4a07      	ldr	r2, [pc, #28]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a76:	6053      	str	r3, [r2, #4]
 8004a78:	e030      	b.n	8004adc <HAL_RCC_OscConfig+0x2d4>
 8004a7a:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	031b      	lsls	r3, r3, #12
 8004a88:	4901      	ldr	r1, [pc, #4]	@ (8004a90 <HAL_RCC_OscConfig+0x288>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
 8004a8e:	e025      	b.n	8004adc <HAL_RCC_OscConfig+0x2d4>
 8004a90:	58024400 	.word	0x58024400
 8004a94:	4b9a      	ldr	r3, [pc, #616]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	4997      	ldr	r1, [pc, #604]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]
 8004aa8:	e018      	b.n	8004adc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aaa:	4b95      	ldr	r3, [pc, #596]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a94      	ldr	r2, [pc, #592]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fc ffb9 	bl	8001a2c <HAL_GetTick>
 8004aba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004abe:	f7fc ffb5 	bl	8001a2c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e2ed      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ad0:	4b8b      	ldr	r3, [pc, #556]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a9 	beq.w	8004c3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	4b85      	ldr	r3, [pc, #532]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004af2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004af4:	4b82      	ldr	r3, [pc, #520]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d007      	beq.n	8004b10 <HAL_RCC_OscConfig+0x308>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b18      	cmp	r3, #24
 8004b04:	d13a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x374>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d135      	bne.n	8004b7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b10:	4b7b      	ldr	r3, [pc, #492]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_OscConfig+0x320>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	2b80      	cmp	r3, #128	@ 0x80
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e2c1      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b28:	f7fc ffb0 	bl	8001a8c <HAL_GetREVID>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d817      	bhi.n	8004b66 <HAL_RCC_OscConfig+0x35e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d108      	bne.n	8004b50 <HAL_RCC_OscConfig+0x348>
 8004b3e:	4b70      	ldr	r3, [pc, #448]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004b46:	4a6e      	ldr	r2, [pc, #440]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b4e:	e075      	b.n	8004c3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b50:	4b6b      	ldr	r3, [pc, #428]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	069b      	lsls	r3, r3, #26
 8004b5e:	4968      	ldr	r1, [pc, #416]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b64:	e06a      	b.n	8004c3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b66:	4b66      	ldr	r3, [pc, #408]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	4962      	ldr	r1, [pc, #392]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b7a:	e05f      	b.n	8004c3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d042      	beq.n	8004c0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b84:	4b5e      	ldr	r3, [pc, #376]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a5d      	ldr	r2, [pc, #372]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fc ff4c 	bl	8001a2c <HAL_GetTick>
 8004b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b98:	f7fc ff48 	bl	8001a2c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e280      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004baa:	4b55      	ldr	r3, [pc, #340]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bb6:	f7fc ff69 	bl	8001a8c <HAL_GetREVID>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d817      	bhi.n	8004bf4 <HAL_RCC_OscConfig+0x3ec>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d108      	bne.n	8004bde <HAL_RCC_OscConfig+0x3d6>
 8004bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bda:	6053      	str	r3, [r2, #4]
 8004bdc:	e02e      	b.n	8004c3c <HAL_RCC_OscConfig+0x434>
 8004bde:	4b48      	ldr	r3, [pc, #288]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	069b      	lsls	r3, r3, #26
 8004bec:	4944      	ldr	r1, [pc, #272]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
 8004bf2:	e023      	b.n	8004c3c <HAL_RCC_OscConfig+0x434>
 8004bf4:	4b42      	ldr	r3, [pc, #264]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	493f      	ldr	r1, [pc, #252]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60cb      	str	r3, [r1, #12]
 8004c08:	e018      	b.n	8004c3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fc ff09 	bl	8001a2c <HAL_GetTick>
 8004c1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c1e:	f7fc ff05 	bl	8001a2c <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e23d      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c30:	4b33      	ldr	r3, [pc, #204]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f0      	bne.n	8004c1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d036      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d019      	beq.n	8004c84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c50:	4b2b      	ldr	r3, [pc, #172]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c54:	4a2a      	ldr	r2, [pc, #168]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fc fee6 	bl	8001a2c <HAL_GetTick>
 8004c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c64:	f7fc fee2 	bl	8001a2c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e21a      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c76:	4b22      	ldr	r3, [pc, #136]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x45c>
 8004c82:	e018      	b.n	8004cb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c84:	4b1e      	ldr	r3, [pc, #120]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c88:	4a1d      	ldr	r2, [pc, #116]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fc fecc 	bl	8001a2c <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c98:	f7fc fec8 	bl	8001a2c <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e200      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004caa:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d039      	beq.n	8004d36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01c      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cca:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cd6:	f7fc fea9 	bl	8001a2c <HAL_GetTick>
 8004cda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cde:	f7fc fea5 	bl	8001a2c <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1dd      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cf0:	4b03      	ldr	r3, [pc, #12]	@ (8004d00 <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x4d6>
 8004cfc:	e01b      	b.n	8004d36 <HAL_RCC_OscConfig+0x52e>
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d04:	4b9b      	ldr	r3, [pc, #620]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a9a      	ldr	r2, [pc, #616]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004d0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d10:	f7fc fe8c 	bl	8001a2c <HAL_GetTick>
 8004d14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d18:	f7fc fe88 	bl	8001a2c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e1c0      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d2a:	4b92      	ldr	r3, [pc, #584]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8081 	beq.w	8004e46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d44:	4b8c      	ldr	r3, [pc, #560]	@ (8004f78 <HAL_RCC_OscConfig+0x770>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a8b      	ldr	r2, [pc, #556]	@ (8004f78 <HAL_RCC_OscConfig+0x770>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d50:	f7fc fe6c 	bl	8001a2c <HAL_GetTick>
 8004d54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d58:	f7fc fe68 	bl	8001a2c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	@ 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e1a0      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d6a:	4b83      	ldr	r3, [pc, #524]	@ (8004f78 <HAL_RCC_OscConfig+0x770>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d106      	bne.n	8004d8c <HAL_RCC_OscConfig+0x584>
 8004d7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	4a7c      	ldr	r2, [pc, #496]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d8a:	e02d      	b.n	8004de8 <HAL_RCC_OscConfig+0x5e0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10c      	bne.n	8004dae <HAL_RCC_OscConfig+0x5a6>
 8004d94:	4b77      	ldr	r3, [pc, #476]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d98:	4a76      	ldr	r2, [pc, #472]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da0:	4b74      	ldr	r3, [pc, #464]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da4:	4a73      	ldr	r2, [pc, #460]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004da6:	f023 0304 	bic.w	r3, r3, #4
 8004daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dac:	e01c      	b.n	8004de8 <HAL_RCC_OscConfig+0x5e0>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x5c8>
 8004db6:	4b6f      	ldr	r3, [pc, #444]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dba:	4a6e      	ldr	r2, [pc, #440]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004dbc:	f043 0304 	orr.w	r3, r3, #4
 8004dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0x5e0>
 8004dd0:	4b68      	ldr	r3, [pc, #416]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd4:	4a67      	ldr	r2, [pc, #412]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ddc:	4b65      	ldr	r3, [pc, #404]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	4a64      	ldr	r2, [pc, #400]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004de2:	f023 0304 	bic.w	r3, r3, #4
 8004de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fc fe1c 	bl	8001a2c <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df8:	f7fc fe18 	bl	8001a2c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e14e      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e0e:	4b59      	ldr	r3, [pc, #356]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0ee      	beq.n	8004df8 <HAL_RCC_OscConfig+0x5f0>
 8004e1a:	e014      	b.n	8004e46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fc fe06 	bl	8001a2c <HAL_GetTick>
 8004e20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fc fe02 	bl	8001a2c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e138      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ee      	bne.n	8004e24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 812d 	beq.w	80050aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e50:	4b48      	ldr	r3, [pc, #288]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e58:	2b18      	cmp	r3, #24
 8004e5a:	f000 80bd 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	f040 809e 	bne.w	8004fa4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e68:	4b42      	ldr	r3, [pc, #264]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a41      	ldr	r2, [pc, #260]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fc fdda 	bl	8001a2c <HAL_GetTick>
 8004e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fc fdd6 	bl	8001a2c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e10e      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e8e:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9a:	4b36      	ldr	r3, [pc, #216]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e9e:	4b37      	ldr	r3, [pc, #220]	@ (8004f7c <HAL_RCC_OscConfig+0x774>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	430a      	orrs	r2, r1
 8004eae:	4931      	ldr	r1, [pc, #196]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	025b      	lsls	r3, r3, #9
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004edc:	3b01      	subs	r3, #1
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ee4:	4923      	ldr	r1, [pc, #140]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004eea:	4b22      	ldr	r3, [pc, #136]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004efa:	4b21      	ldr	r3, [pc, #132]	@ (8004f80 <HAL_RCC_OscConfig+0x778>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f02:	00d2      	lsls	r2, r2, #3
 8004f04:	491b      	ldr	r1, [pc, #108]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f023 020c 	bic.w	r2, r3, #12
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	4917      	ldr	r1, [pc, #92]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f1c:	4b15      	ldr	r3, [pc, #84]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f023 0202 	bic.w	r2, r3, #2
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f28:	4912      	ldr	r1, [pc, #72]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f2e:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	4a10      	ldr	r2, [pc, #64]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f52:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	4a07      	ldr	r2, [pc, #28]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5e:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <HAL_RCC_OscConfig+0x76c>)
 8004f64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6a:	f7fc fd5f 	bl	8001a2c <HAL_GetTick>
 8004f6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f70:	e011      	b.n	8004f96 <HAL_RCC_OscConfig+0x78e>
 8004f72:	bf00      	nop
 8004f74:	58024400 	.word	0x58024400
 8004f78:	58024800 	.word	0x58024800
 8004f7c:	fffffc0c 	.word	0xfffffc0c
 8004f80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fc fd52 	bl	8001a2c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e08a      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f96:	4b47      	ldr	r3, [pc, #284]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x77c>
 8004fa2:	e082      	b.n	80050aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa4:	4b43      	ldr	r3, [pc, #268]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a42      	ldr	r2, [pc, #264]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fc fd3c 	bl	8001a2c <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fc fd38 	bl	8001a2c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e070      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fca:	4b3a      	ldr	r3, [pc, #232]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x7b0>
 8004fd6:	e068      	b.n	80050aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004fd8:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004fde:	4b35      	ldr	r3, [pc, #212]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d031      	beq.n	8005050 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f003 0203 	and.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d12a      	bne.n	8005050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d122      	bne.n	8005050 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d11a      	bne.n	8005050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	0a5b      	lsrs	r3, r3, #9
 800501e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d111      	bne.n	8005050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d108      	bne.n	8005050 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	0e1b      	lsrs	r3, r3, #24
 8005042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e02b      	b.n	80050ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8005056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800505e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d01f      	beq.n	80050aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800506a:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	4a11      	ldr	r2, [pc, #68]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005076:	f7fc fcd9 	bl	8001a2c <HAL_GetTick>
 800507a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800507c:	bf00      	nop
 800507e:	f7fc fcd5 	bl	8001a2c <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	4293      	cmp	r3, r2
 8005088:	d0f9      	beq.n	800507e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 800508c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800508e:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <HAL_RCC_OscConfig+0x8b0>)
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005096:	00d2      	lsls	r2, r2, #3
 8005098:	4906      	ldr	r1, [pc, #24]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 800509a:	4313      	orrs	r3, r2
 800509c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800509e:	4b05      	ldr	r3, [pc, #20]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	4a04      	ldr	r2, [pc, #16]	@ (80050b4 <HAL_RCC_OscConfig+0x8ac>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3730      	adds	r7, #48	@ 0x30
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	58024400 	.word	0x58024400
 80050b8:	ffff0007 	.word	0xffff0007

080050bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e19c      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d0:	4b8a      	ldr	r3, [pc, #552]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d910      	bls.n	8005100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b87      	ldr	r3, [pc, #540]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 020f 	bic.w	r2, r3, #15
 80050e6:	4985      	ldr	r1, [pc, #532]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b83      	ldr	r3, [pc, #524]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e184      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d010      	beq.n	800512e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	4b7b      	ldr	r3, [pc, #492]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005118:	429a      	cmp	r2, r3
 800511a:	d908      	bls.n	800512e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800511c:	4b78      	ldr	r3, [pc, #480]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	4975      	ldr	r1, [pc, #468]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800512a:	4313      	orrs	r3, r2
 800512c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	4b70      	ldr	r3, [pc, #448]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005146:	429a      	cmp	r2, r3
 8005148:	d908      	bls.n	800515c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800514a:	4b6d      	ldr	r3, [pc, #436]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	496a      	ldr	r1, [pc, #424]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005158:	4313      	orrs	r3, r2
 800515a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	4b64      	ldr	r3, [pc, #400]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005174:	429a      	cmp	r2, r3
 8005176:	d908      	bls.n	800518a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005178:	4b61      	ldr	r3, [pc, #388]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	495e      	ldr	r1, [pc, #376]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005186:	4313      	orrs	r3, r2
 8005188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	4b59      	ldr	r3, [pc, #356]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d908      	bls.n	80051b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051a6:	4b56      	ldr	r3, [pc, #344]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4953      	ldr	r1, [pc, #332]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d010      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d908      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f023 020f 	bic.w	r2, r3, #15
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4947      	ldr	r1, [pc, #284]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d055      	beq.n	800529e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051f2:	4b43      	ldr	r3, [pc, #268]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	4940      	ldr	r1, [pc, #256]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005200:	4313      	orrs	r3, r2
 8005202:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d107      	bne.n	800521c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800520c:	4b3c      	ldr	r3, [pc, #240]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d121      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0f6      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d107      	bne.n	8005234 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005224:	4b36      	ldr	r3, [pc, #216]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d115      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0ea      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d107      	bne.n	800524c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800523c:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0de      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800524c:	4b2c      	ldr	r3, [pc, #176]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0d6      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800525c:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f023 0207 	bic.w	r2, r3, #7
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4925      	ldr	r1, [pc, #148]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800526a:	4313      	orrs	r3, r2
 800526c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526e:	f7fc fbdd 	bl	8001a2c <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005274:	e00a      	b.n	800528c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005276:	f7fc fbd9 	bl	8001a2c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e0be      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528c:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	429a      	cmp	r2, r3
 800529c:	d1eb      	bne.n	8005276 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d010      	beq.n	80052cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d208      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ba:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	490e      	ldr	r1, [pc, #56]	@ (8005300 <HAL_RCC_ClockConfig+0x244>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052cc:	4b0b      	ldr	r3, [pc, #44]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d214      	bcs.n	8005304 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b08      	ldr	r3, [pc, #32]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 020f 	bic.w	r2, r3, #15
 80052e2:	4906      	ldr	r1, [pc, #24]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <HAL_RCC_ClockConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e086      	b.n	800540a <HAL_RCC_ClockConfig+0x34e>
 80052fc:	52002000 	.word	0x52002000
 8005300:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d010      	beq.n	8005332 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800531c:	429a      	cmp	r2, r3
 800531e:	d208      	bcs.n	8005332 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005320:	4b3c      	ldr	r3, [pc, #240]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	4939      	ldr	r1, [pc, #228]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800532e:	4313      	orrs	r3, r2
 8005330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	4b34      	ldr	r3, [pc, #208]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800534a:	429a      	cmp	r2, r3
 800534c:	d208      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800534e:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	492e      	ldr	r1, [pc, #184]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800535c:	4313      	orrs	r3, r2
 800535e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	4b28      	ldr	r3, [pc, #160]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005378:	429a      	cmp	r2, r3
 800537a:	d208      	bcs.n	800538e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800537c:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	4922      	ldr	r1, [pc, #136]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 800538a:	4313      	orrs	r3, r2
 800538c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d208      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4917      	ldr	r1, [pc, #92]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053bc:	f000 f834 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	4912      	ldr	r1, [pc, #72]	@ (8005418 <HAL_RCC_ClockConfig+0x35c>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
 80053d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <HAL_RCC_ClockConfig+0x358>)
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005418 <HAL_RCC_ClockConfig+0x35c>)
 80053e4:	5cd3      	ldrb	r3, [r2, r3]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	4a0a      	ldr	r2, [pc, #40]	@ (800541c <HAL_RCC_ClockConfig+0x360>)
 80053f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005420 <HAL_RCC_ClockConfig+0x364>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80053fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <HAL_RCC_ClockConfig+0x368>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fb fec6 	bl	8001190 <HAL_InitTick>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005408:	7bfb      	ldrb	r3, [r7, #15]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	08014a3c 	.word	0x08014a3c
 800541c:	24000004 	.word	0x24000004
 8005420:	24000000 	.word	0x24000000
 8005424:	24000008 	.word	0x24000008

08005428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005428:	b480      	push	{r7}
 800542a:	b089      	sub	sp, #36	@ 0x24
 800542c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800542e:	4bb3      	ldr	r3, [pc, #716]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005436:	2b18      	cmp	r3, #24
 8005438:	f200 8155 	bhi.w	80056e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800543c:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <HAL_RCC_GetSysClockFreq+0x1c>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	080054a9 	.word	0x080054a9
 8005448:	080056e7 	.word	0x080056e7
 800544c:	080056e7 	.word	0x080056e7
 8005450:	080056e7 	.word	0x080056e7
 8005454:	080056e7 	.word	0x080056e7
 8005458:	080056e7 	.word	0x080056e7
 800545c:	080056e7 	.word	0x080056e7
 8005460:	080056e7 	.word	0x080056e7
 8005464:	080054cf 	.word	0x080054cf
 8005468:	080056e7 	.word	0x080056e7
 800546c:	080056e7 	.word	0x080056e7
 8005470:	080056e7 	.word	0x080056e7
 8005474:	080056e7 	.word	0x080056e7
 8005478:	080056e7 	.word	0x080056e7
 800547c:	080056e7 	.word	0x080056e7
 8005480:	080056e7 	.word	0x080056e7
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080056e7 	.word	0x080056e7
 800548c:	080056e7 	.word	0x080056e7
 8005490:	080056e7 	.word	0x080056e7
 8005494:	080056e7 	.word	0x080056e7
 8005498:	080056e7 	.word	0x080056e7
 800549c:	080056e7 	.word	0x080056e7
 80054a0:	080056e7 	.word	0x080056e7
 80054a4:	080054db 	.word	0x080054db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b94      	ldr	r3, [pc, #592]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b4:	4b91      	ldr	r3, [pc, #580]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	4a90      	ldr	r2, [pc, #576]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80054c6:	e111      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054ca:	61bb      	str	r3, [r7, #24]
      break;
 80054cc:	e10e      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054d0:	61bb      	str	r3, [r7, #24]
      break;
 80054d2:	e10b      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80054d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054d6:	61bb      	str	r3, [r7, #24]
      break;
 80054d8:	e108      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054da:	4b88      	ldr	r3, [pc, #544]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80054e4:	4b85      	ldr	r3, [pc, #532]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054f0:	4b82      	ldr	r3, [pc, #520]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80054fa:	4b80      	ldr	r3, [pc, #512]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	08db      	lsrs	r3, r3, #3
 8005500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80e1 	beq.w	80056e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b02      	cmp	r3, #2
 8005522:	f000 8083 	beq.w	800562c <HAL_RCC_GetSysClockFreq+0x204>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b02      	cmp	r3, #2
 800552a:	f200 80a1 	bhi.w	8005670 <HAL_RCC_GetSysClockFreq+0x248>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x114>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d056      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800553a:	e099      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800553c:	4b6f      	ldr	r3, [pc, #444]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d02d      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005548:	4b6c      	ldr	r3, [pc, #432]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	08db      	lsrs	r3, r3, #3
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	4a6b      	ldr	r2, [pc, #428]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	4b62      	ldr	r3, [pc, #392]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	ed97 6a02 	vldr	s12, [r7, #8]
 8005586:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 800558a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80055a2:	e087      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005710 <HAL_RCC_GetSysClockFreq+0x2e8>
 80055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b6:	4b51      	ldr	r3, [pc, #324]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055e6:	e065      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005714 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fa:	4b40      	ldr	r3, [pc, #256]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	ed97 6a02 	vldr	s12, [r7, #8]
 800560e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800562a:	e043      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005718 <HAL_RCC_GetSysClockFreq+0x2f0>
 800563a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563e:	4b2f      	ldr	r3, [pc, #188]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005652:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800566e:	e021      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005714 <HAL_RCC_GetSysClockFreq+0x2ec>
 800567e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005682:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005692:	ed97 6a02 	vldr	s12, [r7, #8]
 8005696:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800570c <HAL_RCC_GetSysClockFreq+0x2e4>
 800569a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80056b4:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	0a5b      	lsrs	r3, r3, #9
 80056ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056be:	3301      	adds	r3, #1
 80056c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d8:	ee17 3a90 	vmov	r3, s15
 80056dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80056de:	e005      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
      break;
 80056e4:	e002      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80056e6:	4b07      	ldr	r3, [pc, #28]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056e8:	61bb      	str	r3, [r7, #24]
      break;
 80056ea:	bf00      	nop
  }

  return sysclockfreq;
 80056ec:	69bb      	ldr	r3, [r7, #24]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	@ 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
 8005700:	03d09000 	.word	0x03d09000
 8005704:	003d0900 	.word	0x003d0900
 8005708:	017d7840 	.word	0x017d7840
 800570c:	46000000 	.word	0x46000000
 8005710:	4c742400 	.word	0x4c742400
 8005714:	4a742400 	.word	0x4a742400
 8005718:	4bbebc20 	.word	0x4bbebc20

0800571c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005722:	f7ff fe81 	bl	8005428 <HAL_RCC_GetSysClockFreq>
 8005726:	4602      	mov	r2, r0
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <HAL_RCC_GetHCLKFreq+0x50>)
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	0a1b      	lsrs	r3, r3, #8
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	490f      	ldr	r1, [pc, #60]	@ (8005770 <HAL_RCC_GetHCLKFreq+0x54>)
 8005734:	5ccb      	ldrb	r3, [r1, r3]
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <HAL_RCC_GetHCLKFreq+0x50>)
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	4a09      	ldr	r2, [pc, #36]	@ (8005770 <HAL_RCC_GetHCLKFreq+0x54>)
 800574a:	5cd3      	ldrb	r3, [r2, r3]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <HAL_RCC_GetHCLKFreq+0x58>)
 8005758:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800575a:	4a07      	ldr	r2, [pc, #28]	@ (8005778 <HAL_RCC_GetHCLKFreq+0x5c>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005760:	4b04      	ldr	r3, [pc, #16]	@ (8005774 <HAL_RCC_GetHCLKFreq+0x58>)
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	58024400 	.word	0x58024400
 8005770:	08014a3c 	.word	0x08014a3c
 8005774:	24000004 	.word	0x24000004
 8005778:	24000000 	.word	0x24000000

0800577c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005780:	f7ff ffcc 	bl	800571c <HAL_RCC_GetHCLKFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	4904      	ldr	r1, [pc, #16]	@ (80057a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005792:	5ccb      	ldrb	r3, [r1, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	58024400 	.word	0x58024400
 80057a4:	08014a3c 	.word	0x08014a3c

080057a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223f      	movs	r2, #63	@ 0x3f
 80057b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <HAL_RCC_GetClockConfig+0x7c>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0207 	and.w	r2, r3, #7
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80057c4:	4b17      	ldr	r3, [pc, #92]	@ (8005824 <HAL_RCC_GetClockConfig+0x7c>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80057d0:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <HAL_RCC_GetClockConfig+0x7c>)
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80057dc:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <HAL_RCC_GetClockConfig+0x7c>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80057e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005824 <HAL_RCC_GetClockConfig+0x7c>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80057f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005824 <HAL_RCC_GetClockConfig+0x7c>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <HAL_RCC_GetClockConfig+0x7c>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <HAL_RCC_GetClockConfig+0x80>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	601a      	str	r2, [r3, #0]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	58024400 	.word	0x58024400
 8005828:	52002000 	.word	0x52002000

0800582c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800582c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005830:	b0ca      	sub	sp, #296	@ 0x128
 8005832:	af00      	add	r7, sp, #0
 8005834:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800583e:	2300      	movs	r3, #0
 8005840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005850:	2500      	movs	r5, #0
 8005852:	ea54 0305 	orrs.w	r3, r4, r5
 8005856:	d049      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800585e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005862:	d02f      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005864:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005868:	d828      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800586a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800586e:	d01a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005874:	d822      	bhi.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800587a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800587e:	d007      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005880:	e01c      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005882:	4bb8      	ldr	r3, [pc, #736]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005886:	4ab7      	ldr	r2, [pc, #732]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800588e:	e01a      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	3308      	adds	r3, #8
 8005896:	2102      	movs	r1, #2
 8005898:	4618      	mov	r0, r3
 800589a:	f001 f9d1 	bl	8006c40 <RCCEx_PLL2_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058a4:	e00f      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	3328      	adds	r3, #40	@ 0x28
 80058ac:	2102      	movs	r1, #2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fa78 	bl	8006da4 <RCCEx_PLL3_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058ce:	4ba5      	ldr	r3, [pc, #660]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80058d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058dc:	4aa1      	ldr	r2, [pc, #644]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058de:	430b      	orrs	r3, r1
 80058e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80058e2:	e003      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80058f8:	f04f 0900 	mov.w	r9, #0
 80058fc:	ea58 0309 	orrs.w	r3, r8, r9
 8005900:	d047      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005908:	2b04      	cmp	r3, #4
 800590a:	d82a      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005929 	.word	0x08005929
 8005918:	08005937 	.word	0x08005937
 800591c:	0800594d 	.word	0x0800594d
 8005920:	0800596b 	.word	0x0800596b
 8005924:	0800596b 	.word	0x0800596b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005928:	4b8e      	ldr	r3, [pc, #568]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	4a8d      	ldr	r2, [pc, #564]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005934:	e01a      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	3308      	adds	r3, #8
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f001 f97e 	bl	8006c40 <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800594a:	e00f      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005950:	3328      	adds	r3, #40	@ 0x28
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f001 fa25 	bl	8006da4 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005960:	e004      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005968:	e000      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800596a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005974:	4b7b      	ldr	r3, [pc, #492]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	f023 0107 	bic.w	r1, r3, #7
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005982:	4a78      	ldr	r2, [pc, #480]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005984:	430b      	orrs	r3, r1
 8005986:	6513      	str	r3, [r2, #80]	@ 0x50
 8005988:	e003      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800599e:	f04f 0b00 	mov.w	fp, #0
 80059a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80059a6:	d04c      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b2:	d030      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80059b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b8:	d829      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80059bc:	d02d      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80059be:	2bc0      	cmp	r3, #192	@ 0xc0
 80059c0:	d825      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059c2:	2b80      	cmp	r3, #128	@ 0x80
 80059c4:	d018      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80059c6:	2b80      	cmp	r3, #128	@ 0x80
 80059c8:	d821      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80059ce:	2b40      	cmp	r3, #64	@ 0x40
 80059d0:	d007      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80059d2:	e01c      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d4:	4b63      	ldr	r3, [pc, #396]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	4a62      	ldr	r2, [pc, #392]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059e0:	e01c      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e6:	3308      	adds	r3, #8
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 f928 	bl	8006c40 <RCCEx_PLL2_Config>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80059f6:	e011      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fc:	3328      	adds	r3, #40	@ 0x28
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 f9cf 	bl	8006da4 <RCCEx_PLL3_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a0c:	e006      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a14:	e002      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a16:	bf00      	nop
 8005a18:	e000      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a24:	4b4f      	ldr	r3, [pc, #316]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a32:	4a4c      	ldr	r2, [pc, #304]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005a4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005a52:	2300      	movs	r3, #0
 8005a54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005a58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d053      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a6e:	d035      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a74:	d82e      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a7a:	d031      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a80:	d828      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a86:	d01a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a8c:	d822      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a96:	d007      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9a:	4b32      	ldr	r3, [pc, #200]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	4a31      	ldr	r2, [pc, #196]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005aa6:	e01c      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	3308      	adds	r3, #8
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f8c5 	bl	8006c40 <RCCEx_PLL2_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005abc:	e011      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	3328      	adds	r3, #40	@ 0x28
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f96c 	bl	8006da4 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ad2:	e006      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ada:	e002      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005adc:	bf00      	nop
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005aea:	4b1e      	ldr	r3, [pc, #120]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005afa:	4a1a      	ldr	r2, [pc, #104]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b00:	e003      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005b20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005b24:	460b      	mov	r3, r1
 8005b26:	4313      	orrs	r3, r2
 8005b28:	d056      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b36:	d038      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b3c:	d831      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b42:	d034      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005b44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b48:	d82b      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b4e:	d01d      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b54:	d825      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b5e:	d00a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b60:	e01f      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b62:	bf00      	nop
 8005b64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b68:	4ba2      	ldr	r3, [pc, #648]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	4aa1      	ldr	r2, [pc, #644]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b74:	e01c      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f85e 	bl	8006c40 <RCCEx_PLL2_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b8a:	e011      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b90:	3328      	adds	r3, #40	@ 0x28
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f905 	bl	8006da4 <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e006      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba8:	e002      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10b      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bb8:	4b8e      	ldr	r3, [pc, #568]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bc8:	4a8a      	ldr	r2, [pc, #552]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bce:	e003      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005bee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d03a      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfe:	2b30      	cmp	r3, #48	@ 0x30
 8005c00:	d01f      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c02:	2b30      	cmp	r3, #48	@ 0x30
 8005c04:	d819      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d00c      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d815      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d019      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d111      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c16:	4b77      	ldr	r3, [pc, #476]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	4a76      	ldr	r2, [pc, #472]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c22:	e011      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	3308      	adds	r3, #8
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f807 	bl	8006c40 <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005c38:	e006      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c42:	bf00      	nop
 8005c44:	e000      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c50:	4b68      	ldr	r3, [pc, #416]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5e:	4a65      	ldr	r2, [pc, #404]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c60:	430b      	orrs	r3, r1
 8005c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c64:	e003      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d051      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c98:	d035      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c9e:	d82e      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ca0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ca4:	d031      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005caa:	d828      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb0:	d01a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb6:	d822      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc0:	d007      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005cc2:	e01c      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cd0:	e01c      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 ffb0 	bl	8006c40 <RCCEx_PLL2_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ce6:	e011      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	3328      	adds	r3, #40	@ 0x28
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 f857 	bl	8006da4 <RCCEx_PLL3_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d04:	e002      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d14:	4b37      	ldr	r3, [pc, #220]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d22:	4a34      	ldr	r2, [pc, #208]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d28:	e003      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d42:	2300      	movs	r3, #0
 8005d44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	d056      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d5c:	d033      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d62:	d82c      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d68:	d02f      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005d6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d6e:	d826      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d74:	d02b      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005d76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d7a:	d820      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d80:	d012      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005d82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d86:	d81a      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d022      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d90:	d115      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	3308      	adds	r3, #8
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 ff50 	bl	8006c40 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005da6:	e015      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dac:	3328      	adds	r3, #40	@ 0x28
 8005dae:	2101      	movs	r1, #1
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 fff7 	bl	8006da4 <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e002      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10d      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ddc:	4b05      	ldr	r3, [pc, #20]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dea:	4a02      	ldr	r2, [pc, #8]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005df0:	e006      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005df2:	bf00      	nop
 8005df4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e10:	2300      	movs	r3, #0
 8005e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	d055      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e2c:	d033      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e32:	d82c      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e38:	d02f      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3e:	d826      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e44:	d02b      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005e46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e4a:	d820      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e50:	d012      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e56:	d81a      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d022      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005e5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e60:	d115      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	3308      	adds	r3, #8
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fee8 	bl	8006c40 <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e76:	e015      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7c:	3328      	adds	r3, #40	@ 0x28
 8005e7e:	2101      	movs	r1, #1
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 ff8f 	bl	8006da4 <RCCEx_PLL3_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e96:	bf00      	nop
 8005e98:	e004      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005eac:	4ba3      	ldr	r3, [pc, #652]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ebc:	4a9f      	ldr	r2, [pc, #636]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ec2:	e003      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	d037      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef6:	d00e      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efc:	d816      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f06:	d111      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f08:	4b8c      	ldr	r3, [pc, #560]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	4a8b      	ldr	r2, [pc, #556]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f14:	e00f      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fe8e 	bl	8006c40 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4c:	4a7b      	ldr	r2, [pc, #492]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f52:	e003      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d039      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d81c      	bhi.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005f86:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fc9 	.word	0x08005fc9
 8005f90:	08005f9d 	.word	0x08005f9d
 8005f94:	08005fab 	.word	0x08005fab
 8005f98:	08005fc9 	.word	0x08005fc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f9c:	4b67      	ldr	r3, [pc, #412]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	4a66      	ldr	r2, [pc, #408]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fa8:	e00f      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fae:	3308      	adds	r3, #8
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fe44 	bl	8006c40 <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fbe:	e004      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fc6:	e000      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10a      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005fd2:	4b5a      	ldr	r3, [pc, #360]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd6:	f023 0103 	bic.w	r1, r3, #3
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe0:	4a56      	ldr	r2, [pc, #344]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fe6:	e003      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006000:	2300      	movs	r3, #0
 8006002:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006006:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800600a:	460b      	mov	r3, r1
 800600c:	4313      	orrs	r3, r2
 800600e:	f000 809f 	beq.w	8006150 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006012:	4b4b      	ldr	r3, [pc, #300]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a4a      	ldr	r2, [pc, #296]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800601e:	f7fb fd05 	bl	8001a2c <HAL_GetTick>
 8006022:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006026:	e00b      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006028:	f7fb fd00 	bl	8001a2c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b64      	cmp	r3, #100	@ 0x64
 8006036:	d903      	bls.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800603e:	e005      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006040:	4b3f      	ldr	r3, [pc, #252]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0ed      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800604c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006050:	2b00      	cmp	r3, #0
 8006052:	d179      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006054:	4b39      	ldr	r3, [pc, #228]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006056:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006060:	4053      	eors	r3, r2
 8006062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006066:	2b00      	cmp	r3, #0
 8006068:	d015      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800606a:	4b34      	ldr	r3, [pc, #208]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006072:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006076:	4b31      	ldr	r3, [pc, #196]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607a:	4a30      	ldr	r2, [pc, #192]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800607c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006080:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006082:	4b2e      	ldr	r3, [pc, #184]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	4a2d      	ldr	r2, [pc, #180]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800608c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800608e:	4a2b      	ldr	r2, [pc, #172]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006090:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006094:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800609e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060a2:	d118      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fb fcc2 	bl	8001a2c <HAL_GetTick>
 80060a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ac:	e00d      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ae:	f7fb fcbd 	bl	8001a2c <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80060be:	429a      	cmp	r2, r3
 80060c0:	d903      	bls.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80060c8:	e005      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ca:	4b1c      	ldr	r3, [pc, #112]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0eb      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d129      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ee:	d10e      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80060f0:	4b12      	ldr	r3, [pc, #72]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006100:	091a      	lsrs	r2, r3, #4
 8006102:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006104:	4013      	ands	r3, r2
 8006106:	4a0d      	ldr	r2, [pc, #52]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6113      	str	r3, [r2, #16]
 800610c:	e005      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800610e:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	4a0a      	ldr	r2, [pc, #40]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006114:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006118:	6113      	str	r3, [r2, #16]
 800611a:	4b08      	ldr	r3, [pc, #32]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800611c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612a:	4a04      	ldr	r2, [pc, #16]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006130:	e00e      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800613a:	e009      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800613c:	58024400 	.word	0x58024400
 8006140:	58024800 	.word	0x58024800
 8006144:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f002 0301 	and.w	r3, r2, #1
 800615c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006166:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800616a:	460b      	mov	r3, r1
 800616c:	4313      	orrs	r3, r2
 800616e:	f000 8089 	beq.w	8006284 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006178:	2b28      	cmp	r3, #40	@ 0x28
 800617a:	d86b      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800617c:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	0800625d 	.word	0x0800625d
 8006188:	08006255 	.word	0x08006255
 800618c:	08006255 	.word	0x08006255
 8006190:	08006255 	.word	0x08006255
 8006194:	08006255 	.word	0x08006255
 8006198:	08006255 	.word	0x08006255
 800619c:	08006255 	.word	0x08006255
 80061a0:	08006255 	.word	0x08006255
 80061a4:	08006229 	.word	0x08006229
 80061a8:	08006255 	.word	0x08006255
 80061ac:	08006255 	.word	0x08006255
 80061b0:	08006255 	.word	0x08006255
 80061b4:	08006255 	.word	0x08006255
 80061b8:	08006255 	.word	0x08006255
 80061bc:	08006255 	.word	0x08006255
 80061c0:	08006255 	.word	0x08006255
 80061c4:	0800623f 	.word	0x0800623f
 80061c8:	08006255 	.word	0x08006255
 80061cc:	08006255 	.word	0x08006255
 80061d0:	08006255 	.word	0x08006255
 80061d4:	08006255 	.word	0x08006255
 80061d8:	08006255 	.word	0x08006255
 80061dc:	08006255 	.word	0x08006255
 80061e0:	08006255 	.word	0x08006255
 80061e4:	0800625d 	.word	0x0800625d
 80061e8:	08006255 	.word	0x08006255
 80061ec:	08006255 	.word	0x08006255
 80061f0:	08006255 	.word	0x08006255
 80061f4:	08006255 	.word	0x08006255
 80061f8:	08006255 	.word	0x08006255
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006255 	.word	0x08006255
 8006204:	0800625d 	.word	0x0800625d
 8006208:	08006255 	.word	0x08006255
 800620c:	08006255 	.word	0x08006255
 8006210:	08006255 	.word	0x08006255
 8006214:	08006255 	.word	0x08006255
 8006218:	08006255 	.word	0x08006255
 800621c:	08006255 	.word	0x08006255
 8006220:	08006255 	.word	0x08006255
 8006224:	0800625d 	.word	0x0800625d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622c:	3308      	adds	r3, #8
 800622e:	2101      	movs	r1, #1
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fd05 	bl	8006c40 <RCCEx_PLL2_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800623c:	e00f      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	3328      	adds	r3, #40	@ 0x28
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fdac 	bl	8006da4 <RCCEx_PLL3_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006266:	4bbf      	ldr	r3, [pc, #764]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006274:	4abb      	ldr	r2, [pc, #748]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6553      	str	r3, [r2, #84]	@ 0x54
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f002 0302 	and.w	r3, r2, #2
 8006290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800629a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d041      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d824      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80062ae:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	08006301 	.word	0x08006301
 80062b8:	080062cd 	.word	0x080062cd
 80062bc:	080062e3 	.word	0x080062e3
 80062c0:	08006301 	.word	0x08006301
 80062c4:	08006301 	.word	0x08006301
 80062c8:	08006301 	.word	0x08006301
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	3308      	adds	r3, #8
 80062d2:	2101      	movs	r1, #1
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fcb3 	bl	8006c40 <RCCEx_PLL2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062e0:	e00f      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e6:	3328      	adds	r3, #40	@ 0x28
 80062e8:	2101      	movs	r1, #1
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fd5a 	bl	8006da4 <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800630a:	4b96      	ldr	r3, [pc, #600]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	f023 0107 	bic.w	r1, r3, #7
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006318:	4a92      	ldr	r2, [pc, #584]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800631a:	430b      	orrs	r3, r1
 800631c:	6553      	str	r3, [r2, #84]	@ 0x54
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f002 0304 	and.w	r3, r2, #4
 8006334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800633e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006342:	460b      	mov	r3, r1
 8006344:	4313      	orrs	r3, r2
 8006346:	d044      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006350:	2b05      	cmp	r3, #5
 8006352:	d825      	bhi.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006354:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	080063a9 	.word	0x080063a9
 8006360:	08006375 	.word	0x08006375
 8006364:	0800638b 	.word	0x0800638b
 8006368:	080063a9 	.word	0x080063a9
 800636c:	080063a9 	.word	0x080063a9
 8006370:	080063a9 	.word	0x080063a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006378:	3308      	adds	r3, #8
 800637a:	2101      	movs	r1, #1
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fc5f 	bl	8006c40 <RCCEx_PLL2_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006388:	e00f      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638e:	3328      	adds	r3, #40	@ 0x28
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fd06 	bl	8006da4 <RCCEx_PLL3_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800639e:	e004      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a6:	e000      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80063a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b6:	f023 0107 	bic.w	r1, r3, #7
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c2:	4a68      	ldr	r2, [pc, #416]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c8:	e003      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f002 0320 	and.w	r3, r2, #32
 80063de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063ec:	460b      	mov	r3, r1
 80063ee:	4313      	orrs	r3, r2
 80063f0:	d055      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063fe:	d033      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006404:	d82c      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640a:	d02f      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006410:	d826      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006412:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006416:	d02b      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006418:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800641c:	d820      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800641e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006422:	d012      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006428:	d81a      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d022      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800642e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006432:	d115      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	3308      	adds	r3, #8
 800643a:	2100      	movs	r1, #0
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fbff 	bl	8006c40 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006448:	e015      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644e:	3328      	adds	r3, #40	@ 0x28
 8006450:	2102      	movs	r1, #2
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fca6 	bl	8006da4 <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800645e:	e00a      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006466:	e006      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006468:	bf00      	nop
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800646c:	bf00      	nop
 800646e:	e002      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800647e:	4b39      	ldr	r3, [pc, #228]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648e:	4a35      	ldr	r2, [pc, #212]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6553      	str	r3, [r2, #84]	@ 0x54
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80064aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064ae:	2300      	movs	r3, #0
 80064b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4313      	orrs	r3, r2
 80064bc:	d058      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064ca:	d033      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80064cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064d0:	d82c      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d6:	d02f      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064dc:	d826      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e2:	d02b      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80064e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e8:	d820      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ee:	d012      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80064f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f4:	d81a      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d022      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80064fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fe:	d115      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006504:	3308      	adds	r3, #8
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fb99 	bl	8006c40 <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006514:	e015      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	3328      	adds	r3, #40	@ 0x28
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fc40 	bl	8006da4 <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800652a:	e00a      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006532:	e006      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006534:	bf00      	nop
 8006536:	e004      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006538:	bf00      	nop
 800653a:	e002      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10e      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800654a:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800654c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800655a:	4a02      	ldr	r2, [pc, #8]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006560:	e006      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006562:	bf00      	nop
 8006564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800657c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006586:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d055      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006598:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800659c:	d033      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800659e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065a2:	d82c      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a8:	d02f      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80065aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ae:	d826      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065b4:	d02b      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80065b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065ba:	d820      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c0:	d012      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80065c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c6:	d81a      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d022      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80065cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d0:	d115      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	3308      	adds	r3, #8
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fb30 	bl	8006c40 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065e6:	e015      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	3328      	adds	r3, #40	@ 0x28
 80065ee:	2102      	movs	r1, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fbd7 	bl	8006da4 <RCCEx_PLL3_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065fc:	e00a      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006606:	bf00      	nop
 8006608:	e004      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800661c:	4ba1      	ldr	r3, [pc, #644]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006620:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006628:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800662c:	4a9d      	ldr	r2, [pc, #628]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662e:	430b      	orrs	r3, r1
 8006630:	6593      	str	r3, [r2, #88]	@ 0x58
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f002 0308 	and.w	r3, r2, #8
 8006648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800664c:	2300      	movs	r3, #0
 800664e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006652:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	d01e      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006668:	d10c      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666e:	3328      	adds	r3, #40	@ 0x28
 8006670:	2102      	movs	r1, #2
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fb96 	bl	8006da4 <RCCEx_PLL3_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006684:	4b87      	ldr	r3, [pc, #540]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006688:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006694:	4a83      	ldr	r2, [pc, #524]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006696:	430b      	orrs	r3, r1
 8006698:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f002 0310 	and.w	r3, r2, #16
 80066a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066aa:	2300      	movs	r3, #0
 80066ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d01e      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c6:	d10c      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066cc:	3328      	adds	r3, #40	@ 0x28
 80066ce:	2102      	movs	r1, #2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fb67 	bl	8006da4 <RCCEx_PLL3_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066e2:	4b70      	ldr	r3, [pc, #448]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066f2:	4a6c      	ldr	r2, [pc, #432]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006708:	2300      	movs	r3, #0
 800670a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800670e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006712:	460b      	mov	r3, r1
 8006714:	4313      	orrs	r3, r2
 8006716:	d03e      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006724:	d022      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800672a:	d81b      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006734:	d00b      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006736:	e015      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	3308      	adds	r3, #8
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fa7d 	bl	8006c40 <RCCEx_PLL2_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800674c:	e00f      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	3328      	adds	r3, #40	@ 0x28
 8006754:	2102      	movs	r1, #2
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fb24 	bl	8006da4 <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006776:	4b4b      	ldr	r3, [pc, #300]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006786:	4a47      	ldr	r2, [pc, #284]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6593      	str	r3, [r2, #88]	@ 0x58
 800678c:	e003      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80067a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067a4:	2300      	movs	r3, #0
 80067a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d03b      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067be:	d01f      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80067c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067c4:	d818      	bhi.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ca:	d003      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80067cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067d0:	d007      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80067d2:	e011      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d4:	4b33      	ldr	r3, [pc, #204]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	4a32      	ldr	r2, [pc, #200]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80067e0:	e00f      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e6:	3328      	adds	r3, #40	@ 0x28
 80067e8:	2101      	movs	r1, #1
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fada 	bl	8006da4 <RCCEx_PLL3_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80067f6:	e004      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067fe:	e000      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800680a:	4b26      	ldr	r3, [pc, #152]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800680c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	4a22      	ldr	r2, [pc, #136]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800681c:	430b      	orrs	r3, r1
 800681e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006820:	e003      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006836:	673b      	str	r3, [r7, #112]	@ 0x70
 8006838:	2300      	movs	r3, #0
 800683a:	677b      	str	r3, [r7, #116]	@ 0x74
 800683c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d034      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006854:	d007      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006856:	e011      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006858:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	4a11      	ldr	r2, [pc, #68]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800685e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006864:	e00e      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686a:	3308      	adds	r3, #8
 800686c:	2102      	movs	r1, #2
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f9e6 	bl	8006c40 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800687a:	e003      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10d      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800688e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006890:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800689a:	4a02      	ldr	r2, [pc, #8]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800689c:	430b      	orrs	r3, r1
 800689e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068a0:	e006      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80068a2:	bf00      	nop
 80068a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80068bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068be:	2300      	movs	r3, #0
 80068c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d00c      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d0:	3328      	adds	r3, #40	@ 0x28
 80068d2:	2102      	movs	r1, #2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fa65 	bl	8006da4 <RCCEx_PLL3_Config>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80068f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80068f4:	2300      	movs	r3, #0
 80068f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80068f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80068fc:	460b      	mov	r3, r1
 80068fe:	4313      	orrs	r3, r2
 8006900:	d038      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800690e:	d018      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006910:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006914:	d811      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691a:	d014      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800691c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006920:	d80b      	bhi.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d011      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692a:	d106      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692c:	4bc3      	ldr	r3, [pc, #780]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	4ac2      	ldr	r2, [pc, #776]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006938:	e008      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006942:	bf00      	nop
 8006944:	e002      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006946:	bf00      	nop
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800694a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006954:	4bb9      	ldr	r3, [pc, #740]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006958:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006964:	4ab5      	ldr	r2, [pc, #724]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006966:	430b      	orrs	r3, r1
 8006968:	6553      	str	r3, [r2, #84]	@ 0x54
 800696a:	e003      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006980:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006982:	2300      	movs	r3, #0
 8006984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006986:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800698a:	460b      	mov	r3, r1
 800698c:	4313      	orrs	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006990:	4baa      	ldr	r3, [pc, #680]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006994:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800699e:	4aa7      	ldr	r2, [pc, #668]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80069b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80069b2:	2300      	movs	r3, #0
 80069b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80069b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80069ba:	460b      	mov	r3, r1
 80069bc:	4313      	orrs	r3, r2
 80069be:	d00a      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80069c0:	4b9e      	ldr	r3, [pc, #632]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80069d0:	4a9a      	ldr	r2, [pc, #616]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069d2:	430b      	orrs	r3, r1
 80069d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80069e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069e4:	2300      	movs	r3, #0
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80069ec:	460b      	mov	r3, r1
 80069ee:	4313      	orrs	r3, r2
 80069f0:	d009      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069f2:	4b92      	ldr	r3, [pc, #584]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a00:	4a8e      	ldr	r2, [pc, #568]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a14:	2300      	movs	r3, #0
 8006a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d00e      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a22:	4b86      	ldr	r3, [pc, #536]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	4a85      	ldr	r2, [pc, #532]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a2c:	6113      	str	r3, [r2, #16]
 8006a2e:	4b83      	ldr	r3, [pc, #524]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a30:	6919      	ldr	r1, [r3, #16]
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a3a:	4a80      	ldr	r2, [pc, #512]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a5c:	4b77      	ldr	r3, [pc, #476]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6a:	4a74      	ldr	r2, [pc, #464]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a86:	460b      	mov	r3, r1
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	d00a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a8c:	4b6b      	ldr	r3, [pc, #428]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a9c:	4a67      	ldr	r2, [pc, #412]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	2100      	movs	r1, #0
 8006aac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ab4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d011      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 f8ba 	bl	8006c40 <RCCEx_PLL2_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	2100      	movs	r1, #0
 8006aec:	6239      	str	r1, [r7, #32]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006af8:	460b      	mov	r3, r1
 8006afa:	4313      	orrs	r3, r2
 8006afc:	d011      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b02:	3308      	adds	r3, #8
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f89a 	bl	8006c40 <RCCEx_PLL2_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	61b9      	str	r1, [r7, #24]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	d011      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	3308      	adds	r3, #8
 8006b44:	2102      	movs	r1, #2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f87a 	bl	8006c40 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6139      	str	r1, [r7, #16]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	d011      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b82:	3328      	adds	r3, #40	@ 0x28
 8006b84:	2100      	movs	r1, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 f90c 	bl	8006da4 <RCCEx_PLL3_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	2100      	movs	r1, #0
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	d011      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	3328      	adds	r3, #40	@ 0x28
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f8ec 	bl	8006da4 <RCCEx_PLL3_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	2100      	movs	r1, #0
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d011      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	3328      	adds	r3, #40	@ 0x28
 8006c04:	2102      	movs	r1, #2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f8cc 	bl	8006da4 <RCCEx_PLL3_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006c22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006c36:	46bd      	mov	sp, r7
 8006c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3c:	58024400 	.word	0x58024400

08006c40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c4e:	4b53      	ldr	r3, [pc, #332]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d101      	bne.n	8006c5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e099      	b.n	8006d92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a4e      	ldr	r2, [pc, #312]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006c64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c6a:	f7fa fedf 	bl	8001a2c <HAL_GetTick>
 8006c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c70:	e008      	b.n	8006c84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c72:	f7fa fedb 	bl	8001a2c <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e086      	b.n	8006d92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c84:	4b45      	ldr	r3, [pc, #276]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f0      	bne.n	8006c72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c90:	4b42      	ldr	r3, [pc, #264]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	031b      	lsls	r3, r3, #12
 8006c9e:	493f      	ldr	r1, [pc, #252]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	025b      	lsls	r3, r3, #9
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	041b      	lsls	r3, r3, #16
 8006cc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	061b      	lsls	r3, r3, #24
 8006cd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006cd4:	4931      	ldr	r1, [pc, #196]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006cda:	4b30      	ldr	r3, [pc, #192]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	492d      	ldr	r1, [pc, #180]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006cec:	4b2b      	ldr	r3, [pc, #172]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	f023 0220 	bic.w	r2, r3, #32
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	4928      	ldr	r1, [pc, #160]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006cfe:	4b27      	ldr	r3, [pc, #156]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d02:	4a26      	ldr	r2, [pc, #152]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d04:	f023 0310 	bic.w	r3, r3, #16
 8006d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d0a:	4b24      	ldr	r3, [pc, #144]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d0e:	4b24      	ldr	r3, [pc, #144]	@ (8006da0 <RCCEx_PLL2_Config+0x160>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	69d2      	ldr	r2, [r2, #28]
 8006d16:	00d2      	lsls	r2, r2, #3
 8006d18:	4920      	ldr	r1, [pc, #128]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d22:	4a1e      	ldr	r2, [pc, #120]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d24:	f043 0310 	orr.w	r3, r3, #16
 8006d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d30:	4b1a      	ldr	r3, [pc, #104]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	4a19      	ldr	r2, [pc, #100]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d3c:	e00f      	b.n	8006d5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d106      	bne.n	8006d52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d44:	4b15      	ldr	r3, [pc, #84]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	4a14      	ldr	r2, [pc, #80]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d50:	e005      	b.n	8006d5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d52:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	4a11      	ldr	r2, [pc, #68]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a0e      	ldr	r2, [pc, #56]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6a:	f7fa fe5f 	bl	8001a2c <HAL_GetTick>
 8006d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d70:	e008      	b.n	8006d84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d72:	f7fa fe5b 	bl	8001a2c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e006      	b.n	8006d92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <RCCEx_PLL2_Config+0x15c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f0      	beq.n	8006d72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	58024400 	.word	0x58024400
 8006da0:	ffff0007 	.word	0xffff0007

08006da4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006db2:	4b53      	ldr	r3, [pc, #332]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d101      	bne.n	8006dc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e099      	b.n	8006ef6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dce:	f7fa fe2d 	bl	8001a2c <HAL_GetTick>
 8006dd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dd4:	e008      	b.n	8006de8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dd6:	f7fa fe29 	bl	8001a2c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e086      	b.n	8006ef6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006de8:	4b45      	ldr	r3, [pc, #276]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1f0      	bne.n	8006dd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006df4:	4b42      	ldr	r3, [pc, #264]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	051b      	lsls	r3, r3, #20
 8006e02:	493f      	ldr	r1, [pc, #252]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	025b      	lsls	r3, r3, #9
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	061b      	lsls	r3, r3, #24
 8006e34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e38:	4931      	ldr	r1, [pc, #196]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e3e:	4b30      	ldr	r3, [pc, #192]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	492d      	ldr	r1, [pc, #180]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e50:	4b2b      	ldr	r3, [pc, #172]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	4928      	ldr	r1, [pc, #160]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e62:	4b27      	ldr	r3, [pc, #156]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e66:	4a26      	ldr	r2, [pc, #152]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e6e:	4b24      	ldr	r3, [pc, #144]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e72:	4b24      	ldr	r3, [pc, #144]	@ (8006f04 <RCCEx_PLL3_Config+0x160>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	69d2      	ldr	r2, [r2, #28]
 8006e7a:	00d2      	lsls	r2, r2, #3
 8006e7c:	4920      	ldr	r1, [pc, #128]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e82:	4b1f      	ldr	r3, [pc, #124]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	4a1e      	ldr	r2, [pc, #120]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e94:	4b1a      	ldr	r3, [pc, #104]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006e9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ea0:	e00f      	b.n	8006ec2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ea8:	4b15      	ldr	r3, [pc, #84]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	4a14      	ldr	r2, [pc, #80]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006eae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006eb4:	e005      	b.n	8006ec2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006eb6:	4b12      	ldr	r3, [pc, #72]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eba:	4a11      	ldr	r2, [pc, #68]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ece:	f7fa fdad 	bl	8001a2c <HAL_GetTick>
 8006ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ed4:	e008      	b.n	8006ee8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ed6:	f7fa fda9 	bl	8001a2c <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e006      	b.n	8006ef6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ee8:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <RCCEx_PLL3_Config+0x15c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0f0      	beq.n	8006ed6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
 8006f04:	ffff0007 	.word	0xffff0007

08006f08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e10f      	b.n	800713a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a87      	ldr	r2, [pc, #540]	@ (8007144 <HAL_SPI_Init+0x23c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00f      	beq.n	8006f4a <HAL_SPI_Init+0x42>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a86      	ldr	r2, [pc, #536]	@ (8007148 <HAL_SPI_Init+0x240>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00a      	beq.n	8006f4a <HAL_SPI_Init+0x42>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a84      	ldr	r2, [pc, #528]	@ (800714c <HAL_SPI_Init+0x244>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d005      	beq.n	8006f4a <HAL_SPI_Init+0x42>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	2b0f      	cmp	r3, #15
 8006f44:	d901      	bls.n	8006f4a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e0f7      	b.n	800713a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fe2e 	bl	8007bac <SPI_GetPacketSize>
 8006f50:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a7b      	ldr	r2, [pc, #492]	@ (8007144 <HAL_SPI_Init+0x23c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00c      	beq.n	8006f76 <HAL_SPI_Init+0x6e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a79      	ldr	r2, [pc, #484]	@ (8007148 <HAL_SPI_Init+0x240>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <HAL_SPI_Init+0x6e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a78      	ldr	r2, [pc, #480]	@ (800714c <HAL_SPI_Init+0x244>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d002      	beq.n	8006f76 <HAL_SPI_Init+0x6e>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d811      	bhi.n	8006f9a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f7a:	4a72      	ldr	r2, [pc, #456]	@ (8007144 <HAL_SPI_Init+0x23c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a70      	ldr	r2, [pc, #448]	@ (8007148 <HAL_SPI_Init+0x240>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_SPI_Init+0x8c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a6f      	ldr	r2, [pc, #444]	@ (800714c <HAL_SPI_Init+0x244>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d104      	bne.n	8006f9e <HAL_SPI_Init+0x96>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d901      	bls.n	8006f9e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e0cd      	b.n	800713a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fa f84c 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006fda:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fe4:	d119      	bne.n	800701a <HAL_SPI_Init+0x112>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fee:	d103      	bne.n	8006ff8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10c      	bne.n	800701a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007008:	d107      	bne.n	800701a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007018:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00f      	beq.n	8007046 <HAL_SPI_Init+0x13e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b06      	cmp	r3, #6
 800702c:	d90b      	bls.n	8007046 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e007      	b.n	8007056 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007054:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69da      	ldr	r2, [r3, #28]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	431a      	orrs	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007068:	ea42 0103 	orr.w	r1, r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	431a      	orrs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b6:	ea42 0103 	orr.w	r1, r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d113      	bne.n	80070f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	40013000 	.word	0x40013000
 8007148:	40003800 	.word	0x40003800
 800714c:	40003c00 	.word	0x40003c00

08007150 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3320      	adds	r3, #32
 8007166:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007168:	f7fa fc60 	bl	8001a2c <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	d001      	beq.n	800717e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800717a:	2302      	movs	r3, #2
 800717c:	e1d1      	b.n	8007522 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_SPI_Transmit+0x3a>
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e1c9      	b.n	8007522 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_SPI_Transmit+0x4c>
 8007198:	2302      	movs	r3, #2
 800719a:	e1c2      	b.n	8007522 <HAL_SPI_Transmit+0x3d2>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2203      	movs	r2, #3
 80071a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	88fa      	ldrh	r2, [r7, #6]
 80071be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80071f4:	d108      	bne.n	8007208 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	e009      	b.n	800721c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800721a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	4b96      	ldr	r3, [pc, #600]	@ (800747c <HAL_SPI_Transmit+0x32c>)
 8007224:	4013      	ands	r3, r2
 8007226:	88f9      	ldrh	r1, [r7, #6]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	6812      	ldr	r2, [r2, #0]
 800722c:	430b      	orrs	r3, r1
 800722e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007248:	d107      	bne.n	800725a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	2b0f      	cmp	r3, #15
 8007260:	d947      	bls.n	80072f2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007262:	e03f      	b.n	80072e4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b02      	cmp	r3, #2
 8007270:	d114      	bne.n	800729c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007282:	1d1a      	adds	r2, r3, #4
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800729a:	e023      	b.n	80072e4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729c:	f7fa fbc6 	bl	8001a2c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d803      	bhi.n	80072b4 <HAL_SPI_Transmit+0x164>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_Transmit+0x16a>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d114      	bne.n	80072e4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 fba8 	bl	8007a10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e11e      	b.n	8007522 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1b9      	bne.n	8007264 <HAL_SPI_Transmit+0x114>
 80072f0:	e0f1      	b.n	80074d6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b07      	cmp	r3, #7
 80072f8:	f240 80e6 	bls.w	80074c8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072fc:	e05d      	b.n	80073ba <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d132      	bne.n	8007372 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	d918      	bls.n	800734a <HAL_SPI_Transmit+0x1fa>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d014      	beq.n	800734a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007330:	1d1a      	adds	r2, r3, #4
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b02      	subs	r3, #2
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007348:	e037      	b.n	80073ba <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734e:	881a      	ldrh	r2, [r3, #0]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007358:	1c9a      	adds	r2, r3, #2
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007370:	e023      	b.n	80073ba <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007372:	f7fa fb5b 	bl	8001a2c <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d803      	bhi.n	800738a <HAL_SPI_Transmit+0x23a>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007388:	d102      	bne.n	8007390 <HAL_SPI_Transmit+0x240>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d114      	bne.n	80073ba <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fb3d 	bl	8007a10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800739c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e0b3      	b.n	8007522 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d19b      	bne.n	80072fe <HAL_SPI_Transmit+0x1ae>
 80073c6:	e086      	b.n	80074d6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d154      	bne.n	8007480 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d918      	bls.n	8007414 <HAL_SPI_Transmit+0x2c4>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e6:	2b40      	cmp	r3, #64	@ 0x40
 80073e8:	d914      	bls.n	8007414 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073fa:	1d1a      	adds	r2, r3, #4
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b04      	subs	r3, #4
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007412:	e059      	b.n	80074c8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	d917      	bls.n	8007450 <HAL_SPI_Transmit+0x300>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d013      	beq.n	8007450 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007436:	1c9a      	adds	r2, r3, #2
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b02      	subs	r3, #2
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800744e:	e03b      	b.n	80074c8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3320      	adds	r3, #32
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800747a:	e025      	b.n	80074c8 <HAL_SPI_Transmit+0x378>
 800747c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007480:	f7fa fad4 	bl	8001a2c <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d803      	bhi.n	8007498 <HAL_SPI_Transmit+0x348>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d102      	bne.n	800749e <HAL_SPI_Transmit+0x34e>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d114      	bne.n	80074c8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fab6 	bl	8007a10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e02c      	b.n	8007522 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f47f af79 	bne.w	80073c8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2200      	movs	r2, #0
 80074de:	2108      	movs	r1, #8
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fb35 	bl	8007b50 <SPI_WaitOnFlagUntilTimeout>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f2:	f043 0220 	orr.w	r2, r3, #32
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fa87 	bl	8007a10 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007520:	2300      	movs	r3, #0
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop

0800752c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	4613      	mov	r3, r2
 800753a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	b29b      	uxth	r3, r3
 8007544:	3301      	adds	r3, #1
 8007546:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3330      	adds	r3, #48	@ 0x30
 800754e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007550:	f7fa fa6c 	bl	8001a2c <HAL_GetTick>
 8007554:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b01      	cmp	r3, #1
 8007560:	d001      	beq.n	8007566 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007562:	2302      	movs	r3, #2
 8007564:	e250      	b.n	8007a08 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <HAL_SPI_Receive+0x46>
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e248      	b.n	8007a08 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_SPI_Receive+0x58>
 8007580:	2302      	movs	r3, #2
 8007582:	e241      	b.n	8007a08 <HAL_SPI_Receive+0x4dc>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2204      	movs	r2, #4
 8007590:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	88fa      	ldrh	r2, [r7, #6]
 80075a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80075dc:	d108      	bne.n	80075f0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e009      	b.n	8007604 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007602:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	4b95      	ldr	r3, [pc, #596]	@ (8007860 <HAL_SPI_Receive+0x334>)
 800760c:	4013      	ands	r3, r2
 800760e:	88f9      	ldrh	r1, [r7, #6]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	430b      	orrs	r3, r1
 8007616:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007630:	d107      	bne.n	8007642 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007640:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2b0f      	cmp	r3, #15
 8007648:	d96c      	bls.n	8007724 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800764a:	e064      	b.n	8007716 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b01      	cmp	r3, #1
 8007660:	d114      	bne.n	800768c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800766a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800766c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800768a:	e044      	b.n	8007716 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007692:	b29b      	uxth	r3, r3
 8007694:	8bfa      	ldrh	r2, [r7, #30]
 8007696:	429a      	cmp	r2, r3
 8007698:	d919      	bls.n	80076ce <HAL_SPI_Receive+0x1a2>
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d014      	beq.n	80076ce <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076ae:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076cc:	e023      	b.n	8007716 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ce:	f7fa f9ad 	bl	8001a2c <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d803      	bhi.n	80076e6 <HAL_SPI_Receive+0x1ba>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d102      	bne.n	80076ec <HAL_SPI_Receive+0x1c0>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d114      	bne.n	8007716 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f98f 	bl	8007a10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e178      	b.n	8007a08 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d194      	bne.n	800764c <HAL_SPI_Receive+0x120>
 8007722:	e15e      	b.n	80079e2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	2b07      	cmp	r3, #7
 800772a:	f240 8153 	bls.w	80079d4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800772e:	e08f      	b.n	8007850 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d114      	bne.n	8007770 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	8812      	ldrh	r2, [r2, #0]
 800774e:	b292      	uxth	r2, r2
 8007750:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007756:	1c9a      	adds	r2, r3, #2
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800776e:	e06f      	b.n	8007850 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007776:	b29b      	uxth	r3, r3
 8007778:	8bfa      	ldrh	r2, [r7, #30]
 800777a:	429a      	cmp	r2, r3
 800777c:	d924      	bls.n	80077c8 <HAL_SPI_Receive+0x29c>
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01f      	beq.n	80077c8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	8812      	ldrh	r2, [r2, #0]
 8007790:	b292      	uxth	r2, r2
 8007792:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007798:	1c9a      	adds	r2, r3, #2
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	8812      	ldrh	r2, [r2, #0]
 80077a6:	b292      	uxth	r2, r2
 80077a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ae:	1c9a      	adds	r2, r3, #2
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b02      	subs	r3, #2
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80077c6:	e043      	b.n	8007850 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d119      	bne.n	8007808 <HAL_SPI_Receive+0x2dc>
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d014      	beq.n	8007808 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	8812      	ldrh	r2, [r2, #0]
 80077e6:	b292      	uxth	r2, r2
 80077e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ee:	1c9a      	adds	r2, r3, #2
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007806:	e023      	b.n	8007850 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007808:	f7fa f910 	bl	8001a2c <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d803      	bhi.n	8007820 <HAL_SPI_Receive+0x2f4>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781e:	d102      	bne.n	8007826 <HAL_SPI_Receive+0x2fa>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d114      	bne.n	8007850 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f8f2 	bl	8007a10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007832:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e0db      	b.n	8007a08 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	f47f af69 	bne.w	8007730 <HAL_SPI_Receive+0x204>
 800785e:	e0c0      	b.n	80079e2 <HAL_SPI_Receive+0x4b6>
 8007860:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b01      	cmp	r3, #1
 8007878:	d117      	bne.n	80078aa <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078a8:	e094      	b.n	80079d4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	8bfa      	ldrh	r2, [r7, #30]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d946      	bls.n	8007946 <HAL_SPI_Receive+0x41a>
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d041      	beq.n	8007946 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007906:	7812      	ldrb	r2, [r2, #0]
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007922:	7812      	ldrb	r2, [r2, #0]
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b04      	subs	r3, #4
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007944:	e046      	b.n	80079d4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d81c      	bhi.n	800798c <HAL_SPI_Receive+0x460>
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d017      	beq.n	800798c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800798a:	e023      	b.n	80079d4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800798c:	f7fa f84e 	bl	8001a2c <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d803      	bhi.n	80079a4 <HAL_SPI_Receive+0x478>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a2:	d102      	bne.n	80079aa <HAL_SPI_Receive+0x47e>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d114      	bne.n	80079d4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f830 	bl	8007a10 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e019      	b.n	8007a08 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f47f af41 	bne.w	8007864 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f814 	bl	8007a10 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
  }
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0208 	orr.w	r2, r2, #8
 8007a2e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0210 	orr.w	r2, r2, #16
 8007a3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0201 	bic.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6919      	ldr	r1, [r3, #16]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b4c <SPI_CloseTransfer+0x13c>)
 8007a5c:	400b      	ands	r3, r1
 8007a5e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007a6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d014      	beq.n	8007aa6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00f      	beq.n	8007aa6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699a      	ldr	r2, [r3, #24]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0220 	orr.w	r2, r2, #32
 8007aa4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d014      	beq.n	8007adc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00f      	beq.n	8007adc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac2:	f043 0204 	orr.w	r2, r3, #4
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ada:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aec:	f043 0201 	orr.w	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b04:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00f      	beq.n	8007b30 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b16:	f043 0208 	orr.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b2e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007b40:	bf00      	nop
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	fffffc90 	.word	0xfffffc90

08007b50 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b60:	e010      	b.n	8007b84 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b62:	f7f9 ff63 	bl	8001a2c <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d803      	bhi.n	8007b7a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b78:	d102      	bne.n	8007b80 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e00f      	b.n	8007ba4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695a      	ldr	r2, [r3, #20]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	bf0c      	ite	eq
 8007b94:	2301      	moveq	r3, #1
 8007b96:	2300      	movne	r3, #0
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d0df      	beq.n	8007b62 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	3307      	adds	r3, #7
 8007bca:	08db      	lsrs	r3, r3, #3
 8007bcc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e049      	b.n	8007c88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d106      	bne.n	8007c0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7f9 fdfb 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f000 fd59 	bl	80086d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d001      	beq.n	8007ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e054      	b.n	8007d52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0201 	orr.w	r2, r2, #1
 8007cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a26      	ldr	r2, [pc, #152]	@ (8007d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d022      	beq.n	8007d10 <HAL_TIM_Base_Start_IT+0x80>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd2:	d01d      	beq.n	8007d10 <HAL_TIM_Base_Start_IT+0x80>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a22      	ldr	r2, [pc, #136]	@ (8007d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d018      	beq.n	8007d10 <HAL_TIM_Base_Start_IT+0x80>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	@ (8007d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d013      	beq.n	8007d10 <HAL_TIM_Base_Start_IT+0x80>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1f      	ldr	r2, [pc, #124]	@ (8007d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00e      	beq.n	8007d10 <HAL_TIM_Base_Start_IT+0x80>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d70 <HAL_TIM_Base_Start_IT+0xe0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d009      	beq.n	8007d10 <HAL_TIM_Base_Start_IT+0x80>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1c      	ldr	r2, [pc, #112]	@ (8007d74 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_TIM_Base_Start_IT+0x80>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d78 <HAL_TIM_Base_Start_IT+0xe8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d115      	bne.n	8007d3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	4b19      	ldr	r3, [pc, #100]	@ (8007d7c <HAL_TIM_Base_Start_IT+0xec>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b06      	cmp	r3, #6
 8007d20:	d015      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0xbe>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d28:	d011      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0201 	orr.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3a:	e008      	b.n	8007d4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	e000      	b.n	8007d50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40000400 	.word	0x40000400
 8007d68:	40000800 	.word	0x40000800
 8007d6c:	40000c00 	.word	0x40000c00
 8007d70:	40010400 	.word	0x40010400
 8007d74:	40001800 	.word	0x40001800
 8007d78:	40014000 	.word	0x40014000
 8007d7c:	00010007 	.word	0x00010007

08007d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e049      	b.n	8007e26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f841 	bl	8007e2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f000 fc8a 	bl	80086d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <HAL_TIM_PWM_Start+0x24>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	bf14      	ite	ne
 8007e60:	2301      	movne	r3, #1
 8007e62:	2300      	moveq	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	e03c      	b.n	8007ee2 <HAL_TIM_PWM_Start+0x9e>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d109      	bne.n	8007e82 <HAL_TIM_PWM_Start+0x3e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	bf14      	ite	ne
 8007e7a:	2301      	movne	r3, #1
 8007e7c:	2300      	moveq	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	e02f      	b.n	8007ee2 <HAL_TIM_PWM_Start+0x9e>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d109      	bne.n	8007e9c <HAL_TIM_PWM_Start+0x58>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	bf14      	ite	ne
 8007e94:	2301      	movne	r3, #1
 8007e96:	2300      	moveq	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	e022      	b.n	8007ee2 <HAL_TIM_PWM_Start+0x9e>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b0c      	cmp	r3, #12
 8007ea0:	d109      	bne.n	8007eb6 <HAL_TIM_PWM_Start+0x72>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	bf14      	ite	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	2300      	moveq	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	e015      	b.n	8007ee2 <HAL_TIM_PWM_Start+0x9e>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b10      	cmp	r3, #16
 8007eba:	d109      	bne.n	8007ed0 <HAL_TIM_PWM_Start+0x8c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	bf14      	ite	ne
 8007ec8:	2301      	movne	r3, #1
 8007eca:	2300      	moveq	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	e008      	b.n	8007ee2 <HAL_TIM_PWM_Start+0x9e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	bf14      	ite	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e0a1      	b.n	800802e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_PWM_Start+0xb6>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ef8:	e023      	b.n	8007f42 <HAL_TIM_PWM_Start+0xfe>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d104      	bne.n	8007f0a <HAL_TIM_PWM_Start+0xc6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f08:	e01b      	b.n	8007f42 <HAL_TIM_PWM_Start+0xfe>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d104      	bne.n	8007f1a <HAL_TIM_PWM_Start+0xd6>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f18:	e013      	b.n	8007f42 <HAL_TIM_PWM_Start+0xfe>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b0c      	cmp	r3, #12
 8007f1e:	d104      	bne.n	8007f2a <HAL_TIM_PWM_Start+0xe6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f28:	e00b      	b.n	8007f42 <HAL_TIM_PWM_Start+0xfe>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b10      	cmp	r3, #16
 8007f2e:	d104      	bne.n	8007f3a <HAL_TIM_PWM_Start+0xf6>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f38:	e003      	b.n	8007f42 <HAL_TIM_PWM_Start+0xfe>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2201      	movs	r2, #1
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 ffde 	bl	8008f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a38      	ldr	r2, [pc, #224]	@ (8008038 <HAL_TIM_PWM_Start+0x1f4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <HAL_TIM_PWM_Start+0x13e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a37      	ldr	r2, [pc, #220]	@ (800803c <HAL_TIM_PWM_Start+0x1f8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <HAL_TIM_PWM_Start+0x13e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a35      	ldr	r2, [pc, #212]	@ (8008040 <HAL_TIM_PWM_Start+0x1fc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIM_PWM_Start+0x13e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a34      	ldr	r2, [pc, #208]	@ (8008044 <HAL_TIM_PWM_Start+0x200>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <HAL_TIM_PWM_Start+0x13e>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a32      	ldr	r2, [pc, #200]	@ (8008048 <HAL_TIM_PWM_Start+0x204>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d101      	bne.n	8007f86 <HAL_TIM_PWM_Start+0x142>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <HAL_TIM_PWM_Start+0x144>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d007      	beq.n	8007f9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a25      	ldr	r2, [pc, #148]	@ (8008038 <HAL_TIM_PWM_Start+0x1f4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d022      	beq.n	8007fec <HAL_TIM_PWM_Start+0x1a8>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fae:	d01d      	beq.n	8007fec <HAL_TIM_PWM_Start+0x1a8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a25      	ldr	r2, [pc, #148]	@ (800804c <HAL_TIM_PWM_Start+0x208>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d018      	beq.n	8007fec <HAL_TIM_PWM_Start+0x1a8>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a24      	ldr	r2, [pc, #144]	@ (8008050 <HAL_TIM_PWM_Start+0x20c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d013      	beq.n	8007fec <HAL_TIM_PWM_Start+0x1a8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a22      	ldr	r2, [pc, #136]	@ (8008054 <HAL_TIM_PWM_Start+0x210>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00e      	beq.n	8007fec <HAL_TIM_PWM_Start+0x1a8>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800803c <HAL_TIM_PWM_Start+0x1f8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d009      	beq.n	8007fec <HAL_TIM_PWM_Start+0x1a8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8008058 <HAL_TIM_PWM_Start+0x214>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d004      	beq.n	8007fec <HAL_TIM_PWM_Start+0x1a8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a16      	ldr	r2, [pc, #88]	@ (8008040 <HAL_TIM_PWM_Start+0x1fc>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d115      	bne.n	8008018 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800805c <HAL_TIM_PWM_Start+0x218>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b06      	cmp	r3, #6
 8007ffc:	d015      	beq.n	800802a <HAL_TIM_PWM_Start+0x1e6>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008004:	d011      	beq.n	800802a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0201 	orr.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008016:	e008      	b.n	800802a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	e000      	b.n	800802c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40010000 	.word	0x40010000
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800
 8008054:	40000c00 	.word	0x40000c00
 8008058:	40001800 	.word	0x40001800
 800805c:	00010007 	.word	0x00010007

08008060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d020      	beq.n	80080c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01b      	beq.n	80080c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0202 	mvn.w	r2, #2
 8008094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 faf6 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fae8 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 faf9 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d020      	beq.n	8008110 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01b      	beq.n	8008110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f06f 0204 	mvn.w	r2, #4
 80080e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fad0 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 80080fc:	e005      	b.n	800810a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fac2 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fad3 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0308 	and.w	r3, r3, #8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d020      	beq.n	800815c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01b      	beq.n	800815c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0208 	mvn.w	r2, #8
 800812c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2204      	movs	r2, #4
 8008132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 faaa 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 8008148:	e005      	b.n	8008156 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa9c 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 faad 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 0310 	and.w	r3, r3, #16
 8008162:	2b00      	cmp	r3, #0
 8008164:	d020      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f003 0310 	and.w	r3, r3, #16
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01b      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f06f 0210 	mvn.w	r2, #16
 8008178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2208      	movs	r2, #8
 800817e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	69db      	ldr	r3, [r3, #28]
 8008186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa84 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 8008194:	e005      	b.n	80081a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa76 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fa87 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00c      	beq.n	80081cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f06f 0201 	mvn.w	r2, #1
 80081c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f009 faa6 	bl	8011718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00c      	beq.n	80081fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d007      	beq.n	80081fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f887 	bl	8009308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00c      	beq.n	800821e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800820a:	2b00      	cmp	r3, #0
 800820c:	d007      	beq.n	800821e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 f87f 	bl	800931c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00c      	beq.n	8008242 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800823a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa41 	bl	80086c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00c      	beq.n	8008266 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f06f 0220 	mvn.w	r2, #32
 800825e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 f847 	bl	80092f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008286:	2b01      	cmp	r3, #1
 8008288:	d101      	bne.n	800828e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800828a:	2302      	movs	r3, #2
 800828c:	e0ff      	b.n	800848e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b14      	cmp	r3, #20
 800829a:	f200 80f0 	bhi.w	800847e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800829e:	a201      	add	r2, pc, #4	@ (adr r2, 80082a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	0800847f 	.word	0x0800847f
 80082ac:	0800847f 	.word	0x0800847f
 80082b0:	0800847f 	.word	0x0800847f
 80082b4:	08008339 	.word	0x08008339
 80082b8:	0800847f 	.word	0x0800847f
 80082bc:	0800847f 	.word	0x0800847f
 80082c0:	0800847f 	.word	0x0800847f
 80082c4:	0800837b 	.word	0x0800837b
 80082c8:	0800847f 	.word	0x0800847f
 80082cc:	0800847f 	.word	0x0800847f
 80082d0:	0800847f 	.word	0x0800847f
 80082d4:	080083bb 	.word	0x080083bb
 80082d8:	0800847f 	.word	0x0800847f
 80082dc:	0800847f 	.word	0x0800847f
 80082e0:	0800847f 	.word	0x0800847f
 80082e4:	080083fd 	.word	0x080083fd
 80082e8:	0800847f 	.word	0x0800847f
 80082ec:	0800847f 	.word	0x0800847f
 80082f0:	0800847f 	.word	0x0800847f
 80082f4:	0800843d 	.word	0x0800843d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fa90 	bl	8008824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6999      	ldr	r1, [r3, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	619a      	str	r2, [r3, #24]
      break;
 8008336:	e0a5      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fb00 	bl	8008944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	619a      	str	r2, [r3, #24]
      break;
 8008378:	e084      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fb69 	bl	8008a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0208 	orr.w	r2, r2, #8
 8008394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0204 	bic.w	r2, r2, #4
 80083a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69d9      	ldr	r1, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	61da      	str	r2, [r3, #28]
      break;
 80083b8:	e064      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fbd1 	bl	8008b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	021a      	lsls	r2, r3, #8
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	61da      	str	r2, [r3, #28]
      break;
 80083fa:	e043      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68b9      	ldr	r1, [r7, #8]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fc1a 	bl	8008c3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0208 	orr.w	r2, r2, #8
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0204 	bic.w	r2, r2, #4
 8008426:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800843a:	e023      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fc5e 	bl	8008d04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008456:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008466:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	021a      	lsls	r2, r3, #8
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800847c:	e002      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	75fb      	strb	r3, [r7, #23]
      break;
 8008482:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop

08008498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_TIM_ConfigClockSource+0x1c>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e0dc      	b.n	800866e <HAL_TIM_ConfigClockSource+0x1d6>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008678 <HAL_TIM_ConfigClockSource+0x1e0>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a64      	ldr	r2, [pc, #400]	@ (800867c <HAL_TIM_ConfigClockSource+0x1e4>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	f000 80a9 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 80084f0:	4a62      	ldr	r2, [pc, #392]	@ (800867c <HAL_TIM_ConfigClockSource+0x1e4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f200 80ae 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 80084f8:	4a61      	ldr	r2, [pc, #388]	@ (8008680 <HAL_TIM_ConfigClockSource+0x1e8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f000 80a1 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 8008500:	4a5f      	ldr	r2, [pc, #380]	@ (8008680 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	f200 80a6 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008508:	4a5e      	ldr	r2, [pc, #376]	@ (8008684 <HAL_TIM_ConfigClockSource+0x1ec>)
 800850a:	4293      	cmp	r3, r2
 800850c:	f000 8099 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 8008510:	4a5c      	ldr	r2, [pc, #368]	@ (8008684 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008512:	4293      	cmp	r3, r2
 8008514:	f200 809e 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008518:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800851c:	f000 8091 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 8008520:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008524:	f200 8096 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800852c:	f000 8089 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 8008530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008534:	f200 808e 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853c:	d03e      	beq.n	80085bc <HAL_TIM_ConfigClockSource+0x124>
 800853e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008542:	f200 8087 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854a:	f000 8086 	beq.w	800865a <HAL_TIM_ConfigClockSource+0x1c2>
 800854e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008552:	d87f      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008554:	2b70      	cmp	r3, #112	@ 0x70
 8008556:	d01a      	beq.n	800858e <HAL_TIM_ConfigClockSource+0xf6>
 8008558:	2b70      	cmp	r3, #112	@ 0x70
 800855a:	d87b      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 800855c:	2b60      	cmp	r3, #96	@ 0x60
 800855e:	d050      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0x16a>
 8008560:	2b60      	cmp	r3, #96	@ 0x60
 8008562:	d877      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008564:	2b50      	cmp	r3, #80	@ 0x50
 8008566:	d03c      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0x14a>
 8008568:	2b50      	cmp	r3, #80	@ 0x50
 800856a:	d873      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 800856c:	2b40      	cmp	r3, #64	@ 0x40
 800856e:	d058      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x18a>
 8008570:	2b40      	cmp	r3, #64	@ 0x40
 8008572:	d86f      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008574:	2b30      	cmp	r3, #48	@ 0x30
 8008576:	d064      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 8008578:	2b30      	cmp	r3, #48	@ 0x30
 800857a:	d86b      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 800857c:	2b20      	cmp	r3, #32
 800857e:	d060      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 8008580:	2b20      	cmp	r3, #32
 8008582:	d867      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d05c      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 8008588:	2b10      	cmp	r3, #16
 800858a:	d05a      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x1aa>
 800858c:	e062      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800859e:	f000 fc95 	bl	8008ecc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	609a      	str	r2, [r3, #8]
      break;
 80085ba:	e04f      	b.n	800865c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085cc:	f000 fc7e 	bl	8008ecc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085de:	609a      	str	r2, [r3, #8]
      break;
 80085e0:	e03c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ee:	461a      	mov	r2, r3
 80085f0:	f000 fbee 	bl	8008dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2150      	movs	r1, #80	@ 0x50
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fc48 	bl	8008e90 <TIM_ITRx_SetConfig>
      break;
 8008600:	e02c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800860e:	461a      	mov	r2, r3
 8008610:	f000 fc0d 	bl	8008e2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2160      	movs	r1, #96	@ 0x60
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fc38 	bl	8008e90 <TIM_ITRx_SetConfig>
      break;
 8008620:	e01c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800862e:	461a      	mov	r2, r3
 8008630:	f000 fbce 	bl	8008dd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2140      	movs	r1, #64	@ 0x40
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fc28 	bl	8008e90 <TIM_ITRx_SetConfig>
      break;
 8008640:	e00c      	b.n	800865c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f000 fc1f 	bl	8008e90 <TIM_ITRx_SetConfig>
      break;
 8008652:	e003      	b.n	800865c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
      break;
 8008658:	e000      	b.n	800865c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800865a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	ffceff88 	.word	0xffceff88
 800867c:	00100040 	.word	0x00100040
 8008680:	00100030 	.word	0x00100030
 8008684:	00100020 	.word	0x00100020

08008688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a46      	ldr	r2, [pc, #280]	@ (8008804 <TIM_Base_SetConfig+0x12c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d013      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086f6:	d00f      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a43      	ldr	r2, [pc, #268]	@ (8008808 <TIM_Base_SetConfig+0x130>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00b      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a42      	ldr	r2, [pc, #264]	@ (800880c <TIM_Base_SetConfig+0x134>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d007      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a41      	ldr	r2, [pc, #260]	@ (8008810 <TIM_Base_SetConfig+0x138>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a40      	ldr	r2, [pc, #256]	@ (8008814 <TIM_Base_SetConfig+0x13c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d108      	bne.n	800872a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a35      	ldr	r2, [pc, #212]	@ (8008804 <TIM_Base_SetConfig+0x12c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d01f      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008738:	d01b      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a32      	ldr	r2, [pc, #200]	@ (8008808 <TIM_Base_SetConfig+0x130>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d017      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a31      	ldr	r2, [pc, #196]	@ (800880c <TIM_Base_SetConfig+0x134>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a30      	ldr	r2, [pc, #192]	@ (8008810 <TIM_Base_SetConfig+0x138>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00f      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2f      	ldr	r2, [pc, #188]	@ (8008814 <TIM_Base_SetConfig+0x13c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a2e      	ldr	r2, [pc, #184]	@ (8008818 <TIM_Base_SetConfig+0x140>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d007      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2d      	ldr	r2, [pc, #180]	@ (800881c <TIM_Base_SetConfig+0x144>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_Base_SetConfig+0x9a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2c      	ldr	r2, [pc, #176]	@ (8008820 <TIM_Base_SetConfig+0x148>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d108      	bne.n	8008784 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a16      	ldr	r2, [pc, #88]	@ (8008804 <TIM_Base_SetConfig+0x12c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00f      	beq.n	80087d0 <TIM_Base_SetConfig+0xf8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a18      	ldr	r2, [pc, #96]	@ (8008814 <TIM_Base_SetConfig+0x13c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00b      	beq.n	80087d0 <TIM_Base_SetConfig+0xf8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a17      	ldr	r2, [pc, #92]	@ (8008818 <TIM_Base_SetConfig+0x140>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d007      	beq.n	80087d0 <TIM_Base_SetConfig+0xf8>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a16      	ldr	r2, [pc, #88]	@ (800881c <TIM_Base_SetConfig+0x144>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_Base_SetConfig+0xf8>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a15      	ldr	r2, [pc, #84]	@ (8008820 <TIM_Base_SetConfig+0x148>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d103      	bne.n	80087d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d105      	bne.n	80087f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f023 0201 	bic.w	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	611a      	str	r2, [r3, #16]
  }
}
 80087f6:	bf00      	nop
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	40010000 	.word	0x40010000
 8008808:	40000400 	.word	0x40000400
 800880c:	40000800 	.word	0x40000800
 8008810:	40000c00 	.word	0x40000c00
 8008814:	40010400 	.word	0x40010400
 8008818:	40014000 	.word	0x40014000
 800881c:	40014400 	.word	0x40014400
 8008820:	40014800 	.word	0x40014800

08008824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	f023 0201 	bic.w	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4b37      	ldr	r3, [pc, #220]	@ (800892c <TIM_OC1_SetConfig+0x108>)
 8008850:	4013      	ands	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f023 0302 	bic.w	r3, r3, #2
 800886c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	4313      	orrs	r3, r2
 8008876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a2d      	ldr	r2, [pc, #180]	@ (8008930 <TIM_OC1_SetConfig+0x10c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00f      	beq.n	80088a0 <TIM_OC1_SetConfig+0x7c>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a2c      	ldr	r2, [pc, #176]	@ (8008934 <TIM_OC1_SetConfig+0x110>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00b      	beq.n	80088a0 <TIM_OC1_SetConfig+0x7c>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a2b      	ldr	r2, [pc, #172]	@ (8008938 <TIM_OC1_SetConfig+0x114>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d007      	beq.n	80088a0 <TIM_OC1_SetConfig+0x7c>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a2a      	ldr	r2, [pc, #168]	@ (800893c <TIM_OC1_SetConfig+0x118>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d003      	beq.n	80088a0 <TIM_OC1_SetConfig+0x7c>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a29      	ldr	r2, [pc, #164]	@ (8008940 <TIM_OC1_SetConfig+0x11c>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d10c      	bne.n	80088ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0308 	bic.w	r3, r3, #8
 80088a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f023 0304 	bic.w	r3, r3, #4
 80088b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008930 <TIM_OC1_SetConfig+0x10c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00f      	beq.n	80088e2 <TIM_OC1_SetConfig+0xbe>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008934 <TIM_OC1_SetConfig+0x110>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00b      	beq.n	80088e2 <TIM_OC1_SetConfig+0xbe>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008938 <TIM_OC1_SetConfig+0x114>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d007      	beq.n	80088e2 <TIM_OC1_SetConfig+0xbe>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a19      	ldr	r2, [pc, #100]	@ (800893c <TIM_OC1_SetConfig+0x118>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d003      	beq.n	80088e2 <TIM_OC1_SetConfig+0xbe>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a18      	ldr	r2, [pc, #96]	@ (8008940 <TIM_OC1_SetConfig+0x11c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d111      	bne.n	8008906 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	621a      	str	r2, [r3, #32]
}
 8008920:	bf00      	nop
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	fffeff8f 	.word	0xfffeff8f
 8008930:	40010000 	.word	0x40010000
 8008934:	40010400 	.word	0x40010400
 8008938:	40014000 	.word	0x40014000
 800893c:	40014400 	.word	0x40014400
 8008940:	40014800 	.word	0x40014800

08008944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f023 0210 	bic.w	r2, r3, #16
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4b34      	ldr	r3, [pc, #208]	@ (8008a40 <TIM_OC2_SetConfig+0xfc>)
 8008970:	4013      	ands	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800897a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f023 0320 	bic.w	r3, r3, #32
 800898e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	4313      	orrs	r3, r2
 800899a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a29      	ldr	r2, [pc, #164]	@ (8008a44 <TIM_OC2_SetConfig+0x100>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_OC2_SetConfig+0x68>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a28      	ldr	r2, [pc, #160]	@ (8008a48 <TIM_OC2_SetConfig+0x104>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d10d      	bne.n	80089c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008a44 <TIM_OC2_SetConfig+0x100>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00f      	beq.n	80089f0 <TIM_OC2_SetConfig+0xac>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <TIM_OC2_SetConfig+0x104>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00b      	beq.n	80089f0 <TIM_OC2_SetConfig+0xac>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a1c      	ldr	r2, [pc, #112]	@ (8008a4c <TIM_OC2_SetConfig+0x108>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d007      	beq.n	80089f0 <TIM_OC2_SetConfig+0xac>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a50 <TIM_OC2_SetConfig+0x10c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d003      	beq.n	80089f0 <TIM_OC2_SetConfig+0xac>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008a54 <TIM_OC2_SetConfig+0x110>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d113      	bne.n	8008a18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	feff8fff 	.word	0xfeff8fff
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40010400 	.word	0x40010400
 8008a4c:	40014000 	.word	0x40014000
 8008a50:	40014400 	.word	0x40014400
 8008a54:	40014800 	.word	0x40014800

08008a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4b33      	ldr	r3, [pc, #204]	@ (8008b50 <TIM_OC3_SetConfig+0xf8>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0303 	bic.w	r3, r3, #3
 8008a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a28      	ldr	r2, [pc, #160]	@ (8008b54 <TIM_OC3_SetConfig+0xfc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d003      	beq.n	8008abe <TIM_OC3_SetConfig+0x66>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a27      	ldr	r2, [pc, #156]	@ (8008b58 <TIM_OC3_SetConfig+0x100>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d10d      	bne.n	8008ada <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	021b      	lsls	r3, r3, #8
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b54 <TIM_OC3_SetConfig+0xfc>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00f      	beq.n	8008b02 <TIM_OC3_SetConfig+0xaa>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b58 <TIM_OC3_SetConfig+0x100>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d00b      	beq.n	8008b02 <TIM_OC3_SetConfig+0xaa>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a1b      	ldr	r2, [pc, #108]	@ (8008b5c <TIM_OC3_SetConfig+0x104>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d007      	beq.n	8008b02 <TIM_OC3_SetConfig+0xaa>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a1a      	ldr	r2, [pc, #104]	@ (8008b60 <TIM_OC3_SetConfig+0x108>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d003      	beq.n	8008b02 <TIM_OC3_SetConfig+0xaa>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a19      	ldr	r2, [pc, #100]	@ (8008b64 <TIM_OC3_SetConfig+0x10c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d113      	bne.n	8008b2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	621a      	str	r2, [r3, #32]
}
 8008b44:	bf00      	nop
 8008b46:	371c      	adds	r7, #28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	fffeff8f 	.word	0xfffeff8f
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40010400 	.word	0x40010400
 8008b5c:	40014000 	.word	0x40014000
 8008b60:	40014400 	.word	0x40014400
 8008b64:	40014800 	.word	0x40014800

08008b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4b24      	ldr	r3, [pc, #144]	@ (8008c24 <TIM_OC4_SetConfig+0xbc>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	031b      	lsls	r3, r3, #12
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a19      	ldr	r2, [pc, #100]	@ (8008c28 <TIM_OC4_SetConfig+0xc0>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00f      	beq.n	8008be8 <TIM_OC4_SetConfig+0x80>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a18      	ldr	r2, [pc, #96]	@ (8008c2c <TIM_OC4_SetConfig+0xc4>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00b      	beq.n	8008be8 <TIM_OC4_SetConfig+0x80>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a17      	ldr	r2, [pc, #92]	@ (8008c30 <TIM_OC4_SetConfig+0xc8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d007      	beq.n	8008be8 <TIM_OC4_SetConfig+0x80>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a16      	ldr	r2, [pc, #88]	@ (8008c34 <TIM_OC4_SetConfig+0xcc>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_OC4_SetConfig+0x80>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a15      	ldr	r2, [pc, #84]	@ (8008c38 <TIM_OC4_SetConfig+0xd0>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d109      	bne.n	8008bfc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	019b      	lsls	r3, r3, #6
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	feff8fff 	.word	0xfeff8fff
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40010400 	.word	0x40010400
 8008c30:	40014000 	.word	0x40014000
 8008c34:	40014400 	.word	0x40014400
 8008c38:	40014800 	.word	0x40014800

08008c3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4b21      	ldr	r3, [pc, #132]	@ (8008cec <TIM_OC5_SetConfig+0xb0>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	041b      	lsls	r3, r3, #16
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a18      	ldr	r2, [pc, #96]	@ (8008cf0 <TIM_OC5_SetConfig+0xb4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d00f      	beq.n	8008cb2 <TIM_OC5_SetConfig+0x76>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a17      	ldr	r2, [pc, #92]	@ (8008cf4 <TIM_OC5_SetConfig+0xb8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00b      	beq.n	8008cb2 <TIM_OC5_SetConfig+0x76>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a16      	ldr	r2, [pc, #88]	@ (8008cf8 <TIM_OC5_SetConfig+0xbc>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d007      	beq.n	8008cb2 <TIM_OC5_SetConfig+0x76>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a15      	ldr	r2, [pc, #84]	@ (8008cfc <TIM_OC5_SetConfig+0xc0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d003      	beq.n	8008cb2 <TIM_OC5_SetConfig+0x76>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a14      	ldr	r2, [pc, #80]	@ (8008d00 <TIM_OC5_SetConfig+0xc4>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d109      	bne.n	8008cc6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	621a      	str	r2, [r3, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	fffeff8f 	.word	0xfffeff8f
 8008cf0:	40010000 	.word	0x40010000
 8008cf4:	40010400 	.word	0x40010400
 8008cf8:	40014000 	.word	0x40014000
 8008cfc:	40014400 	.word	0x40014400
 8008d00:	40014800 	.word	0x40014800

08008d04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4b22      	ldr	r3, [pc, #136]	@ (8008db8 <TIM_OC6_SetConfig+0xb4>)
 8008d30:	4013      	ands	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	051b      	lsls	r3, r3, #20
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a19      	ldr	r2, [pc, #100]	@ (8008dbc <TIM_OC6_SetConfig+0xb8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00f      	beq.n	8008d7c <TIM_OC6_SetConfig+0x78>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a18      	ldr	r2, [pc, #96]	@ (8008dc0 <TIM_OC6_SetConfig+0xbc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <TIM_OC6_SetConfig+0x78>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a17      	ldr	r2, [pc, #92]	@ (8008dc4 <TIM_OC6_SetConfig+0xc0>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d007      	beq.n	8008d7c <TIM_OC6_SetConfig+0x78>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a16      	ldr	r2, [pc, #88]	@ (8008dc8 <TIM_OC6_SetConfig+0xc4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d003      	beq.n	8008d7c <TIM_OC6_SetConfig+0x78>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a15      	ldr	r2, [pc, #84]	@ (8008dcc <TIM_OC6_SetConfig+0xc8>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d109      	bne.n	8008d90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	029b      	lsls	r3, r3, #10
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	621a      	str	r2, [r3, #32]
}
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	feff8fff 	.word	0xfeff8fff
 8008dbc:	40010000 	.word	0x40010000
 8008dc0:	40010400 	.word	0x40010400
 8008dc4:	40014000 	.word	0x40014000
 8008dc8:	40014400 	.word	0x40014400
 8008dcc:	40014800 	.word	0x40014800

08008dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f023 0201 	bic.w	r2, r3, #1
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f023 030a 	bic.w	r3, r3, #10
 8008e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b087      	sub	sp, #28
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f023 0210 	bic.w	r2, r3, #16
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	031b      	lsls	r3, r3, #12
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4b09      	ldr	r3, [pc, #36]	@ (8008ec8 <TIM_ITRx_SetConfig+0x38>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f043 0307 	orr.w	r3, r3, #7
 8008eb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	609a      	str	r2, [r3, #8]
}
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	ffcfff8f 	.word	0xffcfff8f

08008ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	021a      	lsls	r2, r3, #8
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	609a      	str	r2, [r3, #8]
}
 8008f00:	bf00      	nop
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	2201      	movs	r2, #1
 8008f20:	fa02 f303 	lsl.w	r3, r2, r3
 8008f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a1a      	ldr	r2, [r3, #32]
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	401a      	ands	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a1a      	ldr	r2, [r3, #32]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 031f 	and.w	r3, r3, #31
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	fa01 f303 	lsl.w	r3, r1, r3
 8008f44:	431a      	orrs	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	621a      	str	r2, [r3, #32]
}
 8008f4a:	bf00      	nop
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
	...

08008f58 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d109      	bne.n	8008f7c <HAL_TIMEx_PWMN_Start+0x24>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	bf14      	ite	ne
 8008f74:	2301      	movne	r3, #1
 8008f76:	2300      	moveq	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	e022      	b.n	8008fc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d109      	bne.n	8008f96 <HAL_TIMEx_PWMN_Start+0x3e>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	bf14      	ite	ne
 8008f8e:	2301      	movne	r3, #1
 8008f90:	2300      	moveq	r3, #0
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	e015      	b.n	8008fc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d109      	bne.n	8008fb0 <HAL_TIMEx_PWMN_Start+0x58>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	bf14      	ite	ne
 8008fa8:	2301      	movne	r3, #1
 8008faa:	2300      	moveq	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	e008      	b.n	8008fc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	bf14      	ite	ne
 8008fbc:	2301      	movne	r3, #1
 8008fbe:	2300      	moveq	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e073      	b.n	80090b2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <HAL_TIMEx_PWMN_Start+0x82>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fd8:	e013      	b.n	8009002 <HAL_TIMEx_PWMN_Start+0xaa>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d104      	bne.n	8008fea <HAL_TIMEx_PWMN_Start+0x92>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fe8:	e00b      	b.n	8009002 <HAL_TIMEx_PWMN_Start+0xaa>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d104      	bne.n	8008ffa <HAL_TIMEx_PWMN_Start+0xa2>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ff8:	e003      	b.n	8009002 <HAL_TIMEx_PWMN_Start+0xaa>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2204      	movs	r2, #4
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f990 	bl	8009330 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800901e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a25      	ldr	r2, [pc, #148]	@ (80090bc <HAL_TIMEx_PWMN_Start+0x164>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d022      	beq.n	8009070 <HAL_TIMEx_PWMN_Start+0x118>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009032:	d01d      	beq.n	8009070 <HAL_TIMEx_PWMN_Start+0x118>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a21      	ldr	r2, [pc, #132]	@ (80090c0 <HAL_TIMEx_PWMN_Start+0x168>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d018      	beq.n	8009070 <HAL_TIMEx_PWMN_Start+0x118>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a20      	ldr	r2, [pc, #128]	@ (80090c4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <HAL_TIMEx_PWMN_Start+0x118>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1e      	ldr	r2, [pc, #120]	@ (80090c8 <HAL_TIMEx_PWMN_Start+0x170>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00e      	beq.n	8009070 <HAL_TIMEx_PWMN_Start+0x118>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1d      	ldr	r2, [pc, #116]	@ (80090cc <HAL_TIMEx_PWMN_Start+0x174>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_TIMEx_PWMN_Start+0x118>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1b      	ldr	r2, [pc, #108]	@ (80090d0 <HAL_TIMEx_PWMN_Start+0x178>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIMEx_PWMN_Start+0x118>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1a      	ldr	r2, [pc, #104]	@ (80090d4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d115      	bne.n	800909c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	4b18      	ldr	r3, [pc, #96]	@ (80090d8 <HAL_TIMEx_PWMN_Start+0x180>)
 8009078:	4013      	ands	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b06      	cmp	r3, #6
 8009080:	d015      	beq.n	80090ae <HAL_TIMEx_PWMN_Start+0x156>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009088:	d011      	beq.n	80090ae <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0201 	orr.w	r2, r2, #1
 8009098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909a:	e008      	b.n	80090ae <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e000      	b.n	80090b0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40010000 	.word	0x40010000
 80090c0:	40000400 	.word	0x40000400
 80090c4:	40000800 	.word	0x40000800
 80090c8:	40000c00 	.word	0x40000c00
 80090cc:	40010400 	.word	0x40010400
 80090d0:	40001800 	.word	0x40001800
 80090d4:	40014000 	.word	0x40014000
 80090d8:	00010007 	.word	0x00010007

080090dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d101      	bne.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090f0:	2302      	movs	r3, #2
 80090f2:	e06d      	b.n	80091d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a30      	ldr	r2, [pc, #192]	@ (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a2f      	ldr	r2, [pc, #188]	@ (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d108      	bne.n	800913a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800912e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009140:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a20      	ldr	r2, [pc, #128]	@ (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d022      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009166:	d01d      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a1d      	ldr	r2, [pc, #116]	@ (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d018      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a1c      	ldr	r2, [pc, #112]	@ (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d013      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a1a      	ldr	r2, [pc, #104]	@ (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d00e      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a15      	ldr	r2, [pc, #84]	@ (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d009      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a16      	ldr	r2, [pc, #88]	@ (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d004      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a15      	ldr	r2, [pc, #84]	@ (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d10c      	bne.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40010000 	.word	0x40010000
 80091e0:	40010400 	.word	0x40010400
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40001800 	.word	0x40001800
 80091f4:	40014000 	.word	0x40014000

080091f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009210:	2302      	movs	r3, #2
 8009212:	e065      	b.n	80092e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	4313      	orrs	r3, r2
 8009228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	4313      	orrs	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4313      	orrs	r3, r2
 8009252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	041b      	lsls	r3, r3, #16
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a16      	ldr	r2, [pc, #88]	@ (80092ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d004      	beq.n	80092a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a14      	ldr	r2, [pc, #80]	@ (80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d115      	bne.n	80092ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ac:	051b      	lsls	r3, r3, #20
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	40010000 	.word	0x40010000
 80092f0:	40010400 	.word	0x40010400

080092f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 030f 	and.w	r3, r3, #15
 8009342:	2204      	movs	r2, #4
 8009344:	fa02 f303 	lsl.w	r3, r2, r3
 8009348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a1a      	ldr	r2, [r3, #32]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	43db      	mvns	r3, r3
 8009352:	401a      	ands	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a1a      	ldr	r2, [r3, #32]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	fa01 f303 	lsl.w	r3, r1, r3
 8009368:	431a      	orrs	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	621a      	str	r2, [r3, #32]
}
 800936e:	bf00      	nop
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800937c:	b084      	sub	sp, #16
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	f107 001c 	add.w	r0, r7, #28
 800938a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800938e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009392:	2b01      	cmp	r3, #1
 8009394:	d121      	bne.n	80093da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800939a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009458 <USB_CoreInit+0xdc>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d105      	bne.n	80093ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 faf6 	bl	800a9c0 <USB_CoreReset>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]
 80093d8:	e01b      	b.n	8009412 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 faea 	bl	800a9c0 <USB_CoreReset>
 80093ec:	4603      	mov	r3, r0
 80093ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d106      	bne.n	8009406 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	639a      	str	r2, [r3, #56]	@ 0x38
 8009404:	e005      	b.n	8009412 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009412:	7fbb      	ldrb	r3, [r7, #30]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d116      	bne.n	8009446 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009426:	4b0d      	ldr	r3, [pc, #52]	@ (800945c <USB_CoreInit+0xe0>)
 8009428:	4313      	orrs	r3, r2
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f043 0206 	orr.w	r2, r3, #6
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f043 0220 	orr.w	r2, r3, #32
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009452:	b004      	add	sp, #16
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	ffbdffbf 	.word	0xffbdffbf
 800945c:	03ee0000 	.word	0x03ee0000

08009460 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	4613      	mov	r3, r2
 800946c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	2b02      	cmp	r3, #2
 8009472:	d165      	bne.n	8009540 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	4a41      	ldr	r2, [pc, #260]	@ (800957c <USB_SetTurnaroundTime+0x11c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d906      	bls.n	800948a <USB_SetTurnaroundTime+0x2a>
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4a40      	ldr	r2, [pc, #256]	@ (8009580 <USB_SetTurnaroundTime+0x120>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d202      	bcs.n	800948a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009484:	230f      	movs	r3, #15
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	e062      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	4a3c      	ldr	r2, [pc, #240]	@ (8009580 <USB_SetTurnaroundTime+0x120>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d306      	bcc.n	80094a0 <USB_SetTurnaroundTime+0x40>
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4a3b      	ldr	r2, [pc, #236]	@ (8009584 <USB_SetTurnaroundTime+0x124>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d202      	bcs.n	80094a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800949a:	230e      	movs	r3, #14
 800949c:	617b      	str	r3, [r7, #20]
 800949e:	e057      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4a38      	ldr	r2, [pc, #224]	@ (8009584 <USB_SetTurnaroundTime+0x124>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d306      	bcc.n	80094b6 <USB_SetTurnaroundTime+0x56>
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	4a37      	ldr	r2, [pc, #220]	@ (8009588 <USB_SetTurnaroundTime+0x128>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d202      	bcs.n	80094b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094b0:	230d      	movs	r3, #13
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	e04c      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4a33      	ldr	r2, [pc, #204]	@ (8009588 <USB_SetTurnaroundTime+0x128>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d306      	bcc.n	80094cc <USB_SetTurnaroundTime+0x6c>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	4a32      	ldr	r2, [pc, #200]	@ (800958c <USB_SetTurnaroundTime+0x12c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d802      	bhi.n	80094cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80094c6:	230c      	movs	r3, #12
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e041      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	4a2f      	ldr	r2, [pc, #188]	@ (800958c <USB_SetTurnaroundTime+0x12c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d906      	bls.n	80094e2 <USB_SetTurnaroundTime+0x82>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009590 <USB_SetTurnaroundTime+0x130>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d802      	bhi.n	80094e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80094dc:	230b      	movs	r3, #11
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	e036      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009590 <USB_SetTurnaroundTime+0x130>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d906      	bls.n	80094f8 <USB_SetTurnaroundTime+0x98>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	4a29      	ldr	r2, [pc, #164]	@ (8009594 <USB_SetTurnaroundTime+0x134>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d802      	bhi.n	80094f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80094f2:	230a      	movs	r3, #10
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	e02b      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	4a26      	ldr	r2, [pc, #152]	@ (8009594 <USB_SetTurnaroundTime+0x134>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d906      	bls.n	800950e <USB_SetTurnaroundTime+0xae>
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4a25      	ldr	r2, [pc, #148]	@ (8009598 <USB_SetTurnaroundTime+0x138>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d202      	bcs.n	800950e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009508:	2309      	movs	r3, #9
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e020      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	4a21      	ldr	r2, [pc, #132]	@ (8009598 <USB_SetTurnaroundTime+0x138>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d306      	bcc.n	8009524 <USB_SetTurnaroundTime+0xc4>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	4a20      	ldr	r2, [pc, #128]	@ (800959c <USB_SetTurnaroundTime+0x13c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d802      	bhi.n	8009524 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800951e:	2308      	movs	r3, #8
 8009520:	617b      	str	r3, [r7, #20]
 8009522:	e015      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4a1d      	ldr	r2, [pc, #116]	@ (800959c <USB_SetTurnaroundTime+0x13c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d906      	bls.n	800953a <USB_SetTurnaroundTime+0xda>
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4a1c      	ldr	r2, [pc, #112]	@ (80095a0 <USB_SetTurnaroundTime+0x140>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d202      	bcs.n	800953a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009534:	2307      	movs	r3, #7
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	e00a      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800953a:	2306      	movs	r3, #6
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	e007      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d102      	bne.n	800954c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009546:	2309      	movs	r3, #9
 8009548:	617b      	str	r3, [r7, #20]
 800954a:	e001      	b.n	8009550 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800954c:	2309      	movs	r3, #9
 800954e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	029b      	lsls	r3, r3, #10
 8009564:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009568:	431a      	orrs	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	00d8acbf 	.word	0x00d8acbf
 8009580:	00e4e1c0 	.word	0x00e4e1c0
 8009584:	00f42400 	.word	0x00f42400
 8009588:	01067380 	.word	0x01067380
 800958c:	011a499f 	.word	0x011a499f
 8009590:	01312cff 	.word	0x01312cff
 8009594:	014ca43f 	.word	0x014ca43f
 8009598:	016e3600 	.word	0x016e3600
 800959c:	01a6ab1f 	.word	0x01a6ab1f
 80095a0:	01e84800 	.word	0x01e84800

080095a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f043 0201 	orr.w	r2, r3, #1
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f023 0201 	bic.w	r2, r3, #1
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d115      	bne.n	8009636 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009616:	200a      	movs	r0, #10
 8009618:	f7f8 fa14 	bl	8001a44 <HAL_Delay>
      ms += 10U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	330a      	adds	r3, #10
 8009620:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 f93b 	bl	800a89e <USB_GetMode>
 8009628:	4603      	mov	r3, r0
 800962a:	2b01      	cmp	r3, #1
 800962c:	d01e      	beq.n	800966c <USB_SetCurrentMode+0x84>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2bc7      	cmp	r3, #199	@ 0xc7
 8009632:	d9f0      	bls.n	8009616 <USB_SetCurrentMode+0x2e>
 8009634:	e01a      	b.n	800966c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d115      	bne.n	8009668 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009648:	200a      	movs	r0, #10
 800964a:	f7f8 f9fb 	bl	8001a44 <HAL_Delay>
      ms += 10U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	330a      	adds	r3, #10
 8009652:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f001 f922 	bl	800a89e <USB_GetMode>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d005      	beq.n	800966c <USB_SetCurrentMode+0x84>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2bc7      	cmp	r3, #199	@ 0xc7
 8009664:	d9f0      	bls.n	8009648 <USB_SetCurrentMode+0x60>
 8009666:	e001      	b.n	800966c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e005      	b.n	8009678 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009670:	d101      	bne.n	8009676 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009680:	b084      	sub	sp, #16
 8009682:	b580      	push	{r7, lr}
 8009684:	b086      	sub	sp, #24
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800968e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800969a:	2300      	movs	r3, #0
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	e009      	b.n	80096b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	3340      	adds	r3, #64	@ 0x40
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	2200      	movs	r2, #0
 80096ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	3301      	adds	r3, #1
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2b0e      	cmp	r3, #14
 80096b8:	d9f2      	bls.n	80096a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d11c      	bne.n	80096fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096d0:	f043 0302 	orr.w	r3, r3, #2
 80096d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	e005      	b.n	8009708 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009700:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800970e:	461a      	mov	r2, r3
 8009710:	2300      	movs	r3, #0
 8009712:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009714:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009718:	2b01      	cmp	r3, #1
 800971a:	d10d      	bne.n	8009738 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800971c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009724:	2100      	movs	r1, #0
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f968 	bl	80099fc <USB_SetDevSpeed>
 800972c:	e008      	b.n	8009740 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800972e:	2101      	movs	r1, #1
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f963 	bl	80099fc <USB_SetDevSpeed>
 8009736:	e003      	b.n	8009740 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009738:	2103      	movs	r1, #3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f95e 	bl	80099fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009740:	2110      	movs	r1, #16
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8fa 	bl	800993c <USB_FlushTxFifo>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f924 	bl	80099a0 <USB_FlushRxFifo>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009768:	461a      	mov	r2, r3
 800976a:	2300      	movs	r3, #0
 800976c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009774:	461a      	mov	r2, r3
 8009776:	2300      	movs	r3, #0
 8009778:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009780:	461a      	mov	r2, r3
 8009782:	2300      	movs	r3, #0
 8009784:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009786:	2300      	movs	r3, #0
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	e043      	b.n	8009814 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800979e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097a2:	d118      	bne.n	80097d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10a      	bne.n	80097c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b6:	461a      	mov	r2, r3
 80097b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	e013      	b.n	80097e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097cc:	461a      	mov	r2, r3
 80097ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	e008      	b.n	80097e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e2:	461a      	mov	r2, r3
 80097e4:	2300      	movs	r3, #0
 80097e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f4:	461a      	mov	r2, r3
 80097f6:	2300      	movs	r3, #0
 80097f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009806:	461a      	mov	r2, r3
 8009808:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800980c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	3301      	adds	r3, #1
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009818:	461a      	mov	r2, r3
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	4293      	cmp	r3, r2
 800981e:	d3b5      	bcc.n	800978c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	e043      	b.n	80098ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009838:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800983c:	d118      	bne.n	8009870 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009850:	461a      	mov	r2, r3
 8009852:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	e013      	b.n	8009882 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009866:	461a      	mov	r2, r3
 8009868:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	e008      	b.n	8009882 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987c:	461a      	mov	r2, r3
 800987e:	2300      	movs	r3, #0
 8009880:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988e:	461a      	mov	r2, r3
 8009890:	2300      	movs	r3, #0
 8009892:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a0:	461a      	mov	r2, r3
 80098a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	3301      	adds	r3, #1
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098b2:	461a      	mov	r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d3b5      	bcc.n	8009826 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80098da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	f043 0210 	orr.w	r2, r3, #16
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009934 <USB_DevInit+0x2b4>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	f043 0208 	orr.w	r2, r3, #8
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009910:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009914:	2b01      	cmp	r3, #1
 8009916:	d105      	bne.n	8009924 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	699a      	ldr	r2, [r3, #24]
 800991c:	4b06      	ldr	r3, [pc, #24]	@ (8009938 <USB_DevInit+0x2b8>)
 800991e:	4313      	orrs	r3, r2
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009930:	b004      	add	sp, #16
 8009932:	4770      	bx	lr
 8009934:	803c3800 	.word	0x803c3800
 8009938:	40000004 	.word	0x40000004

0800993c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	3301      	adds	r3, #1
 800994e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009956:	d901      	bls.n	800995c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e01b      	b.n	8009994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	daf2      	bge.n	800994a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	019b      	lsls	r3, r3, #6
 800996c:	f043 0220 	orr.w	r2, r3, #32
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009980:	d901      	bls.n	8009986 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e006      	b.n	8009994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b20      	cmp	r3, #32
 8009990:	d0f0      	beq.n	8009974 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099b8:	d901      	bls.n	80099be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e018      	b.n	80099f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	daf2      	bge.n	80099ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2210      	movs	r2, #16
 80099ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3301      	adds	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099dc:	d901      	bls.n	80099e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e006      	b.n	80099f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f003 0310 	and.w	r3, r3, #16
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d0f0      	beq.n	80099d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b087      	sub	sp, #28
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 0306 	and.w	r3, r3, #6
 8009a46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	75fb      	strb	r3, [r7, #23]
 8009a52:	e00a      	b.n	8009a6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d002      	beq.n	8009a60 <USB_GetDevSpeed+0x32>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b06      	cmp	r3, #6
 8009a5e:	d102      	bne.n	8009a66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009a60:	2302      	movs	r3, #2
 8009a62:	75fb      	strb	r3, [r7, #23]
 8009a64:	e001      	b.n	8009a6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009a66:	230f      	movs	r3, #15
 8009a68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	785b      	ldrb	r3, [r3, #1]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d139      	bne.n	8009b08 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f003 030f 	and.w	r3, r3, #15
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	68f9      	ldr	r1, [r7, #12]
 8009aae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d153      	bne.n	8009b74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	791b      	ldrb	r3, [r3, #4]
 8009ae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	059b      	lsls	r3, r3, #22
 8009aee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009af0:	431a      	orrs	r2, r3
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	0159      	lsls	r1, r3, #5
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	440b      	add	r3, r1
 8009afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009afe:	4619      	mov	r1, r3
 8009b00:	4b20      	ldr	r3, [pc, #128]	@ (8009b84 <USB_ActivateEndpoint+0x10c>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	600b      	str	r3, [r1, #0]
 8009b06:	e035      	b.n	8009b74 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0e:	69da      	ldr	r2, [r3, #28]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	2101      	movs	r1, #1
 8009b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b1e:	041b      	lsls	r3, r3, #16
 8009b20:	68f9      	ldr	r1, [r7, #12]
 8009b22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b26:	4313      	orrs	r3, r2
 8009b28:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d119      	bne.n	8009b74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	791b      	ldrb	r3, [r3, #4]
 8009b5a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	0159      	lsls	r1, r3, #5
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	440b      	add	r3, r1
 8009b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4b05      	ldr	r3, [pc, #20]	@ (8009b84 <USB_ActivateEndpoint+0x10c>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	10008000 	.word	0x10008000

08009b88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	785b      	ldrb	r3, [r3, #1]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d161      	bne.n	8009c68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bba:	d11f      	bne.n	8009bfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	0151      	lsls	r1, r2, #5
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	440a      	add	r2, r1
 8009bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009bda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	0151      	lsls	r1, r2, #5
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	440a      	add	r2, r1
 8009bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f003 030f 	and.w	r3, r3, #15
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	43db      	mvns	r3, r3
 8009c16:	68f9      	ldr	r1, [r7, #12]
 8009c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c26:	69da      	ldr	r2, [r3, #28]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	f003 030f 	and.w	r3, r3, #15
 8009c30:	2101      	movs	r1, #1
 8009c32:	fa01 f303 	lsl.w	r3, r1, r3
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	43db      	mvns	r3, r3
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c40:	4013      	ands	r3, r2
 8009c42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	0159      	lsls	r1, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	440b      	add	r3, r1
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4b35      	ldr	r3, [pc, #212]	@ (8009d38 <USB_DeactivateEndpoint+0x1b0>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	600b      	str	r3, [r1, #0]
 8009c66:	e060      	b.n	8009d2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c7e:	d11f      	bne.n	8009cc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	0151      	lsls	r1, r2, #5
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 030f 	and.w	r3, r3, #15
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd6:	041b      	lsls	r3, r3, #16
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cea:	69da      	ldr	r2, [r3, #28]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfa:	041b      	lsls	r3, r3, #16
 8009cfc:	43db      	mvns	r3, r3
 8009cfe:	68f9      	ldr	r1, [r7, #12]
 8009d00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d04:	4013      	ands	r3, r2
 8009d06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	0159      	lsls	r1, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	440b      	add	r3, r1
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d22:	4619      	mov	r1, r3
 8009d24:	4b05      	ldr	r3, [pc, #20]	@ (8009d3c <USB_DeactivateEndpoint+0x1b4>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	ec337800 	.word	0xec337800
 8009d3c:	eff37800 	.word	0xeff37800

08009d40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08a      	sub	sp, #40	@ 0x28
 8009d44:	af02      	add	r7, sp, #8
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	785b      	ldrb	r3, [r3, #1]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	f040 8181 	bne.w	800a064 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d132      	bne.n	8009dd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d76:	691a      	ldr	r2, [r3, #16]
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	0159      	lsls	r1, r3, #5
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	440b      	add	r3, r1
 8009d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d84:	4619      	mov	r1, r3
 8009d86:	4ba5      	ldr	r3, [pc, #660]	@ (800a01c <USB_EPStartXfer+0x2dc>)
 8009d88:	4013      	ands	r3, r2
 8009d8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	0151      	lsls	r1, r2, #5
 8009d9e:	69fa      	ldr	r2, [r7, #28]
 8009da0:	440a      	add	r2, r1
 8009da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db8:	691a      	ldr	r2, [r3, #16]
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	0159      	lsls	r1, r3, #5
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	440b      	add	r3, r1
 8009dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4b95      	ldr	r3, [pc, #596]	@ (800a020 <USB_EPStartXfer+0x2e0>)
 8009dca:	4013      	ands	r3, r2
 8009dcc:	610b      	str	r3, [r1, #16]
 8009dce:	e092      	b.n	8009ef6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ddc:	691a      	ldr	r2, [r3, #16]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	0159      	lsls	r1, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	440b      	add	r3, r1
 8009de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dea:	4619      	mov	r1, r3
 8009dec:	4b8c      	ldr	r3, [pc, #560]	@ (800a020 <USB_EPStartXfer+0x2e0>)
 8009dee:	4013      	ands	r3, r2
 8009df0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfe:	691a      	ldr	r2, [r3, #16]
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	0159      	lsls	r1, r3, #5
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	440b      	add	r3, r1
 8009e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4b83      	ldr	r3, [pc, #524]	@ (800a01c <USB_EPStartXfer+0x2dc>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d11a      	bne.n	8009e50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	691a      	ldr	r2, [r3, #16]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d903      	bls.n	8009e2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	0151      	lsls	r1, r2, #5
 8009e40:	69fa      	ldr	r2, [r7, #28]
 8009e42:	440a      	add	r2, r1
 8009e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e4c:	6113      	str	r3, [r2, #16]
 8009e4e:	e01b      	b.n	8009e88 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e5c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	6919      	ldr	r1, [r3, #16]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	440b      	add	r3, r1
 8009e68:	1e59      	subs	r1, r3, #1
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e72:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009e74:	4b6b      	ldr	r3, [pc, #428]	@ (800a024 <USB_EPStartXfer+0x2e4>)
 8009e76:	400b      	ands	r3, r1
 8009e78:	69b9      	ldr	r1, [r7, #24]
 8009e7a:	0148      	lsls	r0, r1, #5
 8009e7c:	69f9      	ldr	r1, [r7, #28]
 8009e7e:	4401      	add	r1, r0
 8009e80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009e84:	4313      	orrs	r3, r2
 8009e86:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e94:	691a      	ldr	r2, [r3, #16]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e9e:	69b9      	ldr	r1, [r7, #24]
 8009ea0:	0148      	lsls	r0, r1, #5
 8009ea2:	69f9      	ldr	r1, [r7, #28]
 8009ea4:	4401      	add	r1, r0
 8009ea6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	791b      	ldrb	r3, [r3, #4]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d11f      	bne.n	8009ef6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	0151      	lsls	r1, r2, #5
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	440a      	add	r2, r1
 8009ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ed0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ed4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	0151      	lsls	r1, r2, #5
 8009ee8:	69fa      	ldr	r2, [r7, #28]
 8009eea:	440a      	add	r2, r1
 8009eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ef4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d14b      	bne.n	8009f94 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d009      	beq.n	8009f18 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f10:	461a      	mov	r2, r3
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	791b      	ldrb	r3, [r3, #4]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d128      	bne.n	8009f72 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d110      	bne.n	8009f52 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	e00f      	b.n	8009f72 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	0151      	lsls	r1, r2, #5
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	440a      	add	r2, r1
 8009f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f8c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009f90:	6013      	str	r3, [r2, #0]
 8009f92:	e16a      	b.n	800a26a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	0151      	lsls	r1, r2, #5
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	440a      	add	r2, r1
 8009faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	791b      	ldrb	r3, [r3, #4]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d015      	beq.n	8009fe8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8152 	beq.w	800a26a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	f003 030f 	and.w	r3, r3, #15
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fdc:	69f9      	ldr	r1, [r7, #28]
 8009fde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	634b      	str	r3, [r1, #52]	@ 0x34
 8009fe6:	e140      	b.n	800a26a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d117      	bne.n	800a028 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	0151      	lsls	r1, r2, #5
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	440a      	add	r2, r1
 800a00e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a012:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	e016      	b.n	800a048 <USB_EPStartXfer+0x308>
 800a01a:	bf00      	nop
 800a01c:	e007ffff 	.word	0xe007ffff
 800a020:	fff80000 	.word	0xfff80000
 800a024:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	0151      	lsls	r1, r2, #5
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	440a      	add	r2, r1
 800a03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a046:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	68d9      	ldr	r1, [r3, #12]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	781a      	ldrb	r2, [r3, #0]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	b298      	uxth	r0, r3
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	4603      	mov	r3, r0
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f9b9 	bl	800a3d4 <USB_WritePacket>
 800a062:	e102      	b.n	800a26a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	0159      	lsls	r1, r3, #5
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	440b      	add	r3, r1
 800a07a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a07e:	4619      	mov	r1, r3
 800a080:	4b7c      	ldr	r3, [pc, #496]	@ (800a274 <USB_EPStartXfer+0x534>)
 800a082:	4013      	ands	r3, r2
 800a084:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a092:	691a      	ldr	r2, [r3, #16]
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	0159      	lsls	r1, r3, #5
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	440b      	add	r3, r1
 800a09c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4b75      	ldr	r3, [pc, #468]	@ (800a278 <USB_EPStartXfer+0x538>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d12f      	bne.n	800a10e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	689a      	ldr	r2, [r3, #8]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d2:	691a      	ldr	r2, [r3, #16]
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0dc:	69b9      	ldr	r1, [r7, #24]
 800a0de:	0148      	lsls	r0, r1, #5
 800a0e0:	69f9      	ldr	r1, [r7, #28]
 800a0e2:	4401      	add	r1, r0
 800a0e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	0151      	lsls	r1, r2, #5
 800a0fe:	69fa      	ldr	r2, [r7, #28]
 800a100:	440a      	add	r2, r1
 800a102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a106:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a10a:	6113      	str	r3, [r2, #16]
 800a10c:	e05f      	b.n	800a1ce <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d123      	bne.n	800a15e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a12c:	69b9      	ldr	r1, [r7, #24]
 800a12e:	0148      	lsls	r0, r1, #5
 800a130:	69f9      	ldr	r1, [r7, #28]
 800a132:	4401      	add	r1, r0
 800a134:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a138:	4313      	orrs	r3, r2
 800a13a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	0151      	lsls	r1, r2, #5
 800a14e:	69fa      	ldr	r2, [r7, #28]
 800a150:	440a      	add	r2, r1
 800a152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a156:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a15a:	6113      	str	r3, [r2, #16]
 800a15c:	e037      	b.n	800a1ce <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	4413      	add	r3, r2
 800a168:	1e5a      	subs	r2, r3, #1
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a172:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	8afa      	ldrh	r2, [r7, #22]
 800a17a:	fb03 f202 	mul.w	r2, r3, r2
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	8afb      	ldrh	r3, [r7, #22]
 800a192:	04d9      	lsls	r1, r3, #19
 800a194:	4b39      	ldr	r3, [pc, #228]	@ (800a27c <USB_EPStartXfer+0x53c>)
 800a196:	400b      	ands	r3, r1
 800a198:	69b9      	ldr	r1, [r7, #24]
 800a19a:	0148      	lsls	r0, r1, #5
 800a19c:	69f9      	ldr	r1, [r7, #28]
 800a19e:	4401      	add	r1, r0
 800a1a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1be:	69b9      	ldr	r1, [r7, #24]
 800a1c0:	0148      	lsls	r0, r1, #5
 800a1c2:	69f9      	ldr	r1, [r7, #28]
 800a1c4:	4401      	add	r1, r0
 800a1c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d10d      	bne.n	800a1f0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	68d9      	ldr	r1, [r3, #12]
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ec:	460a      	mov	r2, r1
 800a1ee:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	791b      	ldrb	r3, [r3, #4]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d128      	bne.n	800a24a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a204:	2b00      	cmp	r3, #0
 800a206:	d110      	bne.n	800a22a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	0151      	lsls	r1, r2, #5
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	440a      	add	r2, r1
 800a21e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a222:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	e00f      	b.n	800a24a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	69ba      	ldr	r2, [r7, #24]
 800a23a:	0151      	lsls	r1, r2, #5
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	440a      	add	r2, r1
 800a240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a248:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	0151      	lsls	r1, r2, #5
 800a25c:	69fa      	ldr	r2, [r7, #28]
 800a25e:	440a      	add	r2, r1
 800a260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a264:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a268:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	fff80000 	.word	0xfff80000
 800a278:	e007ffff 	.word	0xe007ffff
 800a27c:	1ff80000 	.word	0x1ff80000

0800a280 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d14a      	bne.n	800a334 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	015a      	lsls	r2, r3, #5
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2b6:	f040 8086 	bne.w	800a3c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	7812      	ldrb	r2, [r2, #0]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a2dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	7812      	ldrb	r2, [r2, #0]
 800a2f2:	0151      	lsls	r1, r2, #5
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	440a      	add	r2, r1
 800a2f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a300:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3301      	adds	r3, #1
 800a306:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a30e:	4293      	cmp	r3, r2
 800a310:	d902      	bls.n	800a318 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
          break;
 800a316:	e056      	b.n	800a3c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a32c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a330:	d0e7      	beq.n	800a302 <USB_EPStopXfer+0x82>
 800a332:	e048      	b.n	800a3c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a34c:	d13b      	bne.n	800a3c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	7812      	ldrb	r2, [r2, #0]
 800a362:	0151      	lsls	r1, r2, #5
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	440a      	add	r2, r1
 800a368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a36c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a370:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	7812      	ldrb	r2, [r2, #0]
 800a386:	0151      	lsls	r1, r2, #5
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	440a      	add	r2, r1
 800a38c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a394:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3301      	adds	r3, #1
 800a39a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d902      	bls.n	800a3ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a3aa:	e00c      	b.n	800a3c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3c4:	d0e7      	beq.n	800a396 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b089      	sub	sp, #36	@ 0x24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4611      	mov	r1, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	71fb      	strb	r3, [r7, #7]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a3f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d123      	bne.n	800a442 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a3fa:	88bb      	ldrh	r3, [r7, #4]
 800a3fc:	3303      	adds	r3, #3
 800a3fe:	089b      	lsrs	r3, r3, #2
 800a400:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a402:	2300      	movs	r3, #0
 800a404:	61bb      	str	r3, [r7, #24]
 800a406:	e018      	b.n	800a43a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	031a      	lsls	r2, r3, #12
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a414:	461a      	mov	r2, r3
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	3301      	adds	r3, #1
 800a420:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	3301      	adds	r3, #1
 800a426:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	3301      	adds	r3, #1
 800a42c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	3301      	adds	r3, #1
 800a432:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	3301      	adds	r3, #1
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d3e2      	bcc.n	800a408 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3724      	adds	r7, #36	@ 0x24
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a450:	b480      	push	{r7}
 800a452:	b08b      	sub	sp, #44	@ 0x2c
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a466:	88fb      	ldrh	r3, [r7, #6]
 800a468:	089b      	lsrs	r3, r3, #2
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a476:	2300      	movs	r3, #0
 800a478:	623b      	str	r3, [r7, #32]
 800a47a:	e014      	b.n	800a4a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	601a      	str	r2, [r3, #0]
    pDest++;
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	3301      	adds	r3, #1
 800a48c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	3301      	adds	r3, #1
 800a492:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a496:	3301      	adds	r3, #1
 800a498:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49c:	3301      	adds	r3, #1
 800a49e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	623b      	str	r3, [r7, #32]
 800a4a6:	6a3a      	ldr	r2, [r7, #32]
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d3e6      	bcc.n	800a47c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4ae:	8bfb      	ldrh	r3, [r7, #30]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01e      	beq.n	800a4f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f107 0310 	add.w	r3, r7, #16
 800a4c4:	6812      	ldr	r2, [r2, #0]
 800a4c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	00db      	lsls	r3, r3, #3
 800a4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	701a      	strb	r2, [r3, #0]
      i++;
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	623b      	str	r3, [r7, #32]
      pDest++;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a4e6:	8bfb      	ldrh	r3, [r7, #30]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a4ec:	8bfb      	ldrh	r3, [r7, #30]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1ea      	bne.n	800a4c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	372c      	adds	r7, #44	@ 0x2c
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d12c      	bne.n	800a576 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	db12      	blt.n	800a554 <USB_EPSetStall+0x54>
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00f      	beq.n	800a554 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a552:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	0151      	lsls	r1, r2, #5
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	440a      	add	r2, r1
 800a56a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a56e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	e02b      	b.n	800a5ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	db12      	blt.n	800a5ae <USB_EPSetStall+0xae>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00f      	beq.n	800a5ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	0151      	lsls	r1, r2, #5
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	440a      	add	r2, r1
 800a5a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	0151      	lsls	r1, r2, #5
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	440a      	add	r2, r1
 800a5c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d128      	bne.n	800a64a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a612:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	791b      	ldrb	r3, [r3, #4]
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d003      	beq.n	800a628 <USB_EPClearStall+0x4c>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	791b      	ldrb	r3, [r3, #4]
 800a624:	2b02      	cmp	r3, #2
 800a626:	d138      	bne.n	800a69a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	0151      	lsls	r1, r2, #5
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	440a      	add	r2, r1
 800a63e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	e027      	b.n	800a69a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	0151      	lsls	r1, r2, #5
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	440a      	add	r2, r1
 800a660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a664:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a668:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	791b      	ldrb	r3, [r3, #4]
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d003      	beq.n	800a67a <USB_EPClearStall+0x9e>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	791b      	ldrb	r3, [r3, #4]
 800a676:	2b02      	cmp	r3, #2
 800a678:	d10f      	bne.n	800a69a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	0151      	lsls	r1, r2, #5
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	440a      	add	r2, r1
 800a690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a698:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a6ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	011b      	lsls	r3, r3, #4
 800a6d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a6dc:	68f9      	ldr	r1, [r7, #12]
 800a6de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a722:	f023 0302 	bic.w	r3, r3, #2
 800a726:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a736:	b480      	push	{r7}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a750:	f023 0303 	bic.w	r3, r3, #3
 800a754:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a764:	f043 0302 	orr.w	r3, r3, #2
 800a768:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	4013      	ands	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a790:	68fb      	ldr	r3, [r7, #12]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b085      	sub	sp, #20
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	4013      	ands	r3, r2
 800a7c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	0c1b      	lsrs	r3, r3, #16
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b085      	sub	sp, #20
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	b29b      	uxth	r3, r3
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	460b      	mov	r3, r1
 800a810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	4013      	ands	r3, r2
 800a832:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a834:	68bb      	ldr	r3, [r7, #8]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a842:	b480      	push	{r7}
 800a844:	b087      	sub	sp, #28
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a864:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	fa22 f303 	lsr.w	r3, r2, r3
 800a872:	01db      	lsls	r3, r3, #7
 800a874:	b2db      	uxtb	r3, r3
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	4313      	orrs	r3, r2
 800a87a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	4013      	ands	r3, r2
 800a88e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a890:	68bb      	ldr	r3, [r7, #8]
}
 800a892:	4618      	mov	r0, r3
 800a894:	371c      	adds	r7, #28
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	f003 0301 	and.w	r3, r3, #1
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
	...

0800a8bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4b09      	ldr	r3, [pc, #36]	@ (800a900 <USB_ActivateSetup+0x44>)
 800a8da:	4013      	ands	r3, r2
 800a8dc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	fffff800 	.word	0xfffff800

0800a904 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	460b      	mov	r3, r1
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	333c      	adds	r3, #60	@ 0x3c
 800a91a:	3304      	adds	r3, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	4a26      	ldr	r2, [pc, #152]	@ (800a9bc <USB_EP0_OutStart+0xb8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d90a      	bls.n	800a93e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a938:	d101      	bne.n	800a93e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e037      	b.n	800a9ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a944:	461a      	mov	r2, r3
 800a946:	2300      	movs	r3, #0
 800a948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a95c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a96c:	f043 0318 	orr.w	r3, r3, #24
 800a970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a980:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a984:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d10f      	bne.n	800a9ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a9aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	371c      	adds	r7, #28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	4f54300a 	.word	0x4f54300a

0800a9c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a9d8:	d901      	bls.n	800a9de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e01b      	b.n	800aa16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	daf2      	bge.n	800a9cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f043 0201 	orr.w	r2, r3, #1
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa02:	d901      	bls.n	800aa08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e006      	b.n	800aa16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d0f0      	beq.n	800a9f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
	...

0800aa24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa30:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aa34:	f005 faec 	bl	8010010 <USBD_static_malloc>
 800aa38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d109      	bne.n	800aa54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	32b0      	adds	r2, #176	@ 0xb0
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa50:	2302      	movs	r3, #2
 800aa52:	e0d4      	b.n	800abfe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa54:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa58:	2100      	movs	r1, #0
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f007 fd11 	bl	8012482 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	32b0      	adds	r2, #176	@ 0xb0
 800aa6a:	68f9      	ldr	r1, [r7, #12]
 800aa6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	32b0      	adds	r2, #176	@ 0xb0
 800aa7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7c1b      	ldrb	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d138      	bne.n	800aafe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa8c:	4b5e      	ldr	r3, [pc, #376]	@ (800ac08 <USBD_CDC_Init+0x1e4>)
 800aa8e:	7819      	ldrb	r1, [r3, #0]
 800aa90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa94:	2202      	movs	r2, #2
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f005 f997 	bl	800fdca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa9c:	4b5a      	ldr	r3, [pc, #360]	@ (800ac08 <USBD_CDC_Init+0x1e4>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f003 020f 	and.w	r2, r3, #15
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	440b      	add	r3, r1
 800aab0:	3324      	adds	r3, #36	@ 0x24
 800aab2:	2201      	movs	r2, #1
 800aab4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aab6:	4b55      	ldr	r3, [pc, #340]	@ (800ac0c <USBD_CDC_Init+0x1e8>)
 800aab8:	7819      	ldrb	r1, [r3, #0]
 800aaba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aabe:	2202      	movs	r2, #2
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f005 f982 	bl	800fdca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aac6:	4b51      	ldr	r3, [pc, #324]	@ (800ac0c <USBD_CDC_Init+0x1e8>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 020f 	and.w	r2, r3, #15
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	440b      	add	r3, r1
 800aada:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aade:	2201      	movs	r2, #1
 800aae0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aae2:	4b4b      	ldr	r3, [pc, #300]	@ (800ac10 <USBD_CDC_Init+0x1ec>)
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	f003 020f 	and.w	r2, r3, #15
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	440b      	add	r3, r1
 800aaf6:	3326      	adds	r3, #38	@ 0x26
 800aaf8:	2210      	movs	r2, #16
 800aafa:	801a      	strh	r2, [r3, #0]
 800aafc:	e035      	b.n	800ab6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aafe:	4b42      	ldr	r3, [pc, #264]	@ (800ac08 <USBD_CDC_Init+0x1e4>)
 800ab00:	7819      	ldrb	r1, [r3, #0]
 800ab02:	2340      	movs	r3, #64	@ 0x40
 800ab04:	2202      	movs	r2, #2
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f005 f95f 	bl	800fdca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab0c:	4b3e      	ldr	r3, [pc, #248]	@ (800ac08 <USBD_CDC_Init+0x1e4>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f003 020f 	and.w	r2, r3, #15
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	4613      	mov	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	440b      	add	r3, r1
 800ab20:	3324      	adds	r3, #36	@ 0x24
 800ab22:	2201      	movs	r2, #1
 800ab24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab26:	4b39      	ldr	r3, [pc, #228]	@ (800ac0c <USBD_CDC_Init+0x1e8>)
 800ab28:	7819      	ldrb	r1, [r3, #0]
 800ab2a:	2340      	movs	r3, #64	@ 0x40
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f005 f94b 	bl	800fdca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab34:	4b35      	ldr	r3, [pc, #212]	@ (800ac0c <USBD_CDC_Init+0x1e8>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 020f 	and.w	r2, r3, #15
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab50:	4b2f      	ldr	r3, [pc, #188]	@ (800ac10 <USBD_CDC_Init+0x1ec>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	f003 020f 	and.w	r2, r3, #15
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3326      	adds	r3, #38	@ 0x26
 800ab66:	2210      	movs	r2, #16
 800ab68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab6a:	4b29      	ldr	r3, [pc, #164]	@ (800ac10 <USBD_CDC_Init+0x1ec>)
 800ab6c:	7819      	ldrb	r1, [r3, #0]
 800ab6e:	2308      	movs	r3, #8
 800ab70:	2203      	movs	r2, #3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f005 f929 	bl	800fdca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab78:	4b25      	ldr	r3, [pc, #148]	@ (800ac10 <USBD_CDC_Init+0x1ec>)
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	f003 020f 	and.w	r2, r3, #15
 800ab80:	6879      	ldr	r1, [r7, #4]
 800ab82:	4613      	mov	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	440b      	add	r3, r1
 800ab8c:	3324      	adds	r3, #36	@ 0x24
 800ab8e:	2201      	movs	r2, #1
 800ab90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	33b0      	adds	r3, #176	@ 0xb0
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800abc8:	2302      	movs	r3, #2
 800abca:	e018      	b.n	800abfe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	7c1b      	ldrb	r3, [r3, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abd4:	4b0d      	ldr	r3, [pc, #52]	@ (800ac0c <USBD_CDC_Init+0x1e8>)
 800abd6:	7819      	ldrb	r1, [r3, #0]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f005 f9e0 	bl	800ffa8 <USBD_LL_PrepareReceive>
 800abe8:	e008      	b.n	800abfc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abea:	4b08      	ldr	r3, [pc, #32]	@ (800ac0c <USBD_CDC_Init+0x1e8>)
 800abec:	7819      	ldrb	r1, [r3, #0]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abf4:	2340      	movs	r3, #64	@ 0x40
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f005 f9d6 	bl	800ffa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	24000097 	.word	0x24000097
 800ac0c:	24000098 	.word	0x24000098
 800ac10:	24000099 	.word	0x24000099

0800ac14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac20:	4b3a      	ldr	r3, [pc, #232]	@ (800ad0c <USBD_CDC_DeInit+0xf8>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f005 f8f5 	bl	800fe16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac2c:	4b37      	ldr	r3, [pc, #220]	@ (800ad0c <USBD_CDC_DeInit+0xf8>)
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	f003 020f 	and.w	r2, r3, #15
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	440b      	add	r3, r1
 800ac40:	3324      	adds	r3, #36	@ 0x24
 800ac42:	2200      	movs	r2, #0
 800ac44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac46:	4b32      	ldr	r3, [pc, #200]	@ (800ad10 <USBD_CDC_DeInit+0xfc>)
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f005 f8e2 	bl	800fe16 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac52:	4b2f      	ldr	r3, [pc, #188]	@ (800ad10 <USBD_CDC_DeInit+0xfc>)
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	f003 020f 	and.w	r2, r3, #15
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	440b      	add	r3, r1
 800ac66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac6e:	4b29      	ldr	r3, [pc, #164]	@ (800ad14 <USBD_CDC_DeInit+0x100>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f005 f8ce 	bl	800fe16 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac7a:	4b26      	ldr	r3, [pc, #152]	@ (800ad14 <USBD_CDC_DeInit+0x100>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	f003 020f 	and.w	r2, r3, #15
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	3324      	adds	r3, #36	@ 0x24
 800ac90:	2200      	movs	r2, #0
 800ac92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac94:	4b1f      	ldr	r3, [pc, #124]	@ (800ad14 <USBD_CDC_DeInit+0x100>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	f003 020f 	and.w	r2, r3, #15
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	440b      	add	r3, r1
 800aca8:	3326      	adds	r3, #38	@ 0x26
 800acaa:	2200      	movs	r2, #0
 800acac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	32b0      	adds	r2, #176	@ 0xb0
 800acb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d01f      	beq.n	800ad00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	33b0      	adds	r3, #176	@ 0xb0
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	32b0      	adds	r2, #176	@ 0xb0
 800acde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f005 f9a2 	bl	801002c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	32b0      	adds	r2, #176	@ 0xb0
 800acf2:	2100      	movs	r1, #0
 800acf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	24000097 	.word	0x24000097
 800ad10:	24000098 	.word	0x24000098
 800ad14:	24000099 	.word	0x24000099

0800ad18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	32b0      	adds	r2, #176	@ 0xb0
 800ad2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e0bf      	b.n	800aec8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d050      	beq.n	800adf6 <USBD_CDC_Setup+0xde>
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	f040 80af 	bne.w	800aeb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	88db      	ldrh	r3, [r3, #6]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d03a      	beq.n	800add8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	b25b      	sxtb	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da1b      	bge.n	800ada4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	33b0      	adds	r3, #176	@ 0xb0
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	88d2      	ldrh	r2, [r2, #6]
 800ad88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	88db      	ldrh	r3, [r3, #6]
 800ad8e:	2b07      	cmp	r3, #7
 800ad90:	bf28      	it	cs
 800ad92:	2307      	movcs	r3, #7
 800ad94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	89fa      	ldrh	r2, [r7, #14]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f001 fdbd 	bl	800c91c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ada2:	e090      	b.n	800aec6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	785a      	ldrb	r2, [r3, #1]
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	88db      	ldrh	r3, [r3, #6]
 800adb2:	2b3f      	cmp	r3, #63	@ 0x3f
 800adb4:	d803      	bhi.n	800adbe <USBD_CDC_Setup+0xa6>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	88db      	ldrh	r3, [r3, #6]
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	e000      	b.n	800adc0 <USBD_CDC_Setup+0xa8>
 800adbe:	2240      	movs	r2, #64	@ 0x40
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800adc6:	6939      	ldr	r1, [r7, #16]
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800adce:	461a      	mov	r2, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f001 fdcf 	bl	800c974 <USBD_CtlPrepareRx>
      break;
 800add6:	e076      	b.n	800aec6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	33b0      	adds	r3, #176	@ 0xb0
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	7850      	ldrb	r0, [r2, #1]
 800adee:	2200      	movs	r2, #0
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	4798      	blx	r3
      break;
 800adf4:	e067      	b.n	800aec6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	785b      	ldrb	r3, [r3, #1]
 800adfa:	2b0b      	cmp	r3, #11
 800adfc:	d851      	bhi.n	800aea2 <USBD_CDC_Setup+0x18a>
 800adfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ae04 <USBD_CDC_Setup+0xec>)
 800ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae04:	0800ae35 	.word	0x0800ae35
 800ae08:	0800aeb1 	.word	0x0800aeb1
 800ae0c:	0800aea3 	.word	0x0800aea3
 800ae10:	0800aea3 	.word	0x0800aea3
 800ae14:	0800aea3 	.word	0x0800aea3
 800ae18:	0800aea3 	.word	0x0800aea3
 800ae1c:	0800aea3 	.word	0x0800aea3
 800ae20:	0800aea3 	.word	0x0800aea3
 800ae24:	0800aea3 	.word	0x0800aea3
 800ae28:	0800aea3 	.word	0x0800aea3
 800ae2c:	0800ae5f 	.word	0x0800ae5f
 800ae30:	0800ae89 	.word	0x0800ae89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d107      	bne.n	800ae50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae40:	f107 030a 	add.w	r3, r7, #10
 800ae44:	2202      	movs	r2, #2
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f001 fd67 	bl	800c91c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae4e:	e032      	b.n	800aeb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f001 fce5 	bl	800c822 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	75fb      	strb	r3, [r7, #23]
          break;
 800ae5c:	e02b      	b.n	800aeb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d107      	bne.n	800ae7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae6a:	f107 030d 	add.w	r3, r7, #13
 800ae6e:	2201      	movs	r2, #1
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 fd52 	bl	800c91c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae78:	e01d      	b.n	800aeb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 fcd0 	bl	800c822 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae82:	2303      	movs	r3, #3
 800ae84:	75fb      	strb	r3, [r7, #23]
          break;
 800ae86:	e016      	b.n	800aeb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d00f      	beq.n	800aeb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 fcc3 	bl	800c822 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aea0:	e008      	b.n	800aeb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 fcbc 	bl	800c822 <USBD_CtlError>
          ret = USBD_FAIL;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	75fb      	strb	r3, [r7, #23]
          break;
 800aeae:	e002      	b.n	800aeb6 <USBD_CDC_Setup+0x19e>
          break;
 800aeb0:	bf00      	nop
 800aeb2:	e008      	b.n	800aec6 <USBD_CDC_Setup+0x1ae>
          break;
 800aeb4:	bf00      	nop
      }
      break;
 800aeb6:	e006      	b.n	800aec6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 fcb1 	bl	800c822 <USBD_CtlError>
      ret = USBD_FAIL;
 800aec0:	2303      	movs	r3, #3
 800aec2:	75fb      	strb	r3, [r7, #23]
      break;
 800aec4:	bf00      	nop
  }

  return (uint8_t)ret;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	32b0      	adds	r2, #176	@ 0xb0
 800aeee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e065      	b.n	800afc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	32b0      	adds	r2, #176	@ 0xb0
 800af04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af0a:	78fb      	ldrb	r3, [r7, #3]
 800af0c:	f003 020f 	and.w	r2, r3, #15
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4613      	mov	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	440b      	add	r3, r1
 800af1c:	3318      	adds	r3, #24
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d02f      	beq.n	800af84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	f003 020f 	and.w	r2, r3, #15
 800af2a:	6879      	ldr	r1, [r7, #4]
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	440b      	add	r3, r1
 800af36:	3318      	adds	r3, #24
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	f003 010f 	and.w	r1, r3, #15
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	460b      	mov	r3, r1
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	440b      	add	r3, r1
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4403      	add	r3, r0
 800af4c:	331c      	adds	r3, #28
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	fbb2 f1f3 	udiv	r1, r2, r3
 800af54:	fb01 f303 	mul.w	r3, r1, r3
 800af58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d112      	bne.n	800af84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af5e:	78fb      	ldrb	r3, [r7, #3]
 800af60:	f003 020f 	and.w	r2, r3, #15
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	3318      	adds	r3, #24
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af76:	78f9      	ldrb	r1, [r7, #3]
 800af78:	2300      	movs	r3, #0
 800af7a:	2200      	movs	r2, #0
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f004 fff2 	bl	800ff66 <USBD_LL_Transmit>
 800af82:	e01f      	b.n	800afc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	33b0      	adds	r3, #176	@ 0xb0
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d010      	beq.n	800afc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	33b0      	adds	r3, #176	@ 0xb0
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800afc0:	78fa      	ldrb	r2, [r7, #3]
 800afc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	460b      	mov	r3, r1
 800afd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	32b0      	adds	r2, #176	@ 0xb0
 800afe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	32b0      	adds	r2, #176	@ 0xb0
 800aff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800affc:	2303      	movs	r3, #3
 800affe:	e01a      	b.n	800b036 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f004 fff0 	bl	800ffea <USBD_LL_GetRxDataSize>
 800b00a:	4602      	mov	r2, r0
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	33b0      	adds	r3, #176	@ 0xb0
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b030:	4611      	mov	r1, r2
 800b032:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	32b0      	adds	r2, #176	@ 0xb0
 800b050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b054:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e024      	b.n	800b0aa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	33b0      	adds	r3, #176	@ 0xb0
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d019      	beq.n	800b0a8 <USBD_CDC_EP0_RxReady+0x6a>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b07a:	2bff      	cmp	r3, #255	@ 0xff
 800b07c:	d014      	beq.n	800b0a8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	33b0      	adds	r3, #176	@ 0xb0
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b096:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b09e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	22ff      	movs	r2, #255	@ 0xff
 800b0a4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0bc:	2182      	movs	r1, #130	@ 0x82
 800b0be:	4818      	ldr	r0, [pc, #96]	@ (800b120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0c0:	f000 fd4f 	bl	800bb62 <USBD_GetEpDesc>
 800b0c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	4815      	ldr	r0, [pc, #84]	@ (800b120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0ca:	f000 fd4a 	bl	800bb62 <USBD_GetEpDesc>
 800b0ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0d0:	2181      	movs	r1, #129	@ 0x81
 800b0d2:	4813      	ldr	r0, [pc, #76]	@ (800b120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0d4:	f000 fd45 	bl	800bb62 <USBD_GetEpDesc>
 800b0d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	2210      	movs	r2, #16
 800b0e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0f4:	711a      	strb	r2, [r3, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d006      	beq.n	800b10e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b108:	711a      	strb	r2, [r3, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2243      	movs	r2, #67	@ 0x43
 800b112:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b114:	4b02      	ldr	r3, [pc, #8]	@ (800b120 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	24000054 	.word	0x24000054

0800b124 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b12c:	2182      	movs	r1, #130	@ 0x82
 800b12e:	4818      	ldr	r0, [pc, #96]	@ (800b190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b130:	f000 fd17 	bl	800bb62 <USBD_GetEpDesc>
 800b134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b136:	2101      	movs	r1, #1
 800b138:	4815      	ldr	r0, [pc, #84]	@ (800b190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b13a:	f000 fd12 	bl	800bb62 <USBD_GetEpDesc>
 800b13e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b140:	2181      	movs	r1, #129	@ 0x81
 800b142:	4813      	ldr	r0, [pc, #76]	@ (800b190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b144:	f000 fd0d 	bl	800bb62 <USBD_GetEpDesc>
 800b148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2210      	movs	r2, #16
 800b154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d006      	beq.n	800b16a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	2200      	movs	r2, #0
 800b160:	711a      	strb	r2, [r3, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f042 0202 	orr.w	r2, r2, #2
 800b168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	711a      	strb	r2, [r3, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	f042 0202 	orr.w	r2, r2, #2
 800b17c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2243      	movs	r2, #67	@ 0x43
 800b182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b184:	4b02      	ldr	r3, [pc, #8]	@ (800b190 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	24000054 	.word	0x24000054

0800b194 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b19c:	2182      	movs	r1, #130	@ 0x82
 800b19e:	4818      	ldr	r0, [pc, #96]	@ (800b200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1a0:	f000 fcdf 	bl	800bb62 <USBD_GetEpDesc>
 800b1a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	4815      	ldr	r0, [pc, #84]	@ (800b200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1aa:	f000 fcda 	bl	800bb62 <USBD_GetEpDesc>
 800b1ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1b0:	2181      	movs	r1, #129	@ 0x81
 800b1b2:	4813      	ldr	r0, [pc, #76]	@ (800b200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1b4:	f000 fcd5 	bl	800bb62 <USBD_GetEpDesc>
 800b1b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2210      	movs	r2, #16
 800b1c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d006      	beq.n	800b1da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1d4:	711a      	strb	r2, [r3, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d006      	beq.n	800b1ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1e8:	711a      	strb	r2, [r3, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2243      	movs	r2, #67	@ 0x43
 800b1f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1f4:	4b02      	ldr	r3, [pc, #8]	@ (800b200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	24000054 	.word	0x24000054

0800b204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	220a      	movs	r2, #10
 800b210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b212:	4b03      	ldr	r3, [pc, #12]	@ (800b220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	24000010 	.word	0x24000010

0800b224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b234:	2303      	movs	r3, #3
 800b236:	e009      	b.n	800b24c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	33b0      	adds	r3, #176	@ 0xb0
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b258:	b480      	push	{r7}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	32b0      	adds	r2, #176	@ 0xb0
 800b26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b272:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b27a:	2303      	movs	r3, #3
 800b27c:	e008      	b.n	800b290 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	371c      	adds	r7, #28
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	32b0      	adds	r2, #176	@ 0xb0
 800b2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e004      	b.n	800b2ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d101      	bne.n	800b2fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e025      	b.n	800b34a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b304:	2b00      	cmp	r3, #0
 800b306:	d11f      	bne.n	800b348 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b310:	4b10      	ldr	r3, [pc, #64]	@ (800b354 <USBD_CDC_TransmitPacket+0x7c>)
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	f003 020f 	and.w	r2, r3, #15
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4403      	add	r3, r0
 800b32a:	3318      	adds	r3, #24
 800b32c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b32e:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <USBD_CDC_TransmitPacket+0x7c>)
 800b330:	7819      	ldrb	r1, [r3, #0]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f004 fe11 	bl	800ff66 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b348:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	24000097 	.word	0x24000097

0800b358 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	32b0      	adds	r2, #176	@ 0xb0
 800b36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	32b0      	adds	r2, #176	@ 0xb0
 800b37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b382:	2303      	movs	r3, #3
 800b384:	e018      	b.n	800b3b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	7c1b      	ldrb	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b38e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c0 <USBD_CDC_ReceivePacket+0x68>)
 800b390:	7819      	ldrb	r1, [r3, #0]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f004 fe03 	bl	800ffa8 <USBD_LL_PrepareReceive>
 800b3a2:	e008      	b.n	800b3b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3a4:	4b06      	ldr	r3, [pc, #24]	@ (800b3c0 <USBD_CDC_ReceivePacket+0x68>)
 800b3a6:	7819      	ldrb	r1, [r3, #0]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3ae:	2340      	movs	r3, #64	@ 0x40
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f004 fdf9 	bl	800ffa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	24000098 	.word	0x24000098

0800b3c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e01f      	b.n	800b41c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	79fa      	ldrb	r2, [r7, #7]
 800b40e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f004 fc6f 	bl	800fcf4 <USBD_LL_Init>
 800b416:	4603      	mov	r3, r0
 800b418:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b42e:	2300      	movs	r3, #0
 800b430:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e025      	b.n	800b488 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	32ae      	adds	r2, #174	@ 0xae
 800b44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00f      	beq.n	800b478 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	32ae      	adds	r2, #174	@ 0xae
 800b462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b468:	f107 020e 	add.w	r2, r7, #14
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
 800b470:	4602      	mov	r2, r0
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f004 fc7b 	bl	800fd94 <USBD_LL_Start>
 800b49e:	4603      	mov	r3, r0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b084      	sub	sp, #16
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d009      	beq.n	800b4ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	4798      	blx	r3
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	78fa      	ldrb	r2, [r7, #3]
 800b510:	4611      	mov	r1, r2
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	4798      	blx	r3
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b51c:	2303      	movs	r3, #3
 800b51e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b53a:	6839      	ldr	r1, [r7, #0]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f001 f936 	bl	800c7ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2201      	movs	r2, #1
 800b546:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b550:	461a      	mov	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b55e:	f003 031f 	and.w	r3, r3, #31
 800b562:	2b02      	cmp	r3, #2
 800b564:	d01a      	beq.n	800b59c <USBD_LL_SetupStage+0x72>
 800b566:	2b02      	cmp	r3, #2
 800b568:	d822      	bhi.n	800b5b0 <USBD_LL_SetupStage+0x86>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <USBD_LL_SetupStage+0x4a>
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d00a      	beq.n	800b588 <USBD_LL_SetupStage+0x5e>
 800b572:	e01d      	b.n	800b5b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fb63 	bl	800bc48 <USBD_StdDevReq>
 800b582:	4603      	mov	r3, r0
 800b584:	73fb      	strb	r3, [r7, #15]
      break;
 800b586:	e020      	b.n	800b5ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fbcb 	bl	800bd2c <USBD_StdItfReq>
 800b596:	4603      	mov	r3, r0
 800b598:	73fb      	strb	r3, [r7, #15]
      break;
 800b59a:	e016      	b.n	800b5ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fc2d 	bl	800be04 <USBD_StdEPReq>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ae:	e00c      	b.n	800b5ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f004 fc48 	bl	800fe54 <USBD_LL_StallEP>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b5c8:	bf00      	nop
  }

  return ret;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	607a      	str	r2, [r7, #4]
 800b5e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b5e6:	7afb      	ldrb	r3, [r7, #11]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d16e      	bne.n	800b6ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b5f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	f040 8098 	bne.w	800b730 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	689a      	ldr	r2, [r3, #8]
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d913      	bls.n	800b634 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	1ad2      	subs	r2, r2, r3
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	4293      	cmp	r3, r2
 800b624:	bf28      	it	cs
 800b626:	4613      	movcs	r3, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f001 f9be 	bl	800c9ae <USBD_CtlContinueRx>
 800b632:	e07d      	b.n	800b730 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b63a:	f003 031f 	and.w	r3, r3, #31
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d014      	beq.n	800b66c <USBD_LL_DataOutStage+0x98>
 800b642:	2b02      	cmp	r3, #2
 800b644:	d81d      	bhi.n	800b682 <USBD_LL_DataOutStage+0xae>
 800b646:	2b00      	cmp	r3, #0
 800b648:	d002      	beq.n	800b650 <USBD_LL_DataOutStage+0x7c>
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d003      	beq.n	800b656 <USBD_LL_DataOutStage+0x82>
 800b64e:	e018      	b.n	800b682 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b650:	2300      	movs	r3, #0
 800b652:	75bb      	strb	r3, [r7, #22]
            break;
 800b654:	e018      	b.n	800b688 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	4619      	mov	r1, r3
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 fa64 	bl	800bb2e <USBD_CoreFindIF>
 800b666:	4603      	mov	r3, r0
 800b668:	75bb      	strb	r3, [r7, #22]
            break;
 800b66a:	e00d      	b.n	800b688 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b672:	b2db      	uxtb	r3, r3
 800b674:	4619      	mov	r1, r3
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f000 fa66 	bl	800bb48 <USBD_CoreFindEP>
 800b67c:	4603      	mov	r3, r0
 800b67e:	75bb      	strb	r3, [r7, #22]
            break;
 800b680:	e002      	b.n	800b688 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	75bb      	strb	r3, [r7, #22]
            break;
 800b686:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b688:	7dbb      	ldrb	r3, [r7, #22]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d119      	bne.n	800b6c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b03      	cmp	r3, #3
 800b698:	d113      	bne.n	800b6c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b69a:	7dba      	ldrb	r2, [r7, #22]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	32ae      	adds	r2, #174	@ 0xae
 800b6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00b      	beq.n	800b6c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b6aa:	7dba      	ldrb	r2, [r7, #22]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b6b2:	7dba      	ldrb	r2, [r7, #22]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	32ae      	adds	r2, #174	@ 0xae
 800b6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f001 f984 	bl	800c9d0 <USBD_CtlSendStatus>
 800b6c8:	e032      	b.n	800b730 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 fa37 	bl	800bb48 <USBD_CoreFindEP>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6de:	7dbb      	ldrb	r3, [r7, #22]
 800b6e0:	2bff      	cmp	r3, #255	@ 0xff
 800b6e2:	d025      	beq.n	800b730 <USBD_LL_DataOutStage+0x15c>
 800b6e4:	7dbb      	ldrb	r3, [r7, #22]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d122      	bne.n	800b730 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d117      	bne.n	800b726 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b6f6:	7dba      	ldrb	r2, [r7, #22]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	32ae      	adds	r2, #174	@ 0xae
 800b6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00f      	beq.n	800b726 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b706:	7dba      	ldrb	r2, [r7, #22]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b70e:	7dba      	ldrb	r2, [r7, #22]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	32ae      	adds	r2, #174	@ 0xae
 800b714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	7afa      	ldrb	r2, [r7, #11]
 800b71c:	4611      	mov	r1, r2
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	4798      	blx	r3
 800b722:	4603      	mov	r3, r0
 800b724:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	e000      	b.n	800b732 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b086      	sub	sp, #24
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	460b      	mov	r3, r1
 800b744:	607a      	str	r2, [r7, #4]
 800b746:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b748:	7afb      	ldrb	r3, [r7, #11]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d16f      	bne.n	800b82e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3314      	adds	r3, #20
 800b752:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d15a      	bne.n	800b814 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	429a      	cmp	r2, r3
 800b768:	d914      	bls.n	800b794 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	689a      	ldr	r2, [r3, #8]
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	1ad2      	subs	r2, r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	461a      	mov	r2, r3
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f001 f8e6 	bl	800c952 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b786:	2300      	movs	r3, #0
 800b788:	2200      	movs	r2, #0
 800b78a:	2100      	movs	r1, #0
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f004 fc0b 	bl	800ffa8 <USBD_LL_PrepareReceive>
 800b792:	e03f      	b.n	800b814 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	68da      	ldr	r2, [r3, #12]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d11c      	bne.n	800b7da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d316      	bcc.n	800b7da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d20f      	bcs.n	800b7da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	2100      	movs	r1, #0
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f001 f8c7 	bl	800c952 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f004 fbe8 	bl	800ffa8 <USBD_LL_PrepareReceive>
 800b7d8:	e01c      	b.n	800b814 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d10f      	bne.n	800b806 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d009      	beq.n	800b806 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b806:	2180      	movs	r1, #128	@ 0x80
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f004 fb23 	bl	800fe54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f001 f8f1 	bl	800c9f6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d03a      	beq.n	800b894 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f7ff fe42 	bl	800b4a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b82c:	e032      	b.n	800b894 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b82e:	7afb      	ldrb	r3, [r7, #11]
 800b830:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b834:	b2db      	uxtb	r3, r3
 800b836:	4619      	mov	r1, r3
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 f985 	bl	800bb48 <USBD_CoreFindEP>
 800b83e:	4603      	mov	r3, r0
 800b840:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b842:	7dfb      	ldrb	r3, [r7, #23]
 800b844:	2bff      	cmp	r3, #255	@ 0xff
 800b846:	d025      	beq.n	800b894 <USBD_LL_DataInStage+0x15a>
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d122      	bne.n	800b894 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b03      	cmp	r3, #3
 800b858:	d11c      	bne.n	800b894 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b85a:	7dfa      	ldrb	r2, [r7, #23]
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	32ae      	adds	r2, #174	@ 0xae
 800b860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d014      	beq.n	800b894 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b86a:	7dfa      	ldrb	r2, [r7, #23]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b872:	7dfa      	ldrb	r2, [r7, #23]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	32ae      	adds	r2, #174	@ 0xae
 800b878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	7afa      	ldrb	r2, [r7, #11]
 800b880:	4611      	mov	r1, r2
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	4798      	blx	r3
 800b886:	4603      	mov	r3, r0
 800b888:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b88a:	7dbb      	ldrb	r3, [r7, #22]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b890:	7dbb      	ldrb	r3, [r7, #22]
 800b892:	e000      	b.n	800b896 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d014      	beq.n	800b904 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00e      	beq.n	800b904 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	6852      	ldr	r2, [r2, #4]
 800b8f2:	b2d2      	uxtb	r2, r2
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b900:	2303      	movs	r3, #3
 800b902:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b904:	2340      	movs	r3, #64	@ 0x40
 800b906:	2200      	movs	r2, #0
 800b908:	2100      	movs	r1, #0
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f004 fa5d 	bl	800fdca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2240      	movs	r2, #64	@ 0x40
 800b91c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b920:	2340      	movs	r3, #64	@ 0x40
 800b922:	2200      	movs	r2, #0
 800b924:	2180      	movs	r1, #128	@ 0x80
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f004 fa4f 	bl	800fdca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2240      	movs	r2, #64	@ 0x40
 800b936:	621a      	str	r2, [r3, #32]

  return ret;
 800b938:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b942:	b480      	push	{r7}
 800b944:	b083      	sub	sp, #12
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	460b      	mov	r3, r1
 800b94c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	78fa      	ldrb	r2, [r7, #3]
 800b952:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b954:	2300      	movs	r3, #0
}
 800b956:	4618      	mov	r0, r3
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b04      	cmp	r3, #4
 800b974:	d006      	beq.n	800b984 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2204      	movs	r2, #4
 800b988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d106      	bne.n	800b9bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b082      	sub	sp, #8
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d110      	bne.n	800ba00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00b      	beq.n	800ba00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9ee:	69db      	ldr	r3, [r3, #28]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d005      	beq.n	800ba00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	460b      	mov	r3, r1
 800ba14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	32ae      	adds	r2, #174	@ 0xae
 800ba20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d101      	bne.n	800ba2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e01c      	b.n	800ba66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	2b03      	cmp	r3, #3
 800ba36:	d115      	bne.n	800ba64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	32ae      	adds	r2, #174	@ 0xae
 800ba42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00b      	beq.n	800ba64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	32ae      	adds	r2, #174	@ 0xae
 800ba56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5a:	6a1b      	ldr	r3, [r3, #32]
 800ba5c:	78fa      	ldrb	r2, [r7, #3]
 800ba5e:	4611      	mov	r1, r2
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	32ae      	adds	r2, #174	@ 0xae
 800ba84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e01c      	b.n	800baca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	d115      	bne.n	800bac8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	32ae      	adds	r2, #174	@ 0xae
 800baa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00b      	beq.n	800bac8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	32ae      	adds	r2, #174	@ 0xae
 800baba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800babe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac0:	78fa      	ldrb	r2, [r7, #3]
 800bac2:	4611      	mov	r1, r2
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00e      	beq.n	800bb24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	6852      	ldr	r2, [r2, #4]
 800bb12:	b2d2      	uxtb	r2, r2
 800bb14:	4611      	mov	r1, r2
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	4798      	blx	r3
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bb20:	2303      	movs	r3, #3
 800bb22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	460b      	mov	r3, r1
 800bb38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b086      	sub	sp, #24
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	885b      	ldrh	r3, [r3, #2]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	7812      	ldrb	r2, [r2, #0]
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d91f      	bls.n	800bbc8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bb8e:	e013      	b.n	800bbb8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bb90:	f107 030a 	add.w	r3, r7, #10
 800bb94:	4619      	mov	r1, r3
 800bb96:	6978      	ldr	r0, [r7, #20]
 800bb98:	f000 f81b 	bl	800bbd2 <USBD_GetNextDesc>
 800bb9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	2b05      	cmp	r3, #5
 800bba4:	d108      	bne.n	800bbb8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	789b      	ldrb	r3, [r3, #2]
 800bbae:	78fa      	ldrb	r2, [r7, #3]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d008      	beq.n	800bbc6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	885b      	ldrh	r3, [r3, #2]
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	897b      	ldrh	r3, [r7, #10]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d8e5      	bhi.n	800bb90 <USBD_GetEpDesc+0x2e>
 800bbc4:	e000      	b.n	800bbc8 <USBD_GetEpDesc+0x66>
          break;
 800bbc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bbc8:	693b      	ldr	r3, [r7, #16]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b085      	sub	sp, #20
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	7812      	ldrb	r2, [r2, #0]
 800bbe8:	4413      	add	r3, r2
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b087      	sub	sp, #28
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc28:	8a3b      	ldrh	r3, [r7, #16]
 800bc2a:	021b      	lsls	r3, r3, #8
 800bc2c:	b21a      	sxth	r2, r3
 800bc2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	b21b      	sxth	r3, r3
 800bc36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc38:	89fb      	ldrh	r3, [r7, #14]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
	...

0800bc48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc5e:	2b40      	cmp	r3, #64	@ 0x40
 800bc60:	d005      	beq.n	800bc6e <USBD_StdDevReq+0x26>
 800bc62:	2b40      	cmp	r3, #64	@ 0x40
 800bc64:	d857      	bhi.n	800bd16 <USBD_StdDevReq+0xce>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00f      	beq.n	800bc8a <USBD_StdDevReq+0x42>
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	d153      	bne.n	800bd16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	32ae      	adds	r2, #174	@ 0xae
 800bc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	4798      	blx	r3
 800bc84:	4603      	mov	r3, r0
 800bc86:	73fb      	strb	r3, [r7, #15]
      break;
 800bc88:	e04a      	b.n	800bd20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	2b09      	cmp	r3, #9
 800bc90:	d83b      	bhi.n	800bd0a <USBD_StdDevReq+0xc2>
 800bc92:	a201      	add	r2, pc, #4	@ (adr r2, 800bc98 <USBD_StdDevReq+0x50>)
 800bc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc98:	0800bced 	.word	0x0800bced
 800bc9c:	0800bd01 	.word	0x0800bd01
 800bca0:	0800bd0b 	.word	0x0800bd0b
 800bca4:	0800bcf7 	.word	0x0800bcf7
 800bca8:	0800bd0b 	.word	0x0800bd0b
 800bcac:	0800bccb 	.word	0x0800bccb
 800bcb0:	0800bcc1 	.word	0x0800bcc1
 800bcb4:	0800bd0b 	.word	0x0800bd0b
 800bcb8:	0800bce3 	.word	0x0800bce3
 800bcbc:	0800bcd5 	.word	0x0800bcd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa3c 	bl	800c140 <USBD_GetDescriptor>
          break;
 800bcc8:	e024      	b.n	800bd14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fbcb 	bl	800c468 <USBD_SetAddress>
          break;
 800bcd2:	e01f      	b.n	800bd14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fc0a 	bl	800c4f0 <USBD_SetConfig>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]
          break;
 800bce0:	e018      	b.n	800bd14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fcad 	bl	800c644 <USBD_GetConfig>
          break;
 800bcea:	e013      	b.n	800bd14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fcde 	bl	800c6b0 <USBD_GetStatus>
          break;
 800bcf4:	e00e      	b.n	800bd14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fd0d 	bl	800c718 <USBD_SetFeature>
          break;
 800bcfe:	e009      	b.n	800bd14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fd31 	bl	800c76a <USBD_ClrFeature>
          break;
 800bd08:	e004      	b.n	800bd14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fd88 	bl	800c822 <USBD_CtlError>
          break;
 800bd12:	bf00      	nop
      }
      break;
 800bd14:	e004      	b.n	800bd20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fd82 	bl	800c822 <USBD_CtlError>
      break;
 800bd1e:	bf00      	nop
  }

  return ret;
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop

0800bd2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd42:	2b40      	cmp	r3, #64	@ 0x40
 800bd44:	d005      	beq.n	800bd52 <USBD_StdItfReq+0x26>
 800bd46:	2b40      	cmp	r3, #64	@ 0x40
 800bd48:	d852      	bhi.n	800bdf0 <USBD_StdItfReq+0xc4>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <USBD_StdItfReq+0x26>
 800bd4e:	2b20      	cmp	r3, #32
 800bd50:	d14e      	bne.n	800bdf0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d840      	bhi.n	800bde2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	889b      	ldrh	r3, [r3, #4]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d836      	bhi.n	800bdd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	889b      	ldrh	r3, [r3, #4]
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	4619      	mov	r1, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7ff fedb 	bl	800bb2e <USBD_CoreFindIF>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd7c:	7bbb      	ldrb	r3, [r7, #14]
 800bd7e:	2bff      	cmp	r3, #255	@ 0xff
 800bd80:	d01d      	beq.n	800bdbe <USBD_StdItfReq+0x92>
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d11a      	bne.n	800bdbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bd88:	7bba      	ldrb	r2, [r7, #14]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	32ae      	adds	r2, #174	@ 0xae
 800bd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00f      	beq.n	800bdb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd98:	7bba      	ldrb	r2, [r7, #14]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bda0:	7bba      	ldrb	r2, [r7, #14]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	32ae      	adds	r2, #174	@ 0xae
 800bda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	4798      	blx	r3
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bdb6:	e004      	b.n	800bdc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bdbc:	e001      	b.n	800bdc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	88db      	ldrh	r3, [r3, #6]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d110      	bne.n	800bdec <USBD_StdItfReq+0xc0>
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10d      	bne.n	800bdec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fdfd 	bl	800c9d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bdd6:	e009      	b.n	800bdec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fd21 	bl	800c822 <USBD_CtlError>
          break;
 800bde0:	e004      	b.n	800bdec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 fd1c 	bl	800c822 <USBD_CtlError>
          break;
 800bdea:	e000      	b.n	800bdee <USBD_StdItfReq+0xc2>
          break;
 800bdec:	bf00      	nop
      }
      break;
 800bdee:	e004      	b.n	800bdfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fd15 	bl	800c822 <USBD_CtlError>
      break;
 800bdf8:	bf00      	nop
  }

  return ret;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	889b      	ldrh	r3, [r3, #4]
 800be16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be20:	2b40      	cmp	r3, #64	@ 0x40
 800be22:	d007      	beq.n	800be34 <USBD_StdEPReq+0x30>
 800be24:	2b40      	cmp	r3, #64	@ 0x40
 800be26:	f200 817f 	bhi.w	800c128 <USBD_StdEPReq+0x324>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d02a      	beq.n	800be84 <USBD_StdEPReq+0x80>
 800be2e:	2b20      	cmp	r3, #32
 800be30:	f040 817a 	bne.w	800c128 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	4619      	mov	r1, r3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff fe85 	bl	800bb48 <USBD_CoreFindEP>
 800be3e:	4603      	mov	r3, r0
 800be40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be42:	7b7b      	ldrb	r3, [r7, #13]
 800be44:	2bff      	cmp	r3, #255	@ 0xff
 800be46:	f000 8174 	beq.w	800c132 <USBD_StdEPReq+0x32e>
 800be4a:	7b7b      	ldrb	r3, [r7, #13]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f040 8170 	bne.w	800c132 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800be52:	7b7a      	ldrb	r2, [r7, #13]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800be5a:	7b7a      	ldrb	r2, [r7, #13]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	32ae      	adds	r2, #174	@ 0xae
 800be60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 8163 	beq.w	800c132 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be6c:	7b7a      	ldrb	r2, [r7, #13]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	32ae      	adds	r2, #174	@ 0xae
 800be72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	4798      	blx	r3
 800be7e:	4603      	mov	r3, r0
 800be80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be82:	e156      	b.n	800c132 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	785b      	ldrb	r3, [r3, #1]
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d008      	beq.n	800be9e <USBD_StdEPReq+0x9a>
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	f300 8145 	bgt.w	800c11c <USBD_StdEPReq+0x318>
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 809b 	beq.w	800bfce <USBD_StdEPReq+0x1ca>
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d03c      	beq.n	800bf16 <USBD_StdEPReq+0x112>
 800be9c:	e13e      	b.n	800c11c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d002      	beq.n	800beb0 <USBD_StdEPReq+0xac>
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d016      	beq.n	800bedc <USBD_StdEPReq+0xd8>
 800beae:	e02c      	b.n	800bf0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800beb0:	7bbb      	ldrb	r3, [r7, #14]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00d      	beq.n	800bed2 <USBD_StdEPReq+0xce>
 800beb6:	7bbb      	ldrb	r3, [r7, #14]
 800beb8:	2b80      	cmp	r3, #128	@ 0x80
 800beba:	d00a      	beq.n	800bed2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bebc:	7bbb      	ldrb	r3, [r7, #14]
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f003 ffc7 	bl	800fe54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bec6:	2180      	movs	r1, #128	@ 0x80
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f003 ffc3 	bl	800fe54 <USBD_LL_StallEP>
 800bece:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bed0:	e020      	b.n	800bf14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fca4 	bl	800c822 <USBD_CtlError>
              break;
 800beda:	e01b      	b.n	800bf14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	885b      	ldrh	r3, [r3, #2]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10e      	bne.n	800bf02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00b      	beq.n	800bf02 <USBD_StdEPReq+0xfe>
 800beea:	7bbb      	ldrb	r3, [r7, #14]
 800beec:	2b80      	cmp	r3, #128	@ 0x80
 800beee:	d008      	beq.n	800bf02 <USBD_StdEPReq+0xfe>
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	88db      	ldrh	r3, [r3, #6]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d104      	bne.n	800bf02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f003 ffa9 	bl	800fe54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fd64 	bl	800c9d0 <USBD_CtlSendStatus>

              break;
 800bf08:	e004      	b.n	800bf14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 fc88 	bl	800c822 <USBD_CtlError>
              break;
 800bf12:	bf00      	nop
          }
          break;
 800bf14:	e107      	b.n	800c126 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d002      	beq.n	800bf28 <USBD_StdEPReq+0x124>
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d016      	beq.n	800bf54 <USBD_StdEPReq+0x150>
 800bf26:	e04b      	b.n	800bfc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00d      	beq.n	800bf4a <USBD_StdEPReq+0x146>
 800bf2e:	7bbb      	ldrb	r3, [r7, #14]
 800bf30:	2b80      	cmp	r3, #128	@ 0x80
 800bf32:	d00a      	beq.n	800bf4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f003 ff8b 	bl	800fe54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf3e:	2180      	movs	r1, #128	@ 0x80
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f003 ff87 	bl	800fe54 <USBD_LL_StallEP>
 800bf46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf48:	e040      	b.n	800bfcc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fc68 	bl	800c822 <USBD_CtlError>
              break;
 800bf52:	e03b      	b.n	800bfcc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	885b      	ldrh	r3, [r3, #2]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d136      	bne.n	800bfca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d004      	beq.n	800bf70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f003 ff91 	bl	800fe92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fd2d 	bl	800c9d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf76:	7bbb      	ldrb	r3, [r7, #14]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7ff fde4 	bl	800bb48 <USBD_CoreFindEP>
 800bf80:	4603      	mov	r3, r0
 800bf82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf84:	7b7b      	ldrb	r3, [r7, #13]
 800bf86:	2bff      	cmp	r3, #255	@ 0xff
 800bf88:	d01f      	beq.n	800bfca <USBD_StdEPReq+0x1c6>
 800bf8a:	7b7b      	ldrb	r3, [r7, #13]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d11c      	bne.n	800bfca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bf90:	7b7a      	ldrb	r2, [r7, #13]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf98:	7b7a      	ldrb	r2, [r7, #13]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	32ae      	adds	r2, #174	@ 0xae
 800bf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d010      	beq.n	800bfca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfa8:	7b7a      	ldrb	r2, [r7, #13]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	32ae      	adds	r2, #174	@ 0xae
 800bfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	4798      	blx	r3
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bfbe:	e004      	b.n	800bfca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fc2d 	bl	800c822 <USBD_CtlError>
              break;
 800bfc8:	e000      	b.n	800bfcc <USBD_StdEPReq+0x1c8>
              break;
 800bfca:	bf00      	nop
          }
          break;
 800bfcc:	e0ab      	b.n	800c126 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d002      	beq.n	800bfe0 <USBD_StdEPReq+0x1dc>
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d032      	beq.n	800c044 <USBD_StdEPReq+0x240>
 800bfde:	e097      	b.n	800c110 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfe0:	7bbb      	ldrb	r3, [r7, #14]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d007      	beq.n	800bff6 <USBD_StdEPReq+0x1f2>
 800bfe6:	7bbb      	ldrb	r3, [r7, #14]
 800bfe8:	2b80      	cmp	r3, #128	@ 0x80
 800bfea:	d004      	beq.n	800bff6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fc17 	bl	800c822 <USBD_CtlError>
                break;
 800bff4:	e091      	b.n	800c11a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	da0b      	bge.n	800c016 <USBD_StdEPReq+0x212>
 800bffe:	7bbb      	ldrb	r3, [r7, #14]
 800c000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c004:	4613      	mov	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4413      	add	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	3310      	adds	r3, #16
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	4413      	add	r3, r2
 800c012:	3304      	adds	r3, #4
 800c014:	e00b      	b.n	800c02e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c016:	7bbb      	ldrb	r3, [r7, #14]
 800c018:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c01c:	4613      	mov	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	4413      	add	r3, r2
 800c02c:	3304      	adds	r3, #4
 800c02e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2202      	movs	r2, #2
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fc6d 	bl	800c91c <USBD_CtlSendData>
              break;
 800c042:	e06a      	b.n	800c11a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	da11      	bge.n	800c070 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	f003 020f 	and.w	r2, r3, #15
 800c052:	6879      	ldr	r1, [r7, #4]
 800c054:	4613      	mov	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	440b      	add	r3, r1
 800c05e:	3324      	adds	r3, #36	@ 0x24
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d117      	bne.n	800c096 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fbda 	bl	800c822 <USBD_CtlError>
                  break;
 800c06e:	e054      	b.n	800c11a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c070:	7bbb      	ldrb	r3, [r7, #14]
 800c072:	f003 020f 	and.w	r2, r3, #15
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d104      	bne.n	800c096 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fbc7 	bl	800c822 <USBD_CtlError>
                  break;
 800c094:	e041      	b.n	800c11a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da0b      	bge.n	800c0b6 <USBD_StdEPReq+0x2b2>
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	3310      	adds	r3, #16
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	e00b      	b.n	800c0ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0bc:	4613      	mov	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <USBD_StdEPReq+0x2d8>
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	2b80      	cmp	r3, #128	@ 0x80
 800c0da:	d103      	bne.n	800c0e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	601a      	str	r2, [r3, #0]
 800c0e2:	e00e      	b.n	800c102 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f003 fef1 	bl	800fed0 <USBD_LL_IsStallEP>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	e002      	b.n	800c102 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2202      	movs	r2, #2
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fc07 	bl	800c91c <USBD_CtlSendData>
              break;
 800c10e:	e004      	b.n	800c11a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fb85 	bl	800c822 <USBD_CtlError>
              break;
 800c118:	bf00      	nop
          }
          break;
 800c11a:	e004      	b.n	800c126 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fb7f 	bl	800c822 <USBD_CtlError>
          break;
 800c124:	bf00      	nop
      }
      break;
 800c126:	e005      	b.n	800c134 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fb79 	bl	800c822 <USBD_CtlError>
      break;
 800c130:	e000      	b.n	800c134 <USBD_StdEPReq+0x330>
      break;
 800c132:	bf00      	nop
  }

  return ret;
 800c134:	7bfb      	ldrb	r3, [r7, #15]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
	...

0800c140 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c152:	2300      	movs	r3, #0
 800c154:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	885b      	ldrh	r3, [r3, #2]
 800c15a:	0a1b      	lsrs	r3, r3, #8
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	3b01      	subs	r3, #1
 800c160:	2b0e      	cmp	r3, #14
 800c162:	f200 8152 	bhi.w	800c40a <USBD_GetDescriptor+0x2ca>
 800c166:	a201      	add	r2, pc, #4	@ (adr r2, 800c16c <USBD_GetDescriptor+0x2c>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c1dd 	.word	0x0800c1dd
 800c170:	0800c1f5 	.word	0x0800c1f5
 800c174:	0800c235 	.word	0x0800c235
 800c178:	0800c40b 	.word	0x0800c40b
 800c17c:	0800c40b 	.word	0x0800c40b
 800c180:	0800c3ab 	.word	0x0800c3ab
 800c184:	0800c3d7 	.word	0x0800c3d7
 800c188:	0800c40b 	.word	0x0800c40b
 800c18c:	0800c40b 	.word	0x0800c40b
 800c190:	0800c40b 	.word	0x0800c40b
 800c194:	0800c40b 	.word	0x0800c40b
 800c198:	0800c40b 	.word	0x0800c40b
 800c19c:	0800c40b 	.word	0x0800c40b
 800c1a0:	0800c40b 	.word	0x0800c40b
 800c1a4:	0800c1a9 	.word	0x0800c1a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00b      	beq.n	800c1cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	7c12      	ldrb	r2, [r2, #16]
 800c1c0:	f107 0108 	add.w	r1, r7, #8
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	4798      	blx	r3
 800c1c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1ca:	e126      	b.n	800c41a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fb27 	bl	800c822 <USBD_CtlError>
        err++;
 800c1d4:	7afb      	ldrb	r3, [r7, #11]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	72fb      	strb	r3, [r7, #11]
      break;
 800c1da:	e11e      	b.n	800c41a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	7c12      	ldrb	r2, [r2, #16]
 800c1e8:	f107 0108 	add.w	r1, r7, #8
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	4798      	blx	r3
 800c1f0:	60f8      	str	r0, [r7, #12]
      break;
 800c1f2:	e112      	b.n	800c41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	7c1b      	ldrb	r3, [r3, #16]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10d      	bne.n	800c218 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c204:	f107 0208 	add.w	r2, r7, #8
 800c208:	4610      	mov	r0, r2
 800c20a:	4798      	blx	r3
 800c20c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3301      	adds	r3, #1
 800c212:	2202      	movs	r2, #2
 800c214:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c216:	e100      	b.n	800c41a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c220:	f107 0208 	add.w	r2, r7, #8
 800c224:	4610      	mov	r0, r2
 800c226:	4798      	blx	r3
 800c228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	3301      	adds	r3, #1
 800c22e:	2202      	movs	r2, #2
 800c230:	701a      	strb	r2, [r3, #0]
      break;
 800c232:	e0f2      	b.n	800c41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	885b      	ldrh	r3, [r3, #2]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	f200 80ac 	bhi.w	800c398 <USBD_GetDescriptor+0x258>
 800c240:	a201      	add	r2, pc, #4	@ (adr r2, 800c248 <USBD_GetDescriptor+0x108>)
 800c242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c246:	bf00      	nop
 800c248:	0800c261 	.word	0x0800c261
 800c24c:	0800c295 	.word	0x0800c295
 800c250:	0800c2c9 	.word	0x0800c2c9
 800c254:	0800c2fd 	.word	0x0800c2fd
 800c258:	0800c331 	.word	0x0800c331
 800c25c:	0800c365 	.word	0x0800c365
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00b      	beq.n	800c284 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	7c12      	ldrb	r2, [r2, #16]
 800c278:	f107 0108 	add.w	r1, r7, #8
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c282:	e091      	b.n	800c3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 facb 	bl	800c822 <USBD_CtlError>
            err++;
 800c28c:	7afb      	ldrb	r3, [r7, #11]
 800c28e:	3301      	adds	r3, #1
 800c290:	72fb      	strb	r3, [r7, #11]
          break;
 800c292:	e089      	b.n	800c3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	7c12      	ldrb	r2, [r2, #16]
 800c2ac:	f107 0108 	add.w	r1, r7, #8
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4798      	blx	r3
 800c2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b6:	e077      	b.n	800c3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fab1 	bl	800c822 <USBD_CtlError>
            err++;
 800c2c0:	7afb      	ldrb	r3, [r7, #11]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2c6:	e06f      	b.n	800c3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ea:	e05d      	b.n	800c3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa97 	bl	800c822 <USBD_CtlError>
            err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fa:	e055      	b.n	800c3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31e:	e043      	b.n	800c3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa7d 	bl	800c822 <USBD_CtlError>
            err++;
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	3301      	adds	r3, #1
 800c32c:	72fb      	strb	r3, [r7, #11]
          break;
 800c32e:	e03b      	b.n	800c3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c336:	695b      	ldr	r3, [r3, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c342:	695b      	ldr	r3, [r3, #20]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c352:	e029      	b.n	800c3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fa63 	bl	800c822 <USBD_CtlError>
            err++;
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	3301      	adds	r3, #1
 800c360:	72fb      	strb	r3, [r7, #11]
          break;
 800c362:	e021      	b.n	800c3a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c36a:	699b      	ldr	r3, [r3, #24]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c376:	699b      	ldr	r3, [r3, #24]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c386:	e00f      	b.n	800c3a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa49 	bl	800c822 <USBD_CtlError>
            err++;
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	3301      	adds	r3, #1
 800c394:	72fb      	strb	r3, [r7, #11]
          break;
 800c396:	e007      	b.n	800c3a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fa41 	bl	800c822 <USBD_CtlError>
          err++;
 800c3a0:	7afb      	ldrb	r3, [r7, #11]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c3a6:	bf00      	nop
      }
      break;
 800c3a8:	e037      	b.n	800c41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	7c1b      	ldrb	r3, [r3, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d109      	bne.n	800c3c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ba:	f107 0208 	add.w	r2, r7, #8
 800c3be:	4610      	mov	r0, r2
 800c3c0:	4798      	blx	r3
 800c3c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3c4:	e029      	b.n	800c41a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fa2a 	bl	800c822 <USBD_CtlError>
        err++;
 800c3ce:	7afb      	ldrb	r3, [r7, #11]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c3d4:	e021      	b.n	800c41a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	7c1b      	ldrb	r3, [r3, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10d      	bne.n	800c3fa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3e6:	f107 0208 	add.w	r2, r7, #8
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	4798      	blx	r3
 800c3ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	2207      	movs	r2, #7
 800c3f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3f8:	e00f      	b.n	800c41a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fa10 	bl	800c822 <USBD_CtlError>
        err++;
 800c402:	7afb      	ldrb	r3, [r7, #11]
 800c404:	3301      	adds	r3, #1
 800c406:	72fb      	strb	r3, [r7, #11]
      break;
 800c408:	e007      	b.n	800c41a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fa08 	bl	800c822 <USBD_CtlError>
      err++;
 800c412:	7afb      	ldrb	r3, [r7, #11]
 800c414:	3301      	adds	r3, #1
 800c416:	72fb      	strb	r3, [r7, #11]
      break;
 800c418:	bf00      	nop
  }

  if (err != 0U)
 800c41a:	7afb      	ldrb	r3, [r7, #11]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d11e      	bne.n	800c45e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	88db      	ldrh	r3, [r3, #6]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d016      	beq.n	800c456 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c428:	893b      	ldrh	r3, [r7, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00e      	beq.n	800c44c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	88da      	ldrh	r2, [r3, #6]
 800c432:	893b      	ldrh	r3, [r7, #8]
 800c434:	4293      	cmp	r3, r2
 800c436:	bf28      	it	cs
 800c438:	4613      	movcs	r3, r2
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c43e:	893b      	ldrh	r3, [r7, #8]
 800c440:	461a      	mov	r2, r3
 800c442:	68f9      	ldr	r1, [r7, #12]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fa69 	bl	800c91c <USBD_CtlSendData>
 800c44a:	e009      	b.n	800c460 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f9e7 	bl	800c822 <USBD_CtlError>
 800c454:	e004      	b.n	800c460 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 faba 	bl	800c9d0 <USBD_CtlSendStatus>
 800c45c:	e000      	b.n	800c460 <USBD_GetDescriptor+0x320>
    return;
 800c45e:	bf00      	nop
  }
}
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop

0800c468 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	889b      	ldrh	r3, [r3, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d131      	bne.n	800c4de <USBD_SetAddress+0x76>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	88db      	ldrh	r3, [r3, #6]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d12d      	bne.n	800c4de <USBD_SetAddress+0x76>
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	885b      	ldrh	r3, [r3, #2]
 800c486:	2b7f      	cmp	r3, #127	@ 0x7f
 800c488:	d829      	bhi.n	800c4de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	885b      	ldrh	r3, [r3, #2]
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c494:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	d104      	bne.n	800c4ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f9bc 	bl	800c822 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4aa:	e01d      	b.n	800c4e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	7bfa      	ldrb	r2, [r7, #15]
 800c4b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f003 fd35 	bl	800ff28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fa86 	bl	800c9d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d004      	beq.n	800c4d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4d2:	e009      	b.n	800c4e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4dc:	e004      	b.n	800c4e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f99e 	bl	800c822 <USBD_CtlError>
  }
}
 800c4e6:	bf00      	nop
 800c4e8:	bf00      	nop
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	885b      	ldrh	r3, [r3, #2]
 800c502:	b2da      	uxtb	r2, r3
 800c504:	4b4e      	ldr	r3, [pc, #312]	@ (800c640 <USBD_SetConfig+0x150>)
 800c506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c508:	4b4d      	ldr	r3, [pc, #308]	@ (800c640 <USBD_SetConfig+0x150>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d905      	bls.n	800c51c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f985 	bl	800c822 <USBD_CtlError>
    return USBD_FAIL;
 800c518:	2303      	movs	r3, #3
 800c51a:	e08c      	b.n	800c636 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b02      	cmp	r3, #2
 800c526:	d002      	beq.n	800c52e <USBD_SetConfig+0x3e>
 800c528:	2b03      	cmp	r3, #3
 800c52a:	d029      	beq.n	800c580 <USBD_SetConfig+0x90>
 800c52c:	e075      	b.n	800c61a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c52e:	4b44      	ldr	r3, [pc, #272]	@ (800c640 <USBD_SetConfig+0x150>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d020      	beq.n	800c578 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c536:	4b42      	ldr	r3, [pc, #264]	@ (800c640 <USBD_SetConfig+0x150>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c540:	4b3f      	ldr	r3, [pc, #252]	@ (800c640 <USBD_SetConfig+0x150>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7fe ffb9 	bl	800b4be <USBD_SetClassConfig>
 800c54c:	4603      	mov	r3, r0
 800c54e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d008      	beq.n	800c568 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f962 	bl	800c822 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2202      	movs	r2, #2
 800c562:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c566:	e065      	b.n	800c634 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fa31 	bl	800c9d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2203      	movs	r2, #3
 800c572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c576:	e05d      	b.n	800c634 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fa29 	bl	800c9d0 <USBD_CtlSendStatus>
      break;
 800c57e:	e059      	b.n	800c634 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c580:	4b2f      	ldr	r3, [pc, #188]	@ (800c640 <USBD_SetConfig+0x150>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d112      	bne.n	800c5ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2202      	movs	r2, #2
 800c58c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c590:	4b2b      	ldr	r3, [pc, #172]	@ (800c640 <USBD_SetConfig+0x150>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	461a      	mov	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c59a:	4b29      	ldr	r3, [pc, #164]	@ (800c640 <USBD_SetConfig+0x150>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7fe ffa8 	bl	800b4f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fa12 	bl	800c9d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5ac:	e042      	b.n	800c634 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c5ae:	4b24      	ldr	r3, [pc, #144]	@ (800c640 <USBD_SetConfig+0x150>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d02a      	beq.n	800c612 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7fe ff96 	bl	800b4f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c5ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c640 <USBD_SetConfig+0x150>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5d4:	4b1a      	ldr	r3, [pc, #104]	@ (800c640 <USBD_SetConfig+0x150>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7fe ff6f 	bl	800b4be <USBD_SetClassConfig>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00f      	beq.n	800c60a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f918 	bl	800c822 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7fe ff7b 	bl	800b4f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2202      	movs	r2, #2
 800c604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c608:	e014      	b.n	800c634 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f9e0 	bl	800c9d0 <USBD_CtlSendStatus>
      break;
 800c610:	e010      	b.n	800c634 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f9dc 	bl	800c9d0 <USBD_CtlSendStatus>
      break;
 800c618:	e00c      	b.n	800c634 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f900 	bl	800c822 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c622:	4b07      	ldr	r3, [pc, #28]	@ (800c640 <USBD_SetConfig+0x150>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7fe ff64 	bl	800b4f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c62e:	2303      	movs	r3, #3
 800c630:	73fb      	strb	r3, [r7, #15]
      break;
 800c632:	bf00      	nop
  }

  return ret;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	240005a4 	.word	0x240005a4

0800c644 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	88db      	ldrh	r3, [r3, #6]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d004      	beq.n	800c660 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f8e2 	bl	800c822 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c65e:	e023      	b.n	800c6a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b02      	cmp	r3, #2
 800c66a:	dc02      	bgt.n	800c672 <USBD_GetConfig+0x2e>
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	dc03      	bgt.n	800c678 <USBD_GetConfig+0x34>
 800c670:	e015      	b.n	800c69e <USBD_GetConfig+0x5a>
 800c672:	2b03      	cmp	r3, #3
 800c674:	d00b      	beq.n	800c68e <USBD_GetConfig+0x4a>
 800c676:	e012      	b.n	800c69e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3308      	adds	r3, #8
 800c682:	2201      	movs	r2, #1
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f948 	bl	800c91c <USBD_CtlSendData>
        break;
 800c68c:	e00c      	b.n	800c6a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3304      	adds	r3, #4
 800c692:	2201      	movs	r2, #1
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f940 	bl	800c91c <USBD_CtlSendData>
        break;
 800c69c:	e004      	b.n	800c6a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f8be 	bl	800c822 <USBD_CtlError>
        break;
 800c6a6:	bf00      	nop
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d81e      	bhi.n	800c706 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	88db      	ldrh	r3, [r3, #6]
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d004      	beq.n	800c6da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f8a5 	bl	800c822 <USBD_CtlError>
        break;
 800c6d8:	e01a      	b.n	800c710 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d005      	beq.n	800c6f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	f043 0202 	orr.w	r2, r3, #2
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	330c      	adds	r3, #12
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f90c 	bl	800c91c <USBD_CtlSendData>
      break;
 800c704:	e004      	b.n	800c710 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c706:	6839      	ldr	r1, [r7, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 f88a 	bl	800c822 <USBD_CtlError>
      break;
 800c70e:	bf00      	nop
  }
}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	885b      	ldrh	r3, [r3, #2]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d107      	bne.n	800c73a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f94c 	bl	800c9d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c738:	e013      	b.n	800c762 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	885b      	ldrh	r3, [r3, #2]
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d10b      	bne.n	800c75a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	889b      	ldrh	r3, [r3, #4]
 800c746:	0a1b      	lsrs	r3, r3, #8
 800c748:	b29b      	uxth	r3, r3
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f93c 	bl	800c9d0 <USBD_CtlSendStatus>
}
 800c758:	e003      	b.n	800c762 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f860 	bl	800c822 <USBD_CtlError>
}
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	3b01      	subs	r3, #1
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d80b      	bhi.n	800c79a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	885b      	ldrh	r3, [r3, #2]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d10c      	bne.n	800c7a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f91c 	bl	800c9d0 <USBD_CtlSendStatus>
      }
      break;
 800c798:	e004      	b.n	800c7a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f840 	bl	800c822 <USBD_CtlError>
      break;
 800c7a2:	e000      	b.n	800c7a6 <USBD_ClrFeature+0x3c>
      break;
 800c7a4:	bf00      	nop
  }
}
 800c7a6:	bf00      	nop
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	781a      	ldrb	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	781a      	ldrb	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f7ff fa16 	bl	800bc0a <SWAPBYTE>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7ff fa09 	bl	800bc0a <SWAPBYTE>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3301      	adds	r3, #1
 800c804:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3301      	adds	r3, #1
 800c80a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff f9fc 	bl	800bc0a <SWAPBYTE>
 800c812:	4603      	mov	r3, r0
 800c814:	461a      	mov	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	80da      	strh	r2, [r3, #6]
}
 800c81a:	bf00      	nop
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c82c:	2180      	movs	r1, #128	@ 0x80
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f003 fb10 	bl	800fe54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c834:	2100      	movs	r1, #0
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f003 fb0c 	bl	800fe54 <USBD_LL_StallEP>
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c850:	2300      	movs	r3, #0
 800c852:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d042      	beq.n	800c8e0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c85e:	6938      	ldr	r0, [r7, #16]
 800c860:	f000 f842 	bl	800c8e8 <USBD_GetLen>
 800c864:	4603      	mov	r3, r0
 800c866:	3301      	adds	r3, #1
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c86e:	d808      	bhi.n	800c882 <USBD_GetString+0x3e>
 800c870:	6938      	ldr	r0, [r7, #16]
 800c872:	f000 f839 	bl	800c8e8 <USBD_GetLen>
 800c876:	4603      	mov	r3, r0
 800c878:	3301      	adds	r3, #1
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	b29a      	uxth	r2, r3
 800c880:	e001      	b.n	800c886 <USBD_GetString+0x42>
 800c882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c88a:	7dfb      	ldrb	r3, [r7, #23]
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	4413      	add	r3, r2
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	7812      	ldrb	r2, [r2, #0]
 800c894:	701a      	strb	r2, [r3, #0]
  idx++;
 800c896:	7dfb      	ldrb	r3, [r7, #23]
 800c898:	3301      	adds	r3, #1
 800c89a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	2203      	movs	r2, #3
 800c8a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8ac:	e013      	b.n	800c8d6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c8ae:	7dfb      	ldrb	r3, [r7, #23]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	7812      	ldrb	r2, [r2, #0]
 800c8b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	613b      	str	r3, [r7, #16]
    idx++;
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e7      	bne.n	800c8ae <USBD_GetString+0x6a>
 800c8de:	e000      	b.n	800c8e2 <USBD_GetString+0x9e>
    return;
 800c8e0:	bf00      	nop
  }
}
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c8f8:	e005      	b.n	800c906 <USBD_GetLen+0x1e>
  {
    len++;
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	3301      	adds	r3, #1
 800c904:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1f5      	bne.n	800c8fa <USBD_GetLen+0x12>
  }

  return len;
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3714      	adds	r7, #20
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2202      	movs	r2, #2
 800c92c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	2100      	movs	r1, #0
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f003 fb0f 	bl	800ff66 <USBD_LL_Transmit>

  return USBD_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b084      	sub	sp, #16
 800c956:	af00      	add	r7, sp, #0
 800c958:	60f8      	str	r0, [r7, #12]
 800c95a:	60b9      	str	r1, [r7, #8]
 800c95c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	2100      	movs	r1, #0
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f003 fafe 	bl	800ff66 <USBD_LL_Transmit>

  return USBD_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2203      	movs	r2, #3
 800c984:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	2100      	movs	r1, #0
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f003 fb02 	bl	800ffa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b084      	sub	sp, #16
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	2100      	movs	r1, #0
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f003 faf1 	bl	800ffa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2204      	movs	r2, #4
 800c9dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f003 fabd 	bl	800ff66 <USBD_LL_Transmit>

  return USBD_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b082      	sub	sp, #8
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2205      	movs	r2, #5
 800ca02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca06:	2300      	movs	r3, #0
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f003 facb 	bl	800ffa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <__NVIC_SetPriority>:
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	6039      	str	r1, [r7, #0]
 800ca26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ca28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	db0a      	blt.n	800ca46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	490c      	ldr	r1, [pc, #48]	@ (800ca68 <__NVIC_SetPriority+0x4c>)
 800ca36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca3a:	0112      	lsls	r2, r2, #4
 800ca3c:	b2d2      	uxtb	r2, r2
 800ca3e:	440b      	add	r3, r1
 800ca40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ca44:	e00a      	b.n	800ca5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	4908      	ldr	r1, [pc, #32]	@ (800ca6c <__NVIC_SetPriority+0x50>)
 800ca4c:	88fb      	ldrh	r3, [r7, #6]
 800ca4e:	f003 030f 	and.w	r3, r3, #15
 800ca52:	3b04      	subs	r3, #4
 800ca54:	0112      	lsls	r2, r2, #4
 800ca56:	b2d2      	uxtb	r2, r2
 800ca58:	440b      	add	r3, r1
 800ca5a:	761a      	strb	r2, [r3, #24]
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	e000e100 	.word	0xe000e100
 800ca6c:	e000ed00 	.word	0xe000ed00

0800ca70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ca74:	4b05      	ldr	r3, [pc, #20]	@ (800ca8c <SysTick_Handler+0x1c>)
 800ca76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ca78:	f001 fd50 	bl	800e51c <xTaskGetSchedulerState>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d001      	beq.n	800ca86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ca82:	f002 fb49 	bl	800f118 <xPortSysTickHandler>
  }
}
 800ca86:	bf00      	nop
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	e000e010 	.word	0xe000e010

0800ca90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ca94:	2100      	movs	r1, #0
 800ca96:	f06f 0004 	mvn.w	r0, #4
 800ca9a:	f7ff ffbf 	bl	800ca1c <__NVIC_SetPriority>
#endif
}
 800ca9e:	bf00      	nop
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caaa:	f3ef 8305 	mrs	r3, IPSR
 800caae:	603b      	str	r3, [r7, #0]
  return(result);
 800cab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d003      	beq.n	800cabe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cab6:	f06f 0305 	mvn.w	r3, #5
 800caba:	607b      	str	r3, [r7, #4]
 800cabc:	e00c      	b.n	800cad8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cabe:	4b0a      	ldr	r3, [pc, #40]	@ (800cae8 <osKernelInitialize+0x44>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d105      	bne.n	800cad2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cac6:	4b08      	ldr	r3, [pc, #32]	@ (800cae8 <osKernelInitialize+0x44>)
 800cac8:	2201      	movs	r2, #1
 800caca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cacc:	2300      	movs	r3, #0
 800cace:	607b      	str	r3, [r7, #4]
 800cad0:	e002      	b.n	800cad8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cad2:	f04f 33ff 	mov.w	r3, #4294967295
 800cad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cad8:	687b      	ldr	r3, [r7, #4]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	240005a8 	.word	0x240005a8

0800caec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caf2:	f3ef 8305 	mrs	r3, IPSR
 800caf6:	603b      	str	r3, [r7, #0]
  return(result);
 800caf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cafe:	f06f 0305 	mvn.w	r3, #5
 800cb02:	607b      	str	r3, [r7, #4]
 800cb04:	e010      	b.n	800cb28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb06:	4b0b      	ldr	r3, [pc, #44]	@ (800cb34 <osKernelStart+0x48>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d109      	bne.n	800cb22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb0e:	f7ff ffbf 	bl	800ca90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb12:	4b08      	ldr	r3, [pc, #32]	@ (800cb34 <osKernelStart+0x48>)
 800cb14:	2202      	movs	r2, #2
 800cb16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb18:	f001 f87a 	bl	800dc10 <vTaskStartScheduler>
      stat = osOK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	607b      	str	r3, [r7, #4]
 800cb20:	e002      	b.n	800cb28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cb22:	f04f 33ff 	mov.w	r3, #4294967295
 800cb26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb28:	687b      	ldr	r3, [r7, #4]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	240005a8 	.word	0x240005a8

0800cb38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b08e      	sub	sp, #56	@ 0x38
 800cb3c:	af04      	add	r7, sp, #16
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb48:	f3ef 8305 	mrs	r3, IPSR
 800cb4c:	617b      	str	r3, [r7, #20]
  return(result);
 800cb4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d17e      	bne.n	800cc52 <osThreadNew+0x11a>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d07b      	beq.n	800cc52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cb5a:	2380      	movs	r3, #128	@ 0x80
 800cb5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cb5e:	2318      	movs	r3, #24
 800cb60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cb62:	2300      	movs	r3, #0
 800cb64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d045      	beq.n	800cbfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <osThreadNew+0x48>
        name = attr->name;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d008      	beq.n	800cba6 <osThreadNew+0x6e>
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	2b38      	cmp	r3, #56	@ 0x38
 800cb98:	d805      	bhi.n	800cba6 <osThreadNew+0x6e>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <osThreadNew+0x72>
        return (NULL);
 800cba6:	2300      	movs	r3, #0
 800cba8:	e054      	b.n	800cc54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d003      	beq.n	800cbba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	089b      	lsrs	r3, r3, #2
 800cbb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00e      	beq.n	800cbe0 <osThreadNew+0xa8>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	2b5b      	cmp	r3, #91	@ 0x5b
 800cbc8:	d90a      	bls.n	800cbe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d006      	beq.n	800cbe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <osThreadNew+0xa8>
        mem = 1;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	61bb      	str	r3, [r7, #24]
 800cbde:	e010      	b.n	800cc02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10c      	bne.n	800cc02 <osThreadNew+0xca>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d108      	bne.n	800cc02 <osThreadNew+0xca>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d104      	bne.n	800cc02 <osThreadNew+0xca>
          mem = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	61bb      	str	r3, [r7, #24]
 800cbfc:	e001      	b.n	800cc02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d110      	bne.n	800cc2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc10:	9202      	str	r2, [sp, #8]
 800cc12:	9301      	str	r3, [sp, #4]
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	6a3a      	ldr	r2, [r7, #32]
 800cc1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f000 fe1a 	bl	800d858 <xTaskCreateStatic>
 800cc24:	4603      	mov	r3, r0
 800cc26:	613b      	str	r3, [r7, #16]
 800cc28:	e013      	b.n	800cc52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d110      	bne.n	800cc52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	f107 0310 	add.w	r3, r7, #16
 800cc38:	9301      	str	r3, [sp, #4]
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f000 fe68 	bl	800d918 <xTaskCreate>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d001      	beq.n	800cc52 <osThreadNew+0x11a>
            hTask = NULL;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc52:	693b      	ldr	r3, [r7, #16]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3728      	adds	r7, #40	@ 0x28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc64:	f3ef 8305 	mrs	r3, IPSR
 800cc68:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d003      	beq.n	800cc78 <osDelay+0x1c>
    stat = osErrorISR;
 800cc70:	f06f 0305 	mvn.w	r3, #5
 800cc74:	60fb      	str	r3, [r7, #12]
 800cc76:	e007      	b.n	800cc88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 ff8e 	bl	800dba4 <vTaskDelay>
    }
  }

  return (stat);
 800cc88:	68fb      	ldr	r3, [r7, #12]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4a07      	ldr	r2, [pc, #28]	@ (800ccc0 <vApplicationGetIdleTaskMemory+0x2c>)
 800cca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	4a06      	ldr	r2, [pc, #24]	@ (800ccc4 <vApplicationGetIdleTaskMemory+0x30>)
 800ccaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2280      	movs	r2, #128	@ 0x80
 800ccb0:	601a      	str	r2, [r3, #0]
}
 800ccb2:	bf00      	nop
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	240005ac 	.word	0x240005ac
 800ccc4:	24000608 	.word	0x24000608

0800ccc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	4a07      	ldr	r2, [pc, #28]	@ (800ccf4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ccd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	4a06      	ldr	r2, [pc, #24]	@ (800ccf8 <vApplicationGetTimerTaskMemory+0x30>)
 800ccde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cce6:	601a      	str	r2, [r3, #0]
}
 800cce8:	bf00      	nop
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	24000808 	.word	0x24000808
 800ccf8:	24000864 	.word	0x24000864

0800ccfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f103 0208 	add.w	r2, r3, #8
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f04f 32ff 	mov.w	r2, #4294967295
 800cd14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f103 0208 	add.w	r2, r3, #8
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f103 0208 	add.w	r2, r3, #8
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd4a:	bf00      	nop
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr

0800cd56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd56:	b480      	push	{r7}
 800cd58:	b085      	sub	sp, #20
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	1c5a      	adds	r2, r3, #1
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	601a      	str	r2, [r3, #0]
}
 800cd92:	bf00      	nop
 800cd94:	3714      	adds	r7, #20
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb4:	d103      	bne.n	800cdbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	e00c      	b.n	800cdd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	3308      	adds	r3, #8
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	e002      	b.n	800cdcc <vListInsert+0x2e>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d2f6      	bcs.n	800cdc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	601a      	str	r2, [r3, #0]
}
 800ce04:	bf00      	nop
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	691b      	ldr	r3, [r3, #16]
 800ce1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	6892      	ldr	r2, [r2, #8]
 800ce26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	6852      	ldr	r2, [r2, #4]
 800ce30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d103      	bne.n	800ce44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	689a      	ldr	r2, [r3, #8]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	1e5a      	subs	r2, r3, #1
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10b      	bne.n	800ce90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce8a:	bf00      	nop
 800ce8c:	bf00      	nop
 800ce8e:	e7fd      	b.n	800ce8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce90:	f002 f8b2 	bl	800eff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce9c:	68f9      	ldr	r1, [r7, #12]
 800ce9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cea0:	fb01 f303 	mul.w	r3, r1, r3
 800cea4:	441a      	add	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cec0:	3b01      	subs	r3, #1
 800cec2:	68f9      	ldr	r1, [r7, #12]
 800cec4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cec6:	fb01 f303 	mul.w	r3, r1, r3
 800ceca:	441a      	add	r2, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	22ff      	movs	r2, #255	@ 0xff
 800ced4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	22ff      	movs	r2, #255	@ 0xff
 800cedc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d114      	bne.n	800cf10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d01a      	beq.n	800cf24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3310      	adds	r3, #16
 800cef2:	4618      	mov	r0, r3
 800cef4:	f001 f91a 	bl	800e12c <xTaskRemoveFromEventList>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d012      	beq.n	800cf24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cefe:	4b0d      	ldr	r3, [pc, #52]	@ (800cf34 <xQueueGenericReset+0xd0>)
 800cf00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	e009      	b.n	800cf24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3310      	adds	r3, #16
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7ff fef1 	bl	800ccfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3324      	adds	r3, #36	@ 0x24
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff feec 	bl	800ccfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf24:	f002 f89a 	bl	800f05c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf28:	2301      	movs	r3, #1
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	e000ed04 	.word	0xe000ed04

0800cf38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08e      	sub	sp, #56	@ 0x38
 800cf3c:	af02      	add	r7, sp, #8
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10b      	bne.n	800cf64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf5e:	bf00      	nop
 800cf60:	bf00      	nop
 800cf62:	e7fd      	b.n	800cf60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10b      	bne.n	800cf82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	e7fd      	b.n	800cf7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <xQueueGenericCreateStatic+0x56>
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <xQueueGenericCreateStatic+0x5a>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e000      	b.n	800cf94 <xQueueGenericCreateStatic+0x5c>
 800cf92:	2300      	movs	r3, #0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10b      	bne.n	800cfb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	623b      	str	r3, [r7, #32]
}
 800cfaa:	bf00      	nop
 800cfac:	bf00      	nop
 800cfae:	e7fd      	b.n	800cfac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d102      	bne.n	800cfbc <xQueueGenericCreateStatic+0x84>
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <xQueueGenericCreateStatic+0x88>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e000      	b.n	800cfc2 <xQueueGenericCreateStatic+0x8a>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10b      	bne.n	800cfde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	61fb      	str	r3, [r7, #28]
}
 800cfd8:	bf00      	nop
 800cfda:	bf00      	nop
 800cfdc:	e7fd      	b.n	800cfda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfde:	2350      	movs	r3, #80	@ 0x50
 800cfe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2b50      	cmp	r3, #80	@ 0x50
 800cfe6:	d00b      	beq.n	800d000 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	61bb      	str	r3, [r7, #24]
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	e7fd      	b.n	800cffc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d000:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00d      	beq.n	800d028 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d014:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	4613      	mov	r3, r2
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	68b9      	ldr	r1, [r7, #8]
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f000 f805 	bl	800d032 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3730      	adds	r7, #48	@ 0x30
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	607a      	str	r2, [r7, #4]
 800d03e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d103      	bne.n	800d04e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	69ba      	ldr	r2, [r7, #24]
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	e002      	b.n	800d054 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d060:	2101      	movs	r1, #1
 800d062:	69b8      	ldr	r0, [r7, #24]
 800d064:	f7ff fefe 	bl	800ce64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	78fa      	ldrb	r2, [r7, #3]
 800d06c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08e      	sub	sp, #56	@ 0x38
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d086:	2300      	movs	r3, #0
 800d088:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10b      	bne.n	800d0ac <xQueueGenericSend+0x34>
	__asm volatile
 800d094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d098:	f383 8811 	msr	BASEPRI, r3
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	f3bf 8f4f 	dsb	sy
 800d0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d0a6:	bf00      	nop
 800d0a8:	bf00      	nop
 800d0aa:	e7fd      	b.n	800d0a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d103      	bne.n	800d0ba <xQueueGenericSend+0x42>
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <xQueueGenericSend+0x46>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e000      	b.n	800d0c0 <xQueueGenericSend+0x48>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10b      	bne.n	800d0dc <xQueueGenericSend+0x64>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	e7fd      	b.n	800d0d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d103      	bne.n	800d0ea <xQueueGenericSend+0x72>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d101      	bne.n	800d0ee <xQueueGenericSend+0x76>
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e000      	b.n	800d0f0 <xQueueGenericSend+0x78>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10b      	bne.n	800d10c <xQueueGenericSend+0x94>
	__asm volatile
 800d0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	623b      	str	r3, [r7, #32]
}
 800d106:	bf00      	nop
 800d108:	bf00      	nop
 800d10a:	e7fd      	b.n	800d108 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d10c:	f001 fa06 	bl	800e51c <xTaskGetSchedulerState>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d102      	bne.n	800d11c <xQueueGenericSend+0xa4>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d101      	bne.n	800d120 <xQueueGenericSend+0xa8>
 800d11c:	2301      	movs	r3, #1
 800d11e:	e000      	b.n	800d122 <xQueueGenericSend+0xaa>
 800d120:	2300      	movs	r3, #0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10b      	bne.n	800d13e <xQueueGenericSend+0xc6>
	__asm volatile
 800d126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	61fb      	str	r3, [r7, #28]
}
 800d138:	bf00      	nop
 800d13a:	bf00      	nop
 800d13c:	e7fd      	b.n	800d13a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d13e:	f001 ff5b 	bl	800eff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d302      	bcc.n	800d154 <xQueueGenericSend+0xdc>
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b02      	cmp	r3, #2
 800d152:	d129      	bne.n	800d1a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	68b9      	ldr	r1, [r7, #8]
 800d158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d15a:	f000 fa0f 	bl	800d57c <prvCopyDataToQueue>
 800d15e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d164:	2b00      	cmp	r3, #0
 800d166:	d010      	beq.n	800d18a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16a:	3324      	adds	r3, #36	@ 0x24
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 ffdd 	bl	800e12c <xTaskRemoveFromEventList>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d013      	beq.n	800d1a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d178:	4b3f      	ldr	r3, [pc, #252]	@ (800d278 <xQueueGenericSend+0x200>)
 800d17a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	e00a      	b.n	800d1a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d007      	beq.n	800d1a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d190:	4b39      	ldr	r3, [pc, #228]	@ (800d278 <xQueueGenericSend+0x200>)
 800d192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1a0:	f001 ff5c 	bl	800f05c <vPortExitCritical>
				return pdPASS;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e063      	b.n	800d270 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d103      	bne.n	800d1b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1ae:	f001 ff55 	bl	800f05c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e05c      	b.n	800d270 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d106      	bne.n	800d1ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1bc:	f107 0314 	add.w	r3, r7, #20
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 f817 	bl	800e1f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1ca:	f001 ff47 	bl	800f05c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1ce:	f000 fd87 	bl	800dce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1d2:	f001 ff11 	bl	800eff8 <vPortEnterCritical>
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1dc:	b25b      	sxtb	r3, r3
 800d1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e2:	d103      	bne.n	800d1ec <xQueueGenericSend+0x174>
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1f2:	b25b      	sxtb	r3, r3
 800d1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f8:	d103      	bne.n	800d202 <xQueueGenericSend+0x18a>
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d202:	f001 ff2b 	bl	800f05c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d206:	1d3a      	adds	r2, r7, #4
 800d208:	f107 0314 	add.w	r3, r7, #20
 800d20c:	4611      	mov	r1, r2
 800d20e:	4618      	mov	r0, r3
 800d210:	f001 f806 	bl	800e220 <xTaskCheckForTimeOut>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d124      	bne.n	800d264 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d21a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d21c:	f000 faa6 	bl	800d76c <prvIsQueueFull>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d018      	beq.n	800d258 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	3310      	adds	r3, #16
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	4611      	mov	r1, r2
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 ff2a 	bl	800e088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d236:	f000 fa31 	bl	800d69c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d23a:	f000 fd5f 	bl	800dcfc <xTaskResumeAll>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	f47f af7c 	bne.w	800d13e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d246:	4b0c      	ldr	r3, [pc, #48]	@ (800d278 <xQueueGenericSend+0x200>)
 800d248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	e772      	b.n	800d13e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d25a:	f000 fa1f 	bl	800d69c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d25e:	f000 fd4d 	bl	800dcfc <xTaskResumeAll>
 800d262:	e76c      	b.n	800d13e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d266:	f000 fa19 	bl	800d69c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d26a:	f000 fd47 	bl	800dcfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d26e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d270:	4618      	mov	r0, r3
 800d272:	3738      	adds	r7, #56	@ 0x38
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	e000ed04 	.word	0xe000ed04

0800d27c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b090      	sub	sp, #64	@ 0x40
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
 800d288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10b      	bne.n	800d2ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d2a6:	bf00      	nop
 800d2a8:	bf00      	nop
 800d2aa:	e7fd      	b.n	800d2a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d103      	bne.n	800d2ba <xQueueGenericSendFromISR+0x3e>
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <xQueueGenericSendFromISR+0x42>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e000      	b.n	800d2c0 <xQueueGenericSendFromISR+0x44>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10b      	bne.n	800d2dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2d6:	bf00      	nop
 800d2d8:	bf00      	nop
 800d2da:	e7fd      	b.n	800d2d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d103      	bne.n	800d2ea <xQueueGenericSendFromISR+0x6e>
 800d2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d101      	bne.n	800d2ee <xQueueGenericSendFromISR+0x72>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e000      	b.n	800d2f0 <xQueueGenericSendFromISR+0x74>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10b      	bne.n	800d30c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	623b      	str	r3, [r7, #32]
}
 800d306:	bf00      	nop
 800d308:	bf00      	nop
 800d30a:	e7fd      	b.n	800d308 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d30c:	f001 ff54 	bl	800f1b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d310:	f3ef 8211 	mrs	r2, BASEPRI
 800d314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d318:	f383 8811 	msr	BASEPRI, r3
 800d31c:	f3bf 8f6f 	isb	sy
 800d320:	f3bf 8f4f 	dsb	sy
 800d324:	61fa      	str	r2, [r7, #28]
 800d326:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d328:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d32a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d334:	429a      	cmp	r2, r3
 800d336:	d302      	bcc.n	800d33e <xQueueGenericSendFromISR+0xc2>
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d12f      	bne.n	800d39e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d344:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d354:	f000 f912 	bl	800d57c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d358:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d360:	d112      	bne.n	800d388 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d366:	2b00      	cmp	r3, #0
 800d368:	d016      	beq.n	800d398 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36c:	3324      	adds	r3, #36	@ 0x24
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 fedc 	bl	800e12c <xTaskRemoveFromEventList>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00e      	beq.n	800d398 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00b      	beq.n	800d398 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	e007      	b.n	800d398 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d388:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d38c:	3301      	adds	r3, #1
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	b25a      	sxtb	r2, r3
 800d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d398:	2301      	movs	r3, #1
 800d39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d39c:	e001      	b.n	800d3a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d3ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3740      	adds	r7, #64	@ 0x40
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08c      	sub	sp, #48	@ 0x30
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10b      	bne.n	800d3ea <xQueueReceive+0x32>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	623b      	str	r3, [r7, #32]
}
 800d3e4:	bf00      	nop
 800d3e6:	bf00      	nop
 800d3e8:	e7fd      	b.n	800d3e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d103      	bne.n	800d3f8 <xQueueReceive+0x40>
 800d3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <xQueueReceive+0x44>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e000      	b.n	800d3fe <xQueueReceive+0x46>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10b      	bne.n	800d41a <xQueueReceive+0x62>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	61fb      	str	r3, [r7, #28]
}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	e7fd      	b.n	800d416 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d41a:	f001 f87f 	bl	800e51c <xTaskGetSchedulerState>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <xQueueReceive+0x72>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <xQueueReceive+0x76>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <xQueueReceive+0x78>
 800d42e:	2300      	movs	r3, #0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10b      	bne.n	800d44c <xQueueReceive+0x94>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	61bb      	str	r3, [r7, #24]
}
 800d446:	bf00      	nop
 800d448:	bf00      	nop
 800d44a:	e7fd      	b.n	800d448 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d44c:	f001 fdd4 	bl	800eff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d454:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d01f      	beq.n	800d49c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d45c:	68b9      	ldr	r1, [r7, #8]
 800d45e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d460:	f000 f8f6 	bl	800d650 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d466:	1e5a      	subs	r2, r3, #1
 800d468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00f      	beq.n	800d494 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d476:	3310      	adds	r3, #16
 800d478:	4618      	mov	r0, r3
 800d47a:	f000 fe57 	bl	800e12c <xTaskRemoveFromEventList>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d007      	beq.n	800d494 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d484:	4b3c      	ldr	r3, [pc, #240]	@ (800d578 <xQueueReceive+0x1c0>)
 800d486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d494:	f001 fde2 	bl	800f05c <vPortExitCritical>
				return pdPASS;
 800d498:	2301      	movs	r3, #1
 800d49a:	e069      	b.n	800d570 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d103      	bne.n	800d4aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4a2:	f001 fddb 	bl	800f05c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e062      	b.n	800d570 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d106      	bne.n	800d4be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4b0:	f107 0310 	add.w	r3, r7, #16
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 fe9d 	bl	800e1f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4be:	f001 fdcd 	bl	800f05c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4c2:	f000 fc0d 	bl	800dce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4c6:	f001 fd97 	bl	800eff8 <vPortEnterCritical>
 800d4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4d0:	b25b      	sxtb	r3, r3
 800d4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d6:	d103      	bne.n	800d4e0 <xQueueReceive+0x128>
 800d4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4e6:	b25b      	sxtb	r3, r3
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ec:	d103      	bne.n	800d4f6 <xQueueReceive+0x13e>
 800d4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4f6:	f001 fdb1 	bl	800f05c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4fa:	1d3a      	adds	r2, r7, #4
 800d4fc:	f107 0310 	add.w	r3, r7, #16
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f000 fe8c 	bl	800e220 <xTaskCheckForTimeOut>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d123      	bne.n	800d556 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d50e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d510:	f000 f916 	bl	800d740 <prvIsQueueEmpty>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d017      	beq.n	800d54a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51c:	3324      	adds	r3, #36	@ 0x24
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f000 fdb0 	bl	800e088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d52a:	f000 f8b7 	bl	800d69c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d52e:	f000 fbe5 	bl	800dcfc <xTaskResumeAll>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d189      	bne.n	800d44c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d538:	4b0f      	ldr	r3, [pc, #60]	@ (800d578 <xQueueReceive+0x1c0>)
 800d53a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	e780      	b.n	800d44c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d54c:	f000 f8a6 	bl	800d69c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d550:	f000 fbd4 	bl	800dcfc <xTaskResumeAll>
 800d554:	e77a      	b.n	800d44c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d558:	f000 f8a0 	bl	800d69c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d55c:	f000 fbce 	bl	800dcfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d562:	f000 f8ed 	bl	800d740 <prvIsQueueEmpty>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f43f af6f 	beq.w	800d44c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d56e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d570:	4618      	mov	r0, r3
 800d572:	3730      	adds	r7, #48	@ 0x30
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	e000ed04 	.word	0xe000ed04

0800d57c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d588:	2300      	movs	r3, #0
 800d58a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d590:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10d      	bne.n	800d5b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d14d      	bne.n	800d63e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 ffd6 	bl	800e558 <xTaskPriorityDisinherit>
 800d5ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	609a      	str	r2, [r3, #8]
 800d5b4:	e043      	b.n	800d63e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d119      	bne.n	800d5f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6858      	ldr	r0, [r3, #4]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	68b9      	ldr	r1, [r7, #8]
 800d5c8:	f004 ffeb 	bl	80125a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5d4:	441a      	add	r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d32b      	bcc.n	800d63e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	605a      	str	r2, [r3, #4]
 800d5ee:	e026      	b.n	800d63e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68d8      	ldr	r0, [r3, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	f004 ffd1 	bl	80125a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	68da      	ldr	r2, [r3, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d608:	425b      	negs	r3, r3
 800d60a:	441a      	add	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	68da      	ldr	r2, [r3, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d207      	bcs.n	800d62c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	689a      	ldr	r2, [r3, #8]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d624:	425b      	negs	r3, r3
 800d626:	441a      	add	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d105      	bne.n	800d63e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	1c5a      	adds	r2, r3, #1
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d646:	697b      	ldr	r3, [r7, #20]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d018      	beq.n	800d694 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68da      	ldr	r2, [r3, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d66a:	441a      	add	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68da      	ldr	r2, [r3, #12]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d303      	bcc.n	800d684 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	68d9      	ldr	r1, [r3, #12]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d68c:	461a      	mov	r2, r3
 800d68e:	6838      	ldr	r0, [r7, #0]
 800d690:	f004 ff87 	bl	80125a2 <memcpy>
	}
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6a4:	f001 fca8 	bl	800eff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6b0:	e011      	b.n	800d6d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d012      	beq.n	800d6e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3324      	adds	r3, #36	@ 0x24
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 fd34 	bl	800e12c <xTaskRemoveFromEventList>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6ca:	f000 fe0d 	bl	800e2e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	dce9      	bgt.n	800d6b2 <prvUnlockQueue+0x16>
 800d6de:	e000      	b.n	800d6e2 <prvUnlockQueue+0x46>
					break;
 800d6e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	22ff      	movs	r2, #255	@ 0xff
 800d6e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d6ea:	f001 fcb7 	bl	800f05c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6ee:	f001 fc83 	bl	800eff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6fa:	e011      	b.n	800d720 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d012      	beq.n	800d72a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	3310      	adds	r3, #16
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 fd0f 	bl	800e12c <xTaskRemoveFromEventList>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d714:	f000 fde8 	bl	800e2e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d718:	7bbb      	ldrb	r3, [r7, #14]
 800d71a:	3b01      	subs	r3, #1
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d724:	2b00      	cmp	r3, #0
 800d726:	dce9      	bgt.n	800d6fc <prvUnlockQueue+0x60>
 800d728:	e000      	b.n	800d72c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d72a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	22ff      	movs	r2, #255	@ 0xff
 800d730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d734:	f001 fc92 	bl	800f05c <vPortExitCritical>
}
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d748:	f001 fc56 	bl	800eff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d750:	2b00      	cmp	r3, #0
 800d752:	d102      	bne.n	800d75a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d754:	2301      	movs	r3, #1
 800d756:	60fb      	str	r3, [r7, #12]
 800d758:	e001      	b.n	800d75e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d75e:	f001 fc7d 	bl	800f05c <vPortExitCritical>

	return xReturn;
 800d762:	68fb      	ldr	r3, [r7, #12]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d774:	f001 fc40 	bl	800eff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d780:	429a      	cmp	r2, r3
 800d782:	d102      	bne.n	800d78a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d784:	2301      	movs	r3, #1
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	e001      	b.n	800d78e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d78e:	f001 fc65 	bl	800f05c <vPortExitCritical>

	return xReturn;
 800d792:	68fb      	ldr	r3, [r7, #12]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60fb      	str	r3, [r7, #12]
 800d7aa:	e014      	b.n	800d7d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d7ac:	4a0f      	ldr	r2, [pc, #60]	@ (800d7ec <vQueueAddToRegistry+0x50>)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10b      	bne.n	800d7d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d7b8:	490c      	ldr	r1, [pc, #48]	@ (800d7ec <vQueueAddToRegistry+0x50>)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d7ec <vQueueAddToRegistry+0x50>)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	4413      	add	r3, r2
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7ce:	e006      	b.n	800d7de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	60fb      	str	r3, [r7, #12]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b07      	cmp	r3, #7
 800d7da:	d9e7      	bls.n	800d7ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7dc:	bf00      	nop
 800d7de:	bf00      	nop
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	24000c64 	.word	0x24000c64

0800d7f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d800:	f001 fbfa 	bl	800eff8 <vPortEnterCritical>
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d80a:	b25b      	sxtb	r3, r3
 800d80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d810:	d103      	bne.n	800d81a <vQueueWaitForMessageRestricted+0x2a>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2200      	movs	r2, #0
 800d816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d820:	b25b      	sxtb	r3, r3
 800d822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d826:	d103      	bne.n	800d830 <vQueueWaitForMessageRestricted+0x40>
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d830:	f001 fc14 	bl	800f05c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d106      	bne.n	800d84a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	3324      	adds	r3, #36	@ 0x24
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	68b9      	ldr	r1, [r7, #8]
 800d844:	4618      	mov	r0, r3
 800d846:	f000 fc45 	bl	800e0d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d84a:	6978      	ldr	r0, [r7, #20]
 800d84c:	f7ff ff26 	bl	800d69c <prvUnlockQueue>
	}
 800d850:	bf00      	nop
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08e      	sub	sp, #56	@ 0x38
 800d85c:	af04      	add	r7, sp, #16
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
 800d864:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10b      	bne.n	800d884 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	623b      	str	r3, [r7, #32]
}
 800d87e:	bf00      	nop
 800d880:	bf00      	nop
 800d882:	e7fd      	b.n	800d880 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10b      	bne.n	800d8a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	61fb      	str	r3, [r7, #28]
}
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	e7fd      	b.n	800d89e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8a2:	235c      	movs	r3, #92	@ 0x5c
 800d8a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d8aa:	d00b      	beq.n	800d8c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	61bb      	str	r3, [r7, #24]
}
 800d8be:	bf00      	nop
 800d8c0:	bf00      	nop
 800d8c2:	e7fd      	b.n	800d8c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01e      	beq.n	800d90a <xTaskCreateStatic+0xb2>
 800d8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d01b      	beq.n	800d90a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8de:	2202      	movs	r2, #2
 800d8e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9303      	str	r3, [sp, #12]
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ea:	9302      	str	r3, [sp, #8]
 800d8ec:	f107 0314 	add.w	r3, r7, #20
 800d8f0:	9301      	str	r3, [sp, #4]
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f4:	9300      	str	r3, [sp, #0]
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	68b9      	ldr	r1, [r7, #8]
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 f850 	bl	800d9a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d902:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d904:	f000 f8de 	bl	800dac4 <prvAddNewTaskToReadyList>
 800d908:	e001      	b.n	800d90e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d90e:	697b      	ldr	r3, [r7, #20]
	}
 800d910:	4618      	mov	r0, r3
 800d912:	3728      	adds	r7, #40	@ 0x28
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08c      	sub	sp, #48	@ 0x30
 800d91c:	af04      	add	r7, sp, #16
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	603b      	str	r3, [r7, #0]
 800d924:	4613      	mov	r3, r2
 800d926:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d928:	88fb      	ldrh	r3, [r7, #6]
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f001 fc85 	bl	800f23c <pvPortMalloc>
 800d932:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00e      	beq.n	800d958 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d93a:	205c      	movs	r0, #92	@ 0x5c
 800d93c:	f001 fc7e 	bl	800f23c <pvPortMalloc>
 800d940:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	697a      	ldr	r2, [r7, #20]
 800d94c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d94e:	e005      	b.n	800d95c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d950:	6978      	ldr	r0, [r7, #20]
 800d952:	f001 fd41 	bl	800f3d8 <vPortFree>
 800d956:	e001      	b.n	800d95c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d958:	2300      	movs	r3, #0
 800d95a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d017      	beq.n	800d992 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d96a:	88fa      	ldrh	r2, [r7, #6]
 800d96c:	2300      	movs	r3, #0
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	68b9      	ldr	r1, [r7, #8]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 f80e 	bl	800d9a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d986:	69f8      	ldr	r0, [r7, #28]
 800d988:	f000 f89c 	bl	800dac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d98c:	2301      	movs	r3, #1
 800d98e:	61bb      	str	r3, [r7, #24]
 800d990:	e002      	b.n	800d998 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d992:	f04f 33ff 	mov.w	r3, #4294967295
 800d996:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d998:	69bb      	ldr	r3, [r7, #24]
	}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3720      	adds	r7, #32
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b088      	sub	sp, #32
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	60b9      	str	r1, [r7, #8]
 800d9ac:	607a      	str	r2, [r7, #4]
 800d9ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	21a5      	movs	r1, #165	@ 0xa5
 800d9bc:	f004 fd61 	bl	8012482 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9c4:	6879      	ldr	r1, [r7, #4]
 800d9c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d9ca:	440b      	add	r3, r1
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	f023 0307 	bic.w	r3, r3, #7
 800d9d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	f003 0307 	and.w	r3, r3, #7
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	617b      	str	r3, [r7, #20]
}
 800d9f6:	bf00      	nop
 800d9f8:	bf00      	nop
 800d9fa:	e7fd      	b.n	800d9f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d01f      	beq.n	800da42 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da02:	2300      	movs	r3, #0
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	e012      	b.n	800da2e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	4413      	add	r3, r2
 800da0e:	7819      	ldrb	r1, [r3, #0]
 800da10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	4413      	add	r3, r2
 800da16:	3334      	adds	r3, #52	@ 0x34
 800da18:	460a      	mov	r2, r1
 800da1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	4413      	add	r3, r2
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d006      	beq.n	800da36 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	3301      	adds	r3, #1
 800da2c:	61fb      	str	r3, [r7, #28]
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	2b0f      	cmp	r3, #15
 800da32:	d9e9      	bls.n	800da08 <prvInitialiseNewTask+0x66>
 800da34:	e000      	b.n	800da38 <prvInitialiseNewTask+0x96>
			{
				break;
 800da36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800da40:	e003      	b.n	800da4a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	2200      	movs	r2, #0
 800da46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4c:	2b37      	cmp	r3, #55	@ 0x37
 800da4e:	d901      	bls.n	800da54 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da50:	2337      	movs	r3, #55	@ 0x37
 800da52:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da58:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da5e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da62:	2200      	movs	r2, #0
 800da64:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	3304      	adds	r3, #4
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7ff f966 	bl	800cd3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da72:	3318      	adds	r3, #24
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff f961 	bl	800cd3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da8e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da92:	2200      	movs	r2, #0
 800da94:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da98:	2200      	movs	r2, #0
 800da9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da9e:	683a      	ldr	r2, [r7, #0]
 800daa0:	68f9      	ldr	r1, [r7, #12]
 800daa2:	69b8      	ldr	r0, [r7, #24]
 800daa4:	f001 f976 	bl	800ed94 <pxPortInitialiseStack>
 800daa8:	4602      	mov	r2, r0
 800daaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800daae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daba:	bf00      	nop
 800dabc:	3720      	adds	r7, #32
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
	...

0800dac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dacc:	f001 fa94 	bl	800eff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dad0:	4b2d      	ldr	r3, [pc, #180]	@ (800db88 <prvAddNewTaskToReadyList+0xc4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3301      	adds	r3, #1
 800dad6:	4a2c      	ldr	r2, [pc, #176]	@ (800db88 <prvAddNewTaskToReadyList+0xc4>)
 800dad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dada:	4b2c      	ldr	r3, [pc, #176]	@ (800db8c <prvAddNewTaskToReadyList+0xc8>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d109      	bne.n	800daf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dae2:	4a2a      	ldr	r2, [pc, #168]	@ (800db8c <prvAddNewTaskToReadyList+0xc8>)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dae8:	4b27      	ldr	r3, [pc, #156]	@ (800db88 <prvAddNewTaskToReadyList+0xc4>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d110      	bne.n	800db12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800daf0:	f000 fc1e 	bl	800e330 <prvInitialiseTaskLists>
 800daf4:	e00d      	b.n	800db12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800daf6:	4b26      	ldr	r3, [pc, #152]	@ (800db90 <prvAddNewTaskToReadyList+0xcc>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d109      	bne.n	800db12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dafe:	4b23      	ldr	r3, [pc, #140]	@ (800db8c <prvAddNewTaskToReadyList+0xc8>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db08:	429a      	cmp	r2, r3
 800db0a:	d802      	bhi.n	800db12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db0c:	4a1f      	ldr	r2, [pc, #124]	@ (800db8c <prvAddNewTaskToReadyList+0xc8>)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db12:	4b20      	ldr	r3, [pc, #128]	@ (800db94 <prvAddNewTaskToReadyList+0xd0>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	3301      	adds	r3, #1
 800db18:	4a1e      	ldr	r2, [pc, #120]	@ (800db94 <prvAddNewTaskToReadyList+0xd0>)
 800db1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db1c:	4b1d      	ldr	r3, [pc, #116]	@ (800db94 <prvAddNewTaskToReadyList+0xd0>)
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db28:	4b1b      	ldr	r3, [pc, #108]	@ (800db98 <prvAddNewTaskToReadyList+0xd4>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d903      	bls.n	800db38 <prvAddNewTaskToReadyList+0x74>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db34:	4a18      	ldr	r2, [pc, #96]	@ (800db98 <prvAddNewTaskToReadyList+0xd4>)
 800db36:	6013      	str	r3, [r2, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db3c:	4613      	mov	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4a15      	ldr	r2, [pc, #84]	@ (800db9c <prvAddNewTaskToReadyList+0xd8>)
 800db46:	441a      	add	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	3304      	adds	r3, #4
 800db4c:	4619      	mov	r1, r3
 800db4e:	4610      	mov	r0, r2
 800db50:	f7ff f901 	bl	800cd56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db54:	f001 fa82 	bl	800f05c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db58:	4b0d      	ldr	r3, [pc, #52]	@ (800db90 <prvAddNewTaskToReadyList+0xcc>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00e      	beq.n	800db7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db60:	4b0a      	ldr	r3, [pc, #40]	@ (800db8c <prvAddNewTaskToReadyList+0xc8>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d207      	bcs.n	800db7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dba0 <prvAddNewTaskToReadyList+0xdc>)
 800db70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db7e:	bf00      	nop
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	24001178 	.word	0x24001178
 800db8c:	24000ca4 	.word	0x24000ca4
 800db90:	24001184 	.word	0x24001184
 800db94:	24001194 	.word	0x24001194
 800db98:	24001180 	.word	0x24001180
 800db9c:	24000ca8 	.word	0x24000ca8
 800dba0:	e000ed04 	.word	0xe000ed04

0800dba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d018      	beq.n	800dbe8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dbb6:	4b14      	ldr	r3, [pc, #80]	@ (800dc08 <vTaskDelay+0x64>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <vTaskDelay+0x32>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	60bb      	str	r3, [r7, #8]
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	e7fd      	b.n	800dbd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dbd6:	f000 f883 	bl	800dce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dbda:	2100      	movs	r1, #0
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fd2b 	bl	800e638 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbe2:	f000 f88b 	bl	800dcfc <xTaskResumeAll>
 800dbe6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d107      	bne.n	800dbfe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dbee:	4b07      	ldr	r3, [pc, #28]	@ (800dc0c <vTaskDelay+0x68>)
 800dbf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	f3bf 8f4f 	dsb	sy
 800dbfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	240011a0 	.word	0x240011a0
 800dc0c:	e000ed04 	.word	0xe000ed04

0800dc10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08a      	sub	sp, #40	@ 0x28
 800dc14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc1e:	463a      	mov	r2, r7
 800dc20:	1d39      	adds	r1, r7, #4
 800dc22:	f107 0308 	add.w	r3, r7, #8
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff f834 	bl	800cc94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc2c:	6839      	ldr	r1, [r7, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	9202      	str	r2, [sp, #8]
 800dc34:	9301      	str	r3, [sp, #4]
 800dc36:	2300      	movs	r3, #0
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	460a      	mov	r2, r1
 800dc3e:	4922      	ldr	r1, [pc, #136]	@ (800dcc8 <vTaskStartScheduler+0xb8>)
 800dc40:	4822      	ldr	r0, [pc, #136]	@ (800dccc <vTaskStartScheduler+0xbc>)
 800dc42:	f7ff fe09 	bl	800d858 <xTaskCreateStatic>
 800dc46:	4603      	mov	r3, r0
 800dc48:	4a21      	ldr	r2, [pc, #132]	@ (800dcd0 <vTaskStartScheduler+0xc0>)
 800dc4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc4c:	4b20      	ldr	r3, [pc, #128]	@ (800dcd0 <vTaskStartScheduler+0xc0>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc54:	2301      	movs	r3, #1
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	e001      	b.n	800dc5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d102      	bne.n	800dc6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc64:	f000 fd3c 	bl	800e6e0 <xTimerCreateTimerTask>
 800dc68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d116      	bne.n	800dc9e <vTaskStartScheduler+0x8e>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	613b      	str	r3, [r7, #16]
}
 800dc82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc84:	4b13      	ldr	r3, [pc, #76]	@ (800dcd4 <vTaskStartScheduler+0xc4>)
 800dc86:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc8c:	4b12      	ldr	r3, [pc, #72]	@ (800dcd8 <vTaskStartScheduler+0xc8>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc92:	4b12      	ldr	r3, [pc, #72]	@ (800dcdc <vTaskStartScheduler+0xcc>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc98:	f001 f90a 	bl	800eeb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc9c:	e00f      	b.n	800dcbe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca4:	d10b      	bne.n	800dcbe <vTaskStartScheduler+0xae>
	__asm volatile
 800dca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	60fb      	str	r3, [r7, #12]
}
 800dcb8:	bf00      	nop
 800dcba:	bf00      	nop
 800dcbc:	e7fd      	b.n	800dcba <vTaskStartScheduler+0xaa>
}
 800dcbe:	bf00      	nop
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0801494c 	.word	0x0801494c
 800dccc:	0800e301 	.word	0x0800e301
 800dcd0:	2400119c 	.word	0x2400119c
 800dcd4:	24001198 	.word	0x24001198
 800dcd8:	24001184 	.word	0x24001184
 800dcdc:	2400117c 	.word	0x2400117c

0800dce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dce0:	b480      	push	{r7}
 800dce2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dce4:	4b04      	ldr	r3, [pc, #16]	@ (800dcf8 <vTaskSuspendAll+0x18>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3301      	adds	r3, #1
 800dcea:	4a03      	ldr	r2, [pc, #12]	@ (800dcf8 <vTaskSuspendAll+0x18>)
 800dcec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dcee:	bf00      	nop
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	240011a0 	.word	0x240011a0

0800dcfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd02:	2300      	movs	r3, #0
 800dd04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd0a:	4b42      	ldr	r3, [pc, #264]	@ (800de14 <xTaskResumeAll+0x118>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10b      	bne.n	800dd2a <xTaskResumeAll+0x2e>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	603b      	str	r3, [r7, #0]
}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	e7fd      	b.n	800dd26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd2a:	f001 f965 	bl	800eff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd2e:	4b39      	ldr	r3, [pc, #228]	@ (800de14 <xTaskResumeAll+0x118>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	3b01      	subs	r3, #1
 800dd34:	4a37      	ldr	r2, [pc, #220]	@ (800de14 <xTaskResumeAll+0x118>)
 800dd36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd38:	4b36      	ldr	r3, [pc, #216]	@ (800de14 <xTaskResumeAll+0x118>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d162      	bne.n	800de06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd40:	4b35      	ldr	r3, [pc, #212]	@ (800de18 <xTaskResumeAll+0x11c>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d05e      	beq.n	800de06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd48:	e02f      	b.n	800ddaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd4a:	4b34      	ldr	r3, [pc, #208]	@ (800de1c <xTaskResumeAll+0x120>)
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3318      	adds	r3, #24
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7ff f85a 	bl	800ce10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff f855 	bl	800ce10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd6a:	4b2d      	ldr	r3, [pc, #180]	@ (800de20 <xTaskResumeAll+0x124>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d903      	bls.n	800dd7a <xTaskResumeAll+0x7e>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd76:	4a2a      	ldr	r2, [pc, #168]	@ (800de20 <xTaskResumeAll+0x124>)
 800dd78:	6013      	str	r3, [r2, #0]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd7e:	4613      	mov	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4413      	add	r3, r2
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4a27      	ldr	r2, [pc, #156]	@ (800de24 <xTaskResumeAll+0x128>)
 800dd88:	441a      	add	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4610      	mov	r0, r2
 800dd92:	f7fe ffe0 	bl	800cd56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd9a:	4b23      	ldr	r3, [pc, #140]	@ (800de28 <xTaskResumeAll+0x12c>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d302      	bcc.n	800ddaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dda4:	4b21      	ldr	r3, [pc, #132]	@ (800de2c <xTaskResumeAll+0x130>)
 800dda6:	2201      	movs	r2, #1
 800dda8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddaa:	4b1c      	ldr	r3, [pc, #112]	@ (800de1c <xTaskResumeAll+0x120>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1cb      	bne.n	800dd4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d001      	beq.n	800ddbc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddb8:	f000 fb90 	bl	800e4dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ddbc:	4b1c      	ldr	r3, [pc, #112]	@ (800de30 <xTaskResumeAll+0x134>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d010      	beq.n	800ddea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ddc8:	f000 f846 	bl	800de58 <xTaskIncrementTick>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d002      	beq.n	800ddd8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ddd2:	4b16      	ldr	r3, [pc, #88]	@ (800de2c <xTaskResumeAll+0x130>)
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1f1      	bne.n	800ddc8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dde4:	4b12      	ldr	r3, [pc, #72]	@ (800de30 <xTaskResumeAll+0x134>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddea:	4b10      	ldr	r3, [pc, #64]	@ (800de2c <xTaskResumeAll+0x130>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d009      	beq.n	800de06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddf6:	4b0f      	ldr	r3, [pc, #60]	@ (800de34 <xTaskResumeAll+0x138>)
 800ddf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de06:	f001 f929 	bl	800f05c <vPortExitCritical>

	return xAlreadyYielded;
 800de0a:	68bb      	ldr	r3, [r7, #8]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	240011a0 	.word	0x240011a0
 800de18:	24001178 	.word	0x24001178
 800de1c:	24001138 	.word	0x24001138
 800de20:	24001180 	.word	0x24001180
 800de24:	24000ca8 	.word	0x24000ca8
 800de28:	24000ca4 	.word	0x24000ca4
 800de2c:	2400118c 	.word	0x2400118c
 800de30:	24001188 	.word	0x24001188
 800de34:	e000ed04 	.word	0xe000ed04

0800de38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de38:	b480      	push	{r7}
 800de3a:	b083      	sub	sp, #12
 800de3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de3e:	4b05      	ldr	r3, [pc, #20]	@ (800de54 <xTaskGetTickCount+0x1c>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de44:	687b      	ldr	r3, [r7, #4]
}
 800de46:	4618      	mov	r0, r3
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	2400117c 	.word	0x2400117c

0800de58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de62:	4b4f      	ldr	r3, [pc, #316]	@ (800dfa0 <xTaskIncrementTick+0x148>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f040 8090 	bne.w	800df8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de6c:	4b4d      	ldr	r3, [pc, #308]	@ (800dfa4 <xTaskIncrementTick+0x14c>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3301      	adds	r3, #1
 800de72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de74:	4a4b      	ldr	r2, [pc, #300]	@ (800dfa4 <xTaskIncrementTick+0x14c>)
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d121      	bne.n	800dec4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800de80:	4b49      	ldr	r3, [pc, #292]	@ (800dfa8 <xTaskIncrementTick+0x150>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00b      	beq.n	800dea2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8e:	f383 8811 	msr	BASEPRI, r3
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	603b      	str	r3, [r7, #0]
}
 800de9c:	bf00      	nop
 800de9e:	bf00      	nop
 800dea0:	e7fd      	b.n	800de9e <xTaskIncrementTick+0x46>
 800dea2:	4b41      	ldr	r3, [pc, #260]	@ (800dfa8 <xTaskIncrementTick+0x150>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	60fb      	str	r3, [r7, #12]
 800dea8:	4b40      	ldr	r3, [pc, #256]	@ (800dfac <xTaskIncrementTick+0x154>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a3e      	ldr	r2, [pc, #248]	@ (800dfa8 <xTaskIncrementTick+0x150>)
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	4a3e      	ldr	r2, [pc, #248]	@ (800dfac <xTaskIncrementTick+0x154>)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	4b3e      	ldr	r3, [pc, #248]	@ (800dfb0 <xTaskIncrementTick+0x158>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3301      	adds	r3, #1
 800debc:	4a3c      	ldr	r2, [pc, #240]	@ (800dfb0 <xTaskIncrementTick+0x158>)
 800debe:	6013      	str	r3, [r2, #0]
 800dec0:	f000 fb0c 	bl	800e4dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dec4:	4b3b      	ldr	r3, [pc, #236]	@ (800dfb4 <xTaskIncrementTick+0x15c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	429a      	cmp	r2, r3
 800decc:	d349      	bcc.n	800df62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dece:	4b36      	ldr	r3, [pc, #216]	@ (800dfa8 <xTaskIncrementTick+0x150>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d104      	bne.n	800dee2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ded8:	4b36      	ldr	r3, [pc, #216]	@ (800dfb4 <xTaskIncrementTick+0x15c>)
 800deda:	f04f 32ff 	mov.w	r2, #4294967295
 800dede:	601a      	str	r2, [r3, #0]
					break;
 800dee0:	e03f      	b.n	800df62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dee2:	4b31      	ldr	r3, [pc, #196]	@ (800dfa8 <xTaskIncrementTick+0x150>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800def2:	693a      	ldr	r2, [r7, #16]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	429a      	cmp	r2, r3
 800def8:	d203      	bcs.n	800df02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800defa:	4a2e      	ldr	r2, [pc, #184]	@ (800dfb4 <xTaskIncrementTick+0x15c>)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df00:	e02f      	b.n	800df62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	3304      	adds	r3, #4
 800df06:	4618      	mov	r0, r3
 800df08:	f7fe ff82 	bl	800ce10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df10:	2b00      	cmp	r3, #0
 800df12:	d004      	beq.n	800df1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	3318      	adds	r3, #24
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fe ff79 	bl	800ce10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df22:	4b25      	ldr	r3, [pc, #148]	@ (800dfb8 <xTaskIncrementTick+0x160>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	429a      	cmp	r2, r3
 800df28:	d903      	bls.n	800df32 <xTaskIncrementTick+0xda>
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df2e:	4a22      	ldr	r2, [pc, #136]	@ (800dfb8 <xTaskIncrementTick+0x160>)
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df36:	4613      	mov	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	4413      	add	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4a1f      	ldr	r2, [pc, #124]	@ (800dfbc <xTaskIncrementTick+0x164>)
 800df40:	441a      	add	r2, r3
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	3304      	adds	r3, #4
 800df46:	4619      	mov	r1, r3
 800df48:	4610      	mov	r0, r2
 800df4a:	f7fe ff04 	bl	800cd56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df52:	4b1b      	ldr	r3, [pc, #108]	@ (800dfc0 <xTaskIncrementTick+0x168>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df58:	429a      	cmp	r2, r3
 800df5a:	d3b8      	bcc.n	800dece <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800df5c:	2301      	movs	r3, #1
 800df5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df60:	e7b5      	b.n	800dece <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df62:	4b17      	ldr	r3, [pc, #92]	@ (800dfc0 <xTaskIncrementTick+0x168>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df68:	4914      	ldr	r1, [pc, #80]	@ (800dfbc <xTaskIncrementTick+0x164>)
 800df6a:	4613      	mov	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	4413      	add	r3, r2
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	440b      	add	r3, r1
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d901      	bls.n	800df7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800df7a:	2301      	movs	r3, #1
 800df7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800df7e:	4b11      	ldr	r3, [pc, #68]	@ (800dfc4 <xTaskIncrementTick+0x16c>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d007      	beq.n	800df96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800df86:	2301      	movs	r3, #1
 800df88:	617b      	str	r3, [r7, #20]
 800df8a:	e004      	b.n	800df96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df8c:	4b0e      	ldr	r3, [pc, #56]	@ (800dfc8 <xTaskIncrementTick+0x170>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3301      	adds	r3, #1
 800df92:	4a0d      	ldr	r2, [pc, #52]	@ (800dfc8 <xTaskIncrementTick+0x170>)
 800df94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800df96:	697b      	ldr	r3, [r7, #20]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	240011a0 	.word	0x240011a0
 800dfa4:	2400117c 	.word	0x2400117c
 800dfa8:	24001130 	.word	0x24001130
 800dfac:	24001134 	.word	0x24001134
 800dfb0:	24001190 	.word	0x24001190
 800dfb4:	24001198 	.word	0x24001198
 800dfb8:	24001180 	.word	0x24001180
 800dfbc:	24000ca8 	.word	0x24000ca8
 800dfc0:	24000ca4 	.word	0x24000ca4
 800dfc4:	2400118c 	.word	0x2400118c
 800dfc8:	24001188 	.word	0x24001188

0800dfcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dfd2:	4b28      	ldr	r3, [pc, #160]	@ (800e074 <vTaskSwitchContext+0xa8>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d003      	beq.n	800dfe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfda:	4b27      	ldr	r3, [pc, #156]	@ (800e078 <vTaskSwitchContext+0xac>)
 800dfdc:	2201      	movs	r2, #1
 800dfde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dfe0:	e042      	b.n	800e068 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dfe2:	4b25      	ldr	r3, [pc, #148]	@ (800e078 <vTaskSwitchContext+0xac>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe8:	4b24      	ldr	r3, [pc, #144]	@ (800e07c <vTaskSwitchContext+0xb0>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e011      	b.n	800e014 <vTaskSwitchContext+0x48>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10b      	bne.n	800e00e <vTaskSwitchContext+0x42>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	607b      	str	r3, [r7, #4]
}
 800e008:	bf00      	nop
 800e00a:	bf00      	nop
 800e00c:	e7fd      	b.n	800e00a <vTaskSwitchContext+0x3e>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3b01      	subs	r3, #1
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	491a      	ldr	r1, [pc, #104]	@ (800e080 <vTaskSwitchContext+0xb4>)
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	440b      	add	r3, r1
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d0e3      	beq.n	800dff0 <vTaskSwitchContext+0x24>
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	4613      	mov	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4a13      	ldr	r2, [pc, #76]	@ (800e080 <vTaskSwitchContext+0xb4>)
 800e034:	4413      	add	r3, r2
 800e036:	60bb      	str	r3, [r7, #8]
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	685a      	ldr	r2, [r3, #4]
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	605a      	str	r2, [r3, #4]
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	3308      	adds	r3, #8
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d104      	bne.n	800e058 <vTaskSwitchContext+0x8c>
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	605a      	str	r2, [r3, #4]
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	4a09      	ldr	r2, [pc, #36]	@ (800e084 <vTaskSwitchContext+0xb8>)
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	4a06      	ldr	r2, [pc, #24]	@ (800e07c <vTaskSwitchContext+0xb0>)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6013      	str	r3, [r2, #0]
}
 800e068:	bf00      	nop
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	240011a0 	.word	0x240011a0
 800e078:	2400118c 	.word	0x2400118c
 800e07c:	24001180 	.word	0x24001180
 800e080:	24000ca8 	.word	0x24000ca8
 800e084:	24000ca4 	.word	0x24000ca4

0800e088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d10b      	bne.n	800e0b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e09c:	f383 8811 	msr	BASEPRI, r3
 800e0a0:	f3bf 8f6f 	isb	sy
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	60fb      	str	r3, [r7, #12]
}
 800e0aa:	bf00      	nop
 800e0ac:	bf00      	nop
 800e0ae:	e7fd      	b.n	800e0ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0b0:	4b07      	ldr	r3, [pc, #28]	@ (800e0d0 <vTaskPlaceOnEventList+0x48>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3318      	adds	r3, #24
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7fe fe70 	bl	800cd9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0be:	2101      	movs	r1, #1
 800e0c0:	6838      	ldr	r0, [r7, #0]
 800e0c2:	f000 fab9 	bl	800e638 <prvAddCurrentTaskToDelayedList>
}
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	24000ca4 	.word	0x24000ca4

0800e0d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10b      	bne.n	800e0fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ea:	f383 8811 	msr	BASEPRI, r3
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	617b      	str	r3, [r7, #20]
}
 800e0f8:	bf00      	nop
 800e0fa:	bf00      	nop
 800e0fc:	e7fd      	b.n	800e0fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e128 <vTaskPlaceOnEventListRestricted+0x54>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3318      	adds	r3, #24
 800e104:	4619      	mov	r1, r3
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f7fe fe25 	bl	800cd56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e112:	f04f 33ff 	mov.w	r3, #4294967295
 800e116:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e118:	6879      	ldr	r1, [r7, #4]
 800e11a:	68b8      	ldr	r0, [r7, #8]
 800e11c:	f000 fa8c 	bl	800e638 <prvAddCurrentTaskToDelayedList>
	}
 800e120:	bf00      	nop
 800e122:	3718      	adds	r7, #24
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	24000ca4 	.word	0x24000ca4

0800e12c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10b      	bne.n	800e15a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	60fb      	str	r3, [r7, #12]
}
 800e154:	bf00      	nop
 800e156:	bf00      	nop
 800e158:	e7fd      	b.n	800e156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	3318      	adds	r3, #24
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fe fe56 	bl	800ce10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e164:	4b1d      	ldr	r3, [pc, #116]	@ (800e1dc <xTaskRemoveFromEventList+0xb0>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d11d      	bne.n	800e1a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	3304      	adds	r3, #4
 800e170:	4618      	mov	r0, r3
 800e172:	f7fe fe4d 	bl	800ce10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e17a:	4b19      	ldr	r3, [pc, #100]	@ (800e1e0 <xTaskRemoveFromEventList+0xb4>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d903      	bls.n	800e18a <xTaskRemoveFromEventList+0x5e>
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e186:	4a16      	ldr	r2, [pc, #88]	@ (800e1e0 <xTaskRemoveFromEventList+0xb4>)
 800e188:	6013      	str	r3, [r2, #0]
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e18e:	4613      	mov	r3, r2
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4a13      	ldr	r2, [pc, #76]	@ (800e1e4 <xTaskRemoveFromEventList+0xb8>)
 800e198:	441a      	add	r2, r3
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	3304      	adds	r3, #4
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	f7fe fdd8 	bl	800cd56 <vListInsertEnd>
 800e1a6:	e005      	b.n	800e1b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	3318      	adds	r3, #24
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	480e      	ldr	r0, [pc, #56]	@ (800e1e8 <xTaskRemoveFromEventList+0xbc>)
 800e1b0:	f7fe fdd1 	bl	800cd56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e1ec <xTaskRemoveFromEventList+0xc0>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d905      	bls.n	800e1ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f0 <xTaskRemoveFromEventList+0xc4>)
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	e001      	b.n	800e1d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e1d2:	697b      	ldr	r3, [r7, #20]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	240011a0 	.word	0x240011a0
 800e1e0:	24001180 	.word	0x24001180
 800e1e4:	24000ca8 	.word	0x24000ca8
 800e1e8:	24001138 	.word	0x24001138
 800e1ec:	24000ca4 	.word	0x24000ca4
 800e1f0:	2400118c 	.word	0x2400118c

0800e1f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1fc:	4b06      	ldr	r3, [pc, #24]	@ (800e218 <vTaskInternalSetTimeOutState+0x24>)
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e204:	4b05      	ldr	r3, [pc, #20]	@ (800e21c <vTaskInternalSetTimeOutState+0x28>)
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	605a      	str	r2, [r3, #4]
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr
 800e218:	24001190 	.word	0x24001190
 800e21c:	2400117c 	.word	0x2400117c

0800e220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b088      	sub	sp, #32
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10b      	bne.n	800e248 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	613b      	str	r3, [r7, #16]
}
 800e242:	bf00      	nop
 800e244:	bf00      	nop
 800e246:	e7fd      	b.n	800e244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d10b      	bne.n	800e266 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e252:	f383 8811 	msr	BASEPRI, r3
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	60fb      	str	r3, [r7, #12]
}
 800e260:	bf00      	nop
 800e262:	bf00      	nop
 800e264:	e7fd      	b.n	800e262 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e266:	f000 fec7 	bl	800eff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e26a:	4b1d      	ldr	r3, [pc, #116]	@ (800e2e0 <xTaskCheckForTimeOut+0xc0>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	69ba      	ldr	r2, [r7, #24]
 800e276:	1ad3      	subs	r3, r2, r3
 800e278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e282:	d102      	bne.n	800e28a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e284:	2300      	movs	r3, #0
 800e286:	61fb      	str	r3, [r7, #28]
 800e288:	e023      	b.n	800e2d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	4b15      	ldr	r3, [pc, #84]	@ (800e2e4 <xTaskCheckForTimeOut+0xc4>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	429a      	cmp	r2, r3
 800e294:	d007      	beq.n	800e2a6 <xTaskCheckForTimeOut+0x86>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	69ba      	ldr	r2, [r7, #24]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d302      	bcc.n	800e2a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	61fb      	str	r3, [r7, #28]
 800e2a4:	e015      	b.n	800e2d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d20b      	bcs.n	800e2c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	1ad2      	subs	r2, r2, r3
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7ff ff99 	bl	800e1f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	61fb      	str	r3, [r7, #28]
 800e2c6:	e004      	b.n	800e2d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e2d2:	f000 fec3 	bl	800f05c <vPortExitCritical>

	return xReturn;
 800e2d6:	69fb      	ldr	r3, [r7, #28]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3720      	adds	r7, #32
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	2400117c 	.word	0x2400117c
 800e2e4:	24001190 	.word	0x24001190

0800e2e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2ec:	4b03      	ldr	r3, [pc, #12]	@ (800e2fc <vTaskMissedYield+0x14>)
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]
}
 800e2f2:	bf00      	nop
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	2400118c 	.word	0x2400118c

0800e300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e308:	f000 f852 	bl	800e3b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e30c:	4b06      	ldr	r3, [pc, #24]	@ (800e328 <prvIdleTask+0x28>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d9f9      	bls.n	800e308 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e314:	4b05      	ldr	r3, [pc, #20]	@ (800e32c <prvIdleTask+0x2c>)
 800e316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e31a:	601a      	str	r2, [r3, #0]
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e324:	e7f0      	b.n	800e308 <prvIdleTask+0x8>
 800e326:	bf00      	nop
 800e328:	24000ca8 	.word	0x24000ca8
 800e32c:	e000ed04 	.word	0xe000ed04

0800e330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e336:	2300      	movs	r3, #0
 800e338:	607b      	str	r3, [r7, #4]
 800e33a:	e00c      	b.n	800e356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	4613      	mov	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4a12      	ldr	r2, [pc, #72]	@ (800e390 <prvInitialiseTaskLists+0x60>)
 800e348:	4413      	add	r3, r2
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fcd6 	bl	800ccfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3301      	adds	r3, #1
 800e354:	607b      	str	r3, [r7, #4]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b37      	cmp	r3, #55	@ 0x37
 800e35a:	d9ef      	bls.n	800e33c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e35c:	480d      	ldr	r0, [pc, #52]	@ (800e394 <prvInitialiseTaskLists+0x64>)
 800e35e:	f7fe fccd 	bl	800ccfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e362:	480d      	ldr	r0, [pc, #52]	@ (800e398 <prvInitialiseTaskLists+0x68>)
 800e364:	f7fe fcca 	bl	800ccfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e368:	480c      	ldr	r0, [pc, #48]	@ (800e39c <prvInitialiseTaskLists+0x6c>)
 800e36a:	f7fe fcc7 	bl	800ccfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e36e:	480c      	ldr	r0, [pc, #48]	@ (800e3a0 <prvInitialiseTaskLists+0x70>)
 800e370:	f7fe fcc4 	bl	800ccfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e374:	480b      	ldr	r0, [pc, #44]	@ (800e3a4 <prvInitialiseTaskLists+0x74>)
 800e376:	f7fe fcc1 	bl	800ccfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e37a:	4b0b      	ldr	r3, [pc, #44]	@ (800e3a8 <prvInitialiseTaskLists+0x78>)
 800e37c:	4a05      	ldr	r2, [pc, #20]	@ (800e394 <prvInitialiseTaskLists+0x64>)
 800e37e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e380:	4b0a      	ldr	r3, [pc, #40]	@ (800e3ac <prvInitialiseTaskLists+0x7c>)
 800e382:	4a05      	ldr	r2, [pc, #20]	@ (800e398 <prvInitialiseTaskLists+0x68>)
 800e384:	601a      	str	r2, [r3, #0]
}
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	24000ca8 	.word	0x24000ca8
 800e394:	24001108 	.word	0x24001108
 800e398:	2400111c 	.word	0x2400111c
 800e39c:	24001138 	.word	0x24001138
 800e3a0:	2400114c 	.word	0x2400114c
 800e3a4:	24001164 	.word	0x24001164
 800e3a8:	24001130 	.word	0x24001130
 800e3ac:	24001134 	.word	0x24001134

0800e3b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3b6:	e019      	b.n	800e3ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3b8:	f000 fe1e 	bl	800eff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3bc:	4b10      	ldr	r3, [pc, #64]	@ (800e400 <prvCheckTasksWaitingTermination+0x50>)
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	3304      	adds	r3, #4
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fe fd21 	bl	800ce10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e404 <prvCheckTasksWaitingTermination+0x54>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	4a0b      	ldr	r2, [pc, #44]	@ (800e404 <prvCheckTasksWaitingTermination+0x54>)
 800e3d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e408 <prvCheckTasksWaitingTermination+0x58>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	3b01      	subs	r3, #1
 800e3de:	4a0a      	ldr	r2, [pc, #40]	@ (800e408 <prvCheckTasksWaitingTermination+0x58>)
 800e3e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3e2:	f000 fe3b 	bl	800f05c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 f848 	bl	800e47c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3ec:	4b06      	ldr	r3, [pc, #24]	@ (800e408 <prvCheckTasksWaitingTermination+0x58>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d1e1      	bne.n	800e3b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	2400114c 	.word	0x2400114c
 800e404:	24001178 	.word	0x24001178
 800e408:	24001160 	.word	0x24001160

0800e40c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e414:	2300      	movs	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e418:	e005      	b.n	800e426 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	3301      	adds	r3, #1
 800e41e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	3301      	adds	r3, #1
 800e424:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	2ba5      	cmp	r3, #165	@ 0xa5
 800e42c:	d0f5      	beq.n	800e41a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	089b      	lsrs	r3, r3, #2
 800e432:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	b29b      	uxth	r3, r3
	}
 800e438:	4618      	mov	r0, r3
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d102      	bne.n	800e458 <uxTaskGetStackHighWaterMark+0x14>
 800e452:	4b09      	ldr	r3, [pc, #36]	@ (800e478 <uxTaskGetStackHighWaterMark+0x34>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	e000      	b.n	800e45a <uxTaskGetStackHighWaterMark+0x16>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e460:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800e462:	6938      	ldr	r0, [r7, #16]
 800e464:	f7ff ffd2 	bl	800e40c <prvTaskCheckFreeStackSpace>
 800e468:	4603      	mov	r3, r0
 800e46a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800e46c:	68fb      	ldr	r3, [r7, #12]
	}
 800e46e:	4618      	mov	r0, r3
 800e470:	3718      	adds	r7, #24
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	24000ca4 	.word	0x24000ca4

0800e47c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d108      	bne.n	800e4a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e492:	4618      	mov	r0, r3
 800e494:	f000 ffa0 	bl	800f3d8 <vPortFree>
				vPortFree( pxTCB );
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 ff9d 	bl	800f3d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e49e:	e019      	b.n	800e4d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d103      	bne.n	800e4b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 ff94 	bl	800f3d8 <vPortFree>
	}
 800e4b0:	e010      	b.n	800e4d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e4b8:	2b02      	cmp	r3, #2
 800e4ba:	d00b      	beq.n	800e4d4 <prvDeleteTCB+0x58>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	60fb      	str	r3, [r7, #12]
}
 800e4ce:	bf00      	nop
 800e4d0:	bf00      	nop
 800e4d2:	e7fd      	b.n	800e4d0 <prvDeleteTCB+0x54>
	}
 800e4d4:	bf00      	nop
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e514 <prvResetNextTaskUnblockTime+0x38>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d104      	bne.n	800e4f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e518 <prvResetNextTaskUnblockTime+0x3c>)
 800e4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4f4:	e008      	b.n	800e508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4f6:	4b07      	ldr	r3, [pc, #28]	@ (800e514 <prvResetNextTaskUnblockTime+0x38>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	4a04      	ldr	r2, [pc, #16]	@ (800e518 <prvResetNextTaskUnblockTime+0x3c>)
 800e506:	6013      	str	r3, [r2, #0]
}
 800e508:	bf00      	nop
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	24001130 	.word	0x24001130
 800e518:	24001198 	.word	0x24001198

0800e51c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e522:	4b0b      	ldr	r3, [pc, #44]	@ (800e550 <xTaskGetSchedulerState+0x34>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e52a:	2301      	movs	r3, #1
 800e52c:	607b      	str	r3, [r7, #4]
 800e52e:	e008      	b.n	800e542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e530:	4b08      	ldr	r3, [pc, #32]	@ (800e554 <xTaskGetSchedulerState+0x38>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d102      	bne.n	800e53e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e538:	2302      	movs	r3, #2
 800e53a:	607b      	str	r3, [r7, #4]
 800e53c:	e001      	b.n	800e542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e53e:	2300      	movs	r3, #0
 800e540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e542:	687b      	ldr	r3, [r7, #4]
	}
 800e544:	4618      	mov	r0, r3
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr
 800e550:	24001184 	.word	0x24001184
 800e554:	240011a0 	.word	0x240011a0

0800e558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d058      	beq.n	800e620 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e56e:	4b2f      	ldr	r3, [pc, #188]	@ (800e62c <xTaskPriorityDisinherit+0xd4>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	693a      	ldr	r2, [r7, #16]
 800e574:	429a      	cmp	r2, r3
 800e576:	d00b      	beq.n	800e590 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	60fb      	str	r3, [r7, #12]
}
 800e58a:	bf00      	nop
 800e58c:	bf00      	nop
 800e58e:	e7fd      	b.n	800e58c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10b      	bne.n	800e5b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	60bb      	str	r3, [r7, #8]
}
 800e5aa:	bf00      	nop
 800e5ac:	bf00      	nop
 800e5ae:	e7fd      	b.n	800e5ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5b4:	1e5a      	subs	r2, r3, #1
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d02c      	beq.n	800e620 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d128      	bne.n	800e620 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe fc1c 	bl	800ce10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e630 <xTaskPriorityDisinherit+0xd8>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d903      	bls.n	800e600 <xTaskPriorityDisinherit+0xa8>
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5fc:	4a0c      	ldr	r2, [pc, #48]	@ (800e630 <xTaskPriorityDisinherit+0xd8>)
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e604:	4613      	mov	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4a09      	ldr	r2, [pc, #36]	@ (800e634 <xTaskPriorityDisinherit+0xdc>)
 800e60e:	441a      	add	r2, r3
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	3304      	adds	r3, #4
 800e614:	4619      	mov	r1, r3
 800e616:	4610      	mov	r0, r2
 800e618:	f7fe fb9d 	bl	800cd56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e61c:	2301      	movs	r3, #1
 800e61e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e620:	697b      	ldr	r3, [r7, #20]
	}
 800e622:	4618      	mov	r0, r3
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	24000ca4 	.word	0x24000ca4
 800e630:	24001180 	.word	0x24001180
 800e634:	24000ca8 	.word	0x24000ca8

0800e638 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e642:	4b21      	ldr	r3, [pc, #132]	@ (800e6c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e648:	4b20      	ldr	r3, [pc, #128]	@ (800e6cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	3304      	adds	r3, #4
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fe fbde 	bl	800ce10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e65a:	d10a      	bne.n	800e672 <prvAddCurrentTaskToDelayedList+0x3a>
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d007      	beq.n	800e672 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e662:	4b1a      	ldr	r3, [pc, #104]	@ (800e6cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3304      	adds	r3, #4
 800e668:	4619      	mov	r1, r3
 800e66a:	4819      	ldr	r0, [pc, #100]	@ (800e6d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e66c:	f7fe fb73 	bl	800cd56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e670:	e026      	b.n	800e6c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4413      	add	r3, r2
 800e678:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e67a:	4b14      	ldr	r3, [pc, #80]	@ (800e6cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	68ba      	ldr	r2, [r7, #8]
 800e680:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	429a      	cmp	r2, r3
 800e688:	d209      	bcs.n	800e69e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e68a:	4b12      	ldr	r3, [pc, #72]	@ (800e6d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	4b0f      	ldr	r3, [pc, #60]	@ (800e6cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3304      	adds	r3, #4
 800e694:	4619      	mov	r1, r3
 800e696:	4610      	mov	r0, r2
 800e698:	f7fe fb81 	bl	800cd9e <vListInsert>
}
 800e69c:	e010      	b.n	800e6c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e69e:	4b0e      	ldr	r3, [pc, #56]	@ (800e6d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6cc <prvAddCurrentTaskToDelayedList+0x94>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	4610      	mov	r0, r2
 800e6ac:	f7fe fb77 	bl	800cd9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	68ba      	ldr	r2, [r7, #8]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d202      	bcs.n	800e6c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e6ba:	4a08      	ldr	r2, [pc, #32]	@ (800e6dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	6013      	str	r3, [r2, #0]
}
 800e6c0:	bf00      	nop
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	2400117c 	.word	0x2400117c
 800e6cc:	24000ca4 	.word	0x24000ca4
 800e6d0:	24001164 	.word	0x24001164
 800e6d4:	24001134 	.word	0x24001134
 800e6d8:	24001130 	.word	0x24001130
 800e6dc:	24001198 	.word	0x24001198

0800e6e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b08a      	sub	sp, #40	@ 0x28
 800e6e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e6ea:	f000 fb13 	bl	800ed14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e6ee:	4b1d      	ldr	r3, [pc, #116]	@ (800e764 <xTimerCreateTimerTask+0x84>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d021      	beq.n	800e73a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e6fe:	1d3a      	adds	r2, r7, #4
 800e700:	f107 0108 	add.w	r1, r7, #8
 800e704:	f107 030c 	add.w	r3, r7, #12
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fe fadd 	bl	800ccc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e70e:	6879      	ldr	r1, [r7, #4]
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	9202      	str	r2, [sp, #8]
 800e716:	9301      	str	r3, [sp, #4]
 800e718:	2302      	movs	r3, #2
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	2300      	movs	r3, #0
 800e71e:	460a      	mov	r2, r1
 800e720:	4911      	ldr	r1, [pc, #68]	@ (800e768 <xTimerCreateTimerTask+0x88>)
 800e722:	4812      	ldr	r0, [pc, #72]	@ (800e76c <xTimerCreateTimerTask+0x8c>)
 800e724:	f7ff f898 	bl	800d858 <xTaskCreateStatic>
 800e728:	4603      	mov	r3, r0
 800e72a:	4a11      	ldr	r2, [pc, #68]	@ (800e770 <xTimerCreateTimerTask+0x90>)
 800e72c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e72e:	4b10      	ldr	r3, [pc, #64]	@ (800e770 <xTimerCreateTimerTask+0x90>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e736:	2301      	movs	r3, #1
 800e738:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10b      	bne.n	800e758 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	613b      	str	r3, [r7, #16]
}
 800e752:	bf00      	nop
 800e754:	bf00      	nop
 800e756:	e7fd      	b.n	800e754 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e758:	697b      	ldr	r3, [r7, #20]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3718      	adds	r7, #24
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	240011d4 	.word	0x240011d4
 800e768:	08014954 	.word	0x08014954
 800e76c:	0800e8ad 	.word	0x0800e8ad
 800e770:	240011d8 	.word	0x240011d8

0800e774 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b08a      	sub	sp, #40	@ 0x28
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e782:	2300      	movs	r3, #0
 800e784:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10b      	bne.n	800e7a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800e78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	623b      	str	r3, [r7, #32]
}
 800e79e:	bf00      	nop
 800e7a0:	bf00      	nop
 800e7a2:	e7fd      	b.n	800e7a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e7a4:	4b19      	ldr	r3, [pc, #100]	@ (800e80c <xTimerGenericCommand+0x98>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d02a      	beq.n	800e802 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2b05      	cmp	r3, #5
 800e7bc:	dc18      	bgt.n	800e7f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e7be:	f7ff fead 	bl	800e51c <xTaskGetSchedulerState>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d109      	bne.n	800e7dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e7c8:	4b10      	ldr	r3, [pc, #64]	@ (800e80c <xTimerGenericCommand+0x98>)
 800e7ca:	6818      	ldr	r0, [r3, #0]
 800e7cc:	f107 0110 	add.w	r1, r7, #16
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7d4:	f7fe fc50 	bl	800d078 <xQueueGenericSend>
 800e7d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e7da:	e012      	b.n	800e802 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e7dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e80c <xTimerGenericCommand+0x98>)
 800e7de:	6818      	ldr	r0, [r3, #0]
 800e7e0:	f107 0110 	add.w	r1, r7, #16
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f7fe fc46 	bl	800d078 <xQueueGenericSend>
 800e7ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800e7ee:	e008      	b.n	800e802 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e7f0:	4b06      	ldr	r3, [pc, #24]	@ (800e80c <xTimerGenericCommand+0x98>)
 800e7f2:	6818      	ldr	r0, [r3, #0]
 800e7f4:	f107 0110 	add.w	r1, r7, #16
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	f7fe fd3e 	bl	800d27c <xQueueGenericSendFromISR>
 800e800:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e804:	4618      	mov	r0, r3
 800e806:	3728      	adds	r7, #40	@ 0x28
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	240011d4 	.word	0x240011d4

0800e810 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b088      	sub	sp, #32
 800e814:	af02      	add	r7, sp, #8
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e81a:	4b23      	ldr	r3, [pc, #140]	@ (800e8a8 <prvProcessExpiredTimer+0x98>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	3304      	adds	r3, #4
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fe faf1 	bl	800ce10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e834:	f003 0304 	and.w	r3, r3, #4
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d023      	beq.n	800e884 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	699a      	ldr	r2, [r3, #24]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	18d1      	adds	r1, r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	6978      	ldr	r0, [r7, #20]
 800e84a:	f000 f8d5 	bl	800e9f8 <prvInsertTimerInActiveList>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d020      	beq.n	800e896 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e854:	2300      	movs	r3, #0
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	2300      	movs	r3, #0
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	2100      	movs	r1, #0
 800e85e:	6978      	ldr	r0, [r7, #20]
 800e860:	f7ff ff88 	bl	800e774 <xTimerGenericCommand>
 800e864:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d114      	bne.n	800e896 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	60fb      	str	r3, [r7, #12]
}
 800e87e:	bf00      	nop
 800e880:	bf00      	nop
 800e882:	e7fd      	b.n	800e880 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e88a:	f023 0301 	bic.w	r3, r3, #1
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	6978      	ldr	r0, [r7, #20]
 800e89c:	4798      	blx	r3
}
 800e89e:	bf00      	nop
 800e8a0:	3718      	adds	r7, #24
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	240011cc 	.word	0x240011cc

0800e8ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e8b4:	f107 0308 	add.w	r3, r7, #8
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f000 f859 	bl	800e970 <prvGetNextExpireTime>
 800e8be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f000 f805 	bl	800e8d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e8ca:	f000 f8d7 	bl	800ea7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e8ce:	bf00      	nop
 800e8d0:	e7f0      	b.n	800e8b4 <prvTimerTask+0x8>
	...

0800e8d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e8de:	f7ff f9ff 	bl	800dce0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8e2:	f107 0308 	add.w	r3, r7, #8
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f000 f866 	bl	800e9b8 <prvSampleTimeNow>
 800e8ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d130      	bne.n	800e956 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d10a      	bne.n	800e910 <prvProcessTimerOrBlockTask+0x3c>
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d806      	bhi.n	800e910 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e902:	f7ff f9fb 	bl	800dcfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e906:	68f9      	ldr	r1, [r7, #12]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff ff81 	bl	800e810 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e90e:	e024      	b.n	800e95a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d008      	beq.n	800e928 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e916:	4b13      	ldr	r3, [pc, #76]	@ (800e964 <prvProcessTimerOrBlockTask+0x90>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d101      	bne.n	800e924 <prvProcessTimerOrBlockTask+0x50>
 800e920:	2301      	movs	r3, #1
 800e922:	e000      	b.n	800e926 <prvProcessTimerOrBlockTask+0x52>
 800e924:	2300      	movs	r3, #0
 800e926:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e928:	4b0f      	ldr	r3, [pc, #60]	@ (800e968 <prvProcessTimerOrBlockTask+0x94>)
 800e92a:	6818      	ldr	r0, [r3, #0]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	4619      	mov	r1, r3
 800e936:	f7fe ff5b 	bl	800d7f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e93a:	f7ff f9df 	bl	800dcfc <xTaskResumeAll>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10a      	bne.n	800e95a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e944:	4b09      	ldr	r3, [pc, #36]	@ (800e96c <prvProcessTimerOrBlockTask+0x98>)
 800e946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	f3bf 8f6f 	isb	sy
}
 800e954:	e001      	b.n	800e95a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e956:	f7ff f9d1 	bl	800dcfc <xTaskResumeAll>
}
 800e95a:	bf00      	nop
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	240011d0 	.word	0x240011d0
 800e968:	240011d4 	.word	0x240011d4
 800e96c:	e000ed04 	.word	0xe000ed04

0800e970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e978:	4b0e      	ldr	r3, [pc, #56]	@ (800e9b4 <prvGetNextExpireTime+0x44>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <prvGetNextExpireTime+0x16>
 800e982:	2201      	movs	r2, #1
 800e984:	e000      	b.n	800e988 <prvGetNextExpireTime+0x18>
 800e986:	2200      	movs	r2, #0
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d105      	bne.n	800e9a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e994:	4b07      	ldr	r3, [pc, #28]	@ (800e9b4 <prvGetNextExpireTime+0x44>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	e001      	b.n	800e9a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	240011cc 	.word	0x240011cc

0800e9b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e9c0:	f7ff fa3a 	bl	800de38 <xTaskGetTickCount>
 800e9c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f4 <prvSampleTimeNow+0x3c>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d205      	bcs.n	800e9dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e9d0:	f000 f93a 	bl	800ec48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	601a      	str	r2, [r3, #0]
 800e9da:	e002      	b.n	800e9e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e9e2:	4a04      	ldr	r2, [pc, #16]	@ (800e9f4 <prvSampleTimeNow+0x3c>)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	240011dc 	.word	0x240011dc

0800e9f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
 800ea04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea06:	2300      	movs	r3, #0
 800ea08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d812      	bhi.n	800ea44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	1ad2      	subs	r2, r2, r3
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d302      	bcc.n	800ea32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	617b      	str	r3, [r7, #20]
 800ea30:	e01b      	b.n	800ea6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ea32:	4b10      	ldr	r3, [pc, #64]	@ (800ea74 <prvInsertTimerInActiveList+0x7c>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	3304      	adds	r3, #4
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	f7fe f9ae 	bl	800cd9e <vListInsert>
 800ea42:	e012      	b.n	800ea6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d206      	bcs.n	800ea5a <prvInsertTimerInActiveList+0x62>
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d302      	bcc.n	800ea5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ea54:	2301      	movs	r3, #1
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	e007      	b.n	800ea6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea5a:	4b07      	ldr	r3, [pc, #28]	@ (800ea78 <prvInsertTimerInActiveList+0x80>)
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3304      	adds	r3, #4
 800ea62:	4619      	mov	r1, r3
 800ea64:	4610      	mov	r0, r2
 800ea66:	f7fe f99a 	bl	800cd9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ea6a:	697b      	ldr	r3, [r7, #20]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3718      	adds	r7, #24
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	240011d0 	.word	0x240011d0
 800ea78:	240011cc 	.word	0x240011cc

0800ea7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b08e      	sub	sp, #56	@ 0x38
 800ea80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea82:	e0ce      	b.n	800ec22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	da19      	bge.n	800eabe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ea8a:	1d3b      	adds	r3, r7, #4
 800ea8c:	3304      	adds	r3, #4
 800ea8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10b      	bne.n	800eaae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ea96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea9a:	f383 8811 	msr	BASEPRI, r3
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f3bf 8f4f 	dsb	sy
 800eaa6:	61fb      	str	r3, [r7, #28]
}
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	e7fd      	b.n	800eaaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eab4:	6850      	ldr	r0, [r2, #4]
 800eab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eab8:	6892      	ldr	r2, [r2, #8]
 800eaba:	4611      	mov	r1, r2
 800eabc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f2c0 80ae 	blt.w	800ec22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eaca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eacc:	695b      	ldr	r3, [r3, #20]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d004      	beq.n	800eadc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ead2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead4:	3304      	adds	r3, #4
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fe f99a 	bl	800ce10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eadc:	463b      	mov	r3, r7
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff ff6a 	bl	800e9b8 <prvSampleTimeNow>
 800eae4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b09      	cmp	r3, #9
 800eaea:	f200 8097 	bhi.w	800ec1c <prvProcessReceivedCommands+0x1a0>
 800eaee:	a201      	add	r2, pc, #4	@ (adr r2, 800eaf4 <prvProcessReceivedCommands+0x78>)
 800eaf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf4:	0800eb1d 	.word	0x0800eb1d
 800eaf8:	0800eb1d 	.word	0x0800eb1d
 800eafc:	0800eb1d 	.word	0x0800eb1d
 800eb00:	0800eb93 	.word	0x0800eb93
 800eb04:	0800eba7 	.word	0x0800eba7
 800eb08:	0800ebf3 	.word	0x0800ebf3
 800eb0c:	0800eb1d 	.word	0x0800eb1d
 800eb10:	0800eb1d 	.word	0x0800eb1d
 800eb14:	0800eb93 	.word	0x0800eb93
 800eb18:	0800eba7 	.word	0x0800eba7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb22:	f043 0301 	orr.w	r3, r3, #1
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb32:	699b      	ldr	r3, [r3, #24]
 800eb34:	18d1      	adds	r1, r2, r3
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb3c:	f7ff ff5c 	bl	800e9f8 <prvInsertTimerInActiveList>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d06c      	beq.n	800ec20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb54:	f003 0304 	and.w	r3, r3, #4
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d061      	beq.n	800ec20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb60:	699b      	ldr	r3, [r3, #24]
 800eb62:	441a      	add	r2, r3
 800eb64:	2300      	movs	r3, #0
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	2300      	movs	r3, #0
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb6e:	f7ff fe01 	bl	800e774 <xTimerGenericCommand>
 800eb72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eb74:	6a3b      	ldr	r3, [r7, #32]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d152      	bne.n	800ec20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	61bb      	str	r3, [r7, #24]
}
 800eb8c:	bf00      	nop
 800eb8e:	bf00      	nop
 800eb90:	e7fd      	b.n	800eb8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb98:	f023 0301 	bic.w	r3, r3, #1
 800eb9c:	b2da      	uxtb	r2, r3
 800eb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eba4:	e03d      	b.n	800ec22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebac:	f043 0301 	orr.w	r3, r3, #1
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ebbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc0:	699b      	ldr	r3, [r3, #24]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10b      	bne.n	800ebde <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	617b      	str	r3, [r7, #20]
}
 800ebd8:	bf00      	nop
 800ebda:	bf00      	nop
 800ebdc:	e7fd      	b.n	800ebda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ebde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe0:	699a      	ldr	r2, [r3, #24]
 800ebe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe4:	18d1      	adds	r1, r2, r3
 800ebe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebec:	f7ff ff04 	bl	800e9f8 <prvInsertTimerInActiveList>
					break;
 800ebf0:	e017      	b.n	800ec22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ebf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebf8:	f003 0302 	and.w	r3, r3, #2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d103      	bne.n	800ec08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ec00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec02:	f000 fbe9 	bl	800f3d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ec06:	e00c      	b.n	800ec22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec0e:	f023 0301 	bic.w	r3, r3, #1
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec1a:	e002      	b.n	800ec22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ec1c:	bf00      	nop
 800ec1e:	e000      	b.n	800ec22 <prvProcessReceivedCommands+0x1a6>
					break;
 800ec20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec22:	4b08      	ldr	r3, [pc, #32]	@ (800ec44 <prvProcessReceivedCommands+0x1c8>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	1d39      	adds	r1, r7, #4
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fe fbc4 	bl	800d3b8 <xQueueReceive>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f47f af26 	bne.w	800ea84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ec38:	bf00      	nop
 800ec3a:	bf00      	nop
 800ec3c:	3730      	adds	r7, #48	@ 0x30
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	240011d4 	.word	0x240011d4

0800ec48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b088      	sub	sp, #32
 800ec4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec4e:	e049      	b.n	800ece4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec50:	4b2e      	ldr	r3, [pc, #184]	@ (800ed0c <prvSwitchTimerLists+0xc4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec5a:	4b2c      	ldr	r3, [pc, #176]	@ (800ed0c <prvSwitchTimerLists+0xc4>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	3304      	adds	r3, #4
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7fe f8d1 	bl	800ce10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6a1b      	ldr	r3, [r3, #32]
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec7c:	f003 0304 	and.w	r3, r3, #4
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d02f      	beq.n	800ece4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	699b      	ldr	r3, [r3, #24]
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d90e      	bls.n	800ecb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eca2:	4b1a      	ldr	r3, [pc, #104]	@ (800ed0c <prvSwitchTimerLists+0xc4>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3304      	adds	r3, #4
 800ecaa:	4619      	mov	r1, r3
 800ecac:	4610      	mov	r0, r2
 800ecae:	f7fe f876 	bl	800cd9e <vListInsert>
 800ecb2:	e017      	b.n	800ece4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	2300      	movs	r3, #0
 800ecba:	693a      	ldr	r2, [r7, #16]
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f7ff fd58 	bl	800e774 <xTimerGenericCommand>
 800ecc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10b      	bne.n	800ece4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800eccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	603b      	str	r3, [r7, #0]
}
 800ecde:	bf00      	nop
 800ece0:	bf00      	nop
 800ece2:	e7fd      	b.n	800ece0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ece4:	4b09      	ldr	r3, [pc, #36]	@ (800ed0c <prvSwitchTimerLists+0xc4>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1b0      	bne.n	800ec50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ecee:	4b07      	ldr	r3, [pc, #28]	@ (800ed0c <prvSwitchTimerLists+0xc4>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ecf4:	4b06      	ldr	r3, [pc, #24]	@ (800ed10 <prvSwitchTimerLists+0xc8>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4a04      	ldr	r2, [pc, #16]	@ (800ed0c <prvSwitchTimerLists+0xc4>)
 800ecfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ecfc:	4a04      	ldr	r2, [pc, #16]	@ (800ed10 <prvSwitchTimerLists+0xc8>)
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	6013      	str	r3, [r2, #0]
}
 800ed02:	bf00      	nop
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	240011cc 	.word	0x240011cc
 800ed10:	240011d0 	.word	0x240011d0

0800ed14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ed1a:	f000 f96d 	bl	800eff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ed1e:	4b15      	ldr	r3, [pc, #84]	@ (800ed74 <prvCheckForValidListAndQueue+0x60>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d120      	bne.n	800ed68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed26:	4814      	ldr	r0, [pc, #80]	@ (800ed78 <prvCheckForValidListAndQueue+0x64>)
 800ed28:	f7fd ffe8 	bl	800ccfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed2c:	4813      	ldr	r0, [pc, #76]	@ (800ed7c <prvCheckForValidListAndQueue+0x68>)
 800ed2e:	f7fd ffe5 	bl	800ccfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed32:	4b13      	ldr	r3, [pc, #76]	@ (800ed80 <prvCheckForValidListAndQueue+0x6c>)
 800ed34:	4a10      	ldr	r2, [pc, #64]	@ (800ed78 <prvCheckForValidListAndQueue+0x64>)
 800ed36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ed38:	4b12      	ldr	r3, [pc, #72]	@ (800ed84 <prvCheckForValidListAndQueue+0x70>)
 800ed3a:	4a10      	ldr	r2, [pc, #64]	@ (800ed7c <prvCheckForValidListAndQueue+0x68>)
 800ed3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ed3e:	2300      	movs	r3, #0
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	4b11      	ldr	r3, [pc, #68]	@ (800ed88 <prvCheckForValidListAndQueue+0x74>)
 800ed44:	4a11      	ldr	r2, [pc, #68]	@ (800ed8c <prvCheckForValidListAndQueue+0x78>)
 800ed46:	2110      	movs	r1, #16
 800ed48:	200a      	movs	r0, #10
 800ed4a:	f7fe f8f5 	bl	800cf38 <xQueueGenericCreateStatic>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	4a08      	ldr	r2, [pc, #32]	@ (800ed74 <prvCheckForValidListAndQueue+0x60>)
 800ed52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ed54:	4b07      	ldr	r3, [pc, #28]	@ (800ed74 <prvCheckForValidListAndQueue+0x60>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d005      	beq.n	800ed68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed5c:	4b05      	ldr	r3, [pc, #20]	@ (800ed74 <prvCheckForValidListAndQueue+0x60>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	490b      	ldr	r1, [pc, #44]	@ (800ed90 <prvCheckForValidListAndQueue+0x7c>)
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fe fd1a 	bl	800d79c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed68:	f000 f978 	bl	800f05c <vPortExitCritical>
}
 800ed6c:	bf00      	nop
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	240011d4 	.word	0x240011d4
 800ed78:	240011a4 	.word	0x240011a4
 800ed7c:	240011b8 	.word	0x240011b8
 800ed80:	240011cc 	.word	0x240011cc
 800ed84:	240011d0 	.word	0x240011d0
 800ed88:	24001280 	.word	0x24001280
 800ed8c:	240011e0 	.word	0x240011e0
 800ed90:	0801495c 	.word	0x0801495c

0800ed94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	3b04      	subs	r3, #4
 800eda4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800edac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3b04      	subs	r3, #4
 800edb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	f023 0201 	bic.w	r2, r3, #1
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	3b04      	subs	r3, #4
 800edc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800edc4:	4a0c      	ldr	r2, [pc, #48]	@ (800edf8 <pxPortInitialiseStack+0x64>)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	3b14      	subs	r3, #20
 800edce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	3b04      	subs	r3, #4
 800edda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f06f 0202 	mvn.w	r2, #2
 800ede2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	3b20      	subs	r3, #32
 800ede8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800edea:	68fb      	ldr	r3, [r7, #12]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3714      	adds	r7, #20
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	0800edfd 	.word	0x0800edfd

0800edfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee06:	4b13      	ldr	r3, [pc, #76]	@ (800ee54 <prvTaskExitError+0x58>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee0e:	d00b      	beq.n	800ee28 <prvTaskExitError+0x2c>
	__asm volatile
 800ee10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee14:	f383 8811 	msr	BASEPRI, r3
 800ee18:	f3bf 8f6f 	isb	sy
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	60fb      	str	r3, [r7, #12]
}
 800ee22:	bf00      	nop
 800ee24:	bf00      	nop
 800ee26:	e7fd      	b.n	800ee24 <prvTaskExitError+0x28>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	60bb      	str	r3, [r7, #8]
}
 800ee3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee3c:	bf00      	nop
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d0fc      	beq.n	800ee3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee44:	bf00      	nop
 800ee46:	bf00      	nop
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	2400009c 	.word	0x2400009c
	...

0800ee60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ee60:	4b07      	ldr	r3, [pc, #28]	@ (800ee80 <pxCurrentTCBConst2>)
 800ee62:	6819      	ldr	r1, [r3, #0]
 800ee64:	6808      	ldr	r0, [r1, #0]
 800ee66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6a:	f380 8809 	msr	PSP, r0
 800ee6e:	f3bf 8f6f 	isb	sy
 800ee72:	f04f 0000 	mov.w	r0, #0
 800ee76:	f380 8811 	msr	BASEPRI, r0
 800ee7a:	4770      	bx	lr
 800ee7c:	f3af 8000 	nop.w

0800ee80 <pxCurrentTCBConst2>:
 800ee80:	24000ca4 	.word	0x24000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop

0800ee88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee88:	4808      	ldr	r0, [pc, #32]	@ (800eeac <prvPortStartFirstTask+0x24>)
 800ee8a:	6800      	ldr	r0, [r0, #0]
 800ee8c:	6800      	ldr	r0, [r0, #0]
 800ee8e:	f380 8808 	msr	MSP, r0
 800ee92:	f04f 0000 	mov.w	r0, #0
 800ee96:	f380 8814 	msr	CONTROL, r0
 800ee9a:	b662      	cpsie	i
 800ee9c:	b661      	cpsie	f
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	df00      	svc	0
 800eea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eeaa:	bf00      	nop
 800eeac:	e000ed08 	.word	0xe000ed08

0800eeb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eeb6:	4b47      	ldr	r3, [pc, #284]	@ (800efd4 <xPortStartScheduler+0x124>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a47      	ldr	r2, [pc, #284]	@ (800efd8 <xPortStartScheduler+0x128>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d10b      	bne.n	800eed8 <xPortStartScheduler+0x28>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec4:	f383 8811 	msr	BASEPRI, r3
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	613b      	str	r3, [r7, #16]
}
 800eed2:	bf00      	nop
 800eed4:	bf00      	nop
 800eed6:	e7fd      	b.n	800eed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eed8:	4b3e      	ldr	r3, [pc, #248]	@ (800efd4 <xPortStartScheduler+0x124>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a3f      	ldr	r2, [pc, #252]	@ (800efdc <xPortStartScheduler+0x12c>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d10b      	bne.n	800eefa <xPortStartScheduler+0x4a>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	60fb      	str	r3, [r7, #12]
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop
 800eef8:	e7fd      	b.n	800eef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eefa:	4b39      	ldr	r3, [pc, #228]	@ (800efe0 <xPortStartScheduler+0x130>)
 800eefc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	22ff      	movs	r2, #255	@ 0xff
 800ef0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ef14:	78fb      	ldrb	r3, [r7, #3]
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	4b31      	ldr	r3, [pc, #196]	@ (800efe4 <xPortStartScheduler+0x134>)
 800ef20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ef22:	4b31      	ldr	r3, [pc, #196]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef24:	2207      	movs	r2, #7
 800ef26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef28:	e009      	b.n	800ef3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ef2a:	4b2f      	ldr	r3, [pc, #188]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3b01      	subs	r3, #1
 800ef30:	4a2d      	ldr	r2, [pc, #180]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ef34:	78fb      	ldrb	r3, [r7, #3]
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	005b      	lsls	r3, r3, #1
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef3e:	78fb      	ldrb	r3, [r7, #3]
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef46:	2b80      	cmp	r3, #128	@ 0x80
 800ef48:	d0ef      	beq.n	800ef2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef4a:	4b27      	ldr	r3, [pc, #156]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f1c3 0307 	rsb	r3, r3, #7
 800ef52:	2b04      	cmp	r3, #4
 800ef54:	d00b      	beq.n	800ef6e <xPortStartScheduler+0xbe>
	__asm volatile
 800ef56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	60bb      	str	r3, [r7, #8]
}
 800ef68:	bf00      	nop
 800ef6a:	bf00      	nop
 800ef6c:	e7fd      	b.n	800ef6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ef6e:	4b1e      	ldr	r3, [pc, #120]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	021b      	lsls	r3, r3, #8
 800ef74:	4a1c      	ldr	r2, [pc, #112]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ef78:	4b1b      	ldr	r3, [pc, #108]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ef80:	4a19      	ldr	r2, [pc, #100]	@ (800efe8 <xPortStartScheduler+0x138>)
 800ef82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ef8c:	4b17      	ldr	r3, [pc, #92]	@ (800efec <xPortStartScheduler+0x13c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4a16      	ldr	r2, [pc, #88]	@ (800efec <xPortStartScheduler+0x13c>)
 800ef92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef98:	4b14      	ldr	r3, [pc, #80]	@ (800efec <xPortStartScheduler+0x13c>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a13      	ldr	r2, [pc, #76]	@ (800efec <xPortStartScheduler+0x13c>)
 800ef9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800efa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800efa4:	f000 f8da 	bl	800f15c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800efa8:	4b11      	ldr	r3, [pc, #68]	@ (800eff0 <xPortStartScheduler+0x140>)
 800efaa:	2200      	movs	r2, #0
 800efac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800efae:	f000 f8f9 	bl	800f1a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800efb2:	4b10      	ldr	r3, [pc, #64]	@ (800eff4 <xPortStartScheduler+0x144>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a0f      	ldr	r2, [pc, #60]	@ (800eff4 <xPortStartScheduler+0x144>)
 800efb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800efbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800efbe:	f7ff ff63 	bl	800ee88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800efc2:	f7ff f803 	bl	800dfcc <vTaskSwitchContext>
	prvTaskExitError();
 800efc6:	f7ff ff19 	bl	800edfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	e000ed00 	.word	0xe000ed00
 800efd8:	410fc271 	.word	0x410fc271
 800efdc:	410fc270 	.word	0x410fc270
 800efe0:	e000e400 	.word	0xe000e400
 800efe4:	240012d0 	.word	0x240012d0
 800efe8:	240012d4 	.word	0x240012d4
 800efec:	e000ed20 	.word	0xe000ed20
 800eff0:	2400009c 	.word	0x2400009c
 800eff4:	e000ef34 	.word	0xe000ef34

0800eff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eff8:	b480      	push	{r7}
 800effa:	b083      	sub	sp, #12
 800effc:	af00      	add	r7, sp, #0
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	607b      	str	r3, [r7, #4]
}
 800f010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f012:	4b10      	ldr	r3, [pc, #64]	@ (800f054 <vPortEnterCritical+0x5c>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3301      	adds	r3, #1
 800f018:	4a0e      	ldr	r2, [pc, #56]	@ (800f054 <vPortEnterCritical+0x5c>)
 800f01a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f01c:	4b0d      	ldr	r3, [pc, #52]	@ (800f054 <vPortEnterCritical+0x5c>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2b01      	cmp	r3, #1
 800f022:	d110      	bne.n	800f046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f024:	4b0c      	ldr	r3, [pc, #48]	@ (800f058 <vPortEnterCritical+0x60>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00b      	beq.n	800f046 <vPortEnterCritical+0x4e>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	603b      	str	r3, [r7, #0]
}
 800f040:	bf00      	nop
 800f042:	bf00      	nop
 800f044:	e7fd      	b.n	800f042 <vPortEnterCritical+0x4a>
	}
}
 800f046:	bf00      	nop
 800f048:	370c      	adds	r7, #12
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	2400009c 	.word	0x2400009c
 800f058:	e000ed04 	.word	0xe000ed04

0800f05c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f062:	4b12      	ldr	r3, [pc, #72]	@ (800f0ac <vPortExitCritical+0x50>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d10b      	bne.n	800f082 <vPortExitCritical+0x26>
	__asm volatile
 800f06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	607b      	str	r3, [r7, #4]
}
 800f07c:	bf00      	nop
 800f07e:	bf00      	nop
 800f080:	e7fd      	b.n	800f07e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f082:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ac <vPortExitCritical+0x50>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3b01      	subs	r3, #1
 800f088:	4a08      	ldr	r2, [pc, #32]	@ (800f0ac <vPortExitCritical+0x50>)
 800f08a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f08c:	4b07      	ldr	r3, [pc, #28]	@ (800f0ac <vPortExitCritical+0x50>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d105      	bne.n	800f0a0 <vPortExitCritical+0x44>
 800f094:	2300      	movs	r3, #0
 800f096:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	f383 8811 	msr	BASEPRI, r3
}
 800f09e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f0a0:	bf00      	nop
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr
 800f0ac:	2400009c 	.word	0x2400009c

0800f0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f0b0:	f3ef 8009 	mrs	r0, PSP
 800f0b4:	f3bf 8f6f 	isb	sy
 800f0b8:	4b15      	ldr	r3, [pc, #84]	@ (800f110 <pxCurrentTCBConst>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	f01e 0f10 	tst.w	lr, #16
 800f0c0:	bf08      	it	eq
 800f0c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f0c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ca:	6010      	str	r0, [r2, #0]
 800f0cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f0d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f0d4:	f380 8811 	msr	BASEPRI, r0
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f7fe ff74 	bl	800dfcc <vTaskSwitchContext>
 800f0e4:	f04f 0000 	mov.w	r0, #0
 800f0e8:	f380 8811 	msr	BASEPRI, r0
 800f0ec:	bc09      	pop	{r0, r3}
 800f0ee:	6819      	ldr	r1, [r3, #0]
 800f0f0:	6808      	ldr	r0, [r1, #0]
 800f0f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f6:	f01e 0f10 	tst.w	lr, #16
 800f0fa:	bf08      	it	eq
 800f0fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f100:	f380 8809 	msr	PSP, r0
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	f3af 8000 	nop.w

0800f110 <pxCurrentTCBConst>:
 800f110:	24000ca4 	.word	0x24000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f114:	bf00      	nop
 800f116:	bf00      	nop

0800f118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	607b      	str	r3, [r7, #4]
}
 800f130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f132:	f7fe fe91 	bl	800de58 <xTaskIncrementTick>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d003      	beq.n	800f144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f13c:	4b06      	ldr	r3, [pc, #24]	@ (800f158 <xPortSysTickHandler+0x40>)
 800f13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f142:	601a      	str	r2, [r3, #0]
 800f144:	2300      	movs	r3, #0
 800f146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	f383 8811 	msr	BASEPRI, r3
}
 800f14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f150:	bf00      	nop
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	e000ed04 	.word	0xe000ed04

0800f15c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f15c:	b480      	push	{r7}
 800f15e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f160:	4b0b      	ldr	r3, [pc, #44]	@ (800f190 <vPortSetupTimerInterrupt+0x34>)
 800f162:	2200      	movs	r2, #0
 800f164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f166:	4b0b      	ldr	r3, [pc, #44]	@ (800f194 <vPortSetupTimerInterrupt+0x38>)
 800f168:	2200      	movs	r2, #0
 800f16a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f16c:	4b0a      	ldr	r3, [pc, #40]	@ (800f198 <vPortSetupTimerInterrupt+0x3c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a0a      	ldr	r2, [pc, #40]	@ (800f19c <vPortSetupTimerInterrupt+0x40>)
 800f172:	fba2 2303 	umull	r2, r3, r2, r3
 800f176:	099b      	lsrs	r3, r3, #6
 800f178:	4a09      	ldr	r2, [pc, #36]	@ (800f1a0 <vPortSetupTimerInterrupt+0x44>)
 800f17a:	3b01      	subs	r3, #1
 800f17c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f17e:	4b04      	ldr	r3, [pc, #16]	@ (800f190 <vPortSetupTimerInterrupt+0x34>)
 800f180:	2207      	movs	r2, #7
 800f182:	601a      	str	r2, [r3, #0]
}
 800f184:	bf00      	nop
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	e000e010 	.word	0xe000e010
 800f194:	e000e018 	.word	0xe000e018
 800f198:	24000000 	.word	0x24000000
 800f19c:	10624dd3 	.word	0x10624dd3
 800f1a0:	e000e014 	.word	0xe000e014

0800f1a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f1a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f1b4 <vPortEnableVFP+0x10>
 800f1a8:	6801      	ldr	r1, [r0, #0]
 800f1aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f1ae:	6001      	str	r1, [r0, #0]
 800f1b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f1b2:	bf00      	nop
 800f1b4:	e000ed88 	.word	0xe000ed88

0800f1b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f1be:	f3ef 8305 	mrs	r3, IPSR
 800f1c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2b0f      	cmp	r3, #15
 800f1c8:	d915      	bls.n	800f1f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f1ca:	4a18      	ldr	r2, [pc, #96]	@ (800f22c <vPortValidateInterruptPriority+0x74>)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f1d4:	4b16      	ldr	r3, [pc, #88]	@ (800f230 <vPortValidateInterruptPriority+0x78>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	7afa      	ldrb	r2, [r7, #11]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d20b      	bcs.n	800f1f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	607b      	str	r3, [r7, #4]
}
 800f1f0:	bf00      	nop
 800f1f2:	bf00      	nop
 800f1f4:	e7fd      	b.n	800f1f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f234 <vPortValidateInterruptPriority+0x7c>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f238 <vPortValidateInterruptPriority+0x80>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	429a      	cmp	r2, r3
 800f204:	d90b      	bls.n	800f21e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	603b      	str	r3, [r7, #0]
}
 800f218:	bf00      	nop
 800f21a:	bf00      	nop
 800f21c:	e7fd      	b.n	800f21a <vPortValidateInterruptPriority+0x62>
	}
 800f21e:	bf00      	nop
 800f220:	3714      	adds	r7, #20
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	e000e3f0 	.word	0xe000e3f0
 800f230:	240012d0 	.word	0x240012d0
 800f234:	e000ed0c 	.word	0xe000ed0c
 800f238:	240012d4 	.word	0x240012d4

0800f23c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b08a      	sub	sp, #40	@ 0x28
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f244:	2300      	movs	r3, #0
 800f246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f248:	f7fe fd4a 	bl	800dce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f24c:	4b5c      	ldr	r3, [pc, #368]	@ (800f3c0 <pvPortMalloc+0x184>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d101      	bne.n	800f258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f254:	f000 f924 	bl	800f4a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f258:	4b5a      	ldr	r3, [pc, #360]	@ (800f3c4 <pvPortMalloc+0x188>)
 800f25a:	681a      	ldr	r2, [r3, #0]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4013      	ands	r3, r2
 800f260:	2b00      	cmp	r3, #0
 800f262:	f040 8095 	bne.w	800f390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d01e      	beq.n	800f2aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f26c:	2208      	movs	r2, #8
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4413      	add	r3, r2
 800f272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f003 0307 	and.w	r3, r3, #7
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d015      	beq.n	800f2aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f023 0307 	bic.w	r3, r3, #7
 800f284:	3308      	adds	r3, #8
 800f286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f003 0307 	and.w	r3, r3, #7
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d00b      	beq.n	800f2aa <pvPortMalloc+0x6e>
	__asm volatile
 800f292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f296:	f383 8811 	msr	BASEPRI, r3
 800f29a:	f3bf 8f6f 	isb	sy
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	617b      	str	r3, [r7, #20]
}
 800f2a4:	bf00      	nop
 800f2a6:	bf00      	nop
 800f2a8:	e7fd      	b.n	800f2a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d06f      	beq.n	800f390 <pvPortMalloc+0x154>
 800f2b0:	4b45      	ldr	r3, [pc, #276]	@ (800f3c8 <pvPortMalloc+0x18c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d86a      	bhi.n	800f390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f2ba:	4b44      	ldr	r3, [pc, #272]	@ (800f3cc <pvPortMalloc+0x190>)
 800f2bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f2be:	4b43      	ldr	r3, [pc, #268]	@ (800f3cc <pvPortMalloc+0x190>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2c4:	e004      	b.n	800f2d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d903      	bls.n	800f2e2 <pvPortMalloc+0xa6>
 800f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1f1      	bne.n	800f2c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f2e2:	4b37      	ldr	r3, [pc, #220]	@ (800f3c0 <pvPortMalloc+0x184>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d051      	beq.n	800f390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2ec:	6a3b      	ldr	r3, [r7, #32]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2208      	movs	r2, #8
 800f2f2:	4413      	add	r3, r2
 800f2f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	6a3b      	ldr	r3, [r7, #32]
 800f2fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f300:	685a      	ldr	r2, [r3, #4]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	1ad2      	subs	r2, r2, r3
 800f306:	2308      	movs	r3, #8
 800f308:	005b      	lsls	r3, r3, #1
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d920      	bls.n	800f350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f30e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4413      	add	r3, r2
 800f314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	f003 0307 	and.w	r3, r3, #7
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d00b      	beq.n	800f338 <pvPortMalloc+0xfc>
	__asm volatile
 800f320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	f3bf 8f6f 	isb	sy
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	613b      	str	r3, [r7, #16]
}
 800f332:	bf00      	nop
 800f334:	bf00      	nop
 800f336:	e7fd      	b.n	800f334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f33a:	685a      	ldr	r2, [r3, #4]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	1ad2      	subs	r2, r2, r3
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f34a:	69b8      	ldr	r0, [r7, #24]
 800f34c:	f000 f90a 	bl	800f564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f350:	4b1d      	ldr	r3, [pc, #116]	@ (800f3c8 <pvPortMalloc+0x18c>)
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	1ad3      	subs	r3, r2, r3
 800f35a:	4a1b      	ldr	r2, [pc, #108]	@ (800f3c8 <pvPortMalloc+0x18c>)
 800f35c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f35e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3c8 <pvPortMalloc+0x18c>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	4b1b      	ldr	r3, [pc, #108]	@ (800f3d0 <pvPortMalloc+0x194>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	429a      	cmp	r2, r3
 800f368:	d203      	bcs.n	800f372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f36a:	4b17      	ldr	r3, [pc, #92]	@ (800f3c8 <pvPortMalloc+0x18c>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	4a18      	ldr	r2, [pc, #96]	@ (800f3d0 <pvPortMalloc+0x194>)
 800f370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f374:	685a      	ldr	r2, [r3, #4]
 800f376:	4b13      	ldr	r3, [pc, #76]	@ (800f3c4 <pvPortMalloc+0x188>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	431a      	orrs	r2, r3
 800f37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f37e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f386:	4b13      	ldr	r3, [pc, #76]	@ (800f3d4 <pvPortMalloc+0x198>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	3301      	adds	r3, #1
 800f38c:	4a11      	ldr	r2, [pc, #68]	@ (800f3d4 <pvPortMalloc+0x198>)
 800f38e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f390:	f7fe fcb4 	bl	800dcfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	f003 0307 	and.w	r3, r3, #7
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00b      	beq.n	800f3b6 <pvPortMalloc+0x17a>
	__asm volatile
 800f39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	60fb      	str	r3, [r7, #12]
}
 800f3b0:	bf00      	nop
 800f3b2:	bf00      	nop
 800f3b4:	e7fd      	b.n	800f3b2 <pvPortMalloc+0x176>
	return pvReturn;
 800f3b6:	69fb      	ldr	r3, [r7, #28]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3728      	adds	r7, #40	@ 0x28
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	24004ee0 	.word	0x24004ee0
 800f3c4:	24004ef4 	.word	0x24004ef4
 800f3c8:	24004ee4 	.word	0x24004ee4
 800f3cc:	24004ed8 	.word	0x24004ed8
 800f3d0:	24004ee8 	.word	0x24004ee8
 800f3d4:	24004eec 	.word	0x24004eec

0800f3d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b086      	sub	sp, #24
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d04f      	beq.n	800f48a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f3ea:	2308      	movs	r3, #8
 800f3ec:	425b      	negs	r3, r3
 800f3ee:	697a      	ldr	r2, [r7, #20]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	685a      	ldr	r2, [r3, #4]
 800f3fc:	4b25      	ldr	r3, [pc, #148]	@ (800f494 <vPortFree+0xbc>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4013      	ands	r3, r2
 800f402:	2b00      	cmp	r3, #0
 800f404:	d10b      	bne.n	800f41e <vPortFree+0x46>
	__asm volatile
 800f406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40a:	f383 8811 	msr	BASEPRI, r3
 800f40e:	f3bf 8f6f 	isb	sy
 800f412:	f3bf 8f4f 	dsb	sy
 800f416:	60fb      	str	r3, [r7, #12]
}
 800f418:	bf00      	nop
 800f41a:	bf00      	nop
 800f41c:	e7fd      	b.n	800f41a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00b      	beq.n	800f43e <vPortFree+0x66>
	__asm volatile
 800f426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f42a:	f383 8811 	msr	BASEPRI, r3
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	60bb      	str	r3, [r7, #8]
}
 800f438:	bf00      	nop
 800f43a:	bf00      	nop
 800f43c:	e7fd      	b.n	800f43a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	4b14      	ldr	r3, [pc, #80]	@ (800f494 <vPortFree+0xbc>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	4013      	ands	r3, r2
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d01e      	beq.n	800f48a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d11a      	bne.n	800f48a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	685a      	ldr	r2, [r3, #4]
 800f458:	4b0e      	ldr	r3, [pc, #56]	@ (800f494 <vPortFree+0xbc>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	43db      	mvns	r3, r3
 800f45e:	401a      	ands	r2, r3
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f464:	f7fe fc3c 	bl	800dce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	4b0a      	ldr	r3, [pc, #40]	@ (800f498 <vPortFree+0xc0>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4413      	add	r3, r2
 800f472:	4a09      	ldr	r2, [pc, #36]	@ (800f498 <vPortFree+0xc0>)
 800f474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f476:	6938      	ldr	r0, [r7, #16]
 800f478:	f000 f874 	bl	800f564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f47c:	4b07      	ldr	r3, [pc, #28]	@ (800f49c <vPortFree+0xc4>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	3301      	adds	r3, #1
 800f482:	4a06      	ldr	r2, [pc, #24]	@ (800f49c <vPortFree+0xc4>)
 800f484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f486:	f7fe fc39 	bl	800dcfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f48a:	bf00      	nop
 800f48c:	3718      	adds	r7, #24
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	24004ef4 	.word	0x24004ef4
 800f498:	24004ee4 	.word	0x24004ee4
 800f49c:	24004ef0 	.word	0x24004ef0

0800f4a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f4a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f4aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f4ac:	4b27      	ldr	r3, [pc, #156]	@ (800f54c <prvHeapInit+0xac>)
 800f4ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f003 0307 	and.w	r3, r3, #7
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00c      	beq.n	800f4d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	3307      	adds	r3, #7
 800f4be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f023 0307 	bic.w	r3, r3, #7
 800f4c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4c8:	68ba      	ldr	r2, [r7, #8]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	1ad3      	subs	r3, r2, r3
 800f4ce:	4a1f      	ldr	r2, [pc, #124]	@ (800f54c <prvHeapInit+0xac>)
 800f4d0:	4413      	add	r3, r2
 800f4d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f550 <prvHeapInit+0xb0>)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f4de:	4b1c      	ldr	r3, [pc, #112]	@ (800f550 <prvHeapInit+0xb0>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f4ec:	2208      	movs	r2, #8
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	1a9b      	subs	r3, r3, r2
 800f4f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f023 0307 	bic.w	r3, r3, #7
 800f4fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	4a15      	ldr	r2, [pc, #84]	@ (800f554 <prvHeapInit+0xb4>)
 800f500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f502:	4b14      	ldr	r3, [pc, #80]	@ (800f554 <prvHeapInit+0xb4>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2200      	movs	r2, #0
 800f508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f50a:	4b12      	ldr	r3, [pc, #72]	@ (800f554 <prvHeapInit+0xb4>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2200      	movs	r2, #0
 800f510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	1ad2      	subs	r2, r2, r3
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f520:	4b0c      	ldr	r3, [pc, #48]	@ (800f554 <prvHeapInit+0xb4>)
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	4a0a      	ldr	r2, [pc, #40]	@ (800f558 <prvHeapInit+0xb8>)
 800f52e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	4a09      	ldr	r2, [pc, #36]	@ (800f55c <prvHeapInit+0xbc>)
 800f536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f538:	4b09      	ldr	r3, [pc, #36]	@ (800f560 <prvHeapInit+0xc0>)
 800f53a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f53e:	601a      	str	r2, [r3, #0]
}
 800f540:	bf00      	nop
 800f542:	3714      	adds	r7, #20
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr
 800f54c:	240012d8 	.word	0x240012d8
 800f550:	24004ed8 	.word	0x24004ed8
 800f554:	24004ee0 	.word	0x24004ee0
 800f558:	24004ee8 	.word	0x24004ee8
 800f55c:	24004ee4 	.word	0x24004ee4
 800f560:	24004ef4 	.word	0x24004ef4

0800f564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f56c:	4b28      	ldr	r3, [pc, #160]	@ (800f610 <prvInsertBlockIntoFreeList+0xac>)
 800f56e:	60fb      	str	r3, [r7, #12]
 800f570:	e002      	b.n	800f578 <prvInsertBlockIntoFreeList+0x14>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	60fb      	str	r3, [r7, #12]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d8f7      	bhi.n	800f572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	4413      	add	r3, r2
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	429a      	cmp	r2, r3
 800f592:	d108      	bne.n	800f5a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	685a      	ldr	r2, [r3, #4]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	441a      	add	r2, r3
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	441a      	add	r2, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d118      	bne.n	800f5ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	4b15      	ldr	r3, [pc, #84]	@ (800f614 <prvInsertBlockIntoFreeList+0xb0>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d00d      	beq.n	800f5e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	685a      	ldr	r2, [r3, #4]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	441a      	add	r2, r3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	601a      	str	r2, [r3, #0]
 800f5e0:	e008      	b.n	800f5f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f5e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f614 <prvInsertBlockIntoFreeList+0xb0>)
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	e003      	b.n	800f5f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d002      	beq.n	800f602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f602:	bf00      	nop
 800f604:	3714      	adds	r7, #20
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop
 800f610:	24004ed8 	.word	0x24004ed8
 800f614:	24004ee0 	.word	0x24004ee0

0800f618 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f61c:	2200      	movs	r2, #0
 800f61e:	4913      	ldr	r1, [pc, #76]	@ (800f66c <MX_USB_DEVICE_Init+0x54>)
 800f620:	4813      	ldr	r0, [pc, #76]	@ (800f670 <MX_USB_DEVICE_Init+0x58>)
 800f622:	f7fb fecf 	bl	800b3c4 <USBD_Init>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d001      	beq.n	800f630 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f62c:	f7f1 fc5b 	bl	8000ee6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f630:	4910      	ldr	r1, [pc, #64]	@ (800f674 <MX_USB_DEVICE_Init+0x5c>)
 800f632:	480f      	ldr	r0, [pc, #60]	@ (800f670 <MX_USB_DEVICE_Init+0x58>)
 800f634:	f7fb fef6 	bl	800b424 <USBD_RegisterClass>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d001      	beq.n	800f642 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f63e:	f7f1 fc52 	bl	8000ee6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f642:	490d      	ldr	r1, [pc, #52]	@ (800f678 <MX_USB_DEVICE_Init+0x60>)
 800f644:	480a      	ldr	r0, [pc, #40]	@ (800f670 <MX_USB_DEVICE_Init+0x58>)
 800f646:	f7fb fded 	bl	800b224 <USBD_CDC_RegisterInterface>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f650:	f7f1 fc49 	bl	8000ee6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f654:	4806      	ldr	r0, [pc, #24]	@ (800f670 <MX_USB_DEVICE_Init+0x58>)
 800f656:	f7fb ff1b 	bl	800b490 <USBD_Start>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f660:	f7f1 fc41 	bl	8000ee6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f664:	f7f5 f8c0 	bl	80047e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f668:	bf00      	nop
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	240000b4 	.word	0x240000b4
 800f670:	24004ef8 	.word	0x24004ef8
 800f674:	2400001c 	.word	0x2400001c
 800f678:	240000a0 	.word	0x240000a0

0800f67c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f680:	2200      	movs	r2, #0
 800f682:	4905      	ldr	r1, [pc, #20]	@ (800f698 <CDC_Init_FS+0x1c>)
 800f684:	4805      	ldr	r0, [pc, #20]	@ (800f69c <CDC_Init_FS+0x20>)
 800f686:	f7fb fde7 	bl	800b258 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f68a:	4905      	ldr	r1, [pc, #20]	@ (800f6a0 <CDC_Init_FS+0x24>)
 800f68c:	4803      	ldr	r0, [pc, #12]	@ (800f69c <CDC_Init_FS+0x20>)
 800f68e:	f7fb fe05 	bl	800b29c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f692:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f694:	4618      	mov	r0, r3
 800f696:	bd80      	pop	{r7, pc}
 800f698:	240059d4 	.word	0x240059d4
 800f69c:	24004ef8 	.word	0x24004ef8
 800f6a0:	240051d4 	.word	0x240051d4

0800f6a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f6a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr

0800f6b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	6039      	str	r1, [r7, #0]
 800f6be:	71fb      	strb	r3, [r7, #7]
 800f6c0:	4613      	mov	r3, r2
 800f6c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f6c4:	79fb      	ldrb	r3, [r7, #7]
 800f6c6:	2b23      	cmp	r3, #35	@ 0x23
 800f6c8:	d84a      	bhi.n	800f760 <CDC_Control_FS+0xac>
 800f6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f6d0 <CDC_Control_FS+0x1c>)
 800f6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d0:	0800f761 	.word	0x0800f761
 800f6d4:	0800f761 	.word	0x0800f761
 800f6d8:	0800f761 	.word	0x0800f761
 800f6dc:	0800f761 	.word	0x0800f761
 800f6e0:	0800f761 	.word	0x0800f761
 800f6e4:	0800f761 	.word	0x0800f761
 800f6e8:	0800f761 	.word	0x0800f761
 800f6ec:	0800f761 	.word	0x0800f761
 800f6f0:	0800f761 	.word	0x0800f761
 800f6f4:	0800f761 	.word	0x0800f761
 800f6f8:	0800f761 	.word	0x0800f761
 800f6fc:	0800f761 	.word	0x0800f761
 800f700:	0800f761 	.word	0x0800f761
 800f704:	0800f761 	.word	0x0800f761
 800f708:	0800f761 	.word	0x0800f761
 800f70c:	0800f761 	.word	0x0800f761
 800f710:	0800f761 	.word	0x0800f761
 800f714:	0800f761 	.word	0x0800f761
 800f718:	0800f761 	.word	0x0800f761
 800f71c:	0800f761 	.word	0x0800f761
 800f720:	0800f761 	.word	0x0800f761
 800f724:	0800f761 	.word	0x0800f761
 800f728:	0800f761 	.word	0x0800f761
 800f72c:	0800f761 	.word	0x0800f761
 800f730:	0800f761 	.word	0x0800f761
 800f734:	0800f761 	.word	0x0800f761
 800f738:	0800f761 	.word	0x0800f761
 800f73c:	0800f761 	.word	0x0800f761
 800f740:	0800f761 	.word	0x0800f761
 800f744:	0800f761 	.word	0x0800f761
 800f748:	0800f761 	.word	0x0800f761
 800f74c:	0800f761 	.word	0x0800f761
 800f750:	0800f761 	.word	0x0800f761
 800f754:	0800f761 	.word	0x0800f761
 800f758:	0800f761 	.word	0x0800f761
 800f75c:	0800f761 	.word	0x0800f761
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f760:	bf00      	nop
  }

  return (USBD_OK);
 800f762:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f764:	4618      	mov	r0, r3
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f77a:	6879      	ldr	r1, [r7, #4]
 800f77c:	4805      	ldr	r0, [pc, #20]	@ (800f794 <CDC_Receive_FS+0x24>)
 800f77e:	f7fb fd8d 	bl	800b29c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f782:	4804      	ldr	r0, [pc, #16]	@ (800f794 <CDC_Receive_FS+0x24>)
 800f784:	f7fb fde8 	bl	800b358 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f788:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	24004ef8 	.word	0x24004ef8

0800f798 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f7a8:	4b0d      	ldr	r3, [pc, #52]	@ (800f7e0 <CDC_Transmit_FS+0x48>)
 800f7aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f7ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e00b      	b.n	800f7d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f7be:	887b      	ldrh	r3, [r7, #2]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	6879      	ldr	r1, [r7, #4]
 800f7c4:	4806      	ldr	r0, [pc, #24]	@ (800f7e0 <CDC_Transmit_FS+0x48>)
 800f7c6:	f7fb fd47 	bl	800b258 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f7ca:	4805      	ldr	r0, [pc, #20]	@ (800f7e0 <CDC_Transmit_FS+0x48>)
 800f7cc:	f7fb fd84 	bl	800b2d8 <USBD_CDC_TransmitPacket>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	24004ef8 	.word	0x24004ef8

0800f7e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b087      	sub	sp, #28
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f7f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr
	...

0800f808 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	4603      	mov	r3, r0
 800f810:	6039      	str	r1, [r7, #0]
 800f812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2212      	movs	r2, #18
 800f818:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f81a:	4b03      	ldr	r3, [pc, #12]	@ (800f828 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr
 800f828:	240000d4 	.word	0x240000d4

0800f82c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	6039      	str	r1, [r7, #0]
 800f836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2204      	movs	r2, #4
 800f83c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f83e:	4b03      	ldr	r3, [pc, #12]	@ (800f84c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f840:	4618      	mov	r0, r3
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	240000e8 	.word	0x240000e8

0800f850 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	4603      	mov	r3, r0
 800f858:	6039      	str	r1, [r7, #0]
 800f85a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f85c:	79fb      	ldrb	r3, [r7, #7]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d105      	bne.n	800f86e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	4907      	ldr	r1, [pc, #28]	@ (800f884 <USBD_FS_ProductStrDescriptor+0x34>)
 800f866:	4808      	ldr	r0, [pc, #32]	@ (800f888 <USBD_FS_ProductStrDescriptor+0x38>)
 800f868:	f7fc ffec 	bl	800c844 <USBD_GetString>
 800f86c:	e004      	b.n	800f878 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f86e:	683a      	ldr	r2, [r7, #0]
 800f870:	4904      	ldr	r1, [pc, #16]	@ (800f884 <USBD_FS_ProductStrDescriptor+0x34>)
 800f872:	4805      	ldr	r0, [pc, #20]	@ (800f888 <USBD_FS_ProductStrDescriptor+0x38>)
 800f874:	f7fc ffe6 	bl	800c844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f878:	4b02      	ldr	r3, [pc, #8]	@ (800f884 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	240061d4 	.word	0x240061d4
 800f888:	08014964 	.word	0x08014964

0800f88c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	4603      	mov	r3, r0
 800f894:	6039      	str	r1, [r7, #0]
 800f896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f898:	683a      	ldr	r2, [r7, #0]
 800f89a:	4904      	ldr	r1, [pc, #16]	@ (800f8ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f89c:	4804      	ldr	r0, [pc, #16]	@ (800f8b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f89e:	f7fc ffd1 	bl	800c844 <USBD_GetString>
  return USBD_StrDesc;
 800f8a2:	4b02      	ldr	r3, [pc, #8]	@ (800f8ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	240061d4 	.word	0x240061d4
 800f8b0:	0801497c 	.word	0x0801497c

0800f8b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	6039      	str	r1, [r7, #0]
 800f8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	221a      	movs	r2, #26
 800f8c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f8c6:	f000 f843 	bl	800f950 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f8ca:	4b02      	ldr	r3, [pc, #8]	@ (800f8d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	240000ec 	.word	0x240000ec

0800f8d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	6039      	str	r1, [r7, #0]
 800f8e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f8e4:	79fb      	ldrb	r3, [r7, #7]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d105      	bne.n	800f8f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8ea:	683a      	ldr	r2, [r7, #0]
 800f8ec:	4907      	ldr	r1, [pc, #28]	@ (800f90c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f8ee:	4808      	ldr	r0, [pc, #32]	@ (800f910 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f8f0:	f7fc ffa8 	bl	800c844 <USBD_GetString>
 800f8f4:	e004      	b.n	800f900 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	4904      	ldr	r1, [pc, #16]	@ (800f90c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f8fa:	4805      	ldr	r0, [pc, #20]	@ (800f910 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f8fc:	f7fc ffa2 	bl	800c844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f900:	4b02      	ldr	r3, [pc, #8]	@ (800f90c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	240061d4 	.word	0x240061d4
 800f910:	08014990 	.word	0x08014990

0800f914 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	4603      	mov	r3, r0
 800f91c:	6039      	str	r1, [r7, #0]
 800f91e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f920:	79fb      	ldrb	r3, [r7, #7]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d105      	bne.n	800f932 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	4907      	ldr	r1, [pc, #28]	@ (800f948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f92a:	4808      	ldr	r0, [pc, #32]	@ (800f94c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f92c:	f7fc ff8a 	bl	800c844 <USBD_GetString>
 800f930:	e004      	b.n	800f93c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	4904      	ldr	r1, [pc, #16]	@ (800f948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f936:	4805      	ldr	r0, [pc, #20]	@ (800f94c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f938:	f7fc ff84 	bl	800c844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f93c:	4b02      	ldr	r3, [pc, #8]	@ (800f948 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	240061d4 	.word	0x240061d4
 800f94c:	0801499c 	.word	0x0801499c

0800f950 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f956:	4b0f      	ldr	r3, [pc, #60]	@ (800f994 <Get_SerialNum+0x44>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f95c:	4b0e      	ldr	r3, [pc, #56]	@ (800f998 <Get_SerialNum+0x48>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f962:	4b0e      	ldr	r3, [pc, #56]	@ (800f99c <Get_SerialNum+0x4c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4413      	add	r3, r2
 800f96e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d009      	beq.n	800f98a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f976:	2208      	movs	r2, #8
 800f978:	4909      	ldr	r1, [pc, #36]	@ (800f9a0 <Get_SerialNum+0x50>)
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f000 f814 	bl	800f9a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f980:	2204      	movs	r2, #4
 800f982:	4908      	ldr	r1, [pc, #32]	@ (800f9a4 <Get_SerialNum+0x54>)
 800f984:	68b8      	ldr	r0, [r7, #8]
 800f986:	f000 f80f 	bl	800f9a8 <IntToUnicode>
  }
}
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	1ff1e800 	.word	0x1ff1e800
 800f998:	1ff1e804 	.word	0x1ff1e804
 800f99c:	1ff1e808 	.word	0x1ff1e808
 800f9a0:	240000ee 	.word	0x240000ee
 800f9a4:	240000fe 	.word	0x240000fe

0800f9a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b087      	sub	sp, #28
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	75fb      	strb	r3, [r7, #23]
 800f9be:	e027      	b.n	800fa10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	0f1b      	lsrs	r3, r3, #28
 800f9c4:	2b09      	cmp	r3, #9
 800f9c6:	d80b      	bhi.n	800f9e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	0f1b      	lsrs	r3, r3, #28
 800f9cc:	b2da      	uxtb	r2, r3
 800f9ce:	7dfb      	ldrb	r3, [r7, #23]
 800f9d0:	005b      	lsls	r3, r3, #1
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	440b      	add	r3, r1
 800f9d8:	3230      	adds	r2, #48	@ 0x30
 800f9da:	b2d2      	uxtb	r2, r2
 800f9dc:	701a      	strb	r2, [r3, #0]
 800f9de:	e00a      	b.n	800f9f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	0f1b      	lsrs	r3, r3, #28
 800f9e4:	b2da      	uxtb	r2, r3
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	005b      	lsls	r3, r3, #1
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	440b      	add	r3, r1
 800f9f0:	3237      	adds	r2, #55	@ 0x37
 800f9f2:	b2d2      	uxtb	r2, r2
 800f9f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	011b      	lsls	r3, r3, #4
 800f9fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	005b      	lsls	r3, r3, #1
 800fa00:	3301      	adds	r3, #1
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	4413      	add	r3, r2
 800fa06:	2200      	movs	r2, #0
 800fa08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	75fb      	strb	r3, [r7, #23]
 800fa10:	7dfa      	ldrb	r2, [r7, #23]
 800fa12:	79fb      	ldrb	r3, [r7, #7]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d3d3      	bcc.n	800f9c0 <IntToUnicode+0x18>
  }
}
 800fa18:	bf00      	nop
 800fa1a:	bf00      	nop
 800fa1c:	371c      	adds	r7, #28
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
	...

0800fa28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b0ba      	sub	sp, #232	@ 0xe8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fa34:	2200      	movs	r2, #0
 800fa36:	601a      	str	r2, [r3, #0]
 800fa38:	605a      	str	r2, [r3, #4]
 800fa3a:	609a      	str	r2, [r3, #8]
 800fa3c:	60da      	str	r2, [r3, #12]
 800fa3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fa40:	f107 0310 	add.w	r3, r7, #16
 800fa44:	22c0      	movs	r2, #192	@ 0xc0
 800fa46:	2100      	movs	r1, #0
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f002 fd1a 	bl	8012482 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4a2c      	ldr	r2, [pc, #176]	@ (800fb04 <HAL_PCD_MspInit+0xdc>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d151      	bne.n	800fafc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fa58:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fa5c:	f04f 0300 	mov.w	r3, #0
 800fa60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fa64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fa68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fa6c:	f107 0310 	add.w	r3, r7, #16
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7f5 fedb 	bl	800582c <HAL_RCCEx_PeriphCLKConfig>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800fa7c:	f7f1 fa33 	bl	8000ee6 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fa80:	f7f4 feb2 	bl	80047e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fa84:	4b20      	ldr	r3, [pc, #128]	@ (800fb08 <HAL_PCD_MspInit+0xe0>)
 800fa86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa8a:	4a1f      	ldr	r2, [pc, #124]	@ (800fb08 <HAL_PCD_MspInit+0xe0>)
 800fa8c:	f043 0301 	orr.w	r3, r3, #1
 800fa90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fa94:	4b1c      	ldr	r3, [pc, #112]	@ (800fb08 <HAL_PCD_MspInit+0xe0>)
 800fa96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800faa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800faa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800faaa:	2302      	movs	r3, #2
 800faac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fab0:	2300      	movs	r3, #0
 800fab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fab6:	2300      	movs	r3, #0
 800fab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fabc:	230a      	movs	r3, #10
 800fabe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fac2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fac6:	4619      	mov	r1, r3
 800fac8:	4810      	ldr	r0, [pc, #64]	@ (800fb0c <HAL_PCD_MspInit+0xe4>)
 800faca:	f7f2 fb93 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800face:	4b0e      	ldr	r3, [pc, #56]	@ (800fb08 <HAL_PCD_MspInit+0xe0>)
 800fad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fad4:	4a0c      	ldr	r2, [pc, #48]	@ (800fb08 <HAL_PCD_MspInit+0xe0>)
 800fad6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fada:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fade:	4b0a      	ldr	r3, [pc, #40]	@ (800fb08 <HAL_PCD_MspInit+0xe0>)
 800fae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fae8:	60bb      	str	r3, [r7, #8]
 800faea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800faec:	2200      	movs	r2, #0
 800faee:	2105      	movs	r1, #5
 800faf0:	2065      	movs	r0, #101	@ 0x65
 800faf2:	f7f2 f88f 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800faf6:	2065      	movs	r0, #101	@ 0x65
 800faf8:	f7f2 f8a6 	bl	8001c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fafc:	bf00      	nop
 800fafe:	37e8      	adds	r7, #232	@ 0xe8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	40080000 	.word	0x40080000
 800fb08:	58024400 	.word	0x58024400
 800fb0c:	58020000 	.word	0x58020000

0800fb10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800fb24:	4619      	mov	r1, r3
 800fb26:	4610      	mov	r0, r2
 800fb28:	f7fb fcff 	bl	800b52a <USBD_LL_SetupStage>
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fb46:	78fa      	ldrb	r2, [r7, #3]
 800fb48:	6879      	ldr	r1, [r7, #4]
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	00db      	lsls	r3, r3, #3
 800fb4e:	4413      	add	r3, r2
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	440b      	add	r3, r1
 800fb54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	78fb      	ldrb	r3, [r7, #3]
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	f7fb fd39 	bl	800b5d4 <USBD_LL_DataOutStage>
}
 800fb62:	bf00      	nop
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	460b      	mov	r3, r1
 800fb74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fb7c:	78fa      	ldrb	r2, [r7, #3]
 800fb7e:	6879      	ldr	r1, [r7, #4]
 800fb80:	4613      	mov	r3, r2
 800fb82:	00db      	lsls	r3, r3, #3
 800fb84:	4413      	add	r3, r2
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	440b      	add	r3, r1
 800fb8a:	3320      	adds	r3, #32
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	78fb      	ldrb	r3, [r7, #3]
 800fb90:	4619      	mov	r1, r3
 800fb92:	f7fb fdd2 	bl	800b73a <USBD_LL_DataInStage>
}
 800fb96:	bf00      	nop
 800fb98:	3708      	adds	r7, #8
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}

0800fb9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b082      	sub	sp, #8
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fb ff0c 	bl	800b9ca <USBD_LL_SOF>
}
 800fbb2:	bf00      	nop
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b084      	sub	sp, #16
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	79db      	ldrb	r3, [r3, #7]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d102      	bne.n	800fbd4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	73fb      	strb	r3, [r7, #15]
 800fbd2:	e008      	b.n	800fbe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	79db      	ldrb	r3, [r3, #7]
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	d102      	bne.n	800fbe2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	73fb      	strb	r3, [r7, #15]
 800fbe0:	e001      	b.n	800fbe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fbe2:	f7f1 f980 	bl	8000ee6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fbec:	7bfa      	ldrb	r2, [r7, #15]
 800fbee:	4611      	mov	r1, r2
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fb fea6 	bl	800b942 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fb fe4e 	bl	800b89e <USBD_LL_Reset>
}
 800fc02:	bf00      	nop
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
	...

0800fc0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fb fea1 	bl	800b962 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	6812      	ldr	r2, [r2, #0]
 800fc2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fc32:	f043 0301 	orr.w	r3, r3, #1
 800fc36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	7adb      	ldrb	r3, [r3, #11]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d005      	beq.n	800fc4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fc40:	4b04      	ldr	r3, [pc, #16]	@ (800fc54 <HAL_PCD_SuspendCallback+0x48>)
 800fc42:	691b      	ldr	r3, [r3, #16]
 800fc44:	4a03      	ldr	r2, [pc, #12]	@ (800fc54 <HAL_PCD_SuspendCallback+0x48>)
 800fc46:	f043 0306 	orr.w	r3, r3, #6
 800fc4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	e000ed00 	.word	0xe000ed00

0800fc58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fb fe97 	bl	800b99a <USBD_LL_Resume>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc86:	78fa      	ldrb	r2, [r7, #3]
 800fc88:	4611      	mov	r1, r2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fb feef 	bl	800ba6e <USBD_LL_IsoOUTIncomplete>
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fcaa:	78fa      	ldrb	r2, [r7, #3]
 800fcac:	4611      	mov	r1, r2
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fb feab 	bl	800ba0a <USBD_LL_IsoINIncomplete>
}
 800fcb4:	bf00      	nop
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7fb ff01 	bl	800bad2 <USBD_LL_DevConnected>
}
 800fcd0:	bf00      	nop
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fb fefe 	bl	800bae8 <USBD_LL_DevDisconnected>
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d13e      	bne.n	800fd82 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fd04:	4a21      	ldr	r2, [pc, #132]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a1f      	ldr	r2, [pc, #124]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd10:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd14:	4b1d      	ldr	r3, [pc, #116]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd16:	4a1e      	ldr	r2, [pc, #120]	@ (800fd90 <USBD_LL_Init+0x9c>)
 800fd18:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fd1a:	4b1c      	ldr	r3, [pc, #112]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd1c:	2209      	movs	r2, #9
 800fd1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fd20:	4b1a      	ldr	r3, [pc, #104]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd22:	2202      	movs	r2, #2
 800fd24:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd26:	4b19      	ldr	r3, [pc, #100]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd2c:	4b17      	ldr	r3, [pc, #92]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd2e:	2202      	movs	r2, #2
 800fd30:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd32:	4b16      	ldr	r3, [pc, #88]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fd38:	4b14      	ldr	r3, [pc, #80]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fd3e:	4b13      	ldr	r3, [pc, #76]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fd44:	4b11      	ldr	r3, [pc, #68]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fd4a:	4b10      	ldr	r3, [pc, #64]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fd50:	4b0e      	ldr	r3, [pc, #56]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fd56:	480d      	ldr	r0, [pc, #52]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd58:	f7f3 fa6d 	bl	8003236 <HAL_PCD_Init>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fd62:	f7f1 f8c0 	bl	8000ee6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fd66:	2180      	movs	r1, #128	@ 0x80
 800fd68:	4808      	ldr	r0, [pc, #32]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd6a:	f7f4 fcc2 	bl	80046f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fd6e:	2240      	movs	r2, #64	@ 0x40
 800fd70:	2100      	movs	r1, #0
 800fd72:	4806      	ldr	r0, [pc, #24]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd74:	f7f4 fc76 	bl	8004664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fd78:	2280      	movs	r2, #128	@ 0x80
 800fd7a:	2101      	movs	r1, #1
 800fd7c:	4803      	ldr	r0, [pc, #12]	@ (800fd8c <USBD_LL_Init+0x98>)
 800fd7e:	f7f4 fc71 	bl	8004664 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	240063d4 	.word	0x240063d4
 800fd90:	40080000 	.word	0x40080000

0800fd94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fda0:	2300      	movs	r3, #0
 800fda2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7f3 fb4f 	bl	800344e <HAL_PCD_Start>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 f942 	bl	8010040 <USBD_Get_USB_Status>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b084      	sub	sp, #16
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
 800fdd2:	4608      	mov	r0, r1
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	4603      	mov	r3, r0
 800fdda:	70fb      	strb	r3, [r7, #3]
 800fddc:	460b      	mov	r3, r1
 800fdde:	70bb      	strb	r3, [r7, #2]
 800fde0:	4613      	mov	r3, r2
 800fde2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fde4:	2300      	movs	r3, #0
 800fde6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fde8:	2300      	movs	r3, #0
 800fdea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fdf2:	78bb      	ldrb	r3, [r7, #2]
 800fdf4:	883a      	ldrh	r2, [r7, #0]
 800fdf6:	78f9      	ldrb	r1, [r7, #3]
 800fdf8:	f7f4 f850 	bl	8003e9c <HAL_PCD_EP_Open>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe00:	7bfb      	ldrb	r3, [r7, #15]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f000 f91c 	bl	8010040 <USBD_Get_USB_Status>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}

0800fe16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe16:	b580      	push	{r7, lr}
 800fe18:	b084      	sub	sp, #16
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
 800fe1e:	460b      	mov	r3, r1
 800fe20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe22:	2300      	movs	r3, #0
 800fe24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe26:	2300      	movs	r3, #0
 800fe28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe30:	78fa      	ldrb	r2, [r7, #3]
 800fe32:	4611      	mov	r1, r2
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7f4 f899 	bl	8003f6c <HAL_PCD_EP_Close>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe3e:	7bfb      	ldrb	r3, [r7, #15]
 800fe40:	4618      	mov	r0, r3
 800fe42:	f000 f8fd 	bl	8010040 <USBD_Get_USB_Status>
 800fe46:	4603      	mov	r3, r0
 800fe48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3710      	adds	r7, #16
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b084      	sub	sp, #16
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe6e:	78fa      	ldrb	r2, [r7, #3]
 800fe70:	4611      	mov	r1, r2
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7f4 f951 	bl	800411a <HAL_PCD_EP_SetStall>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f000 f8de 	bl	8010040 <USBD_Get_USB_Status>
 800fe84:	4603      	mov	r3, r0
 800fe86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe88:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b084      	sub	sp, #16
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fea2:	2300      	movs	r3, #0
 800fea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800feac:	78fa      	ldrb	r2, [r7, #3]
 800feae:	4611      	mov	r1, r2
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7f4 f995 	bl	80041e0 <HAL_PCD_EP_ClrStall>
 800feb6:	4603      	mov	r3, r0
 800feb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800feba:	7bfb      	ldrb	r3, [r7, #15]
 800febc:	4618      	mov	r0, r3
 800febe:	f000 f8bf 	bl	8010040 <USBD_Get_USB_Status>
 800fec2:	4603      	mov	r3, r0
 800fec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3710      	adds	r7, #16
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b085      	sub	sp, #20
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	460b      	mov	r3, r1
 800feda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fee2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	da0b      	bge.n	800ff04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800feec:	78fb      	ldrb	r3, [r7, #3]
 800feee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fef2:	68f9      	ldr	r1, [r7, #12]
 800fef4:	4613      	mov	r3, r2
 800fef6:	00db      	lsls	r3, r3, #3
 800fef8:	4413      	add	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	440b      	add	r3, r1
 800fefe:	3316      	adds	r3, #22
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	e00b      	b.n	800ff1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ff04:	78fb      	ldrb	r3, [r7, #3]
 800ff06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff0a:	68f9      	ldr	r1, [r7, #12]
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	00db      	lsls	r3, r3, #3
 800ff10:	4413      	add	r3, r2
 800ff12:	009b      	lsls	r3, r3, #2
 800ff14:	440b      	add	r3, r1
 800ff16:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ff1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3714      	adds	r7, #20
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	460b      	mov	r3, r1
 800ff32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff34:	2300      	movs	r3, #0
 800ff36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff42:	78fa      	ldrb	r2, [r7, #3]
 800ff44:	4611      	mov	r1, r2
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7f3 ff84 	bl	8003e54 <HAL_PCD_SetAddress>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff50:	7bfb      	ldrb	r3, [r7, #15]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f000 f874 	bl	8010040 <USBD_Get_USB_Status>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3710      	adds	r7, #16
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b086      	sub	sp, #24
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	60f8      	str	r0, [r7, #12]
 800ff6e:	607a      	str	r2, [r7, #4]
 800ff70:	603b      	str	r3, [r7, #0]
 800ff72:	460b      	mov	r3, r1
 800ff74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff76:	2300      	movs	r3, #0
 800ff78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ff84:	7af9      	ldrb	r1, [r7, #11]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	f7f4 f88c 	bl	80040a6 <HAL_PCD_EP_Transmit>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff92:	7dfb      	ldrb	r3, [r7, #23]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f000 f853 	bl	8010040 <USBD_Get_USB_Status>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ff9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	607a      	str	r2, [r7, #4]
 800ffb2:	603b      	str	r3, [r7, #0]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ffc6:	7af9      	ldrb	r1, [r7, #11]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	f7f4 f818 	bl	8004000 <HAL_PCD_EP_Receive>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffd4:	7dfb      	ldrb	r3, [r7, #23]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f000 f832 	bl	8010040 <USBD_Get_USB_Status>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffe0:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3718      	adds	r7, #24
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b082      	sub	sp, #8
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
 800fff2:	460b      	mov	r3, r1
 800fff4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fffc:	78fa      	ldrb	r2, [r7, #3]
 800fffe:	4611      	mov	r1, r2
 8010000:	4618      	mov	r0, r3
 8010002:	f7f4 f838 	bl	8004076 <HAL_PCD_EP_GetRxCount>
 8010006:	4603      	mov	r3, r0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3708      	adds	r7, #8
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010018:	4b03      	ldr	r3, [pc, #12]	@ (8010028 <USBD_static_malloc+0x18>)
}
 801001a:	4618      	mov	r0, r3
 801001c:	370c      	adds	r7, #12
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	240068b8 	.word	0x240068b8

0801002c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr

08010040 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010040:	b480      	push	{r7}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
 8010046:	4603      	mov	r3, r0
 8010048:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801004a:	2300      	movs	r3, #0
 801004c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801004e:	79fb      	ldrb	r3, [r7, #7]
 8010050:	2b03      	cmp	r3, #3
 8010052:	d817      	bhi.n	8010084 <USBD_Get_USB_Status+0x44>
 8010054:	a201      	add	r2, pc, #4	@ (adr r2, 801005c <USBD_Get_USB_Status+0x1c>)
 8010056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801005a:	bf00      	nop
 801005c:	0801006d 	.word	0x0801006d
 8010060:	08010073 	.word	0x08010073
 8010064:	08010079 	.word	0x08010079
 8010068:	0801007f 	.word	0x0801007f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]
    break;
 8010070:	e00b      	b.n	801008a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010072:	2303      	movs	r3, #3
 8010074:	73fb      	strb	r3, [r7, #15]
    break;
 8010076:	e008      	b.n	801008a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010078:	2301      	movs	r3, #1
 801007a:	73fb      	strb	r3, [r7, #15]
    break;
 801007c:	e005      	b.n	801008a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801007e:	2303      	movs	r3, #3
 8010080:	73fb      	strb	r3, [r7, #15]
    break;
 8010082:	e002      	b.n	801008a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010084:	2303      	movs	r3, #3
 8010086:	73fb      	strb	r3, [r7, #15]
    break;
 8010088:	bf00      	nop
  }
  return usb_status;
 801008a:	7bfb      	ldrb	r3, [r7, #15]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 801009c:	2200      	movs	r2, #0
 801009e:	2108      	movs	r1, #8
 80100a0:	480a      	ldr	r0, [pc, #40]	@ (80100cc <ad7606_Init+0x34>)
 80100a2:	f7f2 fa57 	bl	8002554 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80100a6:	2001      	movs	r0, #1
 80100a8:	f7f1 fccc 	bl	8001a44 <HAL_Delay>
    AD7606_RST_SET();
 80100ac:	2201      	movs	r2, #1
 80100ae:	2108      	movs	r1, #8
 80100b0:	4806      	ldr	r0, [pc, #24]	@ (80100cc <ad7606_Init+0x34>)
 80100b2:	f7f2 fa4f 	bl	8002554 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80100b6:	2001      	movs	r0, #1
 80100b8:	f7f1 fcc4 	bl	8001a44 <HAL_Delay>
    AD7606_RST_RESET();
 80100bc:	2200      	movs	r2, #0
 80100be:	2108      	movs	r1, #8
 80100c0:	4802      	ldr	r0, [pc, #8]	@ (80100cc <ad7606_Init+0x34>)
 80100c2:	f7f2 fa47 	bl	8002554 <HAL_GPIO_WritePin>
}
 80100c6:	bf00      	nop
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	58021800 	.word	0x58021800

080100d0 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	4613      	mov	r3, r2
 80100dc:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 80100de:	2200      	movs	r2, #0
 80100e0:	2180      	movs	r1, #128	@ 0x80
 80100e2:	4809      	ldr	r0, [pc, #36]	@ (8010108 <ad7606_Read+0x38>)
 80100e4:	f7f2 fa36 	bl	8002554 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 80100e8:	88fa      	ldrh	r2, [r7, #6]
 80100ea:	2364      	movs	r3, #100	@ 0x64
 80100ec:	68b9      	ldr	r1, [r7, #8]
 80100ee:	68f8      	ldr	r0, [r7, #12]
 80100f0:	f7f7 fa1c 	bl	800752c <HAL_SPI_Receive>
    AD7606_CS_SET();
 80100f4:	2201      	movs	r2, #1
 80100f6:	2180      	movs	r1, #128	@ 0x80
 80100f8:	4803      	ldr	r0, [pc, #12]	@ (8010108 <ad7606_Read+0x38>)
 80100fa:	f7f2 fa2b 	bl	8002554 <HAL_GPIO_WritePin>
}
 80100fe:	bf00      	nop
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	58021800 	.word	0x58021800

0801010c <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 8010116:	6839      	ldr	r1, [r7, #0]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f7f7 fe93 	bl	8007e44 <HAL_TIM_PWM_Start>
}
 801011e:	bf00      	nop
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
	...

08010128 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8010128:	b480      	push	{r7}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	460b      	mov	r3, r1
 8010132:	607a      	str	r2, [r7, #4]
 8010134:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8010136:	2300      	movs	r3, #0
 8010138:	617b      	str	r3, [r7, #20]
 801013a:	e03d      	b.n	80101b8 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	005b      	lsls	r3, r3, #1
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	4413      	add	r3, r2
 8010144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010148:	2b00      	cmp	r3, #0
 801014a:	da0f      	bge.n	801016c <ad7606_Convert+0x44>
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	68fa      	ldr	r2, [r7, #12]
 8010152:	4413      	add	r3, r2
 8010154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010158:	b29b      	uxth	r3, r3
 801015a:	425b      	negs	r3, r3
 801015c:	b29b      	uxth	r3, r3
 801015e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010162:	b29b      	uxth	r3, r3
 8010164:	425b      	negs	r3, r3
 8010166:	b29b      	uxth	r3, r3
 8010168:	b21b      	sxth	r3, r3
 801016a:	e005      	b.n	8010178 <ad7606_Convert+0x50>
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	4413      	add	r3, r2
 8010174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010178:	697a      	ldr	r2, [r7, #20]
 801017a:	0052      	lsls	r2, r2, #1
 801017c:	68f9      	ldr	r1, [r7, #12]
 801017e:	440a      	add	r2, r1
 8010180:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	4413      	add	r3, r2
 801018a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801018e:	ee07 3a90 	vmov	s15, r3
 8010192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010196:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801019a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	4413      	add	r3, r2
 80101a6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80101d0 <ad7606_Convert+0xa8>
 80101aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80101ae:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	3301      	adds	r3, #1
 80101b6:	617b      	str	r3, [r7, #20]
 80101b8:	897b      	ldrh	r3, [r7, #10]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	429a      	cmp	r2, r3
 80101be:	dbbd      	blt.n	801013c <ad7606_Convert+0x14>
    }
}
 80101c0:	bf00      	nop
 80101c2:	bf00      	nop
 80101c4:	371c      	adds	r7, #28
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr
 80101ce:	bf00      	nop
 80101d0:	47000000 	.word	0x47000000

080101d4 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 80101d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101d8:	b087      	sub	sp, #28
 80101da:	af00      	add	r7, sp, #0
 80101dc:	60f8      	str	r0, [r7, #12]
 80101de:	460b      	mov	r3, r1
 80101e0:	607a      	str	r2, [r7, #4]
 80101e2:	817b      	strh	r3, [r7, #10]
 80101e4:	466b      	mov	r3, sp
 80101e6:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 80101e8:	8979      	ldrh	r1, [r7, #10]
 80101ea:	460b      	mov	r3, r1
 80101ec:	3b01      	subs	r3, #1
 80101ee:	617b      	str	r3, [r7, #20]
 80101f0:	b28b      	uxth	r3, r1
 80101f2:	2200      	movs	r2, #0
 80101f4:	4698      	mov	r8, r3
 80101f6:	4691      	mov	r9, r2
 80101f8:	f04f 0200 	mov.w	r2, #0
 80101fc:	f04f 0300 	mov.w	r3, #0
 8010200:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8010204:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8010208:	ea4f 1208 	mov.w	r2, r8, lsl #4
 801020c:	b28b      	uxth	r3, r1
 801020e:	2200      	movs	r2, #0
 8010210:	461c      	mov	r4, r3
 8010212:	4615      	mov	r5, r2
 8010214:	f04f 0200 	mov.w	r2, #0
 8010218:	f04f 0300 	mov.w	r3, #0
 801021c:	012b      	lsls	r3, r5, #4
 801021e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8010222:	0122      	lsls	r2, r4, #4
 8010224:	460b      	mov	r3, r1
 8010226:	005b      	lsls	r3, r3, #1
 8010228:	3307      	adds	r3, #7
 801022a:	08db      	lsrs	r3, r3, #3
 801022c:	00db      	lsls	r3, r3, #3
 801022e:	ebad 0d03 	sub.w	sp, sp, r3
 8010232:	466b      	mov	r3, sp
 8010234:	3301      	adds	r3, #1
 8010236:	085b      	lsrs	r3, r3, #1
 8010238:	005b      	lsls	r3, r3, #1
 801023a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 801023c:	897b      	ldrh	r3, [r7, #10]
 801023e:	461a      	mov	r2, r3
 8010240:	6939      	ldr	r1, [r7, #16]
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f7ff ff44 	bl	80100d0 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8010248:	897b      	ldrh	r3, [r7, #10]
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	4619      	mov	r1, r3
 801024e:	6938      	ldr	r0, [r7, #16]
 8010250:	f7ff ff6a 	bl	8010128 <ad7606_Convert>
 8010254:	46b5      	mov	sp, r6
}
 8010256:	bf00      	nop
 8010258:	371c      	adds	r7, #28
 801025a:	46bd      	mov	sp, r7
 801025c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010260 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b088      	sub	sp, #32
 8010264:	af04      	add	r7, sp, #16
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	460b      	mov	r3, r1
 801026a:	70fb      	strb	r3, [r7, #3]
 801026c:	4613      	mov	r3, r2
 801026e:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8010270:	2300      	movs	r3, #0
 8010272:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8010274:	883b      	ldrh	r3, [r7, #0]
 8010276:	0a1b      	lsrs	r3, r3, #8
 8010278:	b29b      	uxth	r3, r3
 801027a:	b2db      	uxtb	r3, r3
 801027c:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 801027e:	883b      	ldrh	r3, [r7, #0]
 8010280:	b2db      	uxtb	r3, r3
 8010282:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	69d8      	ldr	r0, [r3, #28]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801028e:	4619      	mov	r1, r3
 8010290:	78fb      	ldrb	r3, [r7, #3]
 8010292:	b29a      	uxth	r2, r3
 8010294:	2364      	movs	r3, #100	@ 0x64
 8010296:	9302      	str	r3, [sp, #8]
 8010298:	2302      	movs	r3, #2
 801029a:	9301      	str	r3, [sp, #4]
 801029c:	f107 030c 	add.w	r3, r7, #12
 80102a0:	9300      	str	r3, [sp, #0]
 80102a2:	2301      	movs	r3, #1
 80102a4:	f7f2 fa40 	bl	8002728 <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 80102a8:	78fb      	ldrb	r3, [r7, #3]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d105      	bne.n	80102ba <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 80102ae:	883b      	ldrh	r3, [r7, #0]
 80102b0:	f003 0310 	and.w	r3, r3, #16
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	82da      	strh	r2, [r3, #22]
	}
}
 80102ba:	bf00      	nop
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}

080102c2 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 80102c2:	b580      	push	{r7, lr}
 80102c4:	b082      	sub	sp, #8
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	881b      	ldrh	r3, [r3, #0]
 80102ce:	461a      	mov	r2, r3
 80102d0:	2100      	movs	r1, #0
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff ffc4 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	885b      	ldrh	r3, [r3, #2]
 80102dc:	461a      	mov	r2, r3
 80102de:	2101      	movs	r1, #1
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f7ff ffbd 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	889b      	ldrh	r3, [r3, #4]
 80102ea:	461a      	mov	r2, r3
 80102ec:	2102      	movs	r1, #2
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7ff ffb6 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	88db      	ldrh	r3, [r3, #6]
 80102f8:	461a      	mov	r2, r3
 80102fa:	2103      	movs	r1, #3
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7ff ffaf 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	891b      	ldrh	r3, [r3, #8]
 8010306:	461a      	mov	r2, r3
 8010308:	210b      	movs	r1, #11
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7ff ffa8 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	895b      	ldrh	r3, [r3, #10]
 8010314:	461a      	mov	r2, r3
 8010316:	210c      	movs	r1, #12
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f7ff ffa1 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	899b      	ldrh	r3, [r3, #12]
 8010322:	461a      	mov	r2, r3
 8010324:	210d      	movs	r1, #13
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f7ff ff9a 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	89db      	ldrh	r3, [r3, #14]
 8010330:	461a      	mov	r2, r3
 8010332:	210e      	movs	r1, #14
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff ff93 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	8a1b      	ldrh	r3, [r3, #16]
 801033e:	461a      	mov	r2, r3
 8010340:	210f      	movs	r1, #15
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7ff ff8c 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8a5b      	ldrh	r3, [r3, #18]
 801034c:	461a      	mov	r2, r3
 801034e:	2110      	movs	r1, #16
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f7ff ff85 	bl	8010260 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	8a9b      	ldrh	r3, [r3, #20]
 801035a:	461a      	mov	r2, r3
 801035c:	2111      	movs	r1, #17
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff ff7e 	bl	8010260 <INA228_writeReg>
}
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 801036c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010370:	b08c      	sub	sp, #48	@ 0x30
 8010372:	af04      	add	r7, sp, #16
 8010374:	6078      	str	r0, [r7, #4]
 8010376:	460b      	mov	r3, r1
 8010378:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 801037a:	2300      	movs	r3, #0
 801037c:	60fb      	str	r3, [r7, #12]
 801037e:	2300      	movs	r3, #0
 8010380:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010388:	4618      	mov	r0, r3
 801038a:	78fb      	ldrb	r3, [r7, #3]
 801038c:	b29a      	uxth	r2, r3
 801038e:	78fb      	ldrb	r3, [r7, #3]
 8010390:	4921      	ldr	r1, [pc, #132]	@ (8010418 <INA228_readReg+0xac>)
 8010392:	5ccb      	ldrb	r3, [r1, r3]
 8010394:	4619      	mov	r1, r3
 8010396:	2364      	movs	r3, #100	@ 0x64
 8010398:	9302      	str	r3, [sp, #8]
 801039a:	9101      	str	r1, [sp, #4]
 801039c:	f107 030c 	add.w	r3, r7, #12
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	2301      	movs	r3, #1
 80103a4:	4601      	mov	r1, r0
 80103a6:	481d      	ldr	r0, [pc, #116]	@ (801041c <INA228_readReg+0xb0>)
 80103a8:	f7f2 fad2 	bl	8002950 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 80103ac:	7b3b      	ldrb	r3, [r7, #12]
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	2200      	movs	r2, #0
 80103b2:	469a      	mov	sl, r3
 80103b4:	4693      	mov	fp, r2
 80103b6:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80103ba:	2301      	movs	r3, #1
 80103bc:	617b      	str	r3, [r7, #20]
 80103be:	e01b      	b.n	80103f8 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 80103c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80103c4:	f04f 0200 	mov.w	r2, #0
 80103c8:	f04f 0300 	mov.w	r3, #0
 80103cc:	020b      	lsls	r3, r1, #8
 80103ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80103d2:	0202      	lsls	r2, r0, #8
 80103d4:	f107 000c 	add.w	r0, r7, #12
 80103d8:	6979      	ldr	r1, [r7, #20]
 80103da:	4401      	add	r1, r0
 80103dc:	7809      	ldrb	r1, [r1, #0]
 80103de:	b2c9      	uxtb	r1, r1
 80103e0:	2000      	movs	r0, #0
 80103e2:	460c      	mov	r4, r1
 80103e4:	4605      	mov	r5, r0
 80103e6:	ea42 0804 	orr.w	r8, r2, r4
 80103ea:	ea43 0905 	orr.w	r9, r3, r5
 80103ee:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	3301      	adds	r3, #1
 80103f6:	617b      	str	r3, [r7, #20]
 80103f8:	78fb      	ldrb	r3, [r7, #3]
 80103fa:	4a07      	ldr	r2, [pc, #28]	@ (8010418 <INA228_readReg+0xac>)
 80103fc:	5cd3      	ldrb	r3, [r2, r3]
 80103fe:	461a      	mov	r2, r3
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	4293      	cmp	r3, r2
 8010404:	dbdc      	blt.n	80103c0 <INA228_readReg+0x54>
	}

	return value;
 8010406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 801040a:	4610      	mov	r0, r2
 801040c:	4619      	mov	r1, r3
 801040e:	3720      	adds	r7, #32
 8010410:	46bd      	mov	sp, r7
 8010412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010416:	bf00      	nop
 8010418:	08014a4c 	.word	0x08014a4c
 801041c:	24000354 	.word	0x24000354

08010420 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b086      	sub	sp, #24
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 8010428:	2105      	movs	r1, #5
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7ff ff9e 	bl	801036c <INA228_readReg>
 8010430:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010438:	f04f 0200 	mov.w	r2, #0
 801043c:	f04f 0300 	mov.w	r3, #0
 8010440:	0902      	lsrs	r2, r0, #4
 8010442:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8010446:	090b      	lsrs	r3, r1, #4
 8010448:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 801044c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010450:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010454:	f173 0300 	sbcs.w	r3, r3, #0
 8010458:	d30c      	bcc.n	8010474 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 801045a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801045e:	f7f0 f85f 	bl	8000520 <__aeabi_ul2f>
 8010462:	ee07 0a10 	vmov	s14, r0
 8010466:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80104a8 <INA228_getVBUS_V+0x88>
 801046a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801046e:	edc7 7a05 	vstr	s15, [r7, #20]
 8010472:	e005      	b.n	8010480 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 8010474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010478:	f7f0 f852 	bl	8000520 <__aeabi_ul2f>
 801047c:	4603      	mov	r3, r0
 801047e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 8010480:	edd7 7a05 	vldr	s15, [r7, #20]
 8010484:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80104ac <INA228_getVBUS_V+0x8c>
 8010488:	ee27 7a87 	vmul.f32	s14, s15, s14
 801048c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80104b0 <INA228_getVBUS_V+0x90>
 8010490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010494:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	ee07 3a90 	vmov	s15, r3
}
 801049e:	eeb0 0a67 	vmov.f32	s0, s15
 80104a2:	3718      	adds	r7, #24
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	49800000 	.word	0x49800000
 80104ac:	43435000 	.word	0x43435000
 80104b0:	49742400 	.word	0x49742400

080104b4 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b086      	sub	sp, #24
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 80104bc:	2107      	movs	r1, #7
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7ff ff54 	bl	801036c <INA228_readReg>
 80104c4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 80104c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80104cc:	f04f 0200 	mov.w	r2, #0
 80104d0:	f04f 0300 	mov.w	r3, #0
 80104d4:	0902      	lsrs	r2, r0, #4
 80104d6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80104da:	090b      	lsrs	r3, r1, #4
 80104dc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 80104e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80104e4:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80104e8:	f173 0300 	sbcs.w	r3, r3, #0
 80104ec:	d30c      	bcc.n	8010508 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 80104ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80104f2:	f7f0 f815 	bl	8000520 <__aeabi_ul2f>
 80104f6:	ee07 0a10 	vmov	s14, r0
 80104fa:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010524 <INA228_getCURRENT_signedLSB+0x70>
 80104fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010502:	edc7 7a05 	vstr	s15, [r7, #20]
 8010506:	e005      	b.n	8010514 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 8010508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801050c:	f7f0 f808 	bl	8000520 <__aeabi_ul2f>
 8010510:	4603      	mov	r3, r0
 8010512:	617b      	str	r3, [r7, #20]
	}

	return data;
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	ee07 3a90 	vmov	s15, r3
}
 801051a:	eeb0 0a67 	vmov.f32	s0, s15
 801051e:	3718      	adds	r7, #24
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	49800000 	.word	0x49800000

08010528 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7ff ffbf 	bl	80104b4 <INA228_getCURRENT_signedLSB>
 8010536:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	edd3 7a06 	vldr	s15, [r3, #24]
 8010540:	ed97 7a03 	vldr	s14, [r7, #12]
 8010544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010548:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	ee07 3a90 	vmov	s15, r3
}
 8010552:	eeb0 0a67 	vmov.f32	s0, s15
 8010556:	3710      	adds	r7, #16
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	4603      	mov	r3, r0
 8010564:	460a      	mov	r2, r1
 8010566:	71fb      	strb	r3, [r7, #7]
 8010568:	4613      	mov	r3, r2
 801056a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 801056c:	1dfb      	adds	r3, r7, #7
 801056e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 8010570:	79bb      	ldrb	r3, [r7, #6]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d005      	beq.n	8010582 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 8010576:	2201      	movs	r2, #1
 8010578:	2140      	movs	r1, #64	@ 0x40
 801057a:	4811      	ldr	r0, [pc, #68]	@ (80105c0 <OLED_WR_Byte+0x64>)
 801057c:	f7f1 ffea 	bl	8002554 <HAL_GPIO_WritePin>
 8010580:	e004      	b.n	801058c <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 8010582:	2200      	movs	r2, #0
 8010584:	2140      	movs	r1, #64	@ 0x40
 8010586:	480e      	ldr	r0, [pc, #56]	@ (80105c0 <OLED_WR_Byte+0x64>)
 8010588:	f7f1 ffe4 	bl	8002554 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 801058c:	2200      	movs	r2, #0
 801058e:	2102      	movs	r1, #2
 8010590:	480c      	ldr	r0, [pc, #48]	@ (80105c4 <OLED_WR_Byte+0x68>)
 8010592:	f7f1 ffdf 	bl	8002554 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 8010596:	23c8      	movs	r3, #200	@ 0xc8
 8010598:	2201      	movs	r2, #1
 801059a:	68f9      	ldr	r1, [r7, #12]
 801059c:	480a      	ldr	r0, [pc, #40]	@ (80105c8 <OLED_WR_Byte+0x6c>)
 801059e:	f7f6 fdd7 	bl	8007150 <HAL_SPI_Transmit>

	OLED_CS_Set();
 80105a2:	2201      	movs	r2, #1
 80105a4:	2102      	movs	r1, #2
 80105a6:	4807      	ldr	r0, [pc, #28]	@ (80105c4 <OLED_WR_Byte+0x68>)
 80105a8:	f7f1 ffd4 	bl	8002554 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 80105ac:	2201      	movs	r2, #1
 80105ae:	2140      	movs	r1, #64	@ 0x40
 80105b0:	4803      	ldr	r0, [pc, #12]	@ (80105c0 <OLED_WR_Byte+0x64>)
 80105b2:	f7f1 ffcf 	bl	8002554 <HAL_GPIO_WritePin>
}
 80105b6:	bf00      	nop
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	58022000 	.word	0x58022000
 80105c4:	58020400 	.word	0x58020400
 80105c8:	240003a8 	.word	0x240003a8

080105cc <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 80105d2:	2300      	movs	r3, #0
 80105d4:	71fb      	strb	r3, [r7, #7]
 80105d6:	e026      	b.n	8010626 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 80105d8:	79fb      	ldrb	r3, [r7, #7]
 80105da:	3b50      	subs	r3, #80	@ 0x50
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2100      	movs	r1, #0
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff ffbb 	bl	801055c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 80105e6:	2100      	movs	r1, #0
 80105e8:	2000      	movs	r0, #0
 80105ea:	f7ff ffb7 	bl	801055c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 80105ee:	2100      	movs	r1, #0
 80105f0:	2010      	movs	r0, #16
 80105f2:	f7ff ffb3 	bl	801055c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80105f6:	2300      	movs	r3, #0
 80105f8:	71bb      	strb	r3, [r7, #6]
 80105fa:	e00d      	b.n	8010618 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 80105fc:	79ba      	ldrb	r2, [r7, #6]
 80105fe:	79fb      	ldrb	r3, [r7, #7]
 8010600:	490d      	ldr	r1, [pc, #52]	@ (8010638 <OLED_Refresh+0x6c>)
 8010602:	00d2      	lsls	r2, r2, #3
 8010604:	440a      	add	r2, r1
 8010606:	4413      	add	r3, r2
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2101      	movs	r1, #1
 801060c:	4618      	mov	r0, r3
 801060e:	f7ff ffa5 	bl	801055c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010612:	79bb      	ldrb	r3, [r7, #6]
 8010614:	3301      	adds	r3, #1
 8010616:	71bb      	strb	r3, [r7, #6]
 8010618:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801061c:	2b00      	cmp	r3, #0
 801061e:	daed      	bge.n	80105fc <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8010620:	79fb      	ldrb	r3, [r7, #7]
 8010622:	3301      	adds	r3, #1
 8010624:	71fb      	strb	r3, [r7, #7]
 8010626:	79fb      	ldrb	r3, [r7, #7]
 8010628:	2b07      	cmp	r3, #7
 801062a:	d9d5      	bls.n	80105d8 <OLED_Refresh+0xc>
	}
}
 801062c:	bf00      	nop
 801062e:	bf00      	nop
 8010630:	3708      	adds	r7, #8
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	24006ad8 	.word	0x24006ad8

0801063c <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010642:	2300      	movs	r3, #0
 8010644:	71fb      	strb	r3, [r7, #7]
 8010646:	e014      	b.n	8010672 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8010648:	2300      	movs	r3, #0
 801064a:	71bb      	strb	r3, [r7, #6]
 801064c:	e00a      	b.n	8010664 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 801064e:	79ba      	ldrb	r2, [r7, #6]
 8010650:	79fb      	ldrb	r3, [r7, #7]
 8010652:	490c      	ldr	r1, [pc, #48]	@ (8010684 <OLED_Clear+0x48>)
 8010654:	00d2      	lsls	r2, r2, #3
 8010656:	440a      	add	r2, r1
 8010658:	4413      	add	r3, r2
 801065a:	2200      	movs	r2, #0
 801065c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 801065e:	79bb      	ldrb	r3, [r7, #6]
 8010660:	3301      	adds	r3, #1
 8010662:	71bb      	strb	r3, [r7, #6]
 8010664:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010668:	2b00      	cmp	r3, #0
 801066a:	daf0      	bge.n	801064e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 801066c:	79fb      	ldrb	r3, [r7, #7]
 801066e:	3301      	adds	r3, #1
 8010670:	71fb      	strb	r3, [r7, #7]
 8010672:	79fb      	ldrb	r3, [r7, #7]
 8010674:	2b07      	cmp	r3, #7
 8010676:	d9e7      	bls.n	8010648 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8010678:	f7ff ffa8 	bl	80105cc <OLED_Refresh>
}
 801067c:	bf00      	nop
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	24006ad8 	.word	0x24006ad8

08010688 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	4603      	mov	r3, r0
 8010690:	460a      	mov	r2, r1
 8010692:	71fb      	strb	r3, [r7, #7]
 8010694:	4613      	mov	r3, r2
 8010696:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010698:	79bb      	ldrb	r3, [r7, #6]
 801069a:	08db      	lsrs	r3, r3, #3
 801069c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 801069e:	79bb      	ldrb	r3, [r7, #6]
 80106a0:	f003 0307 	and.w	r3, r3, #7
 80106a4:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 80106a6:	7bbb      	ldrb	r3, [r7, #14]
 80106a8:	2201      	movs	r2, #1
 80106aa:	fa02 f303 	lsl.w	r3, r2, r3
 80106ae:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 80106b0:	79fa      	ldrb	r2, [r7, #7]
 80106b2:	7bfb      	ldrb	r3, [r7, #15]
 80106b4:	490a      	ldr	r1, [pc, #40]	@ (80106e0 <OLED_DrawPoint+0x58>)
 80106b6:	00d2      	lsls	r2, r2, #3
 80106b8:	440a      	add	r2, r1
 80106ba:	4413      	add	r3, r2
 80106bc:	7818      	ldrb	r0, [r3, #0]
 80106be:	79fa      	ldrb	r2, [r7, #7]
 80106c0:	7bfb      	ldrb	r3, [r7, #15]
 80106c2:	7b79      	ldrb	r1, [r7, #13]
 80106c4:	4301      	orrs	r1, r0
 80106c6:	b2c8      	uxtb	r0, r1
 80106c8:	4905      	ldr	r1, [pc, #20]	@ (80106e0 <OLED_DrawPoint+0x58>)
 80106ca:	00d2      	lsls	r2, r2, #3
 80106cc:	440a      	add	r2, r1
 80106ce:	4413      	add	r3, r2
 80106d0:	4602      	mov	r2, r0
 80106d2:	701a      	strb	r2, [r3, #0]
}
 80106d4:	bf00      	nop
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	24006ad8 	.word	0x24006ad8

080106e4 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	4603      	mov	r3, r0
 80106ec:	460a      	mov	r2, r1
 80106ee:	71fb      	strb	r3, [r7, #7]
 80106f0:	4613      	mov	r3, r2
 80106f2:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 80106f4:	79bb      	ldrb	r3, [r7, #6]
 80106f6:	08db      	lsrs	r3, r3, #3
 80106f8:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 80106fa:	79bb      	ldrb	r3, [r7, #6]
 80106fc:	f003 0307 	and.w	r3, r3, #7
 8010700:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010702:	7bbb      	ldrb	r3, [r7, #14]
 8010704:	2201      	movs	r2, #1
 8010706:	fa02 f303 	lsl.w	r3, r2, r3
 801070a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 801070c:	79fa      	ldrb	r2, [r7, #7]
 801070e:	7bfb      	ldrb	r3, [r7, #15]
 8010710:	491b      	ldr	r1, [pc, #108]	@ (8010780 <OLED_ClearPoint+0x9c>)
 8010712:	00d2      	lsls	r2, r2, #3
 8010714:	440a      	add	r2, r1
 8010716:	4413      	add	r3, r2
 8010718:	7819      	ldrb	r1, [r3, #0]
 801071a:	79fa      	ldrb	r2, [r7, #7]
 801071c:	7bfb      	ldrb	r3, [r7, #15]
 801071e:	43c9      	mvns	r1, r1
 8010720:	b2c8      	uxtb	r0, r1
 8010722:	4917      	ldr	r1, [pc, #92]	@ (8010780 <OLED_ClearPoint+0x9c>)
 8010724:	00d2      	lsls	r2, r2, #3
 8010726:	440a      	add	r2, r1
 8010728:	4413      	add	r3, r2
 801072a:	4602      	mov	r2, r0
 801072c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 801072e:	79fa      	ldrb	r2, [r7, #7]
 8010730:	7bfb      	ldrb	r3, [r7, #15]
 8010732:	4913      	ldr	r1, [pc, #76]	@ (8010780 <OLED_ClearPoint+0x9c>)
 8010734:	00d2      	lsls	r2, r2, #3
 8010736:	440a      	add	r2, r1
 8010738:	4413      	add	r3, r2
 801073a:	7818      	ldrb	r0, [r3, #0]
 801073c:	79fa      	ldrb	r2, [r7, #7]
 801073e:	7bfb      	ldrb	r3, [r7, #15]
 8010740:	7b79      	ldrb	r1, [r7, #13]
 8010742:	4301      	orrs	r1, r0
 8010744:	b2c8      	uxtb	r0, r1
 8010746:	490e      	ldr	r1, [pc, #56]	@ (8010780 <OLED_ClearPoint+0x9c>)
 8010748:	00d2      	lsls	r2, r2, #3
 801074a:	440a      	add	r2, r1
 801074c:	4413      	add	r3, r2
 801074e:	4602      	mov	r2, r0
 8010750:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010752:	79fa      	ldrb	r2, [r7, #7]
 8010754:	7bfb      	ldrb	r3, [r7, #15]
 8010756:	490a      	ldr	r1, [pc, #40]	@ (8010780 <OLED_ClearPoint+0x9c>)
 8010758:	00d2      	lsls	r2, r2, #3
 801075a:	440a      	add	r2, r1
 801075c:	4413      	add	r3, r2
 801075e:	7819      	ldrb	r1, [r3, #0]
 8010760:	79fa      	ldrb	r2, [r7, #7]
 8010762:	7bfb      	ldrb	r3, [r7, #15]
 8010764:	43c9      	mvns	r1, r1
 8010766:	b2c8      	uxtb	r0, r1
 8010768:	4905      	ldr	r1, [pc, #20]	@ (8010780 <OLED_ClearPoint+0x9c>)
 801076a:	00d2      	lsls	r2, r2, #3
 801076c:	440a      	add	r2, r1
 801076e:	4413      	add	r3, r2
 8010770:	4602      	mov	r2, r0
 8010772:	701a      	strb	r2, [r3, #0]
}
 8010774:	bf00      	nop
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr
 8010780:	24006ad8 	.word	0x24006ad8

08010784 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8010784:	b590      	push	{r4, r7, lr}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	4604      	mov	r4, r0
 801078c:	4608      	mov	r0, r1
 801078e:	4611      	mov	r1, r2
 8010790:	461a      	mov	r2, r3
 8010792:	4623      	mov	r3, r4
 8010794:	71fb      	strb	r3, [r7, #7]
 8010796:	4603      	mov	r3, r0
 8010798:	71bb      	strb	r3, [r7, #6]
 801079a:	460b      	mov	r3, r1
 801079c:	717b      	strb	r3, [r7, #5]
 801079e:	4613      	mov	r3, r2
 80107a0:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 80107a2:	79bb      	ldrb	r3, [r7, #6]
 80107a4:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 80107a6:	793b      	ldrb	r3, [r7, #4]
 80107a8:	08db      	lsrs	r3, r3, #3
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	461a      	mov	r2, r3
 80107ae:	793b      	ldrb	r3, [r7, #4]
 80107b0:	f003 0307 	and.w	r3, r3, #7
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	bf14      	ite	ne
 80107ba:	2301      	movne	r3, #1
 80107bc:	2300      	moveq	r3, #0
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	4413      	add	r3, r2
 80107c2:	b2da      	uxtb	r2, r3
 80107c4:	793b      	ldrb	r3, [r7, #4]
 80107c6:	085b      	lsrs	r3, r3, #1
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	fb12 f303 	smulbb	r3, r2, r3
 80107ce:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 80107d0:	797b      	ldrb	r3, [r7, #5]
 80107d2:	3b20      	subs	r3, #32
 80107d4:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 80107d6:	2300      	movs	r3, #0
 80107d8:	73fb      	strb	r3, [r7, #15]
 80107da:	e057      	b.n	801088c <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 80107dc:	793b      	ldrb	r3, [r7, #4]
 80107de:	2b0c      	cmp	r3, #12
 80107e0:	d10b      	bne.n	80107fa <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 80107e2:	7aba      	ldrb	r2, [r7, #10]
 80107e4:	7bf9      	ldrb	r1, [r7, #15]
 80107e6:	482e      	ldr	r0, [pc, #184]	@ (80108a0 <OLED_ShowChar+0x11c>)
 80107e8:	4613      	mov	r3, r2
 80107ea:	005b      	lsls	r3, r3, #1
 80107ec:	4413      	add	r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	4403      	add	r3, r0
 80107f2:	440b      	add	r3, r1
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	737b      	strb	r3, [r7, #13]
 80107f8:	e019      	b.n	801082e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 80107fa:	793b      	ldrb	r3, [r7, #4]
 80107fc:	2b10      	cmp	r3, #16
 80107fe:	d108      	bne.n	8010812 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 8010800:	7aba      	ldrb	r2, [r7, #10]
 8010802:	7bfb      	ldrb	r3, [r7, #15]
 8010804:	4927      	ldr	r1, [pc, #156]	@ (80108a4 <OLED_ShowChar+0x120>)
 8010806:	0112      	lsls	r2, r2, #4
 8010808:	440a      	add	r2, r1
 801080a:	4413      	add	r3, r2
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	737b      	strb	r3, [r7, #13]
 8010810:	e00d      	b.n	801082e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8010812:	793b      	ldrb	r3, [r7, #4]
 8010814:	2b18      	cmp	r3, #24
 8010816:	d13e      	bne.n	8010896 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 8010818:	7aba      	ldrb	r2, [r7, #10]
 801081a:	7bf9      	ldrb	r1, [r7, #15]
 801081c:	4822      	ldr	r0, [pc, #136]	@ (80108a8 <OLED_ShowChar+0x124>)
 801081e:	4613      	mov	r3, r2
 8010820:	00db      	lsls	r3, r3, #3
 8010822:	4413      	add	r3, r2
 8010824:	009b      	lsls	r3, r3, #2
 8010826:	4403      	add	r3, r0
 8010828:	440b      	add	r3, r1
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 801082e:	2300      	movs	r3, #0
 8010830:	73bb      	strb	r3, [r7, #14]
 8010832:	e025      	b.n	8010880 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8010834:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010838:	2b00      	cmp	r3, #0
 801083a:	da06      	bge.n	801084a <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 801083c:	79ba      	ldrb	r2, [r7, #6]
 801083e:	79fb      	ldrb	r3, [r7, #7]
 8010840:	4611      	mov	r1, r2
 8010842:	4618      	mov	r0, r3
 8010844:	f7ff ff20 	bl	8010688 <OLED_DrawPoint>
 8010848:	e005      	b.n	8010856 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 801084a:	79ba      	ldrb	r2, [r7, #6]
 801084c:	79fb      	ldrb	r3, [r7, #7]
 801084e:	4611      	mov	r1, r2
 8010850:	4618      	mov	r0, r3
 8010852:	f7ff ff47 	bl	80106e4 <OLED_ClearPoint>
			temp <<= 1;
 8010856:	7b7b      	ldrb	r3, [r7, #13]
 8010858:	005b      	lsls	r3, r3, #1
 801085a:	737b      	strb	r3, [r7, #13]
			y++;
 801085c:	79bb      	ldrb	r3, [r7, #6]
 801085e:	3301      	adds	r3, #1
 8010860:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010862:	79ba      	ldrb	r2, [r7, #6]
 8010864:	7b3b      	ldrb	r3, [r7, #12]
 8010866:	1ad2      	subs	r2, r2, r3
 8010868:	793b      	ldrb	r3, [r7, #4]
 801086a:	429a      	cmp	r2, r3
 801086c:	d105      	bne.n	801087a <OLED_ShowChar+0xf6>
			{
				y = y0;
 801086e:	7b3b      	ldrb	r3, [r7, #12]
 8010870:	71bb      	strb	r3, [r7, #6]
				x++;
 8010872:	79fb      	ldrb	r3, [r7, #7]
 8010874:	3301      	adds	r3, #1
 8010876:	71fb      	strb	r3, [r7, #7]
				break;
 8010878:	e005      	b.n	8010886 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 801087a:	7bbb      	ldrb	r3, [r7, #14]
 801087c:	3301      	adds	r3, #1
 801087e:	73bb      	strb	r3, [r7, #14]
 8010880:	7bbb      	ldrb	r3, [r7, #14]
 8010882:	2b07      	cmp	r3, #7
 8010884:	d9d6      	bls.n	8010834 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010886:	7bfb      	ldrb	r3, [r7, #15]
 8010888:	3301      	adds	r3, #1
 801088a:	73fb      	strb	r3, [r7, #15]
 801088c:	7bfa      	ldrb	r2, [r7, #15]
 801088e:	7afb      	ldrb	r3, [r7, #11]
 8010890:	429a      	cmp	r2, r3
 8010892:	d3a3      	bcc.n	80107dc <OLED_ShowChar+0x58>
 8010894:	e000      	b.n	8010898 <OLED_ShowChar+0x114>
			return;
 8010896:	bf00      	nop
			}
		}
	}
}
 8010898:	3714      	adds	r7, #20
 801089a:	46bd      	mov	sp, r7
 801089c:	bd90      	pop	{r4, r7, pc}
 801089e:	bf00      	nop
 80108a0:	08014a8c 	.word	0x08014a8c
 80108a4:	08014f00 	.word	0x08014f00
 80108a8:	080154f0 	.word	0x080154f0

080108ac <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	603a      	str	r2, [r7, #0]
 80108b4:	461a      	mov	r2, r3
 80108b6:	4603      	mov	r3, r0
 80108b8:	71fb      	strb	r3, [r7, #7]
 80108ba:	460b      	mov	r3, r1
 80108bc:	71bb      	strb	r3, [r7, #6]
 80108be:	4613      	mov	r3, r2
 80108c0:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 80108c2:	e01b      	b.n	80108fc <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	781a      	ldrb	r2, [r3, #0]
 80108c8:	797b      	ldrb	r3, [r7, #5]
 80108ca:	79b9      	ldrb	r1, [r7, #6]
 80108cc:	79f8      	ldrb	r0, [r7, #7]
 80108ce:	f7ff ff59 	bl	8010784 <OLED_ShowChar>
		x += size1 / 2;
 80108d2:	797b      	ldrb	r3, [r7, #5]
 80108d4:	085b      	lsrs	r3, r3, #1
 80108d6:	b2da      	uxtb	r2, r3
 80108d8:	79fb      	ldrb	r3, [r7, #7]
 80108da:	4413      	add	r3, r2
 80108dc:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 80108de:	79fa      	ldrb	r2, [r7, #7]
 80108e0:	797b      	ldrb	r3, [r7, #5]
 80108e2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80108e6:	429a      	cmp	r2, r3
 80108e8:	dd05      	ble.n	80108f6 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 80108ea:	2302      	movs	r3, #2
 80108ec:	71fb      	strb	r3, [r7, #7]
			y += size1;
 80108ee:	79ba      	ldrb	r2, [r7, #6]
 80108f0:	797b      	ldrb	r3, [r7, #5]
 80108f2:	4413      	add	r3, r2
 80108f4:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	3301      	adds	r3, #1
 80108fa:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	2b1f      	cmp	r3, #31
 8010902:	d903      	bls.n	801090c <OLED_ShowString+0x60>
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	2b7e      	cmp	r3, #126	@ 0x7e
 801090a:	d9db      	bls.n	80108c4 <OLED_ShowString+0x18>
	}
}
 801090c:	bf00      	nop
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 8010918:	2200      	movs	r2, #0
 801091a:	2120      	movs	r1, #32
 801091c:	483f      	ldr	r0, [pc, #252]	@ (8010a1c <OLED_Init+0x108>)
 801091e:	f7f1 fe19 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8010922:	20c8      	movs	r0, #200	@ 0xc8
 8010924:	f7f1 f88e 	bl	8001a44 <HAL_Delay>
	OLED_RES_Set();
 8010928:	2201      	movs	r2, #1
 801092a:	2120      	movs	r1, #32
 801092c:	483b      	ldr	r0, [pc, #236]	@ (8010a1c <OLED_Init+0x108>)
 801092e:	f7f1 fe11 	bl	8002554 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8010932:	2100      	movs	r1, #0
 8010934:	20ae      	movs	r0, #174	@ 0xae
 8010936:	f7ff fe11 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 801093a:	2100      	movs	r1, #0
 801093c:	2000      	movs	r0, #0
 801093e:	f7ff fe0d 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8010942:	2100      	movs	r1, #0
 8010944:	2010      	movs	r0, #16
 8010946:	f7ff fe09 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 801094a:	2100      	movs	r1, #0
 801094c:	2040      	movs	r0, #64	@ 0x40
 801094e:	f7ff fe05 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8010952:	2100      	movs	r1, #0
 8010954:	2081      	movs	r0, #129	@ 0x81
 8010956:	f7ff fe01 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 801095a:	2100      	movs	r1, #0
 801095c:	20cf      	movs	r0, #207	@ 0xcf
 801095e:	f7ff fdfd 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010962:	2100      	movs	r1, #0
 8010964:	20a1      	movs	r0, #161	@ 0xa1
 8010966:	f7ff fdf9 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 801096a:	2100      	movs	r1, #0
 801096c:	20c8      	movs	r0, #200	@ 0xc8
 801096e:	f7ff fdf5 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010972:	2100      	movs	r1, #0
 8010974:	20a6      	movs	r0, #166	@ 0xa6
 8010976:	f7ff fdf1 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 801097a:	2100      	movs	r1, #0
 801097c:	20a8      	movs	r0, #168	@ 0xa8
 801097e:	f7ff fded 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010982:	2100      	movs	r1, #0
 8010984:	203f      	movs	r0, #63	@ 0x3f
 8010986:	f7ff fde9 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 801098a:	2100      	movs	r1, #0
 801098c:	20d3      	movs	r0, #211	@ 0xd3
 801098e:	f7ff fde5 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010992:	2100      	movs	r1, #0
 8010994:	2000      	movs	r0, #0
 8010996:	f7ff fde1 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 801099a:	2100      	movs	r1, #0
 801099c:	20d5      	movs	r0, #213	@ 0xd5
 801099e:	f7ff fddd 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 80109a2:	2100      	movs	r1, #0
 80109a4:	2080      	movs	r0, #128	@ 0x80
 80109a6:	f7ff fdd9 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 80109aa:	2100      	movs	r1, #0
 80109ac:	20d9      	movs	r0, #217	@ 0xd9
 80109ae:	f7ff fdd5 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80109b2:	2100      	movs	r1, #0
 80109b4:	20f1      	movs	r0, #241	@ 0xf1
 80109b6:	f7ff fdd1 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 80109ba:	2100      	movs	r1, #0
 80109bc:	20da      	movs	r0, #218	@ 0xda
 80109be:	f7ff fdcd 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 80109c2:	2100      	movs	r1, #0
 80109c4:	2012      	movs	r0, #18
 80109c6:	f7ff fdc9 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 80109ca:	2100      	movs	r1, #0
 80109cc:	20db      	movs	r0, #219	@ 0xdb
 80109ce:	f7ff fdc5 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 80109d2:	2100      	movs	r1, #0
 80109d4:	2040      	movs	r0, #64	@ 0x40
 80109d6:	f7ff fdc1 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 80109da:	2100      	movs	r1, #0
 80109dc:	2020      	movs	r0, #32
 80109de:	f7ff fdbd 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 80109e2:	2100      	movs	r1, #0
 80109e4:	2002      	movs	r0, #2
 80109e6:	f7ff fdb9 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 80109ea:	2100      	movs	r1, #0
 80109ec:	208d      	movs	r0, #141	@ 0x8d
 80109ee:	f7ff fdb5 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 80109f2:	2100      	movs	r1, #0
 80109f4:	2014      	movs	r0, #20
 80109f6:	f7ff fdb1 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 80109fa:	2100      	movs	r1, #0
 80109fc:	20a4      	movs	r0, #164	@ 0xa4
 80109fe:	f7ff fdad 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8010a02:	2100      	movs	r1, #0
 8010a04:	20a6      	movs	r0, #166	@ 0xa6
 8010a06:	f7ff fda9 	bl	801055c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	20af      	movs	r0, #175	@ 0xaf
 8010a0e:	f7ff fda5 	bl	801055c <OLED_WR_Byte>
	OLED_Clear();
 8010a12:	f7ff fe13 	bl	801063c <OLED_Clear>
}
 8010a16:	bf00      	nop
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	58020800 	.word	0x58020800

08010a20 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010a20:	b480      	push	{r7}
 8010a22:	b087      	sub	sp, #28
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6178      	str	r0, [r7, #20]
 8010a28:	ed87 0a04 	vstr	s0, [r7, #16]
 8010a2c:	edc7 0a03 	vstr	s1, [r7, #12]
 8010a30:	ed87 1a02 	vstr	s2, [r7, #8]
 8010a34:	edc7 1a01 	vstr	s3, [r7, #4]
 8010a38:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	693a      	ldr	r2, [r7, #16]
 8010a40:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	68fa      	ldr	r2, [r7, #12]
 8010a46:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	68ba      	ldr	r2, [r7, #8]
 8010a4c:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	f04f 0200 	mov.w	r2, #0
 8010a60:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	f04f 0200 	mov.w	r2, #0
 8010a68:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	f04f 0200 	mov.w	r2, #0
 8010a70:	615a      	str	r2, [r3, #20]
}
 8010a72:	bf00      	nop
 8010a74:	371c      	adds	r7, #28
 8010a76:	46bd      	mov	sp, r7
 8010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7c:	4770      	bx	lr

08010a7e <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 8010a7e:	b480      	push	{r7}
 8010a80:	b085      	sub	sp, #20
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	60f8      	str	r0, [r7, #12]
 8010a86:	ed87 0a02 	vstr	s0, [r7, #8]
 8010a8a:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 8010a8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8010a92:	edd7 7a01 	vldr	s15, [r7, #4]
 8010a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	ed93 7a06 	vldr	s14, [r3, #24]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	edd3 6a00 	vldr	s13, [r3]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	ed93 6a03 	vldr	s12, [r3, #12]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	edd3 7a04 	vldr	s15, [r3, #16]
 8010ab8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010abc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	ed93 6a01 	vldr	s12, [r3, #4]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	edd3 7a03 	vldr	s15, [r3, #12]
 8010acc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010ad0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	ed93 6a02 	vldr	s12, [r3, #8]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	edd3 5a03 	vldr	s11, [r3, #12]
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	edd3 7a04 	vldr	s15, [r3, #16]
 8010ae6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010aea:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	edd3 7a05 	vldr	s15, [r3, #20]
 8010af4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010af8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	691a      	ldr	r2, [r3, #16]
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	68da      	ldr	r2, [r3, #12]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	edd3 7a07 	vldr	s15, [r3, #28]
 8010b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2e:	dd04      	ble.n	8010b3a <pid+0xbc>
		pid->out = pid->Max;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	69da      	ldr	r2, [r3, #28]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 8010b38:	e00f      	b.n	8010b5a <pid+0xdc>
	else if (pid->out < pid->Min)
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	edd3 7a08 	vldr	s15, [r3, #32]
 8010b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4e:	d400      	bmi.n	8010b52 <pid+0xd4>
}
 8010b50:	e003      	b.n	8010b5a <pid+0xdc>
		pid->out = pid->Min;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	6a1a      	ldr	r2, [r3, #32]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	619a      	str	r2, [r3, #24]
}
 8010b5a:	bf00      	nop
 8010b5c:	3714      	adds	r7, #20
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
	...

08010b68 <svpwm_Control>:
 * @brief  SVPWM控制
 * @param  signal PLL信号输入结构体指针
 * @param  Udc 直流母线电压
 */
void svpwm_Control(pll_Signal_V *signal, float Udc)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b095      	sub	sp, #84	@ 0x54
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	ed87 0a00 	vstr	s0, [r7]
    // 电压标幺化
    float Ts = signal->basic->Ts;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	6a1b      	ldr	r3, [r3, #32]
 8010b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    float Ubase = Udc / 1.7320508f;                     // 基础电压
 8010b7c:	ed97 7a00 	vldr	s14, [r7]
 8010b80:	eddf 6adb 	vldr	s13, [pc, #876]	@ 8010ef0 <svpwm_Control+0x388>
 8010b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010b88:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float Ualpha = signal->basic->clarke_alpha / Ubase; // 标幺化Clarke变换后的α轴电压
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	edd3 6a03 	vldr	s13, [r3, #12]
 8010b94:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b9c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float Ubeta = signal->basic->clarke_beta / Ubase;   // 标幺化Clarke变换后的β轴电压
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	edd3 6a04 	vldr	s13, [r3, #16]
 8010ba8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bb0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // 计算中间变量
    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 8010bb4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8010bb8:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 8010ef0 <svpwm_Control+0x388>
 8010bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010bc0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bc8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float Ubeta_ = Ubeta * Ts;
 8010bcc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010bd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // 计算XYZ
    float X = Ubeta_;
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bde:	623b      	str	r3, [r7, #32]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 8010be0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010be4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010bec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010bf0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bfc:	edc7 7a07 	vstr	s15, [r7, #28]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 8010c00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010c04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010c08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010c0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010c10:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010c14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c1c:	edc7 7a06 	vstr	s15, [r7, #24]

    // 通过XYZ做扇区判断
    uint8_t sector = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (Y < 0)
 8010c26:	edd7 7a07 	vldr	s15, [r7, #28]
 8010c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c32:	d517      	bpl.n	8010c64 <svpwm_Control+0xfc>
    {
        if (Z < 0)
 8010c34:	edd7 7a06 	vldr	s15, [r7, #24]
 8010c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c40:	d503      	bpl.n	8010c4a <svpwm_Control+0xe2>
            sector = 5;
 8010c42:	2305      	movs	r3, #5
 8010c44:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010c48:	e023      	b.n	8010c92 <svpwm_Control+0x12a>
        else
            sector = (X < 0) ? 4 : 3;
 8010c4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8010c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c56:	d501      	bpl.n	8010c5c <svpwm_Control+0xf4>
 8010c58:	2304      	movs	r3, #4
 8010c5a:	e000      	b.n	8010c5e <svpwm_Control+0xf6>
 8010c5c:	2303      	movs	r3, #3
 8010c5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010c62:	e016      	b.n	8010c92 <svpwm_Control+0x12a>
    }
    else
    {
        if (Z > 0)
 8010c64:	edd7 7a06 	vldr	s15, [r7, #24]
 8010c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	dd03      	ble.n	8010c7a <svpwm_Control+0x112>
            sector = 2;
 8010c72:	2302      	movs	r3, #2
 8010c74:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010c78:	e00b      	b.n	8010c92 <svpwm_Control+0x12a>
        else
            sector = (X < 0) ? 6 : 1;
 8010c7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8010c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c86:	d501      	bpl.n	8010c8c <svpwm_Control+0x124>
 8010c88:	2306      	movs	r3, #6
 8010c8a:	e000      	b.n	8010c8e <svpwm_Control+0x126>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 8010c92:	f04f 0300 	mov.w	r3, #0
 8010c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c98:	f04f 0300 	mov.w	r3, #0
 8010c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c9e:	f04f 0300 	mov.w	r3, #0
 8010ca2:	643b      	str	r3, [r7, #64]	@ 0x40
    switch (sector)
 8010ca4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	2b05      	cmp	r3, #5
 8010cac:	f200 80f0 	bhi.w	8010e90 <svpwm_Control+0x328>
 8010cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8010cb8 <svpwm_Control+0x150>)
 8010cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb6:	bf00      	nop
 8010cb8:	08010cd1 	.word	0x08010cd1
 8010cbc:	08010d1b 	.word	0x08010d1b
 8010cc0:	08010d65 	.word	0x08010d65
 8010cc4:	08010daf 	.word	0x08010daf
 8010cc8:	08010df9 	.word	0x08010df9
 8010ccc:	08010e47 	.word	0x08010e47
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 8010cd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010cd4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010cd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010cdc:	edd7 6a08 	vldr	s13, [r7, #32]
 8010ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ce4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010ce8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010cec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8010cf8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d04:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010d08:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010d0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8010d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d14:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010d18:	e0ba      	b.n	8010e90 <svpwm_Control+0x328>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 8010d1a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010d1e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010d26:	edd7 6a06 	vldr	s13, [r7, #24]
 8010d2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010d32:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010d36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d3e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 8010d42:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010d46:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d4e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 8010d52:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010d56:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d5e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010d62:	e095      	b.n	8010e90 <svpwm_Control+0x328>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 8010d64:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010d68:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010d70:	edd7 6a08 	vldr	s13, [r7, #32]
 8010d74:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010d7c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010d80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d88:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010d8c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010d90:	edd7 7a08 	vldr	s15, [r7, #32]
 8010d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d98:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8010d9c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010da0:	edd7 7a07 	vldr	s15, [r7, #28]
 8010da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010da8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 8010dac:	e070      	b.n	8010e90 <svpwm_Control+0x328>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 8010dae:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010db2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010db6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010dba:	edd7 6a06 	vldr	s13, [r7, #24]
 8010dbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8010dc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010dc6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010dca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dd2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 8010dd6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010dda:	edd7 7a08 	vldr	s15, [r7, #32]
 8010dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010de2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 8010de6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010dea:	edd7 7a06 	vldr	s15, [r7, #24]
 8010dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010df2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 8010df6:	e04b      	b.n	8010e90 <svpwm_Control+0x328>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 8010df8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010dfc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010e00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010e04:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e08:	eef1 6a67 	vneg.f32	s13, s15
 8010e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8010e10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010e14:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010e18:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e20:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8010e24:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010e28:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e30:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8010e34:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010e38:	edd7 7a06 	vldr	s15, [r7, #24]
 8010e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e40:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 8010e44:	e024      	b.n	8010e90 <svpwm_Control+0x328>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 8010e46:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010e4a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010e4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e56:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010e5e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010e62:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e6a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 8010e6e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010e72:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e7a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 8010e7e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010e82:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e8a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 8010e8e:	bf00      	nop
    }

    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 8010e90:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8010e94:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e9c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8010ef4 <svpwm_Control+0x38c>
 8010ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ea8:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8010eac:	60fb      	str	r3, [r7, #12]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 8010eae:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8010eb2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010eba:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010ef4 <svpwm_Control+0x38c>
 8010ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ec6:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8010eca:	613b      	str	r3, [r7, #16]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 8010ecc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8010ed0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ed8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8010ef4 <svpwm_Control+0x38c>
 8010edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ee4:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8010ee8:	617b      	str	r3, [r7, #20]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 8010eea:	2300      	movs	r3, #0
 8010eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010eee:	e018      	b.n	8010f22 <svpwm_Control+0x3ba>
 8010ef0:	3fddb3d7 	.word	0x3fddb3d7
 8010ef4:	45bb7800 	.word	0x45bb7800
    {
        if (ccr[i] > TIM_PERIOD)
 8010ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	3350      	adds	r3, #80	@ 0x50
 8010efe:	443b      	add	r3, r7
 8010f00:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f04:	f241 726f 	movw	r2, #5999	@ 0x176f
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d907      	bls.n	8010f1c <svpwm_Control+0x3b4>
        {
            ccr[i] = TIM_PERIOD;
 8010f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	3350      	adds	r3, #80	@ 0x50
 8010f12:	443b      	add	r3, r7
 8010f14:	f241 726f 	movw	r2, #5999	@ 0x176f
 8010f18:	f843 2c44 	str.w	r2, [r3, #-68]
    for (int i = 0; i < 3; ++i)
 8010f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f1e:	3301      	adds	r3, #1
 8010f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	dde7      	ble.n	8010ef8 <svpwm_Control+0x390>
            ccr[i] = 0;
        }
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 8010f28:	4a07      	ldr	r2, [pc, #28]	@ (8010f48 <svpwm_Control+0x3e0>)
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 8010f2e:	4a06      	ldr	r2, [pc, #24]	@ (8010f48 <svpwm_Control+0x3e0>)
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 8010f34:	4a04      	ldr	r2, [pc, #16]	@ (8010f48 <svpwm_Control+0x3e0>)
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8010f3a:	bf00      	nop
 8010f3c:	3754      	adds	r7, #84	@ 0x54
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	40010000 	.word	0x40010000
 8010f4c:	00000000 	.word	0x00000000

08010f50 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F, float Umax)
{
 8010f50:	b590      	push	{r4, r7, lr}
 8010f52:	b087      	sub	sp, #28
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	edc7 0a00 	vstr	s1, [r7]
 8010f62:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 8010f64:	200c      	movs	r0, #12
 8010f66:	f000 fc79 	bl	801185c <malloc>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681c      	ldr	r4, [r3, #0]
 8010f76:	2044      	movs	r0, #68	@ 0x44
 8010f78:	f000 fc70 	bl	801185c <malloc>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681c      	ldr	r4, [r3, #0]
 8010f84:	2024      	movs	r0, #36	@ 0x24
 8010f86:	f000 fc69 	bl	801185c <malloc>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f04f 0200 	mov.w	r2, #0
 8010f98:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f04f 0200 	mov.w	r2, #0
 8010fa4:	605a      	str	r2, [r3, #4]

    (*signal)->theta = 0.f;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f04f 0200 	mov.w	r2, #0
 8010fae:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8010fba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8011070 <pll_Init_V+0x120>
 8010fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fc2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 8010fc6:	88fb      	ldrh	r3, [r7, #6]
 8010fc8:	ee07 3a90 	vmov	s15, r3
 8010fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fde:	edc3 7a08 	vstr	s15, [r3, #32]
    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0 / Umax;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	ed93 7a07 	vldr	s14, [r3, #28]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	edd3 7a07 	vldr	s15, [r3, #28]
 8010ff6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010ffa:	ed97 7a00 	vldr	s14, [r7]
 8010ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011002:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 8011006:	ed97 7a00 	vldr	s14, [r7]
 801100a:	edd7 7a05 	vldr	s15, [r7, #20]
 801100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011012:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011016:	eeb0 0b47 	vmov.f64	d0, d7
 801101a:	f003 f9fd 	bl	8014418 <sqrt>
 801101e:	eeb0 7b40 	vmov.f64	d7, d0
 8011022:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8011068 <pll_Init_V+0x118>
 8011026:	ee27 5b06 	vmul.f64	d5, d7, d6
 801102a:	edd7 7a00 	vldr	s15, [r7]
 801102e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8011032:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011036:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801103a:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	689b      	ldr	r3, [r3, #8]
 8011044:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 8011074 <pll_Init_V+0x124>
 8011048:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 8011078 <pll_Init_V+0x128>
 801104c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 801107c <pll_Init_V+0x12c>
 8011050:	edd7 0a05 	vldr	s1, [r7, #20]
 8011054:	ed97 0a04 	vldr	s0, [r7, #16]
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff fce1 	bl	8010a20 <pid_Init>
}
 801105e:	bf00      	nop
 8011060:	371c      	adds	r7, #28
 8011062:	46bd      	mov	sp, r7
 8011064:	bd90      	pop	{r4, r7, pc}
 8011066:	bf00      	nop
 8011068:	667f3bcd 	.word	0x667f3bcd
 801106c:	3ff6a09e 	.word	0x3ff6a09e
 8011070:	40c90fdb 	.word	0x40c90fdb
 8011074:	c27b53d2 	.word	0xc27b53d2
 8011078:	431d1463 	.word	0x431d1463
 801107c:	00000000 	.word	0x00000000

08011080 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 8011080:	b590      	push	{r4, r7, lr}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	ed87 0a02 	vstr	s0, [r7, #8]
 801108c:	460b      	mov	r3, r1
 801108e:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 8011090:	2028      	movs	r0, #40	@ 0x28
 8011092:	f000 fbe3 	bl	801185c <malloc>
 8011096:	4603      	mov	r3, r0
 8011098:	461a      	mov	r2, r3
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681c      	ldr	r4, [r3, #0]
 80110a2:	2044      	movs	r0, #68	@ 0x44
 80110a4:	f000 fbda 	bl	801185c <malloc>
 80110a8:	4603      	mov	r3, r0
 80110aa:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681c      	ldr	r4, [r3, #0]
 80110b0:	2024      	movs	r0, #36	@ 0x24
 80110b2:	f000 fbd3 	bl	801185c <malloc>
 80110b6:	4603      	mov	r3, r0
 80110b8:	6223      	str	r3, [r4, #32]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	681c      	ldr	r4, [r3, #0]
 80110be:	2024      	movs	r0, #36	@ 0x24
 80110c0:	f000 fbcc 	bl	801185c <malloc>
 80110c4:	4603      	mov	r3, r0
 80110c6:	6263      	str	r3, [r4, #36]	@ 0x24
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f04f 0200 	mov.w	r2, #0
 80110d2:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f04f 0200 	mov.w	r2, #0
 80110de:	605a      	str	r2, [r3, #4]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80110ea:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801116c <pll_Init_I+0xec>
 80110ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110f2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 80110f6:	88fb      	ldrh	r3, [r7, #6]
 80110f8:	ee07 3a90 	vmov	s15, r3
 80110fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801110a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801110e:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->CorL = 0;    // 0:感性 1:容性
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2200      	movs	r2, #0
 8011118:	761a      	strb	r2, [r3, #24]
    (*signal)->L = 0.0043f; // 4.3mH
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4a14      	ldr	r2, [pc, #80]	@ (8011170 <pll_Init_I+0xf0>)
 8011120:	61da      	str	r2, [r3, #28]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 0.5f, 0.01f, 0, -80.f, -160.f);
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	6a1b      	ldr	r3, [r3, #32]
 8011128:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8011174 <pll_Init_I+0xf4>
 801112c:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8011178 <pll_Init_I+0xf8>
 8011130:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 801117c <pll_Init_I+0xfc>
 8011134:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8011180 <pll_Init_I+0x100>
 8011138:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801113c:	4618      	mov	r0, r3
 801113e:	f7ff fc6f 	bl	8010a20 <pid_Init>
    pid_Init((*signal)->pid_q, 0.5f, 0.01f, 0, 20.f, -10.f);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011148:	eeba 2a04 	vmov.f32	s4, #164	@ 0xc1200000 -10.0
 801114c:	eef3 1a04 	vmov.f32	s3, #52	@ 0x41a00000  20.0
 8011150:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 801117c <pll_Init_I+0xfc>
 8011154:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8011180 <pll_Init_I+0x100>
 8011158:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff fc5f 	bl	8010a20 <pid_Init>
}
 8011162:	bf00      	nop
 8011164:	3714      	adds	r7, #20
 8011166:	46bd      	mov	sp, r7
 8011168:	bd90      	pop	{r4, r7, pc}
 801116a:	bf00      	nop
 801116c:	40c90fdb 	.word	0x40c90fdb
 8011170:	3b8ce704 	.word	0x3b8ce704
 8011174:	c3200000 	.word	0xc3200000
 8011178:	c2a00000 	.word	0xc2a00000
 801117c:	00000000 	.word	0x00000000
 8011180:	3c23d70a 	.word	0x3c23d70a
 8011184:	00000000 	.word	0x00000000

08011188 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 8011188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118c:	ed2d 8b02 	vpush	{d8}
 8011190:	b08c      	sub	sp, #48	@ 0x30
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_V->basic->input_a, signal_V->basic->input_b, &signal_V->basic->clarke_alpha, &signal_V->basic->clarke_beta);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	6818      	ldr	r0, [r3, #0]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	6859      	ldr	r1, [r3, #4]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f103 020c 	add.w	r2, r3, #12
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	3310      	adds	r3, #16
 80111b0:	6178      	str	r0, [r7, #20]
 80111b2:	6139      	str	r1, [r7, #16]
 80111b4:	60fa      	str	r2, [r7, #12]
 80111b6:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	697a      	ldr	r2, [r7, #20]
 80111bc:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 80111be:	edd7 7a05 	vldr	s15, [r7, #20]
 80111c2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8011308 <pll_Control_V+0x180>
 80111c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80111ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80111ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801130c <pll_Control_V+0x184>
 80111d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	edc3 7a00 	vstr	s15, [r3]
  }
 80111e0:	bf00      	nop
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	691e      	ldr	r6, [r3, #16]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f103 0514 	add.w	r5, r3, #20
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f103 0418 	add.w	r4, r3, #24
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	edd3 7a01 	vldr	s15, [r3, #4]
 8011206:	eeb0 0a67 	vmov.f32	s0, s15
 801120a:	f000 fa97 	bl	801173c <arm_sin_f32>
 801120e:	eeb0 8a40 	vmov.f32	s16, s0
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	edd3 7a01 	vldr	s15, [r3, #4]
 8011218:	eeb0 0a67 	vmov.f32	s0, s15
 801121c:	f000 fad4 	bl	80117c8 <arm_cos_f32>
 8011220:	eef0 7a40 	vmov.f32	s15, s0
 8011224:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 8011228:	62be      	str	r6, [r7, #40]	@ 0x28
 801122a:	627d      	str	r5, [r7, #36]	@ 0x24
 801122c:	623c      	str	r4, [r7, #32]
 801122e:	ed87 8a07 	vstr	s16, [r7, #28]
 8011232:	edc7 7a06 	vstr	s15, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011236:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801123a:	edd7 7a06 	vldr	s15, [r7, #24]
 801123e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011242:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8011246:	edd7 7a07 	vldr	s15, [r7, #28]
 801124a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011254:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011258:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801125c:	eeb1 7a67 	vneg.f32	s14, s15
 8011260:	edd7 7a07 	vldr	s15, [r7, #28]
 8011264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011268:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801126c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	edc3 7a00 	vstr	s15, [r3]
  }
 801127e:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	689a      	ldr	r2, [r3, #8]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	edd3 7a06 	vldr	s15, [r3, #24]
 801128c:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8011310 <pll_Control_V+0x188>
 8011290:	eeb0 0a67 	vmov.f32	s0, s15
 8011294:	4610      	mov	r0, r2
 8011296:	f7ff fbf2 	bl	8010a7e <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	ed93 7a01 	vldr	s14, [r3, #4]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80112b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80112bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80112d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80112d4:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8011300 <pll_Control_V+0x178>
 80112d8:	eeb0 0b47 	vmov.f64	d0, d7
 80112dc:	f003 f878 	bl	80143d0 <fmod>
 80112e0:	eeb0 7b40 	vmov.f64	d7, d0
 80112e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80112ee:	bf00      	nop
 80112f0:	3730      	adds	r7, #48	@ 0x30
 80112f2:	46bd      	mov	sp, r7
 80112f4:	ecbd 8b02 	vpop	{d8}
 80112f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112fc:	f3af 8000 	nop.w
 8011300:	60000000 	.word	0x60000000
 8011304:	401921fb 	.word	0x401921fb
 8011308:	3f13cd3a 	.word	0x3f13cd3a
 801130c:	3f93cd3a 	.word	0x3f93cd3a
 8011310:	00000000 	.word	0x00000000

08011314 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 8011314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011318:	ed2d 8b02 	vpush	{d8}
 801131c:	b094      	sub	sp, #80	@ 0x50
 801131e:	af00      	add	r7, sp, #0
 8011320:	60f8      	str	r0, [r7, #12]
 8011322:	60b9      	str	r1, [r7, #8]
 8011324:	ed87 0a01 	vstr	s0, [r7, #4]
 8011328:	edc7 0a00 	vstr	s1, [r7]
    static float Uabd;
    static float Uabq;
    static float PFTheta;
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_I->basic->input_a, signal_I->basic->input_b, &signal_I->basic->clarke_alpha, &signal_I->basic->clarke_beta);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	6818      	ldr	r0, [r3, #0]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	6859      	ldr	r1, [r3, #4]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f103 020c 	add.w	r2, r3, #12
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	3310      	adds	r3, #16
 8011346:	6378      	str	r0, [r7, #52]	@ 0x34
 8011348:	6339      	str	r1, [r7, #48]	@ 0x30
 801134a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801134c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pIalpha = Ia;
 801134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011352:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8011354:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8011358:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8011600 <pll_Control_I+0x2ec>
 801135c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011360:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011364:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8011604 <pll_Control_I+0x2f0>
 8011368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011372:	edc3 7a00 	vstr	s15, [r3]
  }
 8011376:	bf00      	nop
    // 在电压的系上得出电流的dq值
    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	691e      	ldr	r6, [r3, #16]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	f103 0514 	add.w	r5, r3, #20
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f103 0418 	add.w	r4, r3, #24
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	edd3 7a01 	vldr	s15, [r3, #4]
 801139c:	eeb0 0a67 	vmov.f32	s0, s15
 80113a0:	f000 f9cc 	bl	801173c <arm_sin_f32>
 80113a4:	eeb0 8a40 	vmov.f32	s16, s0
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80113ae:	eeb0 0a67 	vmov.f32	s0, s15
 80113b2:	f000 fa09 	bl	80117c8 <arm_cos_f32>
 80113b6:	eef0 7a40 	vmov.f32	s15, s0
 80113ba:	f8c7 804c 	str.w	r8, [r7, #76]	@ 0x4c
 80113be:	64be      	str	r6, [r7, #72]	@ 0x48
 80113c0:	647d      	str	r5, [r7, #68]	@ 0x44
 80113c2:	643c      	str	r4, [r7, #64]	@ 0x40
 80113c4:	ed87 8a0f 	vstr	s16, [r7, #60]	@ 0x3c
 80113c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80113cc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80113d0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80113d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113d8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80113dc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80113e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113ea:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80113ee:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80113f2:	eeb1 7a67 	vneg.f32	s14, s15
 80113f6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80113fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113fe:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8011402:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8011406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801140a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801140e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011410:	edc3 7a00 	vstr	s15, [r3]
  }
 8011414:	bf00      	nop
    // PI控制
    PFTheta = acosf(PF);
 8011416:	ed97 0a00 	vldr	s0, [r7]
 801141a:	f003 f81d 	bl	8014458 <acosf>
 801141e:	eef0 7a40 	vmov.f32	s15, s0
 8011422:	4b79      	ldr	r3, [pc, #484]	@ (8011608 <pll_Control_I+0x2f4>)
 8011424:	edc3 7a00 	vstr	s15, [r3]
    pid(signal_I->pid_d, Iset * 1.414f * arm_cos_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6a1c      	ldr	r4, [r3, #32]
 801142c:	edd7 7a01 	vldr	s15, [r7, #4]
 8011430:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 801160c <pll_Control_I+0x2f8>
 8011434:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011438:	4b73      	ldr	r3, [pc, #460]	@ (8011608 <pll_Control_I+0x2f4>)
 801143a:	edd3 7a00 	vldr	s15, [r3]
 801143e:	eeb0 0a67 	vmov.f32	s0, s15
 8011442:	f000 f9c1 	bl	80117c8 <arm_cos_f32>
 8011446:	eef0 7a40 	vmov.f32	s15, s0
 801144a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	ed93 7a05 	vldr	s14, [r3, #20]
 8011456:	eef0 0a47 	vmov.f32	s1, s14
 801145a:	eeb0 0a67 	vmov.f32	s0, s15
 801145e:	4620      	mov	r0, r4
 8011460:	f7ff fb0d 	bl	8010a7e <pid>
    if (signal_I->CorL == 1)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	7e1b      	ldrb	r3, [r3, #24]
 8011468:	2b01      	cmp	r3, #1
 801146a:	d11e      	bne.n	80114aa <pll_Control_I+0x196>
    {
        pid(signal_I->pid_q, Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011470:	edd7 7a01 	vldr	s15, [r7, #4]
 8011474:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 801160c <pll_Control_I+0x2f8>
 8011478:	ee27 8a87 	vmul.f32	s16, s15, s14
 801147c:	4b62      	ldr	r3, [pc, #392]	@ (8011608 <pll_Control_I+0x2f4>)
 801147e:	edd3 7a00 	vldr	s15, [r3]
 8011482:	eeb0 0a67 	vmov.f32	s0, s15
 8011486:	f000 f959 	bl	801173c <arm_sin_f32>
 801148a:	eef0 7a40 	vmov.f32	s15, s0
 801148e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	ed93 7a06 	vldr	s14, [r3, #24]
 801149a:	eef0 0a47 	vmov.f32	s1, s14
 801149e:	eeb0 0a67 	vmov.f32	s0, s15
 80114a2:	4620      	mov	r0, r4
 80114a4:	f7ff faeb 	bl	8010a7e <pid>
 80114a8:	e01f      	b.n	80114ea <pll_Control_I+0x1d6>
    }
    else
    {
        pid(signal_I->pid_q, -Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80114ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80114b2:	eef1 7a67 	vneg.f32	s15, s15
 80114b6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801160c <pll_Control_I+0x2f8>
 80114ba:	ee27 8a87 	vmul.f32	s16, s15, s14
 80114be:	4b52      	ldr	r3, [pc, #328]	@ (8011608 <pll_Control_I+0x2f4>)
 80114c0:	edd3 7a00 	vldr	s15, [r3]
 80114c4:	eeb0 0a67 	vmov.f32	s0, s15
 80114c8:	f000 f938 	bl	801173c <arm_sin_f32>
 80114cc:	eef0 7a40 	vmov.f32	s15, s0
 80114d0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80114dc:	eef0 0a47 	vmov.f32	s1, s14
 80114e0:	eeb0 0a67 	vmov.f32	s0, s15
 80114e4:	4620      	mov	r0, r4
 80114e6:	f7ff faca 	bl	8010a7e <pid>
    }
    // 解耦调制
    Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	ed93 7a05 	vldr	s14, [r3, #20]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	6a1b      	ldr	r3, [r3, #32]
 80114f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80114fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	edd3 6a06 	vldr	s13, [r3, #24]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	edd3 7a07 	vldr	s15, [r3, #28]
 801150e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	edd3 7a07 	vldr	s15, [r3, #28]
 8011518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011520:	4b3b      	ldr	r3, [pc, #236]	@ (8011610 <pll_Control_I+0x2fc>)
 8011522:	edc3 7a00 	vstr	s15, [r3]
    Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	ed93 7a06 	vldr	s14, [r3, #24]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011532:	edd3 7a06 	vldr	s15, [r3, #24]
 8011536:	ee37 7a67 	vsub.f32	s14, s14, s15
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	edd3 6a05 	vldr	s13, [r3, #20]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	edd3 7a07 	vldr	s15, [r3, #28]
 801154a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	edd3 7a07 	vldr	s15, [r3, #28]
 8011554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011558:	ee77 7a67 	vsub.f32	s15, s14, s15
 801155c:	4b2d      	ldr	r3, [pc, #180]	@ (8011614 <pll_Control_I+0x300>)
 801155e:	edc3 7a00 	vstr	s15, [r3]
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011562:	4b2b      	ldr	r3, [pc, #172]	@ (8011610 <pll_Control_I+0x2fc>)
 8011564:	f8d3 8000 	ldr.w	r8, [r3]
 8011568:	4b2a      	ldr	r3, [pc, #168]	@ (8011614 <pll_Control_I+0x300>)
 801156a:	681e      	ldr	r6, [r3, #0]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	1d1d      	adds	r5, r3, #4
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f103 0408 	add.w	r4, r3, #8
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	edd3 7a01 	vldr	s15, [r3, #4]
 801157c:	eeb0 0a67 	vmov.f32	s0, s15
 8011580:	f000 f8dc 	bl	801173c <arm_sin_f32>
 8011584:	eeb0 8a40 	vmov.f32	s16, s0
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	edd3 7a01 	vldr	s15, [r3, #4]
 801158e:	eeb0 0a67 	vmov.f32	s0, s15
 8011592:	f000 f919 	bl	80117c8 <arm_cos_f32>
 8011596:	eef0 7a40 	vmov.f32	s15, s0
 801159a:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 801159e:	623e      	str	r6, [r7, #32]
 80115a0:	61fd      	str	r5, [r7, #28]
 80115a2:	61bc      	str	r4, [r7, #24]
 80115a4:	ed87 8a05 	vstr	s16, [r7, #20]
 80115a8:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 80115ac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80115b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80115b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115b8:	edd7 6a08 	vldr	s13, [r7, #32]
 80115bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80115c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 80115ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80115d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80115d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115da:	edd7 6a08 	vldr	s13, [r7, #32]
 80115de:	edd7 7a04 	vldr	s15, [r7, #16]
 80115e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	edc3 7a00 	vstr	s15, [r3]
  }
 80115f0:	bf00      	nop
}
 80115f2:	bf00      	nop
 80115f4:	3750      	adds	r7, #80	@ 0x50
 80115f6:	46bd      	mov	sp, r7
 80115f8:	ecbd 8b02 	vpop	{d8}
 80115fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011600:	3f13cd3a 	.word	0x3f13cd3a
 8011604:	3f93cd3a 	.word	0x3f93cd3a
 8011608:	24006f58 	.word	0x24006f58
 801160c:	3fb4fdf4 	.word	0x3fb4fdf4
 8011610:	24006f5c 	.word	0x24006f5c
 8011614:	24006f60 	.word	0x24006f60

08011618 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	4603      	mov	r3, r0
 8011620:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 8011622:	88fb      	ldrh	r3, [r7, #6]
 8011624:	2b40      	cmp	r3, #64	@ 0x40
 8011626:	d160      	bne.n	80116ea <HAL_GPIO_EXTI_Callback+0xd2>
    {
        // 读取AD7606数据
        ad7606_GetValue(&hspi2, 5, adcValue);
 8011628:	4a32      	ldr	r2, [pc, #200]	@ (80116f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 801162a:	2105      	movs	r1, #5
 801162c:	4832      	ldr	r0, [pc, #200]	@ (80116f8 <HAL_GPIO_EXTI_Callback+0xe0>)
 801162e:	f7fe fdd1 	bl	80101d4 <ad7606_GetValue>
        signal_V->basic->input_a = adcValue[1] * 10.f;
 8011632:	4b30      	ldr	r3, [pc, #192]	@ (80116f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8011634:	edd3 7a01 	vldr	s15, [r3, #4]
 8011638:	4b30      	ldr	r3, [pc, #192]	@ (80116fc <HAL_GPIO_EXTI_Callback+0xe4>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8011642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011646:	edc3 7a00 	vstr	s15, [r3]
        signal_V->basic->input_b = adcValue[2] * 10.f;
 801164a:	4b2a      	ldr	r3, [pc, #168]	@ (80116f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 801164c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011650:	4b2a      	ldr	r3, [pc, #168]	@ (80116fc <HAL_GPIO_EXTI_Callback+0xe4>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 801165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801165e:	edc3 7a01 	vstr	s15, [r3, #4]
        signal_I->basic->input_a = adcValue[3];
 8011662:	4b27      	ldr	r3, [pc, #156]	@ (8011700 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4a22      	ldr	r2, [pc, #136]	@ (80116f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 801166a:	68d2      	ldr	r2, [r2, #12]
 801166c:	601a      	str	r2, [r3, #0]
        signal_I->basic->input_b = adcValue[4];
 801166e:	4b24      	ldr	r3, [pc, #144]	@ (8011700 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a1f      	ldr	r2, [pc, #124]	@ (80116f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8011676:	6912      	ldr	r2, [r2, #16]
 8011678:	605a      	str	r2, [r3, #4]
        // 锁相控制
        pll_Control_V(signal_V);
 801167a:	4b20      	ldr	r3, [pc, #128]	@ (80116fc <HAL_GPIO_EXTI_Callback+0xe4>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	4618      	mov	r0, r3
 8011680:	f7ff fd82 	bl	8011188 <pll_Control_V>
        // 电流内环控制
        pll_Control_I(signal_I, signal_V, 0.5f, 1.f);
 8011684:	4b1e      	ldr	r3, [pc, #120]	@ (8011700 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4a1c      	ldr	r2, [pc, #112]	@ (80116fc <HAL_GPIO_EXTI_Callback+0xe4>)
 801168a:	6812      	ldr	r2, [r2, #0]
 801168c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011690:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8011694:	4611      	mov	r1, r2
 8011696:	4618      	mov	r0, r3
 8011698:	f7ff fe3c 	bl	8011314 <pll_Control_I>
        // svpwm调制
        svpwm_Control(signal_V, 20.f);
 801169c:	4b17      	ldr	r3, [pc, #92]	@ (80116fc <HAL_GPIO_EXTI_Callback+0xe4>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7ff fa5f 	bl	8010b68 <svpwm_Control>
        // DAC输出
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f));
 80116aa:	4b16      	ldr	r3, [pc, #88]	@ (8011704 <HAL_GPIO_EXTI_Callback+0xec>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116b0:	ee07 3a90 	vmov	s15, r3
 80116b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116b8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011708 <HAL_GPIO_EXTI_Callback+0xf0>
 80116bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80116c0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8011708 <HAL_GPIO_EXTI_Callback+0xf0>
 80116c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80116c8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801170c <HAL_GPIO_EXTI_Callback+0xf4>
 80116cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8011710 <HAL_GPIO_EXTI_Callback+0xf8>
 80116d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80116d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116dc:	ee17 3a90 	vmov	r3, s15
 80116e0:	2200      	movs	r2, #0
 80116e2:	2100      	movs	r1, #0
 80116e4:	480b      	ldr	r0, [pc, #44]	@ (8011714 <HAL_GPIO_EXTI_Callback+0xfc>)
 80116e6:	f7f0 fc04 	bl	8001ef2 <HAL_DAC_SetValue>
    }
}
 80116ea:	bf00      	nop
 80116ec:	3708      	adds	r7, #8
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	24006f64 	.word	0x24006f64
 80116f8:	24000430 	.word	0x24000430
 80116fc:	24006f8c 	.word	0x24006f8c
 8011700:	24006f90 	.word	0x24006f90
 8011704:	24000508 	.word	0x24000508
 8011708:	453b8000 	.word	0x453b8000
 801170c:	44fa0000 	.word	0x44fa0000
 8011710:	45000000 	.word	0x45000000
 8011714:	24000310 	.word	0x24000310

08011718 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  定时器中断
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4a04      	ldr	r2, [pc, #16]	@ (8011738 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d101      	bne.n	801172e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 801172a:	f7f0 f96b 	bl	8001a04 <HAL_IncTick>
    }
}
 801172e:	bf00      	nop
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	40001000 	.word	0x40001000

0801173c <arm_sin_f32>:
 801173c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80117bc <arm_sin_f32+0x80>
 8011740:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011744:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011748:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011750:	d504      	bpl.n	801175c <arm_sin_f32+0x20>
 8011752:	ee17 3a90 	vmov	r3, s15
 8011756:	3b01      	subs	r3, #1
 8011758:	ee07 3a90 	vmov	s15, r3
 801175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011760:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80117c0 <arm_sin_f32+0x84>
 8011764:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011768:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801176c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011770:	ee17 3a10 	vmov	r3, s14
 8011774:	b29b      	uxth	r3, r3
 8011776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801177a:	d21a      	bcs.n	80117b2 <arm_sin_f32+0x76>
 801177c:	ee07 3a10 	vmov	s14, r3
 8011780:	1c59      	adds	r1, r3, #1
 8011782:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011786:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801178a:	4a0e      	ldr	r2, [pc, #56]	@ (80117c4 <arm_sin_f32+0x88>)
 801178c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011790:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011794:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011798:	ee30 0a67 	vsub.f32	s0, s0, s15
 801179c:	edd3 6a00 	vldr	s13, [r3]
 80117a0:	ed92 7a00 	vldr	s14, [r2]
 80117a4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80117a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80117b0:	4770      	bx	lr
 80117b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80117b6:	2101      	movs	r1, #1
 80117b8:	2300      	movs	r3, #0
 80117ba:	e7e6      	b.n	801178a <arm_sin_f32+0x4e>
 80117bc:	3e22f983 	.word	0x3e22f983
 80117c0:	44000000 	.word	0x44000000
 80117c4:	08016250 	.word	0x08016250

080117c8 <arm_cos_f32>:
 80117c8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8011850 <arm_cos_f32+0x88>
 80117cc:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80117d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80117d4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80117d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80117dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e4:	d504      	bpl.n	80117f0 <arm_cos_f32+0x28>
 80117e6:	ee17 3a90 	vmov	r3, s15
 80117ea:	3b01      	subs	r3, #1
 80117ec:	ee07 3a90 	vmov	s15, r3
 80117f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117f4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8011854 <arm_cos_f32+0x8c>
 80117f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80117fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011800:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011804:	ee17 3a10 	vmov	r3, s14
 8011808:	b29b      	uxth	r3, r3
 801180a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801180e:	d21a      	bcs.n	8011846 <arm_cos_f32+0x7e>
 8011810:	ee07 3a10 	vmov	s14, r3
 8011814:	1c59      	adds	r1, r3, #1
 8011816:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801181a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801181e:	4a0e      	ldr	r2, [pc, #56]	@ (8011858 <arm_cos_f32+0x90>)
 8011820:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011824:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011828:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801182c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011830:	edd3 6a00 	vldr	s13, [r3]
 8011834:	ed92 7a00 	vldr	s14, [r2]
 8011838:	ee20 0a26 	vmul.f32	s0, s0, s13
 801183c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011840:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011844:	4770      	bx	lr
 8011846:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801184a:	2101      	movs	r1, #1
 801184c:	2300      	movs	r3, #0
 801184e:	e7e6      	b.n	801181e <arm_cos_f32+0x56>
 8011850:	3e22f983 	.word	0x3e22f983
 8011854:	44000000 	.word	0x44000000
 8011858:	08016250 	.word	0x08016250

0801185c <malloc>:
 801185c:	4b02      	ldr	r3, [pc, #8]	@ (8011868 <malloc+0xc>)
 801185e:	4601      	mov	r1, r0
 8011860:	6818      	ldr	r0, [r3, #0]
 8011862:	f000 b825 	b.w	80118b0 <_malloc_r>
 8011866:	bf00      	nop
 8011868:	24000138 	.word	0x24000138

0801186c <sbrk_aligned>:
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	4e0f      	ldr	r6, [pc, #60]	@ (80118ac <sbrk_aligned+0x40>)
 8011870:	460c      	mov	r4, r1
 8011872:	6831      	ldr	r1, [r6, #0]
 8011874:	4605      	mov	r5, r0
 8011876:	b911      	cbnz	r1, 801187e <sbrk_aligned+0x12>
 8011878:	f000 fe44 	bl	8012504 <_sbrk_r>
 801187c:	6030      	str	r0, [r6, #0]
 801187e:	4621      	mov	r1, r4
 8011880:	4628      	mov	r0, r5
 8011882:	f000 fe3f 	bl	8012504 <_sbrk_r>
 8011886:	1c43      	adds	r3, r0, #1
 8011888:	d103      	bne.n	8011892 <sbrk_aligned+0x26>
 801188a:	f04f 34ff 	mov.w	r4, #4294967295
 801188e:	4620      	mov	r0, r4
 8011890:	bd70      	pop	{r4, r5, r6, pc}
 8011892:	1cc4      	adds	r4, r0, #3
 8011894:	f024 0403 	bic.w	r4, r4, #3
 8011898:	42a0      	cmp	r0, r4
 801189a:	d0f8      	beq.n	801188e <sbrk_aligned+0x22>
 801189c:	1a21      	subs	r1, r4, r0
 801189e:	4628      	mov	r0, r5
 80118a0:	f000 fe30 	bl	8012504 <_sbrk_r>
 80118a4:	3001      	adds	r0, #1
 80118a6:	d1f2      	bne.n	801188e <sbrk_aligned+0x22>
 80118a8:	e7ef      	b.n	801188a <sbrk_aligned+0x1e>
 80118aa:	bf00      	nop
 80118ac:	24006f94 	.word	0x24006f94

080118b0 <_malloc_r>:
 80118b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b4:	1ccd      	adds	r5, r1, #3
 80118b6:	f025 0503 	bic.w	r5, r5, #3
 80118ba:	3508      	adds	r5, #8
 80118bc:	2d0c      	cmp	r5, #12
 80118be:	bf38      	it	cc
 80118c0:	250c      	movcc	r5, #12
 80118c2:	2d00      	cmp	r5, #0
 80118c4:	4606      	mov	r6, r0
 80118c6:	db01      	blt.n	80118cc <_malloc_r+0x1c>
 80118c8:	42a9      	cmp	r1, r5
 80118ca:	d904      	bls.n	80118d6 <_malloc_r+0x26>
 80118cc:	230c      	movs	r3, #12
 80118ce:	6033      	str	r3, [r6, #0]
 80118d0:	2000      	movs	r0, #0
 80118d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80119ac <_malloc_r+0xfc>
 80118da:	f000 f869 	bl	80119b0 <__malloc_lock>
 80118de:	f8d8 3000 	ldr.w	r3, [r8]
 80118e2:	461c      	mov	r4, r3
 80118e4:	bb44      	cbnz	r4, 8011938 <_malloc_r+0x88>
 80118e6:	4629      	mov	r1, r5
 80118e8:	4630      	mov	r0, r6
 80118ea:	f7ff ffbf 	bl	801186c <sbrk_aligned>
 80118ee:	1c43      	adds	r3, r0, #1
 80118f0:	4604      	mov	r4, r0
 80118f2:	d158      	bne.n	80119a6 <_malloc_r+0xf6>
 80118f4:	f8d8 4000 	ldr.w	r4, [r8]
 80118f8:	4627      	mov	r7, r4
 80118fa:	2f00      	cmp	r7, #0
 80118fc:	d143      	bne.n	8011986 <_malloc_r+0xd6>
 80118fe:	2c00      	cmp	r4, #0
 8011900:	d04b      	beq.n	801199a <_malloc_r+0xea>
 8011902:	6823      	ldr	r3, [r4, #0]
 8011904:	4639      	mov	r1, r7
 8011906:	4630      	mov	r0, r6
 8011908:	eb04 0903 	add.w	r9, r4, r3
 801190c:	f000 fdfa 	bl	8012504 <_sbrk_r>
 8011910:	4581      	cmp	r9, r0
 8011912:	d142      	bne.n	801199a <_malloc_r+0xea>
 8011914:	6821      	ldr	r1, [r4, #0]
 8011916:	1a6d      	subs	r5, r5, r1
 8011918:	4629      	mov	r1, r5
 801191a:	4630      	mov	r0, r6
 801191c:	f7ff ffa6 	bl	801186c <sbrk_aligned>
 8011920:	3001      	adds	r0, #1
 8011922:	d03a      	beq.n	801199a <_malloc_r+0xea>
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	442b      	add	r3, r5
 8011928:	6023      	str	r3, [r4, #0]
 801192a:	f8d8 3000 	ldr.w	r3, [r8]
 801192e:	685a      	ldr	r2, [r3, #4]
 8011930:	bb62      	cbnz	r2, 801198c <_malloc_r+0xdc>
 8011932:	f8c8 7000 	str.w	r7, [r8]
 8011936:	e00f      	b.n	8011958 <_malloc_r+0xa8>
 8011938:	6822      	ldr	r2, [r4, #0]
 801193a:	1b52      	subs	r2, r2, r5
 801193c:	d420      	bmi.n	8011980 <_malloc_r+0xd0>
 801193e:	2a0b      	cmp	r2, #11
 8011940:	d917      	bls.n	8011972 <_malloc_r+0xc2>
 8011942:	1961      	adds	r1, r4, r5
 8011944:	42a3      	cmp	r3, r4
 8011946:	6025      	str	r5, [r4, #0]
 8011948:	bf18      	it	ne
 801194a:	6059      	strne	r1, [r3, #4]
 801194c:	6863      	ldr	r3, [r4, #4]
 801194e:	bf08      	it	eq
 8011950:	f8c8 1000 	streq.w	r1, [r8]
 8011954:	5162      	str	r2, [r4, r5]
 8011956:	604b      	str	r3, [r1, #4]
 8011958:	4630      	mov	r0, r6
 801195a:	f000 f82f 	bl	80119bc <__malloc_unlock>
 801195e:	f104 000b 	add.w	r0, r4, #11
 8011962:	1d23      	adds	r3, r4, #4
 8011964:	f020 0007 	bic.w	r0, r0, #7
 8011968:	1ac2      	subs	r2, r0, r3
 801196a:	bf1c      	itt	ne
 801196c:	1a1b      	subne	r3, r3, r0
 801196e:	50a3      	strne	r3, [r4, r2]
 8011970:	e7af      	b.n	80118d2 <_malloc_r+0x22>
 8011972:	6862      	ldr	r2, [r4, #4]
 8011974:	42a3      	cmp	r3, r4
 8011976:	bf0c      	ite	eq
 8011978:	f8c8 2000 	streq.w	r2, [r8]
 801197c:	605a      	strne	r2, [r3, #4]
 801197e:	e7eb      	b.n	8011958 <_malloc_r+0xa8>
 8011980:	4623      	mov	r3, r4
 8011982:	6864      	ldr	r4, [r4, #4]
 8011984:	e7ae      	b.n	80118e4 <_malloc_r+0x34>
 8011986:	463c      	mov	r4, r7
 8011988:	687f      	ldr	r7, [r7, #4]
 801198a:	e7b6      	b.n	80118fa <_malloc_r+0x4a>
 801198c:	461a      	mov	r2, r3
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	42a3      	cmp	r3, r4
 8011992:	d1fb      	bne.n	801198c <_malloc_r+0xdc>
 8011994:	2300      	movs	r3, #0
 8011996:	6053      	str	r3, [r2, #4]
 8011998:	e7de      	b.n	8011958 <_malloc_r+0xa8>
 801199a:	230c      	movs	r3, #12
 801199c:	6033      	str	r3, [r6, #0]
 801199e:	4630      	mov	r0, r6
 80119a0:	f000 f80c 	bl	80119bc <__malloc_unlock>
 80119a4:	e794      	b.n	80118d0 <_malloc_r+0x20>
 80119a6:	6005      	str	r5, [r0, #0]
 80119a8:	e7d6      	b.n	8011958 <_malloc_r+0xa8>
 80119aa:	bf00      	nop
 80119ac:	24006f98 	.word	0x24006f98

080119b0 <__malloc_lock>:
 80119b0:	4801      	ldr	r0, [pc, #4]	@ (80119b8 <__malloc_lock+0x8>)
 80119b2:	f000 bdf4 	b.w	801259e <__retarget_lock_acquire_recursive>
 80119b6:	bf00      	nop
 80119b8:	240070dc 	.word	0x240070dc

080119bc <__malloc_unlock>:
 80119bc:	4801      	ldr	r0, [pc, #4]	@ (80119c4 <__malloc_unlock+0x8>)
 80119be:	f000 bdef 	b.w	80125a0 <__retarget_lock_release_recursive>
 80119c2:	bf00      	nop
 80119c4:	240070dc 	.word	0x240070dc

080119c8 <__cvt>:
 80119c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119ca:	ed2d 8b02 	vpush	{d8}
 80119ce:	eeb0 8b40 	vmov.f64	d8, d0
 80119d2:	b085      	sub	sp, #20
 80119d4:	4617      	mov	r7, r2
 80119d6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80119d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80119da:	ee18 2a90 	vmov	r2, s17
 80119de:	f025 0520 	bic.w	r5, r5, #32
 80119e2:	2a00      	cmp	r2, #0
 80119e4:	bfb6      	itet	lt
 80119e6:	222d      	movlt	r2, #45	@ 0x2d
 80119e8:	2200      	movge	r2, #0
 80119ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80119ee:	2d46      	cmp	r5, #70	@ 0x46
 80119f0:	460c      	mov	r4, r1
 80119f2:	701a      	strb	r2, [r3, #0]
 80119f4:	d004      	beq.n	8011a00 <__cvt+0x38>
 80119f6:	2d45      	cmp	r5, #69	@ 0x45
 80119f8:	d100      	bne.n	80119fc <__cvt+0x34>
 80119fa:	3401      	adds	r4, #1
 80119fc:	2102      	movs	r1, #2
 80119fe:	e000      	b.n	8011a02 <__cvt+0x3a>
 8011a00:	2103      	movs	r1, #3
 8011a02:	ab03      	add	r3, sp, #12
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	ab02      	add	r3, sp, #8
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	4622      	mov	r2, r4
 8011a0c:	4633      	mov	r3, r6
 8011a0e:	eeb0 0b48 	vmov.f64	d0, d8
 8011a12:	f000 fe5d 	bl	80126d0 <_dtoa_r>
 8011a16:	2d47      	cmp	r5, #71	@ 0x47
 8011a18:	d114      	bne.n	8011a44 <__cvt+0x7c>
 8011a1a:	07fb      	lsls	r3, r7, #31
 8011a1c:	d50a      	bpl.n	8011a34 <__cvt+0x6c>
 8011a1e:	1902      	adds	r2, r0, r4
 8011a20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a28:	bf08      	it	eq
 8011a2a:	9203      	streq	r2, [sp, #12]
 8011a2c:	2130      	movs	r1, #48	@ 0x30
 8011a2e:	9b03      	ldr	r3, [sp, #12]
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d319      	bcc.n	8011a68 <__cvt+0xa0>
 8011a34:	9b03      	ldr	r3, [sp, #12]
 8011a36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a38:	1a1b      	subs	r3, r3, r0
 8011a3a:	6013      	str	r3, [r2, #0]
 8011a3c:	b005      	add	sp, #20
 8011a3e:	ecbd 8b02 	vpop	{d8}
 8011a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a44:	2d46      	cmp	r5, #70	@ 0x46
 8011a46:	eb00 0204 	add.w	r2, r0, r4
 8011a4a:	d1e9      	bne.n	8011a20 <__cvt+0x58>
 8011a4c:	7803      	ldrb	r3, [r0, #0]
 8011a4e:	2b30      	cmp	r3, #48	@ 0x30
 8011a50:	d107      	bne.n	8011a62 <__cvt+0x9a>
 8011a52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5a:	bf1c      	itt	ne
 8011a5c:	f1c4 0401 	rsbne	r4, r4, #1
 8011a60:	6034      	strne	r4, [r6, #0]
 8011a62:	6833      	ldr	r3, [r6, #0]
 8011a64:	441a      	add	r2, r3
 8011a66:	e7db      	b.n	8011a20 <__cvt+0x58>
 8011a68:	1c5c      	adds	r4, r3, #1
 8011a6a:	9403      	str	r4, [sp, #12]
 8011a6c:	7019      	strb	r1, [r3, #0]
 8011a6e:	e7de      	b.n	8011a2e <__cvt+0x66>

08011a70 <__exponent>:
 8011a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a72:	2900      	cmp	r1, #0
 8011a74:	bfba      	itte	lt
 8011a76:	4249      	neglt	r1, r1
 8011a78:	232d      	movlt	r3, #45	@ 0x2d
 8011a7a:	232b      	movge	r3, #43	@ 0x2b
 8011a7c:	2909      	cmp	r1, #9
 8011a7e:	7002      	strb	r2, [r0, #0]
 8011a80:	7043      	strb	r3, [r0, #1]
 8011a82:	dd29      	ble.n	8011ad8 <__exponent+0x68>
 8011a84:	f10d 0307 	add.w	r3, sp, #7
 8011a88:	461d      	mov	r5, r3
 8011a8a:	270a      	movs	r7, #10
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	fbb1 f6f7 	udiv	r6, r1, r7
 8011a92:	fb07 1416 	mls	r4, r7, r6, r1
 8011a96:	3430      	adds	r4, #48	@ 0x30
 8011a98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011a9c:	460c      	mov	r4, r1
 8011a9e:	2c63      	cmp	r4, #99	@ 0x63
 8011aa0:	f103 33ff 	add.w	r3, r3, #4294967295
 8011aa4:	4631      	mov	r1, r6
 8011aa6:	dcf1      	bgt.n	8011a8c <__exponent+0x1c>
 8011aa8:	3130      	adds	r1, #48	@ 0x30
 8011aaa:	1e94      	subs	r4, r2, #2
 8011aac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011ab0:	1c41      	adds	r1, r0, #1
 8011ab2:	4623      	mov	r3, r4
 8011ab4:	42ab      	cmp	r3, r5
 8011ab6:	d30a      	bcc.n	8011ace <__exponent+0x5e>
 8011ab8:	f10d 0309 	add.w	r3, sp, #9
 8011abc:	1a9b      	subs	r3, r3, r2
 8011abe:	42ac      	cmp	r4, r5
 8011ac0:	bf88      	it	hi
 8011ac2:	2300      	movhi	r3, #0
 8011ac4:	3302      	adds	r3, #2
 8011ac6:	4403      	add	r3, r0
 8011ac8:	1a18      	subs	r0, r3, r0
 8011aca:	b003      	add	sp, #12
 8011acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ace:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011ad2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011ad6:	e7ed      	b.n	8011ab4 <__exponent+0x44>
 8011ad8:	2330      	movs	r3, #48	@ 0x30
 8011ada:	3130      	adds	r1, #48	@ 0x30
 8011adc:	7083      	strb	r3, [r0, #2]
 8011ade:	70c1      	strb	r1, [r0, #3]
 8011ae0:	1d03      	adds	r3, r0, #4
 8011ae2:	e7f1      	b.n	8011ac8 <__exponent+0x58>
 8011ae4:	0000      	movs	r0, r0
	...

08011ae8 <_printf_float>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	b08d      	sub	sp, #52	@ 0x34
 8011aee:	460c      	mov	r4, r1
 8011af0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011af4:	4616      	mov	r6, r2
 8011af6:	461f      	mov	r7, r3
 8011af8:	4605      	mov	r5, r0
 8011afa:	f000 fccb 	bl	8012494 <_localeconv_r>
 8011afe:	f8d0 b000 	ldr.w	fp, [r0]
 8011b02:	4658      	mov	r0, fp
 8011b04:	f7ee fc3c 	bl	8000380 <strlen>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8011b10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011b14:	6822      	ldr	r2, [r4, #0]
 8011b16:	9005      	str	r0, [sp, #20]
 8011b18:	3307      	adds	r3, #7
 8011b1a:	f023 0307 	bic.w	r3, r3, #7
 8011b1e:	f103 0108 	add.w	r1, r3, #8
 8011b22:	f8c8 1000 	str.w	r1, [r8]
 8011b26:	ed93 0b00 	vldr	d0, [r3]
 8011b2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011d88 <_printf_float+0x2a0>
 8011b2e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011b32:	eeb4 7b46 	vcmp.f64	d7, d6
 8011b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011b3e:	dd24      	ble.n	8011b8a <_printf_float+0xa2>
 8011b40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b48:	d502      	bpl.n	8011b50 <_printf_float+0x68>
 8011b4a:	232d      	movs	r3, #45	@ 0x2d
 8011b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b50:	498f      	ldr	r1, [pc, #572]	@ (8011d90 <_printf_float+0x2a8>)
 8011b52:	4b90      	ldr	r3, [pc, #576]	@ (8011d94 <_printf_float+0x2ac>)
 8011b54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011b58:	bf94      	ite	ls
 8011b5a:	4688      	movls	r8, r1
 8011b5c:	4698      	movhi	r8, r3
 8011b5e:	f022 0204 	bic.w	r2, r2, #4
 8011b62:	2303      	movs	r3, #3
 8011b64:	6123      	str	r3, [r4, #16]
 8011b66:	6022      	str	r2, [r4, #0]
 8011b68:	f04f 0a00 	mov.w	sl, #0
 8011b6c:	9700      	str	r7, [sp, #0]
 8011b6e:	4633      	mov	r3, r6
 8011b70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011b72:	4621      	mov	r1, r4
 8011b74:	4628      	mov	r0, r5
 8011b76:	f000 f9d1 	bl	8011f1c <_printf_common>
 8011b7a:	3001      	adds	r0, #1
 8011b7c:	f040 8089 	bne.w	8011c92 <_printf_float+0x1aa>
 8011b80:	f04f 30ff 	mov.w	r0, #4294967295
 8011b84:	b00d      	add	sp, #52	@ 0x34
 8011b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8011b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b92:	d709      	bvc.n	8011ba8 <_printf_float+0xc0>
 8011b94:	ee10 3a90 	vmov	r3, s1
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	bfbc      	itt	lt
 8011b9c:	232d      	movlt	r3, #45	@ 0x2d
 8011b9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011ba2:	497d      	ldr	r1, [pc, #500]	@ (8011d98 <_printf_float+0x2b0>)
 8011ba4:	4b7d      	ldr	r3, [pc, #500]	@ (8011d9c <_printf_float+0x2b4>)
 8011ba6:	e7d5      	b.n	8011b54 <_printf_float+0x6c>
 8011ba8:	6863      	ldr	r3, [r4, #4]
 8011baa:	1c59      	adds	r1, r3, #1
 8011bac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011bb0:	d139      	bne.n	8011c26 <_printf_float+0x13e>
 8011bb2:	2306      	movs	r3, #6
 8011bb4:	6063      	str	r3, [r4, #4]
 8011bb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011bba:	2300      	movs	r3, #0
 8011bbc:	6022      	str	r2, [r4, #0]
 8011bbe:	9303      	str	r3, [sp, #12]
 8011bc0:	ab0a      	add	r3, sp, #40	@ 0x28
 8011bc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011bc6:	ab09      	add	r3, sp, #36	@ 0x24
 8011bc8:	9300      	str	r3, [sp, #0]
 8011bca:	6861      	ldr	r1, [r4, #4]
 8011bcc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	f7ff fef9 	bl	80119c8 <__cvt>
 8011bd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011bdc:	4680      	mov	r8, r0
 8011bde:	d129      	bne.n	8011c34 <_printf_float+0x14c>
 8011be0:	1cc8      	adds	r0, r1, #3
 8011be2:	db02      	blt.n	8011bea <_printf_float+0x102>
 8011be4:	6863      	ldr	r3, [r4, #4]
 8011be6:	4299      	cmp	r1, r3
 8011be8:	dd41      	ble.n	8011c6e <_printf_float+0x186>
 8011bea:	f1a9 0902 	sub.w	r9, r9, #2
 8011bee:	fa5f f989 	uxtb.w	r9, r9
 8011bf2:	3901      	subs	r1, #1
 8011bf4:	464a      	mov	r2, r9
 8011bf6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011bfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8011bfc:	f7ff ff38 	bl	8011a70 <__exponent>
 8011c00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c02:	1813      	adds	r3, r2, r0
 8011c04:	2a01      	cmp	r2, #1
 8011c06:	4682      	mov	sl, r0
 8011c08:	6123      	str	r3, [r4, #16]
 8011c0a:	dc02      	bgt.n	8011c12 <_printf_float+0x12a>
 8011c0c:	6822      	ldr	r2, [r4, #0]
 8011c0e:	07d2      	lsls	r2, r2, #31
 8011c10:	d501      	bpl.n	8011c16 <_printf_float+0x12e>
 8011c12:	3301      	adds	r3, #1
 8011c14:	6123      	str	r3, [r4, #16]
 8011c16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d0a6      	beq.n	8011b6c <_printf_float+0x84>
 8011c1e:	232d      	movs	r3, #45	@ 0x2d
 8011c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c24:	e7a2      	b.n	8011b6c <_printf_float+0x84>
 8011c26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011c2a:	d1c4      	bne.n	8011bb6 <_printf_float+0xce>
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d1c2      	bne.n	8011bb6 <_printf_float+0xce>
 8011c30:	2301      	movs	r3, #1
 8011c32:	e7bf      	b.n	8011bb4 <_printf_float+0xcc>
 8011c34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011c38:	d9db      	bls.n	8011bf2 <_printf_float+0x10a>
 8011c3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011c3e:	d118      	bne.n	8011c72 <_printf_float+0x18a>
 8011c40:	2900      	cmp	r1, #0
 8011c42:	6863      	ldr	r3, [r4, #4]
 8011c44:	dd0b      	ble.n	8011c5e <_printf_float+0x176>
 8011c46:	6121      	str	r1, [r4, #16]
 8011c48:	b913      	cbnz	r3, 8011c50 <_printf_float+0x168>
 8011c4a:	6822      	ldr	r2, [r4, #0]
 8011c4c:	07d0      	lsls	r0, r2, #31
 8011c4e:	d502      	bpl.n	8011c56 <_printf_float+0x16e>
 8011c50:	3301      	adds	r3, #1
 8011c52:	440b      	add	r3, r1
 8011c54:	6123      	str	r3, [r4, #16]
 8011c56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011c58:	f04f 0a00 	mov.w	sl, #0
 8011c5c:	e7db      	b.n	8011c16 <_printf_float+0x12e>
 8011c5e:	b913      	cbnz	r3, 8011c66 <_printf_float+0x17e>
 8011c60:	6822      	ldr	r2, [r4, #0]
 8011c62:	07d2      	lsls	r2, r2, #31
 8011c64:	d501      	bpl.n	8011c6a <_printf_float+0x182>
 8011c66:	3302      	adds	r3, #2
 8011c68:	e7f4      	b.n	8011c54 <_printf_float+0x16c>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e7f2      	b.n	8011c54 <_printf_float+0x16c>
 8011c6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011c72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c74:	4299      	cmp	r1, r3
 8011c76:	db05      	blt.n	8011c84 <_printf_float+0x19c>
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	6121      	str	r1, [r4, #16]
 8011c7c:	07d8      	lsls	r0, r3, #31
 8011c7e:	d5ea      	bpl.n	8011c56 <_printf_float+0x16e>
 8011c80:	1c4b      	adds	r3, r1, #1
 8011c82:	e7e7      	b.n	8011c54 <_printf_float+0x16c>
 8011c84:	2900      	cmp	r1, #0
 8011c86:	bfd4      	ite	le
 8011c88:	f1c1 0202 	rsble	r2, r1, #2
 8011c8c:	2201      	movgt	r2, #1
 8011c8e:	4413      	add	r3, r2
 8011c90:	e7e0      	b.n	8011c54 <_printf_float+0x16c>
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	055a      	lsls	r2, r3, #21
 8011c96:	d407      	bmi.n	8011ca8 <_printf_float+0x1c0>
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	4642      	mov	r2, r8
 8011c9c:	4631      	mov	r1, r6
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	47b8      	blx	r7
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d12a      	bne.n	8011cfc <_printf_float+0x214>
 8011ca6:	e76b      	b.n	8011b80 <_printf_float+0x98>
 8011ca8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011cac:	f240 80e0 	bls.w	8011e70 <_printf_float+0x388>
 8011cb0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011cb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cbc:	d133      	bne.n	8011d26 <_printf_float+0x23e>
 8011cbe:	4a38      	ldr	r2, [pc, #224]	@ (8011da0 <_printf_float+0x2b8>)
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	47b8      	blx	r7
 8011cc8:	3001      	adds	r0, #1
 8011cca:	f43f af59 	beq.w	8011b80 <_printf_float+0x98>
 8011cce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011cd2:	4543      	cmp	r3, r8
 8011cd4:	db02      	blt.n	8011cdc <_printf_float+0x1f4>
 8011cd6:	6823      	ldr	r3, [r4, #0]
 8011cd8:	07d8      	lsls	r0, r3, #31
 8011cda:	d50f      	bpl.n	8011cfc <_printf_float+0x214>
 8011cdc:	9b05      	ldr	r3, [sp, #20]
 8011cde:	465a      	mov	r2, fp
 8011ce0:	4631      	mov	r1, r6
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	47b8      	blx	r7
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	f43f af4a 	beq.w	8011b80 <_printf_float+0x98>
 8011cec:	f04f 0900 	mov.w	r9, #0
 8011cf0:	f108 38ff 	add.w	r8, r8, #4294967295
 8011cf4:	f104 0a1a 	add.w	sl, r4, #26
 8011cf8:	45c8      	cmp	r8, r9
 8011cfa:	dc09      	bgt.n	8011d10 <_printf_float+0x228>
 8011cfc:	6823      	ldr	r3, [r4, #0]
 8011cfe:	079b      	lsls	r3, r3, #30
 8011d00:	f100 8107 	bmi.w	8011f12 <_printf_float+0x42a>
 8011d04:	68e0      	ldr	r0, [r4, #12]
 8011d06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d08:	4298      	cmp	r0, r3
 8011d0a:	bfb8      	it	lt
 8011d0c:	4618      	movlt	r0, r3
 8011d0e:	e739      	b.n	8011b84 <_printf_float+0x9c>
 8011d10:	2301      	movs	r3, #1
 8011d12:	4652      	mov	r2, sl
 8011d14:	4631      	mov	r1, r6
 8011d16:	4628      	mov	r0, r5
 8011d18:	47b8      	blx	r7
 8011d1a:	3001      	adds	r0, #1
 8011d1c:	f43f af30 	beq.w	8011b80 <_printf_float+0x98>
 8011d20:	f109 0901 	add.w	r9, r9, #1
 8011d24:	e7e8      	b.n	8011cf8 <_printf_float+0x210>
 8011d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	dc3b      	bgt.n	8011da4 <_printf_float+0x2bc>
 8011d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8011da0 <_printf_float+0x2b8>)
 8011d2e:	2301      	movs	r3, #1
 8011d30:	4631      	mov	r1, r6
 8011d32:	4628      	mov	r0, r5
 8011d34:	47b8      	blx	r7
 8011d36:	3001      	adds	r0, #1
 8011d38:	f43f af22 	beq.w	8011b80 <_printf_float+0x98>
 8011d3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011d40:	ea59 0303 	orrs.w	r3, r9, r3
 8011d44:	d102      	bne.n	8011d4c <_printf_float+0x264>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	07d9      	lsls	r1, r3, #31
 8011d4a:	d5d7      	bpl.n	8011cfc <_printf_float+0x214>
 8011d4c:	9b05      	ldr	r3, [sp, #20]
 8011d4e:	465a      	mov	r2, fp
 8011d50:	4631      	mov	r1, r6
 8011d52:	4628      	mov	r0, r5
 8011d54:	47b8      	blx	r7
 8011d56:	3001      	adds	r0, #1
 8011d58:	f43f af12 	beq.w	8011b80 <_printf_float+0x98>
 8011d5c:	f04f 0a00 	mov.w	sl, #0
 8011d60:	f104 0b1a 	add.w	fp, r4, #26
 8011d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d66:	425b      	negs	r3, r3
 8011d68:	4553      	cmp	r3, sl
 8011d6a:	dc01      	bgt.n	8011d70 <_printf_float+0x288>
 8011d6c:	464b      	mov	r3, r9
 8011d6e:	e794      	b.n	8011c9a <_printf_float+0x1b2>
 8011d70:	2301      	movs	r3, #1
 8011d72:	465a      	mov	r2, fp
 8011d74:	4631      	mov	r1, r6
 8011d76:	4628      	mov	r0, r5
 8011d78:	47b8      	blx	r7
 8011d7a:	3001      	adds	r0, #1
 8011d7c:	f43f af00 	beq.w	8011b80 <_printf_float+0x98>
 8011d80:	f10a 0a01 	add.w	sl, sl, #1
 8011d84:	e7ee      	b.n	8011d64 <_printf_float+0x27c>
 8011d86:	bf00      	nop
 8011d88:	ffffffff 	.word	0xffffffff
 8011d8c:	7fefffff 	.word	0x7fefffff
 8011d90:	08016a54 	.word	0x08016a54
 8011d94:	08016a58 	.word	0x08016a58
 8011d98:	08016a5c 	.word	0x08016a5c
 8011d9c:	08016a60 	.word	0x08016a60
 8011da0:	08016a64 	.word	0x08016a64
 8011da4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011da6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011daa:	4553      	cmp	r3, sl
 8011dac:	bfa8      	it	ge
 8011dae:	4653      	movge	r3, sl
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	4699      	mov	r9, r3
 8011db4:	dc37      	bgt.n	8011e26 <_printf_float+0x33e>
 8011db6:	2300      	movs	r3, #0
 8011db8:	9307      	str	r3, [sp, #28]
 8011dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dbe:	f104 021a 	add.w	r2, r4, #26
 8011dc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011dc4:	9907      	ldr	r1, [sp, #28]
 8011dc6:	9306      	str	r3, [sp, #24]
 8011dc8:	eba3 0309 	sub.w	r3, r3, r9
 8011dcc:	428b      	cmp	r3, r1
 8011dce:	dc31      	bgt.n	8011e34 <_printf_float+0x34c>
 8011dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd2:	459a      	cmp	sl, r3
 8011dd4:	dc3b      	bgt.n	8011e4e <_printf_float+0x366>
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	07da      	lsls	r2, r3, #31
 8011dda:	d438      	bmi.n	8011e4e <_printf_float+0x366>
 8011ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dde:	ebaa 0903 	sub.w	r9, sl, r3
 8011de2:	9b06      	ldr	r3, [sp, #24]
 8011de4:	ebaa 0303 	sub.w	r3, sl, r3
 8011de8:	4599      	cmp	r9, r3
 8011dea:	bfa8      	it	ge
 8011dec:	4699      	movge	r9, r3
 8011dee:	f1b9 0f00 	cmp.w	r9, #0
 8011df2:	dc34      	bgt.n	8011e5e <_printf_float+0x376>
 8011df4:	f04f 0800 	mov.w	r8, #0
 8011df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dfc:	f104 0b1a 	add.w	fp, r4, #26
 8011e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e02:	ebaa 0303 	sub.w	r3, sl, r3
 8011e06:	eba3 0309 	sub.w	r3, r3, r9
 8011e0a:	4543      	cmp	r3, r8
 8011e0c:	f77f af76 	ble.w	8011cfc <_printf_float+0x214>
 8011e10:	2301      	movs	r3, #1
 8011e12:	465a      	mov	r2, fp
 8011e14:	4631      	mov	r1, r6
 8011e16:	4628      	mov	r0, r5
 8011e18:	47b8      	blx	r7
 8011e1a:	3001      	adds	r0, #1
 8011e1c:	f43f aeb0 	beq.w	8011b80 <_printf_float+0x98>
 8011e20:	f108 0801 	add.w	r8, r8, #1
 8011e24:	e7ec      	b.n	8011e00 <_printf_float+0x318>
 8011e26:	4642      	mov	r2, r8
 8011e28:	4631      	mov	r1, r6
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	47b8      	blx	r7
 8011e2e:	3001      	adds	r0, #1
 8011e30:	d1c1      	bne.n	8011db6 <_printf_float+0x2ce>
 8011e32:	e6a5      	b.n	8011b80 <_printf_float+0x98>
 8011e34:	2301      	movs	r3, #1
 8011e36:	4631      	mov	r1, r6
 8011e38:	4628      	mov	r0, r5
 8011e3a:	9206      	str	r2, [sp, #24]
 8011e3c:	47b8      	blx	r7
 8011e3e:	3001      	adds	r0, #1
 8011e40:	f43f ae9e 	beq.w	8011b80 <_printf_float+0x98>
 8011e44:	9b07      	ldr	r3, [sp, #28]
 8011e46:	9a06      	ldr	r2, [sp, #24]
 8011e48:	3301      	adds	r3, #1
 8011e4a:	9307      	str	r3, [sp, #28]
 8011e4c:	e7b9      	b.n	8011dc2 <_printf_float+0x2da>
 8011e4e:	9b05      	ldr	r3, [sp, #20]
 8011e50:	465a      	mov	r2, fp
 8011e52:	4631      	mov	r1, r6
 8011e54:	4628      	mov	r0, r5
 8011e56:	47b8      	blx	r7
 8011e58:	3001      	adds	r0, #1
 8011e5a:	d1bf      	bne.n	8011ddc <_printf_float+0x2f4>
 8011e5c:	e690      	b.n	8011b80 <_printf_float+0x98>
 8011e5e:	9a06      	ldr	r2, [sp, #24]
 8011e60:	464b      	mov	r3, r9
 8011e62:	4442      	add	r2, r8
 8011e64:	4631      	mov	r1, r6
 8011e66:	4628      	mov	r0, r5
 8011e68:	47b8      	blx	r7
 8011e6a:	3001      	adds	r0, #1
 8011e6c:	d1c2      	bne.n	8011df4 <_printf_float+0x30c>
 8011e6e:	e687      	b.n	8011b80 <_printf_float+0x98>
 8011e70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011e74:	f1b9 0f01 	cmp.w	r9, #1
 8011e78:	dc01      	bgt.n	8011e7e <_printf_float+0x396>
 8011e7a:	07db      	lsls	r3, r3, #31
 8011e7c:	d536      	bpl.n	8011eec <_printf_float+0x404>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	4642      	mov	r2, r8
 8011e82:	4631      	mov	r1, r6
 8011e84:	4628      	mov	r0, r5
 8011e86:	47b8      	blx	r7
 8011e88:	3001      	adds	r0, #1
 8011e8a:	f43f ae79 	beq.w	8011b80 <_printf_float+0x98>
 8011e8e:	9b05      	ldr	r3, [sp, #20]
 8011e90:	465a      	mov	r2, fp
 8011e92:	4631      	mov	r1, r6
 8011e94:	4628      	mov	r0, r5
 8011e96:	47b8      	blx	r7
 8011e98:	3001      	adds	r0, #1
 8011e9a:	f43f ae71 	beq.w	8011b80 <_printf_float+0x98>
 8011e9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011ea2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eaa:	f109 39ff 	add.w	r9, r9, #4294967295
 8011eae:	d018      	beq.n	8011ee2 <_printf_float+0x3fa>
 8011eb0:	464b      	mov	r3, r9
 8011eb2:	f108 0201 	add.w	r2, r8, #1
 8011eb6:	4631      	mov	r1, r6
 8011eb8:	4628      	mov	r0, r5
 8011eba:	47b8      	blx	r7
 8011ebc:	3001      	adds	r0, #1
 8011ebe:	d10c      	bne.n	8011eda <_printf_float+0x3f2>
 8011ec0:	e65e      	b.n	8011b80 <_printf_float+0x98>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	465a      	mov	r2, fp
 8011ec6:	4631      	mov	r1, r6
 8011ec8:	4628      	mov	r0, r5
 8011eca:	47b8      	blx	r7
 8011ecc:	3001      	adds	r0, #1
 8011ece:	f43f ae57 	beq.w	8011b80 <_printf_float+0x98>
 8011ed2:	f108 0801 	add.w	r8, r8, #1
 8011ed6:	45c8      	cmp	r8, r9
 8011ed8:	dbf3      	blt.n	8011ec2 <_printf_float+0x3da>
 8011eda:	4653      	mov	r3, sl
 8011edc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011ee0:	e6dc      	b.n	8011c9c <_printf_float+0x1b4>
 8011ee2:	f04f 0800 	mov.w	r8, #0
 8011ee6:	f104 0b1a 	add.w	fp, r4, #26
 8011eea:	e7f4      	b.n	8011ed6 <_printf_float+0x3ee>
 8011eec:	2301      	movs	r3, #1
 8011eee:	4642      	mov	r2, r8
 8011ef0:	e7e1      	b.n	8011eb6 <_printf_float+0x3ce>
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	464a      	mov	r2, r9
 8011ef6:	4631      	mov	r1, r6
 8011ef8:	4628      	mov	r0, r5
 8011efa:	47b8      	blx	r7
 8011efc:	3001      	adds	r0, #1
 8011efe:	f43f ae3f 	beq.w	8011b80 <_printf_float+0x98>
 8011f02:	f108 0801 	add.w	r8, r8, #1
 8011f06:	68e3      	ldr	r3, [r4, #12]
 8011f08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011f0a:	1a5b      	subs	r3, r3, r1
 8011f0c:	4543      	cmp	r3, r8
 8011f0e:	dcf0      	bgt.n	8011ef2 <_printf_float+0x40a>
 8011f10:	e6f8      	b.n	8011d04 <_printf_float+0x21c>
 8011f12:	f04f 0800 	mov.w	r8, #0
 8011f16:	f104 0919 	add.w	r9, r4, #25
 8011f1a:	e7f4      	b.n	8011f06 <_printf_float+0x41e>

08011f1c <_printf_common>:
 8011f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f20:	4616      	mov	r6, r2
 8011f22:	4698      	mov	r8, r3
 8011f24:	688a      	ldr	r2, [r1, #8]
 8011f26:	690b      	ldr	r3, [r1, #16]
 8011f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	bfb8      	it	lt
 8011f30:	4613      	movlt	r3, r2
 8011f32:	6033      	str	r3, [r6, #0]
 8011f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011f38:	4607      	mov	r7, r0
 8011f3a:	460c      	mov	r4, r1
 8011f3c:	b10a      	cbz	r2, 8011f42 <_printf_common+0x26>
 8011f3e:	3301      	adds	r3, #1
 8011f40:	6033      	str	r3, [r6, #0]
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	0699      	lsls	r1, r3, #26
 8011f46:	bf42      	ittt	mi
 8011f48:	6833      	ldrmi	r3, [r6, #0]
 8011f4a:	3302      	addmi	r3, #2
 8011f4c:	6033      	strmi	r3, [r6, #0]
 8011f4e:	6825      	ldr	r5, [r4, #0]
 8011f50:	f015 0506 	ands.w	r5, r5, #6
 8011f54:	d106      	bne.n	8011f64 <_printf_common+0x48>
 8011f56:	f104 0a19 	add.w	sl, r4, #25
 8011f5a:	68e3      	ldr	r3, [r4, #12]
 8011f5c:	6832      	ldr	r2, [r6, #0]
 8011f5e:	1a9b      	subs	r3, r3, r2
 8011f60:	42ab      	cmp	r3, r5
 8011f62:	dc26      	bgt.n	8011fb2 <_printf_common+0x96>
 8011f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011f68:	6822      	ldr	r2, [r4, #0]
 8011f6a:	3b00      	subs	r3, #0
 8011f6c:	bf18      	it	ne
 8011f6e:	2301      	movne	r3, #1
 8011f70:	0692      	lsls	r2, r2, #26
 8011f72:	d42b      	bmi.n	8011fcc <_printf_common+0xb0>
 8011f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011f78:	4641      	mov	r1, r8
 8011f7a:	4638      	mov	r0, r7
 8011f7c:	47c8      	blx	r9
 8011f7e:	3001      	adds	r0, #1
 8011f80:	d01e      	beq.n	8011fc0 <_printf_common+0xa4>
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	6922      	ldr	r2, [r4, #16]
 8011f86:	f003 0306 	and.w	r3, r3, #6
 8011f8a:	2b04      	cmp	r3, #4
 8011f8c:	bf02      	ittt	eq
 8011f8e:	68e5      	ldreq	r5, [r4, #12]
 8011f90:	6833      	ldreq	r3, [r6, #0]
 8011f92:	1aed      	subeq	r5, r5, r3
 8011f94:	68a3      	ldr	r3, [r4, #8]
 8011f96:	bf0c      	ite	eq
 8011f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f9c:	2500      	movne	r5, #0
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	bfc4      	itt	gt
 8011fa2:	1a9b      	subgt	r3, r3, r2
 8011fa4:	18ed      	addgt	r5, r5, r3
 8011fa6:	2600      	movs	r6, #0
 8011fa8:	341a      	adds	r4, #26
 8011faa:	42b5      	cmp	r5, r6
 8011fac:	d11a      	bne.n	8011fe4 <_printf_common+0xc8>
 8011fae:	2000      	movs	r0, #0
 8011fb0:	e008      	b.n	8011fc4 <_printf_common+0xa8>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	4652      	mov	r2, sl
 8011fb6:	4641      	mov	r1, r8
 8011fb8:	4638      	mov	r0, r7
 8011fba:	47c8      	blx	r9
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	d103      	bne.n	8011fc8 <_printf_common+0xac>
 8011fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc8:	3501      	adds	r5, #1
 8011fca:	e7c6      	b.n	8011f5a <_printf_common+0x3e>
 8011fcc:	18e1      	adds	r1, r4, r3
 8011fce:	1c5a      	adds	r2, r3, #1
 8011fd0:	2030      	movs	r0, #48	@ 0x30
 8011fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011fd6:	4422      	add	r2, r4
 8011fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011fe0:	3302      	adds	r3, #2
 8011fe2:	e7c7      	b.n	8011f74 <_printf_common+0x58>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	4622      	mov	r2, r4
 8011fe8:	4641      	mov	r1, r8
 8011fea:	4638      	mov	r0, r7
 8011fec:	47c8      	blx	r9
 8011fee:	3001      	adds	r0, #1
 8011ff0:	d0e6      	beq.n	8011fc0 <_printf_common+0xa4>
 8011ff2:	3601      	adds	r6, #1
 8011ff4:	e7d9      	b.n	8011faa <_printf_common+0x8e>
	...

08011ff8 <_printf_i>:
 8011ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ffc:	7e0f      	ldrb	r7, [r1, #24]
 8011ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012000:	2f78      	cmp	r7, #120	@ 0x78
 8012002:	4691      	mov	r9, r2
 8012004:	4680      	mov	r8, r0
 8012006:	460c      	mov	r4, r1
 8012008:	469a      	mov	sl, r3
 801200a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801200e:	d807      	bhi.n	8012020 <_printf_i+0x28>
 8012010:	2f62      	cmp	r7, #98	@ 0x62
 8012012:	d80a      	bhi.n	801202a <_printf_i+0x32>
 8012014:	2f00      	cmp	r7, #0
 8012016:	f000 80d2 	beq.w	80121be <_printf_i+0x1c6>
 801201a:	2f58      	cmp	r7, #88	@ 0x58
 801201c:	f000 80b9 	beq.w	8012192 <_printf_i+0x19a>
 8012020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012028:	e03a      	b.n	80120a0 <_printf_i+0xa8>
 801202a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801202e:	2b15      	cmp	r3, #21
 8012030:	d8f6      	bhi.n	8012020 <_printf_i+0x28>
 8012032:	a101      	add	r1, pc, #4	@ (adr r1, 8012038 <_printf_i+0x40>)
 8012034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012038:	08012091 	.word	0x08012091
 801203c:	080120a5 	.word	0x080120a5
 8012040:	08012021 	.word	0x08012021
 8012044:	08012021 	.word	0x08012021
 8012048:	08012021 	.word	0x08012021
 801204c:	08012021 	.word	0x08012021
 8012050:	080120a5 	.word	0x080120a5
 8012054:	08012021 	.word	0x08012021
 8012058:	08012021 	.word	0x08012021
 801205c:	08012021 	.word	0x08012021
 8012060:	08012021 	.word	0x08012021
 8012064:	080121a5 	.word	0x080121a5
 8012068:	080120cf 	.word	0x080120cf
 801206c:	0801215f 	.word	0x0801215f
 8012070:	08012021 	.word	0x08012021
 8012074:	08012021 	.word	0x08012021
 8012078:	080121c7 	.word	0x080121c7
 801207c:	08012021 	.word	0x08012021
 8012080:	080120cf 	.word	0x080120cf
 8012084:	08012021 	.word	0x08012021
 8012088:	08012021 	.word	0x08012021
 801208c:	08012167 	.word	0x08012167
 8012090:	6833      	ldr	r3, [r6, #0]
 8012092:	1d1a      	adds	r2, r3, #4
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	6032      	str	r2, [r6, #0]
 8012098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801209c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80120a0:	2301      	movs	r3, #1
 80120a2:	e09d      	b.n	80121e0 <_printf_i+0x1e8>
 80120a4:	6833      	ldr	r3, [r6, #0]
 80120a6:	6820      	ldr	r0, [r4, #0]
 80120a8:	1d19      	adds	r1, r3, #4
 80120aa:	6031      	str	r1, [r6, #0]
 80120ac:	0606      	lsls	r6, r0, #24
 80120ae:	d501      	bpl.n	80120b4 <_printf_i+0xbc>
 80120b0:	681d      	ldr	r5, [r3, #0]
 80120b2:	e003      	b.n	80120bc <_printf_i+0xc4>
 80120b4:	0645      	lsls	r5, r0, #25
 80120b6:	d5fb      	bpl.n	80120b0 <_printf_i+0xb8>
 80120b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80120bc:	2d00      	cmp	r5, #0
 80120be:	da03      	bge.n	80120c8 <_printf_i+0xd0>
 80120c0:	232d      	movs	r3, #45	@ 0x2d
 80120c2:	426d      	negs	r5, r5
 80120c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120c8:	4859      	ldr	r0, [pc, #356]	@ (8012230 <_printf_i+0x238>)
 80120ca:	230a      	movs	r3, #10
 80120cc:	e011      	b.n	80120f2 <_printf_i+0xfa>
 80120ce:	6821      	ldr	r1, [r4, #0]
 80120d0:	6833      	ldr	r3, [r6, #0]
 80120d2:	0608      	lsls	r0, r1, #24
 80120d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80120d8:	d402      	bmi.n	80120e0 <_printf_i+0xe8>
 80120da:	0649      	lsls	r1, r1, #25
 80120dc:	bf48      	it	mi
 80120de:	b2ad      	uxthmi	r5, r5
 80120e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80120e2:	4853      	ldr	r0, [pc, #332]	@ (8012230 <_printf_i+0x238>)
 80120e4:	6033      	str	r3, [r6, #0]
 80120e6:	bf14      	ite	ne
 80120e8:	230a      	movne	r3, #10
 80120ea:	2308      	moveq	r3, #8
 80120ec:	2100      	movs	r1, #0
 80120ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80120f2:	6866      	ldr	r6, [r4, #4]
 80120f4:	60a6      	str	r6, [r4, #8]
 80120f6:	2e00      	cmp	r6, #0
 80120f8:	bfa2      	ittt	ge
 80120fa:	6821      	ldrge	r1, [r4, #0]
 80120fc:	f021 0104 	bicge.w	r1, r1, #4
 8012100:	6021      	strge	r1, [r4, #0]
 8012102:	b90d      	cbnz	r5, 8012108 <_printf_i+0x110>
 8012104:	2e00      	cmp	r6, #0
 8012106:	d04b      	beq.n	80121a0 <_printf_i+0x1a8>
 8012108:	4616      	mov	r6, r2
 801210a:	fbb5 f1f3 	udiv	r1, r5, r3
 801210e:	fb03 5711 	mls	r7, r3, r1, r5
 8012112:	5dc7      	ldrb	r7, [r0, r7]
 8012114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012118:	462f      	mov	r7, r5
 801211a:	42bb      	cmp	r3, r7
 801211c:	460d      	mov	r5, r1
 801211e:	d9f4      	bls.n	801210a <_printf_i+0x112>
 8012120:	2b08      	cmp	r3, #8
 8012122:	d10b      	bne.n	801213c <_printf_i+0x144>
 8012124:	6823      	ldr	r3, [r4, #0]
 8012126:	07df      	lsls	r7, r3, #31
 8012128:	d508      	bpl.n	801213c <_printf_i+0x144>
 801212a:	6923      	ldr	r3, [r4, #16]
 801212c:	6861      	ldr	r1, [r4, #4]
 801212e:	4299      	cmp	r1, r3
 8012130:	bfde      	ittt	le
 8012132:	2330      	movle	r3, #48	@ 0x30
 8012134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012138:	f106 36ff 	addle.w	r6, r6, #4294967295
 801213c:	1b92      	subs	r2, r2, r6
 801213e:	6122      	str	r2, [r4, #16]
 8012140:	f8cd a000 	str.w	sl, [sp]
 8012144:	464b      	mov	r3, r9
 8012146:	aa03      	add	r2, sp, #12
 8012148:	4621      	mov	r1, r4
 801214a:	4640      	mov	r0, r8
 801214c:	f7ff fee6 	bl	8011f1c <_printf_common>
 8012150:	3001      	adds	r0, #1
 8012152:	d14a      	bne.n	80121ea <_printf_i+0x1f2>
 8012154:	f04f 30ff 	mov.w	r0, #4294967295
 8012158:	b004      	add	sp, #16
 801215a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	f043 0320 	orr.w	r3, r3, #32
 8012164:	6023      	str	r3, [r4, #0]
 8012166:	4833      	ldr	r0, [pc, #204]	@ (8012234 <_printf_i+0x23c>)
 8012168:	2778      	movs	r7, #120	@ 0x78
 801216a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801216e:	6823      	ldr	r3, [r4, #0]
 8012170:	6831      	ldr	r1, [r6, #0]
 8012172:	061f      	lsls	r7, r3, #24
 8012174:	f851 5b04 	ldr.w	r5, [r1], #4
 8012178:	d402      	bmi.n	8012180 <_printf_i+0x188>
 801217a:	065f      	lsls	r7, r3, #25
 801217c:	bf48      	it	mi
 801217e:	b2ad      	uxthmi	r5, r5
 8012180:	6031      	str	r1, [r6, #0]
 8012182:	07d9      	lsls	r1, r3, #31
 8012184:	bf44      	itt	mi
 8012186:	f043 0320 	orrmi.w	r3, r3, #32
 801218a:	6023      	strmi	r3, [r4, #0]
 801218c:	b11d      	cbz	r5, 8012196 <_printf_i+0x19e>
 801218e:	2310      	movs	r3, #16
 8012190:	e7ac      	b.n	80120ec <_printf_i+0xf4>
 8012192:	4827      	ldr	r0, [pc, #156]	@ (8012230 <_printf_i+0x238>)
 8012194:	e7e9      	b.n	801216a <_printf_i+0x172>
 8012196:	6823      	ldr	r3, [r4, #0]
 8012198:	f023 0320 	bic.w	r3, r3, #32
 801219c:	6023      	str	r3, [r4, #0]
 801219e:	e7f6      	b.n	801218e <_printf_i+0x196>
 80121a0:	4616      	mov	r6, r2
 80121a2:	e7bd      	b.n	8012120 <_printf_i+0x128>
 80121a4:	6833      	ldr	r3, [r6, #0]
 80121a6:	6825      	ldr	r5, [r4, #0]
 80121a8:	6961      	ldr	r1, [r4, #20]
 80121aa:	1d18      	adds	r0, r3, #4
 80121ac:	6030      	str	r0, [r6, #0]
 80121ae:	062e      	lsls	r6, r5, #24
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	d501      	bpl.n	80121b8 <_printf_i+0x1c0>
 80121b4:	6019      	str	r1, [r3, #0]
 80121b6:	e002      	b.n	80121be <_printf_i+0x1c6>
 80121b8:	0668      	lsls	r0, r5, #25
 80121ba:	d5fb      	bpl.n	80121b4 <_printf_i+0x1bc>
 80121bc:	8019      	strh	r1, [r3, #0]
 80121be:	2300      	movs	r3, #0
 80121c0:	6123      	str	r3, [r4, #16]
 80121c2:	4616      	mov	r6, r2
 80121c4:	e7bc      	b.n	8012140 <_printf_i+0x148>
 80121c6:	6833      	ldr	r3, [r6, #0]
 80121c8:	1d1a      	adds	r2, r3, #4
 80121ca:	6032      	str	r2, [r6, #0]
 80121cc:	681e      	ldr	r6, [r3, #0]
 80121ce:	6862      	ldr	r2, [r4, #4]
 80121d0:	2100      	movs	r1, #0
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7ee f884 	bl	80002e0 <memchr>
 80121d8:	b108      	cbz	r0, 80121de <_printf_i+0x1e6>
 80121da:	1b80      	subs	r0, r0, r6
 80121dc:	6060      	str	r0, [r4, #4]
 80121de:	6863      	ldr	r3, [r4, #4]
 80121e0:	6123      	str	r3, [r4, #16]
 80121e2:	2300      	movs	r3, #0
 80121e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121e8:	e7aa      	b.n	8012140 <_printf_i+0x148>
 80121ea:	6923      	ldr	r3, [r4, #16]
 80121ec:	4632      	mov	r2, r6
 80121ee:	4649      	mov	r1, r9
 80121f0:	4640      	mov	r0, r8
 80121f2:	47d0      	blx	sl
 80121f4:	3001      	adds	r0, #1
 80121f6:	d0ad      	beq.n	8012154 <_printf_i+0x15c>
 80121f8:	6823      	ldr	r3, [r4, #0]
 80121fa:	079b      	lsls	r3, r3, #30
 80121fc:	d413      	bmi.n	8012226 <_printf_i+0x22e>
 80121fe:	68e0      	ldr	r0, [r4, #12]
 8012200:	9b03      	ldr	r3, [sp, #12]
 8012202:	4298      	cmp	r0, r3
 8012204:	bfb8      	it	lt
 8012206:	4618      	movlt	r0, r3
 8012208:	e7a6      	b.n	8012158 <_printf_i+0x160>
 801220a:	2301      	movs	r3, #1
 801220c:	4632      	mov	r2, r6
 801220e:	4649      	mov	r1, r9
 8012210:	4640      	mov	r0, r8
 8012212:	47d0      	blx	sl
 8012214:	3001      	adds	r0, #1
 8012216:	d09d      	beq.n	8012154 <_printf_i+0x15c>
 8012218:	3501      	adds	r5, #1
 801221a:	68e3      	ldr	r3, [r4, #12]
 801221c:	9903      	ldr	r1, [sp, #12]
 801221e:	1a5b      	subs	r3, r3, r1
 8012220:	42ab      	cmp	r3, r5
 8012222:	dcf2      	bgt.n	801220a <_printf_i+0x212>
 8012224:	e7eb      	b.n	80121fe <_printf_i+0x206>
 8012226:	2500      	movs	r5, #0
 8012228:	f104 0619 	add.w	r6, r4, #25
 801222c:	e7f5      	b.n	801221a <_printf_i+0x222>
 801222e:	bf00      	nop
 8012230:	08016a66 	.word	0x08016a66
 8012234:	08016a77 	.word	0x08016a77

08012238 <std>:
 8012238:	2300      	movs	r3, #0
 801223a:	b510      	push	{r4, lr}
 801223c:	4604      	mov	r4, r0
 801223e:	e9c0 3300 	strd	r3, r3, [r0]
 8012242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012246:	6083      	str	r3, [r0, #8]
 8012248:	8181      	strh	r1, [r0, #12]
 801224a:	6643      	str	r3, [r0, #100]	@ 0x64
 801224c:	81c2      	strh	r2, [r0, #14]
 801224e:	6183      	str	r3, [r0, #24]
 8012250:	4619      	mov	r1, r3
 8012252:	2208      	movs	r2, #8
 8012254:	305c      	adds	r0, #92	@ 0x5c
 8012256:	f000 f914 	bl	8012482 <memset>
 801225a:	4b0d      	ldr	r3, [pc, #52]	@ (8012290 <std+0x58>)
 801225c:	6263      	str	r3, [r4, #36]	@ 0x24
 801225e:	4b0d      	ldr	r3, [pc, #52]	@ (8012294 <std+0x5c>)
 8012260:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012262:	4b0d      	ldr	r3, [pc, #52]	@ (8012298 <std+0x60>)
 8012264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012266:	4b0d      	ldr	r3, [pc, #52]	@ (801229c <std+0x64>)
 8012268:	6323      	str	r3, [r4, #48]	@ 0x30
 801226a:	4b0d      	ldr	r3, [pc, #52]	@ (80122a0 <std+0x68>)
 801226c:	6224      	str	r4, [r4, #32]
 801226e:	429c      	cmp	r4, r3
 8012270:	d006      	beq.n	8012280 <std+0x48>
 8012272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012276:	4294      	cmp	r4, r2
 8012278:	d002      	beq.n	8012280 <std+0x48>
 801227a:	33d0      	adds	r3, #208	@ 0xd0
 801227c:	429c      	cmp	r4, r3
 801227e:	d105      	bne.n	801228c <std+0x54>
 8012280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012288:	f000 b988 	b.w	801259c <__retarget_lock_init_recursive>
 801228c:	bd10      	pop	{r4, pc}
 801228e:	bf00      	nop
 8012290:	080123fd 	.word	0x080123fd
 8012294:	0801241f 	.word	0x0801241f
 8012298:	08012457 	.word	0x08012457
 801229c:	0801247b 	.word	0x0801247b
 80122a0:	24006f9c 	.word	0x24006f9c

080122a4 <stdio_exit_handler>:
 80122a4:	4a02      	ldr	r2, [pc, #8]	@ (80122b0 <stdio_exit_handler+0xc>)
 80122a6:	4903      	ldr	r1, [pc, #12]	@ (80122b4 <stdio_exit_handler+0x10>)
 80122a8:	4803      	ldr	r0, [pc, #12]	@ (80122b8 <stdio_exit_handler+0x14>)
 80122aa:	f000 b869 	b.w	8012380 <_fwalk_sglue>
 80122ae:	bf00      	nop
 80122b0:	2400012c 	.word	0x2400012c
 80122b4:	08013ccd 	.word	0x08013ccd
 80122b8:	2400013c 	.word	0x2400013c

080122bc <cleanup_stdio>:
 80122bc:	6841      	ldr	r1, [r0, #4]
 80122be:	4b0c      	ldr	r3, [pc, #48]	@ (80122f0 <cleanup_stdio+0x34>)
 80122c0:	4299      	cmp	r1, r3
 80122c2:	b510      	push	{r4, lr}
 80122c4:	4604      	mov	r4, r0
 80122c6:	d001      	beq.n	80122cc <cleanup_stdio+0x10>
 80122c8:	f001 fd00 	bl	8013ccc <_fflush_r>
 80122cc:	68a1      	ldr	r1, [r4, #8]
 80122ce:	4b09      	ldr	r3, [pc, #36]	@ (80122f4 <cleanup_stdio+0x38>)
 80122d0:	4299      	cmp	r1, r3
 80122d2:	d002      	beq.n	80122da <cleanup_stdio+0x1e>
 80122d4:	4620      	mov	r0, r4
 80122d6:	f001 fcf9 	bl	8013ccc <_fflush_r>
 80122da:	68e1      	ldr	r1, [r4, #12]
 80122dc:	4b06      	ldr	r3, [pc, #24]	@ (80122f8 <cleanup_stdio+0x3c>)
 80122de:	4299      	cmp	r1, r3
 80122e0:	d004      	beq.n	80122ec <cleanup_stdio+0x30>
 80122e2:	4620      	mov	r0, r4
 80122e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122e8:	f001 bcf0 	b.w	8013ccc <_fflush_r>
 80122ec:	bd10      	pop	{r4, pc}
 80122ee:	bf00      	nop
 80122f0:	24006f9c 	.word	0x24006f9c
 80122f4:	24007004 	.word	0x24007004
 80122f8:	2400706c 	.word	0x2400706c

080122fc <global_stdio_init.part.0>:
 80122fc:	b510      	push	{r4, lr}
 80122fe:	4b0b      	ldr	r3, [pc, #44]	@ (801232c <global_stdio_init.part.0+0x30>)
 8012300:	4c0b      	ldr	r4, [pc, #44]	@ (8012330 <global_stdio_init.part.0+0x34>)
 8012302:	4a0c      	ldr	r2, [pc, #48]	@ (8012334 <global_stdio_init.part.0+0x38>)
 8012304:	601a      	str	r2, [r3, #0]
 8012306:	4620      	mov	r0, r4
 8012308:	2200      	movs	r2, #0
 801230a:	2104      	movs	r1, #4
 801230c:	f7ff ff94 	bl	8012238 <std>
 8012310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012314:	2201      	movs	r2, #1
 8012316:	2109      	movs	r1, #9
 8012318:	f7ff ff8e 	bl	8012238 <std>
 801231c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012320:	2202      	movs	r2, #2
 8012322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012326:	2112      	movs	r1, #18
 8012328:	f7ff bf86 	b.w	8012238 <std>
 801232c:	240070d4 	.word	0x240070d4
 8012330:	24006f9c 	.word	0x24006f9c
 8012334:	080122a5 	.word	0x080122a5

08012338 <__sfp_lock_acquire>:
 8012338:	4801      	ldr	r0, [pc, #4]	@ (8012340 <__sfp_lock_acquire+0x8>)
 801233a:	f000 b930 	b.w	801259e <__retarget_lock_acquire_recursive>
 801233e:	bf00      	nop
 8012340:	240070dd 	.word	0x240070dd

08012344 <__sfp_lock_release>:
 8012344:	4801      	ldr	r0, [pc, #4]	@ (801234c <__sfp_lock_release+0x8>)
 8012346:	f000 b92b 	b.w	80125a0 <__retarget_lock_release_recursive>
 801234a:	bf00      	nop
 801234c:	240070dd 	.word	0x240070dd

08012350 <__sinit>:
 8012350:	b510      	push	{r4, lr}
 8012352:	4604      	mov	r4, r0
 8012354:	f7ff fff0 	bl	8012338 <__sfp_lock_acquire>
 8012358:	6a23      	ldr	r3, [r4, #32]
 801235a:	b11b      	cbz	r3, 8012364 <__sinit+0x14>
 801235c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012360:	f7ff bff0 	b.w	8012344 <__sfp_lock_release>
 8012364:	4b04      	ldr	r3, [pc, #16]	@ (8012378 <__sinit+0x28>)
 8012366:	6223      	str	r3, [r4, #32]
 8012368:	4b04      	ldr	r3, [pc, #16]	@ (801237c <__sinit+0x2c>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1f5      	bne.n	801235c <__sinit+0xc>
 8012370:	f7ff ffc4 	bl	80122fc <global_stdio_init.part.0>
 8012374:	e7f2      	b.n	801235c <__sinit+0xc>
 8012376:	bf00      	nop
 8012378:	080122bd 	.word	0x080122bd
 801237c:	240070d4 	.word	0x240070d4

08012380 <_fwalk_sglue>:
 8012380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012384:	4607      	mov	r7, r0
 8012386:	4688      	mov	r8, r1
 8012388:	4614      	mov	r4, r2
 801238a:	2600      	movs	r6, #0
 801238c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012390:	f1b9 0901 	subs.w	r9, r9, #1
 8012394:	d505      	bpl.n	80123a2 <_fwalk_sglue+0x22>
 8012396:	6824      	ldr	r4, [r4, #0]
 8012398:	2c00      	cmp	r4, #0
 801239a:	d1f7      	bne.n	801238c <_fwalk_sglue+0xc>
 801239c:	4630      	mov	r0, r6
 801239e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123a2:	89ab      	ldrh	r3, [r5, #12]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d907      	bls.n	80123b8 <_fwalk_sglue+0x38>
 80123a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80123ac:	3301      	adds	r3, #1
 80123ae:	d003      	beq.n	80123b8 <_fwalk_sglue+0x38>
 80123b0:	4629      	mov	r1, r5
 80123b2:	4638      	mov	r0, r7
 80123b4:	47c0      	blx	r8
 80123b6:	4306      	orrs	r6, r0
 80123b8:	3568      	adds	r5, #104	@ 0x68
 80123ba:	e7e9      	b.n	8012390 <_fwalk_sglue+0x10>

080123bc <siprintf>:
 80123bc:	b40e      	push	{r1, r2, r3}
 80123be:	b500      	push	{lr}
 80123c0:	b09c      	sub	sp, #112	@ 0x70
 80123c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80123c4:	9002      	str	r0, [sp, #8]
 80123c6:	9006      	str	r0, [sp, #24]
 80123c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80123cc:	4809      	ldr	r0, [pc, #36]	@ (80123f4 <siprintf+0x38>)
 80123ce:	9107      	str	r1, [sp, #28]
 80123d0:	9104      	str	r1, [sp, #16]
 80123d2:	4909      	ldr	r1, [pc, #36]	@ (80123f8 <siprintf+0x3c>)
 80123d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d8:	9105      	str	r1, [sp, #20]
 80123da:	6800      	ldr	r0, [r0, #0]
 80123dc:	9301      	str	r3, [sp, #4]
 80123de:	a902      	add	r1, sp, #8
 80123e0:	f001 faf4 	bl	80139cc <_svfiprintf_r>
 80123e4:	9b02      	ldr	r3, [sp, #8]
 80123e6:	2200      	movs	r2, #0
 80123e8:	701a      	strb	r2, [r3, #0]
 80123ea:	b01c      	add	sp, #112	@ 0x70
 80123ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80123f0:	b003      	add	sp, #12
 80123f2:	4770      	bx	lr
 80123f4:	24000138 	.word	0x24000138
 80123f8:	ffff0208 	.word	0xffff0208

080123fc <__sread>:
 80123fc:	b510      	push	{r4, lr}
 80123fe:	460c      	mov	r4, r1
 8012400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012404:	f000 f86c 	bl	80124e0 <_read_r>
 8012408:	2800      	cmp	r0, #0
 801240a:	bfab      	itete	ge
 801240c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801240e:	89a3      	ldrhlt	r3, [r4, #12]
 8012410:	181b      	addge	r3, r3, r0
 8012412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012416:	bfac      	ite	ge
 8012418:	6563      	strge	r3, [r4, #84]	@ 0x54
 801241a:	81a3      	strhlt	r3, [r4, #12]
 801241c:	bd10      	pop	{r4, pc}

0801241e <__swrite>:
 801241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012422:	461f      	mov	r7, r3
 8012424:	898b      	ldrh	r3, [r1, #12]
 8012426:	05db      	lsls	r3, r3, #23
 8012428:	4605      	mov	r5, r0
 801242a:	460c      	mov	r4, r1
 801242c:	4616      	mov	r6, r2
 801242e:	d505      	bpl.n	801243c <__swrite+0x1e>
 8012430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012434:	2302      	movs	r3, #2
 8012436:	2200      	movs	r2, #0
 8012438:	f000 f840 	bl	80124bc <_lseek_r>
 801243c:	89a3      	ldrh	r3, [r4, #12]
 801243e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012446:	81a3      	strh	r3, [r4, #12]
 8012448:	4632      	mov	r2, r6
 801244a:	463b      	mov	r3, r7
 801244c:	4628      	mov	r0, r5
 801244e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012452:	f000 b867 	b.w	8012524 <_write_r>

08012456 <__sseek>:
 8012456:	b510      	push	{r4, lr}
 8012458:	460c      	mov	r4, r1
 801245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801245e:	f000 f82d 	bl	80124bc <_lseek_r>
 8012462:	1c43      	adds	r3, r0, #1
 8012464:	89a3      	ldrh	r3, [r4, #12]
 8012466:	bf15      	itete	ne
 8012468:	6560      	strne	r0, [r4, #84]	@ 0x54
 801246a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801246e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012472:	81a3      	strheq	r3, [r4, #12]
 8012474:	bf18      	it	ne
 8012476:	81a3      	strhne	r3, [r4, #12]
 8012478:	bd10      	pop	{r4, pc}

0801247a <__sclose>:
 801247a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801247e:	f000 b80d 	b.w	801249c <_close_r>

08012482 <memset>:
 8012482:	4402      	add	r2, r0
 8012484:	4603      	mov	r3, r0
 8012486:	4293      	cmp	r3, r2
 8012488:	d100      	bne.n	801248c <memset+0xa>
 801248a:	4770      	bx	lr
 801248c:	f803 1b01 	strb.w	r1, [r3], #1
 8012490:	e7f9      	b.n	8012486 <memset+0x4>
	...

08012494 <_localeconv_r>:
 8012494:	4800      	ldr	r0, [pc, #0]	@ (8012498 <_localeconv_r+0x4>)
 8012496:	4770      	bx	lr
 8012498:	24000278 	.word	0x24000278

0801249c <_close_r>:
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	4d06      	ldr	r5, [pc, #24]	@ (80124b8 <_close_r+0x1c>)
 80124a0:	2300      	movs	r3, #0
 80124a2:	4604      	mov	r4, r0
 80124a4:	4608      	mov	r0, r1
 80124a6:	602b      	str	r3, [r5, #0]
 80124a8:	f7ee ff7a 	bl	80013a0 <_close>
 80124ac:	1c43      	adds	r3, r0, #1
 80124ae:	d102      	bne.n	80124b6 <_close_r+0x1a>
 80124b0:	682b      	ldr	r3, [r5, #0]
 80124b2:	b103      	cbz	r3, 80124b6 <_close_r+0x1a>
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	bd38      	pop	{r3, r4, r5, pc}
 80124b8:	240070d8 	.word	0x240070d8

080124bc <_lseek_r>:
 80124bc:	b538      	push	{r3, r4, r5, lr}
 80124be:	4d07      	ldr	r5, [pc, #28]	@ (80124dc <_lseek_r+0x20>)
 80124c0:	4604      	mov	r4, r0
 80124c2:	4608      	mov	r0, r1
 80124c4:	4611      	mov	r1, r2
 80124c6:	2200      	movs	r2, #0
 80124c8:	602a      	str	r2, [r5, #0]
 80124ca:	461a      	mov	r2, r3
 80124cc:	f7ee ff8f 	bl	80013ee <_lseek>
 80124d0:	1c43      	adds	r3, r0, #1
 80124d2:	d102      	bne.n	80124da <_lseek_r+0x1e>
 80124d4:	682b      	ldr	r3, [r5, #0]
 80124d6:	b103      	cbz	r3, 80124da <_lseek_r+0x1e>
 80124d8:	6023      	str	r3, [r4, #0]
 80124da:	bd38      	pop	{r3, r4, r5, pc}
 80124dc:	240070d8 	.word	0x240070d8

080124e0 <_read_r>:
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	4d07      	ldr	r5, [pc, #28]	@ (8012500 <_read_r+0x20>)
 80124e4:	4604      	mov	r4, r0
 80124e6:	4608      	mov	r0, r1
 80124e8:	4611      	mov	r1, r2
 80124ea:	2200      	movs	r2, #0
 80124ec:	602a      	str	r2, [r5, #0]
 80124ee:	461a      	mov	r2, r3
 80124f0:	f7ee ff1d 	bl	800132e <_read>
 80124f4:	1c43      	adds	r3, r0, #1
 80124f6:	d102      	bne.n	80124fe <_read_r+0x1e>
 80124f8:	682b      	ldr	r3, [r5, #0]
 80124fa:	b103      	cbz	r3, 80124fe <_read_r+0x1e>
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	bd38      	pop	{r3, r4, r5, pc}
 8012500:	240070d8 	.word	0x240070d8

08012504 <_sbrk_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4d06      	ldr	r5, [pc, #24]	@ (8012520 <_sbrk_r+0x1c>)
 8012508:	2300      	movs	r3, #0
 801250a:	4604      	mov	r4, r0
 801250c:	4608      	mov	r0, r1
 801250e:	602b      	str	r3, [r5, #0]
 8012510:	f7ee ff7a 	bl	8001408 <_sbrk>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	d102      	bne.n	801251e <_sbrk_r+0x1a>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	b103      	cbz	r3, 801251e <_sbrk_r+0x1a>
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	240070d8 	.word	0x240070d8

08012524 <_write_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	4d07      	ldr	r5, [pc, #28]	@ (8012544 <_write_r+0x20>)
 8012528:	4604      	mov	r4, r0
 801252a:	4608      	mov	r0, r1
 801252c:	4611      	mov	r1, r2
 801252e:	2200      	movs	r2, #0
 8012530:	602a      	str	r2, [r5, #0]
 8012532:	461a      	mov	r2, r3
 8012534:	f7ee ff18 	bl	8001368 <_write>
 8012538:	1c43      	adds	r3, r0, #1
 801253a:	d102      	bne.n	8012542 <_write_r+0x1e>
 801253c:	682b      	ldr	r3, [r5, #0]
 801253e:	b103      	cbz	r3, 8012542 <_write_r+0x1e>
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	bd38      	pop	{r3, r4, r5, pc}
 8012544:	240070d8 	.word	0x240070d8

08012548 <__errno>:
 8012548:	4b01      	ldr	r3, [pc, #4]	@ (8012550 <__errno+0x8>)
 801254a:	6818      	ldr	r0, [r3, #0]
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	24000138 	.word	0x24000138

08012554 <__libc_init_array>:
 8012554:	b570      	push	{r4, r5, r6, lr}
 8012556:	4d0d      	ldr	r5, [pc, #52]	@ (801258c <__libc_init_array+0x38>)
 8012558:	4c0d      	ldr	r4, [pc, #52]	@ (8012590 <__libc_init_array+0x3c>)
 801255a:	1b64      	subs	r4, r4, r5
 801255c:	10a4      	asrs	r4, r4, #2
 801255e:	2600      	movs	r6, #0
 8012560:	42a6      	cmp	r6, r4
 8012562:	d109      	bne.n	8012578 <__libc_init_array+0x24>
 8012564:	4d0b      	ldr	r5, [pc, #44]	@ (8012594 <__libc_init_array+0x40>)
 8012566:	4c0c      	ldr	r4, [pc, #48]	@ (8012598 <__libc_init_array+0x44>)
 8012568:	f002 f9bc 	bl	80148e4 <_init>
 801256c:	1b64      	subs	r4, r4, r5
 801256e:	10a4      	asrs	r4, r4, #2
 8012570:	2600      	movs	r6, #0
 8012572:	42a6      	cmp	r6, r4
 8012574:	d105      	bne.n	8012582 <__libc_init_array+0x2e>
 8012576:	bd70      	pop	{r4, r5, r6, pc}
 8012578:	f855 3b04 	ldr.w	r3, [r5], #4
 801257c:	4798      	blx	r3
 801257e:	3601      	adds	r6, #1
 8012580:	e7ee      	b.n	8012560 <__libc_init_array+0xc>
 8012582:	f855 3b04 	ldr.w	r3, [r5], #4
 8012586:	4798      	blx	r3
 8012588:	3601      	adds	r6, #1
 801258a:	e7f2      	b.n	8012572 <__libc_init_array+0x1e>
 801258c:	08016de0 	.word	0x08016de0
 8012590:	08016de0 	.word	0x08016de0
 8012594:	08016de0 	.word	0x08016de0
 8012598:	08016de4 	.word	0x08016de4

0801259c <__retarget_lock_init_recursive>:
 801259c:	4770      	bx	lr

0801259e <__retarget_lock_acquire_recursive>:
 801259e:	4770      	bx	lr

080125a0 <__retarget_lock_release_recursive>:
 80125a0:	4770      	bx	lr

080125a2 <memcpy>:
 80125a2:	440a      	add	r2, r1
 80125a4:	4291      	cmp	r1, r2
 80125a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80125aa:	d100      	bne.n	80125ae <memcpy+0xc>
 80125ac:	4770      	bx	lr
 80125ae:	b510      	push	{r4, lr}
 80125b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125b8:	4291      	cmp	r1, r2
 80125ba:	d1f9      	bne.n	80125b0 <memcpy+0xe>
 80125bc:	bd10      	pop	{r4, pc}

080125be <quorem>:
 80125be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c2:	6903      	ldr	r3, [r0, #16]
 80125c4:	690c      	ldr	r4, [r1, #16]
 80125c6:	42a3      	cmp	r3, r4
 80125c8:	4607      	mov	r7, r0
 80125ca:	db7e      	blt.n	80126ca <quorem+0x10c>
 80125cc:	3c01      	subs	r4, #1
 80125ce:	f101 0814 	add.w	r8, r1, #20
 80125d2:	00a3      	lsls	r3, r4, #2
 80125d4:	f100 0514 	add.w	r5, r0, #20
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125de:	9301      	str	r3, [sp, #4]
 80125e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80125e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125e8:	3301      	adds	r3, #1
 80125ea:	429a      	cmp	r2, r3
 80125ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80125f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80125f4:	d32e      	bcc.n	8012654 <quorem+0x96>
 80125f6:	f04f 0a00 	mov.w	sl, #0
 80125fa:	46c4      	mov	ip, r8
 80125fc:	46ae      	mov	lr, r5
 80125fe:	46d3      	mov	fp, sl
 8012600:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012604:	b298      	uxth	r0, r3
 8012606:	fb06 a000 	mla	r0, r6, r0, sl
 801260a:	0c02      	lsrs	r2, r0, #16
 801260c:	0c1b      	lsrs	r3, r3, #16
 801260e:	fb06 2303 	mla	r3, r6, r3, r2
 8012612:	f8de 2000 	ldr.w	r2, [lr]
 8012616:	b280      	uxth	r0, r0
 8012618:	b292      	uxth	r2, r2
 801261a:	1a12      	subs	r2, r2, r0
 801261c:	445a      	add	r2, fp
 801261e:	f8de 0000 	ldr.w	r0, [lr]
 8012622:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012626:	b29b      	uxth	r3, r3
 8012628:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801262c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012630:	b292      	uxth	r2, r2
 8012632:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012636:	45e1      	cmp	r9, ip
 8012638:	f84e 2b04 	str.w	r2, [lr], #4
 801263c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012640:	d2de      	bcs.n	8012600 <quorem+0x42>
 8012642:	9b00      	ldr	r3, [sp, #0]
 8012644:	58eb      	ldr	r3, [r5, r3]
 8012646:	b92b      	cbnz	r3, 8012654 <quorem+0x96>
 8012648:	9b01      	ldr	r3, [sp, #4]
 801264a:	3b04      	subs	r3, #4
 801264c:	429d      	cmp	r5, r3
 801264e:	461a      	mov	r2, r3
 8012650:	d32f      	bcc.n	80126b2 <quorem+0xf4>
 8012652:	613c      	str	r4, [r7, #16]
 8012654:	4638      	mov	r0, r7
 8012656:	f001 f855 	bl	8013704 <__mcmp>
 801265a:	2800      	cmp	r0, #0
 801265c:	db25      	blt.n	80126aa <quorem+0xec>
 801265e:	4629      	mov	r1, r5
 8012660:	2000      	movs	r0, #0
 8012662:	f858 2b04 	ldr.w	r2, [r8], #4
 8012666:	f8d1 c000 	ldr.w	ip, [r1]
 801266a:	fa1f fe82 	uxth.w	lr, r2
 801266e:	fa1f f38c 	uxth.w	r3, ip
 8012672:	eba3 030e 	sub.w	r3, r3, lr
 8012676:	4403      	add	r3, r0
 8012678:	0c12      	lsrs	r2, r2, #16
 801267a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801267e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012682:	b29b      	uxth	r3, r3
 8012684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012688:	45c1      	cmp	r9, r8
 801268a:	f841 3b04 	str.w	r3, [r1], #4
 801268e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012692:	d2e6      	bcs.n	8012662 <quorem+0xa4>
 8012694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012698:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801269c:	b922      	cbnz	r2, 80126a8 <quorem+0xea>
 801269e:	3b04      	subs	r3, #4
 80126a0:	429d      	cmp	r5, r3
 80126a2:	461a      	mov	r2, r3
 80126a4:	d30b      	bcc.n	80126be <quorem+0x100>
 80126a6:	613c      	str	r4, [r7, #16]
 80126a8:	3601      	adds	r6, #1
 80126aa:	4630      	mov	r0, r6
 80126ac:	b003      	add	sp, #12
 80126ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b2:	6812      	ldr	r2, [r2, #0]
 80126b4:	3b04      	subs	r3, #4
 80126b6:	2a00      	cmp	r2, #0
 80126b8:	d1cb      	bne.n	8012652 <quorem+0x94>
 80126ba:	3c01      	subs	r4, #1
 80126bc:	e7c6      	b.n	801264c <quorem+0x8e>
 80126be:	6812      	ldr	r2, [r2, #0]
 80126c0:	3b04      	subs	r3, #4
 80126c2:	2a00      	cmp	r2, #0
 80126c4:	d1ef      	bne.n	80126a6 <quorem+0xe8>
 80126c6:	3c01      	subs	r4, #1
 80126c8:	e7ea      	b.n	80126a0 <quorem+0xe2>
 80126ca:	2000      	movs	r0, #0
 80126cc:	e7ee      	b.n	80126ac <quorem+0xee>
	...

080126d0 <_dtoa_r>:
 80126d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d4:	ed2d 8b02 	vpush	{d8}
 80126d8:	69c7      	ldr	r7, [r0, #28]
 80126da:	b091      	sub	sp, #68	@ 0x44
 80126dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80126e0:	ec55 4b10 	vmov	r4, r5, d0
 80126e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80126e6:	9107      	str	r1, [sp, #28]
 80126e8:	4681      	mov	r9, r0
 80126ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80126ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80126ee:	b97f      	cbnz	r7, 8012710 <_dtoa_r+0x40>
 80126f0:	2010      	movs	r0, #16
 80126f2:	f7ff f8b3 	bl	801185c <malloc>
 80126f6:	4602      	mov	r2, r0
 80126f8:	f8c9 001c 	str.w	r0, [r9, #28]
 80126fc:	b920      	cbnz	r0, 8012708 <_dtoa_r+0x38>
 80126fe:	4ba0      	ldr	r3, [pc, #640]	@ (8012980 <_dtoa_r+0x2b0>)
 8012700:	21ef      	movs	r1, #239	@ 0xef
 8012702:	48a0      	ldr	r0, [pc, #640]	@ (8012984 <_dtoa_r+0x2b4>)
 8012704:	f001 fb24 	bl	8013d50 <__assert_func>
 8012708:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801270c:	6007      	str	r7, [r0, #0]
 801270e:	60c7      	str	r7, [r0, #12]
 8012710:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012714:	6819      	ldr	r1, [r3, #0]
 8012716:	b159      	cbz	r1, 8012730 <_dtoa_r+0x60>
 8012718:	685a      	ldr	r2, [r3, #4]
 801271a:	604a      	str	r2, [r1, #4]
 801271c:	2301      	movs	r3, #1
 801271e:	4093      	lsls	r3, r2
 8012720:	608b      	str	r3, [r1, #8]
 8012722:	4648      	mov	r0, r9
 8012724:	f000 fdb4 	bl	8013290 <_Bfree>
 8012728:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801272c:	2200      	movs	r2, #0
 801272e:	601a      	str	r2, [r3, #0]
 8012730:	1e2b      	subs	r3, r5, #0
 8012732:	bfbb      	ittet	lt
 8012734:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012738:	9303      	strlt	r3, [sp, #12]
 801273a:	2300      	movge	r3, #0
 801273c:	2201      	movlt	r2, #1
 801273e:	bfac      	ite	ge
 8012740:	6033      	strge	r3, [r6, #0]
 8012742:	6032      	strlt	r2, [r6, #0]
 8012744:	4b90      	ldr	r3, [pc, #576]	@ (8012988 <_dtoa_r+0x2b8>)
 8012746:	9e03      	ldr	r6, [sp, #12]
 8012748:	43b3      	bics	r3, r6
 801274a:	d110      	bne.n	801276e <_dtoa_r+0x9e>
 801274c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801274e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012752:	6013      	str	r3, [r2, #0]
 8012754:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012758:	4323      	orrs	r3, r4
 801275a:	f000 84de 	beq.w	801311a <_dtoa_r+0xa4a>
 801275e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012760:	4f8a      	ldr	r7, [pc, #552]	@ (801298c <_dtoa_r+0x2bc>)
 8012762:	2b00      	cmp	r3, #0
 8012764:	f000 84e0 	beq.w	8013128 <_dtoa_r+0xa58>
 8012768:	1cfb      	adds	r3, r7, #3
 801276a:	f000 bcdb 	b.w	8013124 <_dtoa_r+0xa54>
 801276e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012772:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277a:	d10a      	bne.n	8012792 <_dtoa_r+0xc2>
 801277c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801277e:	2301      	movs	r3, #1
 8012780:	6013      	str	r3, [r2, #0]
 8012782:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012784:	b113      	cbz	r3, 801278c <_dtoa_r+0xbc>
 8012786:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012788:	4b81      	ldr	r3, [pc, #516]	@ (8012990 <_dtoa_r+0x2c0>)
 801278a:	6013      	str	r3, [r2, #0]
 801278c:	4f81      	ldr	r7, [pc, #516]	@ (8012994 <_dtoa_r+0x2c4>)
 801278e:	f000 bccb 	b.w	8013128 <_dtoa_r+0xa58>
 8012792:	aa0e      	add	r2, sp, #56	@ 0x38
 8012794:	a90f      	add	r1, sp, #60	@ 0x3c
 8012796:	4648      	mov	r0, r9
 8012798:	eeb0 0b48 	vmov.f64	d0, d8
 801279c:	f001 f862 	bl	8013864 <__d2b>
 80127a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80127a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127a6:	9001      	str	r0, [sp, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d045      	beq.n	8012838 <_dtoa_r+0x168>
 80127ac:	eeb0 7b48 	vmov.f64	d7, d8
 80127b0:	ee18 1a90 	vmov	r1, s17
 80127b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80127b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80127bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80127c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80127c4:	2500      	movs	r5, #0
 80127c6:	ee07 1a90 	vmov	s15, r1
 80127ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80127ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012968 <_dtoa_r+0x298>
 80127d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80127d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012970 <_dtoa_r+0x2a0>
 80127da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80127de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012978 <_dtoa_r+0x2a8>
 80127e2:	ee07 3a90 	vmov	s15, r3
 80127e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80127ea:	eeb0 7b46 	vmov.f64	d7, d6
 80127ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 80127f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80127f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80127fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fe:	ee16 8a90 	vmov	r8, s13
 8012802:	d508      	bpl.n	8012816 <_dtoa_r+0x146>
 8012804:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012808:	eeb4 6b47 	vcmp.f64	d6, d7
 801280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012810:	bf18      	it	ne
 8012812:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012816:	f1b8 0f16 	cmp.w	r8, #22
 801281a:	d82b      	bhi.n	8012874 <_dtoa_r+0x1a4>
 801281c:	495e      	ldr	r1, [pc, #376]	@ (8012998 <_dtoa_r+0x2c8>)
 801281e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012822:	ed91 7b00 	vldr	d7, [r1]
 8012826:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282e:	d501      	bpl.n	8012834 <_dtoa_r+0x164>
 8012830:	f108 38ff 	add.w	r8, r8, #4294967295
 8012834:	2100      	movs	r1, #0
 8012836:	e01e      	b.n	8012876 <_dtoa_r+0x1a6>
 8012838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801283a:	4413      	add	r3, r2
 801283c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012840:	2920      	cmp	r1, #32
 8012842:	bfc1      	itttt	gt
 8012844:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012848:	408e      	lslgt	r6, r1
 801284a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801284e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012852:	bfd6      	itet	le
 8012854:	f1c1 0120 	rsble	r1, r1, #32
 8012858:	4331      	orrgt	r1, r6
 801285a:	fa04 f101 	lslle.w	r1, r4, r1
 801285e:	ee07 1a90 	vmov	s15, r1
 8012862:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012866:	3b01      	subs	r3, #1
 8012868:	ee17 1a90 	vmov	r1, s15
 801286c:	2501      	movs	r5, #1
 801286e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012872:	e7a8      	b.n	80127c6 <_dtoa_r+0xf6>
 8012874:	2101      	movs	r1, #1
 8012876:	1ad2      	subs	r2, r2, r3
 8012878:	1e53      	subs	r3, r2, #1
 801287a:	9306      	str	r3, [sp, #24]
 801287c:	bf45      	ittet	mi
 801287e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012882:	9305      	strmi	r3, [sp, #20]
 8012884:	2300      	movpl	r3, #0
 8012886:	2300      	movmi	r3, #0
 8012888:	bf4c      	ite	mi
 801288a:	9306      	strmi	r3, [sp, #24]
 801288c:	9305      	strpl	r3, [sp, #20]
 801288e:	f1b8 0f00 	cmp.w	r8, #0
 8012892:	910c      	str	r1, [sp, #48]	@ 0x30
 8012894:	db18      	blt.n	80128c8 <_dtoa_r+0x1f8>
 8012896:	9b06      	ldr	r3, [sp, #24]
 8012898:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801289c:	4443      	add	r3, r8
 801289e:	9306      	str	r3, [sp, #24]
 80128a0:	2300      	movs	r3, #0
 80128a2:	9a07      	ldr	r2, [sp, #28]
 80128a4:	2a09      	cmp	r2, #9
 80128a6:	d849      	bhi.n	801293c <_dtoa_r+0x26c>
 80128a8:	2a05      	cmp	r2, #5
 80128aa:	bfc4      	itt	gt
 80128ac:	3a04      	subgt	r2, #4
 80128ae:	9207      	strgt	r2, [sp, #28]
 80128b0:	9a07      	ldr	r2, [sp, #28]
 80128b2:	f1a2 0202 	sub.w	r2, r2, #2
 80128b6:	bfcc      	ite	gt
 80128b8:	2400      	movgt	r4, #0
 80128ba:	2401      	movle	r4, #1
 80128bc:	2a03      	cmp	r2, #3
 80128be:	d848      	bhi.n	8012952 <_dtoa_r+0x282>
 80128c0:	e8df f002 	tbb	[pc, r2]
 80128c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80128c8:	9b05      	ldr	r3, [sp, #20]
 80128ca:	2200      	movs	r2, #0
 80128cc:	eba3 0308 	sub.w	r3, r3, r8
 80128d0:	9305      	str	r3, [sp, #20]
 80128d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80128d4:	f1c8 0300 	rsb	r3, r8, #0
 80128d8:	e7e3      	b.n	80128a2 <_dtoa_r+0x1d2>
 80128da:	2200      	movs	r2, #0
 80128dc:	9208      	str	r2, [sp, #32]
 80128de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128e0:	2a00      	cmp	r2, #0
 80128e2:	dc39      	bgt.n	8012958 <_dtoa_r+0x288>
 80128e4:	f04f 0b01 	mov.w	fp, #1
 80128e8:	46da      	mov	sl, fp
 80128ea:	465a      	mov	r2, fp
 80128ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80128f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80128f4:	2100      	movs	r1, #0
 80128f6:	2004      	movs	r0, #4
 80128f8:	f100 0614 	add.w	r6, r0, #20
 80128fc:	4296      	cmp	r6, r2
 80128fe:	d930      	bls.n	8012962 <_dtoa_r+0x292>
 8012900:	6079      	str	r1, [r7, #4]
 8012902:	4648      	mov	r0, r9
 8012904:	9304      	str	r3, [sp, #16]
 8012906:	f000 fc83 	bl	8013210 <_Balloc>
 801290a:	9b04      	ldr	r3, [sp, #16]
 801290c:	4607      	mov	r7, r0
 801290e:	2800      	cmp	r0, #0
 8012910:	d146      	bne.n	80129a0 <_dtoa_r+0x2d0>
 8012912:	4b22      	ldr	r3, [pc, #136]	@ (801299c <_dtoa_r+0x2cc>)
 8012914:	4602      	mov	r2, r0
 8012916:	f240 11af 	movw	r1, #431	@ 0x1af
 801291a:	e6f2      	b.n	8012702 <_dtoa_r+0x32>
 801291c:	2201      	movs	r2, #1
 801291e:	e7dd      	b.n	80128dc <_dtoa_r+0x20c>
 8012920:	2200      	movs	r2, #0
 8012922:	9208      	str	r2, [sp, #32]
 8012924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012926:	eb08 0b02 	add.w	fp, r8, r2
 801292a:	f10b 0a01 	add.w	sl, fp, #1
 801292e:	4652      	mov	r2, sl
 8012930:	2a01      	cmp	r2, #1
 8012932:	bfb8      	it	lt
 8012934:	2201      	movlt	r2, #1
 8012936:	e7db      	b.n	80128f0 <_dtoa_r+0x220>
 8012938:	2201      	movs	r2, #1
 801293a:	e7f2      	b.n	8012922 <_dtoa_r+0x252>
 801293c:	2401      	movs	r4, #1
 801293e:	2200      	movs	r2, #0
 8012940:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012944:	f04f 3bff 	mov.w	fp, #4294967295
 8012948:	2100      	movs	r1, #0
 801294a:	46da      	mov	sl, fp
 801294c:	2212      	movs	r2, #18
 801294e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012950:	e7ce      	b.n	80128f0 <_dtoa_r+0x220>
 8012952:	2201      	movs	r2, #1
 8012954:	9208      	str	r2, [sp, #32]
 8012956:	e7f5      	b.n	8012944 <_dtoa_r+0x274>
 8012958:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801295c:	46da      	mov	sl, fp
 801295e:	465a      	mov	r2, fp
 8012960:	e7c6      	b.n	80128f0 <_dtoa_r+0x220>
 8012962:	3101      	adds	r1, #1
 8012964:	0040      	lsls	r0, r0, #1
 8012966:	e7c7      	b.n	80128f8 <_dtoa_r+0x228>
 8012968:	636f4361 	.word	0x636f4361
 801296c:	3fd287a7 	.word	0x3fd287a7
 8012970:	8b60c8b3 	.word	0x8b60c8b3
 8012974:	3fc68a28 	.word	0x3fc68a28
 8012978:	509f79fb 	.word	0x509f79fb
 801297c:	3fd34413 	.word	0x3fd34413
 8012980:	08016a95 	.word	0x08016a95
 8012984:	08016aac 	.word	0x08016aac
 8012988:	7ff00000 	.word	0x7ff00000
 801298c:	08016a91 	.word	0x08016a91
 8012990:	08016a65 	.word	0x08016a65
 8012994:	08016a64 	.word	0x08016a64
 8012998:	08016ba8 	.word	0x08016ba8
 801299c:	08016b04 	.word	0x08016b04
 80129a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80129a4:	f1ba 0f0e 	cmp.w	sl, #14
 80129a8:	6010      	str	r0, [r2, #0]
 80129aa:	d86f      	bhi.n	8012a8c <_dtoa_r+0x3bc>
 80129ac:	2c00      	cmp	r4, #0
 80129ae:	d06d      	beq.n	8012a8c <_dtoa_r+0x3bc>
 80129b0:	f1b8 0f00 	cmp.w	r8, #0
 80129b4:	f340 80c2 	ble.w	8012b3c <_dtoa_r+0x46c>
 80129b8:	4aca      	ldr	r2, [pc, #808]	@ (8012ce4 <_dtoa_r+0x614>)
 80129ba:	f008 010f 	and.w	r1, r8, #15
 80129be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80129c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80129c6:	ed92 7b00 	vldr	d7, [r2]
 80129ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 80129ce:	f000 80a9 	beq.w	8012b24 <_dtoa_r+0x454>
 80129d2:	4ac5      	ldr	r2, [pc, #788]	@ (8012ce8 <_dtoa_r+0x618>)
 80129d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80129d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80129dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80129e0:	f001 010f 	and.w	r1, r1, #15
 80129e4:	2203      	movs	r2, #3
 80129e6:	48c0      	ldr	r0, [pc, #768]	@ (8012ce8 <_dtoa_r+0x618>)
 80129e8:	2900      	cmp	r1, #0
 80129ea:	f040 809d 	bne.w	8012b28 <_dtoa_r+0x458>
 80129ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80129f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80129f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80129fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a00:	2900      	cmp	r1, #0
 8012a02:	f000 80c1 	beq.w	8012b88 <_dtoa_r+0x4b8>
 8012a06:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012a0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a12:	f140 80b9 	bpl.w	8012b88 <_dtoa_r+0x4b8>
 8012a16:	f1ba 0f00 	cmp.w	sl, #0
 8012a1a:	f000 80b5 	beq.w	8012b88 <_dtoa_r+0x4b8>
 8012a1e:	f1bb 0f00 	cmp.w	fp, #0
 8012a22:	dd31      	ble.n	8012a88 <_dtoa_r+0x3b8>
 8012a24:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012a28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a30:	f108 31ff 	add.w	r1, r8, #4294967295
 8012a34:	9104      	str	r1, [sp, #16]
 8012a36:	3201      	adds	r2, #1
 8012a38:	465c      	mov	r4, fp
 8012a3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012a3e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012a42:	ee07 2a90 	vmov	s15, r2
 8012a46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a4a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012a4e:	ee15 2a90 	vmov	r2, s11
 8012a52:	ec51 0b15 	vmov	r0, r1, d5
 8012a56:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012a5a:	2c00      	cmp	r4, #0
 8012a5c:	f040 8098 	bne.w	8012b90 <_dtoa_r+0x4c0>
 8012a60:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012a64:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012a68:	ec41 0b17 	vmov	d7, r0, r1
 8012a6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a74:	f300 8261 	bgt.w	8012f3a <_dtoa_r+0x86a>
 8012a78:	eeb1 7b47 	vneg.f64	d7, d7
 8012a7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a84:	f100 80f5 	bmi.w	8012c72 <_dtoa_r+0x5a2>
 8012a88:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012a8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012a8e:	2a00      	cmp	r2, #0
 8012a90:	f2c0 812c 	blt.w	8012cec <_dtoa_r+0x61c>
 8012a94:	f1b8 0f0e 	cmp.w	r8, #14
 8012a98:	f300 8128 	bgt.w	8012cec <_dtoa_r+0x61c>
 8012a9c:	4b91      	ldr	r3, [pc, #580]	@ (8012ce4 <_dtoa_r+0x614>)
 8012a9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012aa2:	ed93 6b00 	vldr	d6, [r3]
 8012aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	da03      	bge.n	8012ab4 <_dtoa_r+0x3e4>
 8012aac:	f1ba 0f00 	cmp.w	sl, #0
 8012ab0:	f340 80d2 	ble.w	8012c58 <_dtoa_r+0x588>
 8012ab4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012ab8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012abc:	463e      	mov	r6, r7
 8012abe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012ac2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ac6:	ee15 3a10 	vmov	r3, s10
 8012aca:	3330      	adds	r3, #48	@ 0x30
 8012acc:	f806 3b01 	strb.w	r3, [r6], #1
 8012ad0:	1bf3      	subs	r3, r6, r7
 8012ad2:	459a      	cmp	sl, r3
 8012ad4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012ad8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012adc:	f040 80f8 	bne.w	8012cd0 <_dtoa_r+0x600>
 8012ae0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012ae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aec:	f300 80dd 	bgt.w	8012caa <_dtoa_r+0x5da>
 8012af0:	eeb4 7b46 	vcmp.f64	d7, d6
 8012af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af8:	d104      	bne.n	8012b04 <_dtoa_r+0x434>
 8012afa:	ee15 3a10 	vmov	r3, s10
 8012afe:	07db      	lsls	r3, r3, #31
 8012b00:	f100 80d3 	bmi.w	8012caa <_dtoa_r+0x5da>
 8012b04:	9901      	ldr	r1, [sp, #4]
 8012b06:	4648      	mov	r0, r9
 8012b08:	f000 fbc2 	bl	8013290 <_Bfree>
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b10:	7033      	strb	r3, [r6, #0]
 8012b12:	f108 0301 	add.w	r3, r8, #1
 8012b16:	6013      	str	r3, [r2, #0]
 8012b18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 8304 	beq.w	8013128 <_dtoa_r+0xa58>
 8012b20:	601e      	str	r6, [r3, #0]
 8012b22:	e301      	b.n	8013128 <_dtoa_r+0xa58>
 8012b24:	2202      	movs	r2, #2
 8012b26:	e75e      	b.n	80129e6 <_dtoa_r+0x316>
 8012b28:	07cc      	lsls	r4, r1, #31
 8012b2a:	d504      	bpl.n	8012b36 <_dtoa_r+0x466>
 8012b2c:	ed90 6b00 	vldr	d6, [r0]
 8012b30:	3201      	adds	r2, #1
 8012b32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b36:	1049      	asrs	r1, r1, #1
 8012b38:	3008      	adds	r0, #8
 8012b3a:	e755      	b.n	80129e8 <_dtoa_r+0x318>
 8012b3c:	d022      	beq.n	8012b84 <_dtoa_r+0x4b4>
 8012b3e:	f1c8 0100 	rsb	r1, r8, #0
 8012b42:	4a68      	ldr	r2, [pc, #416]	@ (8012ce4 <_dtoa_r+0x614>)
 8012b44:	f001 000f 	and.w	r0, r1, #15
 8012b48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012b4c:	ed92 7b00 	vldr	d7, [r2]
 8012b50:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012b54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012b58:	4863      	ldr	r0, [pc, #396]	@ (8012ce8 <_dtoa_r+0x618>)
 8012b5a:	1109      	asrs	r1, r1, #4
 8012b5c:	2400      	movs	r4, #0
 8012b5e:	2202      	movs	r2, #2
 8012b60:	b929      	cbnz	r1, 8012b6e <_dtoa_r+0x49e>
 8012b62:	2c00      	cmp	r4, #0
 8012b64:	f43f af49 	beq.w	80129fa <_dtoa_r+0x32a>
 8012b68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012b6c:	e745      	b.n	80129fa <_dtoa_r+0x32a>
 8012b6e:	07ce      	lsls	r6, r1, #31
 8012b70:	d505      	bpl.n	8012b7e <_dtoa_r+0x4ae>
 8012b72:	ed90 6b00 	vldr	d6, [r0]
 8012b76:	3201      	adds	r2, #1
 8012b78:	2401      	movs	r4, #1
 8012b7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b7e:	1049      	asrs	r1, r1, #1
 8012b80:	3008      	adds	r0, #8
 8012b82:	e7ed      	b.n	8012b60 <_dtoa_r+0x490>
 8012b84:	2202      	movs	r2, #2
 8012b86:	e738      	b.n	80129fa <_dtoa_r+0x32a>
 8012b88:	f8cd 8010 	str.w	r8, [sp, #16]
 8012b8c:	4654      	mov	r4, sl
 8012b8e:	e754      	b.n	8012a3a <_dtoa_r+0x36a>
 8012b90:	4a54      	ldr	r2, [pc, #336]	@ (8012ce4 <_dtoa_r+0x614>)
 8012b92:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012b96:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012b9a:	9a08      	ldr	r2, [sp, #32]
 8012b9c:	ec41 0b17 	vmov	d7, r0, r1
 8012ba0:	443c      	add	r4, r7
 8012ba2:	b34a      	cbz	r2, 8012bf8 <_dtoa_r+0x528>
 8012ba4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012ba8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012bac:	463e      	mov	r6, r7
 8012bae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012bb2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012bb6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012bba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012bbe:	ee14 2a90 	vmov	r2, s9
 8012bc2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012bc6:	3230      	adds	r2, #48	@ 0x30
 8012bc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012bcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd4:	f806 2b01 	strb.w	r2, [r6], #1
 8012bd8:	d438      	bmi.n	8012c4c <_dtoa_r+0x57c>
 8012bda:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012bde:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be6:	d462      	bmi.n	8012cae <_dtoa_r+0x5de>
 8012be8:	42a6      	cmp	r6, r4
 8012bea:	f43f af4d 	beq.w	8012a88 <_dtoa_r+0x3b8>
 8012bee:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012bf2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012bf6:	e7e0      	b.n	8012bba <_dtoa_r+0x4ea>
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	463e      	mov	r6, r7
 8012bfc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012c00:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012c04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012c08:	ee14 2a90 	vmov	r2, s9
 8012c0c:	3230      	adds	r2, #48	@ 0x30
 8012c0e:	f806 2b01 	strb.w	r2, [r6], #1
 8012c12:	42a6      	cmp	r6, r4
 8012c14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012c18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012c1c:	d119      	bne.n	8012c52 <_dtoa_r+0x582>
 8012c1e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012c22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012c26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2e:	dc3e      	bgt.n	8012cae <_dtoa_r+0x5de>
 8012c30:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012c34:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3c:	f57f af24 	bpl.w	8012a88 <_dtoa_r+0x3b8>
 8012c40:	460e      	mov	r6, r1
 8012c42:	3901      	subs	r1, #1
 8012c44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012c48:	2b30      	cmp	r3, #48	@ 0x30
 8012c4a:	d0f9      	beq.n	8012c40 <_dtoa_r+0x570>
 8012c4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012c50:	e758      	b.n	8012b04 <_dtoa_r+0x434>
 8012c52:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012c56:	e7d5      	b.n	8012c04 <_dtoa_r+0x534>
 8012c58:	d10b      	bne.n	8012c72 <_dtoa_r+0x5a2>
 8012c5a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012c5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012c62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c6e:	f2c0 8161 	blt.w	8012f34 <_dtoa_r+0x864>
 8012c72:	2400      	movs	r4, #0
 8012c74:	4625      	mov	r5, r4
 8012c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c78:	43db      	mvns	r3, r3
 8012c7a:	9304      	str	r3, [sp, #16]
 8012c7c:	463e      	mov	r6, r7
 8012c7e:	f04f 0800 	mov.w	r8, #0
 8012c82:	4621      	mov	r1, r4
 8012c84:	4648      	mov	r0, r9
 8012c86:	f000 fb03 	bl	8013290 <_Bfree>
 8012c8a:	2d00      	cmp	r5, #0
 8012c8c:	d0de      	beq.n	8012c4c <_dtoa_r+0x57c>
 8012c8e:	f1b8 0f00 	cmp.w	r8, #0
 8012c92:	d005      	beq.n	8012ca0 <_dtoa_r+0x5d0>
 8012c94:	45a8      	cmp	r8, r5
 8012c96:	d003      	beq.n	8012ca0 <_dtoa_r+0x5d0>
 8012c98:	4641      	mov	r1, r8
 8012c9a:	4648      	mov	r0, r9
 8012c9c:	f000 faf8 	bl	8013290 <_Bfree>
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	4648      	mov	r0, r9
 8012ca4:	f000 faf4 	bl	8013290 <_Bfree>
 8012ca8:	e7d0      	b.n	8012c4c <_dtoa_r+0x57c>
 8012caa:	f8cd 8010 	str.w	r8, [sp, #16]
 8012cae:	4633      	mov	r3, r6
 8012cb0:	461e      	mov	r6, r3
 8012cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cb6:	2a39      	cmp	r2, #57	@ 0x39
 8012cb8:	d106      	bne.n	8012cc8 <_dtoa_r+0x5f8>
 8012cba:	429f      	cmp	r7, r3
 8012cbc:	d1f8      	bne.n	8012cb0 <_dtoa_r+0x5e0>
 8012cbe:	9a04      	ldr	r2, [sp, #16]
 8012cc0:	3201      	adds	r2, #1
 8012cc2:	9204      	str	r2, [sp, #16]
 8012cc4:	2230      	movs	r2, #48	@ 0x30
 8012cc6:	703a      	strb	r2, [r7, #0]
 8012cc8:	781a      	ldrb	r2, [r3, #0]
 8012cca:	3201      	adds	r2, #1
 8012ccc:	701a      	strb	r2, [r3, #0]
 8012cce:	e7bd      	b.n	8012c4c <_dtoa_r+0x57c>
 8012cd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012cd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cdc:	f47f aeef 	bne.w	8012abe <_dtoa_r+0x3ee>
 8012ce0:	e710      	b.n	8012b04 <_dtoa_r+0x434>
 8012ce2:	bf00      	nop
 8012ce4:	08016ba8 	.word	0x08016ba8
 8012ce8:	08016b80 	.word	0x08016b80
 8012cec:	9908      	ldr	r1, [sp, #32]
 8012cee:	2900      	cmp	r1, #0
 8012cf0:	f000 80e3 	beq.w	8012eba <_dtoa_r+0x7ea>
 8012cf4:	9907      	ldr	r1, [sp, #28]
 8012cf6:	2901      	cmp	r1, #1
 8012cf8:	f300 80c8 	bgt.w	8012e8c <_dtoa_r+0x7bc>
 8012cfc:	2d00      	cmp	r5, #0
 8012cfe:	f000 80c1 	beq.w	8012e84 <_dtoa_r+0x7b4>
 8012d02:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012d06:	9e05      	ldr	r6, [sp, #20]
 8012d08:	461c      	mov	r4, r3
 8012d0a:	9304      	str	r3, [sp, #16]
 8012d0c:	9b05      	ldr	r3, [sp, #20]
 8012d0e:	4413      	add	r3, r2
 8012d10:	9305      	str	r3, [sp, #20]
 8012d12:	9b06      	ldr	r3, [sp, #24]
 8012d14:	2101      	movs	r1, #1
 8012d16:	4413      	add	r3, r2
 8012d18:	4648      	mov	r0, r9
 8012d1a:	9306      	str	r3, [sp, #24]
 8012d1c:	f000 fb6c 	bl	80133f8 <__i2b>
 8012d20:	9b04      	ldr	r3, [sp, #16]
 8012d22:	4605      	mov	r5, r0
 8012d24:	b166      	cbz	r6, 8012d40 <_dtoa_r+0x670>
 8012d26:	9a06      	ldr	r2, [sp, #24]
 8012d28:	2a00      	cmp	r2, #0
 8012d2a:	dd09      	ble.n	8012d40 <_dtoa_r+0x670>
 8012d2c:	42b2      	cmp	r2, r6
 8012d2e:	9905      	ldr	r1, [sp, #20]
 8012d30:	bfa8      	it	ge
 8012d32:	4632      	movge	r2, r6
 8012d34:	1a89      	subs	r1, r1, r2
 8012d36:	9105      	str	r1, [sp, #20]
 8012d38:	9906      	ldr	r1, [sp, #24]
 8012d3a:	1ab6      	subs	r6, r6, r2
 8012d3c:	1a8a      	subs	r2, r1, r2
 8012d3e:	9206      	str	r2, [sp, #24]
 8012d40:	b1fb      	cbz	r3, 8012d82 <_dtoa_r+0x6b2>
 8012d42:	9a08      	ldr	r2, [sp, #32]
 8012d44:	2a00      	cmp	r2, #0
 8012d46:	f000 80bc 	beq.w	8012ec2 <_dtoa_r+0x7f2>
 8012d4a:	b19c      	cbz	r4, 8012d74 <_dtoa_r+0x6a4>
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	4622      	mov	r2, r4
 8012d50:	4648      	mov	r0, r9
 8012d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d54:	f000 fc10 	bl	8013578 <__pow5mult>
 8012d58:	9a01      	ldr	r2, [sp, #4]
 8012d5a:	4601      	mov	r1, r0
 8012d5c:	4605      	mov	r5, r0
 8012d5e:	4648      	mov	r0, r9
 8012d60:	f000 fb60 	bl	8013424 <__multiply>
 8012d64:	9901      	ldr	r1, [sp, #4]
 8012d66:	9004      	str	r0, [sp, #16]
 8012d68:	4648      	mov	r0, r9
 8012d6a:	f000 fa91 	bl	8013290 <_Bfree>
 8012d6e:	9a04      	ldr	r2, [sp, #16]
 8012d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012d72:	9201      	str	r2, [sp, #4]
 8012d74:	1b1a      	subs	r2, r3, r4
 8012d76:	d004      	beq.n	8012d82 <_dtoa_r+0x6b2>
 8012d78:	9901      	ldr	r1, [sp, #4]
 8012d7a:	4648      	mov	r0, r9
 8012d7c:	f000 fbfc 	bl	8013578 <__pow5mult>
 8012d80:	9001      	str	r0, [sp, #4]
 8012d82:	2101      	movs	r1, #1
 8012d84:	4648      	mov	r0, r9
 8012d86:	f000 fb37 	bl	80133f8 <__i2b>
 8012d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f000 81d0 	beq.w	8013134 <_dtoa_r+0xa64>
 8012d94:	461a      	mov	r2, r3
 8012d96:	4601      	mov	r1, r0
 8012d98:	4648      	mov	r0, r9
 8012d9a:	f000 fbed 	bl	8013578 <__pow5mult>
 8012d9e:	9b07      	ldr	r3, [sp, #28]
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	4604      	mov	r4, r0
 8012da4:	f300 8095 	bgt.w	8012ed2 <_dtoa_r+0x802>
 8012da8:	9b02      	ldr	r3, [sp, #8]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	f040 808b 	bne.w	8012ec6 <_dtoa_r+0x7f6>
 8012db0:	9b03      	ldr	r3, [sp, #12]
 8012db2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012db6:	2a00      	cmp	r2, #0
 8012db8:	f040 8087 	bne.w	8012eca <_dtoa_r+0x7fa>
 8012dbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012dc0:	0d12      	lsrs	r2, r2, #20
 8012dc2:	0512      	lsls	r2, r2, #20
 8012dc4:	2a00      	cmp	r2, #0
 8012dc6:	f000 8082 	beq.w	8012ece <_dtoa_r+0x7fe>
 8012dca:	9b05      	ldr	r3, [sp, #20]
 8012dcc:	3301      	adds	r3, #1
 8012dce:	9305      	str	r3, [sp, #20]
 8012dd0:	9b06      	ldr	r3, [sp, #24]
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	9306      	str	r3, [sp, #24]
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	f000 81af 	beq.w	8013140 <_dtoa_r+0xa70>
 8012de2:	6922      	ldr	r2, [r4, #16]
 8012de4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012de8:	6910      	ldr	r0, [r2, #16]
 8012dea:	f000 fab9 	bl	8013360 <__hi0bits>
 8012dee:	f1c0 0020 	rsb	r0, r0, #32
 8012df2:	9b06      	ldr	r3, [sp, #24]
 8012df4:	4418      	add	r0, r3
 8012df6:	f010 001f 	ands.w	r0, r0, #31
 8012dfa:	d076      	beq.n	8012eea <_dtoa_r+0x81a>
 8012dfc:	f1c0 0220 	rsb	r2, r0, #32
 8012e00:	2a04      	cmp	r2, #4
 8012e02:	dd69      	ble.n	8012ed8 <_dtoa_r+0x808>
 8012e04:	9b05      	ldr	r3, [sp, #20]
 8012e06:	f1c0 001c 	rsb	r0, r0, #28
 8012e0a:	4403      	add	r3, r0
 8012e0c:	9305      	str	r3, [sp, #20]
 8012e0e:	9b06      	ldr	r3, [sp, #24]
 8012e10:	4406      	add	r6, r0
 8012e12:	4403      	add	r3, r0
 8012e14:	9306      	str	r3, [sp, #24]
 8012e16:	9b05      	ldr	r3, [sp, #20]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	dd05      	ble.n	8012e28 <_dtoa_r+0x758>
 8012e1c:	9901      	ldr	r1, [sp, #4]
 8012e1e:	461a      	mov	r2, r3
 8012e20:	4648      	mov	r0, r9
 8012e22:	f000 fc03 	bl	801362c <__lshift>
 8012e26:	9001      	str	r0, [sp, #4]
 8012e28:	9b06      	ldr	r3, [sp, #24]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	dd05      	ble.n	8012e3a <_dtoa_r+0x76a>
 8012e2e:	4621      	mov	r1, r4
 8012e30:	461a      	mov	r2, r3
 8012e32:	4648      	mov	r0, r9
 8012e34:	f000 fbfa 	bl	801362c <__lshift>
 8012e38:	4604      	mov	r4, r0
 8012e3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d056      	beq.n	8012eee <_dtoa_r+0x81e>
 8012e40:	9801      	ldr	r0, [sp, #4]
 8012e42:	4621      	mov	r1, r4
 8012e44:	f000 fc5e 	bl	8013704 <__mcmp>
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	da50      	bge.n	8012eee <_dtoa_r+0x81e>
 8012e4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012e50:	9304      	str	r3, [sp, #16]
 8012e52:	9901      	ldr	r1, [sp, #4]
 8012e54:	2300      	movs	r3, #0
 8012e56:	220a      	movs	r2, #10
 8012e58:	4648      	mov	r0, r9
 8012e5a:	f000 fa3b 	bl	80132d4 <__multadd>
 8012e5e:	9b08      	ldr	r3, [sp, #32]
 8012e60:	9001      	str	r0, [sp, #4]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	f000 816e 	beq.w	8013144 <_dtoa_r+0xa74>
 8012e68:	4629      	mov	r1, r5
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	220a      	movs	r2, #10
 8012e6e:	4648      	mov	r0, r9
 8012e70:	f000 fa30 	bl	80132d4 <__multadd>
 8012e74:	f1bb 0f00 	cmp.w	fp, #0
 8012e78:	4605      	mov	r5, r0
 8012e7a:	dc64      	bgt.n	8012f46 <_dtoa_r+0x876>
 8012e7c:	9b07      	ldr	r3, [sp, #28]
 8012e7e:	2b02      	cmp	r3, #2
 8012e80:	dc3e      	bgt.n	8012f00 <_dtoa_r+0x830>
 8012e82:	e060      	b.n	8012f46 <_dtoa_r+0x876>
 8012e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012e8a:	e73c      	b.n	8012d06 <_dtoa_r+0x636>
 8012e8c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012e90:	42a3      	cmp	r3, r4
 8012e92:	bfbf      	itttt	lt
 8012e94:	1ae2      	sublt	r2, r4, r3
 8012e96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012e98:	189b      	addlt	r3, r3, r2
 8012e9a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012e9c:	bfae      	itee	ge
 8012e9e:	1b1c      	subge	r4, r3, r4
 8012ea0:	4623      	movlt	r3, r4
 8012ea2:	2400      	movlt	r4, #0
 8012ea4:	f1ba 0f00 	cmp.w	sl, #0
 8012ea8:	bfb5      	itete	lt
 8012eaa:	9a05      	ldrlt	r2, [sp, #20]
 8012eac:	9e05      	ldrge	r6, [sp, #20]
 8012eae:	eba2 060a 	sublt.w	r6, r2, sl
 8012eb2:	4652      	movge	r2, sl
 8012eb4:	bfb8      	it	lt
 8012eb6:	2200      	movlt	r2, #0
 8012eb8:	e727      	b.n	8012d0a <_dtoa_r+0x63a>
 8012eba:	9e05      	ldr	r6, [sp, #20]
 8012ebc:	9d08      	ldr	r5, [sp, #32]
 8012ebe:	461c      	mov	r4, r3
 8012ec0:	e730      	b.n	8012d24 <_dtoa_r+0x654>
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	e758      	b.n	8012d78 <_dtoa_r+0x6a8>
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	e786      	b.n	8012dd8 <_dtoa_r+0x708>
 8012eca:	9b02      	ldr	r3, [sp, #8]
 8012ecc:	e784      	b.n	8012dd8 <_dtoa_r+0x708>
 8012ece:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012ed0:	e783      	b.n	8012dda <_dtoa_r+0x70a>
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ed6:	e784      	b.n	8012de2 <_dtoa_r+0x712>
 8012ed8:	d09d      	beq.n	8012e16 <_dtoa_r+0x746>
 8012eda:	9b05      	ldr	r3, [sp, #20]
 8012edc:	321c      	adds	r2, #28
 8012ede:	4413      	add	r3, r2
 8012ee0:	9305      	str	r3, [sp, #20]
 8012ee2:	9b06      	ldr	r3, [sp, #24]
 8012ee4:	4416      	add	r6, r2
 8012ee6:	4413      	add	r3, r2
 8012ee8:	e794      	b.n	8012e14 <_dtoa_r+0x744>
 8012eea:	4602      	mov	r2, r0
 8012eec:	e7f5      	b.n	8012eda <_dtoa_r+0x80a>
 8012eee:	f1ba 0f00 	cmp.w	sl, #0
 8012ef2:	f8cd 8010 	str.w	r8, [sp, #16]
 8012ef6:	46d3      	mov	fp, sl
 8012ef8:	dc21      	bgt.n	8012f3e <_dtoa_r+0x86e>
 8012efa:	9b07      	ldr	r3, [sp, #28]
 8012efc:	2b02      	cmp	r3, #2
 8012efe:	dd1e      	ble.n	8012f3e <_dtoa_r+0x86e>
 8012f00:	f1bb 0f00 	cmp.w	fp, #0
 8012f04:	f47f aeb7 	bne.w	8012c76 <_dtoa_r+0x5a6>
 8012f08:	4621      	mov	r1, r4
 8012f0a:	465b      	mov	r3, fp
 8012f0c:	2205      	movs	r2, #5
 8012f0e:	4648      	mov	r0, r9
 8012f10:	f000 f9e0 	bl	80132d4 <__multadd>
 8012f14:	4601      	mov	r1, r0
 8012f16:	4604      	mov	r4, r0
 8012f18:	9801      	ldr	r0, [sp, #4]
 8012f1a:	f000 fbf3 	bl	8013704 <__mcmp>
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	f77f aea9 	ble.w	8012c76 <_dtoa_r+0x5a6>
 8012f24:	463e      	mov	r6, r7
 8012f26:	2331      	movs	r3, #49	@ 0x31
 8012f28:	f806 3b01 	strb.w	r3, [r6], #1
 8012f2c:	9b04      	ldr	r3, [sp, #16]
 8012f2e:	3301      	adds	r3, #1
 8012f30:	9304      	str	r3, [sp, #16]
 8012f32:	e6a4      	b.n	8012c7e <_dtoa_r+0x5ae>
 8012f34:	f8cd 8010 	str.w	r8, [sp, #16]
 8012f38:	4654      	mov	r4, sl
 8012f3a:	4625      	mov	r5, r4
 8012f3c:	e7f2      	b.n	8012f24 <_dtoa_r+0x854>
 8012f3e:	9b08      	ldr	r3, [sp, #32]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 8103 	beq.w	801314c <_dtoa_r+0xa7c>
 8012f46:	2e00      	cmp	r6, #0
 8012f48:	dd05      	ble.n	8012f56 <_dtoa_r+0x886>
 8012f4a:	4629      	mov	r1, r5
 8012f4c:	4632      	mov	r2, r6
 8012f4e:	4648      	mov	r0, r9
 8012f50:	f000 fb6c 	bl	801362c <__lshift>
 8012f54:	4605      	mov	r5, r0
 8012f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d058      	beq.n	801300e <_dtoa_r+0x93e>
 8012f5c:	6869      	ldr	r1, [r5, #4]
 8012f5e:	4648      	mov	r0, r9
 8012f60:	f000 f956 	bl	8013210 <_Balloc>
 8012f64:	4606      	mov	r6, r0
 8012f66:	b928      	cbnz	r0, 8012f74 <_dtoa_r+0x8a4>
 8012f68:	4b82      	ldr	r3, [pc, #520]	@ (8013174 <_dtoa_r+0xaa4>)
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012f70:	f7ff bbc7 	b.w	8012702 <_dtoa_r+0x32>
 8012f74:	692a      	ldr	r2, [r5, #16]
 8012f76:	3202      	adds	r2, #2
 8012f78:	0092      	lsls	r2, r2, #2
 8012f7a:	f105 010c 	add.w	r1, r5, #12
 8012f7e:	300c      	adds	r0, #12
 8012f80:	f7ff fb0f 	bl	80125a2 <memcpy>
 8012f84:	2201      	movs	r2, #1
 8012f86:	4631      	mov	r1, r6
 8012f88:	4648      	mov	r0, r9
 8012f8a:	f000 fb4f 	bl	801362c <__lshift>
 8012f8e:	1c7b      	adds	r3, r7, #1
 8012f90:	9305      	str	r3, [sp, #20]
 8012f92:	eb07 030b 	add.w	r3, r7, fp
 8012f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f98:	9b02      	ldr	r3, [sp, #8]
 8012f9a:	f003 0301 	and.w	r3, r3, #1
 8012f9e:	46a8      	mov	r8, r5
 8012fa0:	9308      	str	r3, [sp, #32]
 8012fa2:	4605      	mov	r5, r0
 8012fa4:	9b05      	ldr	r3, [sp, #20]
 8012fa6:	9801      	ldr	r0, [sp, #4]
 8012fa8:	4621      	mov	r1, r4
 8012faa:	f103 3bff 	add.w	fp, r3, #4294967295
 8012fae:	f7ff fb06 	bl	80125be <quorem>
 8012fb2:	4641      	mov	r1, r8
 8012fb4:	9002      	str	r0, [sp, #8]
 8012fb6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012fba:	9801      	ldr	r0, [sp, #4]
 8012fbc:	f000 fba2 	bl	8013704 <__mcmp>
 8012fc0:	462a      	mov	r2, r5
 8012fc2:	9006      	str	r0, [sp, #24]
 8012fc4:	4621      	mov	r1, r4
 8012fc6:	4648      	mov	r0, r9
 8012fc8:	f000 fbb8 	bl	801373c <__mdiff>
 8012fcc:	68c2      	ldr	r2, [r0, #12]
 8012fce:	4606      	mov	r6, r0
 8012fd0:	b9fa      	cbnz	r2, 8013012 <_dtoa_r+0x942>
 8012fd2:	4601      	mov	r1, r0
 8012fd4:	9801      	ldr	r0, [sp, #4]
 8012fd6:	f000 fb95 	bl	8013704 <__mcmp>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	4631      	mov	r1, r6
 8012fde:	4648      	mov	r0, r9
 8012fe0:	920a      	str	r2, [sp, #40]	@ 0x28
 8012fe2:	f000 f955 	bl	8013290 <_Bfree>
 8012fe6:	9b07      	ldr	r3, [sp, #28]
 8012fe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012fea:	9e05      	ldr	r6, [sp, #20]
 8012fec:	ea43 0102 	orr.w	r1, r3, r2
 8012ff0:	9b08      	ldr	r3, [sp, #32]
 8012ff2:	4319      	orrs	r1, r3
 8012ff4:	d10f      	bne.n	8013016 <_dtoa_r+0x946>
 8012ff6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012ffa:	d028      	beq.n	801304e <_dtoa_r+0x97e>
 8012ffc:	9b06      	ldr	r3, [sp, #24]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	dd02      	ble.n	8013008 <_dtoa_r+0x938>
 8013002:	9b02      	ldr	r3, [sp, #8]
 8013004:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013008:	f88b a000 	strb.w	sl, [fp]
 801300c:	e639      	b.n	8012c82 <_dtoa_r+0x5b2>
 801300e:	4628      	mov	r0, r5
 8013010:	e7bd      	b.n	8012f8e <_dtoa_r+0x8be>
 8013012:	2201      	movs	r2, #1
 8013014:	e7e2      	b.n	8012fdc <_dtoa_r+0x90c>
 8013016:	9b06      	ldr	r3, [sp, #24]
 8013018:	2b00      	cmp	r3, #0
 801301a:	db04      	blt.n	8013026 <_dtoa_r+0x956>
 801301c:	9907      	ldr	r1, [sp, #28]
 801301e:	430b      	orrs	r3, r1
 8013020:	9908      	ldr	r1, [sp, #32]
 8013022:	430b      	orrs	r3, r1
 8013024:	d120      	bne.n	8013068 <_dtoa_r+0x998>
 8013026:	2a00      	cmp	r2, #0
 8013028:	ddee      	ble.n	8013008 <_dtoa_r+0x938>
 801302a:	9901      	ldr	r1, [sp, #4]
 801302c:	2201      	movs	r2, #1
 801302e:	4648      	mov	r0, r9
 8013030:	f000 fafc 	bl	801362c <__lshift>
 8013034:	4621      	mov	r1, r4
 8013036:	9001      	str	r0, [sp, #4]
 8013038:	f000 fb64 	bl	8013704 <__mcmp>
 801303c:	2800      	cmp	r0, #0
 801303e:	dc03      	bgt.n	8013048 <_dtoa_r+0x978>
 8013040:	d1e2      	bne.n	8013008 <_dtoa_r+0x938>
 8013042:	f01a 0f01 	tst.w	sl, #1
 8013046:	d0df      	beq.n	8013008 <_dtoa_r+0x938>
 8013048:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801304c:	d1d9      	bne.n	8013002 <_dtoa_r+0x932>
 801304e:	2339      	movs	r3, #57	@ 0x39
 8013050:	f88b 3000 	strb.w	r3, [fp]
 8013054:	4633      	mov	r3, r6
 8013056:	461e      	mov	r6, r3
 8013058:	3b01      	subs	r3, #1
 801305a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801305e:	2a39      	cmp	r2, #57	@ 0x39
 8013060:	d053      	beq.n	801310a <_dtoa_r+0xa3a>
 8013062:	3201      	adds	r2, #1
 8013064:	701a      	strb	r2, [r3, #0]
 8013066:	e60c      	b.n	8012c82 <_dtoa_r+0x5b2>
 8013068:	2a00      	cmp	r2, #0
 801306a:	dd07      	ble.n	801307c <_dtoa_r+0x9ac>
 801306c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013070:	d0ed      	beq.n	801304e <_dtoa_r+0x97e>
 8013072:	f10a 0301 	add.w	r3, sl, #1
 8013076:	f88b 3000 	strb.w	r3, [fp]
 801307a:	e602      	b.n	8012c82 <_dtoa_r+0x5b2>
 801307c:	9b05      	ldr	r3, [sp, #20]
 801307e:	9a05      	ldr	r2, [sp, #20]
 8013080:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013086:	4293      	cmp	r3, r2
 8013088:	d029      	beq.n	80130de <_dtoa_r+0xa0e>
 801308a:	9901      	ldr	r1, [sp, #4]
 801308c:	2300      	movs	r3, #0
 801308e:	220a      	movs	r2, #10
 8013090:	4648      	mov	r0, r9
 8013092:	f000 f91f 	bl	80132d4 <__multadd>
 8013096:	45a8      	cmp	r8, r5
 8013098:	9001      	str	r0, [sp, #4]
 801309a:	f04f 0300 	mov.w	r3, #0
 801309e:	f04f 020a 	mov.w	r2, #10
 80130a2:	4641      	mov	r1, r8
 80130a4:	4648      	mov	r0, r9
 80130a6:	d107      	bne.n	80130b8 <_dtoa_r+0x9e8>
 80130a8:	f000 f914 	bl	80132d4 <__multadd>
 80130ac:	4680      	mov	r8, r0
 80130ae:	4605      	mov	r5, r0
 80130b0:	9b05      	ldr	r3, [sp, #20]
 80130b2:	3301      	adds	r3, #1
 80130b4:	9305      	str	r3, [sp, #20]
 80130b6:	e775      	b.n	8012fa4 <_dtoa_r+0x8d4>
 80130b8:	f000 f90c 	bl	80132d4 <__multadd>
 80130bc:	4629      	mov	r1, r5
 80130be:	4680      	mov	r8, r0
 80130c0:	2300      	movs	r3, #0
 80130c2:	220a      	movs	r2, #10
 80130c4:	4648      	mov	r0, r9
 80130c6:	f000 f905 	bl	80132d4 <__multadd>
 80130ca:	4605      	mov	r5, r0
 80130cc:	e7f0      	b.n	80130b0 <_dtoa_r+0x9e0>
 80130ce:	f1bb 0f00 	cmp.w	fp, #0
 80130d2:	bfcc      	ite	gt
 80130d4:	465e      	movgt	r6, fp
 80130d6:	2601      	movle	r6, #1
 80130d8:	443e      	add	r6, r7
 80130da:	f04f 0800 	mov.w	r8, #0
 80130de:	9901      	ldr	r1, [sp, #4]
 80130e0:	2201      	movs	r2, #1
 80130e2:	4648      	mov	r0, r9
 80130e4:	f000 faa2 	bl	801362c <__lshift>
 80130e8:	4621      	mov	r1, r4
 80130ea:	9001      	str	r0, [sp, #4]
 80130ec:	f000 fb0a 	bl	8013704 <__mcmp>
 80130f0:	2800      	cmp	r0, #0
 80130f2:	dcaf      	bgt.n	8013054 <_dtoa_r+0x984>
 80130f4:	d102      	bne.n	80130fc <_dtoa_r+0xa2c>
 80130f6:	f01a 0f01 	tst.w	sl, #1
 80130fa:	d1ab      	bne.n	8013054 <_dtoa_r+0x984>
 80130fc:	4633      	mov	r3, r6
 80130fe:	461e      	mov	r6, r3
 8013100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013104:	2a30      	cmp	r2, #48	@ 0x30
 8013106:	d0fa      	beq.n	80130fe <_dtoa_r+0xa2e>
 8013108:	e5bb      	b.n	8012c82 <_dtoa_r+0x5b2>
 801310a:	429f      	cmp	r7, r3
 801310c:	d1a3      	bne.n	8013056 <_dtoa_r+0x986>
 801310e:	9b04      	ldr	r3, [sp, #16]
 8013110:	3301      	adds	r3, #1
 8013112:	9304      	str	r3, [sp, #16]
 8013114:	2331      	movs	r3, #49	@ 0x31
 8013116:	703b      	strb	r3, [r7, #0]
 8013118:	e5b3      	b.n	8012c82 <_dtoa_r+0x5b2>
 801311a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801311c:	4f16      	ldr	r7, [pc, #88]	@ (8013178 <_dtoa_r+0xaa8>)
 801311e:	b11b      	cbz	r3, 8013128 <_dtoa_r+0xa58>
 8013120:	f107 0308 	add.w	r3, r7, #8
 8013124:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013126:	6013      	str	r3, [r2, #0]
 8013128:	4638      	mov	r0, r7
 801312a:	b011      	add	sp, #68	@ 0x44
 801312c:	ecbd 8b02 	vpop	{d8}
 8013130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013134:	9b07      	ldr	r3, [sp, #28]
 8013136:	2b01      	cmp	r3, #1
 8013138:	f77f ae36 	ble.w	8012da8 <_dtoa_r+0x6d8>
 801313c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801313e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013140:	2001      	movs	r0, #1
 8013142:	e656      	b.n	8012df2 <_dtoa_r+0x722>
 8013144:	f1bb 0f00 	cmp.w	fp, #0
 8013148:	f77f aed7 	ble.w	8012efa <_dtoa_r+0x82a>
 801314c:	463e      	mov	r6, r7
 801314e:	9801      	ldr	r0, [sp, #4]
 8013150:	4621      	mov	r1, r4
 8013152:	f7ff fa34 	bl	80125be <quorem>
 8013156:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801315a:	f806 ab01 	strb.w	sl, [r6], #1
 801315e:	1bf2      	subs	r2, r6, r7
 8013160:	4593      	cmp	fp, r2
 8013162:	ddb4      	ble.n	80130ce <_dtoa_r+0x9fe>
 8013164:	9901      	ldr	r1, [sp, #4]
 8013166:	2300      	movs	r3, #0
 8013168:	220a      	movs	r2, #10
 801316a:	4648      	mov	r0, r9
 801316c:	f000 f8b2 	bl	80132d4 <__multadd>
 8013170:	9001      	str	r0, [sp, #4]
 8013172:	e7ec      	b.n	801314e <_dtoa_r+0xa7e>
 8013174:	08016b04 	.word	0x08016b04
 8013178:	08016a88 	.word	0x08016a88

0801317c <_free_r>:
 801317c:	b538      	push	{r3, r4, r5, lr}
 801317e:	4605      	mov	r5, r0
 8013180:	2900      	cmp	r1, #0
 8013182:	d041      	beq.n	8013208 <_free_r+0x8c>
 8013184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013188:	1f0c      	subs	r4, r1, #4
 801318a:	2b00      	cmp	r3, #0
 801318c:	bfb8      	it	lt
 801318e:	18e4      	addlt	r4, r4, r3
 8013190:	f7fe fc0e 	bl	80119b0 <__malloc_lock>
 8013194:	4a1d      	ldr	r2, [pc, #116]	@ (801320c <_free_r+0x90>)
 8013196:	6813      	ldr	r3, [r2, #0]
 8013198:	b933      	cbnz	r3, 80131a8 <_free_r+0x2c>
 801319a:	6063      	str	r3, [r4, #4]
 801319c:	6014      	str	r4, [r2, #0]
 801319e:	4628      	mov	r0, r5
 80131a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131a4:	f7fe bc0a 	b.w	80119bc <__malloc_unlock>
 80131a8:	42a3      	cmp	r3, r4
 80131aa:	d908      	bls.n	80131be <_free_r+0x42>
 80131ac:	6820      	ldr	r0, [r4, #0]
 80131ae:	1821      	adds	r1, r4, r0
 80131b0:	428b      	cmp	r3, r1
 80131b2:	bf01      	itttt	eq
 80131b4:	6819      	ldreq	r1, [r3, #0]
 80131b6:	685b      	ldreq	r3, [r3, #4]
 80131b8:	1809      	addeq	r1, r1, r0
 80131ba:	6021      	streq	r1, [r4, #0]
 80131bc:	e7ed      	b.n	801319a <_free_r+0x1e>
 80131be:	461a      	mov	r2, r3
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	b10b      	cbz	r3, 80131c8 <_free_r+0x4c>
 80131c4:	42a3      	cmp	r3, r4
 80131c6:	d9fa      	bls.n	80131be <_free_r+0x42>
 80131c8:	6811      	ldr	r1, [r2, #0]
 80131ca:	1850      	adds	r0, r2, r1
 80131cc:	42a0      	cmp	r0, r4
 80131ce:	d10b      	bne.n	80131e8 <_free_r+0x6c>
 80131d0:	6820      	ldr	r0, [r4, #0]
 80131d2:	4401      	add	r1, r0
 80131d4:	1850      	adds	r0, r2, r1
 80131d6:	4283      	cmp	r3, r0
 80131d8:	6011      	str	r1, [r2, #0]
 80131da:	d1e0      	bne.n	801319e <_free_r+0x22>
 80131dc:	6818      	ldr	r0, [r3, #0]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	6053      	str	r3, [r2, #4]
 80131e2:	4408      	add	r0, r1
 80131e4:	6010      	str	r0, [r2, #0]
 80131e6:	e7da      	b.n	801319e <_free_r+0x22>
 80131e8:	d902      	bls.n	80131f0 <_free_r+0x74>
 80131ea:	230c      	movs	r3, #12
 80131ec:	602b      	str	r3, [r5, #0]
 80131ee:	e7d6      	b.n	801319e <_free_r+0x22>
 80131f0:	6820      	ldr	r0, [r4, #0]
 80131f2:	1821      	adds	r1, r4, r0
 80131f4:	428b      	cmp	r3, r1
 80131f6:	bf04      	itt	eq
 80131f8:	6819      	ldreq	r1, [r3, #0]
 80131fa:	685b      	ldreq	r3, [r3, #4]
 80131fc:	6063      	str	r3, [r4, #4]
 80131fe:	bf04      	itt	eq
 8013200:	1809      	addeq	r1, r1, r0
 8013202:	6021      	streq	r1, [r4, #0]
 8013204:	6054      	str	r4, [r2, #4]
 8013206:	e7ca      	b.n	801319e <_free_r+0x22>
 8013208:	bd38      	pop	{r3, r4, r5, pc}
 801320a:	bf00      	nop
 801320c:	24006f98 	.word	0x24006f98

08013210 <_Balloc>:
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	69c6      	ldr	r6, [r0, #28]
 8013214:	4604      	mov	r4, r0
 8013216:	460d      	mov	r5, r1
 8013218:	b976      	cbnz	r6, 8013238 <_Balloc+0x28>
 801321a:	2010      	movs	r0, #16
 801321c:	f7fe fb1e 	bl	801185c <malloc>
 8013220:	4602      	mov	r2, r0
 8013222:	61e0      	str	r0, [r4, #28]
 8013224:	b920      	cbnz	r0, 8013230 <_Balloc+0x20>
 8013226:	4b18      	ldr	r3, [pc, #96]	@ (8013288 <_Balloc+0x78>)
 8013228:	4818      	ldr	r0, [pc, #96]	@ (801328c <_Balloc+0x7c>)
 801322a:	216b      	movs	r1, #107	@ 0x6b
 801322c:	f000 fd90 	bl	8013d50 <__assert_func>
 8013230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013234:	6006      	str	r6, [r0, #0]
 8013236:	60c6      	str	r6, [r0, #12]
 8013238:	69e6      	ldr	r6, [r4, #28]
 801323a:	68f3      	ldr	r3, [r6, #12]
 801323c:	b183      	cbz	r3, 8013260 <_Balloc+0x50>
 801323e:	69e3      	ldr	r3, [r4, #28]
 8013240:	68db      	ldr	r3, [r3, #12]
 8013242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013246:	b9b8      	cbnz	r0, 8013278 <_Balloc+0x68>
 8013248:	2101      	movs	r1, #1
 801324a:	fa01 f605 	lsl.w	r6, r1, r5
 801324e:	1d72      	adds	r2, r6, #5
 8013250:	0092      	lsls	r2, r2, #2
 8013252:	4620      	mov	r0, r4
 8013254:	f000 fd9a 	bl	8013d8c <_calloc_r>
 8013258:	b160      	cbz	r0, 8013274 <_Balloc+0x64>
 801325a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801325e:	e00e      	b.n	801327e <_Balloc+0x6e>
 8013260:	2221      	movs	r2, #33	@ 0x21
 8013262:	2104      	movs	r1, #4
 8013264:	4620      	mov	r0, r4
 8013266:	f000 fd91 	bl	8013d8c <_calloc_r>
 801326a:	69e3      	ldr	r3, [r4, #28]
 801326c:	60f0      	str	r0, [r6, #12]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d1e4      	bne.n	801323e <_Balloc+0x2e>
 8013274:	2000      	movs	r0, #0
 8013276:	bd70      	pop	{r4, r5, r6, pc}
 8013278:	6802      	ldr	r2, [r0, #0]
 801327a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801327e:	2300      	movs	r3, #0
 8013280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013284:	e7f7      	b.n	8013276 <_Balloc+0x66>
 8013286:	bf00      	nop
 8013288:	08016a95 	.word	0x08016a95
 801328c:	08016b15 	.word	0x08016b15

08013290 <_Bfree>:
 8013290:	b570      	push	{r4, r5, r6, lr}
 8013292:	69c6      	ldr	r6, [r0, #28]
 8013294:	4605      	mov	r5, r0
 8013296:	460c      	mov	r4, r1
 8013298:	b976      	cbnz	r6, 80132b8 <_Bfree+0x28>
 801329a:	2010      	movs	r0, #16
 801329c:	f7fe fade 	bl	801185c <malloc>
 80132a0:	4602      	mov	r2, r0
 80132a2:	61e8      	str	r0, [r5, #28]
 80132a4:	b920      	cbnz	r0, 80132b0 <_Bfree+0x20>
 80132a6:	4b09      	ldr	r3, [pc, #36]	@ (80132cc <_Bfree+0x3c>)
 80132a8:	4809      	ldr	r0, [pc, #36]	@ (80132d0 <_Bfree+0x40>)
 80132aa:	218f      	movs	r1, #143	@ 0x8f
 80132ac:	f000 fd50 	bl	8013d50 <__assert_func>
 80132b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132b4:	6006      	str	r6, [r0, #0]
 80132b6:	60c6      	str	r6, [r0, #12]
 80132b8:	b13c      	cbz	r4, 80132ca <_Bfree+0x3a>
 80132ba:	69eb      	ldr	r3, [r5, #28]
 80132bc:	6862      	ldr	r2, [r4, #4]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80132c4:	6021      	str	r1, [r4, #0]
 80132c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80132ca:	bd70      	pop	{r4, r5, r6, pc}
 80132cc:	08016a95 	.word	0x08016a95
 80132d0:	08016b15 	.word	0x08016b15

080132d4 <__multadd>:
 80132d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d8:	690d      	ldr	r5, [r1, #16]
 80132da:	4607      	mov	r7, r0
 80132dc:	460c      	mov	r4, r1
 80132de:	461e      	mov	r6, r3
 80132e0:	f101 0c14 	add.w	ip, r1, #20
 80132e4:	2000      	movs	r0, #0
 80132e6:	f8dc 3000 	ldr.w	r3, [ip]
 80132ea:	b299      	uxth	r1, r3
 80132ec:	fb02 6101 	mla	r1, r2, r1, r6
 80132f0:	0c1e      	lsrs	r6, r3, #16
 80132f2:	0c0b      	lsrs	r3, r1, #16
 80132f4:	fb02 3306 	mla	r3, r2, r6, r3
 80132f8:	b289      	uxth	r1, r1
 80132fa:	3001      	adds	r0, #1
 80132fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013300:	4285      	cmp	r5, r0
 8013302:	f84c 1b04 	str.w	r1, [ip], #4
 8013306:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801330a:	dcec      	bgt.n	80132e6 <__multadd+0x12>
 801330c:	b30e      	cbz	r6, 8013352 <__multadd+0x7e>
 801330e:	68a3      	ldr	r3, [r4, #8]
 8013310:	42ab      	cmp	r3, r5
 8013312:	dc19      	bgt.n	8013348 <__multadd+0x74>
 8013314:	6861      	ldr	r1, [r4, #4]
 8013316:	4638      	mov	r0, r7
 8013318:	3101      	adds	r1, #1
 801331a:	f7ff ff79 	bl	8013210 <_Balloc>
 801331e:	4680      	mov	r8, r0
 8013320:	b928      	cbnz	r0, 801332e <__multadd+0x5a>
 8013322:	4602      	mov	r2, r0
 8013324:	4b0c      	ldr	r3, [pc, #48]	@ (8013358 <__multadd+0x84>)
 8013326:	480d      	ldr	r0, [pc, #52]	@ (801335c <__multadd+0x88>)
 8013328:	21ba      	movs	r1, #186	@ 0xba
 801332a:	f000 fd11 	bl	8013d50 <__assert_func>
 801332e:	6922      	ldr	r2, [r4, #16]
 8013330:	3202      	adds	r2, #2
 8013332:	f104 010c 	add.w	r1, r4, #12
 8013336:	0092      	lsls	r2, r2, #2
 8013338:	300c      	adds	r0, #12
 801333a:	f7ff f932 	bl	80125a2 <memcpy>
 801333e:	4621      	mov	r1, r4
 8013340:	4638      	mov	r0, r7
 8013342:	f7ff ffa5 	bl	8013290 <_Bfree>
 8013346:	4644      	mov	r4, r8
 8013348:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801334c:	3501      	adds	r5, #1
 801334e:	615e      	str	r6, [r3, #20]
 8013350:	6125      	str	r5, [r4, #16]
 8013352:	4620      	mov	r0, r4
 8013354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013358:	08016b04 	.word	0x08016b04
 801335c:	08016b15 	.word	0x08016b15

08013360 <__hi0bits>:
 8013360:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013364:	4603      	mov	r3, r0
 8013366:	bf36      	itet	cc
 8013368:	0403      	lslcc	r3, r0, #16
 801336a:	2000      	movcs	r0, #0
 801336c:	2010      	movcc	r0, #16
 801336e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013372:	bf3c      	itt	cc
 8013374:	021b      	lslcc	r3, r3, #8
 8013376:	3008      	addcc	r0, #8
 8013378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801337c:	bf3c      	itt	cc
 801337e:	011b      	lslcc	r3, r3, #4
 8013380:	3004      	addcc	r0, #4
 8013382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013386:	bf3c      	itt	cc
 8013388:	009b      	lslcc	r3, r3, #2
 801338a:	3002      	addcc	r0, #2
 801338c:	2b00      	cmp	r3, #0
 801338e:	db05      	blt.n	801339c <__hi0bits+0x3c>
 8013390:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013394:	f100 0001 	add.w	r0, r0, #1
 8013398:	bf08      	it	eq
 801339a:	2020      	moveq	r0, #32
 801339c:	4770      	bx	lr

0801339e <__lo0bits>:
 801339e:	6803      	ldr	r3, [r0, #0]
 80133a0:	4602      	mov	r2, r0
 80133a2:	f013 0007 	ands.w	r0, r3, #7
 80133a6:	d00b      	beq.n	80133c0 <__lo0bits+0x22>
 80133a8:	07d9      	lsls	r1, r3, #31
 80133aa:	d421      	bmi.n	80133f0 <__lo0bits+0x52>
 80133ac:	0798      	lsls	r0, r3, #30
 80133ae:	bf49      	itett	mi
 80133b0:	085b      	lsrmi	r3, r3, #1
 80133b2:	089b      	lsrpl	r3, r3, #2
 80133b4:	2001      	movmi	r0, #1
 80133b6:	6013      	strmi	r3, [r2, #0]
 80133b8:	bf5c      	itt	pl
 80133ba:	6013      	strpl	r3, [r2, #0]
 80133bc:	2002      	movpl	r0, #2
 80133be:	4770      	bx	lr
 80133c0:	b299      	uxth	r1, r3
 80133c2:	b909      	cbnz	r1, 80133c8 <__lo0bits+0x2a>
 80133c4:	0c1b      	lsrs	r3, r3, #16
 80133c6:	2010      	movs	r0, #16
 80133c8:	b2d9      	uxtb	r1, r3
 80133ca:	b909      	cbnz	r1, 80133d0 <__lo0bits+0x32>
 80133cc:	3008      	adds	r0, #8
 80133ce:	0a1b      	lsrs	r3, r3, #8
 80133d0:	0719      	lsls	r1, r3, #28
 80133d2:	bf04      	itt	eq
 80133d4:	091b      	lsreq	r3, r3, #4
 80133d6:	3004      	addeq	r0, #4
 80133d8:	0799      	lsls	r1, r3, #30
 80133da:	bf04      	itt	eq
 80133dc:	089b      	lsreq	r3, r3, #2
 80133de:	3002      	addeq	r0, #2
 80133e0:	07d9      	lsls	r1, r3, #31
 80133e2:	d403      	bmi.n	80133ec <__lo0bits+0x4e>
 80133e4:	085b      	lsrs	r3, r3, #1
 80133e6:	f100 0001 	add.w	r0, r0, #1
 80133ea:	d003      	beq.n	80133f4 <__lo0bits+0x56>
 80133ec:	6013      	str	r3, [r2, #0]
 80133ee:	4770      	bx	lr
 80133f0:	2000      	movs	r0, #0
 80133f2:	4770      	bx	lr
 80133f4:	2020      	movs	r0, #32
 80133f6:	4770      	bx	lr

080133f8 <__i2b>:
 80133f8:	b510      	push	{r4, lr}
 80133fa:	460c      	mov	r4, r1
 80133fc:	2101      	movs	r1, #1
 80133fe:	f7ff ff07 	bl	8013210 <_Balloc>
 8013402:	4602      	mov	r2, r0
 8013404:	b928      	cbnz	r0, 8013412 <__i2b+0x1a>
 8013406:	4b05      	ldr	r3, [pc, #20]	@ (801341c <__i2b+0x24>)
 8013408:	4805      	ldr	r0, [pc, #20]	@ (8013420 <__i2b+0x28>)
 801340a:	f240 1145 	movw	r1, #325	@ 0x145
 801340e:	f000 fc9f 	bl	8013d50 <__assert_func>
 8013412:	2301      	movs	r3, #1
 8013414:	6144      	str	r4, [r0, #20]
 8013416:	6103      	str	r3, [r0, #16]
 8013418:	bd10      	pop	{r4, pc}
 801341a:	bf00      	nop
 801341c:	08016b04 	.word	0x08016b04
 8013420:	08016b15 	.word	0x08016b15

08013424 <__multiply>:
 8013424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013428:	4614      	mov	r4, r2
 801342a:	690a      	ldr	r2, [r1, #16]
 801342c:	6923      	ldr	r3, [r4, #16]
 801342e:	429a      	cmp	r2, r3
 8013430:	bfa8      	it	ge
 8013432:	4623      	movge	r3, r4
 8013434:	460f      	mov	r7, r1
 8013436:	bfa4      	itt	ge
 8013438:	460c      	movge	r4, r1
 801343a:	461f      	movge	r7, r3
 801343c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013440:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013444:	68a3      	ldr	r3, [r4, #8]
 8013446:	6861      	ldr	r1, [r4, #4]
 8013448:	eb0a 0609 	add.w	r6, sl, r9
 801344c:	42b3      	cmp	r3, r6
 801344e:	b085      	sub	sp, #20
 8013450:	bfb8      	it	lt
 8013452:	3101      	addlt	r1, #1
 8013454:	f7ff fedc 	bl	8013210 <_Balloc>
 8013458:	b930      	cbnz	r0, 8013468 <__multiply+0x44>
 801345a:	4602      	mov	r2, r0
 801345c:	4b44      	ldr	r3, [pc, #272]	@ (8013570 <__multiply+0x14c>)
 801345e:	4845      	ldr	r0, [pc, #276]	@ (8013574 <__multiply+0x150>)
 8013460:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013464:	f000 fc74 	bl	8013d50 <__assert_func>
 8013468:	f100 0514 	add.w	r5, r0, #20
 801346c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013470:	462b      	mov	r3, r5
 8013472:	2200      	movs	r2, #0
 8013474:	4543      	cmp	r3, r8
 8013476:	d321      	bcc.n	80134bc <__multiply+0x98>
 8013478:	f107 0114 	add.w	r1, r7, #20
 801347c:	f104 0214 	add.w	r2, r4, #20
 8013480:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013484:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013488:	9302      	str	r3, [sp, #8]
 801348a:	1b13      	subs	r3, r2, r4
 801348c:	3b15      	subs	r3, #21
 801348e:	f023 0303 	bic.w	r3, r3, #3
 8013492:	3304      	adds	r3, #4
 8013494:	f104 0715 	add.w	r7, r4, #21
 8013498:	42ba      	cmp	r2, r7
 801349a:	bf38      	it	cc
 801349c:	2304      	movcc	r3, #4
 801349e:	9301      	str	r3, [sp, #4]
 80134a0:	9b02      	ldr	r3, [sp, #8]
 80134a2:	9103      	str	r1, [sp, #12]
 80134a4:	428b      	cmp	r3, r1
 80134a6:	d80c      	bhi.n	80134c2 <__multiply+0x9e>
 80134a8:	2e00      	cmp	r6, #0
 80134aa:	dd03      	ble.n	80134b4 <__multiply+0x90>
 80134ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d05b      	beq.n	801356c <__multiply+0x148>
 80134b4:	6106      	str	r6, [r0, #16]
 80134b6:	b005      	add	sp, #20
 80134b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134bc:	f843 2b04 	str.w	r2, [r3], #4
 80134c0:	e7d8      	b.n	8013474 <__multiply+0x50>
 80134c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80134c6:	f1ba 0f00 	cmp.w	sl, #0
 80134ca:	d024      	beq.n	8013516 <__multiply+0xf2>
 80134cc:	f104 0e14 	add.w	lr, r4, #20
 80134d0:	46a9      	mov	r9, r5
 80134d2:	f04f 0c00 	mov.w	ip, #0
 80134d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80134da:	f8d9 3000 	ldr.w	r3, [r9]
 80134de:	fa1f fb87 	uxth.w	fp, r7
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80134e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80134ec:	f8d9 7000 	ldr.w	r7, [r9]
 80134f0:	4463      	add	r3, ip
 80134f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80134f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80134fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80134fe:	b29b      	uxth	r3, r3
 8013500:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013504:	4572      	cmp	r2, lr
 8013506:	f849 3b04 	str.w	r3, [r9], #4
 801350a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801350e:	d8e2      	bhi.n	80134d6 <__multiply+0xb2>
 8013510:	9b01      	ldr	r3, [sp, #4]
 8013512:	f845 c003 	str.w	ip, [r5, r3]
 8013516:	9b03      	ldr	r3, [sp, #12]
 8013518:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801351c:	3104      	adds	r1, #4
 801351e:	f1b9 0f00 	cmp.w	r9, #0
 8013522:	d021      	beq.n	8013568 <__multiply+0x144>
 8013524:	682b      	ldr	r3, [r5, #0]
 8013526:	f104 0c14 	add.w	ip, r4, #20
 801352a:	46ae      	mov	lr, r5
 801352c:	f04f 0a00 	mov.w	sl, #0
 8013530:	f8bc b000 	ldrh.w	fp, [ip]
 8013534:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013538:	fb09 770b 	mla	r7, r9, fp, r7
 801353c:	4457      	add	r7, sl
 801353e:	b29b      	uxth	r3, r3
 8013540:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013544:	f84e 3b04 	str.w	r3, [lr], #4
 8013548:	f85c 3b04 	ldr.w	r3, [ip], #4
 801354c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013550:	f8be 3000 	ldrh.w	r3, [lr]
 8013554:	fb09 330a 	mla	r3, r9, sl, r3
 8013558:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801355c:	4562      	cmp	r2, ip
 801355e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013562:	d8e5      	bhi.n	8013530 <__multiply+0x10c>
 8013564:	9f01      	ldr	r7, [sp, #4]
 8013566:	51eb      	str	r3, [r5, r7]
 8013568:	3504      	adds	r5, #4
 801356a:	e799      	b.n	80134a0 <__multiply+0x7c>
 801356c:	3e01      	subs	r6, #1
 801356e:	e79b      	b.n	80134a8 <__multiply+0x84>
 8013570:	08016b04 	.word	0x08016b04
 8013574:	08016b15 	.word	0x08016b15

08013578 <__pow5mult>:
 8013578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801357c:	4615      	mov	r5, r2
 801357e:	f012 0203 	ands.w	r2, r2, #3
 8013582:	4607      	mov	r7, r0
 8013584:	460e      	mov	r6, r1
 8013586:	d007      	beq.n	8013598 <__pow5mult+0x20>
 8013588:	4c25      	ldr	r4, [pc, #148]	@ (8013620 <__pow5mult+0xa8>)
 801358a:	3a01      	subs	r2, #1
 801358c:	2300      	movs	r3, #0
 801358e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013592:	f7ff fe9f 	bl	80132d4 <__multadd>
 8013596:	4606      	mov	r6, r0
 8013598:	10ad      	asrs	r5, r5, #2
 801359a:	d03d      	beq.n	8013618 <__pow5mult+0xa0>
 801359c:	69fc      	ldr	r4, [r7, #28]
 801359e:	b97c      	cbnz	r4, 80135c0 <__pow5mult+0x48>
 80135a0:	2010      	movs	r0, #16
 80135a2:	f7fe f95b 	bl	801185c <malloc>
 80135a6:	4602      	mov	r2, r0
 80135a8:	61f8      	str	r0, [r7, #28]
 80135aa:	b928      	cbnz	r0, 80135b8 <__pow5mult+0x40>
 80135ac:	4b1d      	ldr	r3, [pc, #116]	@ (8013624 <__pow5mult+0xac>)
 80135ae:	481e      	ldr	r0, [pc, #120]	@ (8013628 <__pow5mult+0xb0>)
 80135b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80135b4:	f000 fbcc 	bl	8013d50 <__assert_func>
 80135b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80135bc:	6004      	str	r4, [r0, #0]
 80135be:	60c4      	str	r4, [r0, #12]
 80135c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80135c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80135c8:	b94c      	cbnz	r4, 80135de <__pow5mult+0x66>
 80135ca:	f240 2171 	movw	r1, #625	@ 0x271
 80135ce:	4638      	mov	r0, r7
 80135d0:	f7ff ff12 	bl	80133f8 <__i2b>
 80135d4:	2300      	movs	r3, #0
 80135d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80135da:	4604      	mov	r4, r0
 80135dc:	6003      	str	r3, [r0, #0]
 80135de:	f04f 0900 	mov.w	r9, #0
 80135e2:	07eb      	lsls	r3, r5, #31
 80135e4:	d50a      	bpl.n	80135fc <__pow5mult+0x84>
 80135e6:	4631      	mov	r1, r6
 80135e8:	4622      	mov	r2, r4
 80135ea:	4638      	mov	r0, r7
 80135ec:	f7ff ff1a 	bl	8013424 <__multiply>
 80135f0:	4631      	mov	r1, r6
 80135f2:	4680      	mov	r8, r0
 80135f4:	4638      	mov	r0, r7
 80135f6:	f7ff fe4b 	bl	8013290 <_Bfree>
 80135fa:	4646      	mov	r6, r8
 80135fc:	106d      	asrs	r5, r5, #1
 80135fe:	d00b      	beq.n	8013618 <__pow5mult+0xa0>
 8013600:	6820      	ldr	r0, [r4, #0]
 8013602:	b938      	cbnz	r0, 8013614 <__pow5mult+0x9c>
 8013604:	4622      	mov	r2, r4
 8013606:	4621      	mov	r1, r4
 8013608:	4638      	mov	r0, r7
 801360a:	f7ff ff0b 	bl	8013424 <__multiply>
 801360e:	6020      	str	r0, [r4, #0]
 8013610:	f8c0 9000 	str.w	r9, [r0]
 8013614:	4604      	mov	r4, r0
 8013616:	e7e4      	b.n	80135e2 <__pow5mult+0x6a>
 8013618:	4630      	mov	r0, r6
 801361a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801361e:	bf00      	nop
 8013620:	08016b70 	.word	0x08016b70
 8013624:	08016a95 	.word	0x08016a95
 8013628:	08016b15 	.word	0x08016b15

0801362c <__lshift>:
 801362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013630:	460c      	mov	r4, r1
 8013632:	6849      	ldr	r1, [r1, #4]
 8013634:	6923      	ldr	r3, [r4, #16]
 8013636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801363a:	68a3      	ldr	r3, [r4, #8]
 801363c:	4607      	mov	r7, r0
 801363e:	4691      	mov	r9, r2
 8013640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013644:	f108 0601 	add.w	r6, r8, #1
 8013648:	42b3      	cmp	r3, r6
 801364a:	db0b      	blt.n	8013664 <__lshift+0x38>
 801364c:	4638      	mov	r0, r7
 801364e:	f7ff fddf 	bl	8013210 <_Balloc>
 8013652:	4605      	mov	r5, r0
 8013654:	b948      	cbnz	r0, 801366a <__lshift+0x3e>
 8013656:	4602      	mov	r2, r0
 8013658:	4b28      	ldr	r3, [pc, #160]	@ (80136fc <__lshift+0xd0>)
 801365a:	4829      	ldr	r0, [pc, #164]	@ (8013700 <__lshift+0xd4>)
 801365c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013660:	f000 fb76 	bl	8013d50 <__assert_func>
 8013664:	3101      	adds	r1, #1
 8013666:	005b      	lsls	r3, r3, #1
 8013668:	e7ee      	b.n	8013648 <__lshift+0x1c>
 801366a:	2300      	movs	r3, #0
 801366c:	f100 0114 	add.w	r1, r0, #20
 8013670:	f100 0210 	add.w	r2, r0, #16
 8013674:	4618      	mov	r0, r3
 8013676:	4553      	cmp	r3, sl
 8013678:	db33      	blt.n	80136e2 <__lshift+0xb6>
 801367a:	6920      	ldr	r0, [r4, #16]
 801367c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013680:	f104 0314 	add.w	r3, r4, #20
 8013684:	f019 091f 	ands.w	r9, r9, #31
 8013688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801368c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013690:	d02b      	beq.n	80136ea <__lshift+0xbe>
 8013692:	f1c9 0e20 	rsb	lr, r9, #32
 8013696:	468a      	mov	sl, r1
 8013698:	2200      	movs	r2, #0
 801369a:	6818      	ldr	r0, [r3, #0]
 801369c:	fa00 f009 	lsl.w	r0, r0, r9
 80136a0:	4310      	orrs	r0, r2
 80136a2:	f84a 0b04 	str.w	r0, [sl], #4
 80136a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136aa:	459c      	cmp	ip, r3
 80136ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80136b0:	d8f3      	bhi.n	801369a <__lshift+0x6e>
 80136b2:	ebac 0304 	sub.w	r3, ip, r4
 80136b6:	3b15      	subs	r3, #21
 80136b8:	f023 0303 	bic.w	r3, r3, #3
 80136bc:	3304      	adds	r3, #4
 80136be:	f104 0015 	add.w	r0, r4, #21
 80136c2:	4584      	cmp	ip, r0
 80136c4:	bf38      	it	cc
 80136c6:	2304      	movcc	r3, #4
 80136c8:	50ca      	str	r2, [r1, r3]
 80136ca:	b10a      	cbz	r2, 80136d0 <__lshift+0xa4>
 80136cc:	f108 0602 	add.w	r6, r8, #2
 80136d0:	3e01      	subs	r6, #1
 80136d2:	4638      	mov	r0, r7
 80136d4:	612e      	str	r6, [r5, #16]
 80136d6:	4621      	mov	r1, r4
 80136d8:	f7ff fdda 	bl	8013290 <_Bfree>
 80136dc:	4628      	mov	r0, r5
 80136de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80136e6:	3301      	adds	r3, #1
 80136e8:	e7c5      	b.n	8013676 <__lshift+0x4a>
 80136ea:	3904      	subs	r1, #4
 80136ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80136f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80136f4:	459c      	cmp	ip, r3
 80136f6:	d8f9      	bhi.n	80136ec <__lshift+0xc0>
 80136f8:	e7ea      	b.n	80136d0 <__lshift+0xa4>
 80136fa:	bf00      	nop
 80136fc:	08016b04 	.word	0x08016b04
 8013700:	08016b15 	.word	0x08016b15

08013704 <__mcmp>:
 8013704:	690a      	ldr	r2, [r1, #16]
 8013706:	4603      	mov	r3, r0
 8013708:	6900      	ldr	r0, [r0, #16]
 801370a:	1a80      	subs	r0, r0, r2
 801370c:	b530      	push	{r4, r5, lr}
 801370e:	d10e      	bne.n	801372e <__mcmp+0x2a>
 8013710:	3314      	adds	r3, #20
 8013712:	3114      	adds	r1, #20
 8013714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801371c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013724:	4295      	cmp	r5, r2
 8013726:	d003      	beq.n	8013730 <__mcmp+0x2c>
 8013728:	d205      	bcs.n	8013736 <__mcmp+0x32>
 801372a:	f04f 30ff 	mov.w	r0, #4294967295
 801372e:	bd30      	pop	{r4, r5, pc}
 8013730:	42a3      	cmp	r3, r4
 8013732:	d3f3      	bcc.n	801371c <__mcmp+0x18>
 8013734:	e7fb      	b.n	801372e <__mcmp+0x2a>
 8013736:	2001      	movs	r0, #1
 8013738:	e7f9      	b.n	801372e <__mcmp+0x2a>
	...

0801373c <__mdiff>:
 801373c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013740:	4689      	mov	r9, r1
 8013742:	4606      	mov	r6, r0
 8013744:	4611      	mov	r1, r2
 8013746:	4648      	mov	r0, r9
 8013748:	4614      	mov	r4, r2
 801374a:	f7ff ffdb 	bl	8013704 <__mcmp>
 801374e:	1e05      	subs	r5, r0, #0
 8013750:	d112      	bne.n	8013778 <__mdiff+0x3c>
 8013752:	4629      	mov	r1, r5
 8013754:	4630      	mov	r0, r6
 8013756:	f7ff fd5b 	bl	8013210 <_Balloc>
 801375a:	4602      	mov	r2, r0
 801375c:	b928      	cbnz	r0, 801376a <__mdiff+0x2e>
 801375e:	4b3f      	ldr	r3, [pc, #252]	@ (801385c <__mdiff+0x120>)
 8013760:	f240 2137 	movw	r1, #567	@ 0x237
 8013764:	483e      	ldr	r0, [pc, #248]	@ (8013860 <__mdiff+0x124>)
 8013766:	f000 faf3 	bl	8013d50 <__assert_func>
 801376a:	2301      	movs	r3, #1
 801376c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013770:	4610      	mov	r0, r2
 8013772:	b003      	add	sp, #12
 8013774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013778:	bfbc      	itt	lt
 801377a:	464b      	movlt	r3, r9
 801377c:	46a1      	movlt	r9, r4
 801377e:	4630      	mov	r0, r6
 8013780:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013784:	bfba      	itte	lt
 8013786:	461c      	movlt	r4, r3
 8013788:	2501      	movlt	r5, #1
 801378a:	2500      	movge	r5, #0
 801378c:	f7ff fd40 	bl	8013210 <_Balloc>
 8013790:	4602      	mov	r2, r0
 8013792:	b918      	cbnz	r0, 801379c <__mdiff+0x60>
 8013794:	4b31      	ldr	r3, [pc, #196]	@ (801385c <__mdiff+0x120>)
 8013796:	f240 2145 	movw	r1, #581	@ 0x245
 801379a:	e7e3      	b.n	8013764 <__mdiff+0x28>
 801379c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80137a0:	6926      	ldr	r6, [r4, #16]
 80137a2:	60c5      	str	r5, [r0, #12]
 80137a4:	f109 0310 	add.w	r3, r9, #16
 80137a8:	f109 0514 	add.w	r5, r9, #20
 80137ac:	f104 0e14 	add.w	lr, r4, #20
 80137b0:	f100 0b14 	add.w	fp, r0, #20
 80137b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80137b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80137bc:	9301      	str	r3, [sp, #4]
 80137be:	46d9      	mov	r9, fp
 80137c0:	f04f 0c00 	mov.w	ip, #0
 80137c4:	9b01      	ldr	r3, [sp, #4]
 80137c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80137ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80137ce:	9301      	str	r3, [sp, #4]
 80137d0:	fa1f f38a 	uxth.w	r3, sl
 80137d4:	4619      	mov	r1, r3
 80137d6:	b283      	uxth	r3, r0
 80137d8:	1acb      	subs	r3, r1, r3
 80137da:	0c00      	lsrs	r0, r0, #16
 80137dc:	4463      	add	r3, ip
 80137de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80137e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80137ec:	4576      	cmp	r6, lr
 80137ee:	f849 3b04 	str.w	r3, [r9], #4
 80137f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80137f6:	d8e5      	bhi.n	80137c4 <__mdiff+0x88>
 80137f8:	1b33      	subs	r3, r6, r4
 80137fa:	3b15      	subs	r3, #21
 80137fc:	f023 0303 	bic.w	r3, r3, #3
 8013800:	3415      	adds	r4, #21
 8013802:	3304      	adds	r3, #4
 8013804:	42a6      	cmp	r6, r4
 8013806:	bf38      	it	cc
 8013808:	2304      	movcc	r3, #4
 801380a:	441d      	add	r5, r3
 801380c:	445b      	add	r3, fp
 801380e:	461e      	mov	r6, r3
 8013810:	462c      	mov	r4, r5
 8013812:	4544      	cmp	r4, r8
 8013814:	d30e      	bcc.n	8013834 <__mdiff+0xf8>
 8013816:	f108 0103 	add.w	r1, r8, #3
 801381a:	1b49      	subs	r1, r1, r5
 801381c:	f021 0103 	bic.w	r1, r1, #3
 8013820:	3d03      	subs	r5, #3
 8013822:	45a8      	cmp	r8, r5
 8013824:	bf38      	it	cc
 8013826:	2100      	movcc	r1, #0
 8013828:	440b      	add	r3, r1
 801382a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801382e:	b191      	cbz	r1, 8013856 <__mdiff+0x11a>
 8013830:	6117      	str	r7, [r2, #16]
 8013832:	e79d      	b.n	8013770 <__mdiff+0x34>
 8013834:	f854 1b04 	ldr.w	r1, [r4], #4
 8013838:	46e6      	mov	lr, ip
 801383a:	0c08      	lsrs	r0, r1, #16
 801383c:	fa1c fc81 	uxtah	ip, ip, r1
 8013840:	4471      	add	r1, lr
 8013842:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013846:	b289      	uxth	r1, r1
 8013848:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801384c:	f846 1b04 	str.w	r1, [r6], #4
 8013850:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013854:	e7dd      	b.n	8013812 <__mdiff+0xd6>
 8013856:	3f01      	subs	r7, #1
 8013858:	e7e7      	b.n	801382a <__mdiff+0xee>
 801385a:	bf00      	nop
 801385c:	08016b04 	.word	0x08016b04
 8013860:	08016b15 	.word	0x08016b15

08013864 <__d2b>:
 8013864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013868:	460f      	mov	r7, r1
 801386a:	2101      	movs	r1, #1
 801386c:	ec59 8b10 	vmov	r8, r9, d0
 8013870:	4616      	mov	r6, r2
 8013872:	f7ff fccd 	bl	8013210 <_Balloc>
 8013876:	4604      	mov	r4, r0
 8013878:	b930      	cbnz	r0, 8013888 <__d2b+0x24>
 801387a:	4602      	mov	r2, r0
 801387c:	4b23      	ldr	r3, [pc, #140]	@ (801390c <__d2b+0xa8>)
 801387e:	4824      	ldr	r0, [pc, #144]	@ (8013910 <__d2b+0xac>)
 8013880:	f240 310f 	movw	r1, #783	@ 0x30f
 8013884:	f000 fa64 	bl	8013d50 <__assert_func>
 8013888:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801388c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013890:	b10d      	cbz	r5, 8013896 <__d2b+0x32>
 8013892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013896:	9301      	str	r3, [sp, #4]
 8013898:	f1b8 0300 	subs.w	r3, r8, #0
 801389c:	d023      	beq.n	80138e6 <__d2b+0x82>
 801389e:	4668      	mov	r0, sp
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	f7ff fd7c 	bl	801339e <__lo0bits>
 80138a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80138aa:	b1d0      	cbz	r0, 80138e2 <__d2b+0x7e>
 80138ac:	f1c0 0320 	rsb	r3, r0, #32
 80138b0:	fa02 f303 	lsl.w	r3, r2, r3
 80138b4:	430b      	orrs	r3, r1
 80138b6:	40c2      	lsrs	r2, r0
 80138b8:	6163      	str	r3, [r4, #20]
 80138ba:	9201      	str	r2, [sp, #4]
 80138bc:	9b01      	ldr	r3, [sp, #4]
 80138be:	61a3      	str	r3, [r4, #24]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	bf0c      	ite	eq
 80138c4:	2201      	moveq	r2, #1
 80138c6:	2202      	movne	r2, #2
 80138c8:	6122      	str	r2, [r4, #16]
 80138ca:	b1a5      	cbz	r5, 80138f6 <__d2b+0x92>
 80138cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80138d0:	4405      	add	r5, r0
 80138d2:	603d      	str	r5, [r7, #0]
 80138d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80138d8:	6030      	str	r0, [r6, #0]
 80138da:	4620      	mov	r0, r4
 80138dc:	b003      	add	sp, #12
 80138de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138e2:	6161      	str	r1, [r4, #20]
 80138e4:	e7ea      	b.n	80138bc <__d2b+0x58>
 80138e6:	a801      	add	r0, sp, #4
 80138e8:	f7ff fd59 	bl	801339e <__lo0bits>
 80138ec:	9b01      	ldr	r3, [sp, #4]
 80138ee:	6163      	str	r3, [r4, #20]
 80138f0:	3020      	adds	r0, #32
 80138f2:	2201      	movs	r2, #1
 80138f4:	e7e8      	b.n	80138c8 <__d2b+0x64>
 80138f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80138fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80138fe:	6038      	str	r0, [r7, #0]
 8013900:	6918      	ldr	r0, [r3, #16]
 8013902:	f7ff fd2d 	bl	8013360 <__hi0bits>
 8013906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801390a:	e7e5      	b.n	80138d8 <__d2b+0x74>
 801390c:	08016b04 	.word	0x08016b04
 8013910:	08016b15 	.word	0x08016b15

08013914 <__ssputs_r>:
 8013914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013918:	688e      	ldr	r6, [r1, #8]
 801391a:	461f      	mov	r7, r3
 801391c:	42be      	cmp	r6, r7
 801391e:	680b      	ldr	r3, [r1, #0]
 8013920:	4682      	mov	sl, r0
 8013922:	460c      	mov	r4, r1
 8013924:	4690      	mov	r8, r2
 8013926:	d82d      	bhi.n	8013984 <__ssputs_r+0x70>
 8013928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801392c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013930:	d026      	beq.n	8013980 <__ssputs_r+0x6c>
 8013932:	6965      	ldr	r5, [r4, #20]
 8013934:	6909      	ldr	r1, [r1, #16]
 8013936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801393a:	eba3 0901 	sub.w	r9, r3, r1
 801393e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013942:	1c7b      	adds	r3, r7, #1
 8013944:	444b      	add	r3, r9
 8013946:	106d      	asrs	r5, r5, #1
 8013948:	429d      	cmp	r5, r3
 801394a:	bf38      	it	cc
 801394c:	461d      	movcc	r5, r3
 801394e:	0553      	lsls	r3, r2, #21
 8013950:	d527      	bpl.n	80139a2 <__ssputs_r+0x8e>
 8013952:	4629      	mov	r1, r5
 8013954:	f7fd ffac 	bl	80118b0 <_malloc_r>
 8013958:	4606      	mov	r6, r0
 801395a:	b360      	cbz	r0, 80139b6 <__ssputs_r+0xa2>
 801395c:	6921      	ldr	r1, [r4, #16]
 801395e:	464a      	mov	r2, r9
 8013960:	f7fe fe1f 	bl	80125a2 <memcpy>
 8013964:	89a3      	ldrh	r3, [r4, #12]
 8013966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801396a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801396e:	81a3      	strh	r3, [r4, #12]
 8013970:	6126      	str	r6, [r4, #16]
 8013972:	6165      	str	r5, [r4, #20]
 8013974:	444e      	add	r6, r9
 8013976:	eba5 0509 	sub.w	r5, r5, r9
 801397a:	6026      	str	r6, [r4, #0]
 801397c:	60a5      	str	r5, [r4, #8]
 801397e:	463e      	mov	r6, r7
 8013980:	42be      	cmp	r6, r7
 8013982:	d900      	bls.n	8013986 <__ssputs_r+0x72>
 8013984:	463e      	mov	r6, r7
 8013986:	6820      	ldr	r0, [r4, #0]
 8013988:	4632      	mov	r2, r6
 801398a:	4641      	mov	r1, r8
 801398c:	f000 f9c6 	bl	8013d1c <memmove>
 8013990:	68a3      	ldr	r3, [r4, #8]
 8013992:	1b9b      	subs	r3, r3, r6
 8013994:	60a3      	str	r3, [r4, #8]
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	4433      	add	r3, r6
 801399a:	6023      	str	r3, [r4, #0]
 801399c:	2000      	movs	r0, #0
 801399e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a2:	462a      	mov	r2, r5
 80139a4:	f000 fa18 	bl	8013dd8 <_realloc_r>
 80139a8:	4606      	mov	r6, r0
 80139aa:	2800      	cmp	r0, #0
 80139ac:	d1e0      	bne.n	8013970 <__ssputs_r+0x5c>
 80139ae:	6921      	ldr	r1, [r4, #16]
 80139b0:	4650      	mov	r0, sl
 80139b2:	f7ff fbe3 	bl	801317c <_free_r>
 80139b6:	230c      	movs	r3, #12
 80139b8:	f8ca 3000 	str.w	r3, [sl]
 80139bc:	89a3      	ldrh	r3, [r4, #12]
 80139be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139c2:	81a3      	strh	r3, [r4, #12]
 80139c4:	f04f 30ff 	mov.w	r0, #4294967295
 80139c8:	e7e9      	b.n	801399e <__ssputs_r+0x8a>
	...

080139cc <_svfiprintf_r>:
 80139cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d0:	4698      	mov	r8, r3
 80139d2:	898b      	ldrh	r3, [r1, #12]
 80139d4:	061b      	lsls	r3, r3, #24
 80139d6:	b09d      	sub	sp, #116	@ 0x74
 80139d8:	4607      	mov	r7, r0
 80139da:	460d      	mov	r5, r1
 80139dc:	4614      	mov	r4, r2
 80139de:	d510      	bpl.n	8013a02 <_svfiprintf_r+0x36>
 80139e0:	690b      	ldr	r3, [r1, #16]
 80139e2:	b973      	cbnz	r3, 8013a02 <_svfiprintf_r+0x36>
 80139e4:	2140      	movs	r1, #64	@ 0x40
 80139e6:	f7fd ff63 	bl	80118b0 <_malloc_r>
 80139ea:	6028      	str	r0, [r5, #0]
 80139ec:	6128      	str	r0, [r5, #16]
 80139ee:	b930      	cbnz	r0, 80139fe <_svfiprintf_r+0x32>
 80139f0:	230c      	movs	r3, #12
 80139f2:	603b      	str	r3, [r7, #0]
 80139f4:	f04f 30ff 	mov.w	r0, #4294967295
 80139f8:	b01d      	add	sp, #116	@ 0x74
 80139fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139fe:	2340      	movs	r3, #64	@ 0x40
 8013a00:	616b      	str	r3, [r5, #20]
 8013a02:	2300      	movs	r3, #0
 8013a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a06:	2320      	movs	r3, #32
 8013a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a10:	2330      	movs	r3, #48	@ 0x30
 8013a12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013bb0 <_svfiprintf_r+0x1e4>
 8013a16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a1a:	f04f 0901 	mov.w	r9, #1
 8013a1e:	4623      	mov	r3, r4
 8013a20:	469a      	mov	sl, r3
 8013a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a26:	b10a      	cbz	r2, 8013a2c <_svfiprintf_r+0x60>
 8013a28:	2a25      	cmp	r2, #37	@ 0x25
 8013a2a:	d1f9      	bne.n	8013a20 <_svfiprintf_r+0x54>
 8013a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8013a30:	d00b      	beq.n	8013a4a <_svfiprintf_r+0x7e>
 8013a32:	465b      	mov	r3, fp
 8013a34:	4622      	mov	r2, r4
 8013a36:	4629      	mov	r1, r5
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f7ff ff6b 	bl	8013914 <__ssputs_r>
 8013a3e:	3001      	adds	r0, #1
 8013a40:	f000 80a7 	beq.w	8013b92 <_svfiprintf_r+0x1c6>
 8013a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a46:	445a      	add	r2, fp
 8013a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	f000 809f 	beq.w	8013b92 <_svfiprintf_r+0x1c6>
 8013a54:	2300      	movs	r3, #0
 8013a56:	f04f 32ff 	mov.w	r2, #4294967295
 8013a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a5e:	f10a 0a01 	add.w	sl, sl, #1
 8013a62:	9304      	str	r3, [sp, #16]
 8013a64:	9307      	str	r3, [sp, #28]
 8013a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013a6c:	4654      	mov	r4, sl
 8013a6e:	2205      	movs	r2, #5
 8013a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a74:	484e      	ldr	r0, [pc, #312]	@ (8013bb0 <_svfiprintf_r+0x1e4>)
 8013a76:	f7ec fc33 	bl	80002e0 <memchr>
 8013a7a:	9a04      	ldr	r2, [sp, #16]
 8013a7c:	b9d8      	cbnz	r0, 8013ab6 <_svfiprintf_r+0xea>
 8013a7e:	06d0      	lsls	r0, r2, #27
 8013a80:	bf44      	itt	mi
 8013a82:	2320      	movmi	r3, #32
 8013a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a88:	0711      	lsls	r1, r2, #28
 8013a8a:	bf44      	itt	mi
 8013a8c:	232b      	movmi	r3, #43	@ 0x2b
 8013a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a92:	f89a 3000 	ldrb.w	r3, [sl]
 8013a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a98:	d015      	beq.n	8013ac6 <_svfiprintf_r+0xfa>
 8013a9a:	9a07      	ldr	r2, [sp, #28]
 8013a9c:	4654      	mov	r4, sl
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	f04f 0c0a 	mov.w	ip, #10
 8013aa4:	4621      	mov	r1, r4
 8013aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013aaa:	3b30      	subs	r3, #48	@ 0x30
 8013aac:	2b09      	cmp	r3, #9
 8013aae:	d94b      	bls.n	8013b48 <_svfiprintf_r+0x17c>
 8013ab0:	b1b0      	cbz	r0, 8013ae0 <_svfiprintf_r+0x114>
 8013ab2:	9207      	str	r2, [sp, #28]
 8013ab4:	e014      	b.n	8013ae0 <_svfiprintf_r+0x114>
 8013ab6:	eba0 0308 	sub.w	r3, r0, r8
 8013aba:	fa09 f303 	lsl.w	r3, r9, r3
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	9304      	str	r3, [sp, #16]
 8013ac2:	46a2      	mov	sl, r4
 8013ac4:	e7d2      	b.n	8013a6c <_svfiprintf_r+0xa0>
 8013ac6:	9b03      	ldr	r3, [sp, #12]
 8013ac8:	1d19      	adds	r1, r3, #4
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	9103      	str	r1, [sp, #12]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	bfbb      	ittet	lt
 8013ad2:	425b      	neglt	r3, r3
 8013ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8013ad8:	9307      	strge	r3, [sp, #28]
 8013ada:	9307      	strlt	r3, [sp, #28]
 8013adc:	bfb8      	it	lt
 8013ade:	9204      	strlt	r2, [sp, #16]
 8013ae0:	7823      	ldrb	r3, [r4, #0]
 8013ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ae4:	d10a      	bne.n	8013afc <_svfiprintf_r+0x130>
 8013ae6:	7863      	ldrb	r3, [r4, #1]
 8013ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013aea:	d132      	bne.n	8013b52 <_svfiprintf_r+0x186>
 8013aec:	9b03      	ldr	r3, [sp, #12]
 8013aee:	1d1a      	adds	r2, r3, #4
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	9203      	str	r2, [sp, #12]
 8013af4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013af8:	3402      	adds	r4, #2
 8013afa:	9305      	str	r3, [sp, #20]
 8013afc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013bc0 <_svfiprintf_r+0x1f4>
 8013b00:	7821      	ldrb	r1, [r4, #0]
 8013b02:	2203      	movs	r2, #3
 8013b04:	4650      	mov	r0, sl
 8013b06:	f7ec fbeb 	bl	80002e0 <memchr>
 8013b0a:	b138      	cbz	r0, 8013b1c <_svfiprintf_r+0x150>
 8013b0c:	9b04      	ldr	r3, [sp, #16]
 8013b0e:	eba0 000a 	sub.w	r0, r0, sl
 8013b12:	2240      	movs	r2, #64	@ 0x40
 8013b14:	4082      	lsls	r2, r0
 8013b16:	4313      	orrs	r3, r2
 8013b18:	3401      	adds	r4, #1
 8013b1a:	9304      	str	r3, [sp, #16]
 8013b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b20:	4824      	ldr	r0, [pc, #144]	@ (8013bb4 <_svfiprintf_r+0x1e8>)
 8013b22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b26:	2206      	movs	r2, #6
 8013b28:	f7ec fbda 	bl	80002e0 <memchr>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d036      	beq.n	8013b9e <_svfiprintf_r+0x1d2>
 8013b30:	4b21      	ldr	r3, [pc, #132]	@ (8013bb8 <_svfiprintf_r+0x1ec>)
 8013b32:	bb1b      	cbnz	r3, 8013b7c <_svfiprintf_r+0x1b0>
 8013b34:	9b03      	ldr	r3, [sp, #12]
 8013b36:	3307      	adds	r3, #7
 8013b38:	f023 0307 	bic.w	r3, r3, #7
 8013b3c:	3308      	adds	r3, #8
 8013b3e:	9303      	str	r3, [sp, #12]
 8013b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b42:	4433      	add	r3, r6
 8013b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b46:	e76a      	b.n	8013a1e <_svfiprintf_r+0x52>
 8013b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b4c:	460c      	mov	r4, r1
 8013b4e:	2001      	movs	r0, #1
 8013b50:	e7a8      	b.n	8013aa4 <_svfiprintf_r+0xd8>
 8013b52:	2300      	movs	r3, #0
 8013b54:	3401      	adds	r4, #1
 8013b56:	9305      	str	r3, [sp, #20]
 8013b58:	4619      	mov	r1, r3
 8013b5a:	f04f 0c0a 	mov.w	ip, #10
 8013b5e:	4620      	mov	r0, r4
 8013b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b64:	3a30      	subs	r2, #48	@ 0x30
 8013b66:	2a09      	cmp	r2, #9
 8013b68:	d903      	bls.n	8013b72 <_svfiprintf_r+0x1a6>
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d0c6      	beq.n	8013afc <_svfiprintf_r+0x130>
 8013b6e:	9105      	str	r1, [sp, #20]
 8013b70:	e7c4      	b.n	8013afc <_svfiprintf_r+0x130>
 8013b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b76:	4604      	mov	r4, r0
 8013b78:	2301      	movs	r3, #1
 8013b7a:	e7f0      	b.n	8013b5e <_svfiprintf_r+0x192>
 8013b7c:	ab03      	add	r3, sp, #12
 8013b7e:	9300      	str	r3, [sp, #0]
 8013b80:	462a      	mov	r2, r5
 8013b82:	4b0e      	ldr	r3, [pc, #56]	@ (8013bbc <_svfiprintf_r+0x1f0>)
 8013b84:	a904      	add	r1, sp, #16
 8013b86:	4638      	mov	r0, r7
 8013b88:	f7fd ffae 	bl	8011ae8 <_printf_float>
 8013b8c:	1c42      	adds	r2, r0, #1
 8013b8e:	4606      	mov	r6, r0
 8013b90:	d1d6      	bne.n	8013b40 <_svfiprintf_r+0x174>
 8013b92:	89ab      	ldrh	r3, [r5, #12]
 8013b94:	065b      	lsls	r3, r3, #25
 8013b96:	f53f af2d 	bmi.w	80139f4 <_svfiprintf_r+0x28>
 8013b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b9c:	e72c      	b.n	80139f8 <_svfiprintf_r+0x2c>
 8013b9e:	ab03      	add	r3, sp, #12
 8013ba0:	9300      	str	r3, [sp, #0]
 8013ba2:	462a      	mov	r2, r5
 8013ba4:	4b05      	ldr	r3, [pc, #20]	@ (8013bbc <_svfiprintf_r+0x1f0>)
 8013ba6:	a904      	add	r1, sp, #16
 8013ba8:	4638      	mov	r0, r7
 8013baa:	f7fe fa25 	bl	8011ff8 <_printf_i>
 8013bae:	e7ed      	b.n	8013b8c <_svfiprintf_r+0x1c0>
 8013bb0:	08016c70 	.word	0x08016c70
 8013bb4:	08016c7a 	.word	0x08016c7a
 8013bb8:	08011ae9 	.word	0x08011ae9
 8013bbc:	08013915 	.word	0x08013915
 8013bc0:	08016c76 	.word	0x08016c76

08013bc4 <__sflush_r>:
 8013bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bcc:	0716      	lsls	r6, r2, #28
 8013bce:	4605      	mov	r5, r0
 8013bd0:	460c      	mov	r4, r1
 8013bd2:	d454      	bmi.n	8013c7e <__sflush_r+0xba>
 8013bd4:	684b      	ldr	r3, [r1, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	dc02      	bgt.n	8013be0 <__sflush_r+0x1c>
 8013bda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	dd48      	ble.n	8013c72 <__sflush_r+0xae>
 8013be0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013be2:	2e00      	cmp	r6, #0
 8013be4:	d045      	beq.n	8013c72 <__sflush_r+0xae>
 8013be6:	2300      	movs	r3, #0
 8013be8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013bec:	682f      	ldr	r7, [r5, #0]
 8013bee:	6a21      	ldr	r1, [r4, #32]
 8013bf0:	602b      	str	r3, [r5, #0]
 8013bf2:	d030      	beq.n	8013c56 <__sflush_r+0x92>
 8013bf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013bf6:	89a3      	ldrh	r3, [r4, #12]
 8013bf8:	0759      	lsls	r1, r3, #29
 8013bfa:	d505      	bpl.n	8013c08 <__sflush_r+0x44>
 8013bfc:	6863      	ldr	r3, [r4, #4]
 8013bfe:	1ad2      	subs	r2, r2, r3
 8013c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013c02:	b10b      	cbz	r3, 8013c08 <__sflush_r+0x44>
 8013c04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013c06:	1ad2      	subs	r2, r2, r3
 8013c08:	2300      	movs	r3, #0
 8013c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c0c:	6a21      	ldr	r1, [r4, #32]
 8013c0e:	4628      	mov	r0, r5
 8013c10:	47b0      	blx	r6
 8013c12:	1c43      	adds	r3, r0, #1
 8013c14:	89a3      	ldrh	r3, [r4, #12]
 8013c16:	d106      	bne.n	8013c26 <__sflush_r+0x62>
 8013c18:	6829      	ldr	r1, [r5, #0]
 8013c1a:	291d      	cmp	r1, #29
 8013c1c:	d82b      	bhi.n	8013c76 <__sflush_r+0xb2>
 8013c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8013cc8 <__sflush_r+0x104>)
 8013c20:	410a      	asrs	r2, r1
 8013c22:	07d6      	lsls	r6, r2, #31
 8013c24:	d427      	bmi.n	8013c76 <__sflush_r+0xb2>
 8013c26:	2200      	movs	r2, #0
 8013c28:	6062      	str	r2, [r4, #4]
 8013c2a:	04d9      	lsls	r1, r3, #19
 8013c2c:	6922      	ldr	r2, [r4, #16]
 8013c2e:	6022      	str	r2, [r4, #0]
 8013c30:	d504      	bpl.n	8013c3c <__sflush_r+0x78>
 8013c32:	1c42      	adds	r2, r0, #1
 8013c34:	d101      	bne.n	8013c3a <__sflush_r+0x76>
 8013c36:	682b      	ldr	r3, [r5, #0]
 8013c38:	b903      	cbnz	r3, 8013c3c <__sflush_r+0x78>
 8013c3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013c3e:	602f      	str	r7, [r5, #0]
 8013c40:	b1b9      	cbz	r1, 8013c72 <__sflush_r+0xae>
 8013c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013c46:	4299      	cmp	r1, r3
 8013c48:	d002      	beq.n	8013c50 <__sflush_r+0x8c>
 8013c4a:	4628      	mov	r0, r5
 8013c4c:	f7ff fa96 	bl	801317c <_free_r>
 8013c50:	2300      	movs	r3, #0
 8013c52:	6363      	str	r3, [r4, #52]	@ 0x34
 8013c54:	e00d      	b.n	8013c72 <__sflush_r+0xae>
 8013c56:	2301      	movs	r3, #1
 8013c58:	4628      	mov	r0, r5
 8013c5a:	47b0      	blx	r6
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	1c50      	adds	r0, r2, #1
 8013c60:	d1c9      	bne.n	8013bf6 <__sflush_r+0x32>
 8013c62:	682b      	ldr	r3, [r5, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d0c6      	beq.n	8013bf6 <__sflush_r+0x32>
 8013c68:	2b1d      	cmp	r3, #29
 8013c6a:	d001      	beq.n	8013c70 <__sflush_r+0xac>
 8013c6c:	2b16      	cmp	r3, #22
 8013c6e:	d11e      	bne.n	8013cae <__sflush_r+0xea>
 8013c70:	602f      	str	r7, [r5, #0]
 8013c72:	2000      	movs	r0, #0
 8013c74:	e022      	b.n	8013cbc <__sflush_r+0xf8>
 8013c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c7a:	b21b      	sxth	r3, r3
 8013c7c:	e01b      	b.n	8013cb6 <__sflush_r+0xf2>
 8013c7e:	690f      	ldr	r7, [r1, #16]
 8013c80:	2f00      	cmp	r7, #0
 8013c82:	d0f6      	beq.n	8013c72 <__sflush_r+0xae>
 8013c84:	0793      	lsls	r3, r2, #30
 8013c86:	680e      	ldr	r6, [r1, #0]
 8013c88:	bf08      	it	eq
 8013c8a:	694b      	ldreq	r3, [r1, #20]
 8013c8c:	600f      	str	r7, [r1, #0]
 8013c8e:	bf18      	it	ne
 8013c90:	2300      	movne	r3, #0
 8013c92:	eba6 0807 	sub.w	r8, r6, r7
 8013c96:	608b      	str	r3, [r1, #8]
 8013c98:	f1b8 0f00 	cmp.w	r8, #0
 8013c9c:	dde9      	ble.n	8013c72 <__sflush_r+0xae>
 8013c9e:	6a21      	ldr	r1, [r4, #32]
 8013ca0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013ca2:	4643      	mov	r3, r8
 8013ca4:	463a      	mov	r2, r7
 8013ca6:	4628      	mov	r0, r5
 8013ca8:	47b0      	blx	r6
 8013caa:	2800      	cmp	r0, #0
 8013cac:	dc08      	bgt.n	8013cc0 <__sflush_r+0xfc>
 8013cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cb6:	81a3      	strh	r3, [r4, #12]
 8013cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cc0:	4407      	add	r7, r0
 8013cc2:	eba8 0800 	sub.w	r8, r8, r0
 8013cc6:	e7e7      	b.n	8013c98 <__sflush_r+0xd4>
 8013cc8:	dfbffffe 	.word	0xdfbffffe

08013ccc <_fflush_r>:
 8013ccc:	b538      	push	{r3, r4, r5, lr}
 8013cce:	690b      	ldr	r3, [r1, #16]
 8013cd0:	4605      	mov	r5, r0
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	b913      	cbnz	r3, 8013cdc <_fflush_r+0x10>
 8013cd6:	2500      	movs	r5, #0
 8013cd8:	4628      	mov	r0, r5
 8013cda:	bd38      	pop	{r3, r4, r5, pc}
 8013cdc:	b118      	cbz	r0, 8013ce6 <_fflush_r+0x1a>
 8013cde:	6a03      	ldr	r3, [r0, #32]
 8013ce0:	b90b      	cbnz	r3, 8013ce6 <_fflush_r+0x1a>
 8013ce2:	f7fe fb35 	bl	8012350 <__sinit>
 8013ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d0f3      	beq.n	8013cd6 <_fflush_r+0xa>
 8013cee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013cf0:	07d0      	lsls	r0, r2, #31
 8013cf2:	d404      	bmi.n	8013cfe <_fflush_r+0x32>
 8013cf4:	0599      	lsls	r1, r3, #22
 8013cf6:	d402      	bmi.n	8013cfe <_fflush_r+0x32>
 8013cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013cfa:	f7fe fc50 	bl	801259e <__retarget_lock_acquire_recursive>
 8013cfe:	4628      	mov	r0, r5
 8013d00:	4621      	mov	r1, r4
 8013d02:	f7ff ff5f 	bl	8013bc4 <__sflush_r>
 8013d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d08:	07da      	lsls	r2, r3, #31
 8013d0a:	4605      	mov	r5, r0
 8013d0c:	d4e4      	bmi.n	8013cd8 <_fflush_r+0xc>
 8013d0e:	89a3      	ldrh	r3, [r4, #12]
 8013d10:	059b      	lsls	r3, r3, #22
 8013d12:	d4e1      	bmi.n	8013cd8 <_fflush_r+0xc>
 8013d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d16:	f7fe fc43 	bl	80125a0 <__retarget_lock_release_recursive>
 8013d1a:	e7dd      	b.n	8013cd8 <_fflush_r+0xc>

08013d1c <memmove>:
 8013d1c:	4288      	cmp	r0, r1
 8013d1e:	b510      	push	{r4, lr}
 8013d20:	eb01 0402 	add.w	r4, r1, r2
 8013d24:	d902      	bls.n	8013d2c <memmove+0x10>
 8013d26:	4284      	cmp	r4, r0
 8013d28:	4623      	mov	r3, r4
 8013d2a:	d807      	bhi.n	8013d3c <memmove+0x20>
 8013d2c:	1e43      	subs	r3, r0, #1
 8013d2e:	42a1      	cmp	r1, r4
 8013d30:	d008      	beq.n	8013d44 <memmove+0x28>
 8013d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d3a:	e7f8      	b.n	8013d2e <memmove+0x12>
 8013d3c:	4402      	add	r2, r0
 8013d3e:	4601      	mov	r1, r0
 8013d40:	428a      	cmp	r2, r1
 8013d42:	d100      	bne.n	8013d46 <memmove+0x2a>
 8013d44:	bd10      	pop	{r4, pc}
 8013d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d4e:	e7f7      	b.n	8013d40 <memmove+0x24>

08013d50 <__assert_func>:
 8013d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013d52:	4614      	mov	r4, r2
 8013d54:	461a      	mov	r2, r3
 8013d56:	4b09      	ldr	r3, [pc, #36]	@ (8013d7c <__assert_func+0x2c>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	4605      	mov	r5, r0
 8013d5c:	68d8      	ldr	r0, [r3, #12]
 8013d5e:	b954      	cbnz	r4, 8013d76 <__assert_func+0x26>
 8013d60:	4b07      	ldr	r3, [pc, #28]	@ (8013d80 <__assert_func+0x30>)
 8013d62:	461c      	mov	r4, r3
 8013d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013d68:	9100      	str	r1, [sp, #0]
 8013d6a:	462b      	mov	r3, r5
 8013d6c:	4905      	ldr	r1, [pc, #20]	@ (8013d84 <__assert_func+0x34>)
 8013d6e:	f000 f86f 	bl	8013e50 <fiprintf>
 8013d72:	f000 f87f 	bl	8013e74 <abort>
 8013d76:	4b04      	ldr	r3, [pc, #16]	@ (8013d88 <__assert_func+0x38>)
 8013d78:	e7f4      	b.n	8013d64 <__assert_func+0x14>
 8013d7a:	bf00      	nop
 8013d7c:	24000138 	.word	0x24000138
 8013d80:	08016cc6 	.word	0x08016cc6
 8013d84:	08016c98 	.word	0x08016c98
 8013d88:	08016c8b 	.word	0x08016c8b

08013d8c <_calloc_r>:
 8013d8c:	b570      	push	{r4, r5, r6, lr}
 8013d8e:	fba1 5402 	umull	r5, r4, r1, r2
 8013d92:	b93c      	cbnz	r4, 8013da4 <_calloc_r+0x18>
 8013d94:	4629      	mov	r1, r5
 8013d96:	f7fd fd8b 	bl	80118b0 <_malloc_r>
 8013d9a:	4606      	mov	r6, r0
 8013d9c:	b928      	cbnz	r0, 8013daa <_calloc_r+0x1e>
 8013d9e:	2600      	movs	r6, #0
 8013da0:	4630      	mov	r0, r6
 8013da2:	bd70      	pop	{r4, r5, r6, pc}
 8013da4:	220c      	movs	r2, #12
 8013da6:	6002      	str	r2, [r0, #0]
 8013da8:	e7f9      	b.n	8013d9e <_calloc_r+0x12>
 8013daa:	462a      	mov	r2, r5
 8013dac:	4621      	mov	r1, r4
 8013dae:	f7fe fb68 	bl	8012482 <memset>
 8013db2:	e7f5      	b.n	8013da0 <_calloc_r+0x14>

08013db4 <__ascii_mbtowc>:
 8013db4:	b082      	sub	sp, #8
 8013db6:	b901      	cbnz	r1, 8013dba <__ascii_mbtowc+0x6>
 8013db8:	a901      	add	r1, sp, #4
 8013dba:	b142      	cbz	r2, 8013dce <__ascii_mbtowc+0x1a>
 8013dbc:	b14b      	cbz	r3, 8013dd2 <__ascii_mbtowc+0x1e>
 8013dbe:	7813      	ldrb	r3, [r2, #0]
 8013dc0:	600b      	str	r3, [r1, #0]
 8013dc2:	7812      	ldrb	r2, [r2, #0]
 8013dc4:	1e10      	subs	r0, r2, #0
 8013dc6:	bf18      	it	ne
 8013dc8:	2001      	movne	r0, #1
 8013dca:	b002      	add	sp, #8
 8013dcc:	4770      	bx	lr
 8013dce:	4610      	mov	r0, r2
 8013dd0:	e7fb      	b.n	8013dca <__ascii_mbtowc+0x16>
 8013dd2:	f06f 0001 	mvn.w	r0, #1
 8013dd6:	e7f8      	b.n	8013dca <__ascii_mbtowc+0x16>

08013dd8 <_realloc_r>:
 8013dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ddc:	4680      	mov	r8, r0
 8013dde:	4615      	mov	r5, r2
 8013de0:	460c      	mov	r4, r1
 8013de2:	b921      	cbnz	r1, 8013dee <_realloc_r+0x16>
 8013de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013de8:	4611      	mov	r1, r2
 8013dea:	f7fd bd61 	b.w	80118b0 <_malloc_r>
 8013dee:	b92a      	cbnz	r2, 8013dfc <_realloc_r+0x24>
 8013df0:	f7ff f9c4 	bl	801317c <_free_r>
 8013df4:	2400      	movs	r4, #0
 8013df6:	4620      	mov	r0, r4
 8013df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dfc:	f000 f841 	bl	8013e82 <_malloc_usable_size_r>
 8013e00:	4285      	cmp	r5, r0
 8013e02:	4606      	mov	r6, r0
 8013e04:	d802      	bhi.n	8013e0c <_realloc_r+0x34>
 8013e06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013e0a:	d8f4      	bhi.n	8013df6 <_realloc_r+0x1e>
 8013e0c:	4629      	mov	r1, r5
 8013e0e:	4640      	mov	r0, r8
 8013e10:	f7fd fd4e 	bl	80118b0 <_malloc_r>
 8013e14:	4607      	mov	r7, r0
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d0ec      	beq.n	8013df4 <_realloc_r+0x1c>
 8013e1a:	42b5      	cmp	r5, r6
 8013e1c:	462a      	mov	r2, r5
 8013e1e:	4621      	mov	r1, r4
 8013e20:	bf28      	it	cs
 8013e22:	4632      	movcs	r2, r6
 8013e24:	f7fe fbbd 	bl	80125a2 <memcpy>
 8013e28:	4621      	mov	r1, r4
 8013e2a:	4640      	mov	r0, r8
 8013e2c:	f7ff f9a6 	bl	801317c <_free_r>
 8013e30:	463c      	mov	r4, r7
 8013e32:	e7e0      	b.n	8013df6 <_realloc_r+0x1e>

08013e34 <__ascii_wctomb>:
 8013e34:	4603      	mov	r3, r0
 8013e36:	4608      	mov	r0, r1
 8013e38:	b141      	cbz	r1, 8013e4c <__ascii_wctomb+0x18>
 8013e3a:	2aff      	cmp	r2, #255	@ 0xff
 8013e3c:	d904      	bls.n	8013e48 <__ascii_wctomb+0x14>
 8013e3e:	228a      	movs	r2, #138	@ 0x8a
 8013e40:	601a      	str	r2, [r3, #0]
 8013e42:	f04f 30ff 	mov.w	r0, #4294967295
 8013e46:	4770      	bx	lr
 8013e48:	700a      	strb	r2, [r1, #0]
 8013e4a:	2001      	movs	r0, #1
 8013e4c:	4770      	bx	lr
	...

08013e50 <fiprintf>:
 8013e50:	b40e      	push	{r1, r2, r3}
 8013e52:	b503      	push	{r0, r1, lr}
 8013e54:	4601      	mov	r1, r0
 8013e56:	ab03      	add	r3, sp, #12
 8013e58:	4805      	ldr	r0, [pc, #20]	@ (8013e70 <fiprintf+0x20>)
 8013e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e5e:	6800      	ldr	r0, [r0, #0]
 8013e60:	9301      	str	r3, [sp, #4]
 8013e62:	f000 f83f 	bl	8013ee4 <_vfiprintf_r>
 8013e66:	b002      	add	sp, #8
 8013e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e6c:	b003      	add	sp, #12
 8013e6e:	4770      	bx	lr
 8013e70:	24000138 	.word	0x24000138

08013e74 <abort>:
 8013e74:	b508      	push	{r3, lr}
 8013e76:	2006      	movs	r0, #6
 8013e78:	f000 fa08 	bl	801428c <raise>
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	f7ed fa4b 	bl	8001318 <_exit>

08013e82 <_malloc_usable_size_r>:
 8013e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e86:	1f18      	subs	r0, r3, #4
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	bfbc      	itt	lt
 8013e8c:	580b      	ldrlt	r3, [r1, r0]
 8013e8e:	18c0      	addlt	r0, r0, r3
 8013e90:	4770      	bx	lr

08013e92 <__sfputc_r>:
 8013e92:	6893      	ldr	r3, [r2, #8]
 8013e94:	3b01      	subs	r3, #1
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	b410      	push	{r4}
 8013e9a:	6093      	str	r3, [r2, #8]
 8013e9c:	da08      	bge.n	8013eb0 <__sfputc_r+0x1e>
 8013e9e:	6994      	ldr	r4, [r2, #24]
 8013ea0:	42a3      	cmp	r3, r4
 8013ea2:	db01      	blt.n	8013ea8 <__sfputc_r+0x16>
 8013ea4:	290a      	cmp	r1, #10
 8013ea6:	d103      	bne.n	8013eb0 <__sfputc_r+0x1e>
 8013ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eac:	f000 b932 	b.w	8014114 <__swbuf_r>
 8013eb0:	6813      	ldr	r3, [r2, #0]
 8013eb2:	1c58      	adds	r0, r3, #1
 8013eb4:	6010      	str	r0, [r2, #0]
 8013eb6:	7019      	strb	r1, [r3, #0]
 8013eb8:	4608      	mov	r0, r1
 8013eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ebe:	4770      	bx	lr

08013ec0 <__sfputs_r>:
 8013ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	460f      	mov	r7, r1
 8013ec6:	4614      	mov	r4, r2
 8013ec8:	18d5      	adds	r5, r2, r3
 8013eca:	42ac      	cmp	r4, r5
 8013ecc:	d101      	bne.n	8013ed2 <__sfputs_r+0x12>
 8013ece:	2000      	movs	r0, #0
 8013ed0:	e007      	b.n	8013ee2 <__sfputs_r+0x22>
 8013ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ed6:	463a      	mov	r2, r7
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f7ff ffda 	bl	8013e92 <__sfputc_r>
 8013ede:	1c43      	adds	r3, r0, #1
 8013ee0:	d1f3      	bne.n	8013eca <__sfputs_r+0xa>
 8013ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ee4 <_vfiprintf_r>:
 8013ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee8:	460d      	mov	r5, r1
 8013eea:	b09d      	sub	sp, #116	@ 0x74
 8013eec:	4614      	mov	r4, r2
 8013eee:	4698      	mov	r8, r3
 8013ef0:	4606      	mov	r6, r0
 8013ef2:	b118      	cbz	r0, 8013efc <_vfiprintf_r+0x18>
 8013ef4:	6a03      	ldr	r3, [r0, #32]
 8013ef6:	b90b      	cbnz	r3, 8013efc <_vfiprintf_r+0x18>
 8013ef8:	f7fe fa2a 	bl	8012350 <__sinit>
 8013efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013efe:	07d9      	lsls	r1, r3, #31
 8013f00:	d405      	bmi.n	8013f0e <_vfiprintf_r+0x2a>
 8013f02:	89ab      	ldrh	r3, [r5, #12]
 8013f04:	059a      	lsls	r2, r3, #22
 8013f06:	d402      	bmi.n	8013f0e <_vfiprintf_r+0x2a>
 8013f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f0a:	f7fe fb48 	bl	801259e <__retarget_lock_acquire_recursive>
 8013f0e:	89ab      	ldrh	r3, [r5, #12]
 8013f10:	071b      	lsls	r3, r3, #28
 8013f12:	d501      	bpl.n	8013f18 <_vfiprintf_r+0x34>
 8013f14:	692b      	ldr	r3, [r5, #16]
 8013f16:	b99b      	cbnz	r3, 8013f40 <_vfiprintf_r+0x5c>
 8013f18:	4629      	mov	r1, r5
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f000 f938 	bl	8014190 <__swsetup_r>
 8013f20:	b170      	cbz	r0, 8013f40 <_vfiprintf_r+0x5c>
 8013f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f24:	07dc      	lsls	r4, r3, #31
 8013f26:	d504      	bpl.n	8013f32 <_vfiprintf_r+0x4e>
 8013f28:	f04f 30ff 	mov.w	r0, #4294967295
 8013f2c:	b01d      	add	sp, #116	@ 0x74
 8013f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f32:	89ab      	ldrh	r3, [r5, #12]
 8013f34:	0598      	lsls	r0, r3, #22
 8013f36:	d4f7      	bmi.n	8013f28 <_vfiprintf_r+0x44>
 8013f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f3a:	f7fe fb31 	bl	80125a0 <__retarget_lock_release_recursive>
 8013f3e:	e7f3      	b.n	8013f28 <_vfiprintf_r+0x44>
 8013f40:	2300      	movs	r3, #0
 8013f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f44:	2320      	movs	r3, #32
 8013f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f4e:	2330      	movs	r3, #48	@ 0x30
 8013f50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014100 <_vfiprintf_r+0x21c>
 8013f54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f58:	f04f 0901 	mov.w	r9, #1
 8013f5c:	4623      	mov	r3, r4
 8013f5e:	469a      	mov	sl, r3
 8013f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f64:	b10a      	cbz	r2, 8013f6a <_vfiprintf_r+0x86>
 8013f66:	2a25      	cmp	r2, #37	@ 0x25
 8013f68:	d1f9      	bne.n	8013f5e <_vfiprintf_r+0x7a>
 8013f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8013f6e:	d00b      	beq.n	8013f88 <_vfiprintf_r+0xa4>
 8013f70:	465b      	mov	r3, fp
 8013f72:	4622      	mov	r2, r4
 8013f74:	4629      	mov	r1, r5
 8013f76:	4630      	mov	r0, r6
 8013f78:	f7ff ffa2 	bl	8013ec0 <__sfputs_r>
 8013f7c:	3001      	adds	r0, #1
 8013f7e:	f000 80a7 	beq.w	80140d0 <_vfiprintf_r+0x1ec>
 8013f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f84:	445a      	add	r2, fp
 8013f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f88:	f89a 3000 	ldrb.w	r3, [sl]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	f000 809f 	beq.w	80140d0 <_vfiprintf_r+0x1ec>
 8013f92:	2300      	movs	r3, #0
 8013f94:	f04f 32ff 	mov.w	r2, #4294967295
 8013f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f9c:	f10a 0a01 	add.w	sl, sl, #1
 8013fa0:	9304      	str	r3, [sp, #16]
 8013fa2:	9307      	str	r3, [sp, #28]
 8013fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8013faa:	4654      	mov	r4, sl
 8013fac:	2205      	movs	r2, #5
 8013fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fb2:	4853      	ldr	r0, [pc, #332]	@ (8014100 <_vfiprintf_r+0x21c>)
 8013fb4:	f7ec f994 	bl	80002e0 <memchr>
 8013fb8:	9a04      	ldr	r2, [sp, #16]
 8013fba:	b9d8      	cbnz	r0, 8013ff4 <_vfiprintf_r+0x110>
 8013fbc:	06d1      	lsls	r1, r2, #27
 8013fbe:	bf44      	itt	mi
 8013fc0:	2320      	movmi	r3, #32
 8013fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fc6:	0713      	lsls	r3, r2, #28
 8013fc8:	bf44      	itt	mi
 8013fca:	232b      	movmi	r3, #43	@ 0x2b
 8013fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8013fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fd6:	d015      	beq.n	8014004 <_vfiprintf_r+0x120>
 8013fd8:	9a07      	ldr	r2, [sp, #28]
 8013fda:	4654      	mov	r4, sl
 8013fdc:	2000      	movs	r0, #0
 8013fde:	f04f 0c0a 	mov.w	ip, #10
 8013fe2:	4621      	mov	r1, r4
 8013fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fe8:	3b30      	subs	r3, #48	@ 0x30
 8013fea:	2b09      	cmp	r3, #9
 8013fec:	d94b      	bls.n	8014086 <_vfiprintf_r+0x1a2>
 8013fee:	b1b0      	cbz	r0, 801401e <_vfiprintf_r+0x13a>
 8013ff0:	9207      	str	r2, [sp, #28]
 8013ff2:	e014      	b.n	801401e <_vfiprintf_r+0x13a>
 8013ff4:	eba0 0308 	sub.w	r3, r0, r8
 8013ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8013ffc:	4313      	orrs	r3, r2
 8013ffe:	9304      	str	r3, [sp, #16]
 8014000:	46a2      	mov	sl, r4
 8014002:	e7d2      	b.n	8013faa <_vfiprintf_r+0xc6>
 8014004:	9b03      	ldr	r3, [sp, #12]
 8014006:	1d19      	adds	r1, r3, #4
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	9103      	str	r1, [sp, #12]
 801400c:	2b00      	cmp	r3, #0
 801400e:	bfbb      	ittet	lt
 8014010:	425b      	neglt	r3, r3
 8014012:	f042 0202 	orrlt.w	r2, r2, #2
 8014016:	9307      	strge	r3, [sp, #28]
 8014018:	9307      	strlt	r3, [sp, #28]
 801401a:	bfb8      	it	lt
 801401c:	9204      	strlt	r2, [sp, #16]
 801401e:	7823      	ldrb	r3, [r4, #0]
 8014020:	2b2e      	cmp	r3, #46	@ 0x2e
 8014022:	d10a      	bne.n	801403a <_vfiprintf_r+0x156>
 8014024:	7863      	ldrb	r3, [r4, #1]
 8014026:	2b2a      	cmp	r3, #42	@ 0x2a
 8014028:	d132      	bne.n	8014090 <_vfiprintf_r+0x1ac>
 801402a:	9b03      	ldr	r3, [sp, #12]
 801402c:	1d1a      	adds	r2, r3, #4
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	9203      	str	r2, [sp, #12]
 8014032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014036:	3402      	adds	r4, #2
 8014038:	9305      	str	r3, [sp, #20]
 801403a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014110 <_vfiprintf_r+0x22c>
 801403e:	7821      	ldrb	r1, [r4, #0]
 8014040:	2203      	movs	r2, #3
 8014042:	4650      	mov	r0, sl
 8014044:	f7ec f94c 	bl	80002e0 <memchr>
 8014048:	b138      	cbz	r0, 801405a <_vfiprintf_r+0x176>
 801404a:	9b04      	ldr	r3, [sp, #16]
 801404c:	eba0 000a 	sub.w	r0, r0, sl
 8014050:	2240      	movs	r2, #64	@ 0x40
 8014052:	4082      	lsls	r2, r0
 8014054:	4313      	orrs	r3, r2
 8014056:	3401      	adds	r4, #1
 8014058:	9304      	str	r3, [sp, #16]
 801405a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801405e:	4829      	ldr	r0, [pc, #164]	@ (8014104 <_vfiprintf_r+0x220>)
 8014060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014064:	2206      	movs	r2, #6
 8014066:	f7ec f93b 	bl	80002e0 <memchr>
 801406a:	2800      	cmp	r0, #0
 801406c:	d03f      	beq.n	80140ee <_vfiprintf_r+0x20a>
 801406e:	4b26      	ldr	r3, [pc, #152]	@ (8014108 <_vfiprintf_r+0x224>)
 8014070:	bb1b      	cbnz	r3, 80140ba <_vfiprintf_r+0x1d6>
 8014072:	9b03      	ldr	r3, [sp, #12]
 8014074:	3307      	adds	r3, #7
 8014076:	f023 0307 	bic.w	r3, r3, #7
 801407a:	3308      	adds	r3, #8
 801407c:	9303      	str	r3, [sp, #12]
 801407e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014080:	443b      	add	r3, r7
 8014082:	9309      	str	r3, [sp, #36]	@ 0x24
 8014084:	e76a      	b.n	8013f5c <_vfiprintf_r+0x78>
 8014086:	fb0c 3202 	mla	r2, ip, r2, r3
 801408a:	460c      	mov	r4, r1
 801408c:	2001      	movs	r0, #1
 801408e:	e7a8      	b.n	8013fe2 <_vfiprintf_r+0xfe>
 8014090:	2300      	movs	r3, #0
 8014092:	3401      	adds	r4, #1
 8014094:	9305      	str	r3, [sp, #20]
 8014096:	4619      	mov	r1, r3
 8014098:	f04f 0c0a 	mov.w	ip, #10
 801409c:	4620      	mov	r0, r4
 801409e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140a2:	3a30      	subs	r2, #48	@ 0x30
 80140a4:	2a09      	cmp	r2, #9
 80140a6:	d903      	bls.n	80140b0 <_vfiprintf_r+0x1cc>
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d0c6      	beq.n	801403a <_vfiprintf_r+0x156>
 80140ac:	9105      	str	r1, [sp, #20]
 80140ae:	e7c4      	b.n	801403a <_vfiprintf_r+0x156>
 80140b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80140b4:	4604      	mov	r4, r0
 80140b6:	2301      	movs	r3, #1
 80140b8:	e7f0      	b.n	801409c <_vfiprintf_r+0x1b8>
 80140ba:	ab03      	add	r3, sp, #12
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	462a      	mov	r2, r5
 80140c0:	4b12      	ldr	r3, [pc, #72]	@ (801410c <_vfiprintf_r+0x228>)
 80140c2:	a904      	add	r1, sp, #16
 80140c4:	4630      	mov	r0, r6
 80140c6:	f7fd fd0f 	bl	8011ae8 <_printf_float>
 80140ca:	4607      	mov	r7, r0
 80140cc:	1c78      	adds	r0, r7, #1
 80140ce:	d1d6      	bne.n	801407e <_vfiprintf_r+0x19a>
 80140d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80140d2:	07d9      	lsls	r1, r3, #31
 80140d4:	d405      	bmi.n	80140e2 <_vfiprintf_r+0x1fe>
 80140d6:	89ab      	ldrh	r3, [r5, #12]
 80140d8:	059a      	lsls	r2, r3, #22
 80140da:	d402      	bmi.n	80140e2 <_vfiprintf_r+0x1fe>
 80140dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80140de:	f7fe fa5f 	bl	80125a0 <__retarget_lock_release_recursive>
 80140e2:	89ab      	ldrh	r3, [r5, #12]
 80140e4:	065b      	lsls	r3, r3, #25
 80140e6:	f53f af1f 	bmi.w	8013f28 <_vfiprintf_r+0x44>
 80140ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140ec:	e71e      	b.n	8013f2c <_vfiprintf_r+0x48>
 80140ee:	ab03      	add	r3, sp, #12
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	462a      	mov	r2, r5
 80140f4:	4b05      	ldr	r3, [pc, #20]	@ (801410c <_vfiprintf_r+0x228>)
 80140f6:	a904      	add	r1, sp, #16
 80140f8:	4630      	mov	r0, r6
 80140fa:	f7fd ff7d 	bl	8011ff8 <_printf_i>
 80140fe:	e7e4      	b.n	80140ca <_vfiprintf_r+0x1e6>
 8014100:	08016c70 	.word	0x08016c70
 8014104:	08016c7a 	.word	0x08016c7a
 8014108:	08011ae9 	.word	0x08011ae9
 801410c:	08013ec1 	.word	0x08013ec1
 8014110:	08016c76 	.word	0x08016c76

08014114 <__swbuf_r>:
 8014114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014116:	460e      	mov	r6, r1
 8014118:	4614      	mov	r4, r2
 801411a:	4605      	mov	r5, r0
 801411c:	b118      	cbz	r0, 8014126 <__swbuf_r+0x12>
 801411e:	6a03      	ldr	r3, [r0, #32]
 8014120:	b90b      	cbnz	r3, 8014126 <__swbuf_r+0x12>
 8014122:	f7fe f915 	bl	8012350 <__sinit>
 8014126:	69a3      	ldr	r3, [r4, #24]
 8014128:	60a3      	str	r3, [r4, #8]
 801412a:	89a3      	ldrh	r3, [r4, #12]
 801412c:	071a      	lsls	r2, r3, #28
 801412e:	d501      	bpl.n	8014134 <__swbuf_r+0x20>
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	b943      	cbnz	r3, 8014146 <__swbuf_r+0x32>
 8014134:	4621      	mov	r1, r4
 8014136:	4628      	mov	r0, r5
 8014138:	f000 f82a 	bl	8014190 <__swsetup_r>
 801413c:	b118      	cbz	r0, 8014146 <__swbuf_r+0x32>
 801413e:	f04f 37ff 	mov.w	r7, #4294967295
 8014142:	4638      	mov	r0, r7
 8014144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014146:	6823      	ldr	r3, [r4, #0]
 8014148:	6922      	ldr	r2, [r4, #16]
 801414a:	1a98      	subs	r0, r3, r2
 801414c:	6963      	ldr	r3, [r4, #20]
 801414e:	b2f6      	uxtb	r6, r6
 8014150:	4283      	cmp	r3, r0
 8014152:	4637      	mov	r7, r6
 8014154:	dc05      	bgt.n	8014162 <__swbuf_r+0x4e>
 8014156:	4621      	mov	r1, r4
 8014158:	4628      	mov	r0, r5
 801415a:	f7ff fdb7 	bl	8013ccc <_fflush_r>
 801415e:	2800      	cmp	r0, #0
 8014160:	d1ed      	bne.n	801413e <__swbuf_r+0x2a>
 8014162:	68a3      	ldr	r3, [r4, #8]
 8014164:	3b01      	subs	r3, #1
 8014166:	60a3      	str	r3, [r4, #8]
 8014168:	6823      	ldr	r3, [r4, #0]
 801416a:	1c5a      	adds	r2, r3, #1
 801416c:	6022      	str	r2, [r4, #0]
 801416e:	701e      	strb	r6, [r3, #0]
 8014170:	6962      	ldr	r2, [r4, #20]
 8014172:	1c43      	adds	r3, r0, #1
 8014174:	429a      	cmp	r2, r3
 8014176:	d004      	beq.n	8014182 <__swbuf_r+0x6e>
 8014178:	89a3      	ldrh	r3, [r4, #12]
 801417a:	07db      	lsls	r3, r3, #31
 801417c:	d5e1      	bpl.n	8014142 <__swbuf_r+0x2e>
 801417e:	2e0a      	cmp	r6, #10
 8014180:	d1df      	bne.n	8014142 <__swbuf_r+0x2e>
 8014182:	4621      	mov	r1, r4
 8014184:	4628      	mov	r0, r5
 8014186:	f7ff fda1 	bl	8013ccc <_fflush_r>
 801418a:	2800      	cmp	r0, #0
 801418c:	d0d9      	beq.n	8014142 <__swbuf_r+0x2e>
 801418e:	e7d6      	b.n	801413e <__swbuf_r+0x2a>

08014190 <__swsetup_r>:
 8014190:	b538      	push	{r3, r4, r5, lr}
 8014192:	4b29      	ldr	r3, [pc, #164]	@ (8014238 <__swsetup_r+0xa8>)
 8014194:	4605      	mov	r5, r0
 8014196:	6818      	ldr	r0, [r3, #0]
 8014198:	460c      	mov	r4, r1
 801419a:	b118      	cbz	r0, 80141a4 <__swsetup_r+0x14>
 801419c:	6a03      	ldr	r3, [r0, #32]
 801419e:	b90b      	cbnz	r3, 80141a4 <__swsetup_r+0x14>
 80141a0:	f7fe f8d6 	bl	8012350 <__sinit>
 80141a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141a8:	0719      	lsls	r1, r3, #28
 80141aa:	d422      	bmi.n	80141f2 <__swsetup_r+0x62>
 80141ac:	06da      	lsls	r2, r3, #27
 80141ae:	d407      	bmi.n	80141c0 <__swsetup_r+0x30>
 80141b0:	2209      	movs	r2, #9
 80141b2:	602a      	str	r2, [r5, #0]
 80141b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141b8:	81a3      	strh	r3, [r4, #12]
 80141ba:	f04f 30ff 	mov.w	r0, #4294967295
 80141be:	e033      	b.n	8014228 <__swsetup_r+0x98>
 80141c0:	0758      	lsls	r0, r3, #29
 80141c2:	d512      	bpl.n	80141ea <__swsetup_r+0x5a>
 80141c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80141c6:	b141      	cbz	r1, 80141da <__swsetup_r+0x4a>
 80141c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80141cc:	4299      	cmp	r1, r3
 80141ce:	d002      	beq.n	80141d6 <__swsetup_r+0x46>
 80141d0:	4628      	mov	r0, r5
 80141d2:	f7fe ffd3 	bl	801317c <_free_r>
 80141d6:	2300      	movs	r3, #0
 80141d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80141da:	89a3      	ldrh	r3, [r4, #12]
 80141dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80141e0:	81a3      	strh	r3, [r4, #12]
 80141e2:	2300      	movs	r3, #0
 80141e4:	6063      	str	r3, [r4, #4]
 80141e6:	6923      	ldr	r3, [r4, #16]
 80141e8:	6023      	str	r3, [r4, #0]
 80141ea:	89a3      	ldrh	r3, [r4, #12]
 80141ec:	f043 0308 	orr.w	r3, r3, #8
 80141f0:	81a3      	strh	r3, [r4, #12]
 80141f2:	6923      	ldr	r3, [r4, #16]
 80141f4:	b94b      	cbnz	r3, 801420a <__swsetup_r+0x7a>
 80141f6:	89a3      	ldrh	r3, [r4, #12]
 80141f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80141fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014200:	d003      	beq.n	801420a <__swsetup_r+0x7a>
 8014202:	4621      	mov	r1, r4
 8014204:	4628      	mov	r0, r5
 8014206:	f000 f883 	bl	8014310 <__smakebuf_r>
 801420a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801420e:	f013 0201 	ands.w	r2, r3, #1
 8014212:	d00a      	beq.n	801422a <__swsetup_r+0x9a>
 8014214:	2200      	movs	r2, #0
 8014216:	60a2      	str	r2, [r4, #8]
 8014218:	6962      	ldr	r2, [r4, #20]
 801421a:	4252      	negs	r2, r2
 801421c:	61a2      	str	r2, [r4, #24]
 801421e:	6922      	ldr	r2, [r4, #16]
 8014220:	b942      	cbnz	r2, 8014234 <__swsetup_r+0xa4>
 8014222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014226:	d1c5      	bne.n	80141b4 <__swsetup_r+0x24>
 8014228:	bd38      	pop	{r3, r4, r5, pc}
 801422a:	0799      	lsls	r1, r3, #30
 801422c:	bf58      	it	pl
 801422e:	6962      	ldrpl	r2, [r4, #20]
 8014230:	60a2      	str	r2, [r4, #8]
 8014232:	e7f4      	b.n	801421e <__swsetup_r+0x8e>
 8014234:	2000      	movs	r0, #0
 8014236:	e7f7      	b.n	8014228 <__swsetup_r+0x98>
 8014238:	24000138 	.word	0x24000138

0801423c <_raise_r>:
 801423c:	291f      	cmp	r1, #31
 801423e:	b538      	push	{r3, r4, r5, lr}
 8014240:	4605      	mov	r5, r0
 8014242:	460c      	mov	r4, r1
 8014244:	d904      	bls.n	8014250 <_raise_r+0x14>
 8014246:	2316      	movs	r3, #22
 8014248:	6003      	str	r3, [r0, #0]
 801424a:	f04f 30ff 	mov.w	r0, #4294967295
 801424e:	bd38      	pop	{r3, r4, r5, pc}
 8014250:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014252:	b112      	cbz	r2, 801425a <_raise_r+0x1e>
 8014254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014258:	b94b      	cbnz	r3, 801426e <_raise_r+0x32>
 801425a:	4628      	mov	r0, r5
 801425c:	f000 f830 	bl	80142c0 <_getpid_r>
 8014260:	4622      	mov	r2, r4
 8014262:	4601      	mov	r1, r0
 8014264:	4628      	mov	r0, r5
 8014266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801426a:	f000 b817 	b.w	801429c <_kill_r>
 801426e:	2b01      	cmp	r3, #1
 8014270:	d00a      	beq.n	8014288 <_raise_r+0x4c>
 8014272:	1c59      	adds	r1, r3, #1
 8014274:	d103      	bne.n	801427e <_raise_r+0x42>
 8014276:	2316      	movs	r3, #22
 8014278:	6003      	str	r3, [r0, #0]
 801427a:	2001      	movs	r0, #1
 801427c:	e7e7      	b.n	801424e <_raise_r+0x12>
 801427e:	2100      	movs	r1, #0
 8014280:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014284:	4620      	mov	r0, r4
 8014286:	4798      	blx	r3
 8014288:	2000      	movs	r0, #0
 801428a:	e7e0      	b.n	801424e <_raise_r+0x12>

0801428c <raise>:
 801428c:	4b02      	ldr	r3, [pc, #8]	@ (8014298 <raise+0xc>)
 801428e:	4601      	mov	r1, r0
 8014290:	6818      	ldr	r0, [r3, #0]
 8014292:	f7ff bfd3 	b.w	801423c <_raise_r>
 8014296:	bf00      	nop
 8014298:	24000138 	.word	0x24000138

0801429c <_kill_r>:
 801429c:	b538      	push	{r3, r4, r5, lr}
 801429e:	4d07      	ldr	r5, [pc, #28]	@ (80142bc <_kill_r+0x20>)
 80142a0:	2300      	movs	r3, #0
 80142a2:	4604      	mov	r4, r0
 80142a4:	4608      	mov	r0, r1
 80142a6:	4611      	mov	r1, r2
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	f7ed f825 	bl	80012f8 <_kill>
 80142ae:	1c43      	adds	r3, r0, #1
 80142b0:	d102      	bne.n	80142b8 <_kill_r+0x1c>
 80142b2:	682b      	ldr	r3, [r5, #0]
 80142b4:	b103      	cbz	r3, 80142b8 <_kill_r+0x1c>
 80142b6:	6023      	str	r3, [r4, #0]
 80142b8:	bd38      	pop	{r3, r4, r5, pc}
 80142ba:	bf00      	nop
 80142bc:	240070d8 	.word	0x240070d8

080142c0 <_getpid_r>:
 80142c0:	f7ed b812 	b.w	80012e8 <_getpid>

080142c4 <__swhatbuf_r>:
 80142c4:	b570      	push	{r4, r5, r6, lr}
 80142c6:	460c      	mov	r4, r1
 80142c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142cc:	2900      	cmp	r1, #0
 80142ce:	b096      	sub	sp, #88	@ 0x58
 80142d0:	4615      	mov	r5, r2
 80142d2:	461e      	mov	r6, r3
 80142d4:	da0d      	bge.n	80142f2 <__swhatbuf_r+0x2e>
 80142d6:	89a3      	ldrh	r3, [r4, #12]
 80142d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80142dc:	f04f 0100 	mov.w	r1, #0
 80142e0:	bf14      	ite	ne
 80142e2:	2340      	movne	r3, #64	@ 0x40
 80142e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80142e8:	2000      	movs	r0, #0
 80142ea:	6031      	str	r1, [r6, #0]
 80142ec:	602b      	str	r3, [r5, #0]
 80142ee:	b016      	add	sp, #88	@ 0x58
 80142f0:	bd70      	pop	{r4, r5, r6, pc}
 80142f2:	466a      	mov	r2, sp
 80142f4:	f000 f848 	bl	8014388 <_fstat_r>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	dbec      	blt.n	80142d6 <__swhatbuf_r+0x12>
 80142fc:	9901      	ldr	r1, [sp, #4]
 80142fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014302:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014306:	4259      	negs	r1, r3
 8014308:	4159      	adcs	r1, r3
 801430a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801430e:	e7eb      	b.n	80142e8 <__swhatbuf_r+0x24>

08014310 <__smakebuf_r>:
 8014310:	898b      	ldrh	r3, [r1, #12]
 8014312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014314:	079d      	lsls	r5, r3, #30
 8014316:	4606      	mov	r6, r0
 8014318:	460c      	mov	r4, r1
 801431a:	d507      	bpl.n	801432c <__smakebuf_r+0x1c>
 801431c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014320:	6023      	str	r3, [r4, #0]
 8014322:	6123      	str	r3, [r4, #16]
 8014324:	2301      	movs	r3, #1
 8014326:	6163      	str	r3, [r4, #20]
 8014328:	b003      	add	sp, #12
 801432a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801432c:	ab01      	add	r3, sp, #4
 801432e:	466a      	mov	r2, sp
 8014330:	f7ff ffc8 	bl	80142c4 <__swhatbuf_r>
 8014334:	9f00      	ldr	r7, [sp, #0]
 8014336:	4605      	mov	r5, r0
 8014338:	4639      	mov	r1, r7
 801433a:	4630      	mov	r0, r6
 801433c:	f7fd fab8 	bl	80118b0 <_malloc_r>
 8014340:	b948      	cbnz	r0, 8014356 <__smakebuf_r+0x46>
 8014342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014346:	059a      	lsls	r2, r3, #22
 8014348:	d4ee      	bmi.n	8014328 <__smakebuf_r+0x18>
 801434a:	f023 0303 	bic.w	r3, r3, #3
 801434e:	f043 0302 	orr.w	r3, r3, #2
 8014352:	81a3      	strh	r3, [r4, #12]
 8014354:	e7e2      	b.n	801431c <__smakebuf_r+0xc>
 8014356:	89a3      	ldrh	r3, [r4, #12]
 8014358:	6020      	str	r0, [r4, #0]
 801435a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801435e:	81a3      	strh	r3, [r4, #12]
 8014360:	9b01      	ldr	r3, [sp, #4]
 8014362:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014366:	b15b      	cbz	r3, 8014380 <__smakebuf_r+0x70>
 8014368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801436c:	4630      	mov	r0, r6
 801436e:	f000 f81d 	bl	80143ac <_isatty_r>
 8014372:	b128      	cbz	r0, 8014380 <__smakebuf_r+0x70>
 8014374:	89a3      	ldrh	r3, [r4, #12]
 8014376:	f023 0303 	bic.w	r3, r3, #3
 801437a:	f043 0301 	orr.w	r3, r3, #1
 801437e:	81a3      	strh	r3, [r4, #12]
 8014380:	89a3      	ldrh	r3, [r4, #12]
 8014382:	431d      	orrs	r5, r3
 8014384:	81a5      	strh	r5, [r4, #12]
 8014386:	e7cf      	b.n	8014328 <__smakebuf_r+0x18>

08014388 <_fstat_r>:
 8014388:	b538      	push	{r3, r4, r5, lr}
 801438a:	4d07      	ldr	r5, [pc, #28]	@ (80143a8 <_fstat_r+0x20>)
 801438c:	2300      	movs	r3, #0
 801438e:	4604      	mov	r4, r0
 8014390:	4608      	mov	r0, r1
 8014392:	4611      	mov	r1, r2
 8014394:	602b      	str	r3, [r5, #0]
 8014396:	f7ed f80f 	bl	80013b8 <_fstat>
 801439a:	1c43      	adds	r3, r0, #1
 801439c:	d102      	bne.n	80143a4 <_fstat_r+0x1c>
 801439e:	682b      	ldr	r3, [r5, #0]
 80143a0:	b103      	cbz	r3, 80143a4 <_fstat_r+0x1c>
 80143a2:	6023      	str	r3, [r4, #0]
 80143a4:	bd38      	pop	{r3, r4, r5, pc}
 80143a6:	bf00      	nop
 80143a8:	240070d8 	.word	0x240070d8

080143ac <_isatty_r>:
 80143ac:	b538      	push	{r3, r4, r5, lr}
 80143ae:	4d06      	ldr	r5, [pc, #24]	@ (80143c8 <_isatty_r+0x1c>)
 80143b0:	2300      	movs	r3, #0
 80143b2:	4604      	mov	r4, r0
 80143b4:	4608      	mov	r0, r1
 80143b6:	602b      	str	r3, [r5, #0]
 80143b8:	f7ed f80e 	bl	80013d8 <_isatty>
 80143bc:	1c43      	adds	r3, r0, #1
 80143be:	d102      	bne.n	80143c6 <_isatty_r+0x1a>
 80143c0:	682b      	ldr	r3, [r5, #0]
 80143c2:	b103      	cbz	r3, 80143c6 <_isatty_r+0x1a>
 80143c4:	6023      	str	r3, [r4, #0]
 80143c6:	bd38      	pop	{r3, r4, r5, pc}
 80143c8:	240070d8 	.word	0x240070d8
 80143cc:	00000000 	.word	0x00000000

080143d0 <fmod>:
 80143d0:	b508      	push	{r3, lr}
 80143d2:	ed2d 8b04 	vpush	{d8-d9}
 80143d6:	eeb0 9b40 	vmov.f64	d9, d0
 80143da:	eeb0 8b41 	vmov.f64	d8, d1
 80143de:	f000 f879 	bl	80144d4 <__ieee754_fmod>
 80143e2:	eeb4 9b48 	vcmp.f64	d9, d8
 80143e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ea:	d60c      	bvs.n	8014406 <fmod+0x36>
 80143ec:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014410 <fmod+0x40>
 80143f0:	eeb4 8b49 	vcmp.f64	d8, d9
 80143f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f8:	d105      	bne.n	8014406 <fmod+0x36>
 80143fa:	f7fe f8a5 	bl	8012548 <__errno>
 80143fe:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014402:	2321      	movs	r3, #33	@ 0x21
 8014404:	6003      	str	r3, [r0, #0]
 8014406:	ecbd 8b04 	vpop	{d8-d9}
 801440a:	bd08      	pop	{r3, pc}
 801440c:	f3af 8000 	nop.w
	...

08014418 <sqrt>:
 8014418:	b508      	push	{r3, lr}
 801441a:	ed2d 8b04 	vpush	{d8-d9}
 801441e:	eeb0 8b40 	vmov.f64	d8, d0
 8014422:	f000 f853 	bl	80144cc <__ieee754_sqrt>
 8014426:	eeb4 8b48 	vcmp.f64	d8, d8
 801442a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801442e:	d60c      	bvs.n	801444a <sqrt+0x32>
 8014430:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014450 <sqrt+0x38>
 8014434:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443c:	d505      	bpl.n	801444a <sqrt+0x32>
 801443e:	f7fe f883 	bl	8012548 <__errno>
 8014442:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014446:	2321      	movs	r3, #33	@ 0x21
 8014448:	6003      	str	r3, [r0, #0]
 801444a:	ecbd 8b04 	vpop	{d8-d9}
 801444e:	bd08      	pop	{r3, pc}
	...

08014458 <acosf>:
 8014458:	b508      	push	{r3, lr}
 801445a:	ed2d 8b02 	vpush	{d8}
 801445e:	eeb0 8a40 	vmov.f32	s16, s0
 8014462:	f000 f943 	bl	80146ec <__ieee754_acosf>
 8014466:	eeb4 8a48 	vcmp.f32	s16, s16
 801446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446e:	eef0 8a40 	vmov.f32	s17, s0
 8014472:	d615      	bvs.n	80144a0 <acosf+0x48>
 8014474:	eeb0 0a48 	vmov.f32	s0, s16
 8014478:	f000 f81a 	bl	80144b0 <fabsf>
 801447c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014480:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014488:	dd0a      	ble.n	80144a0 <acosf+0x48>
 801448a:	f7fe f85d 	bl	8012548 <__errno>
 801448e:	ecbd 8b02 	vpop	{d8}
 8014492:	2321      	movs	r3, #33	@ 0x21
 8014494:	6003      	str	r3, [r0, #0]
 8014496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801449a:	4804      	ldr	r0, [pc, #16]	@ (80144ac <acosf+0x54>)
 801449c:	f000 b810 	b.w	80144c0 <nanf>
 80144a0:	eeb0 0a68 	vmov.f32	s0, s17
 80144a4:	ecbd 8b02 	vpop	{d8}
 80144a8:	bd08      	pop	{r3, pc}
 80144aa:	bf00      	nop
 80144ac:	08016cc6 	.word	0x08016cc6

080144b0 <fabsf>:
 80144b0:	ee10 3a10 	vmov	r3, s0
 80144b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80144b8:	ee00 3a10 	vmov	s0, r3
 80144bc:	4770      	bx	lr
	...

080144c0 <nanf>:
 80144c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80144c8 <nanf+0x8>
 80144c4:	4770      	bx	lr
 80144c6:	bf00      	nop
 80144c8:	7fc00000 	.word	0x7fc00000

080144cc <__ieee754_sqrt>:
 80144cc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80144d0:	4770      	bx	lr
	...

080144d4 <__ieee754_fmod>:
 80144d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80144d8:	ed8d 1b00 	vstr	d1, [sp]
 80144dc:	e9dd 6500 	ldrd	r6, r5, [sp]
 80144e0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80144e4:	ea56 0307 	orrs.w	r3, r6, r7
 80144e8:	46b6      	mov	lr, r6
 80144ea:	d00d      	beq.n	8014508 <__ieee754_fmod+0x34>
 80144ec:	ee10 ca90 	vmov	ip, s1
 80144f0:	4b78      	ldr	r3, [pc, #480]	@ (80146d4 <__ieee754_fmod+0x200>)
 80144f2:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 80144f6:	4598      	cmp	r8, r3
 80144f8:	d806      	bhi.n	8014508 <__ieee754_fmod+0x34>
 80144fa:	4273      	negs	r3, r6
 80144fc:	4a76      	ldr	r2, [pc, #472]	@ (80146d8 <__ieee754_fmod+0x204>)
 80144fe:	4333      	orrs	r3, r6
 8014500:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014504:	4293      	cmp	r3, r2
 8014506:	d908      	bls.n	801451a <__ieee754_fmod+0x46>
 8014508:	ed9d 7b00 	vldr	d7, [sp]
 801450c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014510:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014514:	b003      	add	sp, #12
 8014516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801451a:	ee10 9a10 	vmov	r9, s0
 801451e:	45b8      	cmp	r8, r7
 8014520:	4649      	mov	r1, r9
 8014522:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014526:	dc09      	bgt.n	801453c <__ieee754_fmod+0x68>
 8014528:	dbf4      	blt.n	8014514 <__ieee754_fmod+0x40>
 801452a:	454e      	cmp	r6, r9
 801452c:	d8f2      	bhi.n	8014514 <__ieee754_fmod+0x40>
 801452e:	d105      	bne.n	801453c <__ieee754_fmod+0x68>
 8014530:	4b6a      	ldr	r3, [pc, #424]	@ (80146dc <__ieee754_fmod+0x208>)
 8014532:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014536:	ed93 0b00 	vldr	d0, [r3]
 801453a:	e7eb      	b.n	8014514 <__ieee754_fmod+0x40>
 801453c:	4a66      	ldr	r2, [pc, #408]	@ (80146d8 <__ieee754_fmod+0x204>)
 801453e:	ea1c 0f02 	tst.w	ip, r2
 8014542:	d14a      	bne.n	80145da <__ieee754_fmod+0x106>
 8014544:	f1b8 0f00 	cmp.w	r8, #0
 8014548:	d13f      	bne.n	80145ca <__ieee754_fmod+0xf6>
 801454a:	4865      	ldr	r0, [pc, #404]	@ (80146e0 <__ieee754_fmod+0x20c>)
 801454c:	464b      	mov	r3, r9
 801454e:	2b00      	cmp	r3, #0
 8014550:	dc38      	bgt.n	80145c4 <__ieee754_fmod+0xf0>
 8014552:	4215      	tst	r5, r2
 8014554:	d150      	bne.n	80145f8 <__ieee754_fmod+0x124>
 8014556:	2f00      	cmp	r7, #0
 8014558:	d147      	bne.n	80145ea <__ieee754_fmod+0x116>
 801455a:	4a61      	ldr	r2, [pc, #388]	@ (80146e0 <__ieee754_fmod+0x20c>)
 801455c:	4633      	mov	r3, r6
 801455e:	2b00      	cmp	r3, #0
 8014560:	dc40      	bgt.n	80145e4 <__ieee754_fmod+0x110>
 8014562:	4b60      	ldr	r3, [pc, #384]	@ (80146e4 <__ieee754_fmod+0x210>)
 8014564:	4298      	cmp	r0, r3
 8014566:	db4b      	blt.n	8014600 <__ieee754_fmod+0x12c>
 8014568:	f3cc 0313 	ubfx	r3, ip, #0, #20
 801456c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014570:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80146e4 <__ieee754_fmod+0x210>
 8014574:	4562      	cmp	r2, ip
 8014576:	db58      	blt.n	801462a <__ieee754_fmod+0x156>
 8014578:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801457c:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014580:	1a80      	subs	r0, r0, r2
 8014582:	1b5e      	subs	r6, r3, r5
 8014584:	eba1 070e 	sub.w	r7, r1, lr
 8014588:	2800      	cmp	r0, #0
 801458a:	d164      	bne.n	8014656 <__ieee754_fmod+0x182>
 801458c:	4571      	cmp	r1, lr
 801458e:	bf38      	it	cc
 8014590:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014594:	2e00      	cmp	r6, #0
 8014596:	bfa4      	itt	ge
 8014598:	4639      	movge	r1, r7
 801459a:	4633      	movge	r3, r6
 801459c:	ea53 0001 	orrs.w	r0, r3, r1
 80145a0:	d0c6      	beq.n	8014530 <__ieee754_fmod+0x5c>
 80145a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80145a6:	db6b      	blt.n	8014680 <__ieee754_fmod+0x1ac>
 80145a8:	484e      	ldr	r0, [pc, #312]	@ (80146e4 <__ieee754_fmod+0x210>)
 80145aa:	4282      	cmp	r2, r0
 80145ac:	db6e      	blt.n	801468c <__ieee754_fmod+0x1b8>
 80145ae:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80145b2:	4323      	orrs	r3, r4
 80145b4:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 80145b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80145bc:	460c      	mov	r4, r1
 80145be:	ec45 4b10 	vmov	d0, r4, r5
 80145c2:	e7a7      	b.n	8014514 <__ieee754_fmod+0x40>
 80145c4:	3801      	subs	r0, #1
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	e7c1      	b.n	801454e <__ieee754_fmod+0x7a>
 80145ca:	4846      	ldr	r0, [pc, #280]	@ (80146e4 <__ieee754_fmod+0x210>)
 80145cc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	ddbe      	ble.n	8014552 <__ieee754_fmod+0x7e>
 80145d4:	3801      	subs	r0, #1
 80145d6:	005b      	lsls	r3, r3, #1
 80145d8:	e7fa      	b.n	80145d0 <__ieee754_fmod+0xfc>
 80145da:	ea4f 5028 	mov.w	r0, r8, asr #20
 80145de:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 80145e2:	e7b6      	b.n	8014552 <__ieee754_fmod+0x7e>
 80145e4:	3a01      	subs	r2, #1
 80145e6:	005b      	lsls	r3, r3, #1
 80145e8:	e7b9      	b.n	801455e <__ieee754_fmod+0x8a>
 80145ea:	4a3e      	ldr	r2, [pc, #248]	@ (80146e4 <__ieee754_fmod+0x210>)
 80145ec:	02fb      	lsls	r3, r7, #11
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	ddb7      	ble.n	8014562 <__ieee754_fmod+0x8e>
 80145f2:	3a01      	subs	r2, #1
 80145f4:	005b      	lsls	r3, r3, #1
 80145f6:	e7fa      	b.n	80145ee <__ieee754_fmod+0x11a>
 80145f8:	153a      	asrs	r2, r7, #20
 80145fa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80145fe:	e7b0      	b.n	8014562 <__ieee754_fmod+0x8e>
 8014600:	eba3 0c00 	sub.w	ip, r3, r0
 8014604:	f1bc 0f1f 	cmp.w	ip, #31
 8014608:	dc09      	bgt.n	801461e <__ieee754_fmod+0x14a>
 801460a:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 801460e:	fa08 f10c 	lsl.w	r1, r8, ip
 8014612:	fa29 f303 	lsr.w	r3, r9, r3
 8014616:	430b      	orrs	r3, r1
 8014618:	fa09 f10c 	lsl.w	r1, r9, ip
 801461c:	e7a8      	b.n	8014570 <__ieee754_fmod+0x9c>
 801461e:	4b32      	ldr	r3, [pc, #200]	@ (80146e8 <__ieee754_fmod+0x214>)
 8014620:	1a1b      	subs	r3, r3, r0
 8014622:	fa09 f303 	lsl.w	r3, r9, r3
 8014626:	2100      	movs	r1, #0
 8014628:	e7a2      	b.n	8014570 <__ieee754_fmod+0x9c>
 801462a:	ebac 0c02 	sub.w	ip, ip, r2
 801462e:	f1bc 0f1f 	cmp.w	ip, #31
 8014632:	dc09      	bgt.n	8014648 <__ieee754_fmod+0x174>
 8014634:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8014638:	fa07 f70c 	lsl.w	r7, r7, ip
 801463c:	fa26 f505 	lsr.w	r5, r6, r5
 8014640:	433d      	orrs	r5, r7
 8014642:	fa06 fe0c 	lsl.w	lr, r6, ip
 8014646:	e79b      	b.n	8014580 <__ieee754_fmod+0xac>
 8014648:	4d27      	ldr	r5, [pc, #156]	@ (80146e8 <__ieee754_fmod+0x214>)
 801464a:	1aad      	subs	r5, r5, r2
 801464c:	fa06 f505 	lsl.w	r5, r6, r5
 8014650:	f04f 0e00 	mov.w	lr, #0
 8014654:	e794      	b.n	8014580 <__ieee754_fmod+0xac>
 8014656:	4571      	cmp	r1, lr
 8014658:	bf38      	it	cc
 801465a:	f106 36ff 	addcc.w	r6, r6, #4294967295
 801465e:	2e00      	cmp	r6, #0
 8014660:	da05      	bge.n	801466e <__ieee754_fmod+0x19a>
 8014662:	0fce      	lsrs	r6, r1, #31
 8014664:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014668:	0049      	lsls	r1, r1, #1
 801466a:	3801      	subs	r0, #1
 801466c:	e789      	b.n	8014582 <__ieee754_fmod+0xae>
 801466e:	ea56 0307 	orrs.w	r3, r6, r7
 8014672:	f43f af5d 	beq.w	8014530 <__ieee754_fmod+0x5c>
 8014676:	0ffb      	lsrs	r3, r7, #31
 8014678:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801467c:	0079      	lsls	r1, r7, #1
 801467e:	e7f4      	b.n	801466a <__ieee754_fmod+0x196>
 8014680:	0fc8      	lsrs	r0, r1, #31
 8014682:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014686:	0049      	lsls	r1, r1, #1
 8014688:	3a01      	subs	r2, #1
 801468a:	e78a      	b.n	80145a2 <__ieee754_fmod+0xce>
 801468c:	1a80      	subs	r0, r0, r2
 801468e:	2814      	cmp	r0, #20
 8014690:	dc0c      	bgt.n	80146ac <__ieee754_fmod+0x1d8>
 8014692:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014696:	fa03 f202 	lsl.w	r2, r3, r2
 801469a:	40c1      	lsrs	r1, r0
 801469c:	430a      	orrs	r2, r1
 801469e:	4103      	asrs	r3, r0
 80146a0:	ea43 0104 	orr.w	r1, r3, r4
 80146a4:	4610      	mov	r0, r2
 80146a6:	ec41 0b10 	vmov	d0, r0, r1
 80146aa:	e733      	b.n	8014514 <__ieee754_fmod+0x40>
 80146ac:	281f      	cmp	r0, #31
 80146ae:	dc07      	bgt.n	80146c0 <__ieee754_fmod+0x1ec>
 80146b0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80146b4:	40c1      	lsrs	r1, r0
 80146b6:	fa03 f202 	lsl.w	r2, r3, r2
 80146ba:	430a      	orrs	r2, r1
 80146bc:	4623      	mov	r3, r4
 80146be:	e7ef      	b.n	80146a0 <__ieee754_fmod+0x1cc>
 80146c0:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80146c4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80146c8:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80146cc:	32e2      	adds	r2, #226	@ 0xe2
 80146ce:	fa43 f202 	asr.w	r2, r3, r2
 80146d2:	e7f3      	b.n	80146bc <__ieee754_fmod+0x1e8>
 80146d4:	7fefffff 	.word	0x7fefffff
 80146d8:	7ff00000 	.word	0x7ff00000
 80146dc:	08016dc8 	.word	0x08016dc8
 80146e0:	fffffbed 	.word	0xfffffbed
 80146e4:	fffffc02 	.word	0xfffffc02
 80146e8:	fffffbe2 	.word	0xfffffbe2

080146ec <__ieee754_acosf>:
 80146ec:	b508      	push	{r3, lr}
 80146ee:	ee10 3a10 	vmov	r3, s0
 80146f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80146f6:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80146fa:	ed2d 8b0c 	vpush	{d8-d13}
 80146fe:	d109      	bne.n	8014714 <__ieee754_acosf+0x28>
 8014700:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8014898 <__ieee754_acosf+0x1ac>
 8014704:	eddf 7a65 	vldr	s15, [pc, #404]	@ 801489c <__ieee754_acosf+0x1b0>
 8014708:	2b00      	cmp	r3, #0
 801470a:	fe37 0a80 	vselgt.f32	s0, s15, s0
 801470e:	ecbd 8b0c 	vpop	{d8-d13}
 8014712:	bd08      	pop	{r3, pc}
 8014714:	d904      	bls.n	8014720 <__ieee754_acosf+0x34>
 8014716:	ee30 8a40 	vsub.f32	s16, s0, s0
 801471a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801471e:	e7f6      	b.n	801470e <__ieee754_acosf+0x22>
 8014720:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8014724:	d23c      	bcs.n	80147a0 <__ieee754_acosf+0xb4>
 8014726:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801472a:	f240 80b1 	bls.w	8014890 <__ieee754_acosf+0x1a4>
 801472e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014732:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80148a0 <__ieee754_acosf+0x1b4>
 8014736:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80148a4 <__ieee754_acosf+0x1b8>
 801473a:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 80148a8 <__ieee754_acosf+0x1bc>
 801473e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014742:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80148ac <__ieee754_acosf+0x1c0>
 8014746:	eee7 6a27 	vfma.f32	s13, s14, s15
 801474a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80148b0 <__ieee754_acosf+0x1c4>
 801474e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014752:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80148b4 <__ieee754_acosf+0x1c8>
 8014756:	eee7 6a27 	vfma.f32	s13, s14, s15
 801475a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80148b8 <__ieee754_acosf+0x1cc>
 801475e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014762:	eddf 6a56 	vldr	s13, [pc, #344]	@ 80148bc <__ieee754_acosf+0x1d0>
 8014766:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801476a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80148c0 <__ieee754_acosf+0x1d4>
 801476e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014772:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 80148c4 <__ieee754_acosf+0x1d8>
 8014776:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801477a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801477e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014786:	eddf 7a50 	vldr	s15, [pc, #320]	@ 80148c8 <__ieee754_acosf+0x1dc>
 801478a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801478e:	eee0 7a46 	vfms.f32	s15, s0, s12
 8014792:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014796:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80148cc <__ieee754_acosf+0x1e0>
 801479a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801479e:	e7b6      	b.n	801470e <__ieee754_acosf+0x22>
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	eddf da3f 	vldr	s27, [pc, #252]	@ 80148a0 <__ieee754_acosf+0x1b4>
 80147a6:	eddf ca3f 	vldr	s25, [pc, #252]	@ 80148a4 <__ieee754_acosf+0x1b8>
 80147aa:	ed9f ca40 	vldr	s24, [pc, #256]	@ 80148ac <__ieee754_acosf+0x1c0>
 80147ae:	eddf ba40 	vldr	s23, [pc, #256]	@ 80148b0 <__ieee754_acosf+0x1c4>
 80147b2:	ed9f ba40 	vldr	s22, [pc, #256]	@ 80148b4 <__ieee754_acosf+0x1c8>
 80147b6:	eddf 8a40 	vldr	s17, [pc, #256]	@ 80148b8 <__ieee754_acosf+0x1cc>
 80147ba:	ed9f da40 	vldr	s26, [pc, #256]	@ 80148bc <__ieee754_acosf+0x1d0>
 80147be:	eddf aa3a 	vldr	s21, [pc, #232]	@ 80148a8 <__ieee754_acosf+0x1bc>
 80147c2:	ed9f aa3f 	vldr	s20, [pc, #252]	@ 80148c0 <__ieee754_acosf+0x1d4>
 80147c6:	eddf 9a3f 	vldr	s19, [pc, #252]	@ 80148c4 <__ieee754_acosf+0x1d8>
 80147ca:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80147ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80147d2:	da28      	bge.n	8014826 <__ieee754_acosf+0x13a>
 80147d4:	ee30 8a09 	vadd.f32	s16, s0, s18
 80147d8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80147dc:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80147e0:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80147e4:	eeac ca80 	vfma.f32	s24, s25, s0
 80147e8:	eeaa aa80 	vfma.f32	s20, s21, s0
 80147ec:	eeec ba00 	vfma.f32	s23, s24, s0
 80147f0:	eeea 9a00 	vfma.f32	s19, s20, s0
 80147f4:	eeab ba80 	vfma.f32	s22, s23, s0
 80147f8:	eea9 9a80 	vfma.f32	s18, s19, s0
 80147fc:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8014800:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014804:	f000 f86a 	bl	80148dc <__ieee754_sqrtf>
 8014808:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801480c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80148d0 <__ieee754_acosf+0x1e4>
 8014810:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014814:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8014818:	ee77 7a80 	vadd.f32	s15, s15, s0
 801481c:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80148d4 <__ieee754_acosf+0x1e8>
 8014820:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014824:	e773      	b.n	801470e <__ieee754_acosf+0x22>
 8014826:	ee39 8a40 	vsub.f32	s16, s18, s0
 801482a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801482e:	eeb0 0a48 	vmov.f32	s0, s16
 8014832:	f000 f853 	bl	80148dc <__ieee754_sqrtf>
 8014836:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801483a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801483e:	eeac ca88 	vfma.f32	s24, s25, s16
 8014842:	eeaa aa88 	vfma.f32	s20, s21, s16
 8014846:	eeec ba08 	vfma.f32	s23, s24, s16
 801484a:	ee10 3a10 	vmov	r3, s0
 801484e:	eeab ba88 	vfma.f32	s22, s23, s16
 8014852:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8014856:	f023 030f 	bic.w	r3, r3, #15
 801485a:	eeea 9a08 	vfma.f32	s19, s20, s16
 801485e:	ee07 3a90 	vmov	s15, r3
 8014862:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8014866:	eeb0 6a48 	vmov.f32	s12, s16
 801486a:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801486e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8014872:	ee70 6a27 	vadd.f32	s13, s0, s15
 8014876:	ee68 8a88 	vmul.f32	s17, s17, s16
 801487a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801487e:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8014882:	eea0 7a26 	vfma.f32	s14, s0, s13
 8014886:	ee37 0a87 	vadd.f32	s0, s15, s14
 801488a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801488e:	e73e      	b.n	801470e <__ieee754_acosf+0x22>
 8014890:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80148d8 <__ieee754_acosf+0x1ec>
 8014894:	e73b      	b.n	801470e <__ieee754_acosf+0x22>
 8014896:	bf00      	nop
 8014898:	40490fdb 	.word	0x40490fdb
 801489c:	00000000 	.word	0x00000000
 80148a0:	3811ef08 	.word	0x3811ef08
 80148a4:	3a4f7f04 	.word	0x3a4f7f04
 80148a8:	bf303361 	.word	0xbf303361
 80148ac:	bd241146 	.word	0xbd241146
 80148b0:	3e4e0aa8 	.word	0x3e4e0aa8
 80148b4:	bea6b090 	.word	0xbea6b090
 80148b8:	3e2aaaab 	.word	0x3e2aaaab
 80148bc:	3d9dc62e 	.word	0x3d9dc62e
 80148c0:	4001572d 	.word	0x4001572d
 80148c4:	c019d139 	.word	0xc019d139
 80148c8:	33a22168 	.word	0x33a22168
 80148cc:	3fc90fda 	.word	0x3fc90fda
 80148d0:	b3a22168 	.word	0xb3a22168
 80148d4:	40490fda 	.word	0x40490fda
 80148d8:	3fc90fdb 	.word	0x3fc90fdb

080148dc <__ieee754_sqrtf>:
 80148dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80148e0:	4770      	bx	lr
	...

080148e4 <_init>:
 80148e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e6:	bf00      	nop
 80148e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148ea:	bc08      	pop	{r3}
 80148ec:	469e      	mov	lr, r3
 80148ee:	4770      	bx	lr

080148f0 <_fini>:
 80148f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148f2:	bf00      	nop
 80148f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148f6:	bc08      	pop	{r3}
 80148f8:	469e      	mov	lr, r3
 80148fa:	4770      	bx	lr
