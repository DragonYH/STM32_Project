
EX_Three_Phase_Inverter_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf74  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c98  0800d218  0800d218  0000e218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eeb0  0800eeb0  0000feb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800eeb8  0800eeb8  0000feb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800eebc  0800eebc  0000febc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  0800eec0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005190  24000200  0800f0c0  00010200  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005390  0800f0c0  00010390  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025b56  00000000  00000000  0001022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050cf  00000000  00000000  00035d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cf0  00000000  00000000  0003ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000162c  00000000  00000000  0003cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c63a  00000000  00000000  0003e174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026657  00000000  00000000  0007a7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f9ad  00000000  00000000  000a0e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002107b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087b0  00000000  00000000  002107f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  00218fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000200 	.word	0x24000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d1fc 	.word	0x0800d1fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000204 	.word	0x24000204
 80002dc:	0800d1fc 	.word	0x0800d1fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 80005b0:	f009 ffd0 	bl	800a554 <OLED_Init>
  ad7606_Init();
 80005b4:	f009 fb88 	bl	8009cc8 <ad7606_Init>
  INA228_config(INA228_0);
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_FREERTOS_Init+0x54>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f009 fc98 	bl	8009ef2 <INA228_config>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	480f      	ldr	r0, [pc, #60]	@ (8000604 <MX_FREERTOS_Init+0x58>)
 80005c6:	f009 fbb9 	bl	8009d3c <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 80005ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <MX_FREERTOS_Init+0x5c>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	480f      	ldr	r0, [pc, #60]	@ (800060c <MX_FREERTOS_Init+0x60>)
 80005d0:	f006 fe0c 	bl	80071ec <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <MX_FREERTOS_Init+0x64>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <MX_FREERTOS_Init+0x68>)
 80005dc:	2100      	movs	r1, #0
 80005de:	480e      	ldr	r0, [pc, #56]	@ (8000618 <MX_FREERTOS_Init+0x6c>)
 80005e0:	f006 fe04 	bl	80071ec <osThreadNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <MX_FREERTOS_Init+0x70>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 80005ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <MX_FREERTOS_Init+0x74>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <MX_FREERTOS_Init+0x78>)
 80005f0:	f006 fdfc 	bl	80071ec <osThreadNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <MX_FREERTOS_Init+0x7c>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	0800eb3c 	.word	0x0800eb3c
 8000604:	240003fc 	.word	0x240003fc
 8000608:	0800d2c0 	.word	0x0800d2c0
 800060c:	0800062d 	.word	0x0800062d
 8000610:	2400023c 	.word	0x2400023c
 8000614:	0800d2e4 	.word	0x0800d2e4
 8000618:	08000689 	.word	0x08000689
 800061c:	24000240 	.word	0x24000240
 8000620:	0800d308 	.word	0x0800d308
 8000624:	08000801 	.word	0x08000801
 8000628:	24000244 	.word	0x24000244

0800062c <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	4812      	ldr	r0, [pc, #72]	@ (8000684 <StartStateLED+0x58>)
 800063a:	f001 fbdf 	bl	8001dfc <HAL_GPIO_WritePin>
    osDelay(1000);
 800063e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000642:	f006 fe65 	bl	8007310 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000646:	2101      	movs	r1, #1
 8000648:	480e      	ldr	r0, [pc, #56]	@ (8000684 <StartStateLED+0x58>)
 800064a:	f001 fbf0 	bl	8001e2e <HAL_GPIO_TogglePin>
    osDelay(100);
 800064e:	2064      	movs	r0, #100	@ 0x64
 8000650:	f006 fe5e 	bl	8007310 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000654:	2101      	movs	r1, #1
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <StartStateLED+0x58>)
 8000658:	f001 fbe9 	bl	8001e2e <HAL_GPIO_TogglePin>
    osDelay(200);
 800065c:	20c8      	movs	r0, #200	@ 0xc8
 800065e:	f006 fe57 	bl	8007310 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000662:	2101      	movs	r1, #1
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <StartStateLED+0x58>)
 8000666:	f001 fbe2 	bl	8001e2e <HAL_GPIO_TogglePin>
    osDelay(100);
 800066a:	2064      	movs	r0, #100	@ 0x64
 800066c:	f006 fe50 	bl	8007310 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000670:	2101      	movs	r1, #1
 8000672:	4804      	ldr	r0, [pc, #16]	@ (8000684 <StartStateLED+0x58>)
 8000674:	f001 fbdb 	bl	8001e2e <HAL_GPIO_TogglePin>
    osDelay(200);
 8000678:	20c8      	movs	r0, #200	@ 0xc8
 800067a:	f006 fe49 	bl	8007310 <osDelay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800067e:	bf00      	nop
 8000680:	e7d8      	b.n	8000634 <StartStateLED+0x8>
 8000682:	bf00      	nop
 8000684:	58022000 	.word	0x58022000

08000688 <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */

  /* Infinite loop */
  for (;;)
  {
    sprintf((char *)text, "0: %6.3f", adcValue[0]);
 8000690:	4b4e      	ldr	r3, [pc, #312]	@ (80007cc <StartOledShow+0x144>)
 8000692:	edd3 7a00 	vldr	s15, [r3]
 8000696:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800069a:	ec53 2b17 	vmov	r2, r3, d7
 800069e:	494c      	ldr	r1, [pc, #304]	@ (80007d0 <StartOledShow+0x148>)
 80006a0:	484c      	ldr	r0, [pc, #304]	@ (80007d4 <StartOledShow+0x14c>)
 80006a2:	f00a fda3 	bl	800b1ec <siprintf>
    OLED_ShowString(0, 0, text, 12);
 80006a6:	230c      	movs	r3, #12
 80006a8:	4a4a      	ldr	r2, [pc, #296]	@ (80007d4 <StartOledShow+0x14c>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	f009 ff1d 	bl	800a4ec <OLED_ShowString>
    sprintf((char *)text, "1: %6.3f", adcValue[1]);
 80006b2:	4b46      	ldr	r3, [pc, #280]	@ (80007cc <StartOledShow+0x144>)
 80006b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80006b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006bc:	ec53 2b17 	vmov	r2, r3, d7
 80006c0:	4945      	ldr	r1, [pc, #276]	@ (80007d8 <StartOledShow+0x150>)
 80006c2:	4844      	ldr	r0, [pc, #272]	@ (80007d4 <StartOledShow+0x14c>)
 80006c4:	f00a fd92 	bl	800b1ec <siprintf>
    OLED_ShowString(64, 0, text, 12);
 80006c8:	230c      	movs	r3, #12
 80006ca:	4a42      	ldr	r2, [pc, #264]	@ (80007d4 <StartOledShow+0x14c>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	2040      	movs	r0, #64	@ 0x40
 80006d0:	f009 ff0c 	bl	800a4ec <OLED_ShowString>
    sprintf((char *)text, "2: %6.3f", adcValue[2]);
 80006d4:	4b3d      	ldr	r3, [pc, #244]	@ (80007cc <StartOledShow+0x144>)
 80006d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80006da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006de:	ec53 2b17 	vmov	r2, r3, d7
 80006e2:	493e      	ldr	r1, [pc, #248]	@ (80007dc <StartOledShow+0x154>)
 80006e4:	483b      	ldr	r0, [pc, #236]	@ (80007d4 <StartOledShow+0x14c>)
 80006e6:	f00a fd81 	bl	800b1ec <siprintf>
    OLED_ShowString(0, 12, text, 12);
 80006ea:	230c      	movs	r3, #12
 80006ec:	4a39      	ldr	r2, [pc, #228]	@ (80007d4 <StartOledShow+0x14c>)
 80006ee:	210c      	movs	r1, #12
 80006f0:	2000      	movs	r0, #0
 80006f2:	f009 fefb 	bl	800a4ec <OLED_ShowString>
    sprintf((char *)text, "3: %6.3f", adcValue[3]);
 80006f6:	4b35      	ldr	r3, [pc, #212]	@ (80007cc <StartOledShow+0x144>)
 80006f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80006fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000700:	ec53 2b17 	vmov	r2, r3, d7
 8000704:	4936      	ldr	r1, [pc, #216]	@ (80007e0 <StartOledShow+0x158>)
 8000706:	4833      	ldr	r0, [pc, #204]	@ (80007d4 <StartOledShow+0x14c>)
 8000708:	f00a fd70 	bl	800b1ec <siprintf>
    OLED_ShowString(64, 12, text, 12);
 800070c:	230c      	movs	r3, #12
 800070e:	4a31      	ldr	r2, [pc, #196]	@ (80007d4 <StartOledShow+0x14c>)
 8000710:	210c      	movs	r1, #12
 8000712:	2040      	movs	r0, #64	@ 0x40
 8000714:	f009 feea 	bl	800a4ec <OLED_ShowString>
    sprintf((char *)text, "4: %6.3f", adcValue[4]);
 8000718:	4b2c      	ldr	r3, [pc, #176]	@ (80007cc <StartOledShow+0x144>)
 800071a:	edd3 7a04 	vldr	s15, [r3, #16]
 800071e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000722:	ec53 2b17 	vmov	r2, r3, d7
 8000726:	492f      	ldr	r1, [pc, #188]	@ (80007e4 <StartOledShow+0x15c>)
 8000728:	482a      	ldr	r0, [pc, #168]	@ (80007d4 <StartOledShow+0x14c>)
 800072a:	f00a fd5f 	bl	800b1ec <siprintf>
    OLED_ShowString(0, 24, text, 12);
 800072e:	230c      	movs	r3, #12
 8000730:	4a28      	ldr	r2, [pc, #160]	@ (80007d4 <StartOledShow+0x14c>)
 8000732:	2118      	movs	r1, #24
 8000734:	2000      	movs	r0, #0
 8000736:	f009 fed9 	bl	800a4ec <OLED_ShowString>
    sprintf((char *)text, "5: %6.3f", adcValue[5]);
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <StartOledShow+0x144>)
 800073c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000740:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000744:	ec53 2b17 	vmov	r2, r3, d7
 8000748:	4927      	ldr	r1, [pc, #156]	@ (80007e8 <StartOledShow+0x160>)
 800074a:	4822      	ldr	r0, [pc, #136]	@ (80007d4 <StartOledShow+0x14c>)
 800074c:	f00a fd4e 	bl	800b1ec <siprintf>
    OLED_ShowString(64, 24, text, 12);
 8000750:	230c      	movs	r3, #12
 8000752:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <StartOledShow+0x14c>)
 8000754:	2118      	movs	r1, #24
 8000756:	2040      	movs	r0, #64	@ 0x40
 8000758:	f009 fec8 	bl	800a4ec <OLED_ShowString>
    sprintf((char *)text, "6: %6.3f", U);
 800075c:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <StartOledShow+0x164>)
 800075e:	edd3 7a00 	vldr	s15, [r3]
 8000762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000766:	ec53 2b17 	vmov	r2, r3, d7
 800076a:	4921      	ldr	r1, [pc, #132]	@ (80007f0 <StartOledShow+0x168>)
 800076c:	4819      	ldr	r0, [pc, #100]	@ (80007d4 <StartOledShow+0x14c>)
 800076e:	f00a fd3d 	bl	800b1ec <siprintf>
    OLED_ShowString(0, 36, text, 12);
 8000772:	230c      	movs	r3, #12
 8000774:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <StartOledShow+0x14c>)
 8000776:	2124      	movs	r1, #36	@ 0x24
 8000778:	2000      	movs	r0, #0
 800077a:	f009 feb7 	bl	800a4ec <OLED_ShowString>
    sprintf((char *)text, "7: %6.3f", I);
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <StartOledShow+0x16c>)
 8000780:	edd3 7a00 	vldr	s15, [r3]
 8000784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000788:	ec53 2b17 	vmov	r2, r3, d7
 800078c:	491a      	ldr	r1, [pc, #104]	@ (80007f8 <StartOledShow+0x170>)
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <StartOledShow+0x14c>)
 8000790:	f00a fd2c 	bl	800b1ec <siprintf>
    OLED_ShowString(64, 36, text, 12);
 8000794:	230c      	movs	r3, #12
 8000796:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <StartOledShow+0x14c>)
 8000798:	2124      	movs	r1, #36	@ 0x24
 800079a:	2040      	movs	r0, #64	@ 0x40
 800079c:	f009 fea6 	bl	800a4ec <OLED_ShowString>
    // 获取当前堆栈剩余空间
    sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
 80007a0:	2000      	movs	r0, #0
 80007a2:	f008 f9a9 	bl	8008af8 <uxTaskGetStackHighWaterMark>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4914      	ldr	r1, [pc, #80]	@ (80007fc <StartOledShow+0x174>)
 80007ac:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <StartOledShow+0x14c>)
 80007ae:	f00a fd1d 	bl	800b1ec <siprintf>
    OLED_ShowString(0, 48, text, 12);
 80007b2:	230c      	movs	r3, #12
 80007b4:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <StartOledShow+0x14c>)
 80007b6:	2130      	movs	r1, #48	@ 0x30
 80007b8:	2000      	movs	r0, #0
 80007ba:	f009 fe97 	bl	800a4ec <OLED_ShowString>
    OLED_Refresh();
 80007be:	f009 fd25 	bl	800a20c <OLED_Refresh>
    osDelay(100);
 80007c2:	2064      	movs	r0, #100	@ 0x64
 80007c4:	f006 fda4 	bl	8007310 <osDelay>
    sprintf((char *)text, "0: %6.3f", adcValue[0]);
 80007c8:	bf00      	nop
 80007ca:	e761      	b.n	8000690 <StartOledShow+0x8>
 80007cc:	2400521c 	.word	0x2400521c
 80007d0:	0800d238 	.word	0x0800d238
 80007d4:	2400021c 	.word	0x2400021c
 80007d8:	0800d244 	.word	0x0800d244
 80007dc:	0800d250 	.word	0x0800d250
 80007e0:	0800d25c 	.word	0x0800d25c
 80007e4:	0800d268 	.word	0x0800d268
 80007e8:	0800d274 	.word	0x0800d274
 80007ec:	2400523c 	.word	0x2400523c
 80007f0:	0800d280 	.word	0x0800d280
 80007f4:	24005240 	.word	0x24005240
 80007f8:	0800d28c 	.word	0x0800d28c
 80007fc:	0800d298 	.word	0x0800d298

08000800 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <StartDcSamp+0x3c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f009 fc1f 	bl	800a050 <INA228_getVBUS_V>
 8000812:	eef0 7a40 	vmov.f32	s15, s0
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <StartDcSamp+0x40>)
 8000818:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <StartDcSamp+0x3c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f009 fca1 	bl	800a168 <INA228_getCURRENT_A>
 8000826:	eef0 7a40 	vmov.f32	s15, s0
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <StartDcSamp+0x44>)
 800082c:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 8000830:	200a      	movs	r0, #10
 8000832:	f006 fd6d 	bl	8007310 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 8000836:	bf00      	nop
 8000838:	e7e6      	b.n	8000808 <StartDcSamp+0x8>
 800083a:	bf00      	nop
 800083c:	0800eb3c 	.word	0x0800eb3c
 8000840:	2400523c 	.word	0x2400523c
 8000844:	24005240 	.word	0x24005240

08000848 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	@ 0x30
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b69      	ldr	r3, [pc, #420]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000864:	4a67      	ldr	r2, [pc, #412]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800086e:	4b65      	ldr	r3, [pc, #404]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087c:	4b61      	ldr	r3, [pc, #388]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	4a60      	ldr	r2, [pc, #384]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	4a58      	ldr	r2, [pc, #352]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008aa:	4b56      	ldr	r3, [pc, #344]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b52      	ldr	r3, [pc, #328]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	4a51      	ldr	r2, [pc, #324]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	4a49      	ldr	r2, [pc, #292]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e6:	4b47      	ldr	r3, [pc, #284]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008f4:	4b43      	ldr	r3, [pc, #268]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fa:	4a42      	ldr	r2, [pc, #264]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 80008fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000904:	4b3f      	ldr	r3, [pc, #252]	@ (8000a04 <MX_GPIO_Init+0x1bc>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	483c      	ldr	r0, [pc, #240]	@ (8000a08 <MX_GPIO_Init+0x1c0>)
 8000918:	f001 fa70 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2102      	movs	r1, #2
 8000920:	483a      	ldr	r0, [pc, #232]	@ (8000a0c <MX_GPIO_Init+0x1c4>)
 8000922:	f001 fa6b 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2188      	movs	r1, #136	@ 0x88
 800092a:	4839      	ldr	r0, [pc, #228]	@ (8000a10 <MX_GPIO_Init+0x1c8>)
 800092c:	f001 fa66 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	4837      	ldr	r0, [pc, #220]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 8000936:	f001 fa61 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	@ 0x40
 800093e:	4835      	ldr	r0, [pc, #212]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 8000940:	f001 fa5c 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	482b      	ldr	r0, [pc, #172]	@ (8000a08 <MX_GPIO_Init+0x1c0>)
 800095c:	f001 f89e 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4825      	ldr	r0, [pc, #148]	@ (8000a0c <MX_GPIO_Init+0x1c4>)
 8000978:	f001 f890 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 800097c:	2388      	movs	r3, #136	@ 0x88
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	481f      	ldr	r0, [pc, #124]	@ (8000a10 <MX_GPIO_Init+0x1c8>)
 8000994:	f001 f882 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4818      	ldr	r0, [pc, #96]	@ (8000a10 <MX_GPIO_Init+0x1c8>)
 80009ae:	f001 f875 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80009ca:	f001 f867 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80009ce:	2340      	movs	r3, #64	@ 0x40
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <MX_GPIO_Init+0x1cc>)
 80009e6:	f001 f859 	bl	8001a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2105      	movs	r1, #5
 80009ee:	2017      	movs	r0, #23
 80009f0:	f000 ffb4 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009f4:	2017      	movs	r0, #23
 80009f6:	f000 ffcb 	bl	8001990 <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	@ 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	58024400 	.word	0x58024400
 8000a08:	58020800 	.word	0x58020800
 8000a0c:	58020400 	.word	0x58020400
 8000a10:	58021800 	.word	0x58021800
 8000a14:	58022000 	.word	0x58022000

08000a18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <MX_I2C1_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_I2C1_Init+0x7c>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a52:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a54:	f001 fa20 	bl	8001e98 <HAL_I2C_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 fa23 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a66:	f001 ffa3 	bl	80029b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 fa1a 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_I2C1_Init+0x74>)
 8000a78:	f001 ffe5 	bl	8002a46 <HAL_I2CEx_ConfigDigitalFilter>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fa11 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000248 	.word	0x24000248
 8000a90:	40005400 	.word	0x40005400
 8000a94:	307075b1 	.word	0x307075b1

08000a98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0ba      	sub	sp, #232	@ 0xe8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	22c0      	movs	r2, #192	@ 0xc0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00a fbfa 	bl	800b2b2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a26      	ldr	r2, [pc, #152]	@ (8000b5c <HAL_I2C_MspInit+0xc4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d145      	bne.n	8000b54 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ac8:	f04f 0208 	mov.w	r2, #8
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 f84a 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000aea:	f000 f9dd 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_I2C_MspInit+0xc8>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b60 <HAL_I2C_MspInit+0xc8>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afe:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_I2C_MspInit+0xc8>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0c:	23c0      	movs	r3, #192	@ 0xc0
 8000b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b12:	2312      	movs	r3, #18
 8000b14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b24:	2304      	movs	r3, #4
 8000b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <HAL_I2C_MspInit+0xcc>)
 8000b32:	f000 ffb3 	bl	8001a9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_I2C_MspInit+0xc8>)
 8000b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b3c:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_I2C_MspInit+0xc8>)
 8000b3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_I2C_MspInit+0xc8>)
 8000b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b54:	bf00      	nop
 8000b56:	37e8      	adds	r7, #232	@ 0xe8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58020400 	.word	0x58020400

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b6e:	f000 f95b 	bl	8000e28 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b72:	4b3d      	ldr	r3, [pc, #244]	@ (8000c68 <main+0x100>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d11b      	bne.n	8000bb6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7e:	f3bf 8f4f 	dsb	sy
}
 8000b82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b84:	f3bf 8f6f 	isb	sy
}
 8000b88:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b8a:	4b37      	ldr	r3, [pc, #220]	@ (8000c68 <main+0x100>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b98:	f3bf 8f6f 	isb	sy
}
 8000b9c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b9e:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <main+0x100>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a31      	ldr	r2, [pc, #196]	@ (8000c68 <main+0x100>)
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000baa:	f3bf 8f4f 	dsb	sy
}
 8000bae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bb0:	f3bf 8f6f 	isb	sy
}
 8000bb4:	e000      	b.n	8000bb8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bb6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <main+0x100>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d138      	bne.n	8000c36 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bc4:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <main+0x100>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bcc:	f3bf 8f4f 	dsb	sy
}
 8000bd0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bd2:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <main+0x100>)
 8000bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bd8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	0b5b      	lsrs	r3, r3, #13
 8000bde:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000be2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	08db      	lsrs	r3, r3, #3
 8000be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bec:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	015a      	lsls	r2, r3, #5
 8000bf2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000bf6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bfc:	491a      	ldr	r1, [pc, #104]	@ (8000c68 <main+0x100>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1ef      	bne.n	8000bee <main+0x86>
    } while(sets-- != 0U);
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1e5a      	subs	r2, r3, #1
 8000c12:	60ba      	str	r2, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1e5      	bne.n	8000be4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c18:	f3bf 8f4f 	dsb	sy
}
 8000c1c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <main+0x100>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a11      	ldr	r2, [pc, #68]	@ (8000c68 <main+0x100>)
 8000c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c28:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c2a:	f3bf 8f4f 	dsb	sy
}
 8000c2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c30:	f3bf 8f6f 	isb	sy
}
 8000c34:	e000      	b.n	8000c38 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c36:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fd4c 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f816 	bl	8000c6c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c40:	f000 f8c2 	bl	8000dc8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f7ff fe00 	bl	8000848 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c48:	f000 f934 	bl	8000eb4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c4c:	f000 f988 	bl	8000f60 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000c50:	f000 fc64 	bl	800151c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c54:	f7ff fee0 	bl	8000a18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c58:	f006 fa7e 	bl	8007158 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c5c:	f7ff fca6 	bl	80005ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c60:	f006 fa9e 	bl	80071a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <main+0xfc>
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09e      	sub	sp, #120	@ 0x78
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c76:	224c      	movs	r2, #76	@ 0x4c
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00a fb19 	bl	800b2b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2220      	movs	r2, #32
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f00a fb12 	bl	800b2b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f001 ff26 	bl	8002ae0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b48      	ldr	r3, [pc, #288]	@ (8000dbc <SystemClock_Config+0x150>)
 8000c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9c:	4a47      	ldr	r2, [pc, #284]	@ (8000dbc <SystemClock_Config+0x150>)
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ca4:	4b45      	ldr	r3, [pc, #276]	@ (8000dbc <SystemClock_Config+0x150>)
 8000ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b44      	ldr	r3, [pc, #272]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a43      	ldr	r2, [pc, #268]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000cb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b41      	ldr	r3, [pc, #260]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc6:	bf00      	nop
 8000cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cd4:	d1f8      	bne.n	8000cc8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc4 <SystemClock_Config+0x158>)
 8000cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cdc:	4a39      	ldr	r2, [pc, #228]	@ (8000dc4 <SystemClock_Config+0x158>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ce6:	4b37      	ldr	r3, [pc, #220]	@ (8000dc4 <SystemClock_Config+0x158>)
 8000ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4b31      	ldr	r3, [pc, #196]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a30      	ldr	r2, [pc, #192]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000cfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <SystemClock_Config+0x150>)
 8000d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d12:	4a2a      	ldr	r2, [pc, #168]	@ (8000dbc <SystemClock_Config+0x150>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d1a:	4b28      	ldr	r3, [pc, #160]	@ (8000dbc <SystemClock_Config+0x150>)
 8000d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d26:	bf00      	nop
 8000d28:	4b25      	ldr	r3, [pc, #148]	@ (8000dc0 <SystemClock_Config+0x154>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d34:	d1f8      	bne.n	8000d28 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d40:	2302      	movs	r3, #2
 8000d42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d44:	2302      	movs	r3, #2
 8000d46:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d4c:	23c0      	movs	r3, #192	@ 0xc0
 8000d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000d54:	2314      	movs	r3, #20
 8000d56:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fef1 	bl	8002b54 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000d78:	f000 f896 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	233f      	movs	r3, #63	@ 0x3f
 8000d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2303      	movs	r3, #3
 8000d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d8c:	2340      	movs	r3, #64	@ 0x40
 8000d8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d90:	2340      	movs	r3, #64	@ 0x40
 8000d92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d9a:	2340      	movs	r3, #64	@ 0x40
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2104      	movs	r1, #4
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 fb2f 	bl	8003408 <HAL_RCC_ClockConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000db0:	f000 f87a 	bl	8000ea8 <Error_Handler>
  }
}
 8000db4:	bf00      	nop
 8000db6:	3778      	adds	r7, #120	@ 0x78
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58000400 	.word	0x58000400
 8000dc0:	58024800 	.word	0x58024800
 8000dc4:	58024400 	.word	0x58024400

08000dc8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0b0      	sub	sp, #192	@ 0xc0
 8000dcc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	22c0      	movs	r2, #192	@ 0xc0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00a fa6c 	bl	800b2b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8000dda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000de6:	2319      	movs	r3, #25
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000dea:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 feb1 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000e1c:	f000 f844 	bl	8000ea8 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	37c0      	adds	r7, #192	@ 0xc0
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e3a:	f000 fdb7 	bl	80019ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000e46:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000e4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fdd4 	bl	8001a1c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e74:	2004      	movs	r0, #4
 8000e76:	f000 fdb1 	bl	80019dc <HAL_MPU_Enable>

}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e96:	f000 fc59 	bl	800174c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000eba:	4a28      	ldr	r2, [pc, #160]	@ (8000f5c <MX_SPI1_Init+0xa8>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000ec0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000ec8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ecc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ece:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed4:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000ee2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ee6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f14:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <MX_SPI1_Init+0xa4>)
 8000f46:	f004 f985 	bl	8005254 <HAL_SPI_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f50:	f7ff ffaa 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2400029c 	.word	0x2400029c
 8000f5c:	40013000 	.word	0x40013000

08000f60 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f64:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f66:	4a29      	ldr	r2, [pc, #164]	@ (800100c <MX_SPI2_Init+0xac>)
 8000f68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f6c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f78:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f90:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000f98:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_SPI2_Init+0xa8>)
 8000ff6:	f004 f92d 	bl	8005254 <HAL_SPI_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001000:	f7ff ff52 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	24000324 	.word	0x24000324
 800100c:	40003800 	.word	0x40003800

08001010 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	@ 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a34      	ldr	r2, [pc, #208]	@ (8001100 <HAL_SPI_MspInit+0xf0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12e      	bne.n	8001090 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001032:	4b34      	ldr	r3, [pc, #208]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 8001034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001038:	4a32      	ldr	r2, [pc, #200]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 800103a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800103e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001042:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 8001044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b2c      	ldr	r3, [pc, #176]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	4a2b      	ldr	r2, [pc, #172]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800106e:	23a0      	movs	r3, #160	@ 0xa0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107e:	2305      	movs	r3, #5
 8001080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	481f      	ldr	r0, [pc, #124]	@ (8001108 <HAL_SPI_MspInit+0xf8>)
 800108a:	f000 fd07 	bl	8001a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800108e:	e032      	b.n	80010f6 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1d      	ldr	r2, [pc, #116]	@ (800110c <HAL_SPI_MspInit+0xfc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12d      	bne.n	80010f6 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 800109c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010a0:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 80010ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_SPI_MspInit+0xf4>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010d6:	2306      	movs	r3, #6
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010e6:	2305      	movs	r3, #5
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	@ (8001110 <HAL_SPI_MspInit+0x100>)
 80010f2:	f000 fcd3 	bl	8001a9c <HAL_GPIO_Init>
}
 80010f6:	bf00      	nop
 80010f8:	3730      	adds	r7, #48	@ 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40013000 	.word	0x40013000
 8001104:	58024400 	.word	0x58024400
 8001108:	58020000 	.word	0x58020000
 800110c:	40003800 	.word	0x40003800
 8001110:	58022000 	.word	0x58022000

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_MspInit+0x38>)
 800111c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001120:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <HAL_MspInit+0x38>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_MspInit+0x38>)
 800112c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	210f      	movs	r1, #15
 800113c:	f06f 0001 	mvn.w	r0, #1
 8001140:	f000 fc0c 	bl	800195c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	58024400 	.word	0x58024400

08001150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b090      	sub	sp, #64	@ 0x40
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	d827      	bhi.n	80011ae <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	2036      	movs	r0, #54	@ 0x36
 8001164:	f000 fbfa 	bl	800195c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001168:	2036      	movs	r0, #54	@ 0x36
 800116a:	f000 fc11 	bl	8001990 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800116e:	4a29      	ldr	r2, [pc, #164]	@ (8001214 <HAL_InitTick+0xc4>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <HAL_InitTick+0xc8>)
 8001176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117a:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <HAL_InitTick+0xc8>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001184:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <HAL_InitTick+0xc8>)
 8001186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001192:	f107 0210 	add.w	r2, r7, #16
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fca9 	bl	8003af4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <HAL_InitTick+0x6a>
 80011ac:	e001      	b.n	80011b2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e02b      	b.n	800120a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b2:	f002 fc89 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 80011b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ba:	f002 fc85 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011c6:	4a15      	ldr	r2, [pc, #84]	@ (800121c <HAL_InitTick+0xcc>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9b      	lsrs	r3, r3, #18
 80011ce:	3b01      	subs	r3, #1
 80011d0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_InitTick+0xd0>)
 80011d4:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <HAL_InitTick+0xd4>)
 80011d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_InitTick+0xd0>)
 80011da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_InitTick+0xd0>)
 80011e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <HAL_InitTick+0xd0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_InitTick+0xd0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <HAL_InitTick+0xd0>)
 80011f4:	f004 fe9b 	bl	8005f2e <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d104      	bne.n	8001208 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011fe:	4808      	ldr	r0, [pc, #32]	@ (8001220 <HAL_InitTick+0xd0>)
 8001200:	f004 fef6 	bl	8005ff0 <HAL_TIM_Base_Start_IT>
 8001204:	4603      	mov	r3, r0
 8001206:	e000      	b.n	800120a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	3740      	adds	r7, #64	@ 0x40
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000008 	.word	0x24000008
 8001218:	58024400 	.word	0x58024400
 800121c:	431bde83 	.word	0x431bde83
 8001220:	240003ac 	.word	0x240003ac
 8001224:	40001000 	.word	0x40001000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 8001262:	2040      	movs	r0, #64	@ 0x40
 8001264:	f000 fdfd 	bl	8001e62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <TIM6_DAC_IRQHandler+0x10>)
 8001272:	f005 f89b 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	240003ac 	.word	0x240003ac

08001280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return 1;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_kill>:

int _kill(int pid, int sig)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800129a:	f00a f86d 	bl	800b378 <__errno>
 800129e:	4603      	mov	r3, r0
 80012a0:	2216      	movs	r2, #22
 80012a2:	601a      	str	r2, [r3, #0]
  return -1;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_exit>:

void _exit (int status)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ffe7 	bl	8001290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012c2:	bf00      	nop
 80012c4:	e7fd      	b.n	80012c2 <_exit+0x12>

080012c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e00a      	b.n	80012ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d8:	f3af 8000 	nop.w
 80012dc:	4601      	mov	r1, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	60ba      	str	r2, [r7, #8]
 80012e4:	b2ca      	uxtb	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf0      	blt.n	80012d8 <_read+0x12>
  }

  return len;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e009      	b.n	8001326 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	60ba      	str	r2, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbf1      	blt.n	8001312 <_write+0x12>
  }
  return len;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_close>:

int _close(int file)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001360:	605a      	str	r2, [r3, #4]
  return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_isatty>:

int _isatty(int file)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001378:	2301      	movs	r3, #1
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f009 ffd2 	bl	800b378 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	@ (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	24080000 	.word	0x24080000
 8001400:	00000400 	.word	0x00000400
 8001404:	240003f8 	.word	0x240003f8
 8001408:	24005390 	.word	0x24005390

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001410:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <SystemInit+0xe4>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001416:	4a36      	ldr	r2, [pc, #216]	@ (80014f0 <SystemInit+0xe4>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001420:	4b34      	ldr	r3, [pc, #208]	@ (80014f4 <SystemInit+0xe8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	2b06      	cmp	r3, #6
 800142a:	d807      	bhi.n	800143c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800142c:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <SystemInit+0xe8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 030f 	bic.w	r3, r3, #15
 8001434:	4a2f      	ldr	r2, [pc, #188]	@ (80014f4 <SystemInit+0xe8>)
 8001436:	f043 0307 	orr.w	r3, r3, #7
 800143a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800143c:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <SystemInit+0xec>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2d      	ldr	r2, [pc, #180]	@ (80014f8 <SystemInit+0xec>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001448:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <SystemInit+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <SystemInit+0xec>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4929      	ldr	r1, [pc, #164]	@ (80014f8 <SystemInit+0xec>)
 8001454:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <SystemInit+0xf0>)
 8001456:	4013      	ands	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800145a:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <SystemInit+0xe8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <SystemInit+0xe8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 030f 	bic.w	r3, r3, #15
 800146e:	4a21      	ldr	r2, [pc, #132]	@ (80014f4 <SystemInit+0xe8>)
 8001470:	f043 0307 	orr.w	r3, r3, #7
 8001474:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <SystemInit+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800147c:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <SystemInit+0xec>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <SystemInit+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <SystemInit+0xec>)
 800148a:	4a1d      	ldr	r2, [pc, #116]	@ (8001500 <SystemInit+0xf4>)
 800148c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <SystemInit+0xec>)
 8001490:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <SystemInit+0xf8>)
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <SystemInit+0xec>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <SystemInit+0xfc>)
 8001498:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <SystemInit+0xec>)
 800149c:	2200      	movs	r2, #0
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014a0:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <SystemInit+0xec>)
 80014a2:	4a19      	ldr	r2, [pc, #100]	@ (8001508 <SystemInit+0xfc>)
 80014a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <SystemInit+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <SystemInit+0xec>)
 80014ae:	4a16      	ldr	r2, [pc, #88]	@ (8001508 <SystemInit+0xfc>)
 80014b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <SystemInit+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <SystemInit+0xec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <SystemInit+0xec>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <SystemInit+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <SystemInit+0x100>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <SystemInit+0x104>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014d6:	d202      	bcs.n	80014de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <SystemInit+0x108>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <SystemInit+0x10c>)
 80014e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	52002000 	.word	0x52002000
 80014f8:	58024400 	.word	0x58024400
 80014fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001500:	02020200 	.word	0x02020200
 8001504:	01ff0000 	.word	0x01ff0000
 8001508:	01010280 	.word	0x01010280
 800150c:	5c001000 	.word	0x5c001000
 8001510:	ffff0000 	.word	0xffff0000
 8001514:	51008108 	.word	0x51008108
 8001518:	52004000 	.word	0x52004000

0800151c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <MX_TIM2_Init+0xb0>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <MX_TIM2_Init+0xb0>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <MX_TIM2_Init+0xb0>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001554:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <MX_TIM2_Init+0xb0>)
 8001556:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800155a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_TIM2_Init+0xb0>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <MX_TIM2_Init+0xb0>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001568:	4818      	ldr	r0, [pc, #96]	@ (80015cc <MX_TIM2_Init+0xb0>)
 800156a:	f004 fdb9 	bl	80060e0 <HAL_TIM_PWM_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001574:	f7ff fc98 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4811      	ldr	r0, [pc, #68]	@ (80015cc <MX_TIM2_Init+0xb0>)
 8001588:	f005 fcf6 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001592:	f7ff fc89 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001596:	2360      	movs	r3, #96	@ 0x60
 8001598:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 800159a:	f242 3327 	movw	r3, #8999	@ 0x2327
 800159e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4807      	ldr	r0, [pc, #28]	@ (80015cc <MX_TIM2_Init+0xb0>)
 80015b0:	f005 f804 	bl	80065bc <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80015ba:	f7ff fc75 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <MX_TIM2_Init+0xb0>)
 80015c0:	f000 f826 	bl	8001610 <HAL_TIM_MspPostInit>

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	240003fc 	.word	0x240003fc

080015d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e0:	d10e      	bne.n	8001600 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_TIM_PWM_MspInit+0x3c>)
 80015e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015e8:	4a08      	ldr	r2, [pc, #32]	@ (800160c <HAL_TIM_PWM_MspInit+0x3c>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_TIM_PWM_MspInit+0x3c>)
 80015f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	58024400 	.word	0x58024400

08001610 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001630:	d11e      	bne.n	8001670 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <HAL_TIM_MspPostInit+0x68>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <HAL_TIM_MspPostInit+0x68>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001650:	2301      	movs	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4619      	mov	r1, r3
 800166a:	4804      	ldr	r0, [pc, #16]	@ (800167c <HAL_TIM_MspPostInit+0x6c>)
 800166c:	f000 fa16 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	58024400 	.word	0x58024400
 800167c:	58020000 	.word	0x58020000

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001684:	f7ff fec2 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	@ (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	@ (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f009 fe69 	bl	800b384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7ff fa59 	bl	8000b68 <main>
  bx  lr
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c0:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 80016c4:	0800eec0 	.word	0x0800eec0
  ldr r2, =_sbss
 80016c8:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 80016cc:	24005390 	.word	0x24005390

080016d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC3_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f933 	bl	8001946 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e0:	f002 f848 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_Init+0x68>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4913      	ldr	r1, [pc, #76]	@ (8001740 <HAL_Init+0x6c>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_Init+0x68>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	4a0e      	ldr	r2, [pc, #56]	@ (8001740 <HAL_Init+0x6c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_Init+0x70>)
 8001716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_Init+0x74>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f7ff fd16 	bl	8001150 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e002      	b.n	8001734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172e:	f7ff fcf1 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	58024400 	.word	0x58024400
 8001740:	0800d32c 	.word	0x0800d32c
 8001744:	24000004 	.word	0x24000004
 8001748:	24000000 	.word	0x24000000

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000448 	.word	0x24000448

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	24000448 	.word	0x24000448

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2400000c 	.word	0x2400000c

080017d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017d8:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_GetREVID+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0c1b      	lsrs	r3, r3, #16
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	5c001000 	.word	0x5c001000

080017ec <__NVIC_SetPriorityGrouping>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <__NVIC_SetPriorityGrouping+0x40>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	4313      	orrs	r3, r2
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <__NVIC_SetPriorityGrouping+0x40>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	05fa0000 	.word	0x05fa0000

08001834 <__NVIC_GetPriorityGrouping>:
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	@ (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	@ 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff4c 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196a:	f7ff ff63 	bl	8001834 <__NVIC_GetPriorityGrouping>
 800196e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	6978      	ldr	r0, [r7, #20]
 8001976:	f7ff ffb3 	bl	80018e0 <NVIC_EncodePriority>
 800197a:	4602      	mov	r2, r0
 800197c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff82 	bl	800188c <__NVIC_SetPriority>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff56 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019b0:	f3bf 8f5f 	dmb	sy
}
 80019b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <HAL_MPU_Disable+0x28>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <HAL_MPU_Disable+0x28>)
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_MPU_Disable+0x2c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00
 80019d8:	e000ed90 	.word	0xe000ed90

080019dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_MPU_Enable+0x38>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_MPU_Enable+0x3c>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <HAL_MPU_Enable+0x3c>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019fa:	f3bf 8f4f 	dsb	sy
}
 80019fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a00:	f3bf 8f6f 	isb	sy
}
 8001a04:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed90 	.word	0xe000ed90
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	785a      	ldrb	r2, [r3, #1]
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <HAL_MPU_ConfigRegion+0x7c>)
 8001a2a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_MPU_ConfigRegion+0x7c>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <HAL_MPU_ConfigRegion+0x7c>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a38:	4a17      	ldr	r2, [pc, #92]	@ (8001a98 <HAL_MPU_ConfigRegion+0x7c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7b1b      	ldrb	r3, [r3, #12]
 8001a44:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7adb      	ldrb	r3, [r3, #11]
 8001a4a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7a9b      	ldrb	r3, [r3, #10]
 8001a52:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7b5b      	ldrb	r3, [r3, #13]
 8001a5a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7b9b      	ldrb	r3, [r3, #14]
 8001a62:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7bdb      	ldrb	r3, [r3, #15]
 8001a6a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7a5b      	ldrb	r3, [r3, #9]
 8001a72:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7a1b      	ldrb	r3, [r3, #8]
 8001a7a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a7c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a86:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a88:	6113      	str	r3, [r2, #16]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed90 	.word	0xe000ed90

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001aaa:	4b89      	ldr	r3, [pc, #548]	@ (8001cd0 <HAL_GPIO_Init+0x234>)
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aae:	e194      	b.n	8001dda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8186 	beq.w	8001dd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x44>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d017      	beq.n	8001b7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d123      	bne.n	8001bd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	69b9      	ldr	r1, [r7, #24]
 8001bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0203 	and.w	r2, r3, #3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80e0 	beq.w	8001dd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <HAL_GPIO_Init+0x238>)
 8001c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_GPIO_Init+0x238>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c24:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <HAL_GPIO_Init+0x238>)
 8001c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a29      	ldr	r2, [pc, #164]	@ (8001cd8 <HAL_GPIO_Init+0x23c>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a20      	ldr	r2, [pc, #128]	@ (8001cdc <HAL_GPIO_Init+0x240>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d052      	beq.n	8001d04 <HAL_GPIO_Init+0x268>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <HAL_GPIO_Init+0x244>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_GPIO_Init+0x22e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce4 <HAL_GPIO_Init+0x248>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02b      	beq.n	8001cc6 <HAL_GPIO_Init+0x22a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce8 <HAL_GPIO_Init+0x24c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x226>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <HAL_GPIO_Init+0x250>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x222>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <HAL_GPIO_Init+0x254>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x21e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf4 <HAL_GPIO_Init+0x258>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x21a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <HAL_GPIO_Init+0x25c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x216>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a18      	ldr	r2, [pc, #96]	@ (8001cfc <HAL_GPIO_Init+0x260>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x212>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <HAL_GPIO_Init+0x264>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x20e>
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	e02d      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001caa:	230a      	movs	r3, #10
 8001cac:	e02b      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e029      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	e027      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e025      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	e023      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e021      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e01f      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e01d      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e01b      	b.n	8001d06 <HAL_GPIO_Init+0x26a>
 8001cce:	bf00      	nop
 8001cd0:	58000080 	.word	0x58000080
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	58000400 	.word	0x58000400
 8001cdc:	58020000 	.word	0x58020000
 8001ce0:	58020400 	.word	0x58020400
 8001ce4:	58020800 	.word	0x58020800
 8001ce8:	58020c00 	.word	0x58020c00
 8001cec:	58021000 	.word	0x58021000
 8001cf0:	58021400 	.word	0x58021400
 8001cf4:	58021800 	.word	0x58021800
 8001cf8:	58021c00 	.word	0x58021c00
 8001cfc:	58022000 	.word	0x58022000
 8001d00:	58022400 	.word	0x58022400
 8001d04:	2300      	movs	r3, #0
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	0092      	lsls	r2, r2, #2
 8001d0e:	4093      	lsls	r3, r2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d16:	4938      	ldr	r1, [pc, #224]	@ (8001df8 <HAL_GPIO_Init+0x35c>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f ae63 	bne.w	8001ab0 <HAL_GPIO_Init+0x14>
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	3724      	adds	r7, #36	@ 0x24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	58000400 	.word	0x58000400

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	619a      	str	r2, [r3, #24]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	460b      	mov	r3, r1
 8001e38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e40:	887a      	ldrh	r2, [r7, #2]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	041a      	lsls	r2, r3, #16
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	400b      	ands	r3, r1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f008 fbe9 	bl	800a660 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e08b      	b.n	8001fc2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fdea 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	@ 0x24
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ee8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e006      	b.n	8001f20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d108      	bne.n	8001f3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	e007      	b.n	8001f4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_I2C_Init+0x134>)
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69d9      	ldr	r1, [r3, #28]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	02008000 	.word	0x02008000

08001fd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	f040 80f9 	bne.w	80021ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_I2C_Mem_Write+0x34>
 8001ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0ed      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_I2C_Mem_Write+0x4e>
 800201a:	2302      	movs	r3, #2
 800201c:	e0e6      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002026:	f7ff fba5 	bl	8001774 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2319      	movs	r3, #25
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fac3 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0d1      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2221      	movs	r2, #33	@ 0x21
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2240      	movs	r2, #64	@ 0x40
 8002054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a3a      	ldr	r2, [r7, #32]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002070:	88f8      	ldrh	r0, [r7, #6]
 8002072:	893a      	ldrh	r2, [r7, #8]
 8002074:	8979      	ldrh	r1, [r7, #10]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4603      	mov	r3, r0
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f9d3 	bl	800242c <I2C_RequestMemoryWrite>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0a9      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2bff      	cmp	r3, #255	@ 0xff
 80020a0:	d90e      	bls.n	80020c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	22ff      	movs	r2, #255	@ 0xff
 80020a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	8979      	ldrh	r1, [r7, #10]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fc47 	bl	800294c <I2C_TransferConfig>
 80020be:	e00f      	b.n	80020e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	8979      	ldrh	r1, [r7, #10]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fc36 	bl	800294c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fac6 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e07b      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d034      	beq.n	8002198 <HAL_I2C_Mem_Write+0x1c8>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d130      	bne.n	8002198 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213c:	2200      	movs	r2, #0
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fa3f 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e04d      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2bff      	cmp	r3, #255	@ 0xff
 8002158:	d90e      	bls.n	8002178 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	22ff      	movs	r2, #255	@ 0xff
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002164:	b2da      	uxtb	r2, r3
 8002166:	8979      	ldrh	r1, [r7, #10]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fbeb 	bl	800294c <I2C_TransferConfig>
 8002176:	e00f      	b.n	8002198 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002186:	b2da      	uxtb	r2, r3
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	2300      	movs	r3, #0
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fbda 	bl	800294c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d19e      	bne.n	80020e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 faac 	bl	8002704 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e01a      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2220      	movs	r2, #32
 80021bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_I2C_Mem_Write+0x224>)
 80021ca:	400b      	ands	r3, r1
 80021cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	fe00e800 	.word	0xfe00e800

080021f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	f040 80fd 	bne.w	800241a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_I2C_Mem_Read+0x34>
 8002226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0f1      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Mem_Read+0x4e>
 8002242:	2302      	movs	r3, #2
 8002244:	e0ea      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800224e:	f7ff fa91 	bl	8001774 <HAL_GetTick>
 8002252:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2319      	movs	r3, #25
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f9af 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0d5      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2222      	movs	r2, #34	@ 0x22
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2240      	movs	r2, #64	@ 0x40
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002290:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002298:	88f8      	ldrh	r0, [r7, #6]
 800229a:	893a      	ldrh	r2, [r7, #8]
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4603      	mov	r3, r0
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f913 	bl	80024d4 <I2C_RequestMemoryRead>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0ad      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2bff      	cmp	r3, #255	@ 0xff
 80022c8:	d90e      	bls.n	80022e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	22ff      	movs	r2, #255	@ 0xff
 80022ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	4b52      	ldr	r3, [pc, #328]	@ (8002424 <HAL_I2C_Mem_Read+0x22c>)
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb33 	bl	800294c <I2C_TransferConfig>
 80022e6:	e00f      	b.n	8002308 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	8979      	ldrh	r1, [r7, #10]
 80022fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002424 <HAL_I2C_Mem_Read+0x22c>)
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fb22 	bl	800294c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230e:	2200      	movs	r2, #0
 8002310:	2104      	movs	r1, #4
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f956 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07c      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d034      	beq.n	80023c8 <HAL_I2C_Mem_Read+0x1d0>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002362:	2b00      	cmp	r3, #0
 8002364:	d130      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236c:	2200      	movs	r2, #0
 800236e:	2180      	movs	r1, #128	@ 0x80
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f927 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e04d      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2bff      	cmp	r3, #255	@ 0xff
 8002388:	d90e      	bls.n	80023a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	22ff      	movs	r2, #255	@ 0xff
 800238e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	b2da      	uxtb	r2, r3
 8002396:	8979      	ldrh	r1, [r7, #10]
 8002398:	2300      	movs	r3, #0
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fad3 	bl	800294c <I2C_TransferConfig>
 80023a6:	e00f      	b.n	80023c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	8979      	ldrh	r1, [r7, #10]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fac2 	bl	800294c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d19a      	bne.n	8002308 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f994 	bl	8002704 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e01a      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_I2C_Mem_Read+0x230>)
 80023fa:	400b      	ands	r3, r1
 80023fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	e000      	b.n	800241c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800241a:	2302      	movs	r3, #2
  }
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	80002400 	.word	0x80002400
 8002428:	fe00e800 	.word	0xfe00e800

0800242c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	8979      	ldrh	r1, [r7, #10]
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <I2C_RequestMemoryWrite+0xa4>)
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fa79 	bl	800294c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	69b9      	ldr	r1, [r7, #24]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f909 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e02c      	b.n	80024c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002474:	893b      	ldrh	r3, [r7, #8]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
 800247e:	e015      	b.n	80024ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002480:	893b      	ldrh	r3, [r7, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	69b9      	ldr	r1, [r7, #24]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f8ef 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e012      	b.n	80024c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024a2:	893b      	ldrh	r3, [r7, #8]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2200      	movs	r2, #0
 80024b4:	2180      	movs	r1, #128	@ 0x80
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f884 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	80002000 	.word	0x80002000

080024d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	817b      	strh	r3, [r7, #10]
 80024e6:	460b      	mov	r3, r1
 80024e8:	813b      	strh	r3, [r7, #8]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <I2C_RequestMemoryRead+0xa4>)
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2300      	movs	r3, #0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fa26 	bl	800294c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8b6 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e02c      	b.n	800256e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800251a:	893b      	ldrh	r3, [r7, #8]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
 8002524:	e015      	b.n	8002552 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002526:	893b      	ldrh	r3, [r7, #8]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	b29b      	uxth	r3, r3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	69b9      	ldr	r1, [r7, #24]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f89c 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e012      	b.n	800256e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002548:	893b      	ldrh	r3, [r7, #8]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2200      	movs	r2, #0
 800255a:	2140      	movs	r1, #64	@ 0x40
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f831 	bl	80025c4 <I2C_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	80002000 	.word	0x80002000

0800257c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d103      	bne.n	800259a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d007      	beq.n	80025b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	619a      	str	r2, [r3, #24]
  }
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d4:	e03b      	b.n	800264e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f8d6 	bl	800278c <I2C_IsErrorOccurred>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e041      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d02d      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7ff f8bf 	bl	8001774 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d122      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	429a      	cmp	r2, r3
 8002624:	d113      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	429a      	cmp	r2, r3
 800266a:	d0b4      	beq.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002682:	e033      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f87f 	bl	800278c <I2C_IsErrorOccurred>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e031      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d025      	beq.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7ff f868 	bl	8001774 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11a      	bne.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d013      	beq.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d1c4      	bne.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002710:	e02f      	b.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f838 	bl	800278c <I2C_IsErrorOccurred>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02d      	b.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7ff f825 	bl	8001774 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11a      	bne.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b20      	cmp	r3, #32
 8002748:	d013      	beq.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d1c8      	bne.n	8002712 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d068      	beq.n	800288a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c0:	e049      	b.n	8002856 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d045      	beq.n	8002856 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7fe ffd3 	bl	8001774 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_IsErrorOccurred+0x54>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d13a      	bne.n	8002856 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002802:	d121      	bne.n	8002848 <I2C_IsErrorOccurred+0xbc>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800280a:	d01d      	beq.n	8002848 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b20      	cmp	r3, #32
 8002810:	d01a      	beq.n	8002848 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002820:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002822:	f7fe ffa7 	bl	8001774 <HAL_GetTick>
 8002826:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002828:	e00e      	b.n	8002848 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800282a:	f7fe ffa3 	bl	8001774 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b19      	cmp	r3, #25
 8002836:	d907      	bls.n	8002848 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f043 0320 	orr.w	r3, r3, #32
 800283e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002846:	e006      	b.n	8002856 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d1e9      	bne.n	800282a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d003      	beq.n	800286c <I2C_IsErrorOccurred+0xe0>
 8002864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0aa      	beq.n	80027c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800286c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80028f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01c      	beq.n	800293a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fe3b 	bl	800257c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <I2C_IsErrorOccurred+0x1bc>)
 8002912:	400b      	ands	r3, r1
 8002914:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800293a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	@ 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	fe00e800 	.word	0xfe00e800

0800294c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	817b      	strh	r3, [r7, #10]
 800295a:	4613      	mov	r3, r2
 800295c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002964:	7a7b      	ldrb	r3, [r7, #9]
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800296c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	4313      	orrs	r3, r2
 8002976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800297a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	0d5b      	lsrs	r3, r3, #21
 8002986:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <I2C_TransferConfig+0x60>)
 800298c:	430b      	orrs	r3, r1
 800298e:	43db      	mvns	r3, r3
 8002990:	ea02 0103 	and.w	r1, r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	03ff63ff 	.word	0x03ff63ff

080029b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d138      	bne.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e032      	b.n	8002a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	@ 0x24
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d139      	bne.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e033      	b.n	8002ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2224      	movs	r2, #36	@ 0x24
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ae8:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00a      	beq.n	8002b0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d001      	beq.n	8002b06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e01f      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e01d      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	490f      	ldr	r1, [pc, #60]	@ (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b1a:	f7fe fe2b 	bl	8001774 <HAL_GetTick>
 8002b1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b20:	e009      	b.n	8002b36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b22:	f7fe fe27 	bl	8001774 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b30:	d901      	bls.n	8002b36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e007      	b.n	8002b46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_PWREx_ConfigSupply+0x70>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b42:	d1ee      	bne.n	8002b22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	58024800 	.word	0x58024800

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	@ 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f000 bc48 	b.w	80033f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8088 	beq.w	8002c86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b76:	4b99      	ldr	r3, [pc, #612]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b80:	4b96      	ldr	r3, [pc, #600]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d007      	beq.n	8002b9c <HAL_RCC_OscConfig+0x48>
 8002b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8e:	2b18      	cmp	r3, #24
 8002b90:	d111      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x62>
 8002b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d06d      	beq.n	8002c84 <HAL_RCC_OscConfig+0x130>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d169      	bne.n	8002c84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f000 bc21 	b.w	80033f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x7a>
 8002bc0:	4b86      	ldr	r3, [pc, #536]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a85      	ldr	r2, [pc, #532]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e02e      	b.n	8002c2c <HAL_RCC_OscConfig+0xd8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x9c>
 8002bd6:	4b81      	ldr	r3, [pc, #516]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a80      	ldr	r2, [pc, #512]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b7e      	ldr	r3, [pc, #504]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7d      	ldr	r2, [pc, #500]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002be8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e01d      	b.n	8002c2c <HAL_RCC_OscConfig+0xd8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0xc0>
 8002bfa:	4b78      	ldr	r3, [pc, #480]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a77      	ldr	r2, [pc, #476]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a74      	ldr	r2, [pc, #464]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0xd8>
 8002c14:	4b71      	ldr	r3, [pc, #452]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a70      	ldr	r2, [pc, #448]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b6e      	ldr	r3, [pc, #440]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6d      	ldr	r2, [pc, #436]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fd9e 	bl	8001774 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fd9a 	bl	8001774 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	@ 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e3d4      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe8>
 8002c5a:	e014      	b.n	8002c86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fd8a 	bl	8001774 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c64:	f7fe fd86 	bl	8001774 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	@ 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e3c0      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c76:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x110>
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80ca 	beq.w	8002e28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c94:	4b51      	ldr	r3, [pc, #324]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_RCC_OscConfig+0x166>
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2b18      	cmp	r3, #24
 8002cae:	d156      	bne.n	8002d5e <HAL_RCC_OscConfig+0x20a>
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d151      	bne.n	8002d5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cba:	4b48      	ldr	r3, [pc, #288]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e392      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cd2:	4b42      	ldr	r3, [pc, #264]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0219 	bic.w	r2, r3, #25
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	493f      	ldr	r1, [pc, #252]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fd46 	bl	8001774 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fd42 	bl	8001774 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e37c      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cfe:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	f7fe fd63 	bl	80017d4 <HAL_GetREVID>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d817      	bhi.n	8002d48 <HAL_RCC_OscConfig+0x1f4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d108      	bne.n	8002d32 <HAL_RCC_OscConfig+0x1de>
 8002d20:	4b2e      	ldr	r3, [pc, #184]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d28:	4a2c      	ldr	r2, [pc, #176]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d30:	e07a      	b.n	8002e28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b2a      	ldr	r3, [pc, #168]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	031b      	lsls	r3, r3, #12
 8002d40:	4926      	ldr	r1, [pc, #152]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d46:	e06f      	b.n	8002e28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	4921      	ldr	r1, [pc, #132]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5c:	e064      	b.n	8002e28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d047      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d66:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 0219 	bic.w	r2, r3, #25
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	491a      	ldr	r1, [pc, #104]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fcfc 	bl	8001774 <HAL_GetTick>
 8002d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe fcf8 	bl	8001774 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e332      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	f7fe fd19 	bl	80017d4 <HAL_GetREVID>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d819      	bhi.n	8002de0 <HAL_RCC_OscConfig+0x28c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b40      	cmp	r3, #64	@ 0x40
 8002db2:	d108      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x272>
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002dbc:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc2:	6053      	str	r3, [r2, #4]
 8002dc4:	e030      	b.n	8002e28 <HAL_RCC_OscConfig+0x2d4>
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	031b      	lsls	r3, r3, #12
 8002dd4:	4901      	ldr	r1, [pc, #4]	@ (8002ddc <HAL_RCC_OscConfig+0x288>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
 8002dda:	e025      	b.n	8002e28 <HAL_RCC_OscConfig+0x2d4>
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	4b9a      	ldr	r3, [pc, #616]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	4997      	ldr	r1, [pc, #604]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
 8002df4:	e018      	b.n	8002e28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b95      	ldr	r3, [pc, #596]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a94      	ldr	r2, [pc, #592]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fcb7 	bl	8001774 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fcb3 	bl	8001774 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e2ed      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e1c:	4b8b      	ldr	r3, [pc, #556]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a9 	beq.w	8002f88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e36:	4b85      	ldr	r3, [pc, #532]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e40:	4b82      	ldr	r3, [pc, #520]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d007      	beq.n	8002e5c <HAL_RCC_OscConfig+0x308>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b18      	cmp	r3, #24
 8002e50:	d13a      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x374>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d135      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x320>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b80      	cmp	r3, #128	@ 0x80
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e2c1      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e74:	f7fe fcae 	bl	80017d4 <HAL_GetREVID>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d817      	bhi.n	8002eb2 <HAL_RCC_OscConfig+0x35e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d108      	bne.n	8002e9c <HAL_RCC_OscConfig+0x348>
 8002e8a:	4b70      	ldr	r3, [pc, #448]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e92:	4a6e      	ldr	r2, [pc, #440]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e9a:	e075      	b.n	8002f88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	069b      	lsls	r3, r3, #26
 8002eaa:	4968      	ldr	r1, [pc, #416]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eb0:	e06a      	b.n	8002f88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eb2:	4b66      	ldr	r3, [pc, #408]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	4962      	ldr	r1, [pc, #392]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ec6:	e05f      	b.n	8002f88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d042      	beq.n	8002f56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fc4a 	bl	8001774 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ee4:	f7fe fc46 	bl	8001774 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e280      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ef6:	4b55      	ldr	r3, [pc, #340]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f02:	f7fe fc67 	bl	80017d4 <HAL_GetREVID>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d817      	bhi.n	8002f40 <HAL_RCC_OscConfig+0x3ec>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d108      	bne.n	8002f2a <HAL_RCC_OscConfig+0x3d6>
 8002f18:	4b4c      	ldr	r3, [pc, #304]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f20:	4a4a      	ldr	r2, [pc, #296]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f26:	6053      	str	r3, [r2, #4]
 8002f28:	e02e      	b.n	8002f88 <HAL_RCC_OscConfig+0x434>
 8002f2a:	4b48      	ldr	r3, [pc, #288]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	069b      	lsls	r3, r3, #26
 8002f38:	4944      	ldr	r1, [pc, #272]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
 8002f3e:	e023      	b.n	8002f88 <HAL_RCC_OscConfig+0x434>
 8002f40:	4b42      	ldr	r3, [pc, #264]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	493f      	ldr	r1, [pc, #252]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
 8002f54:	e018      	b.n	8002f88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f56:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe fc07 	bl	8001774 <HAL_GetTick>
 8002f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fc03 	bl	8001774 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e23d      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f7c:	4b33      	ldr	r3, [pc, #204]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d036      	beq.n	8003002 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d019      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fbe4 	bl	8001774 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fbe0 	bl	8001774 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e21a      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fc2:	4b22      	ldr	r3, [pc, #136]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x45c>
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fbca 	bl	8001774 <HAL_GetTick>
 8002fe0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fbc6 	bl	8001774 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e200      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d039      	beq.n	8003082 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01c      	beq.n	8003050 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a0c      	ldr	r2, [pc, #48]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 800301c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003020:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003022:	f7fe fba7 	bl	8001774 <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800302a:	f7fe fba3 	bl	8001774 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1dd      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_RCC_OscConfig+0x4f8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x4d6>
 8003048:	e01b      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
 800304a:	bf00      	nop
 800304c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003050:	4b9b      	ldr	r3, [pc, #620]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a9a      	ldr	r2, [pc, #616]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003056:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800305a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800305c:	f7fe fb8a 	bl	8001774 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003064:	f7fe fb86 	bl	8001774 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1c0      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003076:	4b92      	ldr	r3, [pc, #584]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8081 	beq.w	8003192 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003090:	4b8c      	ldr	r3, [pc, #560]	@ (80032c4 <HAL_RCC_OscConfig+0x770>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a8b      	ldr	r2, [pc, #556]	@ (80032c4 <HAL_RCC_OscConfig+0x770>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800309c:	f7fe fb6a 	bl	8001774 <HAL_GetTick>
 80030a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7fe fb66 	bl	8001774 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	@ 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1a0      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b6:	4b83      	ldr	r3, [pc, #524]	@ (80032c4 <HAL_RCC_OscConfig+0x770>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d106      	bne.n	80030d8 <HAL_RCC_OscConfig+0x584>
 80030ca:	4b7d      	ldr	r3, [pc, #500]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	4a7c      	ldr	r2, [pc, #496]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d6:	e02d      	b.n	8003134 <HAL_RCC_OscConfig+0x5e0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10c      	bne.n	80030fa <HAL_RCC_OscConfig+0x5a6>
 80030e0:	4b77      	ldr	r3, [pc, #476]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e4:	4a76      	ldr	r2, [pc, #472]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ec:	4b74      	ldr	r3, [pc, #464]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f0:	4a73      	ldr	r2, [pc, #460]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80030f2:	f023 0304 	bic.w	r3, r3, #4
 80030f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0x5e0>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x5c8>
 8003102:	4b6f      	ldr	r3, [pc, #444]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	4a6e      	ldr	r2, [pc, #440]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	@ 0x70
 800310e:	4b6c      	ldr	r3, [pc, #432]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a6b      	ldr	r2, [pc, #428]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0x5e0>
 800311c:	4b68      	ldr	r3, [pc, #416]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003120:	4a67      	ldr	r2, [pc, #412]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	@ 0x70
 8003128:	4b65      	ldr	r3, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a64      	ldr	r2, [pc, #400]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800312e:	f023 0304 	bic.w	r3, r3, #4
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fb1a 	bl	8001774 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003142:	e00a      	b.n	800315a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fe fb16 	bl	8001774 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e14e      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800315a:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ee      	beq.n	8003144 <HAL_RCC_OscConfig+0x5f0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe fb04 	bl	8001774 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe fb00 	bl	8001774 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e138      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003186:	4b4e      	ldr	r3, [pc, #312]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ee      	bne.n	8003170 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 812d 	beq.w	80033f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800319c:	4b48      	ldr	r3, [pc, #288]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031a4:	2b18      	cmp	r3, #24
 80031a6:	f000 80bd 	beq.w	8003324 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	f040 809e 	bne.w	80032f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b4:	4b42      	ldr	r3, [pc, #264]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a41      	ldr	r2, [pc, #260]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80031ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fad8 	bl	8001774 <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe fad4 	bl	8001774 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e10e      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031da:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e6:	4b36      	ldr	r3, [pc, #216]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80031e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ea:	4b37      	ldr	r3, [pc, #220]	@ (80032c8 <HAL_RCC_OscConfig+0x774>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	430a      	orrs	r2, r1
 80031fa:	4931      	ldr	r1, [pc, #196]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	3b01      	subs	r3, #1
 8003206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320e:	3b01      	subs	r3, #1
 8003210:	025b      	lsls	r3, r3, #9
 8003212:	b29b      	uxth	r3, r3
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	3b01      	subs	r3, #1
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003230:	4923      	ldr	r1, [pc, #140]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003232:	4313      	orrs	r3, r2
 8003234:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	4a21      	ldr	r2, [pc, #132]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003242:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003246:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_RCC_OscConfig+0x778>)
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800324e:	00d2      	lsls	r2, r2, #3
 8003250:	491b      	ldr	r1, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003256:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	f023 020c 	bic.w	r2, r3, #12
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	4917      	ldr	r1, [pc, #92]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003268:	4b15      	ldr	r3, [pc, #84]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	f023 0202 	bic.w	r2, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	4912      	ldr	r1, [pc, #72]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800327a:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	4a10      	ldr	r2, [pc, #64]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003286:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 800328c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003290:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	4a0a      	ldr	r2, [pc, #40]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 8003298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800329c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a2:	4a07      	ldr	r2, [pc, #28]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a04      	ldr	r2, [pc, #16]	@ (80032c0 <HAL_RCC_OscConfig+0x76c>)
 80032b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fe fa5d 	bl	8001774 <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032bc:	e011      	b.n	80032e2 <HAL_RCC_OscConfig+0x78e>
 80032be:	bf00      	nop
 80032c0:	58024400 	.word	0x58024400
 80032c4:	58024800 	.word	0x58024800
 80032c8:	fffffc0c 	.word	0xfffffc0c
 80032cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe fa50 	bl	8001774 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e08a      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e2:	4b47      	ldr	r3, [pc, #284]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x77c>
 80032ee:	e082      	b.n	80033f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f0:	4b43      	ldr	r3, [pc, #268]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a42      	ldr	r2, [pc, #264]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fa3a 	bl	8001774 <HAL_GetTick>
 8003300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe fa36 	bl	8001774 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e070      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003316:	4b3a      	ldr	r3, [pc, #232]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x7b0>
 8003322:	e068      	b.n	80033f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003324:	4b36      	ldr	r3, [pc, #216]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800332a:	4b35      	ldr	r3, [pc, #212]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	2b01      	cmp	r3, #1
 8003336:	d031      	beq.n	800339c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 0203 	and.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d12a      	bne.n	800339c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d122      	bne.n	800339c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003360:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d11a      	bne.n	800339c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0a5b      	lsrs	r3, r3, #9
 800336a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003372:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d111      	bne.n	800339c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	0c1b      	lsrs	r3, r3, #16
 800337c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d108      	bne.n	800339c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	0e1b      	lsrs	r3, r3, #24
 800338e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003396:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e02b      	b.n	80033f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033a0:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80033a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d01f      	beq.n	80033f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	4a11      	ldr	r2, [pc, #68]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c2:	f7fe f9d7 	bl	8001774 <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033c8:	bf00      	nop
 80033ca:	f7fe f9d3 	bl	8001774 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d0f9      	beq.n	80033ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80033d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033da:	4b0a      	ldr	r3, [pc, #40]	@ (8003404 <HAL_RCC_OscConfig+0x8b0>)
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033e2:	00d2      	lsls	r2, r2, #3
 80033e4:	4906      	ldr	r1, [pc, #24]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_RCC_OscConfig+0x8ac>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3730      	adds	r7, #48	@ 0x30
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	58024400 	.word	0x58024400
 8003404:	ffff0007 	.word	0xffff0007

08003408 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e19c      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b8a      	ldr	r3, [pc, #552]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b87      	ldr	r3, [pc, #540]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 020f 	bic.w	r2, r3, #15
 8003432:	4985      	ldr	r1, [pc, #532]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b83      	ldr	r3, [pc, #524]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e184      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d010      	beq.n	800347a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	4b7b      	ldr	r3, [pc, #492]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003464:	429a      	cmp	r2, r3
 8003466:	d908      	bls.n	800347a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003468:	4b78      	ldr	r3, [pc, #480]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	4975      	ldr	r1, [pc, #468]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003476:	4313      	orrs	r3, r2
 8003478:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	4b70      	ldr	r3, [pc, #448]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003492:	429a      	cmp	r2, r3
 8003494:	d908      	bls.n	80034a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003496:	4b6d      	ldr	r3, [pc, #436]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	496a      	ldr	r1, [pc, #424]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d010      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	4b64      	ldr	r3, [pc, #400]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d908      	bls.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034c4:	4b61      	ldr	r3, [pc, #388]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	495e      	ldr	r1, [pc, #376]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d010      	beq.n	8003504 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	4b59      	ldr	r3, [pc, #356]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d908      	bls.n	8003504 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034f2:	4b56      	ldr	r3, [pc, #344]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4953      	ldr	r1, [pc, #332]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003500:	4313      	orrs	r3, r2
 8003502:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	4b4d      	ldr	r3, [pc, #308]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	429a      	cmp	r2, r3
 800351e:	d908      	bls.n	8003532 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b4a      	ldr	r3, [pc, #296]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f023 020f 	bic.w	r2, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4947      	ldr	r1, [pc, #284]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800352e:	4313      	orrs	r3, r2
 8003530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d055      	beq.n	80035ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800353e:	4b43      	ldr	r3, [pc, #268]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4940      	ldr	r1, [pc, #256]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800354c:	4313      	orrs	r3, r2
 800354e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d107      	bne.n	8003568 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003558:	4b3c      	ldr	r3, [pc, #240]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d121      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0f6      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003570:	4b36      	ldr	r3, [pc, #216]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d115      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0ea      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d107      	bne.n	8003598 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003588:	4b30      	ldr	r3, [pc, #192]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0de      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003598:	4b2c      	ldr	r3, [pc, #176]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0d6      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a8:	4b28      	ldr	r3, [pc, #160]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f023 0207 	bic.w	r2, r3, #7
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4925      	ldr	r1, [pc, #148]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ba:	f7fe f8db 	bl	8001774 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c2:	f7fe f8d7 	bl	8001774 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0be      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d8:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d1eb      	bne.n	80035c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	429a      	cmp	r2, r3
 8003604:	d208      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003606:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f023 020f 	bic.w	r2, r3, #15
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	490e      	ldr	r1, [pc, #56]	@ (800364c <HAL_RCC_ClockConfig+0x244>)
 8003614:	4313      	orrs	r3, r2
 8003616:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d214      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b08      	ldr	r3, [pc, #32]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 020f 	bic.w	r2, r3, #15
 800362e:	4906      	ldr	r1, [pc, #24]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <HAL_RCC_ClockConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e086      	b.n	8003756 <HAL_RCC_ClockConfig+0x34e>
 8003648:	52002000 	.word	0x52002000
 800364c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	4b3f      	ldr	r3, [pc, #252]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003668:	429a      	cmp	r2, r3
 800366a:	d208      	bcs.n	800367e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800366c:	4b3c      	ldr	r3, [pc, #240]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4939      	ldr	r1, [pc, #228]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 800367a:	4313      	orrs	r3, r2
 800367c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d010      	beq.n	80036ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003696:	429a      	cmp	r2, r3
 8003698:	d208      	bcs.n	80036ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800369a:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	492e      	ldr	r1, [pc, #184]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	4b28      	ldr	r3, [pc, #160]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d208      	bcs.n	80036da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036c8:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	4922      	ldr	r1, [pc, #136]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d208      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4917      	ldr	r1, [pc, #92]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 8003704:	4313      	orrs	r3, r2
 8003706:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003708:	f000 f834 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	4912      	ldr	r1, [pc, #72]	@ (8003764 <HAL_RCC_ClockConfig+0x35c>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003726:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <HAL_RCC_ClockConfig+0x358>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <HAL_RCC_ClockConfig+0x35c>)
 8003730:	5cd3      	ldrb	r3, [r2, r3]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
 800373c:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <HAL_RCC_ClockConfig+0x360>)
 800373e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003740:	4a0a      	ldr	r2, [pc, #40]	@ (800376c <HAL_RCC_ClockConfig+0x364>)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003746:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <HAL_RCC_ClockConfig+0x368>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fd00 	bl	8001150 <HAL_InitTick>
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400
 8003764:	0800d32c 	.word	0x0800d32c
 8003768:	24000004 	.word	0x24000004
 800376c:	24000000 	.word	0x24000000
 8003770:	24000008 	.word	0x24000008

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	@ 0x24
 8003778:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800377a:	4bb3      	ldr	r3, [pc, #716]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003782:	2b18      	cmp	r3, #24
 8003784:	f200 8155 	bhi.w	8003a32 <HAL_RCC_GetSysClockFreq+0x2be>
 8003788:	a201      	add	r2, pc, #4	@ (adr r2, 8003790 <HAL_RCC_GetSysClockFreq+0x1c>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037f5 	.word	0x080037f5
 8003794:	08003a33 	.word	0x08003a33
 8003798:	08003a33 	.word	0x08003a33
 800379c:	08003a33 	.word	0x08003a33
 80037a0:	08003a33 	.word	0x08003a33
 80037a4:	08003a33 	.word	0x08003a33
 80037a8:	08003a33 	.word	0x08003a33
 80037ac:	08003a33 	.word	0x08003a33
 80037b0:	0800381b 	.word	0x0800381b
 80037b4:	08003a33 	.word	0x08003a33
 80037b8:	08003a33 	.word	0x08003a33
 80037bc:	08003a33 	.word	0x08003a33
 80037c0:	08003a33 	.word	0x08003a33
 80037c4:	08003a33 	.word	0x08003a33
 80037c8:	08003a33 	.word	0x08003a33
 80037cc:	08003a33 	.word	0x08003a33
 80037d0:	08003821 	.word	0x08003821
 80037d4:	08003a33 	.word	0x08003a33
 80037d8:	08003a33 	.word	0x08003a33
 80037dc:	08003a33 	.word	0x08003a33
 80037e0:	08003a33 	.word	0x08003a33
 80037e4:	08003a33 	.word	0x08003a33
 80037e8:	08003a33 	.word	0x08003a33
 80037ec:	08003a33 	.word	0x08003a33
 80037f0:	08003827 	.word	0x08003827
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f4:	4b94      	ldr	r3, [pc, #592]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d009      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003800:	4b91      	ldr	r3, [pc, #580]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	4a90      	ldr	r2, [pc, #576]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003812:	e111      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003814:	4b8d      	ldr	r3, [pc, #564]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003816:	61bb      	str	r3, [r7, #24]
      break;
 8003818:	e10e      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800381a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800381c:	61bb      	str	r3, [r7, #24]
      break;
 800381e:	e10b      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003820:	4b8c      	ldr	r3, [pc, #560]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003822:	61bb      	str	r3, [r7, #24]
      break;
 8003824:	e108      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003826:	4b88      	ldr	r3, [pc, #544]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003830:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800383a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800383c:	4b82      	ldr	r3, [pc, #520]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003846:	4b80      	ldr	r3, [pc, #512]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384a:	08db      	lsrs	r3, r3, #3
 800384c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80e1 	beq.w	8003a2c <HAL_RCC_GetSysClockFreq+0x2b8>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b02      	cmp	r3, #2
 800386e:	f000 8083 	beq.w	8003978 <HAL_RCC_GetSysClockFreq+0x204>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b02      	cmp	r3, #2
 8003876:	f200 80a1 	bhi.w	80039bc <HAL_RCC_GetSysClockFreq+0x248>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x114>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d056      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003886:	e099      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003888:	4b6f      	ldr	r3, [pc, #444]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02d      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003894:	4b6c      	ldr	r3, [pc, #432]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	4a6b      	ldr	r2, [pc, #428]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038be:	4b62      	ldr	r3, [pc, #392]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80038d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80038ee:	e087      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003a5c <HAL_RCC_GetSysClockFreq+0x2e8>
 80038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003902:	4b51      	ldr	r3, [pc, #324]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003912:	ed97 6a02 	vldr	s12, [r7, #8]
 8003916:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003932:	e065      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003a60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003946:	4b40      	ldr	r3, [pc, #256]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003956:	ed97 6a02 	vldr	s12, [r7, #8]
 800395a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003976:	e043      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003a64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a02 	vldr	s12, [r7, #8]
 800399e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039ba:	e021      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a60 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003a58 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a04:	0a5b      	lsrs	r3, r3, #9
 8003a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a24:	ee17 3a90 	vmov	r3, s15
 8003a28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a2a:	e005      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
      break;
 8003a30:	e002      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a32:	4b07      	ldr	r3, [pc, #28]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a34:	61bb      	str	r3, [r7, #24]
      break;
 8003a36:	bf00      	nop
  }

  return sysclockfreq;
 8003a38:	69bb      	ldr	r3, [r7, #24]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	@ 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	03d09000 	.word	0x03d09000
 8003a50:	003d0900 	.word	0x003d0900
 8003a54:	017d7840 	.word	0x017d7840
 8003a58:	46000000 	.word	0x46000000
 8003a5c:	4c742400 	.word	0x4c742400
 8003a60:	4a742400 	.word	0x4a742400
 8003a64:	4bbebc20 	.word	0x4bbebc20

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a6e:	f7ff fe81 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003a72:	4602      	mov	r2, r0
 8003a74:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	0a1b      	lsrs	r3, r3, #8
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	490f      	ldr	r1, [pc, #60]	@ (8003abc <HAL_RCC_GetHCLKFreq+0x54>)
 8003a80:	5ccb      	ldrb	r3, [r1, r3]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	4a09      	ldr	r2, [pc, #36]	@ (8003abc <HAL_RCC_GetHCLKFreq+0x54>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa2:	4a07      	ldr	r2, [pc, #28]	@ (8003ac0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003aa4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aa6:	4a07      	ldr	r2, [pc, #28]	@ (8003ac4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003aac:	4b04      	ldr	r3, [pc, #16]	@ (8003ac0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	58024400 	.word	0x58024400
 8003abc:	0800d32c 	.word	0x0800d32c
 8003ac0:	24000004 	.word	0x24000004
 8003ac4:	24000000 	.word	0x24000000

08003ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003acc:	f7ff ffcc 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4904      	ldr	r1, [pc, #16]	@ (8003af0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	58024400 	.word	0x58024400
 8003af0:	0800d32c 	.word	0x0800d32c

08003af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	223f      	movs	r2, #63	@ 0x3f
 8003b02:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b04:	4b1a      	ldr	r3, [pc, #104]	@ (8003b70 <HAL_RCC_GetClockConfig+0x7c>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0207 	and.w	r2, r3, #7
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003b10:	4b17      	ldr	r3, [pc, #92]	@ (8003b70 <HAL_RCC_GetClockConfig+0x7c>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003b1c:	4b14      	ldr	r3, [pc, #80]	@ (8003b70 <HAL_RCC_GetClockConfig+0x7c>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003b28:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <HAL_RCC_GetClockConfig+0x7c>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003b34:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <HAL_RCC_GetClockConfig+0x7c>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <HAL_RCC_GetClockConfig+0x7c>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003b4c:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <HAL_RCC_GetClockConfig+0x7c>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCC_GetClockConfig+0x80>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	601a      	str	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	58024400 	.word	0x58024400
 8003b74:	52002000 	.word	0x52002000

08003b78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b0ca      	sub	sp, #296	@ 0x128
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b9c:	2500      	movs	r5, #0
 8003b9e:	ea54 0305 	orrs.w	r3, r4, r5
 8003ba2:	d049      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bae:	d02f      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bb4:	d828      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bba:	d01a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bc0:	d822      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bca:	d007      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bcc:	e01c      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bce:	4bb8      	ldr	r3, [pc, #736]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	4ab7      	ldr	r2, [pc, #732]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bda:	e01a      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	3308      	adds	r3, #8
 8003be2:	2102      	movs	r1, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 f9d1 	bl	8004f8c <RCCEx_PLL2_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bf0:	e00f      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	3328      	adds	r3, #40	@ 0x28
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fa78 	bl	80050f0 <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c06:	e004      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c1a:	4ba5      	ldr	r3, [pc, #660]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c28:	4aa1      	ldr	r2, [pc, #644]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c2e:	e003      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c44:	f04f 0900 	mov.w	r9, #0
 8003c48:	ea58 0309 	orrs.w	r3, r8, r9
 8003c4c:	d047      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d82a      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c58:	a201      	add	r2, pc, #4	@ (adr r2, 8003c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c75 	.word	0x08003c75
 8003c64:	08003c83 	.word	0x08003c83
 8003c68:	08003c99 	.word	0x08003c99
 8003c6c:	08003cb7 	.word	0x08003cb7
 8003c70:	08003cb7 	.word	0x08003cb7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c74:	4b8e      	ldr	r3, [pc, #568]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	4a8d      	ldr	r2, [pc, #564]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c80:	e01a      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	3308      	adds	r3, #8
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 f97e 	bl	8004f8c <RCCEx_PLL2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	3328      	adds	r3, #40	@ 0x28
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fa25 	bl	80050f0 <RCCEx_PLL3_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cac:	e004      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc4:	f023 0107 	bic.w	r1, r3, #7
 8003cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	4a78      	ldr	r2, [pc, #480]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cd4:	e003      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003cea:	f04f 0b00 	mov.w	fp, #0
 8003cee:	ea5a 030b 	orrs.w	r3, sl, fp
 8003cf2:	d04c      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cfe:	d030      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d04:	d829      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d08:	d02d      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d0c:	d825      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d0e:	2b80      	cmp	r3, #128	@ 0x80
 8003d10:	d018      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d12:	2b80      	cmp	r3, #128	@ 0x80
 8003d14:	d821      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d007      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d1e:	e01c      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	4a62      	ldr	r2, [pc, #392]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	3308      	adds	r3, #8
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f928 	bl	8004f8c <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d42:	e011      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	3328      	adds	r3, #40	@ 0x28
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 f9cf 	bl	80050f0 <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d70:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d74:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	4a4c      	ldr	r2, [pc, #304]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003d9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003da4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003da8:	460b      	mov	r3, r1
 8003daa:	4313      	orrs	r3, r2
 8003dac:	d053      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003db6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dba:	d035      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003dbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc0:	d82e      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dc6:	d031      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003dc8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dcc:	d828      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd2:	d01a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd8:	d822      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003dde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de2:	d007      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003de4:	e01c      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de6:	4b32      	ldr	r3, [pc, #200]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	4a31      	ldr	r2, [pc, #196]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df2:	e01c      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	3308      	adds	r3, #8
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 f8c5 	bl	8004f8c <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e08:	e011      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	3328      	adds	r3, #40	@ 0x28
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f96c 	bl	80050f0 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e1e:	e006      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e28:	bf00      	nop
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e36:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e46:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e66:	2300      	movs	r3, #0
 8003e68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003e70:	460b      	mov	r3, r1
 8003e72:	4313      	orrs	r3, r2
 8003e74:	d056      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e82:	d038      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e88:	d831      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e8e:	d034      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e94:	d82b      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e9a:	d01d      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ea0:	d825      	bhi.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003eac:	e01f      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eae:	bf00      	nop
 8003eb0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb4:	4ba2      	ldr	r3, [pc, #648]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	4aa1      	ldr	r2, [pc, #644]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ec0:	e01c      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 f85e 	bl	8004f8c <RCCEx_PLL2_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ed6:	e011      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	3328      	adds	r3, #40	@ 0x28
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 f905 	bl	80050f0 <RCCEx_PLL3_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eec:	e006      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f04:	4b8e      	ldr	r3, [pc, #568]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f14:	4a8a      	ldr	r2, [pc, #552]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d03a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	2b30      	cmp	r3, #48	@ 0x30
 8003f4c:	d01f      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f4e:	2b30      	cmp	r3, #48	@ 0x30
 8003f50:	d819      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d00c      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d815      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d019      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d111      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f62:	4b77      	ldr	r3, [pc, #476]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	4a76      	ldr	r2, [pc, #472]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	3308      	adds	r3, #8
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f807 	bl	8004f8c <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f84:	e006      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f9c:	4b68      	ldr	r3, [pc, #416]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003faa:	4a65      	ldr	r2, [pc, #404]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003fc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d051      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe4:	d035      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003fe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fea:	d82e      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003fec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ff0:	d031      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ff2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ff6:	d828      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ffc:	d01a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004002:	d822      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d007      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800400e:	e01c      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004010:	4b4b      	ldr	r3, [pc, #300]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	4a4a      	ldr	r2, [pc, #296]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800401c:	e01c      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	3308      	adds	r3, #8
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ffb0 	bl	8004f8c <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004032:	e011      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	3328      	adds	r3, #40	@ 0x28
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f001 f857 	bl	80050f0 <RCCEx_PLL3_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004060:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004064:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	4a34      	ldr	r2, [pc, #208]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004070:	430b      	orrs	r3, r1
 8004072:	6513      	str	r3, [r2, #80]	@ 0x50
 8004074:	e003      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800407a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800408a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004094:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004098:	460b      	mov	r3, r1
 800409a:	4313      	orrs	r3, r2
 800409c:	d056      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a8:	d033      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040ae:	d82c      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040b4:	d02f      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ba:	d826      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040c0:	d02b      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040c6:	d820      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040cc:	d012      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80040ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040d2:	d81a      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d022      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040dc:	d115      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	3308      	adds	r3, #8
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff50 	bl	8004f8c <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040f2:	e015      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	3328      	adds	r3, #40	@ 0x28
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fff7 	bl	80050f0 <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004112:	bf00      	nop
 8004114:	e004      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004116:	bf00      	nop
 8004118:	e002      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10d      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004128:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004136:	4a02      	ldr	r2, [pc, #8]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004138:	430b      	orrs	r3, r1
 800413a:	6513      	str	r3, [r2, #80]	@ 0x50
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800413e:	bf00      	nop
 8004140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004148:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004162:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	d055      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004178:	d033      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800417a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800417e:	d82c      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004184:	d02f      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418a:	d826      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800418c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004190:	d02b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004192:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004196:	d820      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800419c:	d012      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800419e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041a2:	d81a      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d022      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ac:	d115      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b2:	3308      	adds	r3, #8
 80041b4:	2101      	movs	r1, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fee8 	bl	8004f8c <RCCEx_PLL2_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041c2:	e015      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c8:	3328      	adds	r3, #40	@ 0x28
 80041ca:	2101      	movs	r1, #1
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 ff8f 	bl	80050f0 <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041d8:	e00a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041e2:	bf00      	nop
 80041e4:	e004      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041f8:	4ba3      	ldr	r3, [pc, #652]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004208:	4a9f      	ldr	r2, [pc, #636]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420a:	430b      	orrs	r3, r1
 800420c:	6593      	str	r3, [r2, #88]	@ 0x58
 800420e:	e003      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004228:	2300      	movs	r3, #0
 800422a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800422e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004232:	460b      	mov	r3, r1
 8004234:	4313      	orrs	r3, r2
 8004236:	d037      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004242:	d00e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004248:	d816      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800424e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004252:	d111      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004254:	4b8c      	ldr	r3, [pc, #560]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	4a8b      	ldr	r2, [pc, #556]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800425e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004260:	e00f      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	3308      	adds	r3, #8
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fe8e 	bl	8004f8c <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004276:	e004      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800428a:	4b7f      	ldr	r3, [pc, #508]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004298:	4a7b      	ldr	r2, [pc, #492]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429a:	430b      	orrs	r3, r1
 800429c:	6513      	str	r3, [r2, #80]	@ 0x50
 800429e:	e003      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d039      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d81c      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80042d2:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	08004315 	.word	0x08004315
 80042dc:	080042e9 	.word	0x080042e9
 80042e0:	080042f7 	.word	0x080042f7
 80042e4:	08004315 	.word	0x08004315
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e8:	4b67      	ldr	r3, [pc, #412]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	4a66      	ldr	r2, [pc, #408]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042f4:	e00f      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fa:	3308      	adds	r3, #8
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fe44 	bl	8004f8c <RCCEx_PLL2_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800431e:	4b5a      	ldr	r3, [pc, #360]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004322:	f023 0103 	bic.w	r1, r3, #3
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800432c:	4a56      	ldr	r2, [pc, #344]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800432e:	430b      	orrs	r3, r1
 8004330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004332:	e003      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004348:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004352:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	f000 809f 	beq.w	800449c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800435e:	4b4b      	ldr	r3, [pc, #300]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a4a      	ldr	r2, [pc, #296]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004368:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800436a:	f7fd fa03 	bl	8001774 <HAL_GetTick>
 800436e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004372:	e00b      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004374:	f7fd f9fe 	bl	8001774 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b64      	cmp	r3, #100	@ 0x64
 8004382:	d903      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800438a:	e005      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438c:	4b3f      	ldr	r3, [pc, #252]	@ (800448c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ed      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439c:	2b00      	cmp	r3, #0
 800439e:	d179      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043a0:	4b39      	ldr	r3, [pc, #228]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043ac:	4053      	eors	r3, r2
 80043ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d015      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043b6:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043c2:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	4a30      	ldr	r2, [pc, #192]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043da:	4a2b      	ldr	r2, [pc, #172]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ee:	d118      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd f9c0 	bl	8001774 <HAL_GetTick>
 80043f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f8:	e00d      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fd f9bb 	bl	8001774 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	f241 3388 	movw	r3, #5000	@ 0x1388
 800440a:	429a      	cmp	r2, r3
 800440c:	d903      	bls.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004414:	e005      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004416:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0eb      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	2b00      	cmp	r3, #0
 8004428:	d129      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800443a:	d10e      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800444c:	091a      	lsrs	r2, r3, #4
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004450:	4013      	ands	r3, r2
 8004452:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004454:	430b      	orrs	r3, r1
 8004456:	6113      	str	r3, [r2, #16]
 8004458:	e005      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004460:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004464:	6113      	str	r3, [r2, #16]
 8004466:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004468:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004476:	4a04      	ldr	r2, [pc, #16]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004478:	430b      	orrs	r3, r1
 800447a:	6713      	str	r3, [r2, #112]	@ 0x70
 800447c:	e00e      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800447e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004486:	e009      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004488:	58024400 	.word	0x58024400
 800448c:	58024800 	.word	0x58024800
 8004490:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f002 0301 	and.w	r3, r2, #1
 80044a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f000 8089 	beq.w	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c4:	2b28      	cmp	r3, #40	@ 0x28
 80044c6:	d86b      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80044c8:	a201      	add	r2, pc, #4	@ (adr r2, 80044d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080045a9 	.word	0x080045a9
 80044d4:	080045a1 	.word	0x080045a1
 80044d8:	080045a1 	.word	0x080045a1
 80044dc:	080045a1 	.word	0x080045a1
 80044e0:	080045a1 	.word	0x080045a1
 80044e4:	080045a1 	.word	0x080045a1
 80044e8:	080045a1 	.word	0x080045a1
 80044ec:	080045a1 	.word	0x080045a1
 80044f0:	08004575 	.word	0x08004575
 80044f4:	080045a1 	.word	0x080045a1
 80044f8:	080045a1 	.word	0x080045a1
 80044fc:	080045a1 	.word	0x080045a1
 8004500:	080045a1 	.word	0x080045a1
 8004504:	080045a1 	.word	0x080045a1
 8004508:	080045a1 	.word	0x080045a1
 800450c:	080045a1 	.word	0x080045a1
 8004510:	0800458b 	.word	0x0800458b
 8004514:	080045a1 	.word	0x080045a1
 8004518:	080045a1 	.word	0x080045a1
 800451c:	080045a1 	.word	0x080045a1
 8004520:	080045a1 	.word	0x080045a1
 8004524:	080045a1 	.word	0x080045a1
 8004528:	080045a1 	.word	0x080045a1
 800452c:	080045a1 	.word	0x080045a1
 8004530:	080045a9 	.word	0x080045a9
 8004534:	080045a1 	.word	0x080045a1
 8004538:	080045a1 	.word	0x080045a1
 800453c:	080045a1 	.word	0x080045a1
 8004540:	080045a1 	.word	0x080045a1
 8004544:	080045a1 	.word	0x080045a1
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045a1 	.word	0x080045a1
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045a1 	.word	0x080045a1
 8004558:	080045a1 	.word	0x080045a1
 800455c:	080045a1 	.word	0x080045a1
 8004560:	080045a1 	.word	0x080045a1
 8004564:	080045a1 	.word	0x080045a1
 8004568:	080045a1 	.word	0x080045a1
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045a9 	.word	0x080045a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	3308      	adds	r3, #8
 800457a:	2101      	movs	r1, #1
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fd05 	bl	8004f8c <RCCEx_PLL2_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004588:	e00f      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	3328      	adds	r3, #40	@ 0x28
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fdac 	bl	80050f0 <RCCEx_PLL3_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800459e:	e004      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045b2:	4bbf      	ldr	r3, [pc, #764]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c0:	4abb      	ldr	r2, [pc, #748]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c2:	430b      	orrs	r3, r1
 80045c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80045c6:	e003      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f002 0302 	and.w	r3, r2, #2
 80045dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d041      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d824      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80045fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	0800464d 	.word	0x0800464d
 8004604:	08004619 	.word	0x08004619
 8004608:	0800462f 	.word	0x0800462f
 800460c:	0800464d 	.word	0x0800464d
 8004610:	0800464d 	.word	0x0800464d
 8004614:	0800464d 	.word	0x0800464d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	3308      	adds	r3, #8
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fcb3 	bl	8004f8c <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800462c:	e00f      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	3328      	adds	r3, #40	@ 0x28
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fd5a 	bl	80050f0 <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004642:	e004      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004656:	4b96      	ldr	r3, [pc, #600]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465a:	f023 0107 	bic.w	r1, r3, #7
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004664:	4a92      	ldr	r2, [pc, #584]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004666:	430b      	orrs	r3, r1
 8004668:	6553      	str	r3, [r2, #84]	@ 0x54
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f002 0304 	and.w	r3, r2, #4
 8004680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800468a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d044      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469c:	2b05      	cmp	r3, #5
 800469e:	d825      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046a0:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046f5 	.word	0x080046f5
 80046ac:	080046c1 	.word	0x080046c1
 80046b0:	080046d7 	.word	0x080046d7
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046f5 	.word	0x080046f5
 80046bc:	080046f5 	.word	0x080046f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c4:	3308      	adds	r3, #8
 80046c6:	2101      	movs	r1, #1
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fc5f 	bl	8004f8c <RCCEx_PLL2_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046d4:	e00f      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046da:	3328      	adds	r3, #40	@ 0x28
 80046dc:	2101      	movs	r1, #1
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fd06 	bl	80050f0 <RCCEx_PLL3_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046ea:	e004      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80046f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10b      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046fe:	4b6c      	ldr	r3, [pc, #432]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004702:	f023 0107 	bic.w	r1, r3, #7
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470e:	4a68      	ldr	r2, [pc, #416]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004710:	430b      	orrs	r3, r1
 8004712:	6593      	str	r3, [r2, #88]	@ 0x58
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f002 0320 	and.w	r3, r2, #32
 800472a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d055      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800474a:	d033      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800474c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004750:	d82c      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004756:	d02f      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d826      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800475e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004762:	d02b      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004764:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004768:	d820      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800476a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800476e:	d012      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004774:	d81a      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d022      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800477a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800477e:	d115      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004784:	3308      	adds	r3, #8
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fbff 	bl	8004f8c <RCCEx_PLL2_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004794:	e015      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	3328      	adds	r3, #40	@ 0x28
 800479c:	2102      	movs	r1, #2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fca6 	bl	80050f0 <RCCEx_PLL3_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047aa:	e00a      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b2:	e006      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047b4:	bf00      	nop
 80047b6:	e004      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047b8:	bf00      	nop
 80047ba:	e002      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ca:	4b39      	ldr	r3, [pc, #228]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	4a35      	ldr	r2, [pc, #212]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047dc:	430b      	orrs	r3, r1
 80047de:	6553      	str	r3, [r2, #84]	@ 0x54
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80047f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004800:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d058      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004812:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004816:	d033      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004818:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800481c:	d82c      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004822:	d02f      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004828:	d826      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800482a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800482e:	d02b      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004830:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004834:	d820      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483a:	d012      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800483c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004840:	d81a      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d022      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d115      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	3308      	adds	r3, #8
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fb99 	bl	8004f8c <RCCEx_PLL2_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004860:	e015      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004866:	3328      	adds	r3, #40	@ 0x28
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fc40 	bl	80050f0 <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004876:	e00a      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800487e:	e006      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004880:	bf00      	nop
 8004882:	e004      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004884:	bf00      	nop
 8004886:	e002      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004888:	bf00      	nop
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800488c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10e      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004896:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048a6:	4a02      	ldr	r2, [pc, #8]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ac:	e006      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048ae:	bf00      	nop
 80048b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	d055      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048e8:	d033      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80048ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80048ee:	d82c      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048f4:	d02f      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fa:	d826      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80048fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004900:	d02b      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004902:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004906:	d820      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004908:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800490c:	d012      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004912:	d81a      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004914:	2b00      	cmp	r3, #0
 8004916:	d022      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800491c:	d115      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	3308      	adds	r3, #8
 8004924:	2100      	movs	r1, #0
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fb30 	bl	8004f8c <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004932:	e015      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004938:	3328      	adds	r3, #40	@ 0x28
 800493a:	2102      	movs	r1, #2
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fbd7 	bl	80050f0 <RCCEx_PLL3_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004948:	e00a      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004950:	e006      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004952:	bf00      	nop
 8004954:	e004      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800495e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004968:	4ba1      	ldr	r3, [pc, #644]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004978:	4a9d      	ldr	r2, [pc, #628]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497a:	430b      	orrs	r3, r1
 800497c:	6593      	str	r3, [r2, #88]	@ 0x58
 800497e:	e003      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f002 0308 	and.w	r3, r2, #8
 8004994:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800499e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049a2:	460b      	mov	r3, r1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	d01e      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ba:	3328      	adds	r3, #40	@ 0x28
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fb96 	bl	80050f0 <RCCEx_PLL3_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049d0:	4b87      	ldr	r3, [pc, #540]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e0:	4a83      	ldr	r2, [pc, #524]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e2:	430b      	orrs	r3, r1
 80049e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f002 0310 	and.w	r3, r2, #16
 80049f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a00:	460b      	mov	r3, r1
 8004a02:	4313      	orrs	r3, r2
 8004a04:	d01e      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a18:	3328      	adds	r3, #40	@ 0x28
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fb67 	bl	80050f0 <RCCEx_PLL3_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2e:	4b70      	ldr	r3, [pc, #448]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a3e:	4a6c      	ldr	r2, [pc, #432]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4313      	orrs	r3, r2
 8004a62:	d03e      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a70:	d022      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a76:	d81b      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a80:	d00b      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004a82:	e015      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a88:	3308      	adds	r3, #8
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fa7d 	bl	8004f8c <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a98:	e00f      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	3328      	adds	r3, #40	@ 0x28
 8004aa0:	2102      	movs	r1, #2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fb24 	bl	80050f0 <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ad2:	4a47      	ldr	r2, [pc, #284]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ad8:	e003      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004aee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004af0:	2300      	movs	r3, #0
 8004af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004af4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b0a:	d01f      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b10:	d818      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b16:	d003      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b1c:	d007      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b1e:	e011      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b20:	4b33      	ldr	r3, [pc, #204]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	4a32      	ldr	r2, [pc, #200]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b2c:	e00f      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	3328      	adds	r3, #40	@ 0x28
 8004b34:	2101      	movs	r1, #1
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fada 	bl	80050f0 <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b42:	e004      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b56:	4b26      	ldr	r3, [pc, #152]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b66:	4a22      	ldr	r2, [pc, #136]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b82:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b84:	2300      	movs	r3, #0
 8004b86:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	d034      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba0:	d007      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ba2:	e011      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bb0:	e00e      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	2102      	movs	r1, #2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f9e6 	bl	8004f8c <RCCEx_PLL2_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bc6:	e003      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bdc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be6:	4a02      	ldr	r2, [pc, #8]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bec:	e006      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c0e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d00c      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	3328      	adds	r3, #40	@ 0x28
 8004c1e:	2102      	movs	r1, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa65 	bl	80050f0 <RCCEx_PLL3_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c40:	2300      	movs	r3, #0
 8004c42:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	d038      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c5a:	d018      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c60:	d811      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c66:	d014      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c6c:	d80b      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c76:	d106      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c78:	4bc3      	ldr	r3, [pc, #780]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	4ac2      	ldr	r2, [pc, #776]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c8c:	e004      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ca0:	4bb9      	ldr	r3, [pc, #740]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cb0:	4ab5      	ldr	r2, [pc, #724]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cb6:	e003      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ccc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cce:	2300      	movs	r3, #0
 8004cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cdc:	4baa      	ldr	r3, [pc, #680]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cea:	4aa7      	ldr	r2, [pc, #668]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004cfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cfe:	2300      	movs	r3, #0
 8004d00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d0c:	4b9e      	ldr	r3, [pc, #632]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d1c:	4a9a      	ldr	r2, [pc, #616]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d30:	2300      	movs	r3, #0
 8004d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d3e:	4b92      	ldr	r3, [pc, #584]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d42:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d60:	2300      	movs	r3, #0
 8004d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d6e:	4b86      	ldr	r3, [pc, #536]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	4a85      	ldr	r2, [pc, #532]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d78:	6113      	str	r3, [r2, #16]
 8004d7a:	4b83      	ldr	r3, [pc, #524]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d7c:	6919      	ldr	r1, [r3, #16]
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d86:	4a80      	ldr	r2, [pc, #512]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004d98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004da2:	460b      	mov	r3, r1
 8004da4:	4313      	orrs	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004da8:	4b77      	ldr	r3, [pc, #476]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db6:	4a74      	ldr	r2, [pc, #464]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004db8:	430b      	orrs	r3, r1
 8004dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ddc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004de8:	4a67      	ldr	r2, [pc, #412]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dea:	430b      	orrs	r3, r1
 8004dec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	2100      	movs	r1, #0
 8004df8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d011      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0e:	3308      	adds	r3, #8
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f8ba 	bl	8004f8c <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	2100      	movs	r1, #0
 8004e38:	6239      	str	r1, [r7, #32]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d011      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4e:	3308      	adds	r3, #8
 8004e50:	2101      	movs	r1, #1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f89a 	bl	8004f8c <RCCEx_PLL2_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	2100      	movs	r1, #0
 8004e78:	61b9      	str	r1, [r7, #24]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d011      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	3308      	adds	r3, #8
 8004e90:	2102      	movs	r1, #2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f87a 	bl	8004f8c <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	6139      	str	r1, [r7, #16]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	d011      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	3328      	adds	r3, #40	@ 0x28
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f90c 	bl	80050f0 <RCCEx_PLL3_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d011      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	3328      	adds	r3, #40	@ 0x28
 8004f10:	2101      	movs	r1, #1
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f8ec 	bl	80050f0 <RCCEx_PLL3_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	2100      	movs	r1, #0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d011      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	3328      	adds	r3, #40	@ 0x28
 8004f50:	2102      	movs	r1, #2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f8cc 	bl	80050f0 <RCCEx_PLL3_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004f6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004f82:	46bd      	mov	sp, r7
 8004f84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f88:	58024400 	.word	0x58024400

08004f8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f9a:	4b53      	ldr	r3, [pc, #332]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d101      	bne.n	8004faa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e099      	b.n	80050de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004faa:	4b4f      	ldr	r3, [pc, #316]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a4e      	ldr	r2, [pc, #312]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8004fb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb6:	f7fc fbdd 	bl	8001774 <HAL_GetTick>
 8004fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fbc:	e008      	b.n	8004fd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fbe:	f7fc fbd9 	bl	8001774 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e086      	b.n	80050de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fd0:	4b45      	ldr	r3, [pc, #276]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fdc:	4b42      	ldr	r3, [pc, #264]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	031b      	lsls	r3, r3, #12
 8004fea:	493f      	ldr	r1, [pc, #252]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	025b      	lsls	r3, r3, #9
 8005002:	b29b      	uxth	r3, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	3b01      	subs	r3, #1
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	3b01      	subs	r3, #1
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005020:	4931      	ldr	r1, [pc, #196]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005026:	4b30      	ldr	r3, [pc, #192]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	492d      	ldr	r1, [pc, #180]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005038:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	f023 0220 	bic.w	r2, r3, #32
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	4928      	ldr	r1, [pc, #160]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005046:	4313      	orrs	r3, r2
 8005048:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800504a:	4b27      	ldr	r3, [pc, #156]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 800504c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504e:	4a26      	ldr	r2, [pc, #152]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005050:	f023 0310 	bic.w	r3, r3, #16
 8005054:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005056:	4b24      	ldr	r3, [pc, #144]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800505a:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <RCCEx_PLL2_Config+0x160>)
 800505c:	4013      	ands	r3, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	69d2      	ldr	r2, [r2, #28]
 8005062:	00d2      	lsls	r2, r2, #3
 8005064:	4920      	ldr	r1, [pc, #128]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005066:	4313      	orrs	r3, r2
 8005068:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800506a:	4b1f      	ldr	r3, [pc, #124]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005070:	f043 0310 	orr.w	r3, r3, #16
 8005074:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800507c:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005082:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005086:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005088:	e00f      	b.n	80050aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d106      	bne.n	800509e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005090:	4b15      	ldr	r3, [pc, #84]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	4a14      	ldr	r2, [pc, #80]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 8005096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800509a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800509c:	e005      	b.n	80050aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	4a11      	ldr	r2, [pc, #68]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 80050a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050aa:	4b0f      	ldr	r3, [pc, #60]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a0e      	ldr	r2, [pc, #56]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 80050b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b6:	f7fc fb5d 	bl	8001774 <HAL_GetTick>
 80050ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050bc:	e008      	b.n	80050d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050be:	f7fc fb59 	bl	8001774 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e006      	b.n	80050de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050d0:	4b05      	ldr	r3, [pc, #20]	@ (80050e8 <RCCEx_PLL2_Config+0x15c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	58024400 	.word	0x58024400
 80050ec:	ffff0007 	.word	0xffff0007

080050f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050fe:	4b53      	ldr	r3, [pc, #332]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b03      	cmp	r3, #3
 8005108:	d101      	bne.n	800510e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e099      	b.n	8005242 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800510e:	4b4f      	ldr	r3, [pc, #316]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a4e      	ldr	r2, [pc, #312]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511a:	f7fc fb2b 	bl	8001774 <HAL_GetTick>
 800511e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005120:	e008      	b.n	8005134 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005122:	f7fc fb27 	bl	8001774 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e086      	b.n	8005242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005134:	4b45      	ldr	r3, [pc, #276]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f0      	bne.n	8005122 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005140:	4b42      	ldr	r3, [pc, #264]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	051b      	lsls	r3, r3, #20
 800514e:	493f      	ldr	r1, [pc, #252]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	628b      	str	r3, [r1, #40]	@ 0x28
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	3b01      	subs	r3, #1
 800515a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	3b01      	subs	r3, #1
 8005164:	025b      	lsls	r3, r3, #9
 8005166:	b29b      	uxth	r3, r3
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	3b01      	subs	r3, #1
 8005170:	041b      	lsls	r3, r3, #16
 8005172:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	3b01      	subs	r3, #1
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005184:	4931      	ldr	r1, [pc, #196]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800518a:	4b30      	ldr	r3, [pc, #192]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	492d      	ldr	r1, [pc, #180]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	4928      	ldr	r1, [pc, #160]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051ae:	4b27      	ldr	r3, [pc, #156]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	4a26      	ldr	r2, [pc, #152]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ba:	4b24      	ldr	r3, [pc, #144]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051be:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <RCCEx_PLL3_Config+0x160>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	69d2      	ldr	r2, [r2, #28]
 80051c6:	00d2      	lsls	r2, r2, #3
 80051c8:	4920      	ldr	r1, [pc, #128]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051ce:	4b1f      	ldr	r3, [pc, #124]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	4a1e      	ldr	r2, [pc, #120]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051e0:	4b1a      	ldr	r3, [pc, #104]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e4:	4a19      	ldr	r2, [pc, #100]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051ec:	e00f      	b.n	800520e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051f4:	4b15      	ldr	r3, [pc, #84]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	4a14      	ldr	r2, [pc, #80]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 80051fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005200:	e005      	b.n	800520e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005202:	4b12      	ldr	r3, [pc, #72]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	4a11      	ldr	r2, [pc, #68]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005208:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800520e:	4b0f      	ldr	r3, [pc, #60]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a0e      	ldr	r2, [pc, #56]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521a:	f7fc faab 	bl	8001774 <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005220:	e008      	b.n	8005234 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005222:	f7fc faa7 	bl	8001774 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e006      	b.n	8005242 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005234:	4b05      	ldr	r3, [pc, #20]	@ (800524c <RCCEx_PLL3_Config+0x15c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	58024400 	.word	0x58024400
 8005250:	ffff0007 	.word	0xffff0007

08005254 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e10f      	b.n	8005486 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a87      	ldr	r2, [pc, #540]	@ (8005490 <HAL_SPI_Init+0x23c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00f      	beq.n	8005296 <HAL_SPI_Init+0x42>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a86      	ldr	r2, [pc, #536]	@ (8005494 <HAL_SPI_Init+0x240>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00a      	beq.n	8005296 <HAL_SPI_Init+0x42>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a84      	ldr	r2, [pc, #528]	@ (8005498 <HAL_SPI_Init+0x244>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d005      	beq.n	8005296 <HAL_SPI_Init+0x42>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b0f      	cmp	r3, #15
 8005290:	d901      	bls.n	8005296 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0f7      	b.n	8005486 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fe2e 	bl	8005ef8 <SPI_GetPacketSize>
 800529c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a7b      	ldr	r2, [pc, #492]	@ (8005490 <HAL_SPI_Init+0x23c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00c      	beq.n	80052c2 <HAL_SPI_Init+0x6e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a79      	ldr	r2, [pc, #484]	@ (8005494 <HAL_SPI_Init+0x240>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <HAL_SPI_Init+0x6e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a78      	ldr	r2, [pc, #480]	@ (8005498 <HAL_SPI_Init+0x244>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d002      	beq.n	80052c2 <HAL_SPI_Init+0x6e>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d811      	bhi.n	80052e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052c6:	4a72      	ldr	r2, [pc, #456]	@ (8005490 <HAL_SPI_Init+0x23c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a70      	ldr	r2, [pc, #448]	@ (8005494 <HAL_SPI_Init+0x240>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_SPI_Init+0x8c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6f      	ldr	r2, [pc, #444]	@ (8005498 <HAL_SPI_Init+0x244>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d104      	bne.n	80052ea <HAL_SPI_Init+0x96>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d901      	bls.n	80052ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0cd      	b.n	8005486 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb fe86 	bl	8001010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005326:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005330:	d119      	bne.n	8005366 <HAL_SPI_Init+0x112>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800533a:	d103      	bne.n	8005344 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10c      	bne.n	8005366 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005350:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005354:	d107      	bne.n	8005366 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005364:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00f      	beq.n	8005392 <HAL_SPI_Init+0x13e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b06      	cmp	r3, #6
 8005378:	d90b      	bls.n	8005392 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e007      	b.n	80053a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	431a      	orrs	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b4:	ea42 0103 	orr.w	r1, r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005402:	ea42 0103 	orr.w	r1, r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d113      	bne.n	8005442 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800542c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005440:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40013000 	.word	0x40013000
 8005494:	40003800 	.word	0x40003800
 8005498:	40003c00 	.word	0x40003c00

0800549c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3320      	adds	r3, #32
 80054b2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b4:	f7fc f95e 	bl	8001774 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d001      	beq.n	80054ca <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
 80054c8:	e1d1      	b.n	800586e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_SPI_Transmit+0x3a>
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e1c9      	b.n	800586e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_SPI_Transmit+0x4c>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e1c2      	b.n	800586e <HAL_SPI_Transmit+0x3d2>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2203      	movs	r2, #3
 80054f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	88fa      	ldrh	r2, [r7, #6]
 8005512:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005540:	d108      	bne.n	8005554 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e009      	b.n	8005568 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005566:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4b96      	ldr	r3, [pc, #600]	@ (80057c8 <HAL_SPI_Transmit+0x32c>)
 8005570:	4013      	ands	r3, r2
 8005572:	88f9      	ldrh	r1, [r7, #6]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	430b      	orrs	r3, r1
 800557a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0201 	orr.w	r2, r2, #1
 800558a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005594:	d107      	bne.n	80055a6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d947      	bls.n	800563e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80055ae:	e03f      	b.n	8005630 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d114      	bne.n	80055e8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80055e6:	e023      	b.n	8005630 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e8:	f7fc f8c4 	bl	8001774 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d803      	bhi.n	8005600 <HAL_SPI_Transmit+0x164>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fe:	d102      	bne.n	8005606 <HAL_SPI_Transmit+0x16a>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d114      	bne.n	8005630 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fba8 	bl	8005d5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005612:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e11e      	b.n	800586e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1b9      	bne.n	80055b0 <HAL_SPI_Transmit+0x114>
 800563c:	e0f1      	b.n	8005822 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b07      	cmp	r3, #7
 8005644:	f240 80e6 	bls.w	8005814 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005648:	e05d      	b.n	8005706 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b02      	cmp	r3, #2
 8005656:	d132      	bne.n	80056be <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d918      	bls.n	8005696 <HAL_SPI_Transmit+0x1fa>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d014      	beq.n	8005696 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567c:	1d1a      	adds	r2, r3, #4
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b02      	subs	r3, #2
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005694:	e037      	b.n	8005706 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056bc:	e023      	b.n	8005706 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056be:	f7fc f859 	bl	8001774 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d803      	bhi.n	80056d6 <HAL_SPI_Transmit+0x23a>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_Transmit+0x240>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d114      	bne.n	8005706 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fb3d 	bl	8005d5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0b3      	b.n	800586e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d19b      	bne.n	800564a <HAL_SPI_Transmit+0x1ae>
 8005712:	e086      	b.n	8005822 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d154      	bne.n	80057cc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b03      	cmp	r3, #3
 800572c:	d918      	bls.n	8005760 <HAL_SPI_Transmit+0x2c4>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005732:	2b40      	cmp	r3, #64	@ 0x40
 8005734:	d914      	bls.n	8005760 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b04      	subs	r3, #4
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800575e:	e059      	b.n	8005814 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d917      	bls.n	800579c <HAL_SPI_Transmit+0x300>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d013      	beq.n	800579c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005778:	881a      	ldrh	r2, [r3, #0]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b02      	subs	r3, #2
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800579a:	e03b      	b.n	8005814 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3320      	adds	r3, #32
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80057c6:	e025      	b.n	8005814 <HAL_SPI_Transmit+0x378>
 80057c8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057cc:	f7fb ffd2 	bl	8001774 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d803      	bhi.n	80057e4 <HAL_SPI_Transmit+0x348>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d102      	bne.n	80057ea <HAL_SPI_Transmit+0x34e>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d114      	bne.n	8005814 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fab6 	bl	8005d5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e02c      	b.n	800586e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	f47f af79 	bne.w	8005714 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2200      	movs	r2, #0
 800582a:	2108      	movs	r1, #8
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fb35 	bl	8005e9c <SPI_WaitOnFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fa87 	bl	8005d5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800586c:	2300      	movs	r3, #0
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop

08005878 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	b29b      	uxth	r3, r3
 8005890:	3301      	adds	r3, #1
 8005892:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3330      	adds	r3, #48	@ 0x30
 800589a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589c:	f7fb ff6a 	bl	8001774 <HAL_GetTick>
 80058a0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d001      	beq.n	80058b2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
 80058b0:	e250      	b.n	8005d54 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <HAL_SPI_Receive+0x46>
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e248      	b.n	8005d54 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_SPI_Receive+0x58>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e241      	b.n	8005d54 <HAL_SPI_Receive+0x4dc>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2204      	movs	r2, #4
 80058dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	88fa      	ldrh	r2, [r7, #6]
 80058f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	88fa      	ldrh	r2, [r7, #6]
 80058fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005928:	d108      	bne.n	800593c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e009      	b.n	8005950 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800594e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4b95      	ldr	r3, [pc, #596]	@ (8005bac <HAL_SPI_Receive+0x334>)
 8005958:	4013      	ands	r3, r2
 800595a:	88f9      	ldrh	r1, [r7, #6]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	430b      	orrs	r3, r1
 8005962:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800597c:	d107      	bne.n	800598e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800598c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	d96c      	bls.n	8005a70 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005996:	e064      	b.n	8005a62 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d114      	bne.n	80059d8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80059d6:	e044      	b.n	8005a62 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	8bfa      	ldrh	r2, [r7, #30]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d919      	bls.n	8005a1a <HAL_SPI_Receive+0x1a2>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d014      	beq.n	8005a1a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059fa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a00:	1d1a      	adds	r2, r3, #4
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a18:	e023      	b.n	8005a62 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1a:	f7fb feab 	bl	8001774 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d803      	bhi.n	8005a32 <HAL_SPI_Receive+0x1ba>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d102      	bne.n	8005a38 <HAL_SPI_Receive+0x1c0>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d114      	bne.n	8005a62 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f98f 	bl	8005d5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e178      	b.n	8005d54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d194      	bne.n	8005998 <HAL_SPI_Receive+0x120>
 8005a6e:	e15e      	b.n	8005d2e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b07      	cmp	r3, #7
 8005a76:	f240 8153 	bls.w	8005d20 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005a7a:	e08f      	b.n	8005b9c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d114      	bne.n	8005abc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	8812      	ldrh	r2, [r2, #0]
 8005a9a:	b292      	uxth	r2, r2
 8005a9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa2:	1c9a      	adds	r2, r3, #2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005aba:	e06f      	b.n	8005b9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	8bfa      	ldrh	r2, [r7, #30]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d924      	bls.n	8005b14 <HAL_SPI_Receive+0x29c>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01f      	beq.n	8005b14 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	8812      	ldrh	r2, [r2, #0]
 8005adc:	b292      	uxth	r2, r2
 8005ade:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae4:	1c9a      	adds	r2, r3, #2
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	8812      	ldrh	r2, [r2, #0]
 8005af2:	b292      	uxth	r2, r2
 8005af4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005afa:	1c9a      	adds	r2, r3, #2
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b02      	subs	r3, #2
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005b12:	e043      	b.n	8005b9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d119      	bne.n	8005b54 <HAL_SPI_Receive+0x2dc>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d014      	beq.n	8005b54 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	8812      	ldrh	r2, [r2, #0]
 8005b32:	b292      	uxth	r2, r2
 8005b34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b3a:	1c9a      	adds	r2, r3, #2
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005b52:	e023      	b.n	8005b9c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b54:	f7fb fe0e 	bl	8001774 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d803      	bhi.n	8005b6c <HAL_SPI_Receive+0x2f4>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d102      	bne.n	8005b72 <HAL_SPI_Receive+0x2fa>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d114      	bne.n	8005b9c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f8f2 	bl	8005d5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0db      	b.n	8005d54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f47f af69 	bne.w	8005a7c <HAL_SPI_Receive+0x204>
 8005baa:	e0c0      	b.n	8005d2e <HAL_SPI_Receive+0x4b6>
 8005bac:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d117      	bne.n	8005bf6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd2:	7812      	ldrb	r2, [r2, #0]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005bf4:	e094      	b.n	8005d20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8bfa      	ldrh	r2, [r7, #30]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d946      	bls.n	8005c92 <HAL_SPI_Receive+0x41a>
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d041      	beq.n	8005c92 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c1a:	7812      	ldrb	r2, [r2, #0]
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c52:	7812      	ldrb	r2, [r2, #0]
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b04      	subs	r3, #4
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005c90:	e046      	b.n	8005d20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d81c      	bhi.n	8005cd8 <HAL_SPI_Receive+0x460>
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d017      	beq.n	8005cd8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005cd6:	e023      	b.n	8005d20 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd8:	f7fb fd4c 	bl	8001774 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d803      	bhi.n	8005cf0 <HAL_SPI_Receive+0x478>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	d102      	bne.n	8005cf6 <HAL_SPI_Receive+0x47e>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d114      	bne.n	8005d20 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 f830 	bl	8005d5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e019      	b.n	8005d54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f af41 	bne.w	8005bb0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f814 	bl	8005d5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005d52:	2300      	movs	r3, #0
  }
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0208 	orr.w	r2, r2, #8
 8005d7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0210 	orr.w	r2, r2, #16
 8005d8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6919      	ldr	r1, [r3, #16]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4b3c      	ldr	r3, [pc, #240]	@ (8005e98 <SPI_CloseTransfer+0x13c>)
 8005da8:	400b      	ands	r3, r1
 8005daa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005dba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d014      	beq.n	8005df2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0320 	and.w	r3, r3, #32
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00f      	beq.n	8005df2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0220 	orr.w	r2, r2, #32
 8005df0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d014      	beq.n	8005e28 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00f      	beq.n	8005e28 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e38:	f043 0201 	orr.w	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00f      	beq.n	8005e7c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e62:	f043 0208 	orr.w	r2, r3, #8
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	fffffc90 	.word	0xfffffc90

08005e9c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005eac:	e010      	b.n	8005ed0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eae:	f7fb fc61 	bl	8001774 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d803      	bhi.n	8005ec6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d102      	bne.n	8005ecc <SPI_WaitOnFlagUntilTimeout+0x30>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e00f      	b.n	8005ef0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695a      	ldr	r2, [r3, #20]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d0df      	beq.n	8005eae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	3307      	adds	r3, #7
 8005f16:	08db      	lsrs	r3, r3, #3
 8005f18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e049      	b.n	8005fd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f841 	bl	8005fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f000 fc61 	bl	8006834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e054      	b.n	80060b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d022      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x80>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d01d      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x80>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a22      	ldr	r2, [pc, #136]	@ (80060c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d018      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x80>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a21      	ldr	r2, [pc, #132]	@ (80060c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d013      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x80>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1f      	ldr	r2, [pc, #124]	@ (80060cc <HAL_TIM_Base_Start_IT+0xdc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00e      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x80>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1e      	ldr	r2, [pc, #120]	@ (80060d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d009      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x80>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d004      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x80>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d115      	bne.n	800609c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	4b19      	ldr	r3, [pc, #100]	@ (80060dc <HAL_TIM_Base_Start_IT+0xec>)
 8006078:	4013      	ands	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b06      	cmp	r3, #6
 8006080:	d015      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0xbe>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006088:	d011      	beq.n	80060ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609a:	e008      	b.n	80060ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	e000      	b.n	80060b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40010000 	.word	0x40010000
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00
 80060d0:	40010400 	.word	0x40010400
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40014000 	.word	0x40014000
 80060dc:	00010007 	.word	0x00010007

080060e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e049      	b.n	8006186 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fb fa62 	bl	80015d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f000 fb88 	bl	8006834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <HAL_TIM_PWM_Start+0x24>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e03c      	b.n	800622e <HAL_TIM_PWM_Start+0x9e>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d109      	bne.n	80061ce <HAL_TIM_PWM_Start+0x3e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	bf14      	ite	ne
 80061c6:	2301      	movne	r3, #1
 80061c8:	2300      	moveq	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	e02f      	b.n	800622e <HAL_TIM_PWM_Start+0x9e>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d109      	bne.n	80061e8 <HAL_TIM_PWM_Start+0x58>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	e022      	b.n	800622e <HAL_TIM_PWM_Start+0x9e>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	d109      	bne.n	8006202 <HAL_TIM_PWM_Start+0x72>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	e015      	b.n	800622e <HAL_TIM_PWM_Start+0x9e>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b10      	cmp	r3, #16
 8006206:	d109      	bne.n	800621c <HAL_TIM_PWM_Start+0x8c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	bf14      	ite	ne
 8006214:	2301      	movne	r3, #1
 8006216:	2300      	moveq	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e008      	b.n	800622e <HAL_TIM_PWM_Start+0x9e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	bf14      	ite	ne
 8006228:	2301      	movne	r3, #1
 800622a:	2300      	moveq	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0a1      	b.n	800637a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <HAL_TIM_PWM_Start+0xb6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006244:	e023      	b.n	800628e <HAL_TIM_PWM_Start+0xfe>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b04      	cmp	r3, #4
 800624a:	d104      	bne.n	8006256 <HAL_TIM_PWM_Start+0xc6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006254:	e01b      	b.n	800628e <HAL_TIM_PWM_Start+0xfe>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d104      	bne.n	8006266 <HAL_TIM_PWM_Start+0xd6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006264:	e013      	b.n	800628e <HAL_TIM_PWM_Start+0xfe>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b0c      	cmp	r3, #12
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start+0xe6>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006274:	e00b      	b.n	800628e <HAL_TIM_PWM_Start+0xfe>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b10      	cmp	r3, #16
 800627a:	d104      	bne.n	8006286 <HAL_TIM_PWM_Start+0xf6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006284:	e003      	b.n	800628e <HAL_TIM_PWM_Start+0xfe>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2201      	movs	r2, #1
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fe48 	bl	8006f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a38      	ldr	r2, [pc, #224]	@ (8006384 <HAL_TIM_PWM_Start+0x1f4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_TIM_PWM_Start+0x13e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a37      	ldr	r2, [pc, #220]	@ (8006388 <HAL_TIM_PWM_Start+0x1f8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_TIM_PWM_Start+0x13e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a35      	ldr	r2, [pc, #212]	@ (800638c <HAL_TIM_PWM_Start+0x1fc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_TIM_PWM_Start+0x13e>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a34      	ldr	r2, [pc, #208]	@ (8006390 <HAL_TIM_PWM_Start+0x200>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_TIM_PWM_Start+0x13e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a32      	ldr	r2, [pc, #200]	@ (8006394 <HAL_TIM_PWM_Start+0x204>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <HAL_TIM_PWM_Start+0x142>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <HAL_TIM_PWM_Start+0x144>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a25      	ldr	r2, [pc, #148]	@ (8006384 <HAL_TIM_PWM_Start+0x1f4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1a8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fa:	d01d      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1a8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a25      	ldr	r2, [pc, #148]	@ (8006398 <HAL_TIM_PWM_Start+0x208>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d018      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1a8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a24      	ldr	r2, [pc, #144]	@ (800639c <HAL_TIM_PWM_Start+0x20c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1a8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <HAL_TIM_PWM_Start+0x210>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00e      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1a8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1a      	ldr	r2, [pc, #104]	@ (8006388 <HAL_TIM_PWM_Start+0x1f8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1a8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1e      	ldr	r2, [pc, #120]	@ (80063a4 <HAL_TIM_PWM_Start+0x214>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1a8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	@ (800638c <HAL_TIM_PWM_Start+0x1fc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d115      	bne.n	8006364 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	4b1a      	ldr	r3, [pc, #104]	@ (80063a8 <HAL_TIM_PWM_Start+0x218>)
 8006340:	4013      	ands	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b06      	cmp	r3, #6
 8006348:	d015      	beq.n	8006376 <HAL_TIM_PWM_Start+0x1e6>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006350:	d011      	beq.n	8006376 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006362:	e008      	b.n	8006376 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	e000      	b.n	8006378 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006376:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400
 800638c:	40014000 	.word	0x40014000
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40001800 	.word	0x40001800
 80063a8:	00010007 	.word	0x00010007

080063ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d020      	beq.n	8006410 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01b      	beq.n	8006410 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f06f 0202 	mvn.w	r2, #2
 80063e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9fe 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 80063fc:	e005      	b.n	800640a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f9f0 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa01 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d020      	beq.n	800645c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01b      	beq.n	800645c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0204 	mvn.w	r2, #4
 800642c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9d8 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 8006448:	e005      	b.n	8006456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f9ca 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f9db 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d020      	beq.n	80064a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01b      	beq.n	80064a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f06f 0208 	mvn.w	r2, #8
 8006478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2204      	movs	r2, #4
 800647e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f9b2 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 8006494:	e005      	b.n	80064a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f9a4 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f9b5 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d020      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0210 	mvn.w	r2, #16
 80064c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2208      	movs	r2, #8
 80064ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f98c 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 80064e0:	e005      	b.n	80064ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f97e 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f98f 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0201 	mvn.w	r2, #1
 8006510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fa fcb6 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00c      	beq.n	8006546 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800653e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fdb1 	bl	80070a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00c      	beq.n	800656a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fda9 	bl	80070bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00c      	beq.n	800658e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f949 	bl	8006820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f06f 0220 	mvn.w	r2, #32
 80065aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fd71 	bl	8007094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e0ff      	b.n	80067da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b14      	cmp	r3, #20
 80065e6:	f200 80f0 	bhi.w	80067ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065ea:	a201      	add	r2, pc, #4	@ (adr r2, 80065f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006645 	.word	0x08006645
 80065f4:	080067cb 	.word	0x080067cb
 80065f8:	080067cb 	.word	0x080067cb
 80065fc:	080067cb 	.word	0x080067cb
 8006600:	08006685 	.word	0x08006685
 8006604:	080067cb 	.word	0x080067cb
 8006608:	080067cb 	.word	0x080067cb
 800660c:	080067cb 	.word	0x080067cb
 8006610:	080066c7 	.word	0x080066c7
 8006614:	080067cb 	.word	0x080067cb
 8006618:	080067cb 	.word	0x080067cb
 800661c:	080067cb 	.word	0x080067cb
 8006620:	08006707 	.word	0x08006707
 8006624:	080067cb 	.word	0x080067cb
 8006628:	080067cb 	.word	0x080067cb
 800662c:	080067cb 	.word	0x080067cb
 8006630:	08006749 	.word	0x08006749
 8006634:	080067cb 	.word	0x080067cb
 8006638:	080067cb 	.word	0x080067cb
 800663c:	080067cb 	.word	0x080067cb
 8006640:	08006789 	.word	0x08006789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	4618      	mov	r0, r3
 800664c:	f000 f998 	bl	8006980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0208 	orr.w	r2, r2, #8
 800665e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0204 	bic.w	r2, r2, #4
 800666e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6999      	ldr	r1, [r3, #24]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	619a      	str	r2, [r3, #24]
      break;
 8006682:	e0a5      	b.n	80067d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fa08 	bl	8006aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800669e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6999      	ldr	r1, [r3, #24]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	021a      	lsls	r2, r3, #8
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	619a      	str	r2, [r3, #24]
      break;
 80066c4:	e084      	b.n	80067d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fa71 	bl	8006bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0208 	orr.w	r2, r2, #8
 80066e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0204 	bic.w	r2, r2, #4
 80066f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69d9      	ldr	r1, [r3, #28]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	61da      	str	r2, [r3, #28]
      break;
 8006704:	e064      	b.n	80067d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fad9 	bl	8006cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69d9      	ldr	r1, [r3, #28]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	021a      	lsls	r2, r3, #8
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	61da      	str	r2, [r3, #28]
      break;
 8006746:	e043      	b.n	80067d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fb22 	bl	8006d98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0208 	orr.w	r2, r2, #8
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0204 	bic.w	r2, r2, #4
 8006772:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006786:	e023      	b.n	80067d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fb66 	bl	8006e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	021a      	lsls	r2, r3, #8
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067c8:	e002      	b.n	80067d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
      break;
 80067ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a46      	ldr	r2, [pc, #280]	@ (8006960 <TIM_Base_SetConfig+0x12c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006852:	d00f      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a43      	ldr	r2, [pc, #268]	@ (8006964 <TIM_Base_SetConfig+0x130>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00b      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a42      	ldr	r2, [pc, #264]	@ (8006968 <TIM_Base_SetConfig+0x134>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a41      	ldr	r2, [pc, #260]	@ (800696c <TIM_Base_SetConfig+0x138>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a40      	ldr	r2, [pc, #256]	@ (8006970 <TIM_Base_SetConfig+0x13c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d108      	bne.n	8006886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a35      	ldr	r2, [pc, #212]	@ (8006960 <TIM_Base_SetConfig+0x12c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01f      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006894:	d01b      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a32      	ldr	r2, [pc, #200]	@ (8006964 <TIM_Base_SetConfig+0x130>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d017      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a31      	ldr	r2, [pc, #196]	@ (8006968 <TIM_Base_SetConfig+0x134>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a30      	ldr	r2, [pc, #192]	@ (800696c <TIM_Base_SetConfig+0x138>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00f      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006970 <TIM_Base_SetConfig+0x13c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00b      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006974 <TIM_Base_SetConfig+0x140>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006978 <TIM_Base_SetConfig+0x144>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d003      	beq.n	80068ce <TIM_Base_SetConfig+0x9a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2c      	ldr	r2, [pc, #176]	@ (800697c <TIM_Base_SetConfig+0x148>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d108      	bne.n	80068e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a16      	ldr	r2, [pc, #88]	@ (8006960 <TIM_Base_SetConfig+0x12c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00f      	beq.n	800692c <TIM_Base_SetConfig+0xf8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a18      	ldr	r2, [pc, #96]	@ (8006970 <TIM_Base_SetConfig+0x13c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00b      	beq.n	800692c <TIM_Base_SetConfig+0xf8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a17      	ldr	r2, [pc, #92]	@ (8006974 <TIM_Base_SetConfig+0x140>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_Base_SetConfig+0xf8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a16      	ldr	r2, [pc, #88]	@ (8006978 <TIM_Base_SetConfig+0x144>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_Base_SetConfig+0xf8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a15      	ldr	r2, [pc, #84]	@ (800697c <TIM_Base_SetConfig+0x148>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d103      	bne.n	8006934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b01      	cmp	r3, #1
 8006944:	d105      	bne.n	8006952 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]
  }
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40010400 	.word	0x40010400
 8006974:	40014000 	.word	0x40014000
 8006978:	40014400 	.word	0x40014400
 800697c:	40014800 	.word	0x40014800

08006980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 0201 	bic.w	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <TIM_OC1_SetConfig+0x108>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 0302 	bic.w	r3, r3, #2
 80069c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a2d      	ldr	r2, [pc, #180]	@ (8006a8c <TIM_OC1_SetConfig+0x10c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00f      	beq.n	80069fc <TIM_OC1_SetConfig+0x7c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a2c      	ldr	r2, [pc, #176]	@ (8006a90 <TIM_OC1_SetConfig+0x110>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_OC1_SetConfig+0x7c>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a94 <TIM_OC1_SetConfig+0x114>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_OC1_SetConfig+0x7c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006a98 <TIM_OC1_SetConfig+0x118>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC1_SetConfig+0x7c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a29      	ldr	r2, [pc, #164]	@ (8006a9c <TIM_OC1_SetConfig+0x11c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10c      	bne.n	8006a16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0308 	bic.w	r3, r3, #8
 8006a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0304 	bic.w	r3, r3, #4
 8006a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a1c      	ldr	r2, [pc, #112]	@ (8006a8c <TIM_OC1_SetConfig+0x10c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00f      	beq.n	8006a3e <TIM_OC1_SetConfig+0xbe>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1b      	ldr	r2, [pc, #108]	@ (8006a90 <TIM_OC1_SetConfig+0x110>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00b      	beq.n	8006a3e <TIM_OC1_SetConfig+0xbe>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1a      	ldr	r2, [pc, #104]	@ (8006a94 <TIM_OC1_SetConfig+0x114>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d007      	beq.n	8006a3e <TIM_OC1_SetConfig+0xbe>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <TIM_OC1_SetConfig+0x118>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d003      	beq.n	8006a3e <TIM_OC1_SetConfig+0xbe>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a18      	ldr	r2, [pc, #96]	@ (8006a9c <TIM_OC1_SetConfig+0x11c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d111      	bne.n	8006a62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	621a      	str	r2, [r3, #32]
}
 8006a7c:	bf00      	nop
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	fffeff8f 	.word	0xfffeff8f
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40010400 	.word	0x40010400
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40014400 	.word	0x40014400
 8006a9c:	40014800 	.word	0x40014800

08006aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b087      	sub	sp, #28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	f023 0210 	bic.w	r2, r3, #16
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4b34      	ldr	r3, [pc, #208]	@ (8006b9c <TIM_OC2_SetConfig+0xfc>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0320 	bic.w	r3, r3, #32
 8006aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a29      	ldr	r2, [pc, #164]	@ (8006ba0 <TIM_OC2_SetConfig+0x100>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0x68>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a28      	ldr	r2, [pc, #160]	@ (8006ba4 <TIM_OC2_SetConfig+0x104>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10d      	bne.n	8006b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a1e      	ldr	r2, [pc, #120]	@ (8006ba0 <TIM_OC2_SetConfig+0x100>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00f      	beq.n	8006b4c <TIM_OC2_SetConfig+0xac>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba4 <TIM_OC2_SetConfig+0x104>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00b      	beq.n	8006b4c <TIM_OC2_SetConfig+0xac>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba8 <TIM_OC2_SetConfig+0x108>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d007      	beq.n	8006b4c <TIM_OC2_SetConfig+0xac>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bac <TIM_OC2_SetConfig+0x10c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC2_SetConfig+0xac>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb0 <TIM_OC2_SetConfig+0x110>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d113      	bne.n	8006b74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	feff8fff 	.word	0xfeff8fff
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800

08006bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4b33      	ldr	r3, [pc, #204]	@ (8006cac <TIM_OC3_SetConfig+0xf8>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a28      	ldr	r2, [pc, #160]	@ (8006cb0 <TIM_OC3_SetConfig+0xfc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_OC3_SetConfig+0x66>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a27      	ldr	r2, [pc, #156]	@ (8006cb4 <TIM_OC3_SetConfig+0x100>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10d      	bne.n	8006c36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb0 <TIM_OC3_SetConfig+0xfc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_OC3_SetConfig+0xaa>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb4 <TIM_OC3_SetConfig+0x100>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_OC3_SetConfig+0xaa>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb8 <TIM_OC3_SetConfig+0x104>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_OC3_SetConfig+0xaa>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1a      	ldr	r2, [pc, #104]	@ (8006cbc <TIM_OC3_SetConfig+0x108>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_OC3_SetConfig+0xaa>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a19      	ldr	r2, [pc, #100]	@ (8006cc0 <TIM_OC3_SetConfig+0x10c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d113      	bne.n	8006c86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	fffeff8f 	.word	0xfffeff8f
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40010400 	.word	0x40010400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800

08006cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4b24      	ldr	r3, [pc, #144]	@ (8006d80 <TIM_OC4_SetConfig+0xbc>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a19      	ldr	r2, [pc, #100]	@ (8006d84 <TIM_OC4_SetConfig+0xc0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00f      	beq.n	8006d44 <TIM_OC4_SetConfig+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a18      	ldr	r2, [pc, #96]	@ (8006d88 <TIM_OC4_SetConfig+0xc4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_OC4_SetConfig+0x80>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a17      	ldr	r2, [pc, #92]	@ (8006d8c <TIM_OC4_SetConfig+0xc8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_OC4_SetConfig+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a16      	ldr	r2, [pc, #88]	@ (8006d90 <TIM_OC4_SetConfig+0xcc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC4_SetConfig+0x80>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a15      	ldr	r2, [pc, #84]	@ (8006d94 <TIM_OC4_SetConfig+0xd0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d109      	bne.n	8006d58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	019b      	lsls	r3, r3, #6
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	feff8fff 	.word	0xfeff8fff
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40010400 	.word	0x40010400
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40014400 	.word	0x40014400
 8006d94:	40014800 	.word	0x40014800

08006d98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4b21      	ldr	r3, [pc, #132]	@ (8006e48 <TIM_OC5_SetConfig+0xb0>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <TIM_OC5_SetConfig+0xb4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00f      	beq.n	8006e0e <TIM_OC5_SetConfig+0x76>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a17      	ldr	r2, [pc, #92]	@ (8006e50 <TIM_OC5_SetConfig+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <TIM_OC5_SetConfig+0x76>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a16      	ldr	r2, [pc, #88]	@ (8006e54 <TIM_OC5_SetConfig+0xbc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d007      	beq.n	8006e0e <TIM_OC5_SetConfig+0x76>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a15      	ldr	r2, [pc, #84]	@ (8006e58 <TIM_OC5_SetConfig+0xc0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d003      	beq.n	8006e0e <TIM_OC5_SetConfig+0x76>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a14      	ldr	r2, [pc, #80]	@ (8006e5c <TIM_OC5_SetConfig+0xc4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d109      	bne.n	8006e22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	621a      	str	r2, [r3, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	fffeff8f 	.word	0xfffeff8f
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800

08006e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4b22      	ldr	r3, [pc, #136]	@ (8006f14 <TIM_OC6_SetConfig+0xb4>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	051b      	lsls	r3, r3, #20
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a19      	ldr	r2, [pc, #100]	@ (8006f18 <TIM_OC6_SetConfig+0xb8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x78>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a18      	ldr	r2, [pc, #96]	@ (8006f1c <TIM_OC6_SetConfig+0xbc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x78>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a17      	ldr	r2, [pc, #92]	@ (8006f20 <TIM_OC6_SetConfig+0xc0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x78>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a16      	ldr	r2, [pc, #88]	@ (8006f24 <TIM_OC6_SetConfig+0xc4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x78>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	@ (8006f28 <TIM_OC6_SetConfig+0xc8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d109      	bne.n	8006eec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	feff8fff 	.word	0xfeff8fff
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40010400 	.word	0x40010400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800

08006f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2201      	movs	r2, #1
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a1a      	ldr	r2, [r3, #32]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	401a      	ands	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	431a      	orrs	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e06d      	b.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a30      	ldr	r2, [pc, #192]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d004      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d108      	bne.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a20      	ldr	r2, [pc, #128]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d022      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007002:	d01d      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1d      	ldr	r2, [pc, #116]	@ (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d018      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1c      	ldr	r2, [pc, #112]	@ (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d013      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1a      	ldr	r2, [pc, #104]	@ (8007088 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00e      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a15      	ldr	r2, [pc, #84]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d009      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a16      	ldr	r2, [pc, #88]	@ (800708c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a15      	ldr	r2, [pc, #84]	@ (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10c      	bne.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4313      	orrs	r3, r2
 8007050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40001800 	.word	0x40001800
 8007090:	40014000 	.word	0x40014000

08007094 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <__NVIC_SetPriority>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db0a      	blt.n	80070fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	490c      	ldr	r1, [pc, #48]	@ (800711c <__NVIC_SetPriority+0x4c>)
 80070ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ee:	0112      	lsls	r2, r2, #4
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	440b      	add	r3, r1
 80070f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80070f8:	e00a      	b.n	8007110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4908      	ldr	r1, [pc, #32]	@ (8007120 <__NVIC_SetPriority+0x50>)
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3b04      	subs	r3, #4
 8007108:	0112      	lsls	r2, r2, #4
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	440b      	add	r3, r1
 800710e:	761a      	strb	r2, [r3, #24]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	e000e100 	.word	0xe000e100
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007128:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <SysTick_Handler+0x1c>)
 800712a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800712c:	f001 fd50 	bl	8008bd0 <xTaskGetSchedulerState>
 8007130:	4603      	mov	r3, r0
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007136:	f002 fb47 	bl	80097c8 <xPortSysTickHandler>
  }
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	e000e010 	.word	0xe000e010

08007144 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007148:	2100      	movs	r1, #0
 800714a:	f06f 0004 	mvn.w	r0, #4
 800714e:	f7ff ffbf 	bl	80070d0 <__NVIC_SetPriority>
#endif
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715e:	f3ef 8305 	mrs	r3, IPSR
 8007162:	603b      	str	r3, [r7, #0]
  return(result);
 8007164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800716a:	f06f 0305 	mvn.w	r3, #5
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	e00c      	b.n	800718c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007172:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <osKernelInitialize+0x44>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800717a:	4b08      	ldr	r3, [pc, #32]	@ (800719c <osKernelInitialize+0x44>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007180:	2300      	movs	r3, #0
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	e002      	b.n	800718c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800718c:	687b      	ldr	r3, [r7, #4]
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	2400044c 	.word	0x2400044c

080071a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	603b      	str	r3, [r7, #0]
  return(result);
 80071ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	e010      	b.n	80071dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071ba:	4b0b      	ldr	r3, [pc, #44]	@ (80071e8 <osKernelStart+0x48>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d109      	bne.n	80071d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071c2:	f7ff ffbf 	bl	8007144 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071c6:	4b08      	ldr	r3, [pc, #32]	@ (80071e8 <osKernelStart+0x48>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071cc:	f001 f87a 	bl	80082c4 <vTaskStartScheduler>
      stat = osOK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e002      	b.n	80071dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071dc:	687b      	ldr	r3, [r7, #4]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	2400044c 	.word	0x2400044c

080071ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	@ 0x38
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071fc:	f3ef 8305 	mrs	r3, IPSR
 8007200:	617b      	str	r3, [r7, #20]
  return(result);
 8007202:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007204:	2b00      	cmp	r3, #0
 8007206:	d17e      	bne.n	8007306 <osThreadNew+0x11a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d07b      	beq.n	8007306 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800720e:	2380      	movs	r3, #128	@ 0x80
 8007210:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007212:	2318      	movs	r3, #24
 8007214:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d045      	beq.n	80072b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <osThreadNew+0x48>
        name = attr->name;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d008      	beq.n	800725a <osThreadNew+0x6e>
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b38      	cmp	r3, #56	@ 0x38
 800724c:	d805      	bhi.n	800725a <osThreadNew+0x6e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <osThreadNew+0x72>
        return (NULL);
 800725a:	2300      	movs	r3, #0
 800725c:	e054      	b.n	8007308 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <osThreadNew+0xa8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b5b      	cmp	r3, #91	@ 0x5b
 800727c:	d90a      	bls.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <osThreadNew+0xa8>
        mem = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e010      	b.n	80072b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10c      	bne.n	80072b6 <osThreadNew+0xca>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <osThreadNew+0xca>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <osThreadNew+0xca>
          mem = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e001      	b.n	80072b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d110      	bne.n	80072de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fe1a 	bl	8007f0c <xTaskCreateStatic>
 80072d8:	4603      	mov	r3, r0
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	e013      	b.n	8007306 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d110      	bne.n	8007306 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fe68 	bl	8007fcc <xTaskCreate>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d001      	beq.n	8007306 <osThreadNew+0x11a>
            hTask = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007306:	693b      	ldr	r3, [r7, #16]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	@ 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007318:	f3ef 8305 	mrs	r3, IPSR
 800731c:	60bb      	str	r3, [r7, #8]
  return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <osDelay+0x1c>
    stat = osErrorISR;
 8007324:	f06f 0305 	mvn.w	r3, #5
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e007      	b.n	800733c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ff8e 	bl	8008258 <vTaskDelay>
    }
  }

  return (stat);
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a07      	ldr	r2, [pc, #28]	@ (8007374 <vApplicationGetIdleTaskMemory+0x2c>)
 8007358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	4a06      	ldr	r2, [pc, #24]	@ (8007378 <vApplicationGetIdleTaskMemory+0x30>)
 800735e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2280      	movs	r2, #128	@ 0x80
 8007364:	601a      	str	r2, [r3, #0]
}
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	24000450 	.word	0x24000450
 8007378:	240004ac 	.word	0x240004ac

0800737c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a07      	ldr	r2, [pc, #28]	@ (80073a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800738c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4a06      	ldr	r2, [pc, #24]	@ (80073ac <vApplicationGetTimerTaskMemory+0x30>)
 8007392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800739a:	601a      	str	r2, [r3, #0]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	240006ac 	.word	0x240006ac
 80073ac:	24000708 	.word	0x24000708

080073b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f103 0208 	add.w	r2, r3, #8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f103 0208 	add.w	r2, r3, #8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 0208 	add.w	r2, r3, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d103      	bne.n	8007472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e00c      	b.n	800748c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3308      	adds	r3, #8
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e002      	b.n	8007480 <vListInsert+0x2e>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d2f6      	bcs.n	800747a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6892      	ldr	r2, [r2, #8]
 80074da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6852      	ldr	r2, [r2, #4]
 80074e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d103      	bne.n	80074f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007544:	f002 f8b0 	bl	80096a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	68f9      	ldr	r1, [r7, #12]
 8007552:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	441a      	add	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007574:	3b01      	subs	r3, #1
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	441a      	add	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	22ff      	movs	r2, #255	@ 0xff
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	22ff      	movs	r2, #255	@ 0xff
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d114      	bne.n	80075c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01a      	beq.n	80075d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3310      	adds	r3, #16
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 f91a 	bl	80087e0 <xTaskRemoveFromEventList>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d012      	beq.n	80075d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075b2:	4b0d      	ldr	r3, [pc, #52]	@ (80075e8 <xQueueGenericReset+0xd0>)
 80075b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	e009      	b.n	80075d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3310      	adds	r3, #16
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fef1 	bl	80073b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3324      	adds	r3, #36	@ 0x24
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff feec 	bl	80073b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075d8:	f002 f898 	bl	800970c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075dc:	2301      	movs	r3, #1
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08e      	sub	sp, #56	@ 0x38
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <xQueueGenericCreateStatic+0x56>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <xQueueGenericCreateStatic+0x5a>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericCreateStatic+0x5c>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	623b      	str	r3, [r7, #32]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <xQueueGenericCreateStatic+0x84>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <xQueueGenericCreateStatic+0x88>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <xQueueGenericCreateStatic+0x8a>
 8007674:	2300      	movs	r3, #0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	61fb      	str	r3, [r7, #28]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007692:	2350      	movs	r3, #80	@ 0x50
 8007694:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b50      	cmp	r3, #80	@ 0x50
 800769a:	d00b      	beq.n	80076b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	61bb      	str	r3, [r7, #24]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00d      	beq.n	80076dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80076cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f805 	bl	80076e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80076de:	4618      	mov	r0, r3
 80076e0:	3730      	adds	r7, #48	@ 0x30
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d103      	bne.n	8007702 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e002      	b.n	8007708 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007714:	2101      	movs	r1, #1
 8007716:	69b8      	ldr	r0, [r7, #24]
 8007718:	f7ff fefe 	bl	8007518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08e      	sub	sp, #56	@ 0x38
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10b      	bne.n	8007760 <xQueueGenericSend+0x34>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <xQueueGenericSend+0x42>
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <xQueueGenericSend+0x46>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <xQueueGenericSend+0x48>
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <xQueueGenericSend+0x64>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	e7fd      	b.n	800778c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d103      	bne.n	800779e <xQueueGenericSend+0x72>
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <xQueueGenericSend+0x76>
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <xQueueGenericSend+0x78>
 80077a2:	2300      	movs	r3, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <xQueueGenericSend+0x94>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	623b      	str	r3, [r7, #32]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077c0:	f001 fa06 	bl	8008bd0 <xTaskGetSchedulerState>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <xQueueGenericSend+0xa4>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xQueueGenericSend+0xa8>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <xQueueGenericSend+0xaa>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61fb      	str	r3, [r7, #28]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077f2:	f001 ff59 	bl	80096a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <xQueueGenericSend+0xdc>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d129      	bne.n	800785c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800780e:	f000 fa0f 	bl	8007c30 <prvCopyDataToQueue>
 8007812:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	3324      	adds	r3, #36	@ 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f000 ffdd 	bl	80087e0 <xTaskRemoveFromEventList>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d013      	beq.n	8007854 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800782c:	4b3f      	ldr	r3, [pc, #252]	@ (800792c <xQueueGenericSend+0x200>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	e00a      	b.n	8007854 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007844:	4b39      	ldr	r3, [pc, #228]	@ (800792c <xQueueGenericSend+0x200>)
 8007846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007854:	f001 ff5a 	bl	800970c <vPortExitCritical>
				return pdPASS;
 8007858:	2301      	movs	r3, #1
 800785a:	e063      	b.n	8007924 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007862:	f001 ff53 	bl	800970c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007866:	2300      	movs	r3, #0
 8007868:	e05c      	b.n	8007924 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007870:	f107 0314 	add.w	r3, r7, #20
 8007874:	4618      	mov	r0, r3
 8007876:	f001 f817 	bl	80088a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800787e:	f001 ff45 	bl	800970c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007882:	f000 fd87 	bl	8008394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007886:	f001 ff0f 	bl	80096a8 <vPortEnterCritical>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007890:	b25b      	sxtb	r3, r3
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d103      	bne.n	80078a0 <xQueueGenericSend+0x174>
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a6:	b25b      	sxtb	r3, r3
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d103      	bne.n	80078b6 <xQueueGenericSend+0x18a>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078b6:	f001 ff29 	bl	800970c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ba:	1d3a      	adds	r2, r7, #4
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 f806 	bl	80088d4 <xTaskCheckForTimeOut>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d124      	bne.n	8007918 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078d0:	f000 faa6 	bl	8007e20 <prvIsQueueFull>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	3310      	adds	r3, #16
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 ff2a 	bl	800873c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078ea:	f000 fa31 	bl	8007d50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078ee:	f000 fd5f 	bl	80083b0 <xTaskResumeAll>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f af7c 	bne.w	80077f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078fa:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <xQueueGenericSend+0x200>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e772      	b.n	80077f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800790c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800790e:	f000 fa1f 	bl	8007d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007912:	f000 fd4d 	bl	80083b0 <xTaskResumeAll>
 8007916:	e76c      	b.n	80077f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800791a:	f000 fa19 	bl	8007d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791e:	f000 fd47 	bl	80083b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007924:	4618      	mov	r0, r3
 8007926:	3738      	adds	r7, #56	@ 0x38
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b090      	sub	sp, #64	@ 0x40
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <xQueueGenericSendFromISR+0x3e>
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <xQueueGenericSendFromISR+0x42>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGenericSendFromISR+0x44>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d103      	bne.n	800799e <xQueueGenericSendFromISR+0x6e>
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <xQueueGenericSendFromISR+0x72>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericSendFromISR+0x74>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	e7fd      	b.n	80079bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079c0:	f001 ff52 	bl	8009868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079c4:	f3ef 8211 	mrs	r2, BASEPRI
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	61fa      	str	r2, [r7, #28]
 80079da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xQueueGenericSendFromISR+0xc2>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d12f      	bne.n	8007a52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a08:	f000 f912 	bl	8007c30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d112      	bne.n	8007a3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d016      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	3324      	adds	r3, #36	@ 0x24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fedc 	bl	80087e0 <xTaskRemoveFromEventList>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00e      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e007      	b.n	8007a4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a40:	3301      	adds	r3, #1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	b25a      	sxtb	r2, r3
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a50:	e001      	b.n	8007a56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3740      	adds	r7, #64	@ 0x40
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08c      	sub	sp, #48	@ 0x30
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <xQueueReceive+0x32>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	623b      	str	r3, [r7, #32]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <xQueueReceive+0x40>
 8007aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <xQueueReceive+0x44>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <xQueueReceive+0x46>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <xQueueReceive+0x62>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	61fb      	str	r3, [r7, #28]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ace:	f001 f87f 	bl	8008bd0 <xTaskGetSchedulerState>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <xQueueReceive+0x72>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <xQueueReceive+0x76>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueReceive+0x78>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <xQueueReceive+0x94>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	61bb      	str	r3, [r7, #24]
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b00:	f001 fdd2 	bl	80096a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01f      	beq.n	8007b50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b14:	f000 f8f6 	bl	8007d04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	1e5a      	subs	r2, r3, #1
 8007b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00f      	beq.n	8007b48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fe57 	bl	80087e0 <xTaskRemoveFromEventList>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b38:	4b3c      	ldr	r3, [pc, #240]	@ (8007c2c <xQueueReceive+0x1c0>)
 8007b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b48:	f001 fde0 	bl	800970c <vPortExitCritical>
				return pdPASS;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e069      	b.n	8007c24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b56:	f001 fdd9 	bl	800970c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e062      	b.n	8007c24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d106      	bne.n	8007b72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fe9d 	bl	80088a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b72:	f001 fdcb 	bl	800970c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b76:	f000 fc0d 	bl	8008394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b7a:	f001 fd95 	bl	80096a8 <vPortEnterCritical>
 8007b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b84:	b25b      	sxtb	r3, r3
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d103      	bne.n	8007b94 <xQueueReceive+0x128>
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b9a:	b25b      	sxtb	r3, r3
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d103      	bne.n	8007baa <xQueueReceive+0x13e>
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007baa:	f001 fdaf 	bl	800970c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bae:	1d3a      	adds	r2, r7, #4
 8007bb0:	f107 0310 	add.w	r3, r7, #16
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fe8c 	bl	80088d4 <xTaskCheckForTimeOut>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d123      	bne.n	8007c0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bc4:	f000 f916 	bl	8007df4 <prvIsQueueEmpty>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d017      	beq.n	8007bfe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd0:	3324      	adds	r3, #36	@ 0x24
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fdb0 	bl	800873c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bde:	f000 f8b7 	bl	8007d50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007be2:	f000 fbe5 	bl	80083b0 <xTaskResumeAll>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d189      	bne.n	8007b00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007bec:	4b0f      	ldr	r3, [pc, #60]	@ (8007c2c <xQueueReceive+0x1c0>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	e780      	b.n	8007b00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c00:	f000 f8a6 	bl	8007d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c04:	f000 fbd4 	bl	80083b0 <xTaskResumeAll>
 8007c08:	e77a      	b.n	8007b00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c0c:	f000 f8a0 	bl	8007d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c10:	f000 fbce 	bl	80083b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c16:	f000 f8ed 	bl	8007df4 <prvIsQueueEmpty>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f43f af6f 	beq.w	8007b00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3730      	adds	r7, #48	@ 0x30
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d14d      	bne.n	8007cf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 ffd6 	bl	8008c0c <xTaskPriorityDisinherit>
 8007c60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	e043      	b.n	8007cf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d119      	bne.n	8007ca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6858      	ldr	r0, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	f003 fba9 	bl	800b3d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c88:	441a      	add	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d32b      	bcc.n	8007cf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	e026      	b.n	8007cf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68d8      	ldr	r0, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	461a      	mov	r2, r3
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	f003 fb8f 	bl	800b3d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	441a      	add	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d207      	bcs.n	8007ce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd8:	425b      	negs	r3, r3
 8007cda:	441a      	add	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d105      	bne.n	8007cf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cfa:	697b      	ldr	r3, [r7, #20]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d018      	beq.n	8007d48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	441a      	add	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d303      	bcc.n	8007d38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68d9      	ldr	r1, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d40:	461a      	mov	r2, r3
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f003 fb45 	bl	800b3d2 <memcpy>
	}
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d58:	f001 fca6 	bl	80096a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d64:	e011      	b.n	8007d8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d012      	beq.n	8007d94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3324      	adds	r3, #36	@ 0x24
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fd34 	bl	80087e0 <xTaskRemoveFromEventList>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d7e:	f000 fe0d 	bl	800899c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dce9      	bgt.n	8007d66 <prvUnlockQueue+0x16>
 8007d92:	e000      	b.n	8007d96 <prvUnlockQueue+0x46>
					break;
 8007d94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	22ff      	movs	r2, #255	@ 0xff
 8007d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d9e:	f001 fcb5 	bl	800970c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007da2:	f001 fc81 	bl	80096a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dae:	e011      	b.n	8007dd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3310      	adds	r3, #16
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fd0f 	bl	80087e0 <xTaskRemoveFromEventList>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dc8:	f000 fde8 	bl	800899c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dce9      	bgt.n	8007db0 <prvUnlockQueue+0x60>
 8007ddc:	e000      	b.n	8007de0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	22ff      	movs	r2, #255	@ 0xff
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007de8:	f001 fc90 	bl	800970c <vPortExitCritical>
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dfc:	f001 fc54 	bl	80096a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e001      	b.n	8007e12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e12:	f001 fc7b 	bl	800970c <vPortExitCritical>

	return xReturn;
 8007e16:	68fb      	ldr	r3, [r7, #12]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e28:	f001 fc3e 	bl	80096a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d102      	bne.n	8007e3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e001      	b.n	8007e42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e42:	f001 fc63 	bl	800970c <vPortExitCritical>

	return xReturn;
 8007e46:	68fb      	ldr	r3, [r7, #12]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	e014      	b.n	8007e8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e60:	4a0f      	ldr	r2, [pc, #60]	@ (8007ea0 <vQueueAddToRegistry+0x50>)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10b      	bne.n	8007e84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e6c:	490c      	ldr	r1, [pc, #48]	@ (8007ea0 <vQueueAddToRegistry+0x50>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e76:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea0 <vQueueAddToRegistry+0x50>)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e82:	e006      	b.n	8007e92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b07      	cmp	r3, #7
 8007e8e:	d9e7      	bls.n	8007e60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	24000b08 	.word	0x24000b08

08007ea4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007eb4:	f001 fbf8 	bl	80096a8 <vPortEnterCritical>
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ebe:	b25b      	sxtb	r3, r3
 8007ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec4:	d103      	bne.n	8007ece <vQueueWaitForMessageRestricted+0x2a>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	d103      	bne.n	8007ee4 <vQueueWaitForMessageRestricted+0x40>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ee4:	f001 fc12 	bl	800970c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	3324      	adds	r3, #36	@ 0x24
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fc45 	bl	8008788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007efe:	6978      	ldr	r0, [r7, #20]
 8007f00:	f7ff ff26 	bl	8007d50 <prvUnlockQueue>
	}
 8007f04:	bf00      	nop
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	@ 0x38
 8007f10:	af04      	add	r7, sp, #16
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	623b      	str	r3, [r7, #32]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	61fb      	str	r3, [r7, #28]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f56:	235c      	movs	r3, #92	@ 0x5c
 8007f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f5e:	d00b      	beq.n	8007f78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61bb      	str	r3, [r7, #24]
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01e      	beq.n	8007fbe <xTaskCreateStatic+0xb2>
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01b      	beq.n	8007fbe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	9302      	str	r3, [sp, #8]
 8007fa0:	f107 0314 	add.w	r3, r7, #20
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f850 	bl	8008056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fb8:	f000 f8de 	bl	8008178 <prvAddNewTaskToReadyList>
 8007fbc:	e001      	b.n	8007fc2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fc2:	697b      	ldr	r3, [r7, #20]
	}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3728      	adds	r7, #40	@ 0x28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08c      	sub	sp, #48	@ 0x30
 8007fd0:	af04      	add	r7, sp, #16
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fc83 	bl	80098ec <pvPortMalloc>
 8007fe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00e      	beq.n	800800c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fee:	205c      	movs	r0, #92	@ 0x5c
 8007ff0:	f001 fc7c 	bl	80098ec <pvPortMalloc>
 8007ff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	631a      	str	r2, [r3, #48]	@ 0x30
 8008002:	e005      	b.n	8008010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008004:	6978      	ldr	r0, [r7, #20]
 8008006:	f001 fd3f 	bl	8009a88 <vPortFree>
 800800a:	e001      	b.n	8008010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d017      	beq.n	8008046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	2300      	movs	r3, #0
 8008022:	9303      	str	r3, [sp, #12]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f80e 	bl	8008056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800803a:	69f8      	ldr	r0, [r7, #28]
 800803c:	f000 f89c 	bl	8008178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008040:	2301      	movs	r3, #1
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	e002      	b.n	800804c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008046:	f04f 33ff 	mov.w	r3, #4294967295
 800804a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800804c:	69bb      	ldr	r3, [r7, #24]
	}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b088      	sub	sp, #32
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	461a      	mov	r2, r3
 800806e:	21a5      	movs	r1, #165	@ 0xa5
 8008070:	f003 f91f 	bl	800b2b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800807e:	440b      	add	r3, r1
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	f023 0307 	bic.w	r3, r3, #7
 800808c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	617b      	str	r3, [r7, #20]
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01f      	beq.n	80080f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	e012      	b.n	80080e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	7819      	ldrb	r1, [r3, #0]
 80080c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	3334      	adds	r3, #52	@ 0x34
 80080cc:	460a      	mov	r2, r1
 80080ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	3301      	adds	r3, #1
 80080e0:	61fb      	str	r3, [r7, #28]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2b0f      	cmp	r3, #15
 80080e6:	d9e9      	bls.n	80080bc <prvInitialiseNewTask+0x66>
 80080e8:	e000      	b.n	80080ec <prvInitialiseNewTask+0x96>
			{
				break;
 80080ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080f4:	e003      	b.n	80080fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	2b37      	cmp	r3, #55	@ 0x37
 8008102:	d901      	bls.n	8008108 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008104:	2337      	movs	r3, #55	@ 0x37
 8008106:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800810c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008112:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	2200      	movs	r2, #0
 8008118:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	3304      	adds	r3, #4
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff f966 	bl	80073f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	3318      	adds	r3, #24
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff f961 	bl	80073f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008132:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008136:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008142:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008146:	2200      	movs	r2, #0
 8008148:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	68f9      	ldr	r1, [r7, #12]
 8008156:	69b8      	ldr	r0, [r7, #24]
 8008158:	f001 f976 	bl	8009448 <pxPortInitialiseStack>
 800815c:	4602      	mov	r2, r0
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800816c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800816e:	bf00      	nop
 8008170:	3720      	adds	r7, #32
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008180:	f001 fa92 	bl	80096a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008184:	4b2d      	ldr	r3, [pc, #180]	@ (800823c <prvAddNewTaskToReadyList+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3301      	adds	r3, #1
 800818a:	4a2c      	ldr	r2, [pc, #176]	@ (800823c <prvAddNewTaskToReadyList+0xc4>)
 800818c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800818e:	4b2c      	ldr	r3, [pc, #176]	@ (8008240 <prvAddNewTaskToReadyList+0xc8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008196:	4a2a      	ldr	r2, [pc, #168]	@ (8008240 <prvAddNewTaskToReadyList+0xc8>)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800819c:	4b27      	ldr	r3, [pc, #156]	@ (800823c <prvAddNewTaskToReadyList+0xc4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d110      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081a4:	f000 fc1e 	bl	80089e4 <prvInitialiseTaskLists>
 80081a8:	e00d      	b.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081aa:	4b26      	ldr	r3, [pc, #152]	@ (8008244 <prvAddNewTaskToReadyList+0xcc>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081b2:	4b23      	ldr	r3, [pc, #140]	@ (8008240 <prvAddNewTaskToReadyList+0xc8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081bc:	429a      	cmp	r2, r3
 80081be:	d802      	bhi.n	80081c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008240 <prvAddNewTaskToReadyList+0xc8>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081c6:	4b20      	ldr	r3, [pc, #128]	@ (8008248 <prvAddNewTaskToReadyList+0xd0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008248 <prvAddNewTaskToReadyList+0xd0>)
 80081ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008248 <prvAddNewTaskToReadyList+0xd0>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081dc:	4b1b      	ldr	r3, [pc, #108]	@ (800824c <prvAddNewTaskToReadyList+0xd4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d903      	bls.n	80081ec <prvAddNewTaskToReadyList+0x74>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e8:	4a18      	ldr	r2, [pc, #96]	@ (800824c <prvAddNewTaskToReadyList+0xd4>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4a15      	ldr	r2, [pc, #84]	@ (8008250 <prvAddNewTaskToReadyList+0xd8>)
 80081fa:	441a      	add	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7ff f901 	bl	800740a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008208:	f001 fa80 	bl	800970c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800820c:	4b0d      	ldr	r3, [pc, #52]	@ (8008244 <prvAddNewTaskToReadyList+0xcc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00e      	beq.n	8008232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008214:	4b0a      	ldr	r3, [pc, #40]	@ (8008240 <prvAddNewTaskToReadyList+0xc8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821e:	429a      	cmp	r2, r3
 8008220:	d207      	bcs.n	8008232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008222:	4b0c      	ldr	r3, [pc, #48]	@ (8008254 <prvAddNewTaskToReadyList+0xdc>)
 8008224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	2400101c 	.word	0x2400101c
 8008240:	24000b48 	.word	0x24000b48
 8008244:	24001028 	.word	0x24001028
 8008248:	24001038 	.word	0x24001038
 800824c:	24001024 	.word	0x24001024
 8008250:	24000b4c 	.word	0x24000b4c
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d018      	beq.n	800829c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800826a:	4b14      	ldr	r3, [pc, #80]	@ (80082bc <vTaskDelay+0x64>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <vTaskDelay+0x32>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60bb      	str	r3, [r7, #8]
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	e7fd      	b.n	8008286 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800828a:	f000 f883 	bl	8008394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800828e:	2100      	movs	r1, #0
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fd2b 	bl	8008cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008296:	f000 f88b 	bl	80083b0 <xTaskResumeAll>
 800829a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082a2:	4b07      	ldr	r3, [pc, #28]	@ (80082c0 <vTaskDelay+0x68>)
 80082a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	24001044 	.word	0x24001044
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08a      	sub	sp, #40	@ 0x28
 80082c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082d2:	463a      	mov	r2, r7
 80082d4:	1d39      	adds	r1, r7, #4
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff f834 	bl	8007348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	9202      	str	r2, [sp, #8]
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	2300      	movs	r3, #0
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	2300      	movs	r3, #0
 80082f0:	460a      	mov	r2, r1
 80082f2:	4922      	ldr	r1, [pc, #136]	@ (800837c <vTaskStartScheduler+0xb8>)
 80082f4:	4822      	ldr	r0, [pc, #136]	@ (8008380 <vTaskStartScheduler+0xbc>)
 80082f6:	f7ff fe09 	bl	8007f0c <xTaskCreateStatic>
 80082fa:	4603      	mov	r3, r0
 80082fc:	4a21      	ldr	r2, [pc, #132]	@ (8008384 <vTaskStartScheduler+0xc0>)
 80082fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008300:	4b20      	ldr	r3, [pc, #128]	@ (8008384 <vTaskStartScheduler+0xc0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008308:	2301      	movs	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	e001      	b.n	8008312 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d102      	bne.n	800831e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008318:	f000 fd3c 	bl	8008d94 <xTimerCreateTimerTask>
 800831c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d116      	bne.n	8008352 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	613b      	str	r3, [r7, #16]
}
 8008336:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008338:	4b13      	ldr	r3, [pc, #76]	@ (8008388 <vTaskStartScheduler+0xc4>)
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008340:	4b12      	ldr	r3, [pc, #72]	@ (800838c <vTaskStartScheduler+0xc8>)
 8008342:	2201      	movs	r2, #1
 8008344:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008346:	4b12      	ldr	r3, [pc, #72]	@ (8008390 <vTaskStartScheduler+0xcc>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800834c:	f001 f908 	bl	8009560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008350:	e00f      	b.n	8008372 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008358:	d10b      	bne.n	8008372 <vTaskStartScheduler+0xae>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	60fb      	str	r3, [r7, #12]
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	e7fd      	b.n	800836e <vTaskStartScheduler+0xaa>
}
 8008372:	bf00      	nop
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	0800d2a8 	.word	0x0800d2a8
 8008380:	080089b5 	.word	0x080089b5
 8008384:	24001040 	.word	0x24001040
 8008388:	2400103c 	.word	0x2400103c
 800838c:	24001028 	.word	0x24001028
 8008390:	24001020 	.word	0x24001020

08008394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008398:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <vTaskSuspendAll+0x18>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	4a03      	ldr	r2, [pc, #12]	@ (80083ac <vTaskSuspendAll+0x18>)
 80083a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083a2:	bf00      	nop
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	24001044 	.word	0x24001044

080083b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083be:	4b42      	ldr	r3, [pc, #264]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <xTaskResumeAll+0x2e>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	603b      	str	r3, [r7, #0]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083de:	f001 f963 	bl	80096a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083e2:	4b39      	ldr	r3, [pc, #228]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4a37      	ldr	r2, [pc, #220]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ec:	4b36      	ldr	r3, [pc, #216]	@ (80084c8 <xTaskResumeAll+0x118>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d162      	bne.n	80084ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083f4:	4b35      	ldr	r3, [pc, #212]	@ (80084cc <xTaskResumeAll+0x11c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05e      	beq.n	80084ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083fc:	e02f      	b.n	800845e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b34      	ldr	r3, [pc, #208]	@ (80084d0 <xTaskResumeAll+0x120>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3318      	adds	r3, #24
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff f85a 	bl	80074c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff f855 	bl	80074c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800841e:	4b2d      	ldr	r3, [pc, #180]	@ (80084d4 <xTaskResumeAll+0x124>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d903      	bls.n	800842e <xTaskResumeAll+0x7e>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842a:	4a2a      	ldr	r2, [pc, #168]	@ (80084d4 <xTaskResumeAll+0x124>)
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4a27      	ldr	r2, [pc, #156]	@ (80084d8 <xTaskResumeAll+0x128>)
 800843c:	441a      	add	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f7fe ffe0 	bl	800740a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844e:	4b23      	ldr	r3, [pc, #140]	@ (80084dc <xTaskResumeAll+0x12c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	429a      	cmp	r2, r3
 8008456:	d302      	bcc.n	800845e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008458:	4b21      	ldr	r3, [pc, #132]	@ (80084e0 <xTaskResumeAll+0x130>)
 800845a:	2201      	movs	r2, #1
 800845c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800845e:	4b1c      	ldr	r3, [pc, #112]	@ (80084d0 <xTaskResumeAll+0x120>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1cb      	bne.n	80083fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800846c:	f000 fb90 	bl	8008b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008470:	4b1c      	ldr	r3, [pc, #112]	@ (80084e4 <xTaskResumeAll+0x134>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d010      	beq.n	800849e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800847c:	f000 f846 	bl	800850c <xTaskIncrementTick>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008486:	4b16      	ldr	r3, [pc, #88]	@ (80084e0 <xTaskResumeAll+0x130>)
 8008488:	2201      	movs	r2, #1
 800848a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3b01      	subs	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f1      	bne.n	800847c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008498:	4b12      	ldr	r3, [pc, #72]	@ (80084e4 <xTaskResumeAll+0x134>)
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800849e:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <xTaskResumeAll+0x130>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084a6:	2301      	movs	r3, #1
 80084a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084aa:	4b0f      	ldr	r3, [pc, #60]	@ (80084e8 <xTaskResumeAll+0x138>)
 80084ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ba:	f001 f927 	bl	800970c <vPortExitCritical>

	return xAlreadyYielded;
 80084be:	68bb      	ldr	r3, [r7, #8]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	24001044 	.word	0x24001044
 80084cc:	2400101c 	.word	0x2400101c
 80084d0:	24000fdc 	.word	0x24000fdc
 80084d4:	24001024 	.word	0x24001024
 80084d8:	24000b4c 	.word	0x24000b4c
 80084dc:	24000b48 	.word	0x24000b48
 80084e0:	24001030 	.word	0x24001030
 80084e4:	2400102c 	.word	0x2400102c
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084f2:	4b05      	ldr	r3, [pc, #20]	@ (8008508 <xTaskGetTickCount+0x1c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084f8:	687b      	ldr	r3, [r7, #4]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	24001020 	.word	0x24001020

0800850c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008516:	4b4f      	ldr	r3, [pc, #316]	@ (8008654 <xTaskIncrementTick+0x148>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f040 8090 	bne.w	8008640 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008520:	4b4d      	ldr	r3, [pc, #308]	@ (8008658 <xTaskIncrementTick+0x14c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008528:	4a4b      	ldr	r2, [pc, #300]	@ (8008658 <xTaskIncrementTick+0x14c>)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d121      	bne.n	8008578 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008534:	4b49      	ldr	r3, [pc, #292]	@ (800865c <xTaskIncrementTick+0x150>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00b      	beq.n	8008556 <xTaskIncrementTick+0x4a>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	603b      	str	r3, [r7, #0]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <xTaskIncrementTick+0x46>
 8008556:	4b41      	ldr	r3, [pc, #260]	@ (800865c <xTaskIncrementTick+0x150>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	4b40      	ldr	r3, [pc, #256]	@ (8008660 <xTaskIncrementTick+0x154>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a3e      	ldr	r2, [pc, #248]	@ (800865c <xTaskIncrementTick+0x150>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	4a3e      	ldr	r2, [pc, #248]	@ (8008660 <xTaskIncrementTick+0x154>)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	4b3e      	ldr	r3, [pc, #248]	@ (8008664 <xTaskIncrementTick+0x158>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	4a3c      	ldr	r2, [pc, #240]	@ (8008664 <xTaskIncrementTick+0x158>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	f000 fb0c 	bl	8008b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008578:	4b3b      	ldr	r3, [pc, #236]	@ (8008668 <xTaskIncrementTick+0x15c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	429a      	cmp	r2, r3
 8008580:	d349      	bcc.n	8008616 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008582:	4b36      	ldr	r3, [pc, #216]	@ (800865c <xTaskIncrementTick+0x150>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800858c:	4b36      	ldr	r3, [pc, #216]	@ (8008668 <xTaskIncrementTick+0x15c>)
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	601a      	str	r2, [r3, #0]
					break;
 8008594:	e03f      	b.n	8008616 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008596:	4b31      	ldr	r3, [pc, #196]	@ (800865c <xTaskIncrementTick+0x150>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d203      	bcs.n	80085b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008668 <xTaskIncrementTick+0x15c>)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085b4:	e02f      	b.n	8008616 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe ff82 	bl	80074c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d004      	beq.n	80085d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3318      	adds	r3, #24
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe ff79 	bl	80074c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d6:	4b25      	ldr	r3, [pc, #148]	@ (800866c <xTaskIncrementTick+0x160>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d903      	bls.n	80085e6 <xTaskIncrementTick+0xda>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	4a22      	ldr	r2, [pc, #136]	@ (800866c <xTaskIncrementTick+0x160>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008670 <xTaskIncrementTick+0x164>)
 80085f4:	441a      	add	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fe ff04 	bl	800740a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	4b1b      	ldr	r3, [pc, #108]	@ (8008674 <xTaskIncrementTick+0x168>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	429a      	cmp	r2, r3
 800860e:	d3b8      	bcc.n	8008582 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008614:	e7b5      	b.n	8008582 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008616:	4b17      	ldr	r3, [pc, #92]	@ (8008674 <xTaskIncrementTick+0x168>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861c:	4914      	ldr	r1, [pc, #80]	@ (8008670 <xTaskIncrementTick+0x164>)
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d901      	bls.n	8008632 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008632:	4b11      	ldr	r3, [pc, #68]	@ (8008678 <xTaskIncrementTick+0x16c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800863a:	2301      	movs	r3, #1
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e004      	b.n	800864a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008640:	4b0e      	ldr	r3, [pc, #56]	@ (800867c <xTaskIncrementTick+0x170>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3301      	adds	r3, #1
 8008646:	4a0d      	ldr	r2, [pc, #52]	@ (800867c <xTaskIncrementTick+0x170>)
 8008648:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800864a:	697b      	ldr	r3, [r7, #20]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	24001044 	.word	0x24001044
 8008658:	24001020 	.word	0x24001020
 800865c:	24000fd4 	.word	0x24000fd4
 8008660:	24000fd8 	.word	0x24000fd8
 8008664:	24001034 	.word	0x24001034
 8008668:	2400103c 	.word	0x2400103c
 800866c:	24001024 	.word	0x24001024
 8008670:	24000b4c 	.word	0x24000b4c
 8008674:	24000b48 	.word	0x24000b48
 8008678:	24001030 	.word	0x24001030
 800867c:	2400102c 	.word	0x2400102c

08008680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008686:	4b28      	ldr	r3, [pc, #160]	@ (8008728 <vTaskSwitchContext+0xa8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800868e:	4b27      	ldr	r3, [pc, #156]	@ (800872c <vTaskSwitchContext+0xac>)
 8008690:	2201      	movs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008694:	e042      	b.n	800871c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008696:	4b25      	ldr	r3, [pc, #148]	@ (800872c <vTaskSwitchContext+0xac>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800869c:	4b24      	ldr	r3, [pc, #144]	@ (8008730 <vTaskSwitchContext+0xb0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e011      	b.n	80086c8 <vTaskSwitchContext+0x48>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	607b      	str	r3, [r7, #4]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <vTaskSwitchContext+0x3e>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	491a      	ldr	r1, [pc, #104]	@ (8008734 <vTaskSwitchContext+0xb4>)
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0e3      	beq.n	80086a4 <vTaskSwitchContext+0x24>
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4a13      	ldr	r2, [pc, #76]	@ (8008734 <vTaskSwitchContext+0xb4>)
 80086e8:	4413      	add	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	605a      	str	r2, [r3, #4]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	3308      	adds	r3, #8
 80086fe:	429a      	cmp	r2, r3
 8008700:	d104      	bne.n	800870c <vTaskSwitchContext+0x8c>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	605a      	str	r2, [r3, #4]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	4a09      	ldr	r2, [pc, #36]	@ (8008738 <vTaskSwitchContext+0xb8>)
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4a06      	ldr	r2, [pc, #24]	@ (8008730 <vTaskSwitchContext+0xb0>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6013      	str	r3, [r2, #0]
}
 800871c:	bf00      	nop
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	24001044 	.word	0x24001044
 800872c:	24001030 	.word	0x24001030
 8008730:	24001024 	.word	0x24001024
 8008734:	24000b4c 	.word	0x24000b4c
 8008738:	24000b48 	.word	0x24000b48

0800873c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	60fb      	str	r3, [r7, #12]
}
 800875e:	bf00      	nop
 8008760:	bf00      	nop
 8008762:	e7fd      	b.n	8008760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008764:	4b07      	ldr	r3, [pc, #28]	@ (8008784 <vTaskPlaceOnEventList+0x48>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3318      	adds	r3, #24
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7fe fe70 	bl	8007452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008772:	2101      	movs	r1, #1
 8008774:	6838      	ldr	r0, [r7, #0]
 8008776:	f000 fab9 	bl	8008cec <prvAddCurrentTaskToDelayedList>
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	24000b48 	.word	0x24000b48

08008788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10b      	bne.n	80087b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	617b      	str	r3, [r7, #20]
}
 80087ac:	bf00      	nop
 80087ae:	bf00      	nop
 80087b0:	e7fd      	b.n	80087ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087b2:	4b0a      	ldr	r3, [pc, #40]	@ (80087dc <vTaskPlaceOnEventListRestricted+0x54>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3318      	adds	r3, #24
 80087b8:	4619      	mov	r1, r3
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7fe fe25 	bl	800740a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	68b8      	ldr	r0, [r7, #8]
 80087d0:	f000 fa8c 	bl	8008cec <prvAddCurrentTaskToDelayedList>
	}
 80087d4:	bf00      	nop
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	24000b48 	.word	0x24000b48

080087e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10b      	bne.n	800880e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60fb      	str	r3, [r7, #12]
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	e7fd      	b.n	800880a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	3318      	adds	r3, #24
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe fe56 	bl	80074c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008818:	4b1d      	ldr	r3, [pc, #116]	@ (8008890 <xTaskRemoveFromEventList+0xb0>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d11d      	bne.n	800885c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	3304      	adds	r3, #4
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fe4d 	bl	80074c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882e:	4b19      	ldr	r3, [pc, #100]	@ (8008894 <xTaskRemoveFromEventList+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d903      	bls.n	800883e <xTaskRemoveFromEventList+0x5e>
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883a:	4a16      	ldr	r2, [pc, #88]	@ (8008894 <xTaskRemoveFromEventList+0xb4>)
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4a13      	ldr	r2, [pc, #76]	@ (8008898 <xTaskRemoveFromEventList+0xb8>)
 800884c:	441a      	add	r2, r3
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	3304      	adds	r3, #4
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f7fe fdd8 	bl	800740a <vListInsertEnd>
 800885a:	e005      	b.n	8008868 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3318      	adds	r3, #24
 8008860:	4619      	mov	r1, r3
 8008862:	480e      	ldr	r0, [pc, #56]	@ (800889c <xTaskRemoveFromEventList+0xbc>)
 8008864:	f7fe fdd1 	bl	800740a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886c:	4b0c      	ldr	r3, [pc, #48]	@ (80088a0 <xTaskRemoveFromEventList+0xc0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008872:	429a      	cmp	r2, r3
 8008874:	d905      	bls.n	8008882 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800887a:	4b0a      	ldr	r3, [pc, #40]	@ (80088a4 <xTaskRemoveFromEventList+0xc4>)
 800887c:	2201      	movs	r2, #1
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	e001      	b.n	8008886 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008886:	697b      	ldr	r3, [r7, #20]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	24001044 	.word	0x24001044
 8008894:	24001024 	.word	0x24001024
 8008898:	24000b4c 	.word	0x24000b4c
 800889c:	24000fdc 	.word	0x24000fdc
 80088a0:	24000b48 	.word	0x24000b48
 80088a4:	24001030 	.word	0x24001030

080088a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088b0:	4b06      	ldr	r3, [pc, #24]	@ (80088cc <vTaskInternalSetTimeOutState+0x24>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088b8:	4b05      	ldr	r3, [pc, #20]	@ (80088d0 <vTaskInternalSetTimeOutState+0x28>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	605a      	str	r2, [r3, #4]
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	24001034 	.word	0x24001034
 80088d0:	24001020 	.word	0x24001020

080088d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10b      	bne.n	80088fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	613b      	str	r3, [r7, #16]
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	e7fd      	b.n	80088f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	60fb      	str	r3, [r7, #12]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800891a:	f000 fec5 	bl	80096a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800891e:	4b1d      	ldr	r3, [pc, #116]	@ (8008994 <xTaskCheckForTimeOut+0xc0>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008936:	d102      	bne.n	800893e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008938:	2300      	movs	r3, #0
 800893a:	61fb      	str	r3, [r7, #28]
 800893c:	e023      	b.n	8008986 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b15      	ldr	r3, [pc, #84]	@ (8008998 <xTaskCheckForTimeOut+0xc4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d007      	beq.n	800895a <xTaskCheckForTimeOut+0x86>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	429a      	cmp	r2, r3
 8008952:	d302      	bcc.n	800895a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	61fb      	str	r3, [r7, #28]
 8008958:	e015      	b.n	8008986 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	429a      	cmp	r2, r3
 8008962:	d20b      	bcs.n	800897c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	1ad2      	subs	r2, r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ff99 	bl	80088a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	e004      	b.n	8008986 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008982:	2301      	movs	r3, #1
 8008984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008986:	f000 fec1 	bl	800970c <vPortExitCritical>

	return xReturn;
 800898a:	69fb      	ldr	r3, [r7, #28]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3720      	adds	r7, #32
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	24001020 	.word	0x24001020
 8008998:	24001034 	.word	0x24001034

0800899c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089a0:	4b03      	ldr	r3, [pc, #12]	@ (80089b0 <vTaskMissedYield+0x14>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	601a      	str	r2, [r3, #0]
}
 80089a6:	bf00      	nop
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	24001030 	.word	0x24001030

080089b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089bc:	f000 f852 	bl	8008a64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089c0:	4b06      	ldr	r3, [pc, #24]	@ (80089dc <prvIdleTask+0x28>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d9f9      	bls.n	80089bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <prvIdleTask+0x2c>)
 80089ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089d8:	e7f0      	b.n	80089bc <prvIdleTask+0x8>
 80089da:	bf00      	nop
 80089dc:	24000b4c 	.word	0x24000b4c
 80089e0:	e000ed04 	.word	0xe000ed04

080089e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089ea:	2300      	movs	r3, #0
 80089ec:	607b      	str	r3, [r7, #4]
 80089ee:	e00c      	b.n	8008a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4a12      	ldr	r2, [pc, #72]	@ (8008a44 <prvInitialiseTaskLists+0x60>)
 80089fc:	4413      	add	r3, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fcd6 	bl	80073b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3301      	adds	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b37      	cmp	r3, #55	@ 0x37
 8008a0e:	d9ef      	bls.n	80089f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a10:	480d      	ldr	r0, [pc, #52]	@ (8008a48 <prvInitialiseTaskLists+0x64>)
 8008a12:	f7fe fccd 	bl	80073b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a16:	480d      	ldr	r0, [pc, #52]	@ (8008a4c <prvInitialiseTaskLists+0x68>)
 8008a18:	f7fe fcca 	bl	80073b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a1c:	480c      	ldr	r0, [pc, #48]	@ (8008a50 <prvInitialiseTaskLists+0x6c>)
 8008a1e:	f7fe fcc7 	bl	80073b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a22:	480c      	ldr	r0, [pc, #48]	@ (8008a54 <prvInitialiseTaskLists+0x70>)
 8008a24:	f7fe fcc4 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a28:	480b      	ldr	r0, [pc, #44]	@ (8008a58 <prvInitialiseTaskLists+0x74>)
 8008a2a:	f7fe fcc1 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a5c <prvInitialiseTaskLists+0x78>)
 8008a30:	4a05      	ldr	r2, [pc, #20]	@ (8008a48 <prvInitialiseTaskLists+0x64>)
 8008a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a34:	4b0a      	ldr	r3, [pc, #40]	@ (8008a60 <prvInitialiseTaskLists+0x7c>)
 8008a36:	4a05      	ldr	r2, [pc, #20]	@ (8008a4c <prvInitialiseTaskLists+0x68>)
 8008a38:	601a      	str	r2, [r3, #0]
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	24000b4c 	.word	0x24000b4c
 8008a48:	24000fac 	.word	0x24000fac
 8008a4c:	24000fc0 	.word	0x24000fc0
 8008a50:	24000fdc 	.word	0x24000fdc
 8008a54:	24000ff0 	.word	0x24000ff0
 8008a58:	24001008 	.word	0x24001008
 8008a5c:	24000fd4 	.word	0x24000fd4
 8008a60:	24000fd8 	.word	0x24000fd8

08008a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a6a:	e019      	b.n	8008aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a6c:	f000 fe1c 	bl	80096a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a70:	4b10      	ldr	r3, [pc, #64]	@ (8008ab4 <prvCheckTasksWaitingTermination+0x50>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe fd21 	bl	80074c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <prvCheckTasksWaitingTermination+0x54>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab8 <prvCheckTasksWaitingTermination+0x54>)
 8008a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008abc <prvCheckTasksWaitingTermination+0x58>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	4a0a      	ldr	r2, [pc, #40]	@ (8008abc <prvCheckTasksWaitingTermination+0x58>)
 8008a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a96:	f000 fe39 	bl	800970c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f848 	bl	8008b30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aa0:	4b06      	ldr	r3, [pc, #24]	@ (8008abc <prvCheckTasksWaitingTermination+0x58>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e1      	bne.n	8008a6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	24000ff0 	.word	0x24000ff0
 8008ab8:	2400101c 	.word	0x2400101c
 8008abc:	24001004 	.word	0x24001004

08008ac0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008acc:	e005      	b.n	8008ada <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2ba5      	cmp	r3, #165	@ 0xa5
 8008ae0:	d0f5      	beq.n	8008ace <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	089b      	lsrs	r3, r3, #2
 8008ae6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	b29b      	uxth	r3, r3
	}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <uxTaskGetStackHighWaterMark+0x14>
 8008b06:	4b09      	ldr	r3, [pc, #36]	@ (8008b2c <uxTaskGetStackHighWaterMark+0x34>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	e000      	b.n	8008b0e <uxTaskGetStackHighWaterMark+0x16>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b14:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8008b16:	6938      	ldr	r0, [r7, #16]
 8008b18:	f7ff ffd2 	bl	8008ac0 <prvTaskCheckFreeStackSpace>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8008b20:	68fb      	ldr	r3, [r7, #12]
	}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	24000b48 	.word	0x24000b48

08008b30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d108      	bne.n	8008b54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 ff9e 	bl	8009a88 <vPortFree>
				vPortFree( pxTCB );
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 ff9b 	bl	8009a88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b52:	e019      	b.n	8008b88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d103      	bne.n	8008b66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 ff92 	bl	8009a88 <vPortFree>
	}
 8008b64:	e010      	b.n	8008b88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d00b      	beq.n	8008b88 <prvDeleteTCB+0x58>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	60fb      	str	r3, [r7, #12]
}
 8008b82:	bf00      	nop
 8008b84:	bf00      	nop
 8008b86:	e7fd      	b.n	8008b84 <prvDeleteTCB+0x54>
	}
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b96:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc8 <prvResetNextTaskUnblockTime+0x38>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bcc <prvResetNextTaskUnblockTime+0x3c>)
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ba8:	e008      	b.n	8008bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008baa:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <prvResetNextTaskUnblockTime+0x38>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	4a04      	ldr	r2, [pc, #16]	@ (8008bcc <prvResetNextTaskUnblockTime+0x3c>)
 8008bba:	6013      	str	r3, [r2, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	24000fd4 	.word	0x24000fd4
 8008bcc:	2400103c 	.word	0x2400103c

08008bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <xTaskGetSchedulerState+0x34>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bde:	2301      	movs	r3, #1
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	e008      	b.n	8008bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be4:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <xTaskGetSchedulerState+0x38>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bec:	2302      	movs	r3, #2
 8008bee:	607b      	str	r3, [r7, #4]
 8008bf0:	e001      	b.n	8008bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bf6:	687b      	ldr	r3, [r7, #4]
	}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	24001028 	.word	0x24001028
 8008c08:	24001044 	.word	0x24001044

08008c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d058      	beq.n	8008cd4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c22:	4b2f      	ldr	r3, [pc, #188]	@ (8008ce0 <xTaskPriorityDisinherit+0xd4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d00b      	beq.n	8008c44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	60fb      	str	r3, [r7, #12]
}
 8008c3e:	bf00      	nop
 8008c40:	bf00      	nop
 8008c42:	e7fd      	b.n	8008c40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10b      	bne.n	8008c64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60bb      	str	r3, [r7, #8]
}
 8008c5e:	bf00      	nop
 8008c60:	bf00      	nop
 8008c62:	e7fd      	b.n	8008c60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c68:	1e5a      	subs	r2, r3, #1
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d02c      	beq.n	8008cd4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d128      	bne.n	8008cd4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe fc1c 	bl	80074c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce4 <xTaskPriorityDisinherit+0xd8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d903      	bls.n	8008cb4 <xTaskPriorityDisinherit+0xa8>
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce4 <xTaskPriorityDisinherit+0xd8>)
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb8:	4613      	mov	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4a09      	ldr	r2, [pc, #36]	@ (8008ce8 <xTaskPriorityDisinherit+0xdc>)
 8008cc2:	441a      	add	r2, r3
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f7fe fb9d 	bl	800740a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cd4:	697b      	ldr	r3, [r7, #20]
	}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	24000b48 	.word	0x24000b48
 8008ce4:	24001024 	.word	0x24001024
 8008ce8:	24000b4c 	.word	0x24000b4c

08008cec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cf6:	4b21      	ldr	r3, [pc, #132]	@ (8008d7c <prvAddCurrentTaskToDelayedList+0x90>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cfc:	4b20      	ldr	r3, [pc, #128]	@ (8008d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fbde 	bl	80074c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d10a      	bne.n	8008d26 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d007      	beq.n	8008d26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d16:	4b1a      	ldr	r3, [pc, #104]	@ (8008d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4819      	ldr	r0, [pc, #100]	@ (8008d84 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d20:	f7fe fb73 	bl	800740a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d24:	e026      	b.n	8008d74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d2e:	4b14      	ldr	r3, [pc, #80]	@ (8008d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d209      	bcs.n	8008d52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d3e:	4b12      	ldr	r3, [pc, #72]	@ (8008d88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b0f      	ldr	r3, [pc, #60]	@ (8008d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f7fe fb81 	bl	8007452 <vListInsert>
}
 8008d50:	e010      	b.n	8008d74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d52:	4b0e      	ldr	r3, [pc, #56]	@ (8008d8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	4b0a      	ldr	r3, [pc, #40]	@ (8008d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	f7fe fb77 	bl	8007452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d64:	4b0a      	ldr	r3, [pc, #40]	@ (8008d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d202      	bcs.n	8008d74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d6e:	4a08      	ldr	r2, [pc, #32]	@ (8008d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6013      	str	r3, [r2, #0]
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	24001020 	.word	0x24001020
 8008d80:	24000b48 	.word	0x24000b48
 8008d84:	24001008 	.word	0x24001008
 8008d88:	24000fd8 	.word	0x24000fd8
 8008d8c:	24000fd4 	.word	0x24000fd4
 8008d90:	2400103c 	.word	0x2400103c

08008d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	@ 0x28
 8008d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d9e:	f000 fb13 	bl	80093c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008da2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e18 <xTimerCreateTimerTask+0x84>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d021      	beq.n	8008dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008db2:	1d3a      	adds	r2, r7, #4
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	f107 030c 	add.w	r3, r7, #12
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fadd 	bl	800737c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	2302      	movs	r3, #2
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	460a      	mov	r2, r1
 8008dd4:	4911      	ldr	r1, [pc, #68]	@ (8008e1c <xTimerCreateTimerTask+0x88>)
 8008dd6:	4812      	ldr	r0, [pc, #72]	@ (8008e20 <xTimerCreateTimerTask+0x8c>)
 8008dd8:	f7ff f898 	bl	8007f0c <xTaskCreateStatic>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	4a11      	ldr	r2, [pc, #68]	@ (8008e24 <xTimerCreateTimerTask+0x90>)
 8008de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008de2:	4b10      	ldr	r3, [pc, #64]	@ (8008e24 <xTimerCreateTimerTask+0x90>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dea:	2301      	movs	r3, #1
 8008dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10b      	bne.n	8008e0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	613b      	str	r3, [r7, #16]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e0c:	697b      	ldr	r3, [r7, #20]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	24001078 	.word	0x24001078
 8008e1c:	0800d2b0 	.word	0x0800d2b0
 8008e20:	08008f61 	.word	0x08008f61
 8008e24:	2400107c 	.word	0x2400107c

08008e28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	@ 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10b      	bne.n	8008e58 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	623b      	str	r3, [r7, #32]
}
 8008e52:	bf00      	nop
 8008e54:	bf00      	nop
 8008e56:	e7fd      	b.n	8008e54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e58:	4b19      	ldr	r3, [pc, #100]	@ (8008ec0 <xTimerGenericCommand+0x98>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d02a      	beq.n	8008eb6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	dc18      	bgt.n	8008ea4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e72:	f7ff fead 	bl	8008bd0 <xTaskGetSchedulerState>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d109      	bne.n	8008e90 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e7c:	4b10      	ldr	r3, [pc, #64]	@ (8008ec0 <xTimerGenericCommand+0x98>)
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	f107 0110 	add.w	r1, r7, #16
 8008e84:	2300      	movs	r3, #0
 8008e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e88:	f7fe fc50 	bl	800772c <xQueueGenericSend>
 8008e8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e8e:	e012      	b.n	8008eb6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e90:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec0 <xTimerGenericCommand+0x98>)
 8008e92:	6818      	ldr	r0, [r3, #0]
 8008e94:	f107 0110 	add.w	r1, r7, #16
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f7fe fc46 	bl	800772c <xQueueGenericSend>
 8008ea0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ea2:	e008      	b.n	8008eb6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ea4:	4b06      	ldr	r3, [pc, #24]	@ (8008ec0 <xTimerGenericCommand+0x98>)
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	f107 0110 	add.w	r1, r7, #16
 8008eac:	2300      	movs	r3, #0
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	f7fe fd3e 	bl	8007930 <xQueueGenericSendFromISR>
 8008eb4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3728      	adds	r7, #40	@ 0x28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	24001078 	.word	0x24001078

08008ec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ece:	4b23      	ldr	r3, [pc, #140]	@ (8008f5c <prvProcessExpiredTimer+0x98>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe faf1 	bl	80074c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d023      	beq.n	8008f38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	699a      	ldr	r2, [r3, #24]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	18d1      	adds	r1, r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	6978      	ldr	r0, [r7, #20]
 8008efe:	f000 f8d5 	bl	80090ac <prvInsertTimerInActiveList>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d020      	beq.n	8008f4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f08:	2300      	movs	r3, #0
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	2100      	movs	r1, #0
 8008f12:	6978      	ldr	r0, [r7, #20]
 8008f14:	f7ff ff88 	bl	8008e28 <xTimerGenericCommand>
 8008f18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d114      	bne.n	8008f4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	60fb      	str	r3, [r7, #12]
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	e7fd      	b.n	8008f34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	6978      	ldr	r0, [r7, #20]
 8008f50:	4798      	blx	r3
}
 8008f52:	bf00      	nop
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	24001070 	.word	0x24001070

08008f60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f68:	f107 0308 	add.w	r3, r7, #8
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f859 	bl	8009024 <prvGetNextExpireTime>
 8008f72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4619      	mov	r1, r3
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f805 	bl	8008f88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f7e:	f000 f8d7 	bl	8009130 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f82:	bf00      	nop
 8008f84:	e7f0      	b.n	8008f68 <prvTimerTask+0x8>
	...

08008f88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f92:	f7ff f9ff 	bl	8008394 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f96:	f107 0308 	add.w	r3, r7, #8
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 f866 	bl	800906c <prvSampleTimeNow>
 8008fa0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d130      	bne.n	800900a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <prvProcessTimerOrBlockTask+0x3c>
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d806      	bhi.n	8008fc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fb6:	f7ff f9fb 	bl	80083b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008fba:	68f9      	ldr	r1, [r7, #12]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ff81 	bl	8008ec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fc2:	e024      	b.n	800900e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d008      	beq.n	8008fdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fca:	4b13      	ldr	r3, [pc, #76]	@ (8009018 <prvProcessTimerOrBlockTask+0x90>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <prvProcessTimerOrBlockTask+0x50>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <prvProcessTimerOrBlockTask+0x52>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800901c <prvProcessTimerOrBlockTask+0x94>)
 8008fde:	6818      	ldr	r0, [r3, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	f7fe ff5b 	bl	8007ea4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fee:	f7ff f9df 	bl	80083b0 <xTaskResumeAll>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ff8:	4b09      	ldr	r3, [pc, #36]	@ (8009020 <prvProcessTimerOrBlockTask+0x98>)
 8008ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	f3bf 8f6f 	isb	sy
}
 8009008:	e001      	b.n	800900e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800900a:	f7ff f9d1 	bl	80083b0 <xTaskResumeAll>
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	24001074 	.word	0x24001074
 800901c:	24001078 	.word	0x24001078
 8009020:	e000ed04 	.word	0xe000ed04

08009024 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800902c:	4b0e      	ldr	r3, [pc, #56]	@ (8009068 <prvGetNextExpireTime+0x44>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <prvGetNextExpireTime+0x16>
 8009036:	2201      	movs	r2, #1
 8009038:	e000      	b.n	800903c <prvGetNextExpireTime+0x18>
 800903a:	2200      	movs	r2, #0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d105      	bne.n	8009054 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009048:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <prvGetNextExpireTime+0x44>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	e001      	b.n	8009058 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009058:	68fb      	ldr	r3, [r7, #12]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	24001070 	.word	0x24001070

0800906c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009074:	f7ff fa3a 	bl	80084ec <xTaskGetTickCount>
 8009078:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800907a:	4b0b      	ldr	r3, [pc, #44]	@ (80090a8 <prvSampleTimeNow+0x3c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	429a      	cmp	r2, r3
 8009082:	d205      	bcs.n	8009090 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009084:	f000 f93a 	bl	80092fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	e002      	b.n	8009096 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009096:	4a04      	ldr	r2, [pc, #16]	@ (80090a8 <prvSampleTimeNow+0x3c>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800909c:	68fb      	ldr	r3, [r7, #12]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	24001080 	.word	0x24001080

080090ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d812      	bhi.n	80090f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d302      	bcc.n	80090e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	e01b      	b.n	800911e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090e6:	4b10      	ldr	r3, [pc, #64]	@ (8009128 <prvInsertTimerInActiveList+0x7c>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f7fe f9ae 	bl	8007452 <vListInsert>
 80090f6:	e012      	b.n	800911e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d206      	bcs.n	800910e <prvInsertTimerInActiveList+0x62>
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d302      	bcc.n	800910e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009108:	2301      	movs	r3, #1
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	e007      	b.n	800911e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800910e:	4b07      	ldr	r3, [pc, #28]	@ (800912c <prvInsertTimerInActiveList+0x80>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3304      	adds	r3, #4
 8009116:	4619      	mov	r1, r3
 8009118:	4610      	mov	r0, r2
 800911a:	f7fe f99a 	bl	8007452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800911e:	697b      	ldr	r3, [r7, #20]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	24001074 	.word	0x24001074
 800912c:	24001070 	.word	0x24001070

08009130 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08e      	sub	sp, #56	@ 0x38
 8009134:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009136:	e0ce      	b.n	80092d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	da19      	bge.n	8009172 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800913e:	1d3b      	adds	r3, r7, #4
 8009140:	3304      	adds	r3, #4
 8009142:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10b      	bne.n	8009162 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	61fb      	str	r3, [r7, #28]
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	e7fd      	b.n	800915e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009168:	6850      	ldr	r0, [r2, #4]
 800916a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800916c:	6892      	ldr	r2, [r2, #8]
 800916e:	4611      	mov	r1, r2
 8009170:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f2c0 80ae 	blt.w	80092d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800917e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d004      	beq.n	8009190 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009188:	3304      	adds	r3, #4
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe f99a 	bl	80074c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009190:	463b      	mov	r3, r7
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff ff6a 	bl	800906c <prvSampleTimeNow>
 8009198:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b09      	cmp	r3, #9
 800919e:	f200 8097 	bhi.w	80092d0 <prvProcessReceivedCommands+0x1a0>
 80091a2:	a201      	add	r2, pc, #4	@ (adr r2, 80091a8 <prvProcessReceivedCommands+0x78>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091d1 	.word	0x080091d1
 80091ac:	080091d1 	.word	0x080091d1
 80091b0:	080091d1 	.word	0x080091d1
 80091b4:	08009247 	.word	0x08009247
 80091b8:	0800925b 	.word	0x0800925b
 80091bc:	080092a7 	.word	0x080092a7
 80091c0:	080091d1 	.word	0x080091d1
 80091c4:	080091d1 	.word	0x080091d1
 80091c8:	08009247 	.word	0x08009247
 80091cc:	0800925b 	.word	0x0800925b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091d6:	f043 0301 	orr.w	r3, r3, #1
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	18d1      	adds	r1, r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091f0:	f7ff ff5c 	bl	80090ac <prvInsertTimerInActiveList>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d06c      	beq.n	80092d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009200:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d061      	beq.n	80092d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	441a      	add	r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	2300      	movs	r3, #0
 800921e:	2100      	movs	r1, #0
 8009220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009222:	f7ff fe01 	bl	8008e28 <xTimerGenericCommand>
 8009226:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d152      	bne.n	80092d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	61bb      	str	r3, [r7, #24]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	b2da      	uxtb	r2, r3
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009258:	e03d      	b.n	80092d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800925a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009260:	f043 0301 	orr.w	r3, r3, #1
 8009264:	b2da      	uxtb	r2, r3
 8009266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009268:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	617b      	str	r3, [r7, #20]
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	e7fd      	b.n	800928e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009294:	699a      	ldr	r2, [r3, #24]
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	18d1      	adds	r1, r2, r3
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800929e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a0:	f7ff ff04 	bl	80090ac <prvInsertTimerInActiveList>
					break;
 80092a4:	e017      	b.n	80092d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d103      	bne.n	80092bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80092b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092b6:	f000 fbe7 	bl	8009a88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092ba:	e00c      	b.n	80092d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092c2:	f023 0301 	bic.w	r3, r3, #1
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092ce:	e002      	b.n	80092d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80092d0:	bf00      	nop
 80092d2:	e000      	b.n	80092d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80092d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092d6:	4b08      	ldr	r3, [pc, #32]	@ (80092f8 <prvProcessReceivedCommands+0x1c8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	1d39      	adds	r1, r7, #4
 80092dc:	2200      	movs	r2, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fbc4 	bl	8007a6c <xQueueReceive>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f47f af26 	bne.w	8009138 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	3730      	adds	r7, #48	@ 0x30
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	24001078 	.word	0x24001078

080092fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009302:	e049      	b.n	8009398 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009304:	4b2e      	ldr	r3, [pc, #184]	@ (80093c0 <prvSwitchTimerLists+0xc4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800930e:	4b2c      	ldr	r3, [pc, #176]	@ (80093c0 <prvSwitchTimerLists+0xc4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3304      	adds	r3, #4
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe f8d1 	bl	80074c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b00      	cmp	r3, #0
 8009336:	d02f      	beq.n	8009398 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	4413      	add	r3, r2
 8009340:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	429a      	cmp	r2, r3
 8009348:	d90e      	bls.n	8009368 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009356:	4b1a      	ldr	r3, [pc, #104]	@ (80093c0 <prvSwitchTimerLists+0xc4>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3304      	adds	r3, #4
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7fe f876 	bl	8007452 <vListInsert>
 8009366:	e017      	b.n	8009398 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009368:	2300      	movs	r3, #0
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	2300      	movs	r3, #0
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	2100      	movs	r1, #0
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff fd58 	bl	8008e28 <xTimerGenericCommand>
 8009378:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10b      	bne.n	8009398 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	603b      	str	r3, [r7, #0]
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	e7fd      	b.n	8009394 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009398:	4b09      	ldr	r3, [pc, #36]	@ (80093c0 <prvSwitchTimerLists+0xc4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1b0      	bne.n	8009304 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093a2:	4b07      	ldr	r3, [pc, #28]	@ (80093c0 <prvSwitchTimerLists+0xc4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093a8:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <prvSwitchTimerLists+0xc8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a04      	ldr	r2, [pc, #16]	@ (80093c0 <prvSwitchTimerLists+0xc4>)
 80093ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093b0:	4a04      	ldr	r2, [pc, #16]	@ (80093c4 <prvSwitchTimerLists+0xc8>)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	6013      	str	r3, [r2, #0]
}
 80093b6:	bf00      	nop
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	24001070 	.word	0x24001070
 80093c4:	24001074 	.word	0x24001074

080093c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093ce:	f000 f96b 	bl	80096a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093d2:	4b15      	ldr	r3, [pc, #84]	@ (8009428 <prvCheckForValidListAndQueue+0x60>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d120      	bne.n	800941c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093da:	4814      	ldr	r0, [pc, #80]	@ (800942c <prvCheckForValidListAndQueue+0x64>)
 80093dc:	f7fd ffe8 	bl	80073b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093e0:	4813      	ldr	r0, [pc, #76]	@ (8009430 <prvCheckForValidListAndQueue+0x68>)
 80093e2:	f7fd ffe5 	bl	80073b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093e6:	4b13      	ldr	r3, [pc, #76]	@ (8009434 <prvCheckForValidListAndQueue+0x6c>)
 80093e8:	4a10      	ldr	r2, [pc, #64]	@ (800942c <prvCheckForValidListAndQueue+0x64>)
 80093ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093ec:	4b12      	ldr	r3, [pc, #72]	@ (8009438 <prvCheckForValidListAndQueue+0x70>)
 80093ee:	4a10      	ldr	r2, [pc, #64]	@ (8009430 <prvCheckForValidListAndQueue+0x68>)
 80093f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093f2:	2300      	movs	r3, #0
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	4b11      	ldr	r3, [pc, #68]	@ (800943c <prvCheckForValidListAndQueue+0x74>)
 80093f8:	4a11      	ldr	r2, [pc, #68]	@ (8009440 <prvCheckForValidListAndQueue+0x78>)
 80093fa:	2110      	movs	r1, #16
 80093fc:	200a      	movs	r0, #10
 80093fe:	f7fe f8f5 	bl	80075ec <xQueueGenericCreateStatic>
 8009402:	4603      	mov	r3, r0
 8009404:	4a08      	ldr	r2, [pc, #32]	@ (8009428 <prvCheckForValidListAndQueue+0x60>)
 8009406:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009408:	4b07      	ldr	r3, [pc, #28]	@ (8009428 <prvCheckForValidListAndQueue+0x60>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <prvCheckForValidListAndQueue+0x60>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	490b      	ldr	r1, [pc, #44]	@ (8009444 <prvCheckForValidListAndQueue+0x7c>)
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fd1a 	bl	8007e50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800941c:	f000 f976 	bl	800970c <vPortExitCritical>
}
 8009420:	bf00      	nop
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	24001078 	.word	0x24001078
 800942c:	24001048 	.word	0x24001048
 8009430:	2400105c 	.word	0x2400105c
 8009434:	24001070 	.word	0x24001070
 8009438:	24001074 	.word	0x24001074
 800943c:	24001124 	.word	0x24001124
 8009440:	24001084 	.word	0x24001084
 8009444:	0800d2b8 	.word	0x0800d2b8

08009448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3b04      	subs	r3, #4
 8009458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3b04      	subs	r3, #4
 8009466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f023 0201 	bic.w	r2, r3, #1
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3b04      	subs	r3, #4
 8009476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009478:	4a0c      	ldr	r2, [pc, #48]	@ (80094ac <pxPortInitialiseStack+0x64>)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3b14      	subs	r3, #20
 8009482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3b04      	subs	r3, #4
 800948e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f06f 0202 	mvn.w	r2, #2
 8009496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3b20      	subs	r3, #32
 800949c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800949e:	68fb      	ldr	r3, [r7, #12]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	080094b1 	.word	0x080094b1

080094b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094ba:	4b13      	ldr	r3, [pc, #76]	@ (8009508 <prvTaskExitError+0x58>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c2:	d00b      	beq.n	80094dc <prvTaskExitError+0x2c>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	60fb      	str	r3, [r7, #12]
}
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
 80094da:	e7fd      	b.n	80094d8 <prvTaskExitError+0x28>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	60bb      	str	r3, [r7, #8]
}
 80094ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094f0:	bf00      	nop
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0fc      	beq.n	80094f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	24000010 	.word	0x24000010
 800950c:	00000000 	.word	0x00000000

08009510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009510:	4b07      	ldr	r3, [pc, #28]	@ (8009530 <pxCurrentTCBConst2>)
 8009512:	6819      	ldr	r1, [r3, #0]
 8009514:	6808      	ldr	r0, [r1, #0]
 8009516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951a:	f380 8809 	msr	PSP, r0
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f380 8811 	msr	BASEPRI, r0
 800952a:	4770      	bx	lr
 800952c:	f3af 8000 	nop.w

08009530 <pxCurrentTCBConst2>:
 8009530:	24000b48 	.word	0x24000b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop

08009538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009538:	4808      	ldr	r0, [pc, #32]	@ (800955c <prvPortStartFirstTask+0x24>)
 800953a:	6800      	ldr	r0, [r0, #0]
 800953c:	6800      	ldr	r0, [r0, #0]
 800953e:	f380 8808 	msr	MSP, r0
 8009542:	f04f 0000 	mov.w	r0, #0
 8009546:	f380 8814 	msr	CONTROL, r0
 800954a:	b662      	cpsie	i
 800954c:	b661      	cpsie	f
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	df00      	svc	0
 8009558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800955a:	bf00      	nop
 800955c:	e000ed08 	.word	0xe000ed08

08009560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009566:	4b47      	ldr	r3, [pc, #284]	@ (8009684 <xPortStartScheduler+0x124>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a47      	ldr	r2, [pc, #284]	@ (8009688 <xPortStartScheduler+0x128>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d10b      	bne.n	8009588 <xPortStartScheduler+0x28>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	613b      	str	r3, [r7, #16]
}
 8009582:	bf00      	nop
 8009584:	bf00      	nop
 8009586:	e7fd      	b.n	8009584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009588:	4b3e      	ldr	r3, [pc, #248]	@ (8009684 <xPortStartScheduler+0x124>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a3f      	ldr	r2, [pc, #252]	@ (800968c <xPortStartScheduler+0x12c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d10b      	bne.n	80095aa <xPortStartScheduler+0x4a>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	60fb      	str	r3, [r7, #12]
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	e7fd      	b.n	80095a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095aa:	4b39      	ldr	r3, [pc, #228]	@ (8009690 <xPortStartScheduler+0x130>)
 80095ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	22ff      	movs	r2, #255	@ 0xff
 80095ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	4b31      	ldr	r3, [pc, #196]	@ (8009694 <xPortStartScheduler+0x134>)
 80095d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095d2:	4b31      	ldr	r3, [pc, #196]	@ (8009698 <xPortStartScheduler+0x138>)
 80095d4:	2207      	movs	r2, #7
 80095d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095d8:	e009      	b.n	80095ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095da:	4b2f      	ldr	r3, [pc, #188]	@ (8009698 <xPortStartScheduler+0x138>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3b01      	subs	r3, #1
 80095e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009698 <xPortStartScheduler+0x138>)
 80095e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f6:	2b80      	cmp	r3, #128	@ 0x80
 80095f8:	d0ef      	beq.n	80095da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095fa:	4b27      	ldr	r3, [pc, #156]	@ (8009698 <xPortStartScheduler+0x138>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f1c3 0307 	rsb	r3, r3, #7
 8009602:	2b04      	cmp	r3, #4
 8009604:	d00b      	beq.n	800961e <xPortStartScheduler+0xbe>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	60bb      	str	r3, [r7, #8]
}
 8009618:	bf00      	nop
 800961a:	bf00      	nop
 800961c:	e7fd      	b.n	800961a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800961e:	4b1e      	ldr	r3, [pc, #120]	@ (8009698 <xPortStartScheduler+0x138>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	021b      	lsls	r3, r3, #8
 8009624:	4a1c      	ldr	r2, [pc, #112]	@ (8009698 <xPortStartScheduler+0x138>)
 8009626:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009628:	4b1b      	ldr	r3, [pc, #108]	@ (8009698 <xPortStartScheduler+0x138>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009630:	4a19      	ldr	r2, [pc, #100]	@ (8009698 <xPortStartScheduler+0x138>)
 8009632:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800963c:	4b17      	ldr	r3, [pc, #92]	@ (800969c <xPortStartScheduler+0x13c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a16      	ldr	r2, [pc, #88]	@ (800969c <xPortStartScheduler+0x13c>)
 8009642:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009646:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009648:	4b14      	ldr	r3, [pc, #80]	@ (800969c <xPortStartScheduler+0x13c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a13      	ldr	r2, [pc, #76]	@ (800969c <xPortStartScheduler+0x13c>)
 800964e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009652:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009654:	f000 f8da 	bl	800980c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009658:	4b11      	ldr	r3, [pc, #68]	@ (80096a0 <xPortStartScheduler+0x140>)
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800965e:	f000 f8f9 	bl	8009854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009662:	4b10      	ldr	r3, [pc, #64]	@ (80096a4 <xPortStartScheduler+0x144>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a0f      	ldr	r2, [pc, #60]	@ (80096a4 <xPortStartScheduler+0x144>)
 8009668:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800966c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800966e:	f7ff ff63 	bl	8009538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009672:	f7ff f805 	bl	8008680 <vTaskSwitchContext>
	prvTaskExitError();
 8009676:	f7ff ff1b 	bl	80094b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	e000ed00 	.word	0xe000ed00
 8009688:	410fc271 	.word	0x410fc271
 800968c:	410fc270 	.word	0x410fc270
 8009690:	e000e400 	.word	0xe000e400
 8009694:	24001174 	.word	0x24001174
 8009698:	24001178 	.word	0x24001178
 800969c:	e000ed20 	.word	0xe000ed20
 80096a0:	24000010 	.word	0x24000010
 80096a4:	e000ef34 	.word	0xe000ef34

080096a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	607b      	str	r3, [r7, #4]
}
 80096c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096c2:	4b10      	ldr	r3, [pc, #64]	@ (8009704 <vPortEnterCritical+0x5c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3301      	adds	r3, #1
 80096c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009704 <vPortEnterCritical+0x5c>)
 80096ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009704 <vPortEnterCritical+0x5c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d110      	bne.n	80096f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009708 <vPortEnterCritical+0x60>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00b      	beq.n	80096f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	603b      	str	r3, [r7, #0]
}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	e7fd      	b.n	80096f2 <vPortEnterCritical+0x4a>
	}
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	24000010 	.word	0x24000010
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009712:	4b12      	ldr	r3, [pc, #72]	@ (800975c <vPortExitCritical+0x50>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10b      	bne.n	8009732 <vPortExitCritical+0x26>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	607b      	str	r3, [r7, #4]
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	e7fd      	b.n	800972e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009732:	4b0a      	ldr	r3, [pc, #40]	@ (800975c <vPortExitCritical+0x50>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3b01      	subs	r3, #1
 8009738:	4a08      	ldr	r2, [pc, #32]	@ (800975c <vPortExitCritical+0x50>)
 800973a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800973c:	4b07      	ldr	r3, [pc, #28]	@ (800975c <vPortExitCritical+0x50>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d105      	bne.n	8009750 <vPortExitCritical+0x44>
 8009744:	2300      	movs	r3, #0
 8009746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f383 8811 	msr	BASEPRI, r3
}
 800974e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	24000010 	.word	0x24000010

08009760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009760:	f3ef 8009 	mrs	r0, PSP
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	4b15      	ldr	r3, [pc, #84]	@ (80097c0 <pxCurrentTCBConst>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	f01e 0f10 	tst.w	lr, #16
 8009770:	bf08      	it	eq
 8009772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977a:	6010      	str	r0, [r2, #0]
 800977c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009780:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009784:	f380 8811 	msr	BASEPRI, r0
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f7fe ff76 	bl	8008680 <vTaskSwitchContext>
 8009794:	f04f 0000 	mov.w	r0, #0
 8009798:	f380 8811 	msr	BASEPRI, r0
 800979c:	bc09      	pop	{r0, r3}
 800979e:	6819      	ldr	r1, [r3, #0]
 80097a0:	6808      	ldr	r0, [r1, #0]
 80097a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a6:	f01e 0f10 	tst.w	lr, #16
 80097aa:	bf08      	it	eq
 80097ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097b0:	f380 8809 	msr	PSP, r0
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	f3af 8000 	nop.w

080097c0 <pxCurrentTCBConst>:
 80097c0:	24000b48 	.word	0x24000b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop

080097c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	607b      	str	r3, [r7, #4]
}
 80097e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097e2:	f7fe fe93 	bl	800850c <xTaskIncrementTick>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ec:	4b06      	ldr	r3, [pc, #24]	@ (8009808 <xPortSysTickHandler+0x40>)
 80097ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	2300      	movs	r3, #0
 80097f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	f383 8811 	msr	BASEPRI, r3
}
 80097fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	e000ed04 	.word	0xe000ed04

0800980c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009810:	4b0b      	ldr	r3, [pc, #44]	@ (8009840 <vPortSetupTimerInterrupt+0x34>)
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009816:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <vPortSetupTimerInterrupt+0x38>)
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800981c:	4b0a      	ldr	r3, [pc, #40]	@ (8009848 <vPortSetupTimerInterrupt+0x3c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a0a      	ldr	r2, [pc, #40]	@ (800984c <vPortSetupTimerInterrupt+0x40>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	099b      	lsrs	r3, r3, #6
 8009828:	4a09      	ldr	r2, [pc, #36]	@ (8009850 <vPortSetupTimerInterrupt+0x44>)
 800982a:	3b01      	subs	r3, #1
 800982c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800982e:	4b04      	ldr	r3, [pc, #16]	@ (8009840 <vPortSetupTimerInterrupt+0x34>)
 8009830:	2207      	movs	r2, #7
 8009832:	601a      	str	r2, [r3, #0]
}
 8009834:	bf00      	nop
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	e000e010 	.word	0xe000e010
 8009844:	e000e018 	.word	0xe000e018
 8009848:	24000000 	.word	0x24000000
 800984c:	10624dd3 	.word	0x10624dd3
 8009850:	e000e014 	.word	0xe000e014

08009854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009854:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009864 <vPortEnableVFP+0x10>
 8009858:	6801      	ldr	r1, [r0, #0]
 800985a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800985e:	6001      	str	r1, [r0, #0]
 8009860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009862:	bf00      	nop
 8009864:	e000ed88 	.word	0xe000ed88

08009868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800986e:	f3ef 8305 	mrs	r3, IPSR
 8009872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b0f      	cmp	r3, #15
 8009878:	d915      	bls.n	80098a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800987a:	4a18      	ldr	r2, [pc, #96]	@ (80098dc <vPortValidateInterruptPriority+0x74>)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009884:	4b16      	ldr	r3, [pc, #88]	@ (80098e0 <vPortValidateInterruptPriority+0x78>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	7afa      	ldrb	r2, [r7, #11]
 800988a:	429a      	cmp	r2, r3
 800988c:	d20b      	bcs.n	80098a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	607b      	str	r3, [r7, #4]
}
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098a6:	4b0f      	ldr	r3, [pc, #60]	@ (80098e4 <vPortValidateInterruptPriority+0x7c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098ae:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <vPortValidateInterruptPriority+0x80>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d90b      	bls.n	80098ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	603b      	str	r3, [r7, #0]
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <vPortValidateInterruptPriority+0x62>
	}
 80098ce:	bf00      	nop
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	e000e3f0 	.word	0xe000e3f0
 80098e0:	24001174 	.word	0x24001174
 80098e4:	e000ed0c 	.word	0xe000ed0c
 80098e8:	24001178 	.word	0x24001178

080098ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	@ 0x28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098f8:	f7fe fd4c 	bl	8008394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009a70 <pvPortMalloc+0x184>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009904:	f000 f924 	bl	8009b50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009908:	4b5a      	ldr	r3, [pc, #360]	@ (8009a74 <pvPortMalloc+0x188>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4013      	ands	r3, r2
 8009910:	2b00      	cmp	r3, #0
 8009912:	f040 8095 	bne.w	8009a40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01e      	beq.n	800995a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800991c:	2208      	movs	r2, #8
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4413      	add	r3, r2
 8009922:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b00      	cmp	r3, #0
 800992c:	d015      	beq.n	800995a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f023 0307 	bic.w	r3, r3, #7
 8009934:	3308      	adds	r3, #8
 8009936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <pvPortMalloc+0x6e>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	617b      	str	r3, [r7, #20]
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop
 8009958:	e7fd      	b.n	8009956 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d06f      	beq.n	8009a40 <pvPortMalloc+0x154>
 8009960:	4b45      	ldr	r3, [pc, #276]	@ (8009a78 <pvPortMalloc+0x18c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	429a      	cmp	r2, r3
 8009968:	d86a      	bhi.n	8009a40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800996a:	4b44      	ldr	r3, [pc, #272]	@ (8009a7c <pvPortMalloc+0x190>)
 800996c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800996e:	4b43      	ldr	r3, [pc, #268]	@ (8009a7c <pvPortMalloc+0x190>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009974:	e004      	b.n	8009980 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009978:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d903      	bls.n	8009992 <pvPortMalloc+0xa6>
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1f1      	bne.n	8009976 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009992:	4b37      	ldr	r3, [pc, #220]	@ (8009a70 <pvPortMalloc+0x184>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009998:	429a      	cmp	r2, r3
 800999a:	d051      	beq.n	8009a40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2208      	movs	r2, #8
 80099a2:	4413      	add	r3, r2
 80099a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	1ad2      	subs	r2, r2, r3
 80099b6:	2308      	movs	r3, #8
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d920      	bls.n	8009a00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4413      	add	r3, r2
 80099c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	f003 0307 	and.w	r3, r3, #7
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <pvPortMalloc+0xfc>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	613b      	str	r3, [r7, #16]
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	e7fd      	b.n	80099e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099fa:	69b8      	ldr	r0, [r7, #24]
 80099fc:	f000 f90a 	bl	8009c14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a00:	4b1d      	ldr	r3, [pc, #116]	@ (8009a78 <pvPortMalloc+0x18c>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a78 <pvPortMalloc+0x18c>)
 8009a0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a78 <pvPortMalloc+0x18c>)
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	4b1b      	ldr	r3, [pc, #108]	@ (8009a80 <pvPortMalloc+0x194>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d203      	bcs.n	8009a22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a1a:	4b17      	ldr	r3, [pc, #92]	@ (8009a78 <pvPortMalloc+0x18c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a18      	ldr	r2, [pc, #96]	@ (8009a80 <pvPortMalloc+0x194>)
 8009a20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	4b13      	ldr	r3, [pc, #76]	@ (8009a74 <pvPortMalloc+0x188>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a36:	4b13      	ldr	r3, [pc, #76]	@ (8009a84 <pvPortMalloc+0x198>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	4a11      	ldr	r2, [pc, #68]	@ (8009a84 <pvPortMalloc+0x198>)
 8009a3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a40:	f7fe fcb6 	bl	80083b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00b      	beq.n	8009a66 <pvPortMalloc+0x17a>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	60fb      	str	r3, [r7, #12]
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	e7fd      	b.n	8009a62 <pvPortMalloc+0x176>
	return pvReturn;
 8009a66:	69fb      	ldr	r3, [r7, #28]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3728      	adds	r7, #40	@ 0x28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	24004d84 	.word	0x24004d84
 8009a74:	24004d98 	.word	0x24004d98
 8009a78:	24004d88 	.word	0x24004d88
 8009a7c:	24004d7c 	.word	0x24004d7c
 8009a80:	24004d8c 	.word	0x24004d8c
 8009a84:	24004d90 	.word	0x24004d90

08009a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d04f      	beq.n	8009b3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a9a:	2308      	movs	r3, #8
 8009a9c:	425b      	negs	r3, r3
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	4b25      	ldr	r3, [pc, #148]	@ (8009b44 <vPortFree+0xbc>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10b      	bne.n	8009ace <vPortFree+0x46>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60fb      	str	r3, [r7, #12]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <vPortFree+0x66>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	60bb      	str	r3, [r7, #8]
}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	e7fd      	b.n	8009aea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	4b14      	ldr	r3, [pc, #80]	@ (8009b44 <vPortFree+0xbc>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4013      	ands	r3, r2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01e      	beq.n	8009b3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d11a      	bne.n	8009b3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	4b0e      	ldr	r3, [pc, #56]	@ (8009b44 <vPortFree+0xbc>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	43db      	mvns	r3, r3
 8009b0e:	401a      	ands	r2, r3
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b14:	f7fe fc3e 	bl	8008394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b48 <vPortFree+0xc0>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4413      	add	r3, r2
 8009b22:	4a09      	ldr	r2, [pc, #36]	@ (8009b48 <vPortFree+0xc0>)
 8009b24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b26:	6938      	ldr	r0, [r7, #16]
 8009b28:	f000 f874 	bl	8009c14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b2c:	4b07      	ldr	r3, [pc, #28]	@ (8009b4c <vPortFree+0xc4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3301      	adds	r3, #1
 8009b32:	4a06      	ldr	r2, [pc, #24]	@ (8009b4c <vPortFree+0xc4>)
 8009b34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b36:	f7fe fc3b 	bl	80083b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b3a:	bf00      	nop
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	24004d98 	.word	0x24004d98
 8009b48:	24004d88 	.word	0x24004d88
 8009b4c:	24004d94 	.word	0x24004d94

08009b50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b5c:	4b27      	ldr	r3, [pc, #156]	@ (8009bfc <prvHeapInit+0xac>)
 8009b5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00c      	beq.n	8009b84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3307      	adds	r3, #7
 8009b6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 0307 	bic.w	r3, r3, #7
 8009b76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bfc <prvHeapInit+0xac>)
 8009b80:	4413      	add	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b88:	4a1d      	ldr	r2, [pc, #116]	@ (8009c00 <prvHeapInit+0xb0>)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8009c00 <prvHeapInit+0xb0>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b9c:	2208      	movs	r2, #8
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1a9b      	subs	r3, r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4a15      	ldr	r2, [pc, #84]	@ (8009c04 <prvHeapInit+0xb4>)
 8009bb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bb2:	4b14      	ldr	r3, [pc, #80]	@ (8009c04 <prvHeapInit+0xb4>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bba:	4b12      	ldr	r3, [pc, #72]	@ (8009c04 <prvHeapInit+0xb4>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	1ad2      	subs	r2, r2, r3
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <prvHeapInit+0xb4>)
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8009c08 <prvHeapInit+0xb8>)
 8009bde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	4a09      	ldr	r2, [pc, #36]	@ (8009c0c <prvHeapInit+0xbc>)
 8009be6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009be8:	4b09      	ldr	r3, [pc, #36]	@ (8009c10 <prvHeapInit+0xc0>)
 8009bea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bee:	601a      	str	r2, [r3, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	2400117c 	.word	0x2400117c
 8009c00:	24004d7c 	.word	0x24004d7c
 8009c04:	24004d84 	.word	0x24004d84
 8009c08:	24004d8c 	.word	0x24004d8c
 8009c0c:	24004d88 	.word	0x24004d88
 8009c10:	24004d98 	.word	0x24004d98

08009c14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c1c:	4b28      	ldr	r3, [pc, #160]	@ (8009cc0 <prvInsertBlockIntoFreeList+0xac>)
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	e002      	b.n	8009c28 <prvInsertBlockIntoFreeList+0x14>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d8f7      	bhi.n	8009c22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d108      	bne.n	8009c56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	441a      	add	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d118      	bne.n	8009c9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	4b15      	ldr	r3, [pc, #84]	@ (8009cc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d00d      	beq.n	8009c92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	441a      	add	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	e008      	b.n	8009ca4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c92:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e003      	b.n	8009ca4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d002      	beq.n	8009cb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	24004d7c 	.word	0x24004d7c
 8009cc4:	24004d84 	.word	0x24004d84

08009cc8 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2108      	movs	r1, #8
 8009cd0:	480a      	ldr	r0, [pc, #40]	@ (8009cfc <ad7606_Init+0x34>)
 8009cd2:	f7f8 f893 	bl	8001dfc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	f7f7 fd58 	bl	800178c <HAL_Delay>
    AD7606_RST_SET();
 8009cdc:	2201      	movs	r2, #1
 8009cde:	2108      	movs	r1, #8
 8009ce0:	4806      	ldr	r0, [pc, #24]	@ (8009cfc <ad7606_Init+0x34>)
 8009ce2:	f7f8 f88b 	bl	8001dfc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f7f7 fd50 	bl	800178c <HAL_Delay>
    AD7606_RST_RESET();
 8009cec:	2200      	movs	r2, #0
 8009cee:	2108      	movs	r1, #8
 8009cf0:	4802      	ldr	r0, [pc, #8]	@ (8009cfc <ad7606_Init+0x34>)
 8009cf2:	f7f8 f883 	bl	8001dfc <HAL_GPIO_WritePin>
}
 8009cf6:	bf00      	nop
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	58021800 	.word	0x58021800

08009d00 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2180      	movs	r1, #128	@ 0x80
 8009d12:	4809      	ldr	r0, [pc, #36]	@ (8009d38 <ad7606_Read+0x38>)
 8009d14:	f7f8 f872 	bl	8001dfc <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 8009d18:	88fa      	ldrh	r2, [r7, #6]
 8009d1a:	2364      	movs	r3, #100	@ 0x64
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f7fb fdaa 	bl	8005878 <HAL_SPI_Receive>
    AD7606_CS_SET();
 8009d24:	2201      	movs	r2, #1
 8009d26:	2180      	movs	r1, #128	@ 0x80
 8009d28:	4803      	ldr	r0, [pc, #12]	@ (8009d38 <ad7606_Read+0x38>)
 8009d2a:	f7f8 f867 	bl	8001dfc <HAL_GPIO_WritePin>
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	58021800 	.word	0x58021800

08009d3c <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7fc fa21 	bl	8006190 <HAL_TIM_PWM_Start>
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	460b      	mov	r3, r1
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8009d66:	2300      	movs	r3, #0
 8009d68:	617b      	str	r3, [r7, #20]
 8009d6a:	e03d      	b.n	8009de8 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	4413      	add	r3, r2
 8009d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	da0f      	bge.n	8009d9c <ad7606_Convert+0x44>
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	425b      	negs	r3, r3
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	425b      	negs	r3, r3
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	b21b      	sxth	r3, r3
 8009d9a:	e005      	b.n	8009da8 <ad7606_Convert+0x50>
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	0052      	lsls	r2, r2, #1
 8009dac:	68f9      	ldr	r1, [r7, #12]
 8009dae:	440a      	add	r2, r1
 8009db0:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	4413      	add	r3, r2
 8009dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dc6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8009e00 <ad7606_Convert+0xa8>
 8009dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dde:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	3301      	adds	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	897b      	ldrh	r3, [r7, #10]
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	dbbd      	blt.n	8009d6c <ad7606_Convert+0x14>
    }
}
 8009df0:	bf00      	nop
 8009df2:	bf00      	nop
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	47000000 	.word	0x47000000

08009e04 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 8009e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e08:	b087      	sub	sp, #28
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	607a      	str	r2, [r7, #4]
 8009e12:	817b      	strh	r3, [r7, #10]
 8009e14:	466b      	mov	r3, sp
 8009e16:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 8009e18:	8979      	ldrh	r1, [r7, #10]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	b28b      	uxth	r3, r1
 8009e22:	2200      	movs	r2, #0
 8009e24:	4698      	mov	r8, r3
 8009e26:	4691      	mov	r9, r2
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	f04f 0300 	mov.w	r3, #0
 8009e30:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8009e34:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8009e38:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8009e3c:	b28b      	uxth	r3, r1
 8009e3e:	2200      	movs	r2, #0
 8009e40:	461c      	mov	r4, r3
 8009e42:	4615      	mov	r5, r2
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	012b      	lsls	r3, r5, #4
 8009e4e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009e52:	0122      	lsls	r2, r4, #4
 8009e54:	460b      	mov	r3, r1
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	3307      	adds	r3, #7
 8009e5a:	08db      	lsrs	r3, r3, #3
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	ebad 0d03 	sub.w	sp, sp, r3
 8009e62:	466b      	mov	r3, sp
 8009e64:	3301      	adds	r3, #1
 8009e66:	085b      	lsrs	r3, r3, #1
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 8009e6c:	897b      	ldrh	r3, [r7, #10]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6939      	ldr	r1, [r7, #16]
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7ff ff44 	bl	8009d00 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8009e78:	897b      	ldrh	r3, [r7, #10]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6938      	ldr	r0, [r7, #16]
 8009e80:	f7ff ff6a 	bl	8009d58 <ad7606_Convert>
 8009e84:	46b5      	mov	sp, r6
}
 8009e86:	bf00      	nop
 8009e88:	371c      	adds	r7, #28
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009e90 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af04      	add	r7, sp, #16
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8009ea4:	883b      	ldrh	r3, [r7, #0]
 8009ea6:	0a1b      	lsrs	r3, r3, #8
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 8009eae:	883b      	ldrh	r3, [r7, #0]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	69d8      	ldr	r0, [r3, #28]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	2364      	movs	r3, #100	@ 0x64
 8009ec6:	9302      	str	r3, [sp, #8]
 8009ec8:	2302      	movs	r3, #2
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	f107 030c 	add.w	r3, r7, #12
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f7f8 f87c 	bl	8001fd0 <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d105      	bne.n	8009eea <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 8009ede:	883b      	ldrh	r3, [r7, #0]
 8009ee0:	f003 0310 	and.w	r3, r3, #16
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	82da      	strh	r2, [r3, #22]
	}
}
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff ffc4 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	885b      	ldrh	r3, [r3, #2]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	2101      	movs	r1, #1
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ffbd 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	889b      	ldrh	r3, [r3, #4]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff ffb6 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	88db      	ldrh	r3, [r3, #6]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	2103      	movs	r1, #3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff ffaf 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	891b      	ldrh	r3, [r3, #8]
 8009f36:	461a      	mov	r2, r3
 8009f38:	210b      	movs	r1, #11
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff ffa8 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	895b      	ldrh	r3, [r3, #10]
 8009f44:	461a      	mov	r2, r3
 8009f46:	210c      	movs	r1, #12
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff ffa1 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	899b      	ldrh	r3, [r3, #12]
 8009f52:	461a      	mov	r2, r3
 8009f54:	210d      	movs	r1, #13
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff ff9a 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	89db      	ldrh	r3, [r3, #14]
 8009f60:	461a      	mov	r2, r3
 8009f62:	210e      	movs	r1, #14
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff ff93 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	8a1b      	ldrh	r3, [r3, #16]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	210f      	movs	r1, #15
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff ff8c 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	8a5b      	ldrh	r3, [r3, #18]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2110      	movs	r1, #16
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff ff85 	bl	8009e90 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	8a9b      	ldrh	r3, [r3, #20]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	2111      	movs	r1, #17
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff ff7e 	bl	8009e90 <INA228_writeReg>
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 8009f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fa0:	b08c      	sub	sp, #48	@ 0x30
 8009fa2:	af04      	add	r7, sp, #16
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	4921      	ldr	r1, [pc, #132]	@ (800a048 <INA228_readReg+0xac>)
 8009fc2:	5ccb      	ldrb	r3, [r1, r3]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	2364      	movs	r3, #100	@ 0x64
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	9101      	str	r1, [sp, #4]
 8009fcc:	f107 030c 	add.w	r3, r7, #12
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4601      	mov	r1, r0
 8009fd6:	481d      	ldr	r0, [pc, #116]	@ (800a04c <INA228_readReg+0xb0>)
 8009fd8:	f7f8 f90e 	bl	80021f8 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 8009fdc:	7b3b      	ldrb	r3, [r7, #12]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	469a      	mov	sl, r3
 8009fe4:	4693      	mov	fp, r2
 8009fe6:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 8009fea:	2301      	movs	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	e01b      	b.n	800a028 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 8009ff0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ff4:	f04f 0200 	mov.w	r2, #0
 8009ff8:	f04f 0300 	mov.w	r3, #0
 8009ffc:	020b      	lsls	r3, r1, #8
 8009ffe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a002:	0202      	lsls	r2, r0, #8
 800a004:	f107 000c 	add.w	r0, r7, #12
 800a008:	6979      	ldr	r1, [r7, #20]
 800a00a:	4401      	add	r1, r0
 800a00c:	7809      	ldrb	r1, [r1, #0]
 800a00e:	b2c9      	uxtb	r1, r1
 800a010:	2000      	movs	r0, #0
 800a012:	460c      	mov	r4, r1
 800a014:	4605      	mov	r5, r0
 800a016:	ea42 0804 	orr.w	r8, r2, r4
 800a01a:	ea43 0905 	orr.w	r9, r3, r5
 800a01e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	3301      	adds	r3, #1
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	4a07      	ldr	r2, [pc, #28]	@ (800a048 <INA228_readReg+0xac>)
 800a02c:	5cd3      	ldrb	r3, [r2, r3]
 800a02e:	461a      	mov	r2, r3
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	4293      	cmp	r3, r2
 800a034:	dbdc      	blt.n	8009ff0 <INA228_readReg+0x54>
	}

	return value;
 800a036:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800a03a:	4610      	mov	r0, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	3720      	adds	r7, #32
 800a040:	46bd      	mov	sp, r7
 800a042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a046:	bf00      	nop
 800a048:	0800d33c 	.word	0x0800d33c
 800a04c:	24000248 	.word	0x24000248

0800a050 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 800a058:	2105      	movs	r1, #5
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7ff ff9e 	bl	8009f9c <INA228_readReg>
 800a060:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800a064:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a068:	f04f 0200 	mov.w	r2, #0
 800a06c:	f04f 0300 	mov.w	r3, #0
 800a070:	0902      	lsrs	r2, r0, #4
 800a072:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800a076:	090b      	lsrs	r3, r1, #4
 800a078:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 800a07c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a080:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a084:	f173 0300 	sbcs.w	r3, r3, #0
 800a088:	d30c      	bcc.n	800a0a4 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 800a08a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a08e:	f7f6 fa47 	bl	8000520 <__aeabi_ul2f>
 800a092:	ee07 0a10 	vmov	s14, r0
 800a096:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a0f0 <INA228_getVBUS_V+0xa0>
 800a09a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a09e:	edc7 7a05 	vstr	s15, [r7, #20]
 800a0a2:	e005      	b.n	800a0b0 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 800a0a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0a8:	f7f6 fa3a 	bl	8000520 <__aeabi_ul2f>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125) / 1000000;
 800a0b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a0b8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 800a0e0 <INA228_getVBUS_V+0x90>
 800a0bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a0c0:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 800a0e8 <INA228_getVBUS_V+0x98>
 800a0c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800a0cc:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	ee07 3a90 	vmov	s15, r3
}
 800a0d6:	eeb0 0a67 	vmov.f32	s0, s15
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	40686a00 	.word	0x40686a00
 800a0e8:	00000000 	.word	0x00000000
 800a0ec:	412e8480 	.word	0x412e8480
 800a0f0:	49800000 	.word	0x49800000

0800a0f4 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 800a0fc:	2107      	movs	r1, #7
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff ff4c 	bl	8009f9c <INA228_readReg>
 800a104:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800a108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	0902      	lsrs	r2, r0, #4
 800a116:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800a11a:	090b      	lsrs	r3, r1, #4
 800a11c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 800a120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a124:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a128:	f173 0300 	sbcs.w	r3, r3, #0
 800a12c:	d30c      	bcc.n	800a148 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 800a12e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a132:	f7f6 f9f5 	bl	8000520 <__aeabi_ul2f>
 800a136:	ee07 0a10 	vmov	s14, r0
 800a13a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a164 <INA228_getCURRENT_signedLSB+0x70>
 800a13e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a142:	edc7 7a05 	vstr	s15, [r7, #20]
 800a146:	e005      	b.n	800a154 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 800a148:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a14c:	f7f6 f9e8 	bl	8000520 <__aeabi_ul2f>
 800a150:	4603      	mov	r3, r0
 800a152:	617b      	str	r3, [r7, #20]
	}

	return data;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	ee07 3a90 	vmov	s15, r3
}
 800a15a:	eeb0 0a67 	vmov.f32	s0, s15
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	49800000 	.word	0x49800000

0800a168 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff ffbf 	bl	800a0f4 <INA228_getCURRENT_signedLSB>
 800a176:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	edd3 7a06 	vldr	s15, [r3, #24]
 800a180:	ed97 7a03 	vldr	s14, [r7, #12]
 800a184:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a188:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	ee07 3a90 	vmov	s15, r3
}
 800a192:	eeb0 0a67 	vmov.f32	s0, s15
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	460a      	mov	r2, r1
 800a1a6:	71fb      	strb	r3, [r7, #7]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800a1ac:	1dfb      	adds	r3, r7, #7
 800a1ae:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800a1b0:	79bb      	ldrb	r3, [r7, #6]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d005      	beq.n	800a1c2 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	2140      	movs	r1, #64	@ 0x40
 800a1ba:	4811      	ldr	r0, [pc, #68]	@ (800a200 <OLED_WR_Byte+0x64>)
 800a1bc:	f7f7 fe1e 	bl	8001dfc <HAL_GPIO_WritePin>
 800a1c0:	e004      	b.n	800a1cc <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2140      	movs	r1, #64	@ 0x40
 800a1c6:	480e      	ldr	r0, [pc, #56]	@ (800a200 <OLED_WR_Byte+0x64>)
 800a1c8:	f7f7 fe18 	bl	8001dfc <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2102      	movs	r1, #2
 800a1d0:	480c      	ldr	r0, [pc, #48]	@ (800a204 <OLED_WR_Byte+0x68>)
 800a1d2:	f7f7 fe13 	bl	8001dfc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800a1d6:	23c8      	movs	r3, #200	@ 0xc8
 800a1d8:	2201      	movs	r2, #1
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	480a      	ldr	r0, [pc, #40]	@ (800a208 <OLED_WR_Byte+0x6c>)
 800a1de:	f7fb f95d 	bl	800549c <HAL_SPI_Transmit>

	OLED_CS_Set();
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	2102      	movs	r1, #2
 800a1e6:	4807      	ldr	r0, [pc, #28]	@ (800a204 <OLED_WR_Byte+0x68>)
 800a1e8:	f7f7 fe08 	bl	8001dfc <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	2140      	movs	r1, #64	@ 0x40
 800a1f0:	4803      	ldr	r0, [pc, #12]	@ (800a200 <OLED_WR_Byte+0x64>)
 800a1f2:	f7f7 fe03 	bl	8001dfc <HAL_GPIO_WritePin>
}
 800a1f6:	bf00      	nop
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	58022000 	.word	0x58022000
 800a204:	58020400 	.word	0x58020400
 800a208:	2400029c 	.word	0x2400029c

0800a20c <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a212:	2300      	movs	r3, #0
 800a214:	71fb      	strb	r3, [r7, #7]
 800a216:	e026      	b.n	800a266 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	3b50      	subs	r3, #80	@ 0x50
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff ffbb 	bl	800a19c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800a226:	2100      	movs	r1, #0
 800a228:	2000      	movs	r0, #0
 800a22a:	f7ff ffb7 	bl	800a19c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800a22e:	2100      	movs	r1, #0
 800a230:	2010      	movs	r0, #16
 800a232:	f7ff ffb3 	bl	800a19c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a236:	2300      	movs	r3, #0
 800a238:	71bb      	strb	r3, [r7, #6]
 800a23a:	e00d      	b.n	800a258 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800a23c:	79ba      	ldrb	r2, [r7, #6]
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	490d      	ldr	r1, [pc, #52]	@ (800a278 <OLED_Refresh+0x6c>)
 800a242:	00d2      	lsls	r2, r2, #3
 800a244:	440a      	add	r2, r1
 800a246:	4413      	add	r3, r2
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2101      	movs	r1, #1
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff ffa5 	bl	800a19c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a252:	79bb      	ldrb	r3, [r7, #6]
 800a254:	3301      	adds	r3, #1
 800a256:	71bb      	strb	r3, [r7, #6]
 800a258:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	daed      	bge.n	800a23c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800a260:	79fb      	ldrb	r3, [r7, #7]
 800a262:	3301      	adds	r3, #1
 800a264:	71fb      	strb	r3, [r7, #7]
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	2b07      	cmp	r3, #7
 800a26a:	d9d5      	bls.n	800a218 <OLED_Refresh+0xc>
	}
}
 800a26c:	bf00      	nop
 800a26e:	bf00      	nop
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	24004d9c 	.word	0x24004d9c

0800a27c <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a282:	2300      	movs	r3, #0
 800a284:	71fb      	strb	r3, [r7, #7]
 800a286:	e014      	b.n	800a2b2 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800a288:	2300      	movs	r3, #0
 800a28a:	71bb      	strb	r3, [r7, #6]
 800a28c:	e00a      	b.n	800a2a4 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800a28e:	79ba      	ldrb	r2, [r7, #6]
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	490c      	ldr	r1, [pc, #48]	@ (800a2c4 <OLED_Clear+0x48>)
 800a294:	00d2      	lsls	r2, r2, #3
 800a296:	440a      	add	r2, r1
 800a298:	4413      	add	r3, r2
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800a29e:	79bb      	ldrb	r3, [r7, #6]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	71bb      	strb	r3, [r7, #6]
 800a2a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	daf0      	bge.n	800a28e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	71fb      	strb	r3, [r7, #7]
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	2b07      	cmp	r3, #7
 800a2b6:	d9e7      	bls.n	800a288 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800a2b8:	f7ff ffa8 	bl	800a20c <OLED_Refresh>
}
 800a2bc:	bf00      	nop
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	24004d9c 	.word	0x24004d9c

0800a2c8 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	460a      	mov	r2, r1
 800a2d2:	71fb      	strb	r3, [r7, #7]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800a2d8:	79bb      	ldrb	r3, [r7, #6]
 800a2da:	08db      	lsrs	r3, r3, #3
 800a2dc:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800a2de:	79bb      	ldrb	r3, [r7, #6]
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800a2f0:	79fa      	ldrb	r2, [r7, #7]
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	490a      	ldr	r1, [pc, #40]	@ (800a320 <OLED_DrawPoint+0x58>)
 800a2f6:	00d2      	lsls	r2, r2, #3
 800a2f8:	440a      	add	r2, r1
 800a2fa:	4413      	add	r3, r2
 800a2fc:	7818      	ldrb	r0, [r3, #0]
 800a2fe:	79fa      	ldrb	r2, [r7, #7]
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	7b79      	ldrb	r1, [r7, #13]
 800a304:	4301      	orrs	r1, r0
 800a306:	b2c8      	uxtb	r0, r1
 800a308:	4905      	ldr	r1, [pc, #20]	@ (800a320 <OLED_DrawPoint+0x58>)
 800a30a:	00d2      	lsls	r2, r2, #3
 800a30c:	440a      	add	r2, r1
 800a30e:	4413      	add	r3, r2
 800a310:	4602      	mov	r2, r0
 800a312:	701a      	strb	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	24004d9c 	.word	0x24004d9c

0800a324 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	460a      	mov	r2, r1
 800a32e:	71fb      	strb	r3, [r7, #7]
 800a330:	4613      	mov	r3, r2
 800a332:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800a334:	79bb      	ldrb	r3, [r7, #6]
 800a336:	08db      	lsrs	r3, r3, #3
 800a338:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800a33a:	79bb      	ldrb	r3, [r7, #6]
 800a33c:	f003 0307 	and.w	r3, r3, #7
 800a340:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2201      	movs	r2, #1
 800a346:	fa02 f303 	lsl.w	r3, r2, r3
 800a34a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800a34c:	79fa      	ldrb	r2, [r7, #7]
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	491b      	ldr	r1, [pc, #108]	@ (800a3c0 <OLED_ClearPoint+0x9c>)
 800a352:	00d2      	lsls	r2, r2, #3
 800a354:	440a      	add	r2, r1
 800a356:	4413      	add	r3, r2
 800a358:	7819      	ldrb	r1, [r3, #0]
 800a35a:	79fa      	ldrb	r2, [r7, #7]
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	43c9      	mvns	r1, r1
 800a360:	b2c8      	uxtb	r0, r1
 800a362:	4917      	ldr	r1, [pc, #92]	@ (800a3c0 <OLED_ClearPoint+0x9c>)
 800a364:	00d2      	lsls	r2, r2, #3
 800a366:	440a      	add	r2, r1
 800a368:	4413      	add	r3, r2
 800a36a:	4602      	mov	r2, r0
 800a36c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800a36e:	79fa      	ldrb	r2, [r7, #7]
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	4913      	ldr	r1, [pc, #76]	@ (800a3c0 <OLED_ClearPoint+0x9c>)
 800a374:	00d2      	lsls	r2, r2, #3
 800a376:	440a      	add	r2, r1
 800a378:	4413      	add	r3, r2
 800a37a:	7818      	ldrb	r0, [r3, #0]
 800a37c:	79fa      	ldrb	r2, [r7, #7]
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	7b79      	ldrb	r1, [r7, #13]
 800a382:	4301      	orrs	r1, r0
 800a384:	b2c8      	uxtb	r0, r1
 800a386:	490e      	ldr	r1, [pc, #56]	@ (800a3c0 <OLED_ClearPoint+0x9c>)
 800a388:	00d2      	lsls	r2, r2, #3
 800a38a:	440a      	add	r2, r1
 800a38c:	4413      	add	r3, r2
 800a38e:	4602      	mov	r2, r0
 800a390:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800a392:	79fa      	ldrb	r2, [r7, #7]
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	490a      	ldr	r1, [pc, #40]	@ (800a3c0 <OLED_ClearPoint+0x9c>)
 800a398:	00d2      	lsls	r2, r2, #3
 800a39a:	440a      	add	r2, r1
 800a39c:	4413      	add	r3, r2
 800a39e:	7819      	ldrb	r1, [r3, #0]
 800a3a0:	79fa      	ldrb	r2, [r7, #7]
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	43c9      	mvns	r1, r1
 800a3a6:	b2c8      	uxtb	r0, r1
 800a3a8:	4905      	ldr	r1, [pc, #20]	@ (800a3c0 <OLED_ClearPoint+0x9c>)
 800a3aa:	00d2      	lsls	r2, r2, #3
 800a3ac:	440a      	add	r2, r1
 800a3ae:	4413      	add	r3, r2
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	701a      	strb	r2, [r3, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	24004d9c 	.word	0x24004d9c

0800a3c4 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800a3c4:	b590      	push	{r4, r7, lr}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4623      	mov	r3, r4
 800a3d4:	71fb      	strb	r3, [r7, #7]
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	71bb      	strb	r3, [r7, #6]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	717b      	strb	r3, [r7, #5]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800a3e2:	79bb      	ldrb	r3, [r7, #6]
 800a3e4:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800a3e6:	793b      	ldrb	r3, [r7, #4]
 800a3e8:	08db      	lsrs	r3, r3, #3
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	793b      	ldrb	r3, [r7, #4]
 800a3f0:	f003 0307 	and.w	r3, r3, #7
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bf14      	ite	ne
 800a3fa:	2301      	movne	r3, #1
 800a3fc:	2300      	moveq	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	4413      	add	r3, r2
 800a402:	b2da      	uxtb	r2, r3
 800a404:	793b      	ldrb	r3, [r7, #4]
 800a406:	085b      	lsrs	r3, r3, #1
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	fb12 f303 	smulbb	r3, r2, r3
 800a40e:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800a410:	797b      	ldrb	r3, [r7, #5]
 800a412:	3b20      	subs	r3, #32
 800a414:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]
 800a41a:	e057      	b.n	800a4cc <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800a41c:	793b      	ldrb	r3, [r7, #4]
 800a41e:	2b0c      	cmp	r3, #12
 800a420:	d10b      	bne.n	800a43a <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800a422:	7aba      	ldrb	r2, [r7, #10]
 800a424:	7bf9      	ldrb	r1, [r7, #15]
 800a426:	482e      	ldr	r0, [pc, #184]	@ (800a4e0 <OLED_ShowChar+0x11c>)
 800a428:	4613      	mov	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4403      	add	r3, r0
 800a432:	440b      	add	r3, r1
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	737b      	strb	r3, [r7, #13]
 800a438:	e019      	b.n	800a46e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800a43a:	793b      	ldrb	r3, [r7, #4]
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d108      	bne.n	800a452 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800a440:	7aba      	ldrb	r2, [r7, #10]
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	4927      	ldr	r1, [pc, #156]	@ (800a4e4 <OLED_ShowChar+0x120>)
 800a446:	0112      	lsls	r2, r2, #4
 800a448:	440a      	add	r2, r1
 800a44a:	4413      	add	r3, r2
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	737b      	strb	r3, [r7, #13]
 800a450:	e00d      	b.n	800a46e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800a452:	793b      	ldrb	r3, [r7, #4]
 800a454:	2b18      	cmp	r3, #24
 800a456:	d13e      	bne.n	800a4d6 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800a458:	7aba      	ldrb	r2, [r7, #10]
 800a45a:	7bf9      	ldrb	r1, [r7, #15]
 800a45c:	4822      	ldr	r0, [pc, #136]	@ (800a4e8 <OLED_ShowChar+0x124>)
 800a45e:	4613      	mov	r3, r2
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	4413      	add	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4403      	add	r3, r0
 800a468:	440b      	add	r3, r1
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800a46e:	2300      	movs	r3, #0
 800a470:	73bb      	strb	r3, [r7, #14]
 800a472:	e025      	b.n	800a4c0 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800a474:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	da06      	bge.n	800a48a <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800a47c:	79ba      	ldrb	r2, [r7, #6]
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff ff20 	bl	800a2c8 <OLED_DrawPoint>
 800a488:	e005      	b.n	800a496 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800a48a:	79ba      	ldrb	r2, [r7, #6]
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	4611      	mov	r1, r2
 800a490:	4618      	mov	r0, r3
 800a492:	f7ff ff47 	bl	800a324 <OLED_ClearPoint>
			temp <<= 1;
 800a496:	7b7b      	ldrb	r3, [r7, #13]
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	737b      	strb	r3, [r7, #13]
			y++;
 800a49c:	79bb      	ldrb	r3, [r7, #6]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800a4a2:	79ba      	ldrb	r2, [r7, #6]
 800a4a4:	7b3b      	ldrb	r3, [r7, #12]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	793b      	ldrb	r3, [r7, #4]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d105      	bne.n	800a4ba <OLED_ShowChar+0xf6>
			{
				y = y0;
 800a4ae:	7b3b      	ldrb	r3, [r7, #12]
 800a4b0:	71bb      	strb	r3, [r7, #6]
				x++;
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	71fb      	strb	r3, [r7, #7]
				break;
 800a4b8:	e005      	b.n	800a4c6 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	73bb      	strb	r3, [r7, #14]
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	2b07      	cmp	r3, #7
 800a4c4:	d9d6      	bls.n	800a474 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	73fb      	strb	r3, [r7, #15]
 800a4cc:	7bfa      	ldrb	r2, [r7, #15]
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d3a3      	bcc.n	800a41c <OLED_ShowChar+0x58>
 800a4d4:	e000      	b.n	800a4d8 <OLED_ShowChar+0x114>
			return;
 800a4d6:	bf00      	nop
			}
		}
	}
}
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd90      	pop	{r4, r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800d37c 	.word	0x0800d37c
 800a4e4:	0800d7f0 	.word	0x0800d7f0
 800a4e8:	0800dde0 	.word	0x0800dde0

0800a4ec <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	603a      	str	r2, [r7, #0]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	71fb      	strb	r3, [r7, #7]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	71bb      	strb	r3, [r7, #6]
 800a4fe:	4613      	mov	r3, r2
 800a500:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800a502:	e01b      	b.n	800a53c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	781a      	ldrb	r2, [r3, #0]
 800a508:	797b      	ldrb	r3, [r7, #5]
 800a50a:	79b9      	ldrb	r1, [r7, #6]
 800a50c:	79f8      	ldrb	r0, [r7, #7]
 800a50e:	f7ff ff59 	bl	800a3c4 <OLED_ShowChar>
		x += size1 / 2;
 800a512:	797b      	ldrb	r3, [r7, #5]
 800a514:	085b      	lsrs	r3, r3, #1
 800a516:	b2da      	uxtb	r2, r3
 800a518:	79fb      	ldrb	r3, [r7, #7]
 800a51a:	4413      	add	r3, r2
 800a51c:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800a51e:	79fa      	ldrb	r2, [r7, #7]
 800a520:	797b      	ldrb	r3, [r7, #5]
 800a522:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a526:	429a      	cmp	r2, r3
 800a528:	dd05      	ble.n	800a536 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800a52a:	2302      	movs	r3, #2
 800a52c:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800a52e:	79ba      	ldrb	r2, [r7, #6]
 800a530:	797b      	ldrb	r3, [r7, #5]
 800a532:	4413      	add	r3, r2
 800a534:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b1f      	cmp	r3, #31
 800a542:	d903      	bls.n	800a54c <OLED_ShowString+0x60>
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b7e      	cmp	r3, #126	@ 0x7e
 800a54a:	d9db      	bls.n	800a504 <OLED_ShowString+0x18>
	}
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800a558:	2200      	movs	r2, #0
 800a55a:	2120      	movs	r1, #32
 800a55c:	483f      	ldr	r0, [pc, #252]	@ (800a65c <OLED_Init+0x108>)
 800a55e:	f7f7 fc4d 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800a562:	20c8      	movs	r0, #200	@ 0xc8
 800a564:	f7f7 f912 	bl	800178c <HAL_Delay>
	OLED_RES_Set();
 800a568:	2201      	movs	r2, #1
 800a56a:	2120      	movs	r1, #32
 800a56c:	483b      	ldr	r0, [pc, #236]	@ (800a65c <OLED_Init+0x108>)
 800a56e:	f7f7 fc45 	bl	8001dfc <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800a572:	2100      	movs	r1, #0
 800a574:	20ae      	movs	r0, #174	@ 0xae
 800a576:	f7ff fe11 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800a57a:	2100      	movs	r1, #0
 800a57c:	2000      	movs	r0, #0
 800a57e:	f7ff fe0d 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800a582:	2100      	movs	r1, #0
 800a584:	2010      	movs	r0, #16
 800a586:	f7ff fe09 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800a58a:	2100      	movs	r1, #0
 800a58c:	2040      	movs	r0, #64	@ 0x40
 800a58e:	f7ff fe05 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800a592:	2100      	movs	r1, #0
 800a594:	2081      	movs	r0, #129	@ 0x81
 800a596:	f7ff fe01 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800a59a:	2100      	movs	r1, #0
 800a59c:	20cf      	movs	r0, #207	@ 0xcf
 800a59e:	f7ff fdfd 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	20a1      	movs	r0, #161	@ 0xa1
 800a5a6:	f7ff fdf9 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	20c8      	movs	r0, #200	@ 0xc8
 800a5ae:	f7ff fdf5 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	20a6      	movs	r0, #166	@ 0xa6
 800a5b6:	f7ff fdf1 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	20a8      	movs	r0, #168	@ 0xa8
 800a5be:	f7ff fded 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	203f      	movs	r0, #63	@ 0x3f
 800a5c6:	f7ff fde9 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	20d3      	movs	r0, #211	@ 0xd3
 800a5ce:	f7ff fde5 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f7ff fde1 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800a5da:	2100      	movs	r1, #0
 800a5dc:	20d5      	movs	r0, #213	@ 0xd5
 800a5de:	f7ff fddd 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	2080      	movs	r0, #128	@ 0x80
 800a5e6:	f7ff fdd9 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	20d9      	movs	r0, #217	@ 0xd9
 800a5ee:	f7ff fdd5 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	20f1      	movs	r0, #241	@ 0xf1
 800a5f6:	f7ff fdd1 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	20da      	movs	r0, #218	@ 0xda
 800a5fe:	f7ff fdcd 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800a602:	2100      	movs	r1, #0
 800a604:	2012      	movs	r0, #18
 800a606:	f7ff fdc9 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800a60a:	2100      	movs	r1, #0
 800a60c:	20db      	movs	r0, #219	@ 0xdb
 800a60e:	f7ff fdc5 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800a612:	2100      	movs	r1, #0
 800a614:	2040      	movs	r0, #64	@ 0x40
 800a616:	f7ff fdc1 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800a61a:	2100      	movs	r1, #0
 800a61c:	2020      	movs	r0, #32
 800a61e:	f7ff fdbd 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800a622:	2100      	movs	r1, #0
 800a624:	2002      	movs	r0, #2
 800a626:	f7ff fdb9 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800a62a:	2100      	movs	r1, #0
 800a62c:	208d      	movs	r0, #141	@ 0x8d
 800a62e:	f7ff fdb5 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800a632:	2100      	movs	r1, #0
 800a634:	2014      	movs	r0, #20
 800a636:	f7ff fdb1 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800a63a:	2100      	movs	r1, #0
 800a63c:	20a4      	movs	r0, #164	@ 0xa4
 800a63e:	f7ff fdad 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800a642:	2100      	movs	r1, #0
 800a644:	20a6      	movs	r0, #166	@ 0xa6
 800a646:	f7ff fda9 	bl	800a19c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800a64a:	2100      	movs	r1, #0
 800a64c:	20af      	movs	r0, #175	@ 0xaf
 800a64e:	f7ff fda5 	bl	800a19c <OLED_WR_Byte>
	OLED_Clear();
 800a652:	f7ff fe13 	bl	800a27c <OLED_Clear>
}
 800a656:	bf00      	nop
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	58020800 	.word	0x58020800

0800a660 <HAL_GPIO_EXTI_Callback>:
#include "spi.h"
#include "user_global.h"

// GPIO触发中断
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 800a66a:	88fb      	ldrh	r3, [r7, #6]
 800a66c:	2b40      	cmp	r3, #64	@ 0x40
 800a66e:	d104      	bne.n	800a67a <HAL_GPIO_EXTI_Callback+0x1a>
    {
        ad7606_GetValue(&hspi2, 8, adcValue);
 800a670:	4a04      	ldr	r2, [pc, #16]	@ (800a684 <HAL_GPIO_EXTI_Callback+0x24>)
 800a672:	2108      	movs	r1, #8
 800a674:	4804      	ldr	r0, [pc, #16]	@ (800a688 <HAL_GPIO_EXTI_Callback+0x28>)
 800a676:	f7ff fbc5 	bl	8009e04 <ad7606_GetValue>
    }
}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	2400521c 	.word	0x2400521c
 800a688:	24000324 	.word	0x24000324

0800a68c <malloc>:
 800a68c:	4b02      	ldr	r3, [pc, #8]	@ (800a698 <malloc+0xc>)
 800a68e:	4601      	mov	r1, r0
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f000 b825 	b.w	800a6e0 <_malloc_r>
 800a696:	bf00      	nop
 800a698:	24000044 	.word	0x24000044

0800a69c <sbrk_aligned>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	4e0f      	ldr	r6, [pc, #60]	@ (800a6dc <sbrk_aligned+0x40>)
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	6831      	ldr	r1, [r6, #0]
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	b911      	cbnz	r1, 800a6ae <sbrk_aligned+0x12>
 800a6a8:	f000 fe44 	bl	800b334 <_sbrk_r>
 800a6ac:	6030      	str	r0, [r6, #0]
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f000 fe3f 	bl	800b334 <_sbrk_r>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d103      	bne.n	800a6c2 <sbrk_aligned+0x26>
 800a6ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a6be:	4620      	mov	r0, r4
 800a6c0:	bd70      	pop	{r4, r5, r6, pc}
 800a6c2:	1cc4      	adds	r4, r0, #3
 800a6c4:	f024 0403 	bic.w	r4, r4, #3
 800a6c8:	42a0      	cmp	r0, r4
 800a6ca:	d0f8      	beq.n	800a6be <sbrk_aligned+0x22>
 800a6cc:	1a21      	subs	r1, r4, r0
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 fe30 	bl	800b334 <_sbrk_r>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d1f2      	bne.n	800a6be <sbrk_aligned+0x22>
 800a6d8:	e7ef      	b.n	800a6ba <sbrk_aligned+0x1e>
 800a6da:	bf00      	nop
 800a6dc:	24005244 	.word	0x24005244

0800a6e0 <_malloc_r>:
 800a6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	1ccd      	adds	r5, r1, #3
 800a6e6:	f025 0503 	bic.w	r5, r5, #3
 800a6ea:	3508      	adds	r5, #8
 800a6ec:	2d0c      	cmp	r5, #12
 800a6ee:	bf38      	it	cc
 800a6f0:	250c      	movcc	r5, #12
 800a6f2:	2d00      	cmp	r5, #0
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	db01      	blt.n	800a6fc <_malloc_r+0x1c>
 800a6f8:	42a9      	cmp	r1, r5
 800a6fa:	d904      	bls.n	800a706 <_malloc_r+0x26>
 800a6fc:	230c      	movs	r3, #12
 800a6fe:	6033      	str	r3, [r6, #0]
 800a700:	2000      	movs	r0, #0
 800a702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7dc <_malloc_r+0xfc>
 800a70a:	f000 f869 	bl	800a7e0 <__malloc_lock>
 800a70e:	f8d8 3000 	ldr.w	r3, [r8]
 800a712:	461c      	mov	r4, r3
 800a714:	bb44      	cbnz	r4, 800a768 <_malloc_r+0x88>
 800a716:	4629      	mov	r1, r5
 800a718:	4630      	mov	r0, r6
 800a71a:	f7ff ffbf 	bl	800a69c <sbrk_aligned>
 800a71e:	1c43      	adds	r3, r0, #1
 800a720:	4604      	mov	r4, r0
 800a722:	d158      	bne.n	800a7d6 <_malloc_r+0xf6>
 800a724:	f8d8 4000 	ldr.w	r4, [r8]
 800a728:	4627      	mov	r7, r4
 800a72a:	2f00      	cmp	r7, #0
 800a72c:	d143      	bne.n	800a7b6 <_malloc_r+0xd6>
 800a72e:	2c00      	cmp	r4, #0
 800a730:	d04b      	beq.n	800a7ca <_malloc_r+0xea>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	4639      	mov	r1, r7
 800a736:	4630      	mov	r0, r6
 800a738:	eb04 0903 	add.w	r9, r4, r3
 800a73c:	f000 fdfa 	bl	800b334 <_sbrk_r>
 800a740:	4581      	cmp	r9, r0
 800a742:	d142      	bne.n	800a7ca <_malloc_r+0xea>
 800a744:	6821      	ldr	r1, [r4, #0]
 800a746:	1a6d      	subs	r5, r5, r1
 800a748:	4629      	mov	r1, r5
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff ffa6 	bl	800a69c <sbrk_aligned>
 800a750:	3001      	adds	r0, #1
 800a752:	d03a      	beq.n	800a7ca <_malloc_r+0xea>
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	442b      	add	r3, r5
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	f8d8 3000 	ldr.w	r3, [r8]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	bb62      	cbnz	r2, 800a7bc <_malloc_r+0xdc>
 800a762:	f8c8 7000 	str.w	r7, [r8]
 800a766:	e00f      	b.n	800a788 <_malloc_r+0xa8>
 800a768:	6822      	ldr	r2, [r4, #0]
 800a76a:	1b52      	subs	r2, r2, r5
 800a76c:	d420      	bmi.n	800a7b0 <_malloc_r+0xd0>
 800a76e:	2a0b      	cmp	r2, #11
 800a770:	d917      	bls.n	800a7a2 <_malloc_r+0xc2>
 800a772:	1961      	adds	r1, r4, r5
 800a774:	42a3      	cmp	r3, r4
 800a776:	6025      	str	r5, [r4, #0]
 800a778:	bf18      	it	ne
 800a77a:	6059      	strne	r1, [r3, #4]
 800a77c:	6863      	ldr	r3, [r4, #4]
 800a77e:	bf08      	it	eq
 800a780:	f8c8 1000 	streq.w	r1, [r8]
 800a784:	5162      	str	r2, [r4, r5]
 800a786:	604b      	str	r3, [r1, #4]
 800a788:	4630      	mov	r0, r6
 800a78a:	f000 f82f 	bl	800a7ec <__malloc_unlock>
 800a78e:	f104 000b 	add.w	r0, r4, #11
 800a792:	1d23      	adds	r3, r4, #4
 800a794:	f020 0007 	bic.w	r0, r0, #7
 800a798:	1ac2      	subs	r2, r0, r3
 800a79a:	bf1c      	itt	ne
 800a79c:	1a1b      	subne	r3, r3, r0
 800a79e:	50a3      	strne	r3, [r4, r2]
 800a7a0:	e7af      	b.n	800a702 <_malloc_r+0x22>
 800a7a2:	6862      	ldr	r2, [r4, #4]
 800a7a4:	42a3      	cmp	r3, r4
 800a7a6:	bf0c      	ite	eq
 800a7a8:	f8c8 2000 	streq.w	r2, [r8]
 800a7ac:	605a      	strne	r2, [r3, #4]
 800a7ae:	e7eb      	b.n	800a788 <_malloc_r+0xa8>
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	6864      	ldr	r4, [r4, #4]
 800a7b4:	e7ae      	b.n	800a714 <_malloc_r+0x34>
 800a7b6:	463c      	mov	r4, r7
 800a7b8:	687f      	ldr	r7, [r7, #4]
 800a7ba:	e7b6      	b.n	800a72a <_malloc_r+0x4a>
 800a7bc:	461a      	mov	r2, r3
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	42a3      	cmp	r3, r4
 800a7c2:	d1fb      	bne.n	800a7bc <_malloc_r+0xdc>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	6053      	str	r3, [r2, #4]
 800a7c8:	e7de      	b.n	800a788 <_malloc_r+0xa8>
 800a7ca:	230c      	movs	r3, #12
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f000 f80c 	bl	800a7ec <__malloc_unlock>
 800a7d4:	e794      	b.n	800a700 <_malloc_r+0x20>
 800a7d6:	6005      	str	r5, [r0, #0]
 800a7d8:	e7d6      	b.n	800a788 <_malloc_r+0xa8>
 800a7da:	bf00      	nop
 800a7dc:	24005248 	.word	0x24005248

0800a7e0 <__malloc_lock>:
 800a7e0:	4801      	ldr	r0, [pc, #4]	@ (800a7e8 <__malloc_lock+0x8>)
 800a7e2:	f000 bdf4 	b.w	800b3ce <__retarget_lock_acquire_recursive>
 800a7e6:	bf00      	nop
 800a7e8:	2400538c 	.word	0x2400538c

0800a7ec <__malloc_unlock>:
 800a7ec:	4801      	ldr	r0, [pc, #4]	@ (800a7f4 <__malloc_unlock+0x8>)
 800a7ee:	f000 bdef 	b.w	800b3d0 <__retarget_lock_release_recursive>
 800a7f2:	bf00      	nop
 800a7f4:	2400538c 	.word	0x2400538c

0800a7f8 <__cvt>:
 800a7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7fa:	ed2d 8b02 	vpush	{d8}
 800a7fe:	eeb0 8b40 	vmov.f64	d8, d0
 800a802:	b085      	sub	sp, #20
 800a804:	4617      	mov	r7, r2
 800a806:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a808:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a80a:	ee18 2a90 	vmov	r2, s17
 800a80e:	f025 0520 	bic.w	r5, r5, #32
 800a812:	2a00      	cmp	r2, #0
 800a814:	bfb6      	itet	lt
 800a816:	222d      	movlt	r2, #45	@ 0x2d
 800a818:	2200      	movge	r2, #0
 800a81a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a81e:	2d46      	cmp	r5, #70	@ 0x46
 800a820:	460c      	mov	r4, r1
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	d004      	beq.n	800a830 <__cvt+0x38>
 800a826:	2d45      	cmp	r5, #69	@ 0x45
 800a828:	d100      	bne.n	800a82c <__cvt+0x34>
 800a82a:	3401      	adds	r4, #1
 800a82c:	2102      	movs	r1, #2
 800a82e:	e000      	b.n	800a832 <__cvt+0x3a>
 800a830:	2103      	movs	r1, #3
 800a832:	ab03      	add	r3, sp, #12
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	ab02      	add	r3, sp, #8
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	4622      	mov	r2, r4
 800a83c:	4633      	mov	r3, r6
 800a83e:	eeb0 0b48 	vmov.f64	d0, d8
 800a842:	f000 fe5d 	bl	800b500 <_dtoa_r>
 800a846:	2d47      	cmp	r5, #71	@ 0x47
 800a848:	d114      	bne.n	800a874 <__cvt+0x7c>
 800a84a:	07fb      	lsls	r3, r7, #31
 800a84c:	d50a      	bpl.n	800a864 <__cvt+0x6c>
 800a84e:	1902      	adds	r2, r0, r4
 800a850:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a858:	bf08      	it	eq
 800a85a:	9203      	streq	r2, [sp, #12]
 800a85c:	2130      	movs	r1, #48	@ 0x30
 800a85e:	9b03      	ldr	r3, [sp, #12]
 800a860:	4293      	cmp	r3, r2
 800a862:	d319      	bcc.n	800a898 <__cvt+0xa0>
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a868:	1a1b      	subs	r3, r3, r0
 800a86a:	6013      	str	r3, [r2, #0]
 800a86c:	b005      	add	sp, #20
 800a86e:	ecbd 8b02 	vpop	{d8}
 800a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a874:	2d46      	cmp	r5, #70	@ 0x46
 800a876:	eb00 0204 	add.w	r2, r0, r4
 800a87a:	d1e9      	bne.n	800a850 <__cvt+0x58>
 800a87c:	7803      	ldrb	r3, [r0, #0]
 800a87e:	2b30      	cmp	r3, #48	@ 0x30
 800a880:	d107      	bne.n	800a892 <__cvt+0x9a>
 800a882:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88a:	bf1c      	itt	ne
 800a88c:	f1c4 0401 	rsbne	r4, r4, #1
 800a890:	6034      	strne	r4, [r6, #0]
 800a892:	6833      	ldr	r3, [r6, #0]
 800a894:	441a      	add	r2, r3
 800a896:	e7db      	b.n	800a850 <__cvt+0x58>
 800a898:	1c5c      	adds	r4, r3, #1
 800a89a:	9403      	str	r4, [sp, #12]
 800a89c:	7019      	strb	r1, [r3, #0]
 800a89e:	e7de      	b.n	800a85e <__cvt+0x66>

0800a8a0 <__exponent>:
 800a8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8a2:	2900      	cmp	r1, #0
 800a8a4:	bfba      	itte	lt
 800a8a6:	4249      	neglt	r1, r1
 800a8a8:	232d      	movlt	r3, #45	@ 0x2d
 800a8aa:	232b      	movge	r3, #43	@ 0x2b
 800a8ac:	2909      	cmp	r1, #9
 800a8ae:	7002      	strb	r2, [r0, #0]
 800a8b0:	7043      	strb	r3, [r0, #1]
 800a8b2:	dd29      	ble.n	800a908 <__exponent+0x68>
 800a8b4:	f10d 0307 	add.w	r3, sp, #7
 800a8b8:	461d      	mov	r5, r3
 800a8ba:	270a      	movs	r7, #10
 800a8bc:	461a      	mov	r2, r3
 800a8be:	fbb1 f6f7 	udiv	r6, r1, r7
 800a8c2:	fb07 1416 	mls	r4, r7, r6, r1
 800a8c6:	3430      	adds	r4, #48	@ 0x30
 800a8c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	2c63      	cmp	r4, #99	@ 0x63
 800a8d0:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	dcf1      	bgt.n	800a8bc <__exponent+0x1c>
 800a8d8:	3130      	adds	r1, #48	@ 0x30
 800a8da:	1e94      	subs	r4, r2, #2
 800a8dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a8e0:	1c41      	adds	r1, r0, #1
 800a8e2:	4623      	mov	r3, r4
 800a8e4:	42ab      	cmp	r3, r5
 800a8e6:	d30a      	bcc.n	800a8fe <__exponent+0x5e>
 800a8e8:	f10d 0309 	add.w	r3, sp, #9
 800a8ec:	1a9b      	subs	r3, r3, r2
 800a8ee:	42ac      	cmp	r4, r5
 800a8f0:	bf88      	it	hi
 800a8f2:	2300      	movhi	r3, #0
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	4403      	add	r3, r0
 800a8f8:	1a18      	subs	r0, r3, r0
 800a8fa:	b003      	add	sp, #12
 800a8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fe:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a902:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a906:	e7ed      	b.n	800a8e4 <__exponent+0x44>
 800a908:	2330      	movs	r3, #48	@ 0x30
 800a90a:	3130      	adds	r1, #48	@ 0x30
 800a90c:	7083      	strb	r3, [r0, #2]
 800a90e:	70c1      	strb	r1, [r0, #3]
 800a910:	1d03      	adds	r3, r0, #4
 800a912:	e7f1      	b.n	800a8f8 <__exponent+0x58>
 800a914:	0000      	movs	r0, r0
	...

0800a918 <_printf_float>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	b08d      	sub	sp, #52	@ 0x34
 800a91e:	460c      	mov	r4, r1
 800a920:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a924:	4616      	mov	r6, r2
 800a926:	461f      	mov	r7, r3
 800a928:	4605      	mov	r5, r0
 800a92a:	f000 fccb 	bl	800b2c4 <_localeconv_r>
 800a92e:	f8d0 b000 	ldr.w	fp, [r0]
 800a932:	4658      	mov	r0, fp
 800a934:	f7f5 fd24 	bl	8000380 <strlen>
 800a938:	2300      	movs	r3, #0
 800a93a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a93c:	f8d8 3000 	ldr.w	r3, [r8]
 800a940:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a944:	6822      	ldr	r2, [r4, #0]
 800a946:	9005      	str	r0, [sp, #20]
 800a948:	3307      	adds	r3, #7
 800a94a:	f023 0307 	bic.w	r3, r3, #7
 800a94e:	f103 0108 	add.w	r1, r3, #8
 800a952:	f8c8 1000 	str.w	r1, [r8]
 800a956:	ed93 0b00 	vldr	d0, [r3]
 800a95a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800abb8 <_printf_float+0x2a0>
 800a95e:	eeb0 7bc0 	vabs.f64	d7, d0
 800a962:	eeb4 7b46 	vcmp.f64	d7, d6
 800a966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a96e:	dd24      	ble.n	800a9ba <_printf_float+0xa2>
 800a970:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a978:	d502      	bpl.n	800a980 <_printf_float+0x68>
 800a97a:	232d      	movs	r3, #45	@ 0x2d
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a980:	498f      	ldr	r1, [pc, #572]	@ (800abc0 <_printf_float+0x2a8>)
 800a982:	4b90      	ldr	r3, [pc, #576]	@ (800abc4 <_printf_float+0x2ac>)
 800a984:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a988:	bf94      	ite	ls
 800a98a:	4688      	movls	r8, r1
 800a98c:	4698      	movhi	r8, r3
 800a98e:	f022 0204 	bic.w	r2, r2, #4
 800a992:	2303      	movs	r3, #3
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	6022      	str	r2, [r4, #0]
 800a998:	f04f 0a00 	mov.w	sl, #0
 800a99c:	9700      	str	r7, [sp, #0]
 800a99e:	4633      	mov	r3, r6
 800a9a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f000 f9d1 	bl	800ad4c <_printf_common>
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	f040 8089 	bne.w	800aac2 <_printf_float+0x1aa>
 800a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b4:	b00d      	add	sp, #52	@ 0x34
 800a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ba:	eeb4 0b40 	vcmp.f64	d0, d0
 800a9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c2:	d709      	bvc.n	800a9d8 <_printf_float+0xc0>
 800a9c4:	ee10 3a90 	vmov	r3, s1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	bfbc      	itt	lt
 800a9cc:	232d      	movlt	r3, #45	@ 0x2d
 800a9ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a9d2:	497d      	ldr	r1, [pc, #500]	@ (800abc8 <_printf_float+0x2b0>)
 800a9d4:	4b7d      	ldr	r3, [pc, #500]	@ (800abcc <_printf_float+0x2b4>)
 800a9d6:	e7d5      	b.n	800a984 <_printf_float+0x6c>
 800a9d8:	6863      	ldr	r3, [r4, #4]
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a9e0:	d139      	bne.n	800aa56 <_printf_float+0x13e>
 800a9e2:	2306      	movs	r3, #6
 800a9e4:	6063      	str	r3, [r4, #4]
 800a9e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6022      	str	r2, [r4, #0]
 800a9ee:	9303      	str	r3, [sp, #12]
 800a9f0:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a9f6:	ab09      	add	r3, sp, #36	@ 0x24
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	6861      	ldr	r1, [r4, #4]
 800a9fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aa00:	4628      	mov	r0, r5
 800aa02:	f7ff fef9 	bl	800a7f8 <__cvt>
 800aa06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	d129      	bne.n	800aa64 <_printf_float+0x14c>
 800aa10:	1cc8      	adds	r0, r1, #3
 800aa12:	db02      	blt.n	800aa1a <_printf_float+0x102>
 800aa14:	6863      	ldr	r3, [r4, #4]
 800aa16:	4299      	cmp	r1, r3
 800aa18:	dd41      	ble.n	800aa9e <_printf_float+0x186>
 800aa1a:	f1a9 0902 	sub.w	r9, r9, #2
 800aa1e:	fa5f f989 	uxtb.w	r9, r9
 800aa22:	3901      	subs	r1, #1
 800aa24:	464a      	mov	r2, r9
 800aa26:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa2c:	f7ff ff38 	bl	800a8a0 <__exponent>
 800aa30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa32:	1813      	adds	r3, r2, r0
 800aa34:	2a01      	cmp	r2, #1
 800aa36:	4682      	mov	sl, r0
 800aa38:	6123      	str	r3, [r4, #16]
 800aa3a:	dc02      	bgt.n	800aa42 <_printf_float+0x12a>
 800aa3c:	6822      	ldr	r2, [r4, #0]
 800aa3e:	07d2      	lsls	r2, r2, #31
 800aa40:	d501      	bpl.n	800aa46 <_printf_float+0x12e>
 800aa42:	3301      	adds	r3, #1
 800aa44:	6123      	str	r3, [r4, #16]
 800aa46:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0a6      	beq.n	800a99c <_printf_float+0x84>
 800aa4e:	232d      	movs	r3, #45	@ 0x2d
 800aa50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa54:	e7a2      	b.n	800a99c <_printf_float+0x84>
 800aa56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa5a:	d1c4      	bne.n	800a9e6 <_printf_float+0xce>
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1c2      	bne.n	800a9e6 <_printf_float+0xce>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e7bf      	b.n	800a9e4 <_printf_float+0xcc>
 800aa64:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800aa68:	d9db      	bls.n	800aa22 <_printf_float+0x10a>
 800aa6a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800aa6e:	d118      	bne.n	800aaa2 <_printf_float+0x18a>
 800aa70:	2900      	cmp	r1, #0
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	dd0b      	ble.n	800aa8e <_printf_float+0x176>
 800aa76:	6121      	str	r1, [r4, #16]
 800aa78:	b913      	cbnz	r3, 800aa80 <_printf_float+0x168>
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	07d0      	lsls	r0, r2, #31
 800aa7e:	d502      	bpl.n	800aa86 <_printf_float+0x16e>
 800aa80:	3301      	adds	r3, #1
 800aa82:	440b      	add	r3, r1
 800aa84:	6123      	str	r3, [r4, #16]
 800aa86:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa88:	f04f 0a00 	mov.w	sl, #0
 800aa8c:	e7db      	b.n	800aa46 <_printf_float+0x12e>
 800aa8e:	b913      	cbnz	r3, 800aa96 <_printf_float+0x17e>
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	07d2      	lsls	r2, r2, #31
 800aa94:	d501      	bpl.n	800aa9a <_printf_float+0x182>
 800aa96:	3302      	adds	r3, #2
 800aa98:	e7f4      	b.n	800aa84 <_printf_float+0x16c>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e7f2      	b.n	800aa84 <_printf_float+0x16c>
 800aa9e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800aaa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	db05      	blt.n	800aab4 <_printf_float+0x19c>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	6121      	str	r1, [r4, #16]
 800aaac:	07d8      	lsls	r0, r3, #31
 800aaae:	d5ea      	bpl.n	800aa86 <_printf_float+0x16e>
 800aab0:	1c4b      	adds	r3, r1, #1
 800aab2:	e7e7      	b.n	800aa84 <_printf_float+0x16c>
 800aab4:	2900      	cmp	r1, #0
 800aab6:	bfd4      	ite	le
 800aab8:	f1c1 0202 	rsble	r2, r1, #2
 800aabc:	2201      	movgt	r2, #1
 800aabe:	4413      	add	r3, r2
 800aac0:	e7e0      	b.n	800aa84 <_printf_float+0x16c>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	055a      	lsls	r2, r3, #21
 800aac6:	d407      	bmi.n	800aad8 <_printf_float+0x1c0>
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	4642      	mov	r2, r8
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	d12a      	bne.n	800ab2c <_printf_float+0x214>
 800aad6:	e76b      	b.n	800a9b0 <_printf_float+0x98>
 800aad8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800aadc:	f240 80e0 	bls.w	800aca0 <_printf_float+0x388>
 800aae0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aae4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaec:	d133      	bne.n	800ab56 <_printf_float+0x23e>
 800aaee:	4a38      	ldr	r2, [pc, #224]	@ (800abd0 <_printf_float+0x2b8>)
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f af59 	beq.w	800a9b0 <_printf_float+0x98>
 800aafe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ab02:	4543      	cmp	r3, r8
 800ab04:	db02      	blt.n	800ab0c <_printf_float+0x1f4>
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	07d8      	lsls	r0, r3, #31
 800ab0a:	d50f      	bpl.n	800ab2c <_printf_float+0x214>
 800ab0c:	9b05      	ldr	r3, [sp, #20]
 800ab0e:	465a      	mov	r2, fp
 800ab10:	4631      	mov	r1, r6
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b8      	blx	r7
 800ab16:	3001      	adds	r0, #1
 800ab18:	f43f af4a 	beq.w	800a9b0 <_printf_float+0x98>
 800ab1c:	f04f 0900 	mov.w	r9, #0
 800ab20:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab24:	f104 0a1a 	add.w	sl, r4, #26
 800ab28:	45c8      	cmp	r8, r9
 800ab2a:	dc09      	bgt.n	800ab40 <_printf_float+0x228>
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	079b      	lsls	r3, r3, #30
 800ab30:	f100 8107 	bmi.w	800ad42 <_printf_float+0x42a>
 800ab34:	68e0      	ldr	r0, [r4, #12]
 800ab36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab38:	4298      	cmp	r0, r3
 800ab3a:	bfb8      	it	lt
 800ab3c:	4618      	movlt	r0, r3
 800ab3e:	e739      	b.n	800a9b4 <_printf_float+0x9c>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4652      	mov	r2, sl
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	f43f af30 	beq.w	800a9b0 <_printf_float+0x98>
 800ab50:	f109 0901 	add.w	r9, r9, #1
 800ab54:	e7e8      	b.n	800ab28 <_printf_float+0x210>
 800ab56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dc3b      	bgt.n	800abd4 <_printf_float+0x2bc>
 800ab5c:	4a1c      	ldr	r2, [pc, #112]	@ (800abd0 <_printf_float+0x2b8>)
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4631      	mov	r1, r6
 800ab62:	4628      	mov	r0, r5
 800ab64:	47b8      	blx	r7
 800ab66:	3001      	adds	r0, #1
 800ab68:	f43f af22 	beq.w	800a9b0 <_printf_float+0x98>
 800ab6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab70:	ea59 0303 	orrs.w	r3, r9, r3
 800ab74:	d102      	bne.n	800ab7c <_printf_float+0x264>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	07d9      	lsls	r1, r3, #31
 800ab7a:	d5d7      	bpl.n	800ab2c <_printf_float+0x214>
 800ab7c:	9b05      	ldr	r3, [sp, #20]
 800ab7e:	465a      	mov	r2, fp
 800ab80:	4631      	mov	r1, r6
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	f43f af12 	beq.w	800a9b0 <_printf_float+0x98>
 800ab8c:	f04f 0a00 	mov.w	sl, #0
 800ab90:	f104 0b1a 	add.w	fp, r4, #26
 800ab94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab96:	425b      	negs	r3, r3
 800ab98:	4553      	cmp	r3, sl
 800ab9a:	dc01      	bgt.n	800aba0 <_printf_float+0x288>
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	e794      	b.n	800aaca <_printf_float+0x1b2>
 800aba0:	2301      	movs	r3, #1
 800aba2:	465a      	mov	r2, fp
 800aba4:	4631      	mov	r1, r6
 800aba6:	4628      	mov	r0, r5
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f af00 	beq.w	800a9b0 <_printf_float+0x98>
 800abb0:	f10a 0a01 	add.w	sl, sl, #1
 800abb4:	e7ee      	b.n	800ab94 <_printf_float+0x27c>
 800abb6:	bf00      	nop
 800abb8:	ffffffff 	.word	0xffffffff
 800abbc:	7fefffff 	.word	0x7fefffff
 800abc0:	0800eb40 	.word	0x0800eb40
 800abc4:	0800eb44 	.word	0x0800eb44
 800abc8:	0800eb48 	.word	0x0800eb48
 800abcc:	0800eb4c 	.word	0x0800eb4c
 800abd0:	0800eb50 	.word	0x0800eb50
 800abd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800abda:	4553      	cmp	r3, sl
 800abdc:	bfa8      	it	ge
 800abde:	4653      	movge	r3, sl
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	4699      	mov	r9, r3
 800abe4:	dc37      	bgt.n	800ac56 <_printf_float+0x33e>
 800abe6:	2300      	movs	r3, #0
 800abe8:	9307      	str	r3, [sp, #28]
 800abea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abee:	f104 021a 	add.w	r2, r4, #26
 800abf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abf4:	9907      	ldr	r1, [sp, #28]
 800abf6:	9306      	str	r3, [sp, #24]
 800abf8:	eba3 0309 	sub.w	r3, r3, r9
 800abfc:	428b      	cmp	r3, r1
 800abfe:	dc31      	bgt.n	800ac64 <_printf_float+0x34c>
 800ac00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac02:	459a      	cmp	sl, r3
 800ac04:	dc3b      	bgt.n	800ac7e <_printf_float+0x366>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	07da      	lsls	r2, r3, #31
 800ac0a:	d438      	bmi.n	800ac7e <_printf_float+0x366>
 800ac0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac0e:	ebaa 0903 	sub.w	r9, sl, r3
 800ac12:	9b06      	ldr	r3, [sp, #24]
 800ac14:	ebaa 0303 	sub.w	r3, sl, r3
 800ac18:	4599      	cmp	r9, r3
 800ac1a:	bfa8      	it	ge
 800ac1c:	4699      	movge	r9, r3
 800ac1e:	f1b9 0f00 	cmp.w	r9, #0
 800ac22:	dc34      	bgt.n	800ac8e <_printf_float+0x376>
 800ac24:	f04f 0800 	mov.w	r8, #0
 800ac28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac2c:	f104 0b1a 	add.w	fp, r4, #26
 800ac30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac32:	ebaa 0303 	sub.w	r3, sl, r3
 800ac36:	eba3 0309 	sub.w	r3, r3, r9
 800ac3a:	4543      	cmp	r3, r8
 800ac3c:	f77f af76 	ble.w	800ab2c <_printf_float+0x214>
 800ac40:	2301      	movs	r3, #1
 800ac42:	465a      	mov	r2, fp
 800ac44:	4631      	mov	r1, r6
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b8      	blx	r7
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	f43f aeb0 	beq.w	800a9b0 <_printf_float+0x98>
 800ac50:	f108 0801 	add.w	r8, r8, #1
 800ac54:	e7ec      	b.n	800ac30 <_printf_float+0x318>
 800ac56:	4642      	mov	r2, r8
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d1c1      	bne.n	800abe6 <_printf_float+0x2ce>
 800ac62:	e6a5      	b.n	800a9b0 <_printf_float+0x98>
 800ac64:	2301      	movs	r3, #1
 800ac66:	4631      	mov	r1, r6
 800ac68:	4628      	mov	r0, r5
 800ac6a:	9206      	str	r2, [sp, #24]
 800ac6c:	47b8      	blx	r7
 800ac6e:	3001      	adds	r0, #1
 800ac70:	f43f ae9e 	beq.w	800a9b0 <_printf_float+0x98>
 800ac74:	9b07      	ldr	r3, [sp, #28]
 800ac76:	9a06      	ldr	r2, [sp, #24]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	9307      	str	r3, [sp, #28]
 800ac7c:	e7b9      	b.n	800abf2 <_printf_float+0x2da>
 800ac7e:	9b05      	ldr	r3, [sp, #20]
 800ac80:	465a      	mov	r2, fp
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b8      	blx	r7
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d1bf      	bne.n	800ac0c <_printf_float+0x2f4>
 800ac8c:	e690      	b.n	800a9b0 <_printf_float+0x98>
 800ac8e:	9a06      	ldr	r2, [sp, #24]
 800ac90:	464b      	mov	r3, r9
 800ac92:	4442      	add	r2, r8
 800ac94:	4631      	mov	r1, r6
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d1c2      	bne.n	800ac24 <_printf_float+0x30c>
 800ac9e:	e687      	b.n	800a9b0 <_printf_float+0x98>
 800aca0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aca4:	f1b9 0f01 	cmp.w	r9, #1
 800aca8:	dc01      	bgt.n	800acae <_printf_float+0x396>
 800acaa:	07db      	lsls	r3, r3, #31
 800acac:	d536      	bpl.n	800ad1c <_printf_float+0x404>
 800acae:	2301      	movs	r3, #1
 800acb0:	4642      	mov	r2, r8
 800acb2:	4631      	mov	r1, r6
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b8      	blx	r7
 800acb8:	3001      	adds	r0, #1
 800acba:	f43f ae79 	beq.w	800a9b0 <_printf_float+0x98>
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	465a      	mov	r2, fp
 800acc2:	4631      	mov	r1, r6
 800acc4:	4628      	mov	r0, r5
 800acc6:	47b8      	blx	r7
 800acc8:	3001      	adds	r0, #1
 800acca:	f43f ae71 	beq.w	800a9b0 <_printf_float+0x98>
 800acce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800acd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acda:	f109 39ff 	add.w	r9, r9, #4294967295
 800acde:	d018      	beq.n	800ad12 <_printf_float+0x3fa>
 800ace0:	464b      	mov	r3, r9
 800ace2:	f108 0201 	add.w	r2, r8, #1
 800ace6:	4631      	mov	r1, r6
 800ace8:	4628      	mov	r0, r5
 800acea:	47b8      	blx	r7
 800acec:	3001      	adds	r0, #1
 800acee:	d10c      	bne.n	800ad0a <_printf_float+0x3f2>
 800acf0:	e65e      	b.n	800a9b0 <_printf_float+0x98>
 800acf2:	2301      	movs	r3, #1
 800acf4:	465a      	mov	r2, fp
 800acf6:	4631      	mov	r1, r6
 800acf8:	4628      	mov	r0, r5
 800acfa:	47b8      	blx	r7
 800acfc:	3001      	adds	r0, #1
 800acfe:	f43f ae57 	beq.w	800a9b0 <_printf_float+0x98>
 800ad02:	f108 0801 	add.w	r8, r8, #1
 800ad06:	45c8      	cmp	r8, r9
 800ad08:	dbf3      	blt.n	800acf2 <_printf_float+0x3da>
 800ad0a:	4653      	mov	r3, sl
 800ad0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad10:	e6dc      	b.n	800aacc <_printf_float+0x1b4>
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	f104 0b1a 	add.w	fp, r4, #26
 800ad1a:	e7f4      	b.n	800ad06 <_printf_float+0x3ee>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4642      	mov	r2, r8
 800ad20:	e7e1      	b.n	800ace6 <_printf_float+0x3ce>
 800ad22:	2301      	movs	r3, #1
 800ad24:	464a      	mov	r2, r9
 800ad26:	4631      	mov	r1, r6
 800ad28:	4628      	mov	r0, r5
 800ad2a:	47b8      	blx	r7
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	f43f ae3f 	beq.w	800a9b0 <_printf_float+0x98>
 800ad32:	f108 0801 	add.w	r8, r8, #1
 800ad36:	68e3      	ldr	r3, [r4, #12]
 800ad38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad3a:	1a5b      	subs	r3, r3, r1
 800ad3c:	4543      	cmp	r3, r8
 800ad3e:	dcf0      	bgt.n	800ad22 <_printf_float+0x40a>
 800ad40:	e6f8      	b.n	800ab34 <_printf_float+0x21c>
 800ad42:	f04f 0800 	mov.w	r8, #0
 800ad46:	f104 0919 	add.w	r9, r4, #25
 800ad4a:	e7f4      	b.n	800ad36 <_printf_float+0x41e>

0800ad4c <_printf_common>:
 800ad4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	4616      	mov	r6, r2
 800ad52:	4698      	mov	r8, r3
 800ad54:	688a      	ldr	r2, [r1, #8]
 800ad56:	690b      	ldr	r3, [r1, #16]
 800ad58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	bfb8      	it	lt
 800ad60:	4613      	movlt	r3, r2
 800ad62:	6033      	str	r3, [r6, #0]
 800ad64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad68:	4607      	mov	r7, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	b10a      	cbz	r2, 800ad72 <_printf_common+0x26>
 800ad6e:	3301      	adds	r3, #1
 800ad70:	6033      	str	r3, [r6, #0]
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	0699      	lsls	r1, r3, #26
 800ad76:	bf42      	ittt	mi
 800ad78:	6833      	ldrmi	r3, [r6, #0]
 800ad7a:	3302      	addmi	r3, #2
 800ad7c:	6033      	strmi	r3, [r6, #0]
 800ad7e:	6825      	ldr	r5, [r4, #0]
 800ad80:	f015 0506 	ands.w	r5, r5, #6
 800ad84:	d106      	bne.n	800ad94 <_printf_common+0x48>
 800ad86:	f104 0a19 	add.w	sl, r4, #25
 800ad8a:	68e3      	ldr	r3, [r4, #12]
 800ad8c:	6832      	ldr	r2, [r6, #0]
 800ad8e:	1a9b      	subs	r3, r3, r2
 800ad90:	42ab      	cmp	r3, r5
 800ad92:	dc26      	bgt.n	800ade2 <_printf_common+0x96>
 800ad94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad98:	6822      	ldr	r2, [r4, #0]
 800ad9a:	3b00      	subs	r3, #0
 800ad9c:	bf18      	it	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	0692      	lsls	r2, r2, #26
 800ada2:	d42b      	bmi.n	800adfc <_printf_common+0xb0>
 800ada4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ada8:	4641      	mov	r1, r8
 800adaa:	4638      	mov	r0, r7
 800adac:	47c8      	blx	r9
 800adae:	3001      	adds	r0, #1
 800adb0:	d01e      	beq.n	800adf0 <_printf_common+0xa4>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	6922      	ldr	r2, [r4, #16]
 800adb6:	f003 0306 	and.w	r3, r3, #6
 800adba:	2b04      	cmp	r3, #4
 800adbc:	bf02      	ittt	eq
 800adbe:	68e5      	ldreq	r5, [r4, #12]
 800adc0:	6833      	ldreq	r3, [r6, #0]
 800adc2:	1aed      	subeq	r5, r5, r3
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	bf0c      	ite	eq
 800adc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adcc:	2500      	movne	r5, #0
 800adce:	4293      	cmp	r3, r2
 800add0:	bfc4      	itt	gt
 800add2:	1a9b      	subgt	r3, r3, r2
 800add4:	18ed      	addgt	r5, r5, r3
 800add6:	2600      	movs	r6, #0
 800add8:	341a      	adds	r4, #26
 800adda:	42b5      	cmp	r5, r6
 800addc:	d11a      	bne.n	800ae14 <_printf_common+0xc8>
 800adde:	2000      	movs	r0, #0
 800ade0:	e008      	b.n	800adf4 <_printf_common+0xa8>
 800ade2:	2301      	movs	r3, #1
 800ade4:	4652      	mov	r2, sl
 800ade6:	4641      	mov	r1, r8
 800ade8:	4638      	mov	r0, r7
 800adea:	47c8      	blx	r9
 800adec:	3001      	adds	r0, #1
 800adee:	d103      	bne.n	800adf8 <_printf_common+0xac>
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf8:	3501      	adds	r5, #1
 800adfa:	e7c6      	b.n	800ad8a <_printf_common+0x3e>
 800adfc:	18e1      	adds	r1, r4, r3
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	2030      	movs	r0, #48	@ 0x30
 800ae02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae06:	4422      	add	r2, r4
 800ae08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae10:	3302      	adds	r3, #2
 800ae12:	e7c7      	b.n	800ada4 <_printf_common+0x58>
 800ae14:	2301      	movs	r3, #1
 800ae16:	4622      	mov	r2, r4
 800ae18:	4641      	mov	r1, r8
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	47c8      	blx	r9
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d0e6      	beq.n	800adf0 <_printf_common+0xa4>
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7d9      	b.n	800adda <_printf_common+0x8e>
	...

0800ae28 <_printf_i>:
 800ae28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	7e0f      	ldrb	r7, [r1, #24]
 800ae2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae30:	2f78      	cmp	r7, #120	@ 0x78
 800ae32:	4691      	mov	r9, r2
 800ae34:	4680      	mov	r8, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	469a      	mov	sl, r3
 800ae3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae3e:	d807      	bhi.n	800ae50 <_printf_i+0x28>
 800ae40:	2f62      	cmp	r7, #98	@ 0x62
 800ae42:	d80a      	bhi.n	800ae5a <_printf_i+0x32>
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	f000 80d2 	beq.w	800afee <_printf_i+0x1c6>
 800ae4a:	2f58      	cmp	r7, #88	@ 0x58
 800ae4c:	f000 80b9 	beq.w	800afc2 <_printf_i+0x19a>
 800ae50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae58:	e03a      	b.n	800aed0 <_printf_i+0xa8>
 800ae5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae5e:	2b15      	cmp	r3, #21
 800ae60:	d8f6      	bhi.n	800ae50 <_printf_i+0x28>
 800ae62:	a101      	add	r1, pc, #4	@ (adr r1, 800ae68 <_printf_i+0x40>)
 800ae64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae68:	0800aec1 	.word	0x0800aec1
 800ae6c:	0800aed5 	.word	0x0800aed5
 800ae70:	0800ae51 	.word	0x0800ae51
 800ae74:	0800ae51 	.word	0x0800ae51
 800ae78:	0800ae51 	.word	0x0800ae51
 800ae7c:	0800ae51 	.word	0x0800ae51
 800ae80:	0800aed5 	.word	0x0800aed5
 800ae84:	0800ae51 	.word	0x0800ae51
 800ae88:	0800ae51 	.word	0x0800ae51
 800ae8c:	0800ae51 	.word	0x0800ae51
 800ae90:	0800ae51 	.word	0x0800ae51
 800ae94:	0800afd5 	.word	0x0800afd5
 800ae98:	0800aeff 	.word	0x0800aeff
 800ae9c:	0800af8f 	.word	0x0800af8f
 800aea0:	0800ae51 	.word	0x0800ae51
 800aea4:	0800ae51 	.word	0x0800ae51
 800aea8:	0800aff7 	.word	0x0800aff7
 800aeac:	0800ae51 	.word	0x0800ae51
 800aeb0:	0800aeff 	.word	0x0800aeff
 800aeb4:	0800ae51 	.word	0x0800ae51
 800aeb8:	0800ae51 	.word	0x0800ae51
 800aebc:	0800af97 	.word	0x0800af97
 800aec0:	6833      	ldr	r3, [r6, #0]
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6032      	str	r2, [r6, #0]
 800aec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aed0:	2301      	movs	r3, #1
 800aed2:	e09d      	b.n	800b010 <_printf_i+0x1e8>
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	6820      	ldr	r0, [r4, #0]
 800aed8:	1d19      	adds	r1, r3, #4
 800aeda:	6031      	str	r1, [r6, #0]
 800aedc:	0606      	lsls	r6, r0, #24
 800aede:	d501      	bpl.n	800aee4 <_printf_i+0xbc>
 800aee0:	681d      	ldr	r5, [r3, #0]
 800aee2:	e003      	b.n	800aeec <_printf_i+0xc4>
 800aee4:	0645      	lsls	r5, r0, #25
 800aee6:	d5fb      	bpl.n	800aee0 <_printf_i+0xb8>
 800aee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aeec:	2d00      	cmp	r5, #0
 800aeee:	da03      	bge.n	800aef8 <_printf_i+0xd0>
 800aef0:	232d      	movs	r3, #45	@ 0x2d
 800aef2:	426d      	negs	r5, r5
 800aef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aef8:	4859      	ldr	r0, [pc, #356]	@ (800b060 <_printf_i+0x238>)
 800aefa:	230a      	movs	r3, #10
 800aefc:	e011      	b.n	800af22 <_printf_i+0xfa>
 800aefe:	6821      	ldr	r1, [r4, #0]
 800af00:	6833      	ldr	r3, [r6, #0]
 800af02:	0608      	lsls	r0, r1, #24
 800af04:	f853 5b04 	ldr.w	r5, [r3], #4
 800af08:	d402      	bmi.n	800af10 <_printf_i+0xe8>
 800af0a:	0649      	lsls	r1, r1, #25
 800af0c:	bf48      	it	mi
 800af0e:	b2ad      	uxthmi	r5, r5
 800af10:	2f6f      	cmp	r7, #111	@ 0x6f
 800af12:	4853      	ldr	r0, [pc, #332]	@ (800b060 <_printf_i+0x238>)
 800af14:	6033      	str	r3, [r6, #0]
 800af16:	bf14      	ite	ne
 800af18:	230a      	movne	r3, #10
 800af1a:	2308      	moveq	r3, #8
 800af1c:	2100      	movs	r1, #0
 800af1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af22:	6866      	ldr	r6, [r4, #4]
 800af24:	60a6      	str	r6, [r4, #8]
 800af26:	2e00      	cmp	r6, #0
 800af28:	bfa2      	ittt	ge
 800af2a:	6821      	ldrge	r1, [r4, #0]
 800af2c:	f021 0104 	bicge.w	r1, r1, #4
 800af30:	6021      	strge	r1, [r4, #0]
 800af32:	b90d      	cbnz	r5, 800af38 <_printf_i+0x110>
 800af34:	2e00      	cmp	r6, #0
 800af36:	d04b      	beq.n	800afd0 <_printf_i+0x1a8>
 800af38:	4616      	mov	r6, r2
 800af3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800af3e:	fb03 5711 	mls	r7, r3, r1, r5
 800af42:	5dc7      	ldrb	r7, [r0, r7]
 800af44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af48:	462f      	mov	r7, r5
 800af4a:	42bb      	cmp	r3, r7
 800af4c:	460d      	mov	r5, r1
 800af4e:	d9f4      	bls.n	800af3a <_printf_i+0x112>
 800af50:	2b08      	cmp	r3, #8
 800af52:	d10b      	bne.n	800af6c <_printf_i+0x144>
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	07df      	lsls	r7, r3, #31
 800af58:	d508      	bpl.n	800af6c <_printf_i+0x144>
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	6861      	ldr	r1, [r4, #4]
 800af5e:	4299      	cmp	r1, r3
 800af60:	bfde      	ittt	le
 800af62:	2330      	movle	r3, #48	@ 0x30
 800af64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af6c:	1b92      	subs	r2, r2, r6
 800af6e:	6122      	str	r2, [r4, #16]
 800af70:	f8cd a000 	str.w	sl, [sp]
 800af74:	464b      	mov	r3, r9
 800af76:	aa03      	add	r2, sp, #12
 800af78:	4621      	mov	r1, r4
 800af7a:	4640      	mov	r0, r8
 800af7c:	f7ff fee6 	bl	800ad4c <_printf_common>
 800af80:	3001      	adds	r0, #1
 800af82:	d14a      	bne.n	800b01a <_printf_i+0x1f2>
 800af84:	f04f 30ff 	mov.w	r0, #4294967295
 800af88:	b004      	add	sp, #16
 800af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	f043 0320 	orr.w	r3, r3, #32
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	4833      	ldr	r0, [pc, #204]	@ (800b064 <_printf_i+0x23c>)
 800af98:	2778      	movs	r7, #120	@ 0x78
 800af9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	6831      	ldr	r1, [r6, #0]
 800afa2:	061f      	lsls	r7, r3, #24
 800afa4:	f851 5b04 	ldr.w	r5, [r1], #4
 800afa8:	d402      	bmi.n	800afb0 <_printf_i+0x188>
 800afaa:	065f      	lsls	r7, r3, #25
 800afac:	bf48      	it	mi
 800afae:	b2ad      	uxthmi	r5, r5
 800afb0:	6031      	str	r1, [r6, #0]
 800afb2:	07d9      	lsls	r1, r3, #31
 800afb4:	bf44      	itt	mi
 800afb6:	f043 0320 	orrmi.w	r3, r3, #32
 800afba:	6023      	strmi	r3, [r4, #0]
 800afbc:	b11d      	cbz	r5, 800afc6 <_printf_i+0x19e>
 800afbe:	2310      	movs	r3, #16
 800afc0:	e7ac      	b.n	800af1c <_printf_i+0xf4>
 800afc2:	4827      	ldr	r0, [pc, #156]	@ (800b060 <_printf_i+0x238>)
 800afc4:	e7e9      	b.n	800af9a <_printf_i+0x172>
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	f023 0320 	bic.w	r3, r3, #32
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	e7f6      	b.n	800afbe <_printf_i+0x196>
 800afd0:	4616      	mov	r6, r2
 800afd2:	e7bd      	b.n	800af50 <_printf_i+0x128>
 800afd4:	6833      	ldr	r3, [r6, #0]
 800afd6:	6825      	ldr	r5, [r4, #0]
 800afd8:	6961      	ldr	r1, [r4, #20]
 800afda:	1d18      	adds	r0, r3, #4
 800afdc:	6030      	str	r0, [r6, #0]
 800afde:	062e      	lsls	r6, r5, #24
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	d501      	bpl.n	800afe8 <_printf_i+0x1c0>
 800afe4:	6019      	str	r1, [r3, #0]
 800afe6:	e002      	b.n	800afee <_printf_i+0x1c6>
 800afe8:	0668      	lsls	r0, r5, #25
 800afea:	d5fb      	bpl.n	800afe4 <_printf_i+0x1bc>
 800afec:	8019      	strh	r1, [r3, #0]
 800afee:	2300      	movs	r3, #0
 800aff0:	6123      	str	r3, [r4, #16]
 800aff2:	4616      	mov	r6, r2
 800aff4:	e7bc      	b.n	800af70 <_printf_i+0x148>
 800aff6:	6833      	ldr	r3, [r6, #0]
 800aff8:	1d1a      	adds	r2, r3, #4
 800affa:	6032      	str	r2, [r6, #0]
 800affc:	681e      	ldr	r6, [r3, #0]
 800affe:	6862      	ldr	r2, [r4, #4]
 800b000:	2100      	movs	r1, #0
 800b002:	4630      	mov	r0, r6
 800b004:	f7f5 f96c 	bl	80002e0 <memchr>
 800b008:	b108      	cbz	r0, 800b00e <_printf_i+0x1e6>
 800b00a:	1b80      	subs	r0, r0, r6
 800b00c:	6060      	str	r0, [r4, #4]
 800b00e:	6863      	ldr	r3, [r4, #4]
 800b010:	6123      	str	r3, [r4, #16]
 800b012:	2300      	movs	r3, #0
 800b014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b018:	e7aa      	b.n	800af70 <_printf_i+0x148>
 800b01a:	6923      	ldr	r3, [r4, #16]
 800b01c:	4632      	mov	r2, r6
 800b01e:	4649      	mov	r1, r9
 800b020:	4640      	mov	r0, r8
 800b022:	47d0      	blx	sl
 800b024:	3001      	adds	r0, #1
 800b026:	d0ad      	beq.n	800af84 <_printf_i+0x15c>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	079b      	lsls	r3, r3, #30
 800b02c:	d413      	bmi.n	800b056 <_printf_i+0x22e>
 800b02e:	68e0      	ldr	r0, [r4, #12]
 800b030:	9b03      	ldr	r3, [sp, #12]
 800b032:	4298      	cmp	r0, r3
 800b034:	bfb8      	it	lt
 800b036:	4618      	movlt	r0, r3
 800b038:	e7a6      	b.n	800af88 <_printf_i+0x160>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4632      	mov	r2, r6
 800b03e:	4649      	mov	r1, r9
 800b040:	4640      	mov	r0, r8
 800b042:	47d0      	blx	sl
 800b044:	3001      	adds	r0, #1
 800b046:	d09d      	beq.n	800af84 <_printf_i+0x15c>
 800b048:	3501      	adds	r5, #1
 800b04a:	68e3      	ldr	r3, [r4, #12]
 800b04c:	9903      	ldr	r1, [sp, #12]
 800b04e:	1a5b      	subs	r3, r3, r1
 800b050:	42ab      	cmp	r3, r5
 800b052:	dcf2      	bgt.n	800b03a <_printf_i+0x212>
 800b054:	e7eb      	b.n	800b02e <_printf_i+0x206>
 800b056:	2500      	movs	r5, #0
 800b058:	f104 0619 	add.w	r6, r4, #25
 800b05c:	e7f5      	b.n	800b04a <_printf_i+0x222>
 800b05e:	bf00      	nop
 800b060:	0800eb52 	.word	0x0800eb52
 800b064:	0800eb63 	.word	0x0800eb63

0800b068 <std>:
 800b068:	2300      	movs	r3, #0
 800b06a:	b510      	push	{r4, lr}
 800b06c:	4604      	mov	r4, r0
 800b06e:	e9c0 3300 	strd	r3, r3, [r0]
 800b072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b076:	6083      	str	r3, [r0, #8]
 800b078:	8181      	strh	r1, [r0, #12]
 800b07a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b07c:	81c2      	strh	r2, [r0, #14]
 800b07e:	6183      	str	r3, [r0, #24]
 800b080:	4619      	mov	r1, r3
 800b082:	2208      	movs	r2, #8
 800b084:	305c      	adds	r0, #92	@ 0x5c
 800b086:	f000 f914 	bl	800b2b2 <memset>
 800b08a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c0 <std+0x58>)
 800b08c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b08e:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c4 <std+0x5c>)
 800b090:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b092:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c8 <std+0x60>)
 800b094:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b096:	4b0d      	ldr	r3, [pc, #52]	@ (800b0cc <std+0x64>)
 800b098:	6323      	str	r3, [r4, #48]	@ 0x30
 800b09a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d0 <std+0x68>)
 800b09c:	6224      	str	r4, [r4, #32]
 800b09e:	429c      	cmp	r4, r3
 800b0a0:	d006      	beq.n	800b0b0 <std+0x48>
 800b0a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b0a6:	4294      	cmp	r4, r2
 800b0a8:	d002      	beq.n	800b0b0 <std+0x48>
 800b0aa:	33d0      	adds	r3, #208	@ 0xd0
 800b0ac:	429c      	cmp	r4, r3
 800b0ae:	d105      	bne.n	800b0bc <std+0x54>
 800b0b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b8:	f000 b988 	b.w	800b3cc <__retarget_lock_init_recursive>
 800b0bc:	bd10      	pop	{r4, pc}
 800b0be:	bf00      	nop
 800b0c0:	0800b22d 	.word	0x0800b22d
 800b0c4:	0800b24f 	.word	0x0800b24f
 800b0c8:	0800b287 	.word	0x0800b287
 800b0cc:	0800b2ab 	.word	0x0800b2ab
 800b0d0:	2400524c 	.word	0x2400524c

0800b0d4 <stdio_exit_handler>:
 800b0d4:	4a02      	ldr	r2, [pc, #8]	@ (800b0e0 <stdio_exit_handler+0xc>)
 800b0d6:	4903      	ldr	r1, [pc, #12]	@ (800b0e4 <stdio_exit_handler+0x10>)
 800b0d8:	4803      	ldr	r0, [pc, #12]	@ (800b0e8 <stdio_exit_handler+0x14>)
 800b0da:	f000 b869 	b.w	800b1b0 <_fwalk_sglue>
 800b0de:	bf00      	nop
 800b0e0:	24000038 	.word	0x24000038
 800b0e4:	0800cafd 	.word	0x0800cafd
 800b0e8:	24000048 	.word	0x24000048

0800b0ec <cleanup_stdio>:
 800b0ec:	6841      	ldr	r1, [r0, #4]
 800b0ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b120 <cleanup_stdio+0x34>)
 800b0f0:	4299      	cmp	r1, r3
 800b0f2:	b510      	push	{r4, lr}
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	d001      	beq.n	800b0fc <cleanup_stdio+0x10>
 800b0f8:	f001 fd00 	bl	800cafc <_fflush_r>
 800b0fc:	68a1      	ldr	r1, [r4, #8]
 800b0fe:	4b09      	ldr	r3, [pc, #36]	@ (800b124 <cleanup_stdio+0x38>)
 800b100:	4299      	cmp	r1, r3
 800b102:	d002      	beq.n	800b10a <cleanup_stdio+0x1e>
 800b104:	4620      	mov	r0, r4
 800b106:	f001 fcf9 	bl	800cafc <_fflush_r>
 800b10a:	68e1      	ldr	r1, [r4, #12]
 800b10c:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <cleanup_stdio+0x3c>)
 800b10e:	4299      	cmp	r1, r3
 800b110:	d004      	beq.n	800b11c <cleanup_stdio+0x30>
 800b112:	4620      	mov	r0, r4
 800b114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b118:	f001 bcf0 	b.w	800cafc <_fflush_r>
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	bf00      	nop
 800b120:	2400524c 	.word	0x2400524c
 800b124:	240052b4 	.word	0x240052b4
 800b128:	2400531c 	.word	0x2400531c

0800b12c <global_stdio_init.part.0>:
 800b12c:	b510      	push	{r4, lr}
 800b12e:	4b0b      	ldr	r3, [pc, #44]	@ (800b15c <global_stdio_init.part.0+0x30>)
 800b130:	4c0b      	ldr	r4, [pc, #44]	@ (800b160 <global_stdio_init.part.0+0x34>)
 800b132:	4a0c      	ldr	r2, [pc, #48]	@ (800b164 <global_stdio_init.part.0+0x38>)
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	4620      	mov	r0, r4
 800b138:	2200      	movs	r2, #0
 800b13a:	2104      	movs	r1, #4
 800b13c:	f7ff ff94 	bl	800b068 <std>
 800b140:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b144:	2201      	movs	r2, #1
 800b146:	2109      	movs	r1, #9
 800b148:	f7ff ff8e 	bl	800b068 <std>
 800b14c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b150:	2202      	movs	r2, #2
 800b152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b156:	2112      	movs	r1, #18
 800b158:	f7ff bf86 	b.w	800b068 <std>
 800b15c:	24005384 	.word	0x24005384
 800b160:	2400524c 	.word	0x2400524c
 800b164:	0800b0d5 	.word	0x0800b0d5

0800b168 <__sfp_lock_acquire>:
 800b168:	4801      	ldr	r0, [pc, #4]	@ (800b170 <__sfp_lock_acquire+0x8>)
 800b16a:	f000 b930 	b.w	800b3ce <__retarget_lock_acquire_recursive>
 800b16e:	bf00      	nop
 800b170:	2400538d 	.word	0x2400538d

0800b174 <__sfp_lock_release>:
 800b174:	4801      	ldr	r0, [pc, #4]	@ (800b17c <__sfp_lock_release+0x8>)
 800b176:	f000 b92b 	b.w	800b3d0 <__retarget_lock_release_recursive>
 800b17a:	bf00      	nop
 800b17c:	2400538d 	.word	0x2400538d

0800b180 <__sinit>:
 800b180:	b510      	push	{r4, lr}
 800b182:	4604      	mov	r4, r0
 800b184:	f7ff fff0 	bl	800b168 <__sfp_lock_acquire>
 800b188:	6a23      	ldr	r3, [r4, #32]
 800b18a:	b11b      	cbz	r3, 800b194 <__sinit+0x14>
 800b18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b190:	f7ff bff0 	b.w	800b174 <__sfp_lock_release>
 800b194:	4b04      	ldr	r3, [pc, #16]	@ (800b1a8 <__sinit+0x28>)
 800b196:	6223      	str	r3, [r4, #32]
 800b198:	4b04      	ldr	r3, [pc, #16]	@ (800b1ac <__sinit+0x2c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1f5      	bne.n	800b18c <__sinit+0xc>
 800b1a0:	f7ff ffc4 	bl	800b12c <global_stdio_init.part.0>
 800b1a4:	e7f2      	b.n	800b18c <__sinit+0xc>
 800b1a6:	bf00      	nop
 800b1a8:	0800b0ed 	.word	0x0800b0ed
 800b1ac:	24005384 	.word	0x24005384

0800b1b0 <_fwalk_sglue>:
 800b1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	4688      	mov	r8, r1
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1c0:	f1b9 0901 	subs.w	r9, r9, #1
 800b1c4:	d505      	bpl.n	800b1d2 <_fwalk_sglue+0x22>
 800b1c6:	6824      	ldr	r4, [r4, #0]
 800b1c8:	2c00      	cmp	r4, #0
 800b1ca:	d1f7      	bne.n	800b1bc <_fwalk_sglue+0xc>
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d907      	bls.n	800b1e8 <_fwalk_sglue+0x38>
 800b1d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	d003      	beq.n	800b1e8 <_fwalk_sglue+0x38>
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	47c0      	blx	r8
 800b1e6:	4306      	orrs	r6, r0
 800b1e8:	3568      	adds	r5, #104	@ 0x68
 800b1ea:	e7e9      	b.n	800b1c0 <_fwalk_sglue+0x10>

0800b1ec <siprintf>:
 800b1ec:	b40e      	push	{r1, r2, r3}
 800b1ee:	b500      	push	{lr}
 800b1f0:	b09c      	sub	sp, #112	@ 0x70
 800b1f2:	ab1d      	add	r3, sp, #116	@ 0x74
 800b1f4:	9002      	str	r0, [sp, #8]
 800b1f6:	9006      	str	r0, [sp, #24]
 800b1f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b1fc:	4809      	ldr	r0, [pc, #36]	@ (800b224 <siprintf+0x38>)
 800b1fe:	9107      	str	r1, [sp, #28]
 800b200:	9104      	str	r1, [sp, #16]
 800b202:	4909      	ldr	r1, [pc, #36]	@ (800b228 <siprintf+0x3c>)
 800b204:	f853 2b04 	ldr.w	r2, [r3], #4
 800b208:	9105      	str	r1, [sp, #20]
 800b20a:	6800      	ldr	r0, [r0, #0]
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	a902      	add	r1, sp, #8
 800b210:	f001 faf4 	bl	800c7fc <_svfiprintf_r>
 800b214:	9b02      	ldr	r3, [sp, #8]
 800b216:	2200      	movs	r2, #0
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	b01c      	add	sp, #112	@ 0x70
 800b21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b220:	b003      	add	sp, #12
 800b222:	4770      	bx	lr
 800b224:	24000044 	.word	0x24000044
 800b228:	ffff0208 	.word	0xffff0208

0800b22c <__sread>:
 800b22c:	b510      	push	{r4, lr}
 800b22e:	460c      	mov	r4, r1
 800b230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b234:	f000 f86c 	bl	800b310 <_read_r>
 800b238:	2800      	cmp	r0, #0
 800b23a:	bfab      	itete	ge
 800b23c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b23e:	89a3      	ldrhlt	r3, [r4, #12]
 800b240:	181b      	addge	r3, r3, r0
 800b242:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b246:	bfac      	ite	ge
 800b248:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b24a:	81a3      	strhlt	r3, [r4, #12]
 800b24c:	bd10      	pop	{r4, pc}

0800b24e <__swrite>:
 800b24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b252:	461f      	mov	r7, r3
 800b254:	898b      	ldrh	r3, [r1, #12]
 800b256:	05db      	lsls	r3, r3, #23
 800b258:	4605      	mov	r5, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	4616      	mov	r6, r2
 800b25e:	d505      	bpl.n	800b26c <__swrite+0x1e>
 800b260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b264:	2302      	movs	r3, #2
 800b266:	2200      	movs	r2, #0
 800b268:	f000 f840 	bl	800b2ec <_lseek_r>
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b272:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b276:	81a3      	strh	r3, [r4, #12]
 800b278:	4632      	mov	r2, r6
 800b27a:	463b      	mov	r3, r7
 800b27c:	4628      	mov	r0, r5
 800b27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b282:	f000 b867 	b.w	800b354 <_write_r>

0800b286 <__sseek>:
 800b286:	b510      	push	{r4, lr}
 800b288:	460c      	mov	r4, r1
 800b28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28e:	f000 f82d 	bl	800b2ec <_lseek_r>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	89a3      	ldrh	r3, [r4, #12]
 800b296:	bf15      	itete	ne
 800b298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b29a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b29e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b2a2:	81a3      	strheq	r3, [r4, #12]
 800b2a4:	bf18      	it	ne
 800b2a6:	81a3      	strhne	r3, [r4, #12]
 800b2a8:	bd10      	pop	{r4, pc}

0800b2aa <__sclose>:
 800b2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ae:	f000 b80d 	b.w	800b2cc <_close_r>

0800b2b2 <memset>:
 800b2b2:	4402      	add	r2, r0
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d100      	bne.n	800b2bc <memset+0xa>
 800b2ba:	4770      	bx	lr
 800b2bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b2c0:	e7f9      	b.n	800b2b6 <memset+0x4>
	...

0800b2c4 <_localeconv_r>:
 800b2c4:	4800      	ldr	r0, [pc, #0]	@ (800b2c8 <_localeconv_r+0x4>)
 800b2c6:	4770      	bx	lr
 800b2c8:	24000184 	.word	0x24000184

0800b2cc <_close_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d06      	ldr	r5, [pc, #24]	@ (800b2e8 <_close_r+0x1c>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	602b      	str	r3, [r5, #0]
 800b2d8:	f7f6 f82e 	bl	8001338 <_close>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_close_r+0x1a>
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_close_r+0x1a>
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	24005388 	.word	0x24005388

0800b2ec <_lseek_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4d07      	ldr	r5, [pc, #28]	@ (800b30c <_lseek_r+0x20>)
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	4608      	mov	r0, r1
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	602a      	str	r2, [r5, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f7f6 f843 	bl	8001386 <_lseek>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_lseek_r+0x1e>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_lseek_r+0x1e>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	24005388 	.word	0x24005388

0800b310 <_read_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d07      	ldr	r5, [pc, #28]	@ (800b330 <_read_r+0x20>)
 800b314:	4604      	mov	r4, r0
 800b316:	4608      	mov	r0, r1
 800b318:	4611      	mov	r1, r2
 800b31a:	2200      	movs	r2, #0
 800b31c:	602a      	str	r2, [r5, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	f7f5 ffd1 	bl	80012c6 <_read>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_read_r+0x1e>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_read_r+0x1e>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	24005388 	.word	0x24005388

0800b334 <_sbrk_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4d06      	ldr	r5, [pc, #24]	@ (800b350 <_sbrk_r+0x1c>)
 800b338:	2300      	movs	r3, #0
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	602b      	str	r3, [r5, #0]
 800b340:	f7f6 f82e 	bl	80013a0 <_sbrk>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d102      	bne.n	800b34e <_sbrk_r+0x1a>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	b103      	cbz	r3, 800b34e <_sbrk_r+0x1a>
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
 800b350:	24005388 	.word	0x24005388

0800b354 <_write_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d07      	ldr	r5, [pc, #28]	@ (800b374 <_write_r+0x20>)
 800b358:	4604      	mov	r4, r0
 800b35a:	4608      	mov	r0, r1
 800b35c:	4611      	mov	r1, r2
 800b35e:	2200      	movs	r2, #0
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	f7f5 ffcc 	bl	8001300 <_write>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_write_r+0x1e>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_write_r+0x1e>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	24005388 	.word	0x24005388

0800b378 <__errno>:
 800b378:	4b01      	ldr	r3, [pc, #4]	@ (800b380 <__errno+0x8>)
 800b37a:	6818      	ldr	r0, [r3, #0]
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	24000044 	.word	0x24000044

0800b384 <__libc_init_array>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4d0d      	ldr	r5, [pc, #52]	@ (800b3bc <__libc_init_array+0x38>)
 800b388:	4c0d      	ldr	r4, [pc, #52]	@ (800b3c0 <__libc_init_array+0x3c>)
 800b38a:	1b64      	subs	r4, r4, r5
 800b38c:	10a4      	asrs	r4, r4, #2
 800b38e:	2600      	movs	r6, #0
 800b390:	42a6      	cmp	r6, r4
 800b392:	d109      	bne.n	800b3a8 <__libc_init_array+0x24>
 800b394:	4d0b      	ldr	r5, [pc, #44]	@ (800b3c4 <__libc_init_array+0x40>)
 800b396:	4c0c      	ldr	r4, [pc, #48]	@ (800b3c8 <__libc_init_array+0x44>)
 800b398:	f001 ff30 	bl	800d1fc <_init>
 800b39c:	1b64      	subs	r4, r4, r5
 800b39e:	10a4      	asrs	r4, r4, #2
 800b3a0:	2600      	movs	r6, #0
 800b3a2:	42a6      	cmp	r6, r4
 800b3a4:	d105      	bne.n	800b3b2 <__libc_init_array+0x2e>
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
 800b3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ac:	4798      	blx	r3
 800b3ae:	3601      	adds	r6, #1
 800b3b0:	e7ee      	b.n	800b390 <__libc_init_array+0xc>
 800b3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b6:	4798      	blx	r3
 800b3b8:	3601      	adds	r6, #1
 800b3ba:	e7f2      	b.n	800b3a2 <__libc_init_array+0x1e>
 800b3bc:	0800eeb8 	.word	0x0800eeb8
 800b3c0:	0800eeb8 	.word	0x0800eeb8
 800b3c4:	0800eeb8 	.word	0x0800eeb8
 800b3c8:	0800eebc 	.word	0x0800eebc

0800b3cc <__retarget_lock_init_recursive>:
 800b3cc:	4770      	bx	lr

0800b3ce <__retarget_lock_acquire_recursive>:
 800b3ce:	4770      	bx	lr

0800b3d0 <__retarget_lock_release_recursive>:
 800b3d0:	4770      	bx	lr

0800b3d2 <memcpy>:
 800b3d2:	440a      	add	r2, r1
 800b3d4:	4291      	cmp	r1, r2
 800b3d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3da:	d100      	bne.n	800b3de <memcpy+0xc>
 800b3dc:	4770      	bx	lr
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3e8:	4291      	cmp	r1, r2
 800b3ea:	d1f9      	bne.n	800b3e0 <memcpy+0xe>
 800b3ec:	bd10      	pop	{r4, pc}

0800b3ee <quorem>:
 800b3ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f2:	6903      	ldr	r3, [r0, #16]
 800b3f4:	690c      	ldr	r4, [r1, #16]
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	db7e      	blt.n	800b4fa <quorem+0x10c>
 800b3fc:	3c01      	subs	r4, #1
 800b3fe:	f101 0814 	add.w	r8, r1, #20
 800b402:	00a3      	lsls	r3, r4, #2
 800b404:	f100 0514 	add.w	r5, r0, #20
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b418:	3301      	adds	r3, #1
 800b41a:	429a      	cmp	r2, r3
 800b41c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b420:	fbb2 f6f3 	udiv	r6, r2, r3
 800b424:	d32e      	bcc.n	800b484 <quorem+0x96>
 800b426:	f04f 0a00 	mov.w	sl, #0
 800b42a:	46c4      	mov	ip, r8
 800b42c:	46ae      	mov	lr, r5
 800b42e:	46d3      	mov	fp, sl
 800b430:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b434:	b298      	uxth	r0, r3
 800b436:	fb06 a000 	mla	r0, r6, r0, sl
 800b43a:	0c02      	lsrs	r2, r0, #16
 800b43c:	0c1b      	lsrs	r3, r3, #16
 800b43e:	fb06 2303 	mla	r3, r6, r3, r2
 800b442:	f8de 2000 	ldr.w	r2, [lr]
 800b446:	b280      	uxth	r0, r0
 800b448:	b292      	uxth	r2, r2
 800b44a:	1a12      	subs	r2, r2, r0
 800b44c:	445a      	add	r2, fp
 800b44e:	f8de 0000 	ldr.w	r0, [lr]
 800b452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b456:	b29b      	uxth	r3, r3
 800b458:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b45c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b460:	b292      	uxth	r2, r2
 800b462:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b466:	45e1      	cmp	r9, ip
 800b468:	f84e 2b04 	str.w	r2, [lr], #4
 800b46c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b470:	d2de      	bcs.n	800b430 <quorem+0x42>
 800b472:	9b00      	ldr	r3, [sp, #0]
 800b474:	58eb      	ldr	r3, [r5, r3]
 800b476:	b92b      	cbnz	r3, 800b484 <quorem+0x96>
 800b478:	9b01      	ldr	r3, [sp, #4]
 800b47a:	3b04      	subs	r3, #4
 800b47c:	429d      	cmp	r5, r3
 800b47e:	461a      	mov	r2, r3
 800b480:	d32f      	bcc.n	800b4e2 <quorem+0xf4>
 800b482:	613c      	str	r4, [r7, #16]
 800b484:	4638      	mov	r0, r7
 800b486:	f001 f855 	bl	800c534 <__mcmp>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	db25      	blt.n	800b4da <quorem+0xec>
 800b48e:	4629      	mov	r1, r5
 800b490:	2000      	movs	r0, #0
 800b492:	f858 2b04 	ldr.w	r2, [r8], #4
 800b496:	f8d1 c000 	ldr.w	ip, [r1]
 800b49a:	fa1f fe82 	uxth.w	lr, r2
 800b49e:	fa1f f38c 	uxth.w	r3, ip
 800b4a2:	eba3 030e 	sub.w	r3, r3, lr
 800b4a6:	4403      	add	r3, r0
 800b4a8:	0c12      	lsrs	r2, r2, #16
 800b4aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b4ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4b8:	45c1      	cmp	r9, r8
 800b4ba:	f841 3b04 	str.w	r3, [r1], #4
 800b4be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b4c2:	d2e6      	bcs.n	800b492 <quorem+0xa4>
 800b4c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4cc:	b922      	cbnz	r2, 800b4d8 <quorem+0xea>
 800b4ce:	3b04      	subs	r3, #4
 800b4d0:	429d      	cmp	r5, r3
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	d30b      	bcc.n	800b4ee <quorem+0x100>
 800b4d6:	613c      	str	r4, [r7, #16]
 800b4d8:	3601      	adds	r6, #1
 800b4da:	4630      	mov	r0, r6
 800b4dc:	b003      	add	sp, #12
 800b4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e2:	6812      	ldr	r2, [r2, #0]
 800b4e4:	3b04      	subs	r3, #4
 800b4e6:	2a00      	cmp	r2, #0
 800b4e8:	d1cb      	bne.n	800b482 <quorem+0x94>
 800b4ea:	3c01      	subs	r4, #1
 800b4ec:	e7c6      	b.n	800b47c <quorem+0x8e>
 800b4ee:	6812      	ldr	r2, [r2, #0]
 800b4f0:	3b04      	subs	r3, #4
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	d1ef      	bne.n	800b4d6 <quorem+0xe8>
 800b4f6:	3c01      	subs	r4, #1
 800b4f8:	e7ea      	b.n	800b4d0 <quorem+0xe2>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	e7ee      	b.n	800b4dc <quorem+0xee>
	...

0800b500 <_dtoa_r>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	ed2d 8b02 	vpush	{d8}
 800b508:	69c7      	ldr	r7, [r0, #28]
 800b50a:	b091      	sub	sp, #68	@ 0x44
 800b50c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b510:	ec55 4b10 	vmov	r4, r5, d0
 800b514:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b516:	9107      	str	r1, [sp, #28]
 800b518:	4681      	mov	r9, r0
 800b51a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b51c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b51e:	b97f      	cbnz	r7, 800b540 <_dtoa_r+0x40>
 800b520:	2010      	movs	r0, #16
 800b522:	f7ff f8b3 	bl	800a68c <malloc>
 800b526:	4602      	mov	r2, r0
 800b528:	f8c9 001c 	str.w	r0, [r9, #28]
 800b52c:	b920      	cbnz	r0, 800b538 <_dtoa_r+0x38>
 800b52e:	4ba0      	ldr	r3, [pc, #640]	@ (800b7b0 <_dtoa_r+0x2b0>)
 800b530:	21ef      	movs	r1, #239	@ 0xef
 800b532:	48a0      	ldr	r0, [pc, #640]	@ (800b7b4 <_dtoa_r+0x2b4>)
 800b534:	f001 fb24 	bl	800cb80 <__assert_func>
 800b538:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b53c:	6007      	str	r7, [r0, #0]
 800b53e:	60c7      	str	r7, [r0, #12]
 800b540:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b544:	6819      	ldr	r1, [r3, #0]
 800b546:	b159      	cbz	r1, 800b560 <_dtoa_r+0x60>
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	604a      	str	r2, [r1, #4]
 800b54c:	2301      	movs	r3, #1
 800b54e:	4093      	lsls	r3, r2
 800b550:	608b      	str	r3, [r1, #8]
 800b552:	4648      	mov	r0, r9
 800b554:	f000 fdb4 	bl	800c0c0 <_Bfree>
 800b558:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b55c:	2200      	movs	r2, #0
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	1e2b      	subs	r3, r5, #0
 800b562:	bfbb      	ittet	lt
 800b564:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b568:	9303      	strlt	r3, [sp, #12]
 800b56a:	2300      	movge	r3, #0
 800b56c:	2201      	movlt	r2, #1
 800b56e:	bfac      	ite	ge
 800b570:	6033      	strge	r3, [r6, #0]
 800b572:	6032      	strlt	r2, [r6, #0]
 800b574:	4b90      	ldr	r3, [pc, #576]	@ (800b7b8 <_dtoa_r+0x2b8>)
 800b576:	9e03      	ldr	r6, [sp, #12]
 800b578:	43b3      	bics	r3, r6
 800b57a:	d110      	bne.n	800b59e <_dtoa_r+0x9e>
 800b57c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b57e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b588:	4323      	orrs	r3, r4
 800b58a:	f000 84de 	beq.w	800bf4a <_dtoa_r+0xa4a>
 800b58e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b590:	4f8a      	ldr	r7, [pc, #552]	@ (800b7bc <_dtoa_r+0x2bc>)
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 84e0 	beq.w	800bf58 <_dtoa_r+0xa58>
 800b598:	1cfb      	adds	r3, r7, #3
 800b59a:	f000 bcdb 	b.w	800bf54 <_dtoa_r+0xa54>
 800b59e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b5a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5aa:	d10a      	bne.n	800b5c2 <_dtoa_r+0xc2>
 800b5ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5b4:	b113      	cbz	r3, 800b5bc <_dtoa_r+0xbc>
 800b5b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b5b8:	4b81      	ldr	r3, [pc, #516]	@ (800b7c0 <_dtoa_r+0x2c0>)
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	4f81      	ldr	r7, [pc, #516]	@ (800b7c4 <_dtoa_r+0x2c4>)
 800b5be:	f000 bccb 	b.w	800bf58 <_dtoa_r+0xa58>
 800b5c2:	aa0e      	add	r2, sp, #56	@ 0x38
 800b5c4:	a90f      	add	r1, sp, #60	@ 0x3c
 800b5c6:	4648      	mov	r0, r9
 800b5c8:	eeb0 0b48 	vmov.f64	d0, d8
 800b5cc:	f001 f862 	bl	800c694 <__d2b>
 800b5d0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b5d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5d6:	9001      	str	r0, [sp, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d045      	beq.n	800b668 <_dtoa_r+0x168>
 800b5dc:	eeb0 7b48 	vmov.f64	d7, d8
 800b5e0:	ee18 1a90 	vmov	r1, s17
 800b5e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b5e8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b5ec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b5f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b5f4:	2500      	movs	r5, #0
 800b5f6:	ee07 1a90 	vmov	s15, r1
 800b5fa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b5fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b798 <_dtoa_r+0x298>
 800b602:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b606:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b7a0 <_dtoa_r+0x2a0>
 800b60a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b60e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b7a8 <_dtoa_r+0x2a8>
 800b612:	ee07 3a90 	vmov	s15, r3
 800b616:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b61a:	eeb0 7b46 	vmov.f64	d7, d6
 800b61e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b622:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b626:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62e:	ee16 8a90 	vmov	r8, s13
 800b632:	d508      	bpl.n	800b646 <_dtoa_r+0x146>
 800b634:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b638:	eeb4 6b47 	vcmp.f64	d6, d7
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	bf18      	it	ne
 800b642:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b646:	f1b8 0f16 	cmp.w	r8, #22
 800b64a:	d82b      	bhi.n	800b6a4 <_dtoa_r+0x1a4>
 800b64c:	495e      	ldr	r1, [pc, #376]	@ (800b7c8 <_dtoa_r+0x2c8>)
 800b64e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b652:	ed91 7b00 	vldr	d7, [r1]
 800b656:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65e:	d501      	bpl.n	800b664 <_dtoa_r+0x164>
 800b660:	f108 38ff 	add.w	r8, r8, #4294967295
 800b664:	2100      	movs	r1, #0
 800b666:	e01e      	b.n	800b6a6 <_dtoa_r+0x1a6>
 800b668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b66a:	4413      	add	r3, r2
 800b66c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b670:	2920      	cmp	r1, #32
 800b672:	bfc1      	itttt	gt
 800b674:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b678:	408e      	lslgt	r6, r1
 800b67a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b67e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b682:	bfd6      	itet	le
 800b684:	f1c1 0120 	rsble	r1, r1, #32
 800b688:	4331      	orrgt	r1, r6
 800b68a:	fa04 f101 	lslle.w	r1, r4, r1
 800b68e:	ee07 1a90 	vmov	s15, r1
 800b692:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b696:	3b01      	subs	r3, #1
 800b698:	ee17 1a90 	vmov	r1, s15
 800b69c:	2501      	movs	r5, #1
 800b69e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b6a2:	e7a8      	b.n	800b5f6 <_dtoa_r+0xf6>
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	1ad2      	subs	r2, r2, r3
 800b6a8:	1e53      	subs	r3, r2, #1
 800b6aa:	9306      	str	r3, [sp, #24]
 800b6ac:	bf45      	ittet	mi
 800b6ae:	f1c2 0301 	rsbmi	r3, r2, #1
 800b6b2:	9305      	strmi	r3, [sp, #20]
 800b6b4:	2300      	movpl	r3, #0
 800b6b6:	2300      	movmi	r3, #0
 800b6b8:	bf4c      	ite	mi
 800b6ba:	9306      	strmi	r3, [sp, #24]
 800b6bc:	9305      	strpl	r3, [sp, #20]
 800b6be:	f1b8 0f00 	cmp.w	r8, #0
 800b6c2:	910c      	str	r1, [sp, #48]	@ 0x30
 800b6c4:	db18      	blt.n	800b6f8 <_dtoa_r+0x1f8>
 800b6c6:	9b06      	ldr	r3, [sp, #24]
 800b6c8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b6cc:	4443      	add	r3, r8
 800b6ce:	9306      	str	r3, [sp, #24]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9a07      	ldr	r2, [sp, #28]
 800b6d4:	2a09      	cmp	r2, #9
 800b6d6:	d849      	bhi.n	800b76c <_dtoa_r+0x26c>
 800b6d8:	2a05      	cmp	r2, #5
 800b6da:	bfc4      	itt	gt
 800b6dc:	3a04      	subgt	r2, #4
 800b6de:	9207      	strgt	r2, [sp, #28]
 800b6e0:	9a07      	ldr	r2, [sp, #28]
 800b6e2:	f1a2 0202 	sub.w	r2, r2, #2
 800b6e6:	bfcc      	ite	gt
 800b6e8:	2400      	movgt	r4, #0
 800b6ea:	2401      	movle	r4, #1
 800b6ec:	2a03      	cmp	r2, #3
 800b6ee:	d848      	bhi.n	800b782 <_dtoa_r+0x282>
 800b6f0:	e8df f002 	tbb	[pc, r2]
 800b6f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800b6f8:	9b05      	ldr	r3, [sp, #20]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	eba3 0308 	sub.w	r3, r3, r8
 800b700:	9305      	str	r3, [sp, #20]
 800b702:	920a      	str	r2, [sp, #40]	@ 0x28
 800b704:	f1c8 0300 	rsb	r3, r8, #0
 800b708:	e7e3      	b.n	800b6d2 <_dtoa_r+0x1d2>
 800b70a:	2200      	movs	r2, #0
 800b70c:	9208      	str	r2, [sp, #32]
 800b70e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b710:	2a00      	cmp	r2, #0
 800b712:	dc39      	bgt.n	800b788 <_dtoa_r+0x288>
 800b714:	f04f 0b01 	mov.w	fp, #1
 800b718:	46da      	mov	sl, fp
 800b71a:	465a      	mov	r2, fp
 800b71c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b720:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b724:	2100      	movs	r1, #0
 800b726:	2004      	movs	r0, #4
 800b728:	f100 0614 	add.w	r6, r0, #20
 800b72c:	4296      	cmp	r6, r2
 800b72e:	d930      	bls.n	800b792 <_dtoa_r+0x292>
 800b730:	6079      	str	r1, [r7, #4]
 800b732:	4648      	mov	r0, r9
 800b734:	9304      	str	r3, [sp, #16]
 800b736:	f000 fc83 	bl	800c040 <_Balloc>
 800b73a:	9b04      	ldr	r3, [sp, #16]
 800b73c:	4607      	mov	r7, r0
 800b73e:	2800      	cmp	r0, #0
 800b740:	d146      	bne.n	800b7d0 <_dtoa_r+0x2d0>
 800b742:	4b22      	ldr	r3, [pc, #136]	@ (800b7cc <_dtoa_r+0x2cc>)
 800b744:	4602      	mov	r2, r0
 800b746:	f240 11af 	movw	r1, #431	@ 0x1af
 800b74a:	e6f2      	b.n	800b532 <_dtoa_r+0x32>
 800b74c:	2201      	movs	r2, #1
 800b74e:	e7dd      	b.n	800b70c <_dtoa_r+0x20c>
 800b750:	2200      	movs	r2, #0
 800b752:	9208      	str	r2, [sp, #32]
 800b754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b756:	eb08 0b02 	add.w	fp, r8, r2
 800b75a:	f10b 0a01 	add.w	sl, fp, #1
 800b75e:	4652      	mov	r2, sl
 800b760:	2a01      	cmp	r2, #1
 800b762:	bfb8      	it	lt
 800b764:	2201      	movlt	r2, #1
 800b766:	e7db      	b.n	800b720 <_dtoa_r+0x220>
 800b768:	2201      	movs	r2, #1
 800b76a:	e7f2      	b.n	800b752 <_dtoa_r+0x252>
 800b76c:	2401      	movs	r4, #1
 800b76e:	2200      	movs	r2, #0
 800b770:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b774:	f04f 3bff 	mov.w	fp, #4294967295
 800b778:	2100      	movs	r1, #0
 800b77a:	46da      	mov	sl, fp
 800b77c:	2212      	movs	r2, #18
 800b77e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b780:	e7ce      	b.n	800b720 <_dtoa_r+0x220>
 800b782:	2201      	movs	r2, #1
 800b784:	9208      	str	r2, [sp, #32]
 800b786:	e7f5      	b.n	800b774 <_dtoa_r+0x274>
 800b788:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b78c:	46da      	mov	sl, fp
 800b78e:	465a      	mov	r2, fp
 800b790:	e7c6      	b.n	800b720 <_dtoa_r+0x220>
 800b792:	3101      	adds	r1, #1
 800b794:	0040      	lsls	r0, r0, #1
 800b796:	e7c7      	b.n	800b728 <_dtoa_r+0x228>
 800b798:	636f4361 	.word	0x636f4361
 800b79c:	3fd287a7 	.word	0x3fd287a7
 800b7a0:	8b60c8b3 	.word	0x8b60c8b3
 800b7a4:	3fc68a28 	.word	0x3fc68a28
 800b7a8:	509f79fb 	.word	0x509f79fb
 800b7ac:	3fd34413 	.word	0x3fd34413
 800b7b0:	0800eb81 	.word	0x0800eb81
 800b7b4:	0800eb98 	.word	0x0800eb98
 800b7b8:	7ff00000 	.word	0x7ff00000
 800b7bc:	0800eb7d 	.word	0x0800eb7d
 800b7c0:	0800eb51 	.word	0x0800eb51
 800b7c4:	0800eb50 	.word	0x0800eb50
 800b7c8:	0800ec90 	.word	0x0800ec90
 800b7cc:	0800ebf0 	.word	0x0800ebf0
 800b7d0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b7d4:	f1ba 0f0e 	cmp.w	sl, #14
 800b7d8:	6010      	str	r0, [r2, #0]
 800b7da:	d86f      	bhi.n	800b8bc <_dtoa_r+0x3bc>
 800b7dc:	2c00      	cmp	r4, #0
 800b7de:	d06d      	beq.n	800b8bc <_dtoa_r+0x3bc>
 800b7e0:	f1b8 0f00 	cmp.w	r8, #0
 800b7e4:	f340 80c2 	ble.w	800b96c <_dtoa_r+0x46c>
 800b7e8:	4aca      	ldr	r2, [pc, #808]	@ (800bb14 <_dtoa_r+0x614>)
 800b7ea:	f008 010f 	and.w	r1, r8, #15
 800b7ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b7f2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b7f6:	ed92 7b00 	vldr	d7, [r2]
 800b7fa:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b7fe:	f000 80a9 	beq.w	800b954 <_dtoa_r+0x454>
 800b802:	4ac5      	ldr	r2, [pc, #788]	@ (800bb18 <_dtoa_r+0x618>)
 800b804:	ed92 6b08 	vldr	d6, [r2, #32]
 800b808:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b80c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b810:	f001 010f 	and.w	r1, r1, #15
 800b814:	2203      	movs	r2, #3
 800b816:	48c0      	ldr	r0, [pc, #768]	@ (800bb18 <_dtoa_r+0x618>)
 800b818:	2900      	cmp	r1, #0
 800b81a:	f040 809d 	bne.w	800b958 <_dtoa_r+0x458>
 800b81e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b822:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b826:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b82a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b82c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b830:	2900      	cmp	r1, #0
 800b832:	f000 80c1 	beq.w	800b9b8 <_dtoa_r+0x4b8>
 800b836:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b83a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b842:	f140 80b9 	bpl.w	800b9b8 <_dtoa_r+0x4b8>
 800b846:	f1ba 0f00 	cmp.w	sl, #0
 800b84a:	f000 80b5 	beq.w	800b9b8 <_dtoa_r+0x4b8>
 800b84e:	f1bb 0f00 	cmp.w	fp, #0
 800b852:	dd31      	ble.n	800b8b8 <_dtoa_r+0x3b8>
 800b854:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b85c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b860:	f108 31ff 	add.w	r1, r8, #4294967295
 800b864:	9104      	str	r1, [sp, #16]
 800b866:	3201      	adds	r2, #1
 800b868:	465c      	mov	r4, fp
 800b86a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b86e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b872:	ee07 2a90 	vmov	s15, r2
 800b876:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b87a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b87e:	ee15 2a90 	vmov	r2, s11
 800b882:	ec51 0b15 	vmov	r0, r1, d5
 800b886:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b88a:	2c00      	cmp	r4, #0
 800b88c:	f040 8098 	bne.w	800b9c0 <_dtoa_r+0x4c0>
 800b890:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b894:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b898:	ec41 0b17 	vmov	d7, r0, r1
 800b89c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a4:	f300 8261 	bgt.w	800bd6a <_dtoa_r+0x86a>
 800b8a8:	eeb1 7b47 	vneg.f64	d7, d7
 800b8ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b4:	f100 80f5 	bmi.w	800baa2 <_dtoa_r+0x5a2>
 800b8b8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b8bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b8be:	2a00      	cmp	r2, #0
 800b8c0:	f2c0 812c 	blt.w	800bb1c <_dtoa_r+0x61c>
 800b8c4:	f1b8 0f0e 	cmp.w	r8, #14
 800b8c8:	f300 8128 	bgt.w	800bb1c <_dtoa_r+0x61c>
 800b8cc:	4b91      	ldr	r3, [pc, #580]	@ (800bb14 <_dtoa_r+0x614>)
 800b8ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b8d2:	ed93 6b00 	vldr	d6, [r3]
 800b8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	da03      	bge.n	800b8e4 <_dtoa_r+0x3e4>
 800b8dc:	f1ba 0f00 	cmp.w	sl, #0
 800b8e0:	f340 80d2 	ble.w	800ba88 <_dtoa_r+0x588>
 800b8e4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b8e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8ec:	463e      	mov	r6, r7
 800b8ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b8f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b8f6:	ee15 3a10 	vmov	r3, s10
 800b8fa:	3330      	adds	r3, #48	@ 0x30
 800b8fc:	f806 3b01 	strb.w	r3, [r6], #1
 800b900:	1bf3      	subs	r3, r6, r7
 800b902:	459a      	cmp	sl, r3
 800b904:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b908:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b90c:	f040 80f8 	bne.w	800bb00 <_dtoa_r+0x600>
 800b910:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b914:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91c:	f300 80dd 	bgt.w	800bada <_dtoa_r+0x5da>
 800b920:	eeb4 7b46 	vcmp.f64	d7, d6
 800b924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b928:	d104      	bne.n	800b934 <_dtoa_r+0x434>
 800b92a:	ee15 3a10 	vmov	r3, s10
 800b92e:	07db      	lsls	r3, r3, #31
 800b930:	f100 80d3 	bmi.w	800bada <_dtoa_r+0x5da>
 800b934:	9901      	ldr	r1, [sp, #4]
 800b936:	4648      	mov	r0, r9
 800b938:	f000 fbc2 	bl	800c0c0 <_Bfree>
 800b93c:	2300      	movs	r3, #0
 800b93e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b940:	7033      	strb	r3, [r6, #0]
 800b942:	f108 0301 	add.w	r3, r8, #1
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f000 8304 	beq.w	800bf58 <_dtoa_r+0xa58>
 800b950:	601e      	str	r6, [r3, #0]
 800b952:	e301      	b.n	800bf58 <_dtoa_r+0xa58>
 800b954:	2202      	movs	r2, #2
 800b956:	e75e      	b.n	800b816 <_dtoa_r+0x316>
 800b958:	07cc      	lsls	r4, r1, #31
 800b95a:	d504      	bpl.n	800b966 <_dtoa_r+0x466>
 800b95c:	ed90 6b00 	vldr	d6, [r0]
 800b960:	3201      	adds	r2, #1
 800b962:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b966:	1049      	asrs	r1, r1, #1
 800b968:	3008      	adds	r0, #8
 800b96a:	e755      	b.n	800b818 <_dtoa_r+0x318>
 800b96c:	d022      	beq.n	800b9b4 <_dtoa_r+0x4b4>
 800b96e:	f1c8 0100 	rsb	r1, r8, #0
 800b972:	4a68      	ldr	r2, [pc, #416]	@ (800bb14 <_dtoa_r+0x614>)
 800b974:	f001 000f 	and.w	r0, r1, #15
 800b978:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b97c:	ed92 7b00 	vldr	d7, [r2]
 800b980:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b984:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b988:	4863      	ldr	r0, [pc, #396]	@ (800bb18 <_dtoa_r+0x618>)
 800b98a:	1109      	asrs	r1, r1, #4
 800b98c:	2400      	movs	r4, #0
 800b98e:	2202      	movs	r2, #2
 800b990:	b929      	cbnz	r1, 800b99e <_dtoa_r+0x49e>
 800b992:	2c00      	cmp	r4, #0
 800b994:	f43f af49 	beq.w	800b82a <_dtoa_r+0x32a>
 800b998:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b99c:	e745      	b.n	800b82a <_dtoa_r+0x32a>
 800b99e:	07ce      	lsls	r6, r1, #31
 800b9a0:	d505      	bpl.n	800b9ae <_dtoa_r+0x4ae>
 800b9a2:	ed90 6b00 	vldr	d6, [r0]
 800b9a6:	3201      	adds	r2, #1
 800b9a8:	2401      	movs	r4, #1
 800b9aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9ae:	1049      	asrs	r1, r1, #1
 800b9b0:	3008      	adds	r0, #8
 800b9b2:	e7ed      	b.n	800b990 <_dtoa_r+0x490>
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	e738      	b.n	800b82a <_dtoa_r+0x32a>
 800b9b8:	f8cd 8010 	str.w	r8, [sp, #16]
 800b9bc:	4654      	mov	r4, sl
 800b9be:	e754      	b.n	800b86a <_dtoa_r+0x36a>
 800b9c0:	4a54      	ldr	r2, [pc, #336]	@ (800bb14 <_dtoa_r+0x614>)
 800b9c2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b9c6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b9ca:	9a08      	ldr	r2, [sp, #32]
 800b9cc:	ec41 0b17 	vmov	d7, r0, r1
 800b9d0:	443c      	add	r4, r7
 800b9d2:	b34a      	cbz	r2, 800ba28 <_dtoa_r+0x528>
 800b9d4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b9d8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b9dc:	463e      	mov	r6, r7
 800b9de:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b9e2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b9e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b9ea:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b9ee:	ee14 2a90 	vmov	r2, s9
 800b9f2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b9f6:	3230      	adds	r2, #48	@ 0x30
 800b9f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b9fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba04:	f806 2b01 	strb.w	r2, [r6], #1
 800ba08:	d438      	bmi.n	800ba7c <_dtoa_r+0x57c>
 800ba0a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ba0e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ba12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba16:	d462      	bmi.n	800bade <_dtoa_r+0x5de>
 800ba18:	42a6      	cmp	r6, r4
 800ba1a:	f43f af4d 	beq.w	800b8b8 <_dtoa_r+0x3b8>
 800ba1e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ba22:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ba26:	e7e0      	b.n	800b9ea <_dtoa_r+0x4ea>
 800ba28:	4621      	mov	r1, r4
 800ba2a:	463e      	mov	r6, r7
 800ba2c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ba30:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ba34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ba38:	ee14 2a90 	vmov	r2, s9
 800ba3c:	3230      	adds	r2, #48	@ 0x30
 800ba3e:	f806 2b01 	strb.w	r2, [r6], #1
 800ba42:	42a6      	cmp	r6, r4
 800ba44:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ba48:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ba4c:	d119      	bne.n	800ba82 <_dtoa_r+0x582>
 800ba4e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ba52:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ba56:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ba5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5e:	dc3e      	bgt.n	800bade <_dtoa_r+0x5de>
 800ba60:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ba64:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ba68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6c:	f57f af24 	bpl.w	800b8b8 <_dtoa_r+0x3b8>
 800ba70:	460e      	mov	r6, r1
 800ba72:	3901      	subs	r1, #1
 800ba74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba78:	2b30      	cmp	r3, #48	@ 0x30
 800ba7a:	d0f9      	beq.n	800ba70 <_dtoa_r+0x570>
 800ba7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba80:	e758      	b.n	800b934 <_dtoa_r+0x434>
 800ba82:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ba86:	e7d5      	b.n	800ba34 <_dtoa_r+0x534>
 800ba88:	d10b      	bne.n	800baa2 <_dtoa_r+0x5a2>
 800ba8a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ba8e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ba92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9e:	f2c0 8161 	blt.w	800bd64 <_dtoa_r+0x864>
 800baa2:	2400      	movs	r4, #0
 800baa4:	4625      	mov	r5, r4
 800baa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa8:	43db      	mvns	r3, r3
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	463e      	mov	r6, r7
 800baae:	f04f 0800 	mov.w	r8, #0
 800bab2:	4621      	mov	r1, r4
 800bab4:	4648      	mov	r0, r9
 800bab6:	f000 fb03 	bl	800c0c0 <_Bfree>
 800baba:	2d00      	cmp	r5, #0
 800babc:	d0de      	beq.n	800ba7c <_dtoa_r+0x57c>
 800babe:	f1b8 0f00 	cmp.w	r8, #0
 800bac2:	d005      	beq.n	800bad0 <_dtoa_r+0x5d0>
 800bac4:	45a8      	cmp	r8, r5
 800bac6:	d003      	beq.n	800bad0 <_dtoa_r+0x5d0>
 800bac8:	4641      	mov	r1, r8
 800baca:	4648      	mov	r0, r9
 800bacc:	f000 faf8 	bl	800c0c0 <_Bfree>
 800bad0:	4629      	mov	r1, r5
 800bad2:	4648      	mov	r0, r9
 800bad4:	f000 faf4 	bl	800c0c0 <_Bfree>
 800bad8:	e7d0      	b.n	800ba7c <_dtoa_r+0x57c>
 800bada:	f8cd 8010 	str.w	r8, [sp, #16]
 800bade:	4633      	mov	r3, r6
 800bae0:	461e      	mov	r6, r3
 800bae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bae6:	2a39      	cmp	r2, #57	@ 0x39
 800bae8:	d106      	bne.n	800baf8 <_dtoa_r+0x5f8>
 800baea:	429f      	cmp	r7, r3
 800baec:	d1f8      	bne.n	800bae0 <_dtoa_r+0x5e0>
 800baee:	9a04      	ldr	r2, [sp, #16]
 800baf0:	3201      	adds	r2, #1
 800baf2:	9204      	str	r2, [sp, #16]
 800baf4:	2230      	movs	r2, #48	@ 0x30
 800baf6:	703a      	strb	r2, [r7, #0]
 800baf8:	781a      	ldrb	r2, [r3, #0]
 800bafa:	3201      	adds	r2, #1
 800bafc:	701a      	strb	r2, [r3, #0]
 800bafe:	e7bd      	b.n	800ba7c <_dtoa_r+0x57c>
 800bb00:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bb04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0c:	f47f aeef 	bne.w	800b8ee <_dtoa_r+0x3ee>
 800bb10:	e710      	b.n	800b934 <_dtoa_r+0x434>
 800bb12:	bf00      	nop
 800bb14:	0800ec90 	.word	0x0800ec90
 800bb18:	0800ec68 	.word	0x0800ec68
 800bb1c:	9908      	ldr	r1, [sp, #32]
 800bb1e:	2900      	cmp	r1, #0
 800bb20:	f000 80e3 	beq.w	800bcea <_dtoa_r+0x7ea>
 800bb24:	9907      	ldr	r1, [sp, #28]
 800bb26:	2901      	cmp	r1, #1
 800bb28:	f300 80c8 	bgt.w	800bcbc <_dtoa_r+0x7bc>
 800bb2c:	2d00      	cmp	r5, #0
 800bb2e:	f000 80c1 	beq.w	800bcb4 <_dtoa_r+0x7b4>
 800bb32:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bb36:	9e05      	ldr	r6, [sp, #20]
 800bb38:	461c      	mov	r4, r3
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	9b05      	ldr	r3, [sp, #20]
 800bb3e:	4413      	add	r3, r2
 800bb40:	9305      	str	r3, [sp, #20]
 800bb42:	9b06      	ldr	r3, [sp, #24]
 800bb44:	2101      	movs	r1, #1
 800bb46:	4413      	add	r3, r2
 800bb48:	4648      	mov	r0, r9
 800bb4a:	9306      	str	r3, [sp, #24]
 800bb4c:	f000 fb6c 	bl	800c228 <__i2b>
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	4605      	mov	r5, r0
 800bb54:	b166      	cbz	r6, 800bb70 <_dtoa_r+0x670>
 800bb56:	9a06      	ldr	r2, [sp, #24]
 800bb58:	2a00      	cmp	r2, #0
 800bb5a:	dd09      	ble.n	800bb70 <_dtoa_r+0x670>
 800bb5c:	42b2      	cmp	r2, r6
 800bb5e:	9905      	ldr	r1, [sp, #20]
 800bb60:	bfa8      	it	ge
 800bb62:	4632      	movge	r2, r6
 800bb64:	1a89      	subs	r1, r1, r2
 800bb66:	9105      	str	r1, [sp, #20]
 800bb68:	9906      	ldr	r1, [sp, #24]
 800bb6a:	1ab6      	subs	r6, r6, r2
 800bb6c:	1a8a      	subs	r2, r1, r2
 800bb6e:	9206      	str	r2, [sp, #24]
 800bb70:	b1fb      	cbz	r3, 800bbb2 <_dtoa_r+0x6b2>
 800bb72:	9a08      	ldr	r2, [sp, #32]
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	f000 80bc 	beq.w	800bcf2 <_dtoa_r+0x7f2>
 800bb7a:	b19c      	cbz	r4, 800bba4 <_dtoa_r+0x6a4>
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4648      	mov	r0, r9
 800bb82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb84:	f000 fc10 	bl	800c3a8 <__pow5mult>
 800bb88:	9a01      	ldr	r2, [sp, #4]
 800bb8a:	4601      	mov	r1, r0
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	4648      	mov	r0, r9
 800bb90:	f000 fb60 	bl	800c254 <__multiply>
 800bb94:	9901      	ldr	r1, [sp, #4]
 800bb96:	9004      	str	r0, [sp, #16]
 800bb98:	4648      	mov	r0, r9
 800bb9a:	f000 fa91 	bl	800c0c0 <_Bfree>
 800bb9e:	9a04      	ldr	r2, [sp, #16]
 800bba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba2:	9201      	str	r2, [sp, #4]
 800bba4:	1b1a      	subs	r2, r3, r4
 800bba6:	d004      	beq.n	800bbb2 <_dtoa_r+0x6b2>
 800bba8:	9901      	ldr	r1, [sp, #4]
 800bbaa:	4648      	mov	r0, r9
 800bbac:	f000 fbfc 	bl	800c3a8 <__pow5mult>
 800bbb0:	9001      	str	r0, [sp, #4]
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	4648      	mov	r0, r9
 800bbb6:	f000 fb37 	bl	800c228 <__i2b>
 800bbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 81d0 	beq.w	800bf64 <_dtoa_r+0xa64>
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	4648      	mov	r0, r9
 800bbca:	f000 fbed 	bl	800c3a8 <__pow5mult>
 800bbce:	9b07      	ldr	r3, [sp, #28]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	f300 8095 	bgt.w	800bd02 <_dtoa_r+0x802>
 800bbd8:	9b02      	ldr	r3, [sp, #8]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f040 808b 	bne.w	800bcf6 <_dtoa_r+0x7f6>
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	f040 8087 	bne.w	800bcfa <_dtoa_r+0x7fa>
 800bbec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bbf0:	0d12      	lsrs	r2, r2, #20
 800bbf2:	0512      	lsls	r2, r2, #20
 800bbf4:	2a00      	cmp	r2, #0
 800bbf6:	f000 8082 	beq.w	800bcfe <_dtoa_r+0x7fe>
 800bbfa:	9b05      	ldr	r3, [sp, #20]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	9305      	str	r3, [sp, #20]
 800bc00:	9b06      	ldr	r3, [sp, #24]
 800bc02:	3301      	adds	r3, #1
 800bc04:	9306      	str	r3, [sp, #24]
 800bc06:	2301      	movs	r3, #1
 800bc08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 81af 	beq.w	800bf70 <_dtoa_r+0xa70>
 800bc12:	6922      	ldr	r2, [r4, #16]
 800bc14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bc18:	6910      	ldr	r0, [r2, #16]
 800bc1a:	f000 fab9 	bl	800c190 <__hi0bits>
 800bc1e:	f1c0 0020 	rsb	r0, r0, #32
 800bc22:	9b06      	ldr	r3, [sp, #24]
 800bc24:	4418      	add	r0, r3
 800bc26:	f010 001f 	ands.w	r0, r0, #31
 800bc2a:	d076      	beq.n	800bd1a <_dtoa_r+0x81a>
 800bc2c:	f1c0 0220 	rsb	r2, r0, #32
 800bc30:	2a04      	cmp	r2, #4
 800bc32:	dd69      	ble.n	800bd08 <_dtoa_r+0x808>
 800bc34:	9b05      	ldr	r3, [sp, #20]
 800bc36:	f1c0 001c 	rsb	r0, r0, #28
 800bc3a:	4403      	add	r3, r0
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	9b06      	ldr	r3, [sp, #24]
 800bc40:	4406      	add	r6, r0
 800bc42:	4403      	add	r3, r0
 800bc44:	9306      	str	r3, [sp, #24]
 800bc46:	9b05      	ldr	r3, [sp, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dd05      	ble.n	800bc58 <_dtoa_r+0x758>
 800bc4c:	9901      	ldr	r1, [sp, #4]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	4648      	mov	r0, r9
 800bc52:	f000 fc03 	bl	800c45c <__lshift>
 800bc56:	9001      	str	r0, [sp, #4]
 800bc58:	9b06      	ldr	r3, [sp, #24]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dd05      	ble.n	800bc6a <_dtoa_r+0x76a>
 800bc5e:	4621      	mov	r1, r4
 800bc60:	461a      	mov	r2, r3
 800bc62:	4648      	mov	r0, r9
 800bc64:	f000 fbfa 	bl	800c45c <__lshift>
 800bc68:	4604      	mov	r4, r0
 800bc6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d056      	beq.n	800bd1e <_dtoa_r+0x81e>
 800bc70:	9801      	ldr	r0, [sp, #4]
 800bc72:	4621      	mov	r1, r4
 800bc74:	f000 fc5e 	bl	800c534 <__mcmp>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	da50      	bge.n	800bd1e <_dtoa_r+0x81e>
 800bc7c:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc80:	9304      	str	r3, [sp, #16]
 800bc82:	9901      	ldr	r1, [sp, #4]
 800bc84:	2300      	movs	r3, #0
 800bc86:	220a      	movs	r2, #10
 800bc88:	4648      	mov	r0, r9
 800bc8a:	f000 fa3b 	bl	800c104 <__multadd>
 800bc8e:	9b08      	ldr	r3, [sp, #32]
 800bc90:	9001      	str	r0, [sp, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 816e 	beq.w	800bf74 <_dtoa_r+0xa74>
 800bc98:	4629      	mov	r1, r5
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	220a      	movs	r2, #10
 800bc9e:	4648      	mov	r0, r9
 800bca0:	f000 fa30 	bl	800c104 <__multadd>
 800bca4:	f1bb 0f00 	cmp.w	fp, #0
 800bca8:	4605      	mov	r5, r0
 800bcaa:	dc64      	bgt.n	800bd76 <_dtoa_r+0x876>
 800bcac:	9b07      	ldr	r3, [sp, #28]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	dc3e      	bgt.n	800bd30 <_dtoa_r+0x830>
 800bcb2:	e060      	b.n	800bd76 <_dtoa_r+0x876>
 800bcb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcb6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bcba:	e73c      	b.n	800bb36 <_dtoa_r+0x636>
 800bcbc:	f10a 34ff 	add.w	r4, sl, #4294967295
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	bfbf      	itttt	lt
 800bcc4:	1ae2      	sublt	r2, r4, r3
 800bcc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bcc8:	189b      	addlt	r3, r3, r2
 800bcca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800bccc:	bfae      	itee	ge
 800bcce:	1b1c      	subge	r4, r3, r4
 800bcd0:	4623      	movlt	r3, r4
 800bcd2:	2400      	movlt	r4, #0
 800bcd4:	f1ba 0f00 	cmp.w	sl, #0
 800bcd8:	bfb5      	itete	lt
 800bcda:	9a05      	ldrlt	r2, [sp, #20]
 800bcdc:	9e05      	ldrge	r6, [sp, #20]
 800bcde:	eba2 060a 	sublt.w	r6, r2, sl
 800bce2:	4652      	movge	r2, sl
 800bce4:	bfb8      	it	lt
 800bce6:	2200      	movlt	r2, #0
 800bce8:	e727      	b.n	800bb3a <_dtoa_r+0x63a>
 800bcea:	9e05      	ldr	r6, [sp, #20]
 800bcec:	9d08      	ldr	r5, [sp, #32]
 800bcee:	461c      	mov	r4, r3
 800bcf0:	e730      	b.n	800bb54 <_dtoa_r+0x654>
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	e758      	b.n	800bba8 <_dtoa_r+0x6a8>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e786      	b.n	800bc08 <_dtoa_r+0x708>
 800bcfa:	9b02      	ldr	r3, [sp, #8]
 800bcfc:	e784      	b.n	800bc08 <_dtoa_r+0x708>
 800bcfe:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bd00:	e783      	b.n	800bc0a <_dtoa_r+0x70a>
 800bd02:	2300      	movs	r3, #0
 800bd04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd06:	e784      	b.n	800bc12 <_dtoa_r+0x712>
 800bd08:	d09d      	beq.n	800bc46 <_dtoa_r+0x746>
 800bd0a:	9b05      	ldr	r3, [sp, #20]
 800bd0c:	321c      	adds	r2, #28
 800bd0e:	4413      	add	r3, r2
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	9b06      	ldr	r3, [sp, #24]
 800bd14:	4416      	add	r6, r2
 800bd16:	4413      	add	r3, r2
 800bd18:	e794      	b.n	800bc44 <_dtoa_r+0x744>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	e7f5      	b.n	800bd0a <_dtoa_r+0x80a>
 800bd1e:	f1ba 0f00 	cmp.w	sl, #0
 800bd22:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd26:	46d3      	mov	fp, sl
 800bd28:	dc21      	bgt.n	800bd6e <_dtoa_r+0x86e>
 800bd2a:	9b07      	ldr	r3, [sp, #28]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	dd1e      	ble.n	800bd6e <_dtoa_r+0x86e>
 800bd30:	f1bb 0f00 	cmp.w	fp, #0
 800bd34:	f47f aeb7 	bne.w	800baa6 <_dtoa_r+0x5a6>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	465b      	mov	r3, fp
 800bd3c:	2205      	movs	r2, #5
 800bd3e:	4648      	mov	r0, r9
 800bd40:	f000 f9e0 	bl	800c104 <__multadd>
 800bd44:	4601      	mov	r1, r0
 800bd46:	4604      	mov	r4, r0
 800bd48:	9801      	ldr	r0, [sp, #4]
 800bd4a:	f000 fbf3 	bl	800c534 <__mcmp>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	f77f aea9 	ble.w	800baa6 <_dtoa_r+0x5a6>
 800bd54:	463e      	mov	r6, r7
 800bd56:	2331      	movs	r3, #49	@ 0x31
 800bd58:	f806 3b01 	strb.w	r3, [r6], #1
 800bd5c:	9b04      	ldr	r3, [sp, #16]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	9304      	str	r3, [sp, #16]
 800bd62:	e6a4      	b.n	800baae <_dtoa_r+0x5ae>
 800bd64:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd68:	4654      	mov	r4, sl
 800bd6a:	4625      	mov	r5, r4
 800bd6c:	e7f2      	b.n	800bd54 <_dtoa_r+0x854>
 800bd6e:	9b08      	ldr	r3, [sp, #32]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 8103 	beq.w	800bf7c <_dtoa_r+0xa7c>
 800bd76:	2e00      	cmp	r6, #0
 800bd78:	dd05      	ble.n	800bd86 <_dtoa_r+0x886>
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	4648      	mov	r0, r9
 800bd80:	f000 fb6c 	bl	800c45c <__lshift>
 800bd84:	4605      	mov	r5, r0
 800bd86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d058      	beq.n	800be3e <_dtoa_r+0x93e>
 800bd8c:	6869      	ldr	r1, [r5, #4]
 800bd8e:	4648      	mov	r0, r9
 800bd90:	f000 f956 	bl	800c040 <_Balloc>
 800bd94:	4606      	mov	r6, r0
 800bd96:	b928      	cbnz	r0, 800bda4 <_dtoa_r+0x8a4>
 800bd98:	4b82      	ldr	r3, [pc, #520]	@ (800bfa4 <_dtoa_r+0xaa4>)
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bda0:	f7ff bbc7 	b.w	800b532 <_dtoa_r+0x32>
 800bda4:	692a      	ldr	r2, [r5, #16]
 800bda6:	3202      	adds	r2, #2
 800bda8:	0092      	lsls	r2, r2, #2
 800bdaa:	f105 010c 	add.w	r1, r5, #12
 800bdae:	300c      	adds	r0, #12
 800bdb0:	f7ff fb0f 	bl	800b3d2 <memcpy>
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4648      	mov	r0, r9
 800bdba:	f000 fb4f 	bl	800c45c <__lshift>
 800bdbe:	1c7b      	adds	r3, r7, #1
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	eb07 030b 	add.w	r3, r7, fp
 800bdc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdc8:	9b02      	ldr	r3, [sp, #8]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	46a8      	mov	r8, r5
 800bdd0:	9308      	str	r3, [sp, #32]
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	9801      	ldr	r0, [sp, #4]
 800bdd8:	4621      	mov	r1, r4
 800bdda:	f103 3bff 	add.w	fp, r3, #4294967295
 800bdde:	f7ff fb06 	bl	800b3ee <quorem>
 800bde2:	4641      	mov	r1, r8
 800bde4:	9002      	str	r0, [sp, #8]
 800bde6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bdea:	9801      	ldr	r0, [sp, #4]
 800bdec:	f000 fba2 	bl	800c534 <__mcmp>
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	9006      	str	r0, [sp, #24]
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	4648      	mov	r0, r9
 800bdf8:	f000 fbb8 	bl	800c56c <__mdiff>
 800bdfc:	68c2      	ldr	r2, [r0, #12]
 800bdfe:	4606      	mov	r6, r0
 800be00:	b9fa      	cbnz	r2, 800be42 <_dtoa_r+0x942>
 800be02:	4601      	mov	r1, r0
 800be04:	9801      	ldr	r0, [sp, #4]
 800be06:	f000 fb95 	bl	800c534 <__mcmp>
 800be0a:	4602      	mov	r2, r0
 800be0c:	4631      	mov	r1, r6
 800be0e:	4648      	mov	r0, r9
 800be10:	920a      	str	r2, [sp, #40]	@ 0x28
 800be12:	f000 f955 	bl	800c0c0 <_Bfree>
 800be16:	9b07      	ldr	r3, [sp, #28]
 800be18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be1a:	9e05      	ldr	r6, [sp, #20]
 800be1c:	ea43 0102 	orr.w	r1, r3, r2
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	4319      	orrs	r1, r3
 800be24:	d10f      	bne.n	800be46 <_dtoa_r+0x946>
 800be26:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800be2a:	d028      	beq.n	800be7e <_dtoa_r+0x97e>
 800be2c:	9b06      	ldr	r3, [sp, #24]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd02      	ble.n	800be38 <_dtoa_r+0x938>
 800be32:	9b02      	ldr	r3, [sp, #8]
 800be34:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800be38:	f88b a000 	strb.w	sl, [fp]
 800be3c:	e639      	b.n	800bab2 <_dtoa_r+0x5b2>
 800be3e:	4628      	mov	r0, r5
 800be40:	e7bd      	b.n	800bdbe <_dtoa_r+0x8be>
 800be42:	2201      	movs	r2, #1
 800be44:	e7e2      	b.n	800be0c <_dtoa_r+0x90c>
 800be46:	9b06      	ldr	r3, [sp, #24]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	db04      	blt.n	800be56 <_dtoa_r+0x956>
 800be4c:	9907      	ldr	r1, [sp, #28]
 800be4e:	430b      	orrs	r3, r1
 800be50:	9908      	ldr	r1, [sp, #32]
 800be52:	430b      	orrs	r3, r1
 800be54:	d120      	bne.n	800be98 <_dtoa_r+0x998>
 800be56:	2a00      	cmp	r2, #0
 800be58:	ddee      	ble.n	800be38 <_dtoa_r+0x938>
 800be5a:	9901      	ldr	r1, [sp, #4]
 800be5c:	2201      	movs	r2, #1
 800be5e:	4648      	mov	r0, r9
 800be60:	f000 fafc 	bl	800c45c <__lshift>
 800be64:	4621      	mov	r1, r4
 800be66:	9001      	str	r0, [sp, #4]
 800be68:	f000 fb64 	bl	800c534 <__mcmp>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	dc03      	bgt.n	800be78 <_dtoa_r+0x978>
 800be70:	d1e2      	bne.n	800be38 <_dtoa_r+0x938>
 800be72:	f01a 0f01 	tst.w	sl, #1
 800be76:	d0df      	beq.n	800be38 <_dtoa_r+0x938>
 800be78:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800be7c:	d1d9      	bne.n	800be32 <_dtoa_r+0x932>
 800be7e:	2339      	movs	r3, #57	@ 0x39
 800be80:	f88b 3000 	strb.w	r3, [fp]
 800be84:	4633      	mov	r3, r6
 800be86:	461e      	mov	r6, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be8e:	2a39      	cmp	r2, #57	@ 0x39
 800be90:	d053      	beq.n	800bf3a <_dtoa_r+0xa3a>
 800be92:	3201      	adds	r2, #1
 800be94:	701a      	strb	r2, [r3, #0]
 800be96:	e60c      	b.n	800bab2 <_dtoa_r+0x5b2>
 800be98:	2a00      	cmp	r2, #0
 800be9a:	dd07      	ble.n	800beac <_dtoa_r+0x9ac>
 800be9c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bea0:	d0ed      	beq.n	800be7e <_dtoa_r+0x97e>
 800bea2:	f10a 0301 	add.w	r3, sl, #1
 800bea6:	f88b 3000 	strb.w	r3, [fp]
 800beaa:	e602      	b.n	800bab2 <_dtoa_r+0x5b2>
 800beac:	9b05      	ldr	r3, [sp, #20]
 800beae:	9a05      	ldr	r2, [sp, #20]
 800beb0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800beb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d029      	beq.n	800bf0e <_dtoa_r+0xa0e>
 800beba:	9901      	ldr	r1, [sp, #4]
 800bebc:	2300      	movs	r3, #0
 800bebe:	220a      	movs	r2, #10
 800bec0:	4648      	mov	r0, r9
 800bec2:	f000 f91f 	bl	800c104 <__multadd>
 800bec6:	45a8      	cmp	r8, r5
 800bec8:	9001      	str	r0, [sp, #4]
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	f04f 020a 	mov.w	r2, #10
 800bed2:	4641      	mov	r1, r8
 800bed4:	4648      	mov	r0, r9
 800bed6:	d107      	bne.n	800bee8 <_dtoa_r+0x9e8>
 800bed8:	f000 f914 	bl	800c104 <__multadd>
 800bedc:	4680      	mov	r8, r0
 800bede:	4605      	mov	r5, r0
 800bee0:	9b05      	ldr	r3, [sp, #20]
 800bee2:	3301      	adds	r3, #1
 800bee4:	9305      	str	r3, [sp, #20]
 800bee6:	e775      	b.n	800bdd4 <_dtoa_r+0x8d4>
 800bee8:	f000 f90c 	bl	800c104 <__multadd>
 800beec:	4629      	mov	r1, r5
 800beee:	4680      	mov	r8, r0
 800bef0:	2300      	movs	r3, #0
 800bef2:	220a      	movs	r2, #10
 800bef4:	4648      	mov	r0, r9
 800bef6:	f000 f905 	bl	800c104 <__multadd>
 800befa:	4605      	mov	r5, r0
 800befc:	e7f0      	b.n	800bee0 <_dtoa_r+0x9e0>
 800befe:	f1bb 0f00 	cmp.w	fp, #0
 800bf02:	bfcc      	ite	gt
 800bf04:	465e      	movgt	r6, fp
 800bf06:	2601      	movle	r6, #1
 800bf08:	443e      	add	r6, r7
 800bf0a:	f04f 0800 	mov.w	r8, #0
 800bf0e:	9901      	ldr	r1, [sp, #4]
 800bf10:	2201      	movs	r2, #1
 800bf12:	4648      	mov	r0, r9
 800bf14:	f000 faa2 	bl	800c45c <__lshift>
 800bf18:	4621      	mov	r1, r4
 800bf1a:	9001      	str	r0, [sp, #4]
 800bf1c:	f000 fb0a 	bl	800c534 <__mcmp>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	dcaf      	bgt.n	800be84 <_dtoa_r+0x984>
 800bf24:	d102      	bne.n	800bf2c <_dtoa_r+0xa2c>
 800bf26:	f01a 0f01 	tst.w	sl, #1
 800bf2a:	d1ab      	bne.n	800be84 <_dtoa_r+0x984>
 800bf2c:	4633      	mov	r3, r6
 800bf2e:	461e      	mov	r6, r3
 800bf30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf34:	2a30      	cmp	r2, #48	@ 0x30
 800bf36:	d0fa      	beq.n	800bf2e <_dtoa_r+0xa2e>
 800bf38:	e5bb      	b.n	800bab2 <_dtoa_r+0x5b2>
 800bf3a:	429f      	cmp	r7, r3
 800bf3c:	d1a3      	bne.n	800be86 <_dtoa_r+0x986>
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	3301      	adds	r3, #1
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	2331      	movs	r3, #49	@ 0x31
 800bf46:	703b      	strb	r3, [r7, #0]
 800bf48:	e5b3      	b.n	800bab2 <_dtoa_r+0x5b2>
 800bf4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf4c:	4f16      	ldr	r7, [pc, #88]	@ (800bfa8 <_dtoa_r+0xaa8>)
 800bf4e:	b11b      	cbz	r3, 800bf58 <_dtoa_r+0xa58>
 800bf50:	f107 0308 	add.w	r3, r7, #8
 800bf54:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bf56:	6013      	str	r3, [r2, #0]
 800bf58:	4638      	mov	r0, r7
 800bf5a:	b011      	add	sp, #68	@ 0x44
 800bf5c:	ecbd 8b02 	vpop	{d8}
 800bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf64:	9b07      	ldr	r3, [sp, #28]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	f77f ae36 	ble.w	800bbd8 <_dtoa_r+0x6d8>
 800bf6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf70:	2001      	movs	r0, #1
 800bf72:	e656      	b.n	800bc22 <_dtoa_r+0x722>
 800bf74:	f1bb 0f00 	cmp.w	fp, #0
 800bf78:	f77f aed7 	ble.w	800bd2a <_dtoa_r+0x82a>
 800bf7c:	463e      	mov	r6, r7
 800bf7e:	9801      	ldr	r0, [sp, #4]
 800bf80:	4621      	mov	r1, r4
 800bf82:	f7ff fa34 	bl	800b3ee <quorem>
 800bf86:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bf8a:	f806 ab01 	strb.w	sl, [r6], #1
 800bf8e:	1bf2      	subs	r2, r6, r7
 800bf90:	4593      	cmp	fp, r2
 800bf92:	ddb4      	ble.n	800befe <_dtoa_r+0x9fe>
 800bf94:	9901      	ldr	r1, [sp, #4]
 800bf96:	2300      	movs	r3, #0
 800bf98:	220a      	movs	r2, #10
 800bf9a:	4648      	mov	r0, r9
 800bf9c:	f000 f8b2 	bl	800c104 <__multadd>
 800bfa0:	9001      	str	r0, [sp, #4]
 800bfa2:	e7ec      	b.n	800bf7e <_dtoa_r+0xa7e>
 800bfa4:	0800ebf0 	.word	0x0800ebf0
 800bfa8:	0800eb74 	.word	0x0800eb74

0800bfac <_free_r>:
 800bfac:	b538      	push	{r3, r4, r5, lr}
 800bfae:	4605      	mov	r5, r0
 800bfb0:	2900      	cmp	r1, #0
 800bfb2:	d041      	beq.n	800c038 <_free_r+0x8c>
 800bfb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfb8:	1f0c      	subs	r4, r1, #4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bfb8      	it	lt
 800bfbe:	18e4      	addlt	r4, r4, r3
 800bfc0:	f7fe fc0e 	bl	800a7e0 <__malloc_lock>
 800bfc4:	4a1d      	ldr	r2, [pc, #116]	@ (800c03c <_free_r+0x90>)
 800bfc6:	6813      	ldr	r3, [r2, #0]
 800bfc8:	b933      	cbnz	r3, 800bfd8 <_free_r+0x2c>
 800bfca:	6063      	str	r3, [r4, #4]
 800bfcc:	6014      	str	r4, [r2, #0]
 800bfce:	4628      	mov	r0, r5
 800bfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd4:	f7fe bc0a 	b.w	800a7ec <__malloc_unlock>
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	d908      	bls.n	800bfee <_free_r+0x42>
 800bfdc:	6820      	ldr	r0, [r4, #0]
 800bfde:	1821      	adds	r1, r4, r0
 800bfe0:	428b      	cmp	r3, r1
 800bfe2:	bf01      	itttt	eq
 800bfe4:	6819      	ldreq	r1, [r3, #0]
 800bfe6:	685b      	ldreq	r3, [r3, #4]
 800bfe8:	1809      	addeq	r1, r1, r0
 800bfea:	6021      	streq	r1, [r4, #0]
 800bfec:	e7ed      	b.n	800bfca <_free_r+0x1e>
 800bfee:	461a      	mov	r2, r3
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	b10b      	cbz	r3, 800bff8 <_free_r+0x4c>
 800bff4:	42a3      	cmp	r3, r4
 800bff6:	d9fa      	bls.n	800bfee <_free_r+0x42>
 800bff8:	6811      	ldr	r1, [r2, #0]
 800bffa:	1850      	adds	r0, r2, r1
 800bffc:	42a0      	cmp	r0, r4
 800bffe:	d10b      	bne.n	800c018 <_free_r+0x6c>
 800c000:	6820      	ldr	r0, [r4, #0]
 800c002:	4401      	add	r1, r0
 800c004:	1850      	adds	r0, r2, r1
 800c006:	4283      	cmp	r3, r0
 800c008:	6011      	str	r1, [r2, #0]
 800c00a:	d1e0      	bne.n	800bfce <_free_r+0x22>
 800c00c:	6818      	ldr	r0, [r3, #0]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	6053      	str	r3, [r2, #4]
 800c012:	4408      	add	r0, r1
 800c014:	6010      	str	r0, [r2, #0]
 800c016:	e7da      	b.n	800bfce <_free_r+0x22>
 800c018:	d902      	bls.n	800c020 <_free_r+0x74>
 800c01a:	230c      	movs	r3, #12
 800c01c:	602b      	str	r3, [r5, #0]
 800c01e:	e7d6      	b.n	800bfce <_free_r+0x22>
 800c020:	6820      	ldr	r0, [r4, #0]
 800c022:	1821      	adds	r1, r4, r0
 800c024:	428b      	cmp	r3, r1
 800c026:	bf04      	itt	eq
 800c028:	6819      	ldreq	r1, [r3, #0]
 800c02a:	685b      	ldreq	r3, [r3, #4]
 800c02c:	6063      	str	r3, [r4, #4]
 800c02e:	bf04      	itt	eq
 800c030:	1809      	addeq	r1, r1, r0
 800c032:	6021      	streq	r1, [r4, #0]
 800c034:	6054      	str	r4, [r2, #4]
 800c036:	e7ca      	b.n	800bfce <_free_r+0x22>
 800c038:	bd38      	pop	{r3, r4, r5, pc}
 800c03a:	bf00      	nop
 800c03c:	24005248 	.word	0x24005248

0800c040 <_Balloc>:
 800c040:	b570      	push	{r4, r5, r6, lr}
 800c042:	69c6      	ldr	r6, [r0, #28]
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	b976      	cbnz	r6, 800c068 <_Balloc+0x28>
 800c04a:	2010      	movs	r0, #16
 800c04c:	f7fe fb1e 	bl	800a68c <malloc>
 800c050:	4602      	mov	r2, r0
 800c052:	61e0      	str	r0, [r4, #28]
 800c054:	b920      	cbnz	r0, 800c060 <_Balloc+0x20>
 800c056:	4b18      	ldr	r3, [pc, #96]	@ (800c0b8 <_Balloc+0x78>)
 800c058:	4818      	ldr	r0, [pc, #96]	@ (800c0bc <_Balloc+0x7c>)
 800c05a:	216b      	movs	r1, #107	@ 0x6b
 800c05c:	f000 fd90 	bl	800cb80 <__assert_func>
 800c060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c064:	6006      	str	r6, [r0, #0]
 800c066:	60c6      	str	r6, [r0, #12]
 800c068:	69e6      	ldr	r6, [r4, #28]
 800c06a:	68f3      	ldr	r3, [r6, #12]
 800c06c:	b183      	cbz	r3, 800c090 <_Balloc+0x50>
 800c06e:	69e3      	ldr	r3, [r4, #28]
 800c070:	68db      	ldr	r3, [r3, #12]
 800c072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c076:	b9b8      	cbnz	r0, 800c0a8 <_Balloc+0x68>
 800c078:	2101      	movs	r1, #1
 800c07a:	fa01 f605 	lsl.w	r6, r1, r5
 800c07e:	1d72      	adds	r2, r6, #5
 800c080:	0092      	lsls	r2, r2, #2
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fd9a 	bl	800cbbc <_calloc_r>
 800c088:	b160      	cbz	r0, 800c0a4 <_Balloc+0x64>
 800c08a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c08e:	e00e      	b.n	800c0ae <_Balloc+0x6e>
 800c090:	2221      	movs	r2, #33	@ 0x21
 800c092:	2104      	movs	r1, #4
 800c094:	4620      	mov	r0, r4
 800c096:	f000 fd91 	bl	800cbbc <_calloc_r>
 800c09a:	69e3      	ldr	r3, [r4, #28]
 800c09c:	60f0      	str	r0, [r6, #12]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1e4      	bne.n	800c06e <_Balloc+0x2e>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	6802      	ldr	r2, [r0, #0]
 800c0aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0b4:	e7f7      	b.n	800c0a6 <_Balloc+0x66>
 800c0b6:	bf00      	nop
 800c0b8:	0800eb81 	.word	0x0800eb81
 800c0bc:	0800ec01 	.word	0x0800ec01

0800c0c0 <_Bfree>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	69c6      	ldr	r6, [r0, #28]
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	b976      	cbnz	r6, 800c0e8 <_Bfree+0x28>
 800c0ca:	2010      	movs	r0, #16
 800c0cc:	f7fe fade 	bl	800a68c <malloc>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	61e8      	str	r0, [r5, #28]
 800c0d4:	b920      	cbnz	r0, 800c0e0 <_Bfree+0x20>
 800c0d6:	4b09      	ldr	r3, [pc, #36]	@ (800c0fc <_Bfree+0x3c>)
 800c0d8:	4809      	ldr	r0, [pc, #36]	@ (800c100 <_Bfree+0x40>)
 800c0da:	218f      	movs	r1, #143	@ 0x8f
 800c0dc:	f000 fd50 	bl	800cb80 <__assert_func>
 800c0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0e4:	6006      	str	r6, [r0, #0]
 800c0e6:	60c6      	str	r6, [r0, #12]
 800c0e8:	b13c      	cbz	r4, 800c0fa <_Bfree+0x3a>
 800c0ea:	69eb      	ldr	r3, [r5, #28]
 800c0ec:	6862      	ldr	r2, [r4, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0f4:	6021      	str	r1, [r4, #0]
 800c0f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
 800c0fc:	0800eb81 	.word	0x0800eb81
 800c100:	0800ec01 	.word	0x0800ec01

0800c104 <__multadd>:
 800c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c108:	690d      	ldr	r5, [r1, #16]
 800c10a:	4607      	mov	r7, r0
 800c10c:	460c      	mov	r4, r1
 800c10e:	461e      	mov	r6, r3
 800c110:	f101 0c14 	add.w	ip, r1, #20
 800c114:	2000      	movs	r0, #0
 800c116:	f8dc 3000 	ldr.w	r3, [ip]
 800c11a:	b299      	uxth	r1, r3
 800c11c:	fb02 6101 	mla	r1, r2, r1, r6
 800c120:	0c1e      	lsrs	r6, r3, #16
 800c122:	0c0b      	lsrs	r3, r1, #16
 800c124:	fb02 3306 	mla	r3, r2, r6, r3
 800c128:	b289      	uxth	r1, r1
 800c12a:	3001      	adds	r0, #1
 800c12c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c130:	4285      	cmp	r5, r0
 800c132:	f84c 1b04 	str.w	r1, [ip], #4
 800c136:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c13a:	dcec      	bgt.n	800c116 <__multadd+0x12>
 800c13c:	b30e      	cbz	r6, 800c182 <__multadd+0x7e>
 800c13e:	68a3      	ldr	r3, [r4, #8]
 800c140:	42ab      	cmp	r3, r5
 800c142:	dc19      	bgt.n	800c178 <__multadd+0x74>
 800c144:	6861      	ldr	r1, [r4, #4]
 800c146:	4638      	mov	r0, r7
 800c148:	3101      	adds	r1, #1
 800c14a:	f7ff ff79 	bl	800c040 <_Balloc>
 800c14e:	4680      	mov	r8, r0
 800c150:	b928      	cbnz	r0, 800c15e <__multadd+0x5a>
 800c152:	4602      	mov	r2, r0
 800c154:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <__multadd+0x84>)
 800c156:	480d      	ldr	r0, [pc, #52]	@ (800c18c <__multadd+0x88>)
 800c158:	21ba      	movs	r1, #186	@ 0xba
 800c15a:	f000 fd11 	bl	800cb80 <__assert_func>
 800c15e:	6922      	ldr	r2, [r4, #16]
 800c160:	3202      	adds	r2, #2
 800c162:	f104 010c 	add.w	r1, r4, #12
 800c166:	0092      	lsls	r2, r2, #2
 800c168:	300c      	adds	r0, #12
 800c16a:	f7ff f932 	bl	800b3d2 <memcpy>
 800c16e:	4621      	mov	r1, r4
 800c170:	4638      	mov	r0, r7
 800c172:	f7ff ffa5 	bl	800c0c0 <_Bfree>
 800c176:	4644      	mov	r4, r8
 800c178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c17c:	3501      	adds	r5, #1
 800c17e:	615e      	str	r6, [r3, #20]
 800c180:	6125      	str	r5, [r4, #16]
 800c182:	4620      	mov	r0, r4
 800c184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c188:	0800ebf0 	.word	0x0800ebf0
 800c18c:	0800ec01 	.word	0x0800ec01

0800c190 <__hi0bits>:
 800c190:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c194:	4603      	mov	r3, r0
 800c196:	bf36      	itet	cc
 800c198:	0403      	lslcc	r3, r0, #16
 800c19a:	2000      	movcs	r0, #0
 800c19c:	2010      	movcc	r0, #16
 800c19e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1a2:	bf3c      	itt	cc
 800c1a4:	021b      	lslcc	r3, r3, #8
 800c1a6:	3008      	addcc	r0, #8
 800c1a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1ac:	bf3c      	itt	cc
 800c1ae:	011b      	lslcc	r3, r3, #4
 800c1b0:	3004      	addcc	r0, #4
 800c1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1b6:	bf3c      	itt	cc
 800c1b8:	009b      	lslcc	r3, r3, #2
 800c1ba:	3002      	addcc	r0, #2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	db05      	blt.n	800c1cc <__hi0bits+0x3c>
 800c1c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1c4:	f100 0001 	add.w	r0, r0, #1
 800c1c8:	bf08      	it	eq
 800c1ca:	2020      	moveq	r0, #32
 800c1cc:	4770      	bx	lr

0800c1ce <__lo0bits>:
 800c1ce:	6803      	ldr	r3, [r0, #0]
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	f013 0007 	ands.w	r0, r3, #7
 800c1d6:	d00b      	beq.n	800c1f0 <__lo0bits+0x22>
 800c1d8:	07d9      	lsls	r1, r3, #31
 800c1da:	d421      	bmi.n	800c220 <__lo0bits+0x52>
 800c1dc:	0798      	lsls	r0, r3, #30
 800c1de:	bf49      	itett	mi
 800c1e0:	085b      	lsrmi	r3, r3, #1
 800c1e2:	089b      	lsrpl	r3, r3, #2
 800c1e4:	2001      	movmi	r0, #1
 800c1e6:	6013      	strmi	r3, [r2, #0]
 800c1e8:	bf5c      	itt	pl
 800c1ea:	6013      	strpl	r3, [r2, #0]
 800c1ec:	2002      	movpl	r0, #2
 800c1ee:	4770      	bx	lr
 800c1f0:	b299      	uxth	r1, r3
 800c1f2:	b909      	cbnz	r1, 800c1f8 <__lo0bits+0x2a>
 800c1f4:	0c1b      	lsrs	r3, r3, #16
 800c1f6:	2010      	movs	r0, #16
 800c1f8:	b2d9      	uxtb	r1, r3
 800c1fa:	b909      	cbnz	r1, 800c200 <__lo0bits+0x32>
 800c1fc:	3008      	adds	r0, #8
 800c1fe:	0a1b      	lsrs	r3, r3, #8
 800c200:	0719      	lsls	r1, r3, #28
 800c202:	bf04      	itt	eq
 800c204:	091b      	lsreq	r3, r3, #4
 800c206:	3004      	addeq	r0, #4
 800c208:	0799      	lsls	r1, r3, #30
 800c20a:	bf04      	itt	eq
 800c20c:	089b      	lsreq	r3, r3, #2
 800c20e:	3002      	addeq	r0, #2
 800c210:	07d9      	lsls	r1, r3, #31
 800c212:	d403      	bmi.n	800c21c <__lo0bits+0x4e>
 800c214:	085b      	lsrs	r3, r3, #1
 800c216:	f100 0001 	add.w	r0, r0, #1
 800c21a:	d003      	beq.n	800c224 <__lo0bits+0x56>
 800c21c:	6013      	str	r3, [r2, #0]
 800c21e:	4770      	bx	lr
 800c220:	2000      	movs	r0, #0
 800c222:	4770      	bx	lr
 800c224:	2020      	movs	r0, #32
 800c226:	4770      	bx	lr

0800c228 <__i2b>:
 800c228:	b510      	push	{r4, lr}
 800c22a:	460c      	mov	r4, r1
 800c22c:	2101      	movs	r1, #1
 800c22e:	f7ff ff07 	bl	800c040 <_Balloc>
 800c232:	4602      	mov	r2, r0
 800c234:	b928      	cbnz	r0, 800c242 <__i2b+0x1a>
 800c236:	4b05      	ldr	r3, [pc, #20]	@ (800c24c <__i2b+0x24>)
 800c238:	4805      	ldr	r0, [pc, #20]	@ (800c250 <__i2b+0x28>)
 800c23a:	f240 1145 	movw	r1, #325	@ 0x145
 800c23e:	f000 fc9f 	bl	800cb80 <__assert_func>
 800c242:	2301      	movs	r3, #1
 800c244:	6144      	str	r4, [r0, #20]
 800c246:	6103      	str	r3, [r0, #16]
 800c248:	bd10      	pop	{r4, pc}
 800c24a:	bf00      	nop
 800c24c:	0800ebf0 	.word	0x0800ebf0
 800c250:	0800ec01 	.word	0x0800ec01

0800c254 <__multiply>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	4614      	mov	r4, r2
 800c25a:	690a      	ldr	r2, [r1, #16]
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	429a      	cmp	r2, r3
 800c260:	bfa8      	it	ge
 800c262:	4623      	movge	r3, r4
 800c264:	460f      	mov	r7, r1
 800c266:	bfa4      	itt	ge
 800c268:	460c      	movge	r4, r1
 800c26a:	461f      	movge	r7, r3
 800c26c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c270:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c274:	68a3      	ldr	r3, [r4, #8]
 800c276:	6861      	ldr	r1, [r4, #4]
 800c278:	eb0a 0609 	add.w	r6, sl, r9
 800c27c:	42b3      	cmp	r3, r6
 800c27e:	b085      	sub	sp, #20
 800c280:	bfb8      	it	lt
 800c282:	3101      	addlt	r1, #1
 800c284:	f7ff fedc 	bl	800c040 <_Balloc>
 800c288:	b930      	cbnz	r0, 800c298 <__multiply+0x44>
 800c28a:	4602      	mov	r2, r0
 800c28c:	4b44      	ldr	r3, [pc, #272]	@ (800c3a0 <__multiply+0x14c>)
 800c28e:	4845      	ldr	r0, [pc, #276]	@ (800c3a4 <__multiply+0x150>)
 800c290:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c294:	f000 fc74 	bl	800cb80 <__assert_func>
 800c298:	f100 0514 	add.w	r5, r0, #20
 800c29c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2a0:	462b      	mov	r3, r5
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	4543      	cmp	r3, r8
 800c2a6:	d321      	bcc.n	800c2ec <__multiply+0x98>
 800c2a8:	f107 0114 	add.w	r1, r7, #20
 800c2ac:	f104 0214 	add.w	r2, r4, #20
 800c2b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c2b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c2b8:	9302      	str	r3, [sp, #8]
 800c2ba:	1b13      	subs	r3, r2, r4
 800c2bc:	3b15      	subs	r3, #21
 800c2be:	f023 0303 	bic.w	r3, r3, #3
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	f104 0715 	add.w	r7, r4, #21
 800c2c8:	42ba      	cmp	r2, r7
 800c2ca:	bf38      	it	cc
 800c2cc:	2304      	movcc	r3, #4
 800c2ce:	9301      	str	r3, [sp, #4]
 800c2d0:	9b02      	ldr	r3, [sp, #8]
 800c2d2:	9103      	str	r1, [sp, #12]
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	d80c      	bhi.n	800c2f2 <__multiply+0x9e>
 800c2d8:	2e00      	cmp	r6, #0
 800c2da:	dd03      	ble.n	800c2e4 <__multiply+0x90>
 800c2dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d05b      	beq.n	800c39c <__multiply+0x148>
 800c2e4:	6106      	str	r6, [r0, #16]
 800c2e6:	b005      	add	sp, #20
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	f843 2b04 	str.w	r2, [r3], #4
 800c2f0:	e7d8      	b.n	800c2a4 <__multiply+0x50>
 800c2f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2f6:	f1ba 0f00 	cmp.w	sl, #0
 800c2fa:	d024      	beq.n	800c346 <__multiply+0xf2>
 800c2fc:	f104 0e14 	add.w	lr, r4, #20
 800c300:	46a9      	mov	r9, r5
 800c302:	f04f 0c00 	mov.w	ip, #0
 800c306:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c30a:	f8d9 3000 	ldr.w	r3, [r9]
 800c30e:	fa1f fb87 	uxth.w	fp, r7
 800c312:	b29b      	uxth	r3, r3
 800c314:	fb0a 330b 	mla	r3, sl, fp, r3
 800c318:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c31c:	f8d9 7000 	ldr.w	r7, [r9]
 800c320:	4463      	add	r3, ip
 800c322:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c326:	fb0a c70b 	mla	r7, sl, fp, ip
 800c32a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c32e:	b29b      	uxth	r3, r3
 800c330:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c334:	4572      	cmp	r2, lr
 800c336:	f849 3b04 	str.w	r3, [r9], #4
 800c33a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c33e:	d8e2      	bhi.n	800c306 <__multiply+0xb2>
 800c340:	9b01      	ldr	r3, [sp, #4]
 800c342:	f845 c003 	str.w	ip, [r5, r3]
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c34c:	3104      	adds	r1, #4
 800c34e:	f1b9 0f00 	cmp.w	r9, #0
 800c352:	d021      	beq.n	800c398 <__multiply+0x144>
 800c354:	682b      	ldr	r3, [r5, #0]
 800c356:	f104 0c14 	add.w	ip, r4, #20
 800c35a:	46ae      	mov	lr, r5
 800c35c:	f04f 0a00 	mov.w	sl, #0
 800c360:	f8bc b000 	ldrh.w	fp, [ip]
 800c364:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c368:	fb09 770b 	mla	r7, r9, fp, r7
 800c36c:	4457      	add	r7, sl
 800c36e:	b29b      	uxth	r3, r3
 800c370:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c374:	f84e 3b04 	str.w	r3, [lr], #4
 800c378:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c37c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c380:	f8be 3000 	ldrh.w	r3, [lr]
 800c384:	fb09 330a 	mla	r3, r9, sl, r3
 800c388:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c38c:	4562      	cmp	r2, ip
 800c38e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c392:	d8e5      	bhi.n	800c360 <__multiply+0x10c>
 800c394:	9f01      	ldr	r7, [sp, #4]
 800c396:	51eb      	str	r3, [r5, r7]
 800c398:	3504      	adds	r5, #4
 800c39a:	e799      	b.n	800c2d0 <__multiply+0x7c>
 800c39c:	3e01      	subs	r6, #1
 800c39e:	e79b      	b.n	800c2d8 <__multiply+0x84>
 800c3a0:	0800ebf0 	.word	0x0800ebf0
 800c3a4:	0800ec01 	.word	0x0800ec01

0800c3a8 <__pow5mult>:
 800c3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ac:	4615      	mov	r5, r2
 800c3ae:	f012 0203 	ands.w	r2, r2, #3
 800c3b2:	4607      	mov	r7, r0
 800c3b4:	460e      	mov	r6, r1
 800c3b6:	d007      	beq.n	800c3c8 <__pow5mult+0x20>
 800c3b8:	4c25      	ldr	r4, [pc, #148]	@ (800c450 <__pow5mult+0xa8>)
 800c3ba:	3a01      	subs	r2, #1
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3c2:	f7ff fe9f 	bl	800c104 <__multadd>
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	10ad      	asrs	r5, r5, #2
 800c3ca:	d03d      	beq.n	800c448 <__pow5mult+0xa0>
 800c3cc:	69fc      	ldr	r4, [r7, #28]
 800c3ce:	b97c      	cbnz	r4, 800c3f0 <__pow5mult+0x48>
 800c3d0:	2010      	movs	r0, #16
 800c3d2:	f7fe f95b 	bl	800a68c <malloc>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	61f8      	str	r0, [r7, #28]
 800c3da:	b928      	cbnz	r0, 800c3e8 <__pow5mult+0x40>
 800c3dc:	4b1d      	ldr	r3, [pc, #116]	@ (800c454 <__pow5mult+0xac>)
 800c3de:	481e      	ldr	r0, [pc, #120]	@ (800c458 <__pow5mult+0xb0>)
 800c3e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3e4:	f000 fbcc 	bl	800cb80 <__assert_func>
 800c3e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3ec:	6004      	str	r4, [r0, #0]
 800c3ee:	60c4      	str	r4, [r0, #12]
 800c3f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3f8:	b94c      	cbnz	r4, 800c40e <__pow5mult+0x66>
 800c3fa:	f240 2171 	movw	r1, #625	@ 0x271
 800c3fe:	4638      	mov	r0, r7
 800c400:	f7ff ff12 	bl	800c228 <__i2b>
 800c404:	2300      	movs	r3, #0
 800c406:	f8c8 0008 	str.w	r0, [r8, #8]
 800c40a:	4604      	mov	r4, r0
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	f04f 0900 	mov.w	r9, #0
 800c412:	07eb      	lsls	r3, r5, #31
 800c414:	d50a      	bpl.n	800c42c <__pow5mult+0x84>
 800c416:	4631      	mov	r1, r6
 800c418:	4622      	mov	r2, r4
 800c41a:	4638      	mov	r0, r7
 800c41c:	f7ff ff1a 	bl	800c254 <__multiply>
 800c420:	4631      	mov	r1, r6
 800c422:	4680      	mov	r8, r0
 800c424:	4638      	mov	r0, r7
 800c426:	f7ff fe4b 	bl	800c0c0 <_Bfree>
 800c42a:	4646      	mov	r6, r8
 800c42c:	106d      	asrs	r5, r5, #1
 800c42e:	d00b      	beq.n	800c448 <__pow5mult+0xa0>
 800c430:	6820      	ldr	r0, [r4, #0]
 800c432:	b938      	cbnz	r0, 800c444 <__pow5mult+0x9c>
 800c434:	4622      	mov	r2, r4
 800c436:	4621      	mov	r1, r4
 800c438:	4638      	mov	r0, r7
 800c43a:	f7ff ff0b 	bl	800c254 <__multiply>
 800c43e:	6020      	str	r0, [r4, #0]
 800c440:	f8c0 9000 	str.w	r9, [r0]
 800c444:	4604      	mov	r4, r0
 800c446:	e7e4      	b.n	800c412 <__pow5mult+0x6a>
 800c448:	4630      	mov	r0, r6
 800c44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44e:	bf00      	nop
 800c450:	0800ec5c 	.word	0x0800ec5c
 800c454:	0800eb81 	.word	0x0800eb81
 800c458:	0800ec01 	.word	0x0800ec01

0800c45c <__lshift>:
 800c45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c460:	460c      	mov	r4, r1
 800c462:	6849      	ldr	r1, [r1, #4]
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	4607      	mov	r7, r0
 800c46e:	4691      	mov	r9, r2
 800c470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c474:	f108 0601 	add.w	r6, r8, #1
 800c478:	42b3      	cmp	r3, r6
 800c47a:	db0b      	blt.n	800c494 <__lshift+0x38>
 800c47c:	4638      	mov	r0, r7
 800c47e:	f7ff fddf 	bl	800c040 <_Balloc>
 800c482:	4605      	mov	r5, r0
 800c484:	b948      	cbnz	r0, 800c49a <__lshift+0x3e>
 800c486:	4602      	mov	r2, r0
 800c488:	4b28      	ldr	r3, [pc, #160]	@ (800c52c <__lshift+0xd0>)
 800c48a:	4829      	ldr	r0, [pc, #164]	@ (800c530 <__lshift+0xd4>)
 800c48c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c490:	f000 fb76 	bl	800cb80 <__assert_func>
 800c494:	3101      	adds	r1, #1
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	e7ee      	b.n	800c478 <__lshift+0x1c>
 800c49a:	2300      	movs	r3, #0
 800c49c:	f100 0114 	add.w	r1, r0, #20
 800c4a0:	f100 0210 	add.w	r2, r0, #16
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	4553      	cmp	r3, sl
 800c4a8:	db33      	blt.n	800c512 <__lshift+0xb6>
 800c4aa:	6920      	ldr	r0, [r4, #16]
 800c4ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4b0:	f104 0314 	add.w	r3, r4, #20
 800c4b4:	f019 091f 	ands.w	r9, r9, #31
 800c4b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4c0:	d02b      	beq.n	800c51a <__lshift+0xbe>
 800c4c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c4c6:	468a      	mov	sl, r1
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	6818      	ldr	r0, [r3, #0]
 800c4cc:	fa00 f009 	lsl.w	r0, r0, r9
 800c4d0:	4310      	orrs	r0, r2
 800c4d2:	f84a 0b04 	str.w	r0, [sl], #4
 800c4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4da:	459c      	cmp	ip, r3
 800c4dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4e0:	d8f3      	bhi.n	800c4ca <__lshift+0x6e>
 800c4e2:	ebac 0304 	sub.w	r3, ip, r4
 800c4e6:	3b15      	subs	r3, #21
 800c4e8:	f023 0303 	bic.w	r3, r3, #3
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	f104 0015 	add.w	r0, r4, #21
 800c4f2:	4584      	cmp	ip, r0
 800c4f4:	bf38      	it	cc
 800c4f6:	2304      	movcc	r3, #4
 800c4f8:	50ca      	str	r2, [r1, r3]
 800c4fa:	b10a      	cbz	r2, 800c500 <__lshift+0xa4>
 800c4fc:	f108 0602 	add.w	r6, r8, #2
 800c500:	3e01      	subs	r6, #1
 800c502:	4638      	mov	r0, r7
 800c504:	612e      	str	r6, [r5, #16]
 800c506:	4621      	mov	r1, r4
 800c508:	f7ff fdda 	bl	800c0c0 <_Bfree>
 800c50c:	4628      	mov	r0, r5
 800c50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c512:	f842 0f04 	str.w	r0, [r2, #4]!
 800c516:	3301      	adds	r3, #1
 800c518:	e7c5      	b.n	800c4a6 <__lshift+0x4a>
 800c51a:	3904      	subs	r1, #4
 800c51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c520:	f841 2f04 	str.w	r2, [r1, #4]!
 800c524:	459c      	cmp	ip, r3
 800c526:	d8f9      	bhi.n	800c51c <__lshift+0xc0>
 800c528:	e7ea      	b.n	800c500 <__lshift+0xa4>
 800c52a:	bf00      	nop
 800c52c:	0800ebf0 	.word	0x0800ebf0
 800c530:	0800ec01 	.word	0x0800ec01

0800c534 <__mcmp>:
 800c534:	690a      	ldr	r2, [r1, #16]
 800c536:	4603      	mov	r3, r0
 800c538:	6900      	ldr	r0, [r0, #16]
 800c53a:	1a80      	subs	r0, r0, r2
 800c53c:	b530      	push	{r4, r5, lr}
 800c53e:	d10e      	bne.n	800c55e <__mcmp+0x2a>
 800c540:	3314      	adds	r3, #20
 800c542:	3114      	adds	r1, #20
 800c544:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c548:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c54c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c550:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c554:	4295      	cmp	r5, r2
 800c556:	d003      	beq.n	800c560 <__mcmp+0x2c>
 800c558:	d205      	bcs.n	800c566 <__mcmp+0x32>
 800c55a:	f04f 30ff 	mov.w	r0, #4294967295
 800c55e:	bd30      	pop	{r4, r5, pc}
 800c560:	42a3      	cmp	r3, r4
 800c562:	d3f3      	bcc.n	800c54c <__mcmp+0x18>
 800c564:	e7fb      	b.n	800c55e <__mcmp+0x2a>
 800c566:	2001      	movs	r0, #1
 800c568:	e7f9      	b.n	800c55e <__mcmp+0x2a>
	...

0800c56c <__mdiff>:
 800c56c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c570:	4689      	mov	r9, r1
 800c572:	4606      	mov	r6, r0
 800c574:	4611      	mov	r1, r2
 800c576:	4648      	mov	r0, r9
 800c578:	4614      	mov	r4, r2
 800c57a:	f7ff ffdb 	bl	800c534 <__mcmp>
 800c57e:	1e05      	subs	r5, r0, #0
 800c580:	d112      	bne.n	800c5a8 <__mdiff+0x3c>
 800c582:	4629      	mov	r1, r5
 800c584:	4630      	mov	r0, r6
 800c586:	f7ff fd5b 	bl	800c040 <_Balloc>
 800c58a:	4602      	mov	r2, r0
 800c58c:	b928      	cbnz	r0, 800c59a <__mdiff+0x2e>
 800c58e:	4b3f      	ldr	r3, [pc, #252]	@ (800c68c <__mdiff+0x120>)
 800c590:	f240 2137 	movw	r1, #567	@ 0x237
 800c594:	483e      	ldr	r0, [pc, #248]	@ (800c690 <__mdiff+0x124>)
 800c596:	f000 faf3 	bl	800cb80 <__assert_func>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	b003      	add	sp, #12
 800c5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a8:	bfbc      	itt	lt
 800c5aa:	464b      	movlt	r3, r9
 800c5ac:	46a1      	movlt	r9, r4
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5b4:	bfba      	itte	lt
 800c5b6:	461c      	movlt	r4, r3
 800c5b8:	2501      	movlt	r5, #1
 800c5ba:	2500      	movge	r5, #0
 800c5bc:	f7ff fd40 	bl	800c040 <_Balloc>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	b918      	cbnz	r0, 800c5cc <__mdiff+0x60>
 800c5c4:	4b31      	ldr	r3, [pc, #196]	@ (800c68c <__mdiff+0x120>)
 800c5c6:	f240 2145 	movw	r1, #581	@ 0x245
 800c5ca:	e7e3      	b.n	800c594 <__mdiff+0x28>
 800c5cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5d0:	6926      	ldr	r6, [r4, #16]
 800c5d2:	60c5      	str	r5, [r0, #12]
 800c5d4:	f109 0310 	add.w	r3, r9, #16
 800c5d8:	f109 0514 	add.w	r5, r9, #20
 800c5dc:	f104 0e14 	add.w	lr, r4, #20
 800c5e0:	f100 0b14 	add.w	fp, r0, #20
 800c5e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	46d9      	mov	r9, fp
 800c5f0:	f04f 0c00 	mov.w	ip, #0
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	fa1f f38a 	uxth.w	r3, sl
 800c604:	4619      	mov	r1, r3
 800c606:	b283      	uxth	r3, r0
 800c608:	1acb      	subs	r3, r1, r3
 800c60a:	0c00      	lsrs	r0, r0, #16
 800c60c:	4463      	add	r3, ip
 800c60e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c612:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c616:	b29b      	uxth	r3, r3
 800c618:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c61c:	4576      	cmp	r6, lr
 800c61e:	f849 3b04 	str.w	r3, [r9], #4
 800c622:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c626:	d8e5      	bhi.n	800c5f4 <__mdiff+0x88>
 800c628:	1b33      	subs	r3, r6, r4
 800c62a:	3b15      	subs	r3, #21
 800c62c:	f023 0303 	bic.w	r3, r3, #3
 800c630:	3415      	adds	r4, #21
 800c632:	3304      	adds	r3, #4
 800c634:	42a6      	cmp	r6, r4
 800c636:	bf38      	it	cc
 800c638:	2304      	movcc	r3, #4
 800c63a:	441d      	add	r5, r3
 800c63c:	445b      	add	r3, fp
 800c63e:	461e      	mov	r6, r3
 800c640:	462c      	mov	r4, r5
 800c642:	4544      	cmp	r4, r8
 800c644:	d30e      	bcc.n	800c664 <__mdiff+0xf8>
 800c646:	f108 0103 	add.w	r1, r8, #3
 800c64a:	1b49      	subs	r1, r1, r5
 800c64c:	f021 0103 	bic.w	r1, r1, #3
 800c650:	3d03      	subs	r5, #3
 800c652:	45a8      	cmp	r8, r5
 800c654:	bf38      	it	cc
 800c656:	2100      	movcc	r1, #0
 800c658:	440b      	add	r3, r1
 800c65a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c65e:	b191      	cbz	r1, 800c686 <__mdiff+0x11a>
 800c660:	6117      	str	r7, [r2, #16]
 800c662:	e79d      	b.n	800c5a0 <__mdiff+0x34>
 800c664:	f854 1b04 	ldr.w	r1, [r4], #4
 800c668:	46e6      	mov	lr, ip
 800c66a:	0c08      	lsrs	r0, r1, #16
 800c66c:	fa1c fc81 	uxtah	ip, ip, r1
 800c670:	4471      	add	r1, lr
 800c672:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c676:	b289      	uxth	r1, r1
 800c678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c67c:	f846 1b04 	str.w	r1, [r6], #4
 800c680:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c684:	e7dd      	b.n	800c642 <__mdiff+0xd6>
 800c686:	3f01      	subs	r7, #1
 800c688:	e7e7      	b.n	800c65a <__mdiff+0xee>
 800c68a:	bf00      	nop
 800c68c:	0800ebf0 	.word	0x0800ebf0
 800c690:	0800ec01 	.word	0x0800ec01

0800c694 <__d2b>:
 800c694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c698:	460f      	mov	r7, r1
 800c69a:	2101      	movs	r1, #1
 800c69c:	ec59 8b10 	vmov	r8, r9, d0
 800c6a0:	4616      	mov	r6, r2
 800c6a2:	f7ff fccd 	bl	800c040 <_Balloc>
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	b930      	cbnz	r0, 800c6b8 <__d2b+0x24>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	4b23      	ldr	r3, [pc, #140]	@ (800c73c <__d2b+0xa8>)
 800c6ae:	4824      	ldr	r0, [pc, #144]	@ (800c740 <__d2b+0xac>)
 800c6b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6b4:	f000 fa64 	bl	800cb80 <__assert_func>
 800c6b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6c0:	b10d      	cbz	r5, 800c6c6 <__d2b+0x32>
 800c6c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	f1b8 0300 	subs.w	r3, r8, #0
 800c6cc:	d023      	beq.n	800c716 <__d2b+0x82>
 800c6ce:	4668      	mov	r0, sp
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	f7ff fd7c 	bl	800c1ce <__lo0bits>
 800c6d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6da:	b1d0      	cbz	r0, 800c712 <__d2b+0x7e>
 800c6dc:	f1c0 0320 	rsb	r3, r0, #32
 800c6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e4:	430b      	orrs	r3, r1
 800c6e6:	40c2      	lsrs	r2, r0
 800c6e8:	6163      	str	r3, [r4, #20]
 800c6ea:	9201      	str	r2, [sp, #4]
 800c6ec:	9b01      	ldr	r3, [sp, #4]
 800c6ee:	61a3      	str	r3, [r4, #24]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	bf0c      	ite	eq
 800c6f4:	2201      	moveq	r2, #1
 800c6f6:	2202      	movne	r2, #2
 800c6f8:	6122      	str	r2, [r4, #16]
 800c6fa:	b1a5      	cbz	r5, 800c726 <__d2b+0x92>
 800c6fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c700:	4405      	add	r5, r0
 800c702:	603d      	str	r5, [r7, #0]
 800c704:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c708:	6030      	str	r0, [r6, #0]
 800c70a:	4620      	mov	r0, r4
 800c70c:	b003      	add	sp, #12
 800c70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c712:	6161      	str	r1, [r4, #20]
 800c714:	e7ea      	b.n	800c6ec <__d2b+0x58>
 800c716:	a801      	add	r0, sp, #4
 800c718:	f7ff fd59 	bl	800c1ce <__lo0bits>
 800c71c:	9b01      	ldr	r3, [sp, #4]
 800c71e:	6163      	str	r3, [r4, #20]
 800c720:	3020      	adds	r0, #32
 800c722:	2201      	movs	r2, #1
 800c724:	e7e8      	b.n	800c6f8 <__d2b+0x64>
 800c726:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c72a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c72e:	6038      	str	r0, [r7, #0]
 800c730:	6918      	ldr	r0, [r3, #16]
 800c732:	f7ff fd2d 	bl	800c190 <__hi0bits>
 800c736:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c73a:	e7e5      	b.n	800c708 <__d2b+0x74>
 800c73c:	0800ebf0 	.word	0x0800ebf0
 800c740:	0800ec01 	.word	0x0800ec01

0800c744 <__ssputs_r>:
 800c744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c748:	688e      	ldr	r6, [r1, #8]
 800c74a:	461f      	mov	r7, r3
 800c74c:	42be      	cmp	r6, r7
 800c74e:	680b      	ldr	r3, [r1, #0]
 800c750:	4682      	mov	sl, r0
 800c752:	460c      	mov	r4, r1
 800c754:	4690      	mov	r8, r2
 800c756:	d82d      	bhi.n	800c7b4 <__ssputs_r+0x70>
 800c758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c75c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c760:	d026      	beq.n	800c7b0 <__ssputs_r+0x6c>
 800c762:	6965      	ldr	r5, [r4, #20]
 800c764:	6909      	ldr	r1, [r1, #16]
 800c766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c76a:	eba3 0901 	sub.w	r9, r3, r1
 800c76e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c772:	1c7b      	adds	r3, r7, #1
 800c774:	444b      	add	r3, r9
 800c776:	106d      	asrs	r5, r5, #1
 800c778:	429d      	cmp	r5, r3
 800c77a:	bf38      	it	cc
 800c77c:	461d      	movcc	r5, r3
 800c77e:	0553      	lsls	r3, r2, #21
 800c780:	d527      	bpl.n	800c7d2 <__ssputs_r+0x8e>
 800c782:	4629      	mov	r1, r5
 800c784:	f7fd ffac 	bl	800a6e0 <_malloc_r>
 800c788:	4606      	mov	r6, r0
 800c78a:	b360      	cbz	r0, 800c7e6 <__ssputs_r+0xa2>
 800c78c:	6921      	ldr	r1, [r4, #16]
 800c78e:	464a      	mov	r2, r9
 800c790:	f7fe fe1f 	bl	800b3d2 <memcpy>
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c79e:	81a3      	strh	r3, [r4, #12]
 800c7a0:	6126      	str	r6, [r4, #16]
 800c7a2:	6165      	str	r5, [r4, #20]
 800c7a4:	444e      	add	r6, r9
 800c7a6:	eba5 0509 	sub.w	r5, r5, r9
 800c7aa:	6026      	str	r6, [r4, #0]
 800c7ac:	60a5      	str	r5, [r4, #8]
 800c7ae:	463e      	mov	r6, r7
 800c7b0:	42be      	cmp	r6, r7
 800c7b2:	d900      	bls.n	800c7b6 <__ssputs_r+0x72>
 800c7b4:	463e      	mov	r6, r7
 800c7b6:	6820      	ldr	r0, [r4, #0]
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	4641      	mov	r1, r8
 800c7bc:	f000 f9c6 	bl	800cb4c <memmove>
 800c7c0:	68a3      	ldr	r3, [r4, #8]
 800c7c2:	1b9b      	subs	r3, r3, r6
 800c7c4:	60a3      	str	r3, [r4, #8]
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	4433      	add	r3, r6
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d2:	462a      	mov	r2, r5
 800c7d4:	f000 fa18 	bl	800cc08 <_realloc_r>
 800c7d8:	4606      	mov	r6, r0
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d1e0      	bne.n	800c7a0 <__ssputs_r+0x5c>
 800c7de:	6921      	ldr	r1, [r4, #16]
 800c7e0:	4650      	mov	r0, sl
 800c7e2:	f7ff fbe3 	bl	800bfac <_free_r>
 800c7e6:	230c      	movs	r3, #12
 800c7e8:	f8ca 3000 	str.w	r3, [sl]
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7f2:	81a3      	strh	r3, [r4, #12]
 800c7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f8:	e7e9      	b.n	800c7ce <__ssputs_r+0x8a>
	...

0800c7fc <_svfiprintf_r>:
 800c7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c800:	4698      	mov	r8, r3
 800c802:	898b      	ldrh	r3, [r1, #12]
 800c804:	061b      	lsls	r3, r3, #24
 800c806:	b09d      	sub	sp, #116	@ 0x74
 800c808:	4607      	mov	r7, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	4614      	mov	r4, r2
 800c80e:	d510      	bpl.n	800c832 <_svfiprintf_r+0x36>
 800c810:	690b      	ldr	r3, [r1, #16]
 800c812:	b973      	cbnz	r3, 800c832 <_svfiprintf_r+0x36>
 800c814:	2140      	movs	r1, #64	@ 0x40
 800c816:	f7fd ff63 	bl	800a6e0 <_malloc_r>
 800c81a:	6028      	str	r0, [r5, #0]
 800c81c:	6128      	str	r0, [r5, #16]
 800c81e:	b930      	cbnz	r0, 800c82e <_svfiprintf_r+0x32>
 800c820:	230c      	movs	r3, #12
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	f04f 30ff 	mov.w	r0, #4294967295
 800c828:	b01d      	add	sp, #116	@ 0x74
 800c82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82e:	2340      	movs	r3, #64	@ 0x40
 800c830:	616b      	str	r3, [r5, #20]
 800c832:	2300      	movs	r3, #0
 800c834:	9309      	str	r3, [sp, #36]	@ 0x24
 800c836:	2320      	movs	r3, #32
 800c838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c840:	2330      	movs	r3, #48	@ 0x30
 800c842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c9e0 <_svfiprintf_r+0x1e4>
 800c846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c84a:	f04f 0901 	mov.w	r9, #1
 800c84e:	4623      	mov	r3, r4
 800c850:	469a      	mov	sl, r3
 800c852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c856:	b10a      	cbz	r2, 800c85c <_svfiprintf_r+0x60>
 800c858:	2a25      	cmp	r2, #37	@ 0x25
 800c85a:	d1f9      	bne.n	800c850 <_svfiprintf_r+0x54>
 800c85c:	ebba 0b04 	subs.w	fp, sl, r4
 800c860:	d00b      	beq.n	800c87a <_svfiprintf_r+0x7e>
 800c862:	465b      	mov	r3, fp
 800c864:	4622      	mov	r2, r4
 800c866:	4629      	mov	r1, r5
 800c868:	4638      	mov	r0, r7
 800c86a:	f7ff ff6b 	bl	800c744 <__ssputs_r>
 800c86e:	3001      	adds	r0, #1
 800c870:	f000 80a7 	beq.w	800c9c2 <_svfiprintf_r+0x1c6>
 800c874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c876:	445a      	add	r2, fp
 800c878:	9209      	str	r2, [sp, #36]	@ 0x24
 800c87a:	f89a 3000 	ldrb.w	r3, [sl]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f000 809f 	beq.w	800c9c2 <_svfiprintf_r+0x1c6>
 800c884:	2300      	movs	r3, #0
 800c886:	f04f 32ff 	mov.w	r2, #4294967295
 800c88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c88e:	f10a 0a01 	add.w	sl, sl, #1
 800c892:	9304      	str	r3, [sp, #16]
 800c894:	9307      	str	r3, [sp, #28]
 800c896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c89a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c89c:	4654      	mov	r4, sl
 800c89e:	2205      	movs	r2, #5
 800c8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a4:	484e      	ldr	r0, [pc, #312]	@ (800c9e0 <_svfiprintf_r+0x1e4>)
 800c8a6:	f7f3 fd1b 	bl	80002e0 <memchr>
 800c8aa:	9a04      	ldr	r2, [sp, #16]
 800c8ac:	b9d8      	cbnz	r0, 800c8e6 <_svfiprintf_r+0xea>
 800c8ae:	06d0      	lsls	r0, r2, #27
 800c8b0:	bf44      	itt	mi
 800c8b2:	2320      	movmi	r3, #32
 800c8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8b8:	0711      	lsls	r1, r2, #28
 800c8ba:	bf44      	itt	mi
 800c8bc:	232b      	movmi	r3, #43	@ 0x2b
 800c8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8c8:	d015      	beq.n	800c8f6 <_svfiprintf_r+0xfa>
 800c8ca:	9a07      	ldr	r2, [sp, #28]
 800c8cc:	4654      	mov	r4, sl
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	f04f 0c0a 	mov.w	ip, #10
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8da:	3b30      	subs	r3, #48	@ 0x30
 800c8dc:	2b09      	cmp	r3, #9
 800c8de:	d94b      	bls.n	800c978 <_svfiprintf_r+0x17c>
 800c8e0:	b1b0      	cbz	r0, 800c910 <_svfiprintf_r+0x114>
 800c8e2:	9207      	str	r2, [sp, #28]
 800c8e4:	e014      	b.n	800c910 <_svfiprintf_r+0x114>
 800c8e6:	eba0 0308 	sub.w	r3, r0, r8
 800c8ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	9304      	str	r3, [sp, #16]
 800c8f2:	46a2      	mov	sl, r4
 800c8f4:	e7d2      	b.n	800c89c <_svfiprintf_r+0xa0>
 800c8f6:	9b03      	ldr	r3, [sp, #12]
 800c8f8:	1d19      	adds	r1, r3, #4
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	9103      	str	r1, [sp, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	bfbb      	ittet	lt
 800c902:	425b      	neglt	r3, r3
 800c904:	f042 0202 	orrlt.w	r2, r2, #2
 800c908:	9307      	strge	r3, [sp, #28]
 800c90a:	9307      	strlt	r3, [sp, #28]
 800c90c:	bfb8      	it	lt
 800c90e:	9204      	strlt	r2, [sp, #16]
 800c910:	7823      	ldrb	r3, [r4, #0]
 800c912:	2b2e      	cmp	r3, #46	@ 0x2e
 800c914:	d10a      	bne.n	800c92c <_svfiprintf_r+0x130>
 800c916:	7863      	ldrb	r3, [r4, #1]
 800c918:	2b2a      	cmp	r3, #42	@ 0x2a
 800c91a:	d132      	bne.n	800c982 <_svfiprintf_r+0x186>
 800c91c:	9b03      	ldr	r3, [sp, #12]
 800c91e:	1d1a      	adds	r2, r3, #4
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	9203      	str	r2, [sp, #12]
 800c924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c928:	3402      	adds	r4, #2
 800c92a:	9305      	str	r3, [sp, #20]
 800c92c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c9f0 <_svfiprintf_r+0x1f4>
 800c930:	7821      	ldrb	r1, [r4, #0]
 800c932:	2203      	movs	r2, #3
 800c934:	4650      	mov	r0, sl
 800c936:	f7f3 fcd3 	bl	80002e0 <memchr>
 800c93a:	b138      	cbz	r0, 800c94c <_svfiprintf_r+0x150>
 800c93c:	9b04      	ldr	r3, [sp, #16]
 800c93e:	eba0 000a 	sub.w	r0, r0, sl
 800c942:	2240      	movs	r2, #64	@ 0x40
 800c944:	4082      	lsls	r2, r0
 800c946:	4313      	orrs	r3, r2
 800c948:	3401      	adds	r4, #1
 800c94a:	9304      	str	r3, [sp, #16]
 800c94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c950:	4824      	ldr	r0, [pc, #144]	@ (800c9e4 <_svfiprintf_r+0x1e8>)
 800c952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c956:	2206      	movs	r2, #6
 800c958:	f7f3 fcc2 	bl	80002e0 <memchr>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d036      	beq.n	800c9ce <_svfiprintf_r+0x1d2>
 800c960:	4b21      	ldr	r3, [pc, #132]	@ (800c9e8 <_svfiprintf_r+0x1ec>)
 800c962:	bb1b      	cbnz	r3, 800c9ac <_svfiprintf_r+0x1b0>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	3307      	adds	r3, #7
 800c968:	f023 0307 	bic.w	r3, r3, #7
 800c96c:	3308      	adds	r3, #8
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c972:	4433      	add	r3, r6
 800c974:	9309      	str	r3, [sp, #36]	@ 0x24
 800c976:	e76a      	b.n	800c84e <_svfiprintf_r+0x52>
 800c978:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97c:	460c      	mov	r4, r1
 800c97e:	2001      	movs	r0, #1
 800c980:	e7a8      	b.n	800c8d4 <_svfiprintf_r+0xd8>
 800c982:	2300      	movs	r3, #0
 800c984:	3401      	adds	r4, #1
 800c986:	9305      	str	r3, [sp, #20]
 800c988:	4619      	mov	r1, r3
 800c98a:	f04f 0c0a 	mov.w	ip, #10
 800c98e:	4620      	mov	r0, r4
 800c990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c994:	3a30      	subs	r2, #48	@ 0x30
 800c996:	2a09      	cmp	r2, #9
 800c998:	d903      	bls.n	800c9a2 <_svfiprintf_r+0x1a6>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0c6      	beq.n	800c92c <_svfiprintf_r+0x130>
 800c99e:	9105      	str	r1, [sp, #20]
 800c9a0:	e7c4      	b.n	800c92c <_svfiprintf_r+0x130>
 800c9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e7f0      	b.n	800c98e <_svfiprintf_r+0x192>
 800c9ac:	ab03      	add	r3, sp, #12
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	462a      	mov	r2, r5
 800c9b2:	4b0e      	ldr	r3, [pc, #56]	@ (800c9ec <_svfiprintf_r+0x1f0>)
 800c9b4:	a904      	add	r1, sp, #16
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f7fd ffae 	bl	800a918 <_printf_float>
 800c9bc:	1c42      	adds	r2, r0, #1
 800c9be:	4606      	mov	r6, r0
 800c9c0:	d1d6      	bne.n	800c970 <_svfiprintf_r+0x174>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	065b      	lsls	r3, r3, #25
 800c9c6:	f53f af2d 	bmi.w	800c824 <_svfiprintf_r+0x28>
 800c9ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9cc:	e72c      	b.n	800c828 <_svfiprintf_r+0x2c>
 800c9ce:	ab03      	add	r3, sp, #12
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	462a      	mov	r2, r5
 800c9d4:	4b05      	ldr	r3, [pc, #20]	@ (800c9ec <_svfiprintf_r+0x1f0>)
 800c9d6:	a904      	add	r1, sp, #16
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7fe fa25 	bl	800ae28 <_printf_i>
 800c9de:	e7ed      	b.n	800c9bc <_svfiprintf_r+0x1c0>
 800c9e0:	0800ed58 	.word	0x0800ed58
 800c9e4:	0800ed62 	.word	0x0800ed62
 800c9e8:	0800a919 	.word	0x0800a919
 800c9ec:	0800c745 	.word	0x0800c745
 800c9f0:	0800ed5e 	.word	0x0800ed5e

0800c9f4 <__sflush_r>:
 800c9f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fc:	0716      	lsls	r6, r2, #28
 800c9fe:	4605      	mov	r5, r0
 800ca00:	460c      	mov	r4, r1
 800ca02:	d454      	bmi.n	800caae <__sflush_r+0xba>
 800ca04:	684b      	ldr	r3, [r1, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	dc02      	bgt.n	800ca10 <__sflush_r+0x1c>
 800ca0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	dd48      	ble.n	800caa2 <__sflush_r+0xae>
 800ca10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca12:	2e00      	cmp	r6, #0
 800ca14:	d045      	beq.n	800caa2 <__sflush_r+0xae>
 800ca16:	2300      	movs	r3, #0
 800ca18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca1c:	682f      	ldr	r7, [r5, #0]
 800ca1e:	6a21      	ldr	r1, [r4, #32]
 800ca20:	602b      	str	r3, [r5, #0]
 800ca22:	d030      	beq.n	800ca86 <__sflush_r+0x92>
 800ca24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	0759      	lsls	r1, r3, #29
 800ca2a:	d505      	bpl.n	800ca38 <__sflush_r+0x44>
 800ca2c:	6863      	ldr	r3, [r4, #4]
 800ca2e:	1ad2      	subs	r2, r2, r3
 800ca30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca32:	b10b      	cbz	r3, 800ca38 <__sflush_r+0x44>
 800ca34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca36:	1ad2      	subs	r2, r2, r3
 800ca38:	2300      	movs	r3, #0
 800ca3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca3c:	6a21      	ldr	r1, [r4, #32]
 800ca3e:	4628      	mov	r0, r5
 800ca40:	47b0      	blx	r6
 800ca42:	1c43      	adds	r3, r0, #1
 800ca44:	89a3      	ldrh	r3, [r4, #12]
 800ca46:	d106      	bne.n	800ca56 <__sflush_r+0x62>
 800ca48:	6829      	ldr	r1, [r5, #0]
 800ca4a:	291d      	cmp	r1, #29
 800ca4c:	d82b      	bhi.n	800caa6 <__sflush_r+0xb2>
 800ca4e:	4a2a      	ldr	r2, [pc, #168]	@ (800caf8 <__sflush_r+0x104>)
 800ca50:	410a      	asrs	r2, r1
 800ca52:	07d6      	lsls	r6, r2, #31
 800ca54:	d427      	bmi.n	800caa6 <__sflush_r+0xb2>
 800ca56:	2200      	movs	r2, #0
 800ca58:	6062      	str	r2, [r4, #4]
 800ca5a:	04d9      	lsls	r1, r3, #19
 800ca5c:	6922      	ldr	r2, [r4, #16]
 800ca5e:	6022      	str	r2, [r4, #0]
 800ca60:	d504      	bpl.n	800ca6c <__sflush_r+0x78>
 800ca62:	1c42      	adds	r2, r0, #1
 800ca64:	d101      	bne.n	800ca6a <__sflush_r+0x76>
 800ca66:	682b      	ldr	r3, [r5, #0]
 800ca68:	b903      	cbnz	r3, 800ca6c <__sflush_r+0x78>
 800ca6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca6e:	602f      	str	r7, [r5, #0]
 800ca70:	b1b9      	cbz	r1, 800caa2 <__sflush_r+0xae>
 800ca72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca76:	4299      	cmp	r1, r3
 800ca78:	d002      	beq.n	800ca80 <__sflush_r+0x8c>
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f7ff fa96 	bl	800bfac <_free_r>
 800ca80:	2300      	movs	r3, #0
 800ca82:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca84:	e00d      	b.n	800caa2 <__sflush_r+0xae>
 800ca86:	2301      	movs	r3, #1
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b0      	blx	r6
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	1c50      	adds	r0, r2, #1
 800ca90:	d1c9      	bne.n	800ca26 <__sflush_r+0x32>
 800ca92:	682b      	ldr	r3, [r5, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d0c6      	beq.n	800ca26 <__sflush_r+0x32>
 800ca98:	2b1d      	cmp	r3, #29
 800ca9a:	d001      	beq.n	800caa0 <__sflush_r+0xac>
 800ca9c:	2b16      	cmp	r3, #22
 800ca9e:	d11e      	bne.n	800cade <__sflush_r+0xea>
 800caa0:	602f      	str	r7, [r5, #0]
 800caa2:	2000      	movs	r0, #0
 800caa4:	e022      	b.n	800caec <__sflush_r+0xf8>
 800caa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caaa:	b21b      	sxth	r3, r3
 800caac:	e01b      	b.n	800cae6 <__sflush_r+0xf2>
 800caae:	690f      	ldr	r7, [r1, #16]
 800cab0:	2f00      	cmp	r7, #0
 800cab2:	d0f6      	beq.n	800caa2 <__sflush_r+0xae>
 800cab4:	0793      	lsls	r3, r2, #30
 800cab6:	680e      	ldr	r6, [r1, #0]
 800cab8:	bf08      	it	eq
 800caba:	694b      	ldreq	r3, [r1, #20]
 800cabc:	600f      	str	r7, [r1, #0]
 800cabe:	bf18      	it	ne
 800cac0:	2300      	movne	r3, #0
 800cac2:	eba6 0807 	sub.w	r8, r6, r7
 800cac6:	608b      	str	r3, [r1, #8]
 800cac8:	f1b8 0f00 	cmp.w	r8, #0
 800cacc:	dde9      	ble.n	800caa2 <__sflush_r+0xae>
 800cace:	6a21      	ldr	r1, [r4, #32]
 800cad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cad2:	4643      	mov	r3, r8
 800cad4:	463a      	mov	r2, r7
 800cad6:	4628      	mov	r0, r5
 800cad8:	47b0      	blx	r6
 800cada:	2800      	cmp	r0, #0
 800cadc:	dc08      	bgt.n	800caf0 <__sflush_r+0xfc>
 800cade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cae6:	81a3      	strh	r3, [r4, #12]
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295
 800caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf0:	4407      	add	r7, r0
 800caf2:	eba8 0800 	sub.w	r8, r8, r0
 800caf6:	e7e7      	b.n	800cac8 <__sflush_r+0xd4>
 800caf8:	dfbffffe 	.word	0xdfbffffe

0800cafc <_fflush_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	690b      	ldr	r3, [r1, #16]
 800cb00:	4605      	mov	r5, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	b913      	cbnz	r3, 800cb0c <_fflush_r+0x10>
 800cb06:	2500      	movs	r5, #0
 800cb08:	4628      	mov	r0, r5
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	b118      	cbz	r0, 800cb16 <_fflush_r+0x1a>
 800cb0e:	6a03      	ldr	r3, [r0, #32]
 800cb10:	b90b      	cbnz	r3, 800cb16 <_fflush_r+0x1a>
 800cb12:	f7fe fb35 	bl	800b180 <__sinit>
 800cb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0f3      	beq.n	800cb06 <_fflush_r+0xa>
 800cb1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb20:	07d0      	lsls	r0, r2, #31
 800cb22:	d404      	bmi.n	800cb2e <_fflush_r+0x32>
 800cb24:	0599      	lsls	r1, r3, #22
 800cb26:	d402      	bmi.n	800cb2e <_fflush_r+0x32>
 800cb28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb2a:	f7fe fc50 	bl	800b3ce <__retarget_lock_acquire_recursive>
 800cb2e:	4628      	mov	r0, r5
 800cb30:	4621      	mov	r1, r4
 800cb32:	f7ff ff5f 	bl	800c9f4 <__sflush_r>
 800cb36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb38:	07da      	lsls	r2, r3, #31
 800cb3a:	4605      	mov	r5, r0
 800cb3c:	d4e4      	bmi.n	800cb08 <_fflush_r+0xc>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	059b      	lsls	r3, r3, #22
 800cb42:	d4e1      	bmi.n	800cb08 <_fflush_r+0xc>
 800cb44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb46:	f7fe fc43 	bl	800b3d0 <__retarget_lock_release_recursive>
 800cb4a:	e7dd      	b.n	800cb08 <_fflush_r+0xc>

0800cb4c <memmove>:
 800cb4c:	4288      	cmp	r0, r1
 800cb4e:	b510      	push	{r4, lr}
 800cb50:	eb01 0402 	add.w	r4, r1, r2
 800cb54:	d902      	bls.n	800cb5c <memmove+0x10>
 800cb56:	4284      	cmp	r4, r0
 800cb58:	4623      	mov	r3, r4
 800cb5a:	d807      	bhi.n	800cb6c <memmove+0x20>
 800cb5c:	1e43      	subs	r3, r0, #1
 800cb5e:	42a1      	cmp	r1, r4
 800cb60:	d008      	beq.n	800cb74 <memmove+0x28>
 800cb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb6a:	e7f8      	b.n	800cb5e <memmove+0x12>
 800cb6c:	4402      	add	r2, r0
 800cb6e:	4601      	mov	r1, r0
 800cb70:	428a      	cmp	r2, r1
 800cb72:	d100      	bne.n	800cb76 <memmove+0x2a>
 800cb74:	bd10      	pop	{r4, pc}
 800cb76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb7e:	e7f7      	b.n	800cb70 <memmove+0x24>

0800cb80 <__assert_func>:
 800cb80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb82:	4614      	mov	r4, r2
 800cb84:	461a      	mov	r2, r3
 800cb86:	4b09      	ldr	r3, [pc, #36]	@ (800cbac <__assert_func+0x2c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	68d8      	ldr	r0, [r3, #12]
 800cb8e:	b954      	cbnz	r4, 800cba6 <__assert_func+0x26>
 800cb90:	4b07      	ldr	r3, [pc, #28]	@ (800cbb0 <__assert_func+0x30>)
 800cb92:	461c      	mov	r4, r3
 800cb94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb98:	9100      	str	r1, [sp, #0]
 800cb9a:	462b      	mov	r3, r5
 800cb9c:	4905      	ldr	r1, [pc, #20]	@ (800cbb4 <__assert_func+0x34>)
 800cb9e:	f000 f86f 	bl	800cc80 <fiprintf>
 800cba2:	f000 f87f 	bl	800cca4 <abort>
 800cba6:	4b04      	ldr	r3, [pc, #16]	@ (800cbb8 <__assert_func+0x38>)
 800cba8:	e7f4      	b.n	800cb94 <__assert_func+0x14>
 800cbaa:	bf00      	nop
 800cbac:	24000044 	.word	0x24000044
 800cbb0:	0800edae 	.word	0x0800edae
 800cbb4:	0800ed80 	.word	0x0800ed80
 800cbb8:	0800ed73 	.word	0x0800ed73

0800cbbc <_calloc_r>:
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	fba1 5402 	umull	r5, r4, r1, r2
 800cbc2:	b93c      	cbnz	r4, 800cbd4 <_calloc_r+0x18>
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	f7fd fd8b 	bl	800a6e0 <_malloc_r>
 800cbca:	4606      	mov	r6, r0
 800cbcc:	b928      	cbnz	r0, 800cbda <_calloc_r+0x1e>
 800cbce:	2600      	movs	r6, #0
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	220c      	movs	r2, #12
 800cbd6:	6002      	str	r2, [r0, #0]
 800cbd8:	e7f9      	b.n	800cbce <_calloc_r+0x12>
 800cbda:	462a      	mov	r2, r5
 800cbdc:	4621      	mov	r1, r4
 800cbde:	f7fe fb68 	bl	800b2b2 <memset>
 800cbe2:	e7f5      	b.n	800cbd0 <_calloc_r+0x14>

0800cbe4 <__ascii_mbtowc>:
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	b901      	cbnz	r1, 800cbea <__ascii_mbtowc+0x6>
 800cbe8:	a901      	add	r1, sp, #4
 800cbea:	b142      	cbz	r2, 800cbfe <__ascii_mbtowc+0x1a>
 800cbec:	b14b      	cbz	r3, 800cc02 <__ascii_mbtowc+0x1e>
 800cbee:	7813      	ldrb	r3, [r2, #0]
 800cbf0:	600b      	str	r3, [r1, #0]
 800cbf2:	7812      	ldrb	r2, [r2, #0]
 800cbf4:	1e10      	subs	r0, r2, #0
 800cbf6:	bf18      	it	ne
 800cbf8:	2001      	movne	r0, #1
 800cbfa:	b002      	add	sp, #8
 800cbfc:	4770      	bx	lr
 800cbfe:	4610      	mov	r0, r2
 800cc00:	e7fb      	b.n	800cbfa <__ascii_mbtowc+0x16>
 800cc02:	f06f 0001 	mvn.w	r0, #1
 800cc06:	e7f8      	b.n	800cbfa <__ascii_mbtowc+0x16>

0800cc08 <_realloc_r>:
 800cc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	4615      	mov	r5, r2
 800cc10:	460c      	mov	r4, r1
 800cc12:	b921      	cbnz	r1, 800cc1e <_realloc_r+0x16>
 800cc14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc18:	4611      	mov	r1, r2
 800cc1a:	f7fd bd61 	b.w	800a6e0 <_malloc_r>
 800cc1e:	b92a      	cbnz	r2, 800cc2c <_realloc_r+0x24>
 800cc20:	f7ff f9c4 	bl	800bfac <_free_r>
 800cc24:	2400      	movs	r4, #0
 800cc26:	4620      	mov	r0, r4
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	f000 f841 	bl	800ccb2 <_malloc_usable_size_r>
 800cc30:	4285      	cmp	r5, r0
 800cc32:	4606      	mov	r6, r0
 800cc34:	d802      	bhi.n	800cc3c <_realloc_r+0x34>
 800cc36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cc3a:	d8f4      	bhi.n	800cc26 <_realloc_r+0x1e>
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4640      	mov	r0, r8
 800cc40:	f7fd fd4e 	bl	800a6e0 <_malloc_r>
 800cc44:	4607      	mov	r7, r0
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d0ec      	beq.n	800cc24 <_realloc_r+0x1c>
 800cc4a:	42b5      	cmp	r5, r6
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	4621      	mov	r1, r4
 800cc50:	bf28      	it	cs
 800cc52:	4632      	movcs	r2, r6
 800cc54:	f7fe fbbd 	bl	800b3d2 <memcpy>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	f7ff f9a6 	bl	800bfac <_free_r>
 800cc60:	463c      	mov	r4, r7
 800cc62:	e7e0      	b.n	800cc26 <_realloc_r+0x1e>

0800cc64 <__ascii_wctomb>:
 800cc64:	4603      	mov	r3, r0
 800cc66:	4608      	mov	r0, r1
 800cc68:	b141      	cbz	r1, 800cc7c <__ascii_wctomb+0x18>
 800cc6a:	2aff      	cmp	r2, #255	@ 0xff
 800cc6c:	d904      	bls.n	800cc78 <__ascii_wctomb+0x14>
 800cc6e:	228a      	movs	r2, #138	@ 0x8a
 800cc70:	601a      	str	r2, [r3, #0]
 800cc72:	f04f 30ff 	mov.w	r0, #4294967295
 800cc76:	4770      	bx	lr
 800cc78:	700a      	strb	r2, [r1, #0]
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	4770      	bx	lr
	...

0800cc80 <fiprintf>:
 800cc80:	b40e      	push	{r1, r2, r3}
 800cc82:	b503      	push	{r0, r1, lr}
 800cc84:	4601      	mov	r1, r0
 800cc86:	ab03      	add	r3, sp, #12
 800cc88:	4805      	ldr	r0, [pc, #20]	@ (800cca0 <fiprintf+0x20>)
 800cc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8e:	6800      	ldr	r0, [r0, #0]
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	f000 f83f 	bl	800cd14 <_vfiprintf_r>
 800cc96:	b002      	add	sp, #8
 800cc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc9c:	b003      	add	sp, #12
 800cc9e:	4770      	bx	lr
 800cca0:	24000044 	.word	0x24000044

0800cca4 <abort>:
 800cca4:	b508      	push	{r3, lr}
 800cca6:	2006      	movs	r0, #6
 800cca8:	f000 fa08 	bl	800d0bc <raise>
 800ccac:	2001      	movs	r0, #1
 800ccae:	f7f4 faff 	bl	80012b0 <_exit>

0800ccb2 <_malloc_usable_size_r>:
 800ccb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccb6:	1f18      	subs	r0, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	bfbc      	itt	lt
 800ccbc:	580b      	ldrlt	r3, [r1, r0]
 800ccbe:	18c0      	addlt	r0, r0, r3
 800ccc0:	4770      	bx	lr

0800ccc2 <__sfputc_r>:
 800ccc2:	6893      	ldr	r3, [r2, #8]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	b410      	push	{r4}
 800ccca:	6093      	str	r3, [r2, #8]
 800cccc:	da08      	bge.n	800cce0 <__sfputc_r+0x1e>
 800ccce:	6994      	ldr	r4, [r2, #24]
 800ccd0:	42a3      	cmp	r3, r4
 800ccd2:	db01      	blt.n	800ccd8 <__sfputc_r+0x16>
 800ccd4:	290a      	cmp	r1, #10
 800ccd6:	d103      	bne.n	800cce0 <__sfputc_r+0x1e>
 800ccd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccdc:	f000 b932 	b.w	800cf44 <__swbuf_r>
 800cce0:	6813      	ldr	r3, [r2, #0]
 800cce2:	1c58      	adds	r0, r3, #1
 800cce4:	6010      	str	r0, [r2, #0]
 800cce6:	7019      	strb	r1, [r3, #0]
 800cce8:	4608      	mov	r0, r1
 800ccea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <__sfputs_r>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	460f      	mov	r7, r1
 800ccf6:	4614      	mov	r4, r2
 800ccf8:	18d5      	adds	r5, r2, r3
 800ccfa:	42ac      	cmp	r4, r5
 800ccfc:	d101      	bne.n	800cd02 <__sfputs_r+0x12>
 800ccfe:	2000      	movs	r0, #0
 800cd00:	e007      	b.n	800cd12 <__sfputs_r+0x22>
 800cd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd06:	463a      	mov	r2, r7
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f7ff ffda 	bl	800ccc2 <__sfputc_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	d1f3      	bne.n	800ccfa <__sfputs_r+0xa>
 800cd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd14 <_vfiprintf_r>:
 800cd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd18:	460d      	mov	r5, r1
 800cd1a:	b09d      	sub	sp, #116	@ 0x74
 800cd1c:	4614      	mov	r4, r2
 800cd1e:	4698      	mov	r8, r3
 800cd20:	4606      	mov	r6, r0
 800cd22:	b118      	cbz	r0, 800cd2c <_vfiprintf_r+0x18>
 800cd24:	6a03      	ldr	r3, [r0, #32]
 800cd26:	b90b      	cbnz	r3, 800cd2c <_vfiprintf_r+0x18>
 800cd28:	f7fe fa2a 	bl	800b180 <__sinit>
 800cd2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd2e:	07d9      	lsls	r1, r3, #31
 800cd30:	d405      	bmi.n	800cd3e <_vfiprintf_r+0x2a>
 800cd32:	89ab      	ldrh	r3, [r5, #12]
 800cd34:	059a      	lsls	r2, r3, #22
 800cd36:	d402      	bmi.n	800cd3e <_vfiprintf_r+0x2a>
 800cd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd3a:	f7fe fb48 	bl	800b3ce <__retarget_lock_acquire_recursive>
 800cd3e:	89ab      	ldrh	r3, [r5, #12]
 800cd40:	071b      	lsls	r3, r3, #28
 800cd42:	d501      	bpl.n	800cd48 <_vfiprintf_r+0x34>
 800cd44:	692b      	ldr	r3, [r5, #16]
 800cd46:	b99b      	cbnz	r3, 800cd70 <_vfiprintf_r+0x5c>
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f000 f938 	bl	800cfc0 <__swsetup_r>
 800cd50:	b170      	cbz	r0, 800cd70 <_vfiprintf_r+0x5c>
 800cd52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd54:	07dc      	lsls	r4, r3, #31
 800cd56:	d504      	bpl.n	800cd62 <_vfiprintf_r+0x4e>
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	b01d      	add	sp, #116	@ 0x74
 800cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd62:	89ab      	ldrh	r3, [r5, #12]
 800cd64:	0598      	lsls	r0, r3, #22
 800cd66:	d4f7      	bmi.n	800cd58 <_vfiprintf_r+0x44>
 800cd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd6a:	f7fe fb31 	bl	800b3d0 <__retarget_lock_release_recursive>
 800cd6e:	e7f3      	b.n	800cd58 <_vfiprintf_r+0x44>
 800cd70:	2300      	movs	r3, #0
 800cd72:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd74:	2320      	movs	r3, #32
 800cd76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd7e:	2330      	movs	r3, #48	@ 0x30
 800cd80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf30 <_vfiprintf_r+0x21c>
 800cd84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd88:	f04f 0901 	mov.w	r9, #1
 800cd8c:	4623      	mov	r3, r4
 800cd8e:	469a      	mov	sl, r3
 800cd90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd94:	b10a      	cbz	r2, 800cd9a <_vfiprintf_r+0x86>
 800cd96:	2a25      	cmp	r2, #37	@ 0x25
 800cd98:	d1f9      	bne.n	800cd8e <_vfiprintf_r+0x7a>
 800cd9a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd9e:	d00b      	beq.n	800cdb8 <_vfiprintf_r+0xa4>
 800cda0:	465b      	mov	r3, fp
 800cda2:	4622      	mov	r2, r4
 800cda4:	4629      	mov	r1, r5
 800cda6:	4630      	mov	r0, r6
 800cda8:	f7ff ffa2 	bl	800ccf0 <__sfputs_r>
 800cdac:	3001      	adds	r0, #1
 800cdae:	f000 80a7 	beq.w	800cf00 <_vfiprintf_r+0x1ec>
 800cdb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdb4:	445a      	add	r2, fp
 800cdb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f000 809f 	beq.w	800cf00 <_vfiprintf_r+0x1ec>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdcc:	f10a 0a01 	add.w	sl, sl, #1
 800cdd0:	9304      	str	r3, [sp, #16]
 800cdd2:	9307      	str	r3, [sp, #28]
 800cdd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdda:	4654      	mov	r4, sl
 800cddc:	2205      	movs	r2, #5
 800cdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde2:	4853      	ldr	r0, [pc, #332]	@ (800cf30 <_vfiprintf_r+0x21c>)
 800cde4:	f7f3 fa7c 	bl	80002e0 <memchr>
 800cde8:	9a04      	ldr	r2, [sp, #16]
 800cdea:	b9d8      	cbnz	r0, 800ce24 <_vfiprintf_r+0x110>
 800cdec:	06d1      	lsls	r1, r2, #27
 800cdee:	bf44      	itt	mi
 800cdf0:	2320      	movmi	r3, #32
 800cdf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdf6:	0713      	lsls	r3, r2, #28
 800cdf8:	bf44      	itt	mi
 800cdfa:	232b      	movmi	r3, #43	@ 0x2b
 800cdfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce00:	f89a 3000 	ldrb.w	r3, [sl]
 800ce04:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce06:	d015      	beq.n	800ce34 <_vfiprintf_r+0x120>
 800ce08:	9a07      	ldr	r2, [sp, #28]
 800ce0a:	4654      	mov	r4, sl
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	f04f 0c0a 	mov.w	ip, #10
 800ce12:	4621      	mov	r1, r4
 800ce14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce18:	3b30      	subs	r3, #48	@ 0x30
 800ce1a:	2b09      	cmp	r3, #9
 800ce1c:	d94b      	bls.n	800ceb6 <_vfiprintf_r+0x1a2>
 800ce1e:	b1b0      	cbz	r0, 800ce4e <_vfiprintf_r+0x13a>
 800ce20:	9207      	str	r2, [sp, #28]
 800ce22:	e014      	b.n	800ce4e <_vfiprintf_r+0x13a>
 800ce24:	eba0 0308 	sub.w	r3, r0, r8
 800ce28:	fa09 f303 	lsl.w	r3, r9, r3
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	9304      	str	r3, [sp, #16]
 800ce30:	46a2      	mov	sl, r4
 800ce32:	e7d2      	b.n	800cdda <_vfiprintf_r+0xc6>
 800ce34:	9b03      	ldr	r3, [sp, #12]
 800ce36:	1d19      	adds	r1, r3, #4
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	9103      	str	r1, [sp, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bfbb      	ittet	lt
 800ce40:	425b      	neglt	r3, r3
 800ce42:	f042 0202 	orrlt.w	r2, r2, #2
 800ce46:	9307      	strge	r3, [sp, #28]
 800ce48:	9307      	strlt	r3, [sp, #28]
 800ce4a:	bfb8      	it	lt
 800ce4c:	9204      	strlt	r2, [sp, #16]
 800ce4e:	7823      	ldrb	r3, [r4, #0]
 800ce50:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce52:	d10a      	bne.n	800ce6a <_vfiprintf_r+0x156>
 800ce54:	7863      	ldrb	r3, [r4, #1]
 800ce56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce58:	d132      	bne.n	800cec0 <_vfiprintf_r+0x1ac>
 800ce5a:	9b03      	ldr	r3, [sp, #12]
 800ce5c:	1d1a      	adds	r2, r3, #4
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	9203      	str	r2, [sp, #12]
 800ce62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce66:	3402      	adds	r4, #2
 800ce68:	9305      	str	r3, [sp, #20]
 800ce6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf40 <_vfiprintf_r+0x22c>
 800ce6e:	7821      	ldrb	r1, [r4, #0]
 800ce70:	2203      	movs	r2, #3
 800ce72:	4650      	mov	r0, sl
 800ce74:	f7f3 fa34 	bl	80002e0 <memchr>
 800ce78:	b138      	cbz	r0, 800ce8a <_vfiprintf_r+0x176>
 800ce7a:	9b04      	ldr	r3, [sp, #16]
 800ce7c:	eba0 000a 	sub.w	r0, r0, sl
 800ce80:	2240      	movs	r2, #64	@ 0x40
 800ce82:	4082      	lsls	r2, r0
 800ce84:	4313      	orrs	r3, r2
 800ce86:	3401      	adds	r4, #1
 800ce88:	9304      	str	r3, [sp, #16]
 800ce8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce8e:	4829      	ldr	r0, [pc, #164]	@ (800cf34 <_vfiprintf_r+0x220>)
 800ce90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce94:	2206      	movs	r2, #6
 800ce96:	f7f3 fa23 	bl	80002e0 <memchr>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d03f      	beq.n	800cf1e <_vfiprintf_r+0x20a>
 800ce9e:	4b26      	ldr	r3, [pc, #152]	@ (800cf38 <_vfiprintf_r+0x224>)
 800cea0:	bb1b      	cbnz	r3, 800ceea <_vfiprintf_r+0x1d6>
 800cea2:	9b03      	ldr	r3, [sp, #12]
 800cea4:	3307      	adds	r3, #7
 800cea6:	f023 0307 	bic.w	r3, r3, #7
 800ceaa:	3308      	adds	r3, #8
 800ceac:	9303      	str	r3, [sp, #12]
 800ceae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb0:	443b      	add	r3, r7
 800ceb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceb4:	e76a      	b.n	800cd8c <_vfiprintf_r+0x78>
 800ceb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceba:	460c      	mov	r4, r1
 800cebc:	2001      	movs	r0, #1
 800cebe:	e7a8      	b.n	800ce12 <_vfiprintf_r+0xfe>
 800cec0:	2300      	movs	r3, #0
 800cec2:	3401      	adds	r4, #1
 800cec4:	9305      	str	r3, [sp, #20]
 800cec6:	4619      	mov	r1, r3
 800cec8:	f04f 0c0a 	mov.w	ip, #10
 800cecc:	4620      	mov	r0, r4
 800cece:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ced2:	3a30      	subs	r2, #48	@ 0x30
 800ced4:	2a09      	cmp	r2, #9
 800ced6:	d903      	bls.n	800cee0 <_vfiprintf_r+0x1cc>
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d0c6      	beq.n	800ce6a <_vfiprintf_r+0x156>
 800cedc:	9105      	str	r1, [sp, #20]
 800cede:	e7c4      	b.n	800ce6a <_vfiprintf_r+0x156>
 800cee0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cee4:	4604      	mov	r4, r0
 800cee6:	2301      	movs	r3, #1
 800cee8:	e7f0      	b.n	800cecc <_vfiprintf_r+0x1b8>
 800ceea:	ab03      	add	r3, sp, #12
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	462a      	mov	r2, r5
 800cef0:	4b12      	ldr	r3, [pc, #72]	@ (800cf3c <_vfiprintf_r+0x228>)
 800cef2:	a904      	add	r1, sp, #16
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7fd fd0f 	bl	800a918 <_printf_float>
 800cefa:	4607      	mov	r7, r0
 800cefc:	1c78      	adds	r0, r7, #1
 800cefe:	d1d6      	bne.n	800ceae <_vfiprintf_r+0x19a>
 800cf00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf02:	07d9      	lsls	r1, r3, #31
 800cf04:	d405      	bmi.n	800cf12 <_vfiprintf_r+0x1fe>
 800cf06:	89ab      	ldrh	r3, [r5, #12]
 800cf08:	059a      	lsls	r2, r3, #22
 800cf0a:	d402      	bmi.n	800cf12 <_vfiprintf_r+0x1fe>
 800cf0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf0e:	f7fe fa5f 	bl	800b3d0 <__retarget_lock_release_recursive>
 800cf12:	89ab      	ldrh	r3, [r5, #12]
 800cf14:	065b      	lsls	r3, r3, #25
 800cf16:	f53f af1f 	bmi.w	800cd58 <_vfiprintf_r+0x44>
 800cf1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf1c:	e71e      	b.n	800cd5c <_vfiprintf_r+0x48>
 800cf1e:	ab03      	add	r3, sp, #12
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	462a      	mov	r2, r5
 800cf24:	4b05      	ldr	r3, [pc, #20]	@ (800cf3c <_vfiprintf_r+0x228>)
 800cf26:	a904      	add	r1, sp, #16
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7fd ff7d 	bl	800ae28 <_printf_i>
 800cf2e:	e7e4      	b.n	800cefa <_vfiprintf_r+0x1e6>
 800cf30:	0800ed58 	.word	0x0800ed58
 800cf34:	0800ed62 	.word	0x0800ed62
 800cf38:	0800a919 	.word	0x0800a919
 800cf3c:	0800ccf1 	.word	0x0800ccf1
 800cf40:	0800ed5e 	.word	0x0800ed5e

0800cf44 <__swbuf_r>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	460e      	mov	r6, r1
 800cf48:	4614      	mov	r4, r2
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	b118      	cbz	r0, 800cf56 <__swbuf_r+0x12>
 800cf4e:	6a03      	ldr	r3, [r0, #32]
 800cf50:	b90b      	cbnz	r3, 800cf56 <__swbuf_r+0x12>
 800cf52:	f7fe f915 	bl	800b180 <__sinit>
 800cf56:	69a3      	ldr	r3, [r4, #24]
 800cf58:	60a3      	str	r3, [r4, #8]
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	071a      	lsls	r2, r3, #28
 800cf5e:	d501      	bpl.n	800cf64 <__swbuf_r+0x20>
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	b943      	cbnz	r3, 800cf76 <__swbuf_r+0x32>
 800cf64:	4621      	mov	r1, r4
 800cf66:	4628      	mov	r0, r5
 800cf68:	f000 f82a 	bl	800cfc0 <__swsetup_r>
 800cf6c:	b118      	cbz	r0, 800cf76 <__swbuf_r+0x32>
 800cf6e:	f04f 37ff 	mov.w	r7, #4294967295
 800cf72:	4638      	mov	r0, r7
 800cf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	6922      	ldr	r2, [r4, #16]
 800cf7a:	1a98      	subs	r0, r3, r2
 800cf7c:	6963      	ldr	r3, [r4, #20]
 800cf7e:	b2f6      	uxtb	r6, r6
 800cf80:	4283      	cmp	r3, r0
 800cf82:	4637      	mov	r7, r6
 800cf84:	dc05      	bgt.n	800cf92 <__swbuf_r+0x4e>
 800cf86:	4621      	mov	r1, r4
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f7ff fdb7 	bl	800cafc <_fflush_r>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d1ed      	bne.n	800cf6e <__swbuf_r+0x2a>
 800cf92:	68a3      	ldr	r3, [r4, #8]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	60a3      	str	r3, [r4, #8]
 800cf98:	6823      	ldr	r3, [r4, #0]
 800cf9a:	1c5a      	adds	r2, r3, #1
 800cf9c:	6022      	str	r2, [r4, #0]
 800cf9e:	701e      	strb	r6, [r3, #0]
 800cfa0:	6962      	ldr	r2, [r4, #20]
 800cfa2:	1c43      	adds	r3, r0, #1
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d004      	beq.n	800cfb2 <__swbuf_r+0x6e>
 800cfa8:	89a3      	ldrh	r3, [r4, #12]
 800cfaa:	07db      	lsls	r3, r3, #31
 800cfac:	d5e1      	bpl.n	800cf72 <__swbuf_r+0x2e>
 800cfae:	2e0a      	cmp	r6, #10
 800cfb0:	d1df      	bne.n	800cf72 <__swbuf_r+0x2e>
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f7ff fda1 	bl	800cafc <_fflush_r>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d0d9      	beq.n	800cf72 <__swbuf_r+0x2e>
 800cfbe:	e7d6      	b.n	800cf6e <__swbuf_r+0x2a>

0800cfc0 <__swsetup_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4b29      	ldr	r3, [pc, #164]	@ (800d068 <__swsetup_r+0xa8>)
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	6818      	ldr	r0, [r3, #0]
 800cfc8:	460c      	mov	r4, r1
 800cfca:	b118      	cbz	r0, 800cfd4 <__swsetup_r+0x14>
 800cfcc:	6a03      	ldr	r3, [r0, #32]
 800cfce:	b90b      	cbnz	r3, 800cfd4 <__swsetup_r+0x14>
 800cfd0:	f7fe f8d6 	bl	800b180 <__sinit>
 800cfd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd8:	0719      	lsls	r1, r3, #28
 800cfda:	d422      	bmi.n	800d022 <__swsetup_r+0x62>
 800cfdc:	06da      	lsls	r2, r3, #27
 800cfde:	d407      	bmi.n	800cff0 <__swsetup_r+0x30>
 800cfe0:	2209      	movs	r2, #9
 800cfe2:	602a      	str	r2, [r5, #0]
 800cfe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	f04f 30ff 	mov.w	r0, #4294967295
 800cfee:	e033      	b.n	800d058 <__swsetup_r+0x98>
 800cff0:	0758      	lsls	r0, r3, #29
 800cff2:	d512      	bpl.n	800d01a <__swsetup_r+0x5a>
 800cff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cff6:	b141      	cbz	r1, 800d00a <__swsetup_r+0x4a>
 800cff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cffc:	4299      	cmp	r1, r3
 800cffe:	d002      	beq.n	800d006 <__swsetup_r+0x46>
 800d000:	4628      	mov	r0, r5
 800d002:	f7fe ffd3 	bl	800bfac <_free_r>
 800d006:	2300      	movs	r3, #0
 800d008:	6363      	str	r3, [r4, #52]	@ 0x34
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d010:	81a3      	strh	r3, [r4, #12]
 800d012:	2300      	movs	r3, #0
 800d014:	6063      	str	r3, [r4, #4]
 800d016:	6923      	ldr	r3, [r4, #16]
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f043 0308 	orr.w	r3, r3, #8
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	b94b      	cbnz	r3, 800d03a <__swsetup_r+0x7a>
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d030:	d003      	beq.n	800d03a <__swsetup_r+0x7a>
 800d032:	4621      	mov	r1, r4
 800d034:	4628      	mov	r0, r5
 800d036:	f000 f883 	bl	800d140 <__smakebuf_r>
 800d03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d03e:	f013 0201 	ands.w	r2, r3, #1
 800d042:	d00a      	beq.n	800d05a <__swsetup_r+0x9a>
 800d044:	2200      	movs	r2, #0
 800d046:	60a2      	str	r2, [r4, #8]
 800d048:	6962      	ldr	r2, [r4, #20]
 800d04a:	4252      	negs	r2, r2
 800d04c:	61a2      	str	r2, [r4, #24]
 800d04e:	6922      	ldr	r2, [r4, #16]
 800d050:	b942      	cbnz	r2, 800d064 <__swsetup_r+0xa4>
 800d052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d056:	d1c5      	bne.n	800cfe4 <__swsetup_r+0x24>
 800d058:	bd38      	pop	{r3, r4, r5, pc}
 800d05a:	0799      	lsls	r1, r3, #30
 800d05c:	bf58      	it	pl
 800d05e:	6962      	ldrpl	r2, [r4, #20]
 800d060:	60a2      	str	r2, [r4, #8]
 800d062:	e7f4      	b.n	800d04e <__swsetup_r+0x8e>
 800d064:	2000      	movs	r0, #0
 800d066:	e7f7      	b.n	800d058 <__swsetup_r+0x98>
 800d068:	24000044 	.word	0x24000044

0800d06c <_raise_r>:
 800d06c:	291f      	cmp	r1, #31
 800d06e:	b538      	push	{r3, r4, r5, lr}
 800d070:	4605      	mov	r5, r0
 800d072:	460c      	mov	r4, r1
 800d074:	d904      	bls.n	800d080 <_raise_r+0x14>
 800d076:	2316      	movs	r3, #22
 800d078:	6003      	str	r3, [r0, #0]
 800d07a:	f04f 30ff 	mov.w	r0, #4294967295
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d082:	b112      	cbz	r2, 800d08a <_raise_r+0x1e>
 800d084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d088:	b94b      	cbnz	r3, 800d09e <_raise_r+0x32>
 800d08a:	4628      	mov	r0, r5
 800d08c:	f000 f830 	bl	800d0f0 <_getpid_r>
 800d090:	4622      	mov	r2, r4
 800d092:	4601      	mov	r1, r0
 800d094:	4628      	mov	r0, r5
 800d096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d09a:	f000 b817 	b.w	800d0cc <_kill_r>
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d00a      	beq.n	800d0b8 <_raise_r+0x4c>
 800d0a2:	1c59      	adds	r1, r3, #1
 800d0a4:	d103      	bne.n	800d0ae <_raise_r+0x42>
 800d0a6:	2316      	movs	r3, #22
 800d0a8:	6003      	str	r3, [r0, #0]
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	e7e7      	b.n	800d07e <_raise_r+0x12>
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	4798      	blx	r3
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	e7e0      	b.n	800d07e <_raise_r+0x12>

0800d0bc <raise>:
 800d0bc:	4b02      	ldr	r3, [pc, #8]	@ (800d0c8 <raise+0xc>)
 800d0be:	4601      	mov	r1, r0
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	f7ff bfd3 	b.w	800d06c <_raise_r>
 800d0c6:	bf00      	nop
 800d0c8:	24000044 	.word	0x24000044

0800d0cc <_kill_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4d07      	ldr	r5, [pc, #28]	@ (800d0ec <_kill_r+0x20>)
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	602b      	str	r3, [r5, #0]
 800d0da:	f7f4 f8d9 	bl	8001290 <_kill>
 800d0de:	1c43      	adds	r3, r0, #1
 800d0e0:	d102      	bne.n	800d0e8 <_kill_r+0x1c>
 800d0e2:	682b      	ldr	r3, [r5, #0]
 800d0e4:	b103      	cbz	r3, 800d0e8 <_kill_r+0x1c>
 800d0e6:	6023      	str	r3, [r4, #0]
 800d0e8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ea:	bf00      	nop
 800d0ec:	24005388 	.word	0x24005388

0800d0f0 <_getpid_r>:
 800d0f0:	f7f4 b8c6 	b.w	8001280 <_getpid>

0800d0f4 <__swhatbuf_r>:
 800d0f4:	b570      	push	{r4, r5, r6, lr}
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0fc:	2900      	cmp	r1, #0
 800d0fe:	b096      	sub	sp, #88	@ 0x58
 800d100:	4615      	mov	r5, r2
 800d102:	461e      	mov	r6, r3
 800d104:	da0d      	bge.n	800d122 <__swhatbuf_r+0x2e>
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d10c:	f04f 0100 	mov.w	r1, #0
 800d110:	bf14      	ite	ne
 800d112:	2340      	movne	r3, #64	@ 0x40
 800d114:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d118:	2000      	movs	r0, #0
 800d11a:	6031      	str	r1, [r6, #0]
 800d11c:	602b      	str	r3, [r5, #0]
 800d11e:	b016      	add	sp, #88	@ 0x58
 800d120:	bd70      	pop	{r4, r5, r6, pc}
 800d122:	466a      	mov	r2, sp
 800d124:	f000 f848 	bl	800d1b8 <_fstat_r>
 800d128:	2800      	cmp	r0, #0
 800d12a:	dbec      	blt.n	800d106 <__swhatbuf_r+0x12>
 800d12c:	9901      	ldr	r1, [sp, #4]
 800d12e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d132:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d136:	4259      	negs	r1, r3
 800d138:	4159      	adcs	r1, r3
 800d13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d13e:	e7eb      	b.n	800d118 <__swhatbuf_r+0x24>

0800d140 <__smakebuf_r>:
 800d140:	898b      	ldrh	r3, [r1, #12]
 800d142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d144:	079d      	lsls	r5, r3, #30
 800d146:	4606      	mov	r6, r0
 800d148:	460c      	mov	r4, r1
 800d14a:	d507      	bpl.n	800d15c <__smakebuf_r+0x1c>
 800d14c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d150:	6023      	str	r3, [r4, #0]
 800d152:	6123      	str	r3, [r4, #16]
 800d154:	2301      	movs	r3, #1
 800d156:	6163      	str	r3, [r4, #20]
 800d158:	b003      	add	sp, #12
 800d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15c:	ab01      	add	r3, sp, #4
 800d15e:	466a      	mov	r2, sp
 800d160:	f7ff ffc8 	bl	800d0f4 <__swhatbuf_r>
 800d164:	9f00      	ldr	r7, [sp, #0]
 800d166:	4605      	mov	r5, r0
 800d168:	4639      	mov	r1, r7
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7fd fab8 	bl	800a6e0 <_malloc_r>
 800d170:	b948      	cbnz	r0, 800d186 <__smakebuf_r+0x46>
 800d172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d176:	059a      	lsls	r2, r3, #22
 800d178:	d4ee      	bmi.n	800d158 <__smakebuf_r+0x18>
 800d17a:	f023 0303 	bic.w	r3, r3, #3
 800d17e:	f043 0302 	orr.w	r3, r3, #2
 800d182:	81a3      	strh	r3, [r4, #12]
 800d184:	e7e2      	b.n	800d14c <__smakebuf_r+0xc>
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	6020      	str	r0, [r4, #0]
 800d18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	9b01      	ldr	r3, [sp, #4]
 800d192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d196:	b15b      	cbz	r3, 800d1b0 <__smakebuf_r+0x70>
 800d198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d19c:	4630      	mov	r0, r6
 800d19e:	f000 f81d 	bl	800d1dc <_isatty_r>
 800d1a2:	b128      	cbz	r0, 800d1b0 <__smakebuf_r+0x70>
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	f023 0303 	bic.w	r3, r3, #3
 800d1aa:	f043 0301 	orr.w	r3, r3, #1
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	431d      	orrs	r5, r3
 800d1b4:	81a5      	strh	r5, [r4, #12]
 800d1b6:	e7cf      	b.n	800d158 <__smakebuf_r+0x18>

0800d1b8 <_fstat_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4d07      	ldr	r5, [pc, #28]	@ (800d1d8 <_fstat_r+0x20>)
 800d1bc:	2300      	movs	r3, #0
 800d1be:	4604      	mov	r4, r0
 800d1c0:	4608      	mov	r0, r1
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	602b      	str	r3, [r5, #0]
 800d1c6:	f7f4 f8c3 	bl	8001350 <_fstat>
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	d102      	bne.n	800d1d4 <_fstat_r+0x1c>
 800d1ce:	682b      	ldr	r3, [r5, #0]
 800d1d0:	b103      	cbz	r3, 800d1d4 <_fstat_r+0x1c>
 800d1d2:	6023      	str	r3, [r4, #0]
 800d1d4:	bd38      	pop	{r3, r4, r5, pc}
 800d1d6:	bf00      	nop
 800d1d8:	24005388 	.word	0x24005388

0800d1dc <_isatty_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d06      	ldr	r5, [pc, #24]	@ (800d1f8 <_isatty_r+0x1c>)
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	602b      	str	r3, [r5, #0]
 800d1e8:	f7f4 f8c2 	bl	8001370 <_isatty>
 800d1ec:	1c43      	adds	r3, r0, #1
 800d1ee:	d102      	bne.n	800d1f6 <_isatty_r+0x1a>
 800d1f0:	682b      	ldr	r3, [r5, #0]
 800d1f2:	b103      	cbz	r3, 800d1f6 <_isatty_r+0x1a>
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	24005388 	.word	0x24005388

0800d1fc <_init>:
 800d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fe:	bf00      	nop
 800d200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d202:	bc08      	pop	{r3}
 800d204:	469e      	mov	lr, r3
 800d206:	4770      	bx	lr

0800d208 <_fini>:
 800d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20a:	bf00      	nop
 800d20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d20e:	bc08      	pop	{r3}
 800d210:	469e      	mov	lr, r3
 800d212:	4770      	bx	lr
