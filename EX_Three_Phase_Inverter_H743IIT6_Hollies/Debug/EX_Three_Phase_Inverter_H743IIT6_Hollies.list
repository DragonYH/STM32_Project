
EX_Three_Phase_Inverter_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf68  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c78  0800d208  0800d208  0000e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee80  0800ee80  0000fe80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ee88  0800ee88  0000fe88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ee8c  0800ee8c  0000fe8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  0800ee90  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005190  24000200  0800f090  00010200  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005390  0800f090  00010390  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025746  00000000  00000000  0001022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f7a  00000000  00000000  00035974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cd8  00000000  00000000  0003a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000161f  00000000  00000000  0003c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c01f  00000000  00000000  0003dbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025cca  00000000  00000000  00079c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ee9d  00000000  00000000  0009f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  0020e76d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087a0  00000000  00000000  0020e7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  00216f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000200 	.word	0x24000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d1f0 	.word	0x0800d1f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000204 	.word	0x24000204
 80002dc:	0800d1f0 	.word	0x0800d1f0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 80005b0:	f009 ffe0 	bl	800a574 <OLED_Init>
  ad7606_Init();
 80005b4:	f009 fb98 	bl	8009ce8 <ad7606_Init>
  INA228_config(INA228_0);
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_FREERTOS_Init+0x54>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f009 fca8 	bl	8009f12 <INA228_config>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	480f      	ldr	r0, [pc, #60]	@ (8000604 <MX_FREERTOS_Init+0x58>)
 80005c6:	f009 fbc9 	bl	8009d5c <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 80005ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <MX_FREERTOS_Init+0x5c>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	480f      	ldr	r0, [pc, #60]	@ (800060c <MX_FREERTOS_Init+0x60>)
 80005d0:	f006 fe1a 	bl	8007208 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <MX_FREERTOS_Init+0x64>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <MX_FREERTOS_Init+0x68>)
 80005dc:	2100      	movs	r1, #0
 80005de:	480e      	ldr	r0, [pc, #56]	@ (8000618 <MX_FREERTOS_Init+0x6c>)
 80005e0:	f006 fe12 	bl	8007208 <osThreadNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <MX_FREERTOS_Init+0x70>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 80005ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <MX_FREERTOS_Init+0x74>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <MX_FREERTOS_Init+0x78>)
 80005f0:	f006 fe0a 	bl	8007208 <osThreadNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <MX_FREERTOS_Init+0x7c>)
 80005f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	0800eb0c 	.word	0x0800eb0c
 8000604:	240003fc 	.word	0x240003fc
 8000608:	0800d290 	.word	0x0800d290
 800060c:	0800062d 	.word	0x0800062d
 8000610:	2400023c 	.word	0x2400023c
 8000614:	0800d2b4 	.word	0x0800d2b4
 8000618:	08000675 	.word	0x08000675
 800061c:	24000240 	.word	0x24000240
 8000620:	0800d2d8 	.word	0x0800d2d8
 8000624:	080007cd 	.word	0x080007cd
 8000628:	24000244 	.word	0x24000244

0800062c <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000634:	2101      	movs	r1, #1
 8000636:	480e      	ldr	r0, [pc, #56]	@ (8000670 <StartStateLED+0x44>)
 8000638:	f001 fc07 	bl	8001e4a <HAL_GPIO_TogglePin>
    osDelay(100);
 800063c:	2064      	movs	r0, #100	@ 0x64
 800063e:	f006 fe75 	bl	800732c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000642:	2101      	movs	r1, #1
 8000644:	480a      	ldr	r0, [pc, #40]	@ (8000670 <StartStateLED+0x44>)
 8000646:	f001 fc00 	bl	8001e4a <HAL_GPIO_TogglePin>
    osDelay(100);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f006 fe6e 	bl	800732c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000650:	2101      	movs	r1, #1
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <StartStateLED+0x44>)
 8000654:	f001 fbf9 	bl	8001e4a <HAL_GPIO_TogglePin>
    osDelay(250);
 8000658:	20fa      	movs	r0, #250	@ 0xfa
 800065a:	f006 fe67 	bl	800732c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800065e:	2101      	movs	r1, #1
 8000660:	4803      	ldr	r0, [pc, #12]	@ (8000670 <StartStateLED+0x44>)
 8000662:	f001 fbf2 	bl	8001e4a <HAL_GPIO_TogglePin>
    osDelay(250);
 8000666:	20fa      	movs	r0, #250	@ 0xfa
 8000668:	f006 fe60 	bl	800732c <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800066c:	bf00      	nop
 800066e:	e7e1      	b.n	8000634 <StartStateLED+0x8>
 8000670:	58022000 	.word	0x58022000

08000674 <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */

  /* Infinite loop */
  for (;;)
  {
    sprintf((char *)text, "0: %.3f", adcValue[0]);
 800067c:	4b47      	ldr	r3, [pc, #284]	@ (800079c <StartOledShow+0x128>)
 800067e:	edd3 7a00 	vldr	s15, [r3]
 8000682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000686:	ec53 2b17 	vmov	r2, r3, d7
 800068a:	4945      	ldr	r1, [pc, #276]	@ (80007a0 <StartOledShow+0x12c>)
 800068c:	4845      	ldr	r0, [pc, #276]	@ (80007a4 <StartOledShow+0x130>)
 800068e:	f00a fcf1 	bl	800b074 <siprintf>
    OLED_ShowString(0, 0, text, 12);
 8000692:	230c      	movs	r3, #12
 8000694:	4a43      	ldr	r2, [pc, #268]	@ (80007a4 <StartOledShow+0x130>)
 8000696:	2100      	movs	r1, #0
 8000698:	2000      	movs	r0, #0
 800069a:	f009 ff37 	bl	800a50c <OLED_ShowString>
    sprintf((char *)text, "1: %.3f", adcValue[1]);
 800069e:	4b3f      	ldr	r3, [pc, #252]	@ (800079c <StartOledShow+0x128>)
 80006a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80006a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006a8:	ec53 2b17 	vmov	r2, r3, d7
 80006ac:	493e      	ldr	r1, [pc, #248]	@ (80007a8 <StartOledShow+0x134>)
 80006ae:	483d      	ldr	r0, [pc, #244]	@ (80007a4 <StartOledShow+0x130>)
 80006b0:	f00a fce0 	bl	800b074 <siprintf>
    OLED_ShowString(64, 0, text, 12);
 80006b4:	230c      	movs	r3, #12
 80006b6:	4a3b      	ldr	r2, [pc, #236]	@ (80007a4 <StartOledShow+0x130>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	2040      	movs	r0, #64	@ 0x40
 80006bc:	f009 ff26 	bl	800a50c <OLED_ShowString>
    sprintf((char *)text, "2: %.3f", adcValue[2]);
 80006c0:	4b36      	ldr	r3, [pc, #216]	@ (800079c <StartOledShow+0x128>)
 80006c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80006c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ca:	ec53 2b17 	vmov	r2, r3, d7
 80006ce:	4937      	ldr	r1, [pc, #220]	@ (80007ac <StartOledShow+0x138>)
 80006d0:	4834      	ldr	r0, [pc, #208]	@ (80007a4 <StartOledShow+0x130>)
 80006d2:	f00a fccf 	bl	800b074 <siprintf>
    OLED_ShowString(0, 12, text, 12);
 80006d6:	230c      	movs	r3, #12
 80006d8:	4a32      	ldr	r2, [pc, #200]	@ (80007a4 <StartOledShow+0x130>)
 80006da:	210c      	movs	r1, #12
 80006dc:	2000      	movs	r0, #0
 80006de:	f009 ff15 	bl	800a50c <OLED_ShowString>
    sprintf((char *)text, "3: %.3f", adcValue[3]);
 80006e2:	4b2e      	ldr	r3, [pc, #184]	@ (800079c <StartOledShow+0x128>)
 80006e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80006e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ec:	ec53 2b17 	vmov	r2, r3, d7
 80006f0:	492f      	ldr	r1, [pc, #188]	@ (80007b0 <StartOledShow+0x13c>)
 80006f2:	482c      	ldr	r0, [pc, #176]	@ (80007a4 <StartOledShow+0x130>)
 80006f4:	f00a fcbe 	bl	800b074 <siprintf>
    OLED_ShowString(64, 12, text, 12);
 80006f8:	230c      	movs	r3, #12
 80006fa:	4a2a      	ldr	r2, [pc, #168]	@ (80007a4 <StartOledShow+0x130>)
 80006fc:	210c      	movs	r1, #12
 80006fe:	2040      	movs	r0, #64	@ 0x40
 8000700:	f009 ff04 	bl	800a50c <OLED_ShowString>
    sprintf((char *)text, "4: %.3f", adcValue[4]);
 8000704:	4b25      	ldr	r3, [pc, #148]	@ (800079c <StartOledShow+0x128>)
 8000706:	edd3 7a04 	vldr	s15, [r3, #16]
 800070a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800070e:	ec53 2b17 	vmov	r2, r3, d7
 8000712:	4928      	ldr	r1, [pc, #160]	@ (80007b4 <StartOledShow+0x140>)
 8000714:	4823      	ldr	r0, [pc, #140]	@ (80007a4 <StartOledShow+0x130>)
 8000716:	f00a fcad 	bl	800b074 <siprintf>
    OLED_ShowString(0, 24, text, 12);
 800071a:	230c      	movs	r3, #12
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <StartOledShow+0x130>)
 800071e:	2118      	movs	r1, #24
 8000720:	2000      	movs	r0, #0
 8000722:	f009 fef3 	bl	800a50c <OLED_ShowString>
    sprintf((char *)text, "5: %.3f", adcValue[5]);
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <StartOledShow+0x128>)
 8000728:	edd3 7a05 	vldr	s15, [r3, #20]
 800072c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000730:	ec53 2b17 	vmov	r2, r3, d7
 8000734:	4920      	ldr	r1, [pc, #128]	@ (80007b8 <StartOledShow+0x144>)
 8000736:	481b      	ldr	r0, [pc, #108]	@ (80007a4 <StartOledShow+0x130>)
 8000738:	f00a fc9c 	bl	800b074 <siprintf>
    OLED_ShowString(64, 24, text, 12);
 800073c:	230c      	movs	r3, #12
 800073e:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <StartOledShow+0x130>)
 8000740:	2118      	movs	r1, #24
 8000742:	2040      	movs	r0, #64	@ 0x40
 8000744:	f009 fee2 	bl	800a50c <OLED_ShowString>
    sprintf((char *)text, "6: %.3f", U);
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <StartOledShow+0x148>)
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000752:	ec53 2b17 	vmov	r2, r3, d7
 8000756:	491a      	ldr	r1, [pc, #104]	@ (80007c0 <StartOledShow+0x14c>)
 8000758:	4812      	ldr	r0, [pc, #72]	@ (80007a4 <StartOledShow+0x130>)
 800075a:	f00a fc8b 	bl	800b074 <siprintf>
    OLED_ShowString(0, 36, text, 12);
 800075e:	230c      	movs	r3, #12
 8000760:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <StartOledShow+0x130>)
 8000762:	2124      	movs	r1, #36	@ 0x24
 8000764:	2000      	movs	r0, #0
 8000766:	f009 fed1 	bl	800a50c <OLED_ShowString>
    sprintf((char *)text, "7: %.3f", I);
 800076a:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <StartOledShow+0x150>)
 800076c:	edd3 7a00 	vldr	s15, [r3]
 8000770:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000774:	ec53 2b17 	vmov	r2, r3, d7
 8000778:	4913      	ldr	r1, [pc, #76]	@ (80007c8 <StartOledShow+0x154>)
 800077a:	480a      	ldr	r0, [pc, #40]	@ (80007a4 <StartOledShow+0x130>)
 800077c:	f00a fc7a 	bl	800b074 <siprintf>
    OLED_ShowString(64, 36, text, 12);
 8000780:	230c      	movs	r3, #12
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <StartOledShow+0x130>)
 8000784:	2124      	movs	r1, #36	@ 0x24
 8000786:	2040      	movs	r0, #64	@ 0x40
 8000788:	f009 fec0 	bl	800a50c <OLED_ShowString>
    // // 获取当前堆栈剩余空间
    // sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
    // OLED_ShowString(0, 48, text, 12);
    OLED_Refresh();
 800078c:	f009 fd4e 	bl	800a22c <OLED_Refresh>
    osDelay(100);
 8000790:	2064      	movs	r0, #100	@ 0x64
 8000792:	f006 fdcb 	bl	800732c <osDelay>
    sprintf((char *)text, "0: %.3f", adcValue[0]);
 8000796:	bf00      	nop
 8000798:	e770      	b.n	800067c <StartOledShow+0x8>
 800079a:	bf00      	nop
 800079c:	2400521c 	.word	0x2400521c
 80007a0:	0800d228 	.word	0x0800d228
 80007a4:	2400021c 	.word	0x2400021c
 80007a8:	0800d230 	.word	0x0800d230
 80007ac:	0800d238 	.word	0x0800d238
 80007b0:	0800d240 	.word	0x0800d240
 80007b4:	0800d248 	.word	0x0800d248
 80007b8:	0800d250 	.word	0x0800d250
 80007bc:	2400523c 	.word	0x2400523c
 80007c0:	0800d258 	.word	0x0800d258
 80007c4:	24005240 	.word	0x24005240
 80007c8:	0800d260 	.word	0x0800d260

080007cc <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <StartDcSamp+0x58>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f009 fc49 	bl	800a070 <INA228_getVBUS_V>
 80007de:	eef0 7a40 	vmov.f32	s15, s0
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <StartDcSamp+0x5c>)
 80007e4:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <StartDcSamp+0x58>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 fccb 	bl	800a188 <INA228_getCURRENT_A>
 80007f2:	eef0 7a40 	vmov.f32	s15, s0
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <StartDcSamp+0x60>)
 80007f8:	edc3 7a00 	vstr	s15, [r3]
    // 获取当前堆栈剩余空间
    sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
 80007fc:	2000      	movs	r0, #0
 80007fe:	f008 f989 	bl	8008b14 <uxTaskGetStackHighWaterMark>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	490a      	ldr	r1, [pc, #40]	@ (8000830 <StartDcSamp+0x64>)
 8000808:	480a      	ldr	r0, [pc, #40]	@ (8000834 <StartDcSamp+0x68>)
 800080a:	f00a fc33 	bl	800b074 <siprintf>
    OLED_ShowString(0, 48, text, 12);
 800080e:	230c      	movs	r3, #12
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <StartDcSamp+0x68>)
 8000812:	2130      	movs	r1, #48	@ 0x30
 8000814:	2000      	movs	r0, #0
 8000816:	f009 fe79 	bl	800a50c <OLED_ShowString>
    osDelay(10);
 800081a:	200a      	movs	r0, #10
 800081c:	f006 fd86 	bl	800732c <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 8000820:	bf00      	nop
 8000822:	e7d7      	b.n	80007d4 <StartDcSamp+0x8>
 8000824:	0800eb0c 	.word	0x0800eb0c
 8000828:	2400523c 	.word	0x2400523c
 800082c:	24005240 	.word	0x24005240
 8000830:	0800d268 	.word	0x0800d268
 8000834:	2400021c 	.word	0x2400021c

08000838 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
// GPIO触发中断
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == AD7606_BUSY_Pin)
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	2b40      	cmp	r3, #64	@ 0x40
 8000846:	d104      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    ad7606_GetValue(&hspi2, 8, adcValue);
 8000848:	4a04      	ldr	r2, [pc, #16]	@ (800085c <HAL_GPIO_EXTI_Callback+0x24>)
 800084a:	2108      	movs	r1, #8
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x28>)
 800084e:	f009 fae9 	bl	8009e24 <ad7606_GetValue>
  }
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2400521c 	.word	0x2400521c
 8000860:	24000324 	.word	0x24000324

08000864 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b69      	ldr	r3, [pc, #420]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	4a67      	ldr	r2, [pc, #412]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088a:	4b65      	ldr	r3, [pc, #404]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000898:	4b61      	ldr	r3, [pc, #388]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089e:	4a60      	ldr	r2, [pc, #384]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	4a58      	ldr	r2, [pc, #352]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c6:	4b56      	ldr	r3, [pc, #344]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b52      	ldr	r3, [pc, #328]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	4a51      	ldr	r2, [pc, #324]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	4a49      	ldr	r2, [pc, #292]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 80008fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000902:	4b47      	ldr	r3, [pc, #284]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000910:	4b43      	ldr	r3, [pc, #268]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	4a42      	ldr	r2, [pc, #264]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 8000918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000920:	4b3f      	ldr	r3, [pc, #252]	@ (8000a20 <MX_GPIO_Init+0x1bc>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	483c      	ldr	r0, [pc, #240]	@ (8000a24 <MX_GPIO_Init+0x1c0>)
 8000934:	f001 fa70 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	483a      	ldr	r0, [pc, #232]	@ (8000a28 <MX_GPIO_Init+0x1c4>)
 800093e:	f001 fa6b 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2188      	movs	r1, #136	@ 0x88
 8000946:	4839      	ldr	r0, [pc, #228]	@ (8000a2c <MX_GPIO_Init+0x1c8>)
 8000948:	f001 fa66 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2101      	movs	r1, #1
 8000950:	4837      	ldr	r0, [pc, #220]	@ (8000a30 <MX_GPIO_Init+0x1cc>)
 8000952:	f001 fa61 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	@ 0x40
 800095a:	4835      	ldr	r0, [pc, #212]	@ (8000a30 <MX_GPIO_Init+0x1cc>)
 800095c:	f001 fa5c 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000960:	2320      	movs	r3, #32
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	482b      	ldr	r0, [pc, #172]	@ (8000a24 <MX_GPIO_Init+0x1c0>)
 8000978:	f001 f89e 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4825      	ldr	r0, [pc, #148]	@ (8000a28 <MX_GPIO_Init+0x1c4>)
 8000994:	f001 f890 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000998:	2388      	movs	r3, #136	@ 0x88
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	481f      	ldr	r0, [pc, #124]	@ (8000a2c <MX_GPIO_Init+0x1c8>)
 80009b0:	f001 f882 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 80009b4:	2340      	movs	r3, #64	@ 0x40
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4818      	ldr	r0, [pc, #96]	@ (8000a2c <MX_GPIO_Init+0x1c8>)
 80009ca:	f001 f875 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <MX_GPIO_Init+0x1cc>)
 80009e6:	f001 f867 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80009ea:	2340      	movs	r3, #64	@ 0x40
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <MX_GPIO_Init+0x1cc>)
 8000a02:	f001 f859 	bl	8001ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2105      	movs	r1, #5
 8000a0a:	2017      	movs	r0, #23
 8000a0c:	f000 ffb4 	bl	8001978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a10:	2017      	movs	r0, #23
 8000a12:	f000 ffcb 	bl	80019ac <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020800 	.word	0x58020800
 8000a28:	58020400 	.word	0x58020400
 8000a2c:	58021800 	.word	0x58021800
 8000a30:	58022000 	.word	0x58022000

08000a34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <MX_I2C1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a40:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab0 <MX_I2C1_Init+0x7c>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a44:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6e:	480e      	ldr	r0, [pc, #56]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a70:	f001 fa20 	bl	8001eb4 <HAL_I2C_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a7a:	f000 fa23 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a82:	f001 ffa3 	bl	80029cc <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 fa1a 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_I2C1_Init+0x74>)
 8000a94:	f001 ffe5 	bl	8002a62 <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 fa11 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	24000248 	.word	0x24000248
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	307075b1 	.word	0x307075b1

08000ab4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	22c0      	movs	r2, #192	@ 0xc0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f00a fb30 	bl	800b13a <memset>
  if(i2cHandle->Instance==I2C1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a26      	ldr	r2, [pc, #152]	@ (8000b78 <HAL_I2C_MspInit+0xc4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d145      	bne.n	8000b70 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ae4:	f04f 0208 	mov.w	r2, #8
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 f84a 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b06:	f000 f9dd 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	4a1a      	ldr	r2, [pc, #104]	@ (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b28:	23c0      	movs	r3, #192	@ 0xc0
 8000b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b40:	2304      	movs	r3, #4
 8000b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <HAL_I2C_MspInit+0xcc>)
 8000b4e:	f000 ffb3 	bl	8001ab8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b58:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_I2C_MspInit+0xc8>)
 8000b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b70:	bf00      	nop
 8000b72:	37e8      	adds	r7, #232	@ 0xe8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	58020400 	.word	0x58020400

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b8a:	f000 f95b 	bl	8000e44 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c84 <main+0x100>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11b      	bne.n	8000bd2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9a:	f3bf 8f4f 	dsb	sy
}
 8000b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
}
 8000ba4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ba6:	4b37      	ldr	r3, [pc, #220]	@ (8000c84 <main+0x100>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bae:	f3bf 8f4f 	dsb	sy
}
 8000bb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bb4:	f3bf 8f6f 	isb	sy
}
 8000bb8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bba:	4b32      	ldr	r3, [pc, #200]	@ (8000c84 <main+0x100>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a31      	ldr	r2, [pc, #196]	@ (8000c84 <main+0x100>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc6:	f3bf 8f4f 	dsb	sy
}
 8000bca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bcc:	f3bf 8f6f 	isb	sy
}
 8000bd0:	e000      	b.n	8000bd4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bd2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <main+0x100>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d138      	bne.n	8000c52 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <main+0x100>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000be8:	f3bf 8f4f 	dsb	sy
}
 8000bec:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bee:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <main+0x100>)
 8000bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bf4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	0b5b      	lsrs	r3, r3, #13
 8000bfa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bfe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c08:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	015a      	lsls	r2, r3, #5
 8000c0e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000c12:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c18:	491a      	ldr	r1, [pc, #104]	@ (8000c84 <main+0x100>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1ef      	bne.n	8000c0a <main+0x86>
    } while(sets-- != 0U);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	60ba      	str	r2, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1e5      	bne.n	8000c00 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <main+0x100>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a11      	ldr	r2, [pc, #68]	@ (8000c84 <main+0x100>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c44:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
}
 8000c4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4c:	f3bf 8f6f 	isb	sy
}
 8000c50:	e000      	b.n	8000c54 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c52:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fd4c 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f816 	bl	8000c88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c5c:	f000 f8c2 	bl	8000de4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f7ff fe00 	bl	8000864 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c64:	f000 f934 	bl	8000ed0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c68:	f000 f988 	bl	8000f7c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000c6c:	f000 fc64 	bl	8001538 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c70:	f7ff fee0 	bl	8000a34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c74:	f006 fa7e 	bl	8007174 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c78:	f7ff fc98 	bl	80005ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c7c:	f006 fa9e 	bl	80071bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <main+0xfc>
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09e      	sub	sp, #120	@ 0x78
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c92:	224c      	movs	r2, #76	@ 0x4c
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00a fa4f 	bl	800b13a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00a fa48 	bl	800b13a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000caa:	2002      	movs	r0, #2
 8000cac:	f001 ff26 	bl	8002afc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b48      	ldr	r3, [pc, #288]	@ (8000dd8 <SystemClock_Config+0x150>)
 8000cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb8:	4a47      	ldr	r2, [pc, #284]	@ (8000dd8 <SystemClock_Config+0x150>)
 8000cba:	f023 0301 	bic.w	r3, r3, #1
 8000cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cc0:	4b45      	ldr	r3, [pc, #276]	@ (8000dd8 <SystemClock_Config+0x150>)
 8000cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b44      	ldr	r3, [pc, #272]	@ (8000ddc <SystemClock_Config+0x154>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a43      	ldr	r2, [pc, #268]	@ (8000ddc <SystemClock_Config+0x154>)
 8000cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <SystemClock_Config+0x154>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce2:	bf00      	nop
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <SystemClock_Config+0x154>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf0:	d1f8      	bne.n	8000ce4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8000de0 <SystemClock_Config+0x158>)
 8000cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf8:	4a39      	ldr	r2, [pc, #228]	@ (8000de0 <SystemClock_Config+0x158>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d02:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <SystemClock_Config+0x158>)
 8000d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4b31      	ldr	r3, [pc, #196]	@ (8000ddc <SystemClock_Config+0x154>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a30      	ldr	r2, [pc, #192]	@ (8000ddc <SystemClock_Config+0x154>)
 8000d1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <SystemClock_Config+0x154>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd8 <SystemClock_Config+0x150>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd8 <SystemClock_Config+0x150>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <SystemClock_Config+0x150>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d42:	bf00      	nop
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <SystemClock_Config+0x154>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d50:	d1f8      	bne.n	8000d44 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d60:	2302      	movs	r3, #2
 8000d62:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d64:	2305      	movs	r3, #5
 8000d66:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d68:	23c0      	movs	r3, #192	@ 0xc0
 8000d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000d70:	2314      	movs	r3, #20
 8000d72:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fef1 	bl	8002b70 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000d94:	f000 f896 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	233f      	movs	r3, #63	@ 0x3f
 8000d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000da4:	2308      	movs	r3, #8
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000da8:	2340      	movs	r3, #64	@ 0x40
 8000daa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dac:	2340      	movs	r3, #64	@ 0x40
 8000dae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db6:	2340      	movs	r3, #64	@ 0x40
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 fb2f 	bl	8003424 <HAL_RCC_ClockConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000dcc:	f000 f87a 	bl	8000ec4 <Error_Handler>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3778      	adds	r7, #120	@ 0x78
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58000400 	.word	0x58000400
 8000ddc:	58024800 	.word	0x58024800
 8000de0:	58024400 	.word	0x58024400

08000de4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0b0      	sub	sp, #192	@ 0xc0
 8000de8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	22c0      	movs	r2, #192	@ 0xc0
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00a f9a2 	bl	800b13a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8000df6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000e02:	2319      	movs	r3, #25
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000e06:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 feb1 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000e38:	f000 f844 	bl	8000ec4 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	37c0      	adds	r7, #192	@ 0xc0
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e56:	f000 fdb7 	bl	80019c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000e62:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000e66:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e74:	2303      	movs	r3, #3
 8000e76:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fdd4 	bl	8001a38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e90:	2004      	movs	r0, #4
 8000e92:	f000 fdb1 	bl	80019f8 <HAL_MPU_Enable>

}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eb2:	f000 fc59 	bl	8001768 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40001000 	.word	0x40001000

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ed4:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000ed6:	4a28      	ldr	r2, [pc, #160]	@ (8000f78 <MX_SPI1_Init+0xa8>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000edc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000ee4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ee8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eea:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000efe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f28:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <MX_SPI1_Init+0xa4>)
 8000f62:	f004 f985 	bl	8005270 <HAL_SPI_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f6c:	f7ff ffaa 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400029c 	.word	0x2400029c
 8000f78:	40013000 	.word	0x40013000

08000f7c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000f82:	4a29      	ldr	r2, [pc, #164]	@ (8001028 <MX_SPI2_Init+0xac>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000f88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000f90:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f94:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f96:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000f98:	220f      	movs	r2, #15
 8000f9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f9c:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000f9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fa2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fb4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8001006:	2200      	movs	r2, #0
 8001008:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_SPI2_Init+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_SPI2_Init+0xa8>)
 8001012:	f004 f92d 	bl	8005270 <HAL_SPI_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 800101c:	f7ff ff52 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24000324 	.word	0x24000324
 8001028:	40003800 	.word	0x40003800

0800102c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	@ 0x30
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a34      	ldr	r2, [pc, #208]	@ (800111c <HAL_SPI_MspInit+0xf0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12e      	bne.n	80010ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800104e:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 8001050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001054:	4a32      	ldr	r2, [pc, #200]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 8001056:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800105a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 8001060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800108a:	23a0      	movs	r3, #160	@ 0xa0
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109a:	2305      	movs	r3, #5
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	481f      	ldr	r0, [pc, #124]	@ (8001124 <HAL_SPI_MspInit+0xf8>)
 80010a6:	f000 fd07 	bl	8001ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010aa:	e032      	b.n	8001112 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_SPI_MspInit+0xfc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12d      	bne.n	8001112 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 80010b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010bc:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 80010be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 80010c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010da:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_SPI_MspInit+0xf4>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010f2:	2306      	movs	r3, #6
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001102:	2305      	movs	r3, #5
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	@ (800112c <HAL_SPI_MspInit+0x100>)
 800110e:	f000 fcd3 	bl	8001ab8 <HAL_GPIO_Init>
}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40013000 	.word	0x40013000
 8001120:	58024400 	.word	0x58024400
 8001124:	58020000 	.word	0x58020000
 8001128:	40003800 	.word	0x40003800
 800112c:	58022000 	.word	0x58022000

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_MspInit+0x38>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_MspInit+0x38>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_MspInit+0x38>)
 8001148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	210f      	movs	r1, #15
 8001158:	f06f 0001 	mvn.w	r0, #1
 800115c:	f000 fc0c 	bl	8001978 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b090      	sub	sp, #64	@ 0x40
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	d827      	bhi.n	80011ca <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800117a:	2200      	movs	r2, #0
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	2036      	movs	r0, #54	@ 0x36
 8001180:	f000 fbfa 	bl	8001978 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001184:	2036      	movs	r0, #54	@ 0x36
 8001186:	f000 fc11 	bl	80019ac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800118a:	4a29      	ldr	r2, [pc, #164]	@ (8001230 <HAL_InitTick+0xc4>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <HAL_InitTick+0xc8>)
 8001192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001196:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <HAL_InitTick+0xc8>)
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011a0:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <HAL_InitTick+0xc8>)
 80011a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ae:	f107 0210 	add.w	r2, r7, #16
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fca9 	bl	8003b10 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <HAL_InitTick+0x6a>
 80011c8:	e001      	b.n	80011ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e02b      	b.n	8001226 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ce:	f002 fc89 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 80011d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80011d4:	e004      	b.n	80011e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011d6:	f002 fc85 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 80011da:	4603      	mov	r3, r0
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011e2:	4a15      	ldr	r2, [pc, #84]	@ (8001238 <HAL_InitTick+0xcc>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	0c9b      	lsrs	r3, r3, #18
 80011ea:	3b01      	subs	r3, #1
 80011ec:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <HAL_InitTick+0xd0>)
 80011f0:	4a13      	ldr	r2, [pc, #76]	@ (8001240 <HAL_InitTick+0xd4>)
 80011f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_InitTick+0xd0>)
 80011f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011fc:	4a0f      	ldr	r2, [pc, #60]	@ (800123c <HAL_InitTick+0xd0>)
 80011fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001200:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_InitTick+0xd0>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <HAL_InitTick+0xd0>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800120e:	480b      	ldr	r0, [pc, #44]	@ (800123c <HAL_InitTick+0xd0>)
 8001210:	f004 fe9b 	bl	8005f4a <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d104      	bne.n	8001224 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800121a:	4808      	ldr	r0, [pc, #32]	@ (800123c <HAL_InitTick+0xd0>)
 800121c:	f004 fef6 	bl	800600c <HAL_TIM_Base_Start_IT>
 8001220:	4603      	mov	r3, r0
 8001222:	e000      	b.n	8001226 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	3740      	adds	r7, #64	@ 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	24000008 	.word	0x24000008
 8001234:	58024400 	.word	0x58024400
 8001238:	431bde83 	.word	0x431bde83
 800123c:	240003ac 	.word	0x240003ac
 8001240:	40001000 	.word	0x40001000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800127e:	2040      	movs	r0, #64	@ 0x40
 8001280:	f000 fdfd 	bl	8001e7e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <TIM6_DAC_IRQHandler+0x10>)
 800128e:	f005 f89b 	bl	80063c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	240003ac 	.word	0x240003ac

0800129c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return 1;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_kill>:

int _kill(int pid, int sig)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012b6:	f009 ff93 	bl	800b1e0 <__errno>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2216      	movs	r2, #22
 80012be:	601a      	str	r2, [r3, #0]
  return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_exit>:

void _exit (int status)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ffe7 	bl	80012ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80012de:	bf00      	nop
 80012e0:	e7fd      	b.n	80012de <_exit+0x12>

080012e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e00a      	b.n	800130a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012f4:	f3af 8000 	nop.w
 80012f8:	4601      	mov	r1, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	60ba      	str	r2, [r7, #8]
 8001300:	b2ca      	uxtb	r2, r1
 8001302:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	dbf0      	blt.n	80012f4 <_read+0x12>
  }

  return len;
 8001312:	687b      	ldr	r3, [r7, #4]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e009      	b.n	8001342 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	60ba      	str	r2, [r7, #8]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbf1      	blt.n	800132e <_write+0x12>
  }
  return len;
 800134a:	687b      	ldr	r3, [r7, #4]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_close>:

int _close(int file)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800137c:	605a      	str	r2, [r3, #4]
  return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_isatty>:

int _isatty(int file)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001394:	2301      	movs	r3, #1
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	@ (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f009 fef8 	bl	800b1e0 <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	24080000 	.word	0x24080000
 800141c:	00000400 	.word	0x00000400
 8001420:	240003f8 	.word	0x240003f8
 8001424:	24005390 	.word	0x24005390

08001428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800142c:	4b37      	ldr	r3, [pc, #220]	@ (800150c <SystemInit+0xe4>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001432:	4a36      	ldr	r2, [pc, #216]	@ (800150c <SystemInit+0xe4>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800143c:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <SystemInit+0xe8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	2b06      	cmp	r3, #6
 8001446:	d807      	bhi.n	8001458 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001448:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <SystemInit+0xe8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 030f 	bic.w	r3, r3, #15
 8001450:	4a2f      	ldr	r2, [pc, #188]	@ (8001510 <SystemInit+0xe8>)
 8001452:	f043 0307 	orr.w	r3, r3, #7
 8001456:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <SystemInit+0xec>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2d      	ldr	r2, [pc, #180]	@ (8001514 <SystemInit+0xec>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <SystemInit+0xec>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <SystemInit+0xec>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4929      	ldr	r1, [pc, #164]	@ (8001514 <SystemInit+0xec>)
 8001470:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <SystemInit+0xf0>)
 8001472:	4013      	ands	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001476:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <SystemInit+0xe8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <SystemInit+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 030f 	bic.w	r3, r3, #15
 800148a:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <SystemInit+0xe8>)
 800148c:	f043 0307 	orr.w	r3, r3, #7
 8001490:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <SystemInit+0xec>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <SystemInit+0xec>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <SystemInit+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <SystemInit+0xec>)
 80014a6:	4a1d      	ldr	r2, [pc, #116]	@ (800151c <SystemInit+0xf4>)
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <SystemInit+0xec>)
 80014ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <SystemInit+0xf8>)
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <SystemInit+0xec>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <SystemInit+0xfc>)
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <SystemInit+0xec>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <SystemInit+0xec>)
 80014be:	4a19      	ldr	r2, [pc, #100]	@ (8001524 <SystemInit+0xfc>)
 80014c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <SystemInit+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <SystemInit+0xec>)
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <SystemInit+0xfc>)
 80014cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <SystemInit+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <SystemInit+0xec>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001514 <SystemInit+0xec>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <SystemInit+0xec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <SystemInit+0x100>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <SystemInit+0x104>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014f2:	d202      	bcs.n	80014fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <SystemInit+0x108>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <SystemInit+0x10c>)
 80014fc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001500:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	52002000 	.word	0x52002000
 8001514:	58024400 	.word	0x58024400
 8001518:	eaf6ed7f 	.word	0xeaf6ed7f
 800151c:	02020200 	.word	0x02020200
 8001520:	01ff0000 	.word	0x01ff0000
 8001524:	01010280 	.word	0x01010280
 8001528:	5c001000 	.word	0x5c001000
 800152c:	ffff0000 	.word	0xffff0000
 8001530:	51008108 	.word	0x51008108
 8001534:	52004000 	.word	0x52004000

08001538 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001564:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 8001566:	2200      	movs	r2, #0
 8001568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 8001572:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001584:	4818      	ldr	r0, [pc, #96]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 8001586:	f004 fdb9 	bl	80060fc <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001590:	f7ff fc98 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 80015a4:	f005 fcf6 	bl	8006f94 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80015ae:	f7ff fc89 	bl	8000ec4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	@ 0x60
 80015b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 80015b6:	f242 3327 	movw	r3, #8999	@ 0x2327
 80015ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 80015cc:	f005 f804 	bl	80065d8 <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80015d6:	f7ff fc75 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015da:	4803      	ldr	r0, [pc, #12]	@ (80015e8 <MX_TIM2_Init+0xb0>)
 80015dc:	f000 f826 	bl	800162c <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	240003fc 	.word	0x240003fc

080015ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fc:	d10e      	bne.n	800161c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_TIM_PWM_MspInit+0x3c>)
 8001600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001604:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_TIM_PWM_MspInit+0x3c>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_TIM_PWM_MspInit+0x3c>)
 8001610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	58024400 	.word	0x58024400

0800162c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800164c:	d11e      	bne.n	800168c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_TIM_MspPostInit+0x68>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001654:	4a0f      	ldr	r2, [pc, #60]	@ (8001694 <HAL_TIM_MspPostInit+0x68>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_TIM_MspPostInit+0x68>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166c:	2301      	movs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	4804      	ldr	r0, [pc, #16]	@ (8001698 <HAL_TIM_MspPostInit+0x6c>)
 8001688:	f000 fa16 	bl	8001ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	58024400 	.word	0x58024400
 8001698:	58020000 	.word	0x58020000

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a0:	f7ff fec2 	bl	8001428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	@ (80016dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f009 fd8f 	bl	800b1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fa59 	bl	8000b84 <main>
  bx  lr
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016dc:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 80016e0:	0800ee90 	.word	0x0800ee90
  ldr r2, =_sbss
 80016e4:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 80016e8:	24005390 	.word	0x24005390

080016ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC3_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 f933 	bl	8001962 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016fc:	f002 f848 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_Init+0x68>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	4913      	ldr	r1, [pc, #76]	@ (800175c <HAL_Init+0x6c>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_Init+0x68>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_Init+0x6c>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <HAL_Init+0x70>)
 8001732:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_Init+0x74>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	200f      	movs	r0, #15
 800173c:	f7ff fd16 	bl	800116c <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e002      	b.n	8001750 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800174a:	f7ff fcf1 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58024400 	.word	0x58024400
 800175c:	0800d2fc 	.word	0x0800d2fc
 8001760:	24000004 	.word	0x24000004
 8001764:	24000000 	.word	0x24000000

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	@ (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2400000c 	.word	0x2400000c
 800178c:	24000448 	.word	0x24000448

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	24000448 	.word	0x24000448

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_Delay+0x44>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2400000c 	.word	0x2400000c

080017f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetREVID+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0c1b      	lsrs	r3, r3, #16
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	5c001000 	.word	0x5c001000

08001808 <__NVIC_SetPriorityGrouping>:
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <__NVIC_SetPriorityGrouping+0x40>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	4313      	orrs	r3, r2
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x40>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00
 800184c:	05fa0000 	.word	0x05fa0000

08001850 <__NVIC_GetPriorityGrouping>:
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	@ (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	@ (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	@ 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff4c 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001986:	f7ff ff63 	bl	8001850 <__NVIC_GetPriorityGrouping>
 800198a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	6978      	ldr	r0, [r7, #20]
 8001992:	f7ff ffb3 	bl	80018fc <NVIC_EncodePriority>
 8001996:	4602      	mov	r2, r0
 8001998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff82 	bl	80018a8 <__NVIC_SetPriority>
}
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff56 	bl	800186c <__NVIC_EnableIRQ>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019cc:	f3bf 8f5f 	dmb	sy
}
 80019d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_MPU_Disable+0x28>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <HAL_MPU_Disable+0x28>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_MPU_Disable+0x2c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	e000ed90 	.word	0xe000ed90

080019f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_MPU_Enable+0x38>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_MPU_Enable+0x3c>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	4a09      	ldr	r2, [pc, #36]	@ (8001a34 <HAL_MPU_Enable+0x3c>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a16:	f3bf 8f4f 	dsb	sy
}
 8001a1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a1c:	f3bf 8f6f 	isb	sy
}
 8001a20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed90 	.word	0xe000ed90
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	785a      	ldrb	r2, [r3, #1]
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a46:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a54:	4a17      	ldr	r2, [pc, #92]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7adb      	ldrb	r3, [r3, #11]
 8001a66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7a9b      	ldrb	r3, [r3, #10]
 8001a6e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7b5b      	ldrb	r3, [r3, #13]
 8001a76:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7b9b      	ldrb	r3, [r3, #14]
 8001a7e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7bdb      	ldrb	r3, [r3, #15]
 8001a86:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7a5b      	ldrb	r3, [r3, #9]
 8001a8e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7a1b      	ldrb	r3, [r3, #8]
 8001a96:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a98:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa0:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aa2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa4:	6113      	str	r3, [r2, #16]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed90 	.word	0xe000ed90

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ac6:	4b89      	ldr	r3, [pc, #548]	@ (8001cec <HAL_GPIO_Init+0x234>)
 8001ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aca:	e194      	b.n	8001df6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8186 	beq.w	8001df0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d005      	beq.n	8001afc <HAL_GPIO_Init+0x44>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d017      	beq.n	8001b9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d123      	bne.n	8001bee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	69b9      	ldr	r1, [r7, #24]
 8001bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0203 	and.w	r2, r3, #3
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80e0 	beq.w	8001df0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c30:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <HAL_GPIO_Init+0x238>)
 8001c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c36:	4a2e      	ldr	r2, [pc, #184]	@ (8001cf0 <HAL_GPIO_Init+0x238>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <HAL_GPIO_Init+0x238>)
 8001c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4e:	4a29      	ldr	r2, [pc, #164]	@ (8001cf4 <HAL_GPIO_Init+0x23c>)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a20      	ldr	r2, [pc, #128]	@ (8001cf8 <HAL_GPIO_Init+0x240>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d052      	beq.n	8001d20 <HAL_GPIO_Init+0x268>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_GPIO_Init+0x244>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d031      	beq.n	8001ce6 <HAL_GPIO_Init+0x22e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <HAL_GPIO_Init+0x248>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02b      	beq.n	8001ce2 <HAL_GPIO_Init+0x22a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d04 <HAL_GPIO_Init+0x24c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d025      	beq.n	8001cde <HAL_GPIO_Init+0x226>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <HAL_GPIO_Init+0x250>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01f      	beq.n	8001cda <HAL_GPIO_Init+0x222>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <HAL_GPIO_Init+0x254>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x21e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d10 <HAL_GPIO_Init+0x258>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x21a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_GPIO_Init+0x25c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x216>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <HAL_GPIO_Init+0x260>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x212>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_GPIO_Init+0x264>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x20e>
 8001cc2:	2309      	movs	r3, #9
 8001cc4:	e02d      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	e02b      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cca:	2308      	movs	r3, #8
 8001ccc:	e029      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e027      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	e025      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	e023      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e021      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e01f      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e01d      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e01b      	b.n	8001d22 <HAL_GPIO_Init+0x26a>
 8001cea:	bf00      	nop
 8001cec:	58000080 	.word	0x58000080
 8001cf0:	58024400 	.word	0x58024400
 8001cf4:	58000400 	.word	0x58000400
 8001cf8:	58020000 	.word	0x58020000
 8001cfc:	58020400 	.word	0x58020400
 8001d00:	58020800 	.word	0x58020800
 8001d04:	58020c00 	.word	0x58020c00
 8001d08:	58021000 	.word	0x58021000
 8001d0c:	58021400 	.word	0x58021400
 8001d10:	58021800 	.word	0x58021800
 8001d14:	58021c00 	.word	0x58021c00
 8001d18:	58022000 	.word	0x58022000
 8001d1c:	58022400 	.word	0x58022400
 8001d20:	2300      	movs	r3, #0
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	f002 0203 	and.w	r2, r2, #3
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d32:	4938      	ldr	r1, [pc, #224]	@ (8001e14 <HAL_GPIO_Init+0x35c>)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f ae63 	bne.w	8001acc <HAL_GPIO_Init+0x14>
  }
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	3724      	adds	r7, #36	@ 0x24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	58000400 	.word	0x58000400

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fcc7 	bl	8000838 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e08b      	b.n	8001fde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fdea 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	@ 0x24
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d108      	bne.n	8001f56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	e007      	b.n	8001f66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_I2C_Init+0x134>)
 8001f72:	430b      	orrs	r3, r1
 8001f74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69d9      	ldr	r1, [r3, #28]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	02008000 	.word	0x02008000

08001fec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	817b      	strh	r3, [r7, #10]
 8001ffe:	460b      	mov	r3, r1
 8002000:	813b      	strh	r3, [r7, #8]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	f040 80f9 	bne.w	8002206 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_I2C_Mem_Write+0x34>
 800201a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002026:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0ed      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_I2C_Mem_Write+0x4e>
 8002036:	2302      	movs	r3, #2
 8002038:	e0e6      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002042:	f7ff fba5 	bl	8001790 <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2319      	movs	r3, #25
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fac3 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0d1      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2221      	movs	r2, #33	@ 0x21
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800208c:	88f8      	ldrh	r0, [r7, #6]
 800208e:	893a      	ldrh	r2, [r7, #8]
 8002090:	8979      	ldrh	r1, [r7, #10]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4603      	mov	r3, r0
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f9d3 	bl	8002448 <I2C_RequestMemoryWrite>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0a9      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2bff      	cmp	r3, #255	@ 0xff
 80020bc:	d90e      	bls.n	80020dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	22ff      	movs	r2, #255	@ 0xff
 80020c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fc47 	bl	8002968 <I2C_TransferConfig>
 80020da:	e00f      	b.n	80020fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	8979      	ldrh	r1, [r7, #10]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fc36 	bl	8002968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fac6 	bl	8002692 <I2C_WaitOnTXISFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e07b      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d034      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d130      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002158:	2200      	movs	r2, #0
 800215a:	2180      	movs	r1, #128	@ 0x80
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fa3f 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e04d      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002170:	b29b      	uxth	r3, r3
 8002172:	2bff      	cmp	r3, #255	@ 0xff
 8002174:	d90e      	bls.n	8002194 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	22ff      	movs	r2, #255	@ 0xff
 800217a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	b2da      	uxtb	r2, r3
 8002182:	8979      	ldrh	r1, [r7, #10]
 8002184:	2300      	movs	r3, #0
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fbeb 	bl	8002968 <I2C_TransferConfig>
 8002192:	e00f      	b.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fbda 	bl	8002968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d19e      	bne.n	80020fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 faac 	bl	8002720 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01a      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2220      	movs	r2, #32
 80021d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_I2C_Mem_Write+0x224>)
 80021e6:	400b      	ands	r3, r1
 80021e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	fe00e800 	.word	0xfe00e800

08002214 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b20      	cmp	r3, #32
 8002238:	f040 80fd 	bne.w	8002436 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_I2C_Mem_Read+0x34>
 8002242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800224e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0f1      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_I2C_Mem_Read+0x4e>
 800225e:	2302      	movs	r3, #2
 8002260:	e0ea      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800226a:	f7ff fa91 	bl	8001790 <HAL_GetTick>
 800226e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9af 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0d5      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2222      	movs	r2, #34	@ 0x22
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2240      	movs	r2, #64	@ 0x40
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b4:	88f8      	ldrh	r0, [r7, #6]
 80022b6:	893a      	ldrh	r2, [r7, #8]
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	4603      	mov	r3, r0
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f913 	bl	80024f0 <I2C_RequestMemoryRead>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0ad      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2bff      	cmp	r3, #255	@ 0xff
 80022e4:	d90e      	bls.n	8002304 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	@ 0xff
 80022ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	4b52      	ldr	r3, [pc, #328]	@ (8002440 <HAL_I2C_Mem_Read+0x22c>)
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fb33 	bl	8002968 <I2C_TransferConfig>
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002312:	b2da      	uxtb	r2, r3
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	4b4a      	ldr	r3, [pc, #296]	@ (8002440 <HAL_I2C_Mem_Read+0x22c>)
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fb22 	bl	8002968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f956 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07c      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d034      	beq.n	80023e4 <HAL_I2C_Mem_Read+0x1d0>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d130      	bne.n	80023e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	2200      	movs	r2, #0
 800238a:	2180      	movs	r1, #128	@ 0x80
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f927 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e04d      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2bff      	cmp	r3, #255	@ 0xff
 80023a4:	d90e      	bls.n	80023c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	22ff      	movs	r2, #255	@ 0xff
 80023aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	8979      	ldrh	r1, [r7, #10]
 80023b4:	2300      	movs	r3, #0
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fad3 	bl	8002968 <I2C_TransferConfig>
 80023c2:	e00f      	b.n	80023e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fac2 	bl	8002968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d19a      	bne.n	8002324 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f994 	bl	8002720 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e01a      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2220      	movs	r2, #32
 8002408:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_I2C_Mem_Read+0x230>)
 8002416:	400b      	ands	r3, r1
 8002418:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
  }
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	80002400 	.word	0x80002400
 8002444:	fe00e800 	.word	0xfe00e800

08002448 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4603      	mov	r3, r0
 8002458:	817b      	strh	r3, [r7, #10]
 800245a:	460b      	mov	r3, r1
 800245c:	813b      	strh	r3, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <I2C_RequestMemoryWrite+0xa4>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa79 	bl	8002968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f909 	bl	8002692 <I2C_WaitOnTXISFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e02c      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28
 800249a:	e015      	b.n	80024c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800249c:	893b      	ldrh	r3, [r7, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	69b9      	ldr	r1, [r7, #24]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f8ef 	bl	8002692 <I2C_WaitOnTXISFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e012      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2200      	movs	r2, #0
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f884 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	80002000 	.word	0x80002000

080024f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <I2C_RequestMemoryRead+0xa4>)
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fa26 	bl	8002968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f8b6 	bl	8002692 <I2C_WaitOnTXISFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e02c      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002536:	893b      	ldrh	r3, [r7, #8]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002540:	e015      	b.n	800256e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002542:	893b      	ldrh	r3, [r7, #8]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	b29b      	uxth	r3, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f89c 	bl	8002692 <I2C_WaitOnTXISFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e012      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2200      	movs	r2, #0
 8002576:	2140      	movs	r1, #64	@ 0x40
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f831 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	80002000 	.word	0x80002000

08002598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d103      	bne.n	80025b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d007      	beq.n	80025d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	619a      	str	r2, [r3, #24]
  }
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f0:	e03b      	b.n	800266a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f8d6 	bl	80027a8 <I2C_IsErrorOccurred>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e041      	b.n	800268a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d02d      	beq.n	800266a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7ff f8bf 	bl	8001790 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnFlagUntilTimeout+0x44>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d122      	bne.n	800266a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4013      	ands	r3, r2
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	429a      	cmp	r2, r3
 8002632:	bf0c      	ite	eq
 8002634:	2301      	moveq	r3, #1
 8002636:	2300      	movne	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	429a      	cmp	r2, r3
 8002640:	d113      	bne.n	800266a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00f      	b.n	800268a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699a      	ldr	r2, [r3, #24]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	429a      	cmp	r2, r3
 8002686:	d0b4      	beq.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800269e:	e033      	b.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f87f 	bl	80027a8 <I2C_IsErrorOccurred>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e031      	b.n	8002718 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d025      	beq.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026bc:	f7ff f868 	bl	8001790 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d302      	bcc.n	80026d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11a      	bne.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d013      	beq.n	8002708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e4:	f043 0220 	orr.w	r2, r3, #32
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e007      	b.n	8002718 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d1c4      	bne.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272c:	e02f      	b.n	800278e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f838 	bl	80027a8 <I2C_IsErrorOccurred>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02d      	b.n	800279e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7ff f825 	bl	8001790 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11a      	bne.n	800278e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	d013      	beq.n	800278e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e007      	b.n	800279e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b20      	cmp	r3, #32
 800279a:	d1c8      	bne.n	800272e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	@ 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d068      	beq.n	80028a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2210      	movs	r2, #16
 80027da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027dc:	e049      	b.n	8002872 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d045      	beq.n	8002872 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7fe ffd3 	bl	8001790 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_IsErrorOccurred+0x54>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d13a      	bne.n	8002872 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002806:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800280e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800281a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800281e:	d121      	bne.n	8002864 <I2C_IsErrorOccurred+0xbc>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002826:	d01d      	beq.n	8002864 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b20      	cmp	r3, #32
 800282c:	d01a      	beq.n	8002864 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800283c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800283e:	f7fe ffa7 	bl	8001790 <HAL_GetTick>
 8002842:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002844:	e00e      	b.n	8002864 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002846:	f7fe ffa3 	bl	8001790 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b19      	cmp	r3, #25
 8002852:	d907      	bls.n	8002864 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	f043 0320 	orr.w	r3, r3, #32
 800285a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002862:	e006      	b.n	8002872 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b20      	cmp	r3, #32
 8002870:	d1e9      	bne.n	8002846 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b20      	cmp	r3, #32
 800287e:	d003      	beq.n	8002888 <I2C_IsErrorOccurred+0xe0>
 8002880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0aa      	beq.n	80027de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2220      	movs	r2, #32
 8002896:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01c      	beq.n	8002956 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7ff fe3b 	bl	8002598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <I2C_IsErrorOccurred+0x1bc>)
 800292e:	400b      	ands	r3, r1
 8002930:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	431a      	orrs	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800295a:	4618      	mov	r0, r3
 800295c:	3728      	adds	r7, #40	@ 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	fe00e800 	.word	0xfe00e800

08002968 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	4613      	mov	r3, r2
 8002978:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002980:	7a7b      	ldrb	r3, [r7, #9]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002988:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	4313      	orrs	r3, r2
 8002992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002996:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	0d5b      	lsrs	r3, r3, #21
 80029a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029a6:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <I2C_TransferConfig+0x60>)
 80029a8:	430b      	orrs	r3, r1
 80029aa:	43db      	mvns	r3, r3
 80029ac:	ea02 0103 	and.w	r1, r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	03ff63ff 	.word	0x03ff63ff

080029cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d138      	bne.n	8002a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e032      	b.n	8002a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	@ 0x24
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e000      	b.n	8002a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d139      	bne.n	8002aec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e033      	b.n	8002aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2224      	movs	r2, #36	@ 0x24
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b04:	4b19      	ldr	r3, [pc, #100]	@ (8002b6c <HAL_PWREx_ConfigSupply+0x70>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d00a      	beq.n	8002b26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b10:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <HAL_PWREx_ConfigSupply+0x70>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e01f      	b.n	8002b62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e01d      	b.n	8002b62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_PWREx_ConfigSupply+0x70>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	490f      	ldr	r1, [pc, #60]	@ (8002b6c <HAL_PWREx_ConfigSupply+0x70>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b36:	f7fe fe2b 	bl	8001790 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b3c:	e009      	b.n	8002b52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b3e:	f7fe fe27 	bl	8001790 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b4c:	d901      	bls.n	8002b52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e007      	b.n	8002b62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_PWREx_ConfigSupply+0x70>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	58024800 	.word	0x58024800

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	@ 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f000 bc48 	b.w	8003414 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8088 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b92:	4b99      	ldr	r3, [pc, #612]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b9c:	4b96      	ldr	r3, [pc, #600]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d007      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x48>
 8002ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002baa:	2b18      	cmp	r3, #24
 8002bac:	d111      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62>
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d06d      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x130>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d169      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f000 bc21 	b.w	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x7a>
 8002bdc:	4b86      	ldr	r3, [pc, #536]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a85      	ldr	r2, [pc, #532]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x9c>
 8002bf2:	4b81      	ldr	r3, [pc, #516]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a80      	ldr	r2, [pc, #512]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7d      	ldr	r2, [pc, #500]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c16:	4b78      	ldr	r3, [pc, #480]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a77      	ldr	r2, [pc, #476]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b75      	ldr	r3, [pc, #468]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a74      	ldr	r2, [pc, #464]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd8>
 8002c30:	4b71      	ldr	r3, [pc, #452]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a70      	ldr	r2, [pc, #448]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6d      	ldr	r2, [pc, #436]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fd9e 	bl	8001790 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fd9a 	bl	8001790 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	@ 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e3d4      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe8>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fd8a 	bl	8001790 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe fd86 	bl	8001790 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	@ 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e3c0      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c92:	4b59      	ldr	r3, [pc, #356]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x110>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80ca 	beq.w	8002e44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4b51      	ldr	r3, [pc, #324]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cba:	4b4f      	ldr	r3, [pc, #316]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x166>
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	2b18      	cmp	r3, #24
 8002cca:	d156      	bne.n	8002d7a <HAL_RCC_OscConfig+0x20a>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d151      	bne.n	8002d7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cd6:	4b48      	ldr	r3, [pc, #288]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x17e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e392      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cee:	4b42      	ldr	r3, [pc, #264]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0219 	bic.w	r2, r3, #25
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	493f      	ldr	r1, [pc, #252]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fd46 	bl	8001790 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe fd42 	bl	8001790 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e37c      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1a:	4b37      	ldr	r3, [pc, #220]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	f7fe fd63 	bl	80017f0 <HAL_GetREVID>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d817      	bhi.n	8002d64 <HAL_RCC_OscConfig+0x1f4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d108      	bne.n	8002d4e <HAL_RCC_OscConfig+0x1de>
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d44:	4a2c      	ldr	r2, [pc, #176]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	e07a      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	4926      	ldr	r1, [pc, #152]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d62:	e06f      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	4921      	ldr	r1, [pc, #132]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	e064      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d047      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d82:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0219 	bic.w	r2, r3, #25
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	491a      	ldr	r1, [pc, #104]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fcfc 	bl	8001790 <HAL_GetTick>
 8002d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fcf8 	bl	8001790 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e332      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dae:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	f7fe fd19 	bl	80017f0 <HAL_GetREVID>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d819      	bhi.n	8002dfc <HAL_RCC_OscConfig+0x28c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b40      	cmp	r3, #64	@ 0x40
 8002dce:	d108      	bne.n	8002de2 <HAL_RCC_OscConfig+0x272>
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002dd8:	4a07      	ldr	r2, [pc, #28]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dde:	6053      	str	r3, [r2, #4]
 8002de0:	e030      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	031b      	lsls	r3, r3, #12
 8002df0:	4901      	ldr	r1, [pc, #4]	@ (8002df8 <HAL_RCC_OscConfig+0x288>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
 8002df6:	e025      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
 8002df8:	58024400 	.word	0x58024400
 8002dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	4997      	ldr	r1, [pc, #604]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
 8002e10:	e018      	b.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b95      	ldr	r3, [pc, #596]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a94      	ldr	r2, [pc, #592]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fcb7 	bl	8001790 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe fcb3 	bl	8001790 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e2ed      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e38:	4b8b      	ldr	r3, [pc, #556]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a9 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e52:	4b85      	ldr	r3, [pc, #532]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e5c:	4b82      	ldr	r3, [pc, #520]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d007      	beq.n	8002e78 <HAL_RCC_OscConfig+0x308>
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b18      	cmp	r3, #24
 8002e6c:	d13a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x374>
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d135      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e78:	4b7b      	ldr	r3, [pc, #492]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_OscConfig+0x320>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2b80      	cmp	r3, #128	@ 0x80
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e2c1      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e90:	f7fe fcae 	bl	80017f0 <HAL_GetREVID>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d817      	bhi.n	8002ece <HAL_RCC_OscConfig+0x35e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x348>
 8002ea6:	4b70      	ldr	r3, [pc, #448]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002eae:	4a6e      	ldr	r2, [pc, #440]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002eb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eb6:	e075      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	4968      	ldr	r1, [pc, #416]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ecc:	e06a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ece:	4b66      	ldr	r3, [pc, #408]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	4962      	ldr	r1, [pc, #392]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee2:	e05f      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d042      	beq.n	8002f72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002eec:	4b5e      	ldr	r3, [pc, #376]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fc4a 	bl	8001790 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f00:	f7fe fc46 	bl	8001790 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e280      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f12:	4b55      	ldr	r3, [pc, #340]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f1e:	f7fe fc67 	bl	80017f0 <HAL_GetREVID>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d817      	bhi.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d108      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3d6>
 8002f34:	4b4c      	ldr	r3, [pc, #304]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f42:	6053      	str	r3, [r2, #4]
 8002f44:	e02e      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
 8002f46:	4b48      	ldr	r3, [pc, #288]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	069b      	lsls	r3, r3, #26
 8002f54:	4944      	ldr	r1, [pc, #272]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
 8002f5a:	e023      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
 8002f5c:	4b42      	ldr	r3, [pc, #264]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	493f      	ldr	r1, [pc, #252]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e018      	b.n	8002fa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f72:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fc07 	bl	8001790 <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f86:	f7fe fc03 	bl	8001790 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e23d      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f98:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d036      	beq.n	800301e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fbe4 	bl	8001790 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fbe0 	bl	8001790 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e21a      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fde:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x45c>
 8002fea:	e018      	b.n	800301e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fbca 	bl	8001790 <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003000:	f7fe fbc6 	bl	8001790 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e200      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003012:	4b15      	ldr	r3, [pc, #84]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8003014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d039      	beq.n	800309e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01c      	beq.n	800306c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003032:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800303c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800303e:	f7fe fba7 	bl	8001790 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003046:	f7fe fba3 	bl	8001790 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1dd      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <HAL_RCC_OscConfig+0x4f8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x4d6>
 8003064:	e01b      	b.n	800309e <HAL_RCC_OscConfig+0x52e>
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800306c:	4b9b      	ldr	r3, [pc, #620]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a9a      	ldr	r2, [pc, #616]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003076:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003078:	f7fe fb8a 	bl	8001790 <HAL_GetTick>
 800307c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003080:	f7fe fb86 	bl	8001790 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1c0      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003092:	4b92      	ldr	r3, [pc, #584]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8081 	beq.w	80031ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030ac:	4b8c      	ldr	r3, [pc, #560]	@ (80032e0 <HAL_RCC_OscConfig+0x770>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a8b      	ldr	r2, [pc, #556]	@ (80032e0 <HAL_RCC_OscConfig+0x770>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fb6a 	bl	8001790 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c0:	f7fe fb66 	bl	8001790 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e1a0      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d2:	4b83      	ldr	r3, [pc, #524]	@ (80032e0 <HAL_RCC_OscConfig+0x770>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x584>
 80030e6:	4b7d      	ldr	r3, [pc, #500]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	4a7c      	ldr	r2, [pc, #496]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f2:	e02d      	b.n	8003150 <HAL_RCC_OscConfig+0x5e0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <HAL_RCC_OscConfig+0x5a6>
 80030fc:	4b77      	ldr	r3, [pc, #476]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003100:	4a76      	ldr	r2, [pc, #472]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	@ 0x70
 8003108:	4b74      	ldr	r3, [pc, #464]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310c:	4a73      	ldr	r2, [pc, #460]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800310e:	f023 0304 	bic.w	r3, r3, #4
 8003112:	6713      	str	r3, [r2, #112]	@ 0x70
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x5e0>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c8>
 800311e:	4b6f      	ldr	r3, [pc, #444]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	4a6e      	ldr	r2, [pc, #440]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	6713      	str	r3, [r2, #112]	@ 0x70
 800312a:	4b6c      	ldr	r3, [pc, #432]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	4a6b      	ldr	r2, [pc, #428]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	@ 0x70
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0x5e0>
 8003138:	4b68      	ldr	r3, [pc, #416]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313c:	4a67      	ldr	r2, [pc, #412]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	@ 0x70
 8003144:	4b65      	ldr	r3, [pc, #404]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003148:	4a64      	ldr	r2, [pc, #400]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800314a:	f023 0304 	bic.w	r3, r3, #4
 800314e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fb1a 	bl	8001790 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fe fb16 	bl	8001790 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e14e      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003176:	4b59      	ldr	r3, [pc, #356]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ee      	beq.n	8003160 <HAL_RCC_OscConfig+0x5f0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fb04 	bl	8001790 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fb00 	bl	8001790 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e138      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a2:	4b4e      	ldr	r3, [pc, #312]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ee      	bne.n	800318c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 812d 	beq.w	8003412 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031b8:	4b48      	ldr	r3, [pc, #288]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031c0:	2b18      	cmp	r3, #24
 80031c2:	f000 80bd 	beq.w	8003340 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	f040 809e 	bne.w	800330c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b42      	ldr	r3, [pc, #264]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a41      	ldr	r2, [pc, #260]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fad8 	bl	8001790 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fad4 	bl	8001790 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e10e      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031f6:	4b39      	ldr	r3, [pc, #228]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003202:	4b36      	ldr	r3, [pc, #216]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003206:	4b37      	ldr	r3, [pc, #220]	@ (80032e4 <HAL_RCC_OscConfig+0x774>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	430a      	orrs	r2, r1
 8003216:	4931      	ldr	r1, [pc, #196]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	628b      	str	r3, [r1, #40]	@ 0x28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	3b01      	subs	r3, #1
 8003222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	3b01      	subs	r3, #1
 800322c:	025b      	lsls	r3, r3, #9
 800322e:	b29b      	uxth	r3, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	3b01      	subs	r3, #1
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800324c:	4923      	ldr	r1, [pc, #140]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003252:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800325e:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003262:	4b21      	ldr	r3, [pc, #132]	@ (80032e8 <HAL_RCC_OscConfig+0x778>)
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800326a:	00d2      	lsls	r2, r2, #3
 800326c:	491b      	ldr	r1, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800326e:	4313      	orrs	r3, r2
 8003270:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003272:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	f023 020c 	bic.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	4917      	ldr	r1, [pc, #92]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003280:	4313      	orrs	r3, r2
 8003282:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003284:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	f023 0202 	bic.w	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003290:	4912      	ldr	r1, [pc, #72]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	4a10      	ldr	r2, [pc, #64]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a2:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	4a0d      	ldr	r2, [pc, #52]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032ba:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032be:	4a07      	ldr	r2, [pc, #28]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c6:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a04      	ldr	r2, [pc, #16]	@ (80032dc <HAL_RCC_OscConfig+0x76c>)
 80032cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe fa5d 	bl	8001790 <HAL_GetTick>
 80032d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032d8:	e011      	b.n	80032fe <HAL_RCC_OscConfig+0x78e>
 80032da:	bf00      	nop
 80032dc:	58024400 	.word	0x58024400
 80032e0:	58024800 	.word	0x58024800
 80032e4:	fffffc0c 	.word	0xfffffc0c
 80032e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fa50 	bl	8001790 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e08a      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032fe:	4b47      	ldr	r3, [pc, #284]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x77c>
 800330a:	e082      	b.n	8003412 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b43      	ldr	r3, [pc, #268]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a42      	ldr	r2, [pc, #264]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fa3a 	bl	8001790 <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe fa36 	bl	8001790 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e070      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003332:	4b3a      	ldr	r3, [pc, #232]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x7b0>
 800333e:	e068      	b.n	8003412 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003340:	4b36      	ldr	r3, [pc, #216]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003346:	4b35      	ldr	r3, [pc, #212]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	2b01      	cmp	r3, #1
 8003352:	d031      	beq.n	80033b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d12a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d122      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d11a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0a5b      	lsrs	r3, r3, #9
 8003386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d111      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d108      	bne.n	80033b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	0e1b      	lsrs	r3, r3, #24
 80033aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e02b      	b.n	8003414 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033bc:	4b17      	ldr	r3, [pc, #92]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d01f      	beq.n	8003412 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033d2:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	4a11      	ldr	r2, [pc, #68]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033de:	f7fe f9d7 	bl	8001790 <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033e4:	bf00      	nop
 80033e6:	f7fe f9d3 	bl	8001790 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d0f9      	beq.n	80033e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033f2:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 80033f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <HAL_RCC_OscConfig+0x8b0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033fe:	00d2      	lsls	r2, r2, #3
 8003400:	4906      	ldr	r1, [pc, #24]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003402:	4313      	orrs	r3, r2
 8003404:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	4a04      	ldr	r2, [pc, #16]	@ (800341c <HAL_RCC_OscConfig+0x8ac>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3730      	adds	r7, #48	@ 0x30
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	58024400 	.word	0x58024400
 8003420:	ffff0007 	.word	0xffff0007

08003424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e19c      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b8a      	ldr	r3, [pc, #552]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b87      	ldr	r3, [pc, #540]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 020f 	bic.w	r2, r3, #15
 800344e:	4985      	ldr	r1, [pc, #532]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b83      	ldr	r3, [pc, #524]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e184      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	4b7b      	ldr	r3, [pc, #492]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003480:	429a      	cmp	r2, r3
 8003482:	d908      	bls.n	8003496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003484:	4b78      	ldr	r3, [pc, #480]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4975      	ldr	r1, [pc, #468]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003492:	4313      	orrs	r3, r2
 8003494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	4b70      	ldr	r3, [pc, #448]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d908      	bls.n	80034c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	496a      	ldr	r1, [pc, #424]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	4b64      	ldr	r3, [pc, #400]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034dc:	429a      	cmp	r2, r3
 80034de:	d908      	bls.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034e0:	4b61      	ldr	r3, [pc, #388]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	495e      	ldr	r1, [pc, #376]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	4b59      	ldr	r3, [pc, #356]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800350a:	429a      	cmp	r2, r3
 800350c:	d908      	bls.n	8003520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800350e:	4b56      	ldr	r3, [pc, #344]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4953      	ldr	r1, [pc, #332]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 800351c:	4313      	orrs	r3, r2
 800351e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	4b4d      	ldr	r3, [pc, #308]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	429a      	cmp	r2, r3
 800353a:	d908      	bls.n	800354e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b4a      	ldr	r3, [pc, #296]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f023 020f 	bic.w	r2, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4947      	ldr	r1, [pc, #284]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 800354a:	4313      	orrs	r3, r2
 800354c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d055      	beq.n	8003606 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800355a:	4b43      	ldr	r3, [pc, #268]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4940      	ldr	r1, [pc, #256]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003568:	4313      	orrs	r3, r2
 800356a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003574:	4b3c      	ldr	r3, [pc, #240]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d121      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0f6      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b03      	cmp	r3, #3
 800358a:	d107      	bne.n	800359c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358c:	4b36      	ldr	r3, [pc, #216]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d115      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0ea      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035a4:	4b30      	ldr	r3, [pc, #192]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0de      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d6      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c4:	4b28      	ldr	r3, [pc, #160]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f023 0207 	bic.w	r2, r3, #7
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4925      	ldr	r1, [pc, #148]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d6:	f7fe f8db 	bl	8001790 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7fe f8d7 	bl	8001790 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0be      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	429a      	cmp	r2, r3
 8003604:	d1eb      	bne.n	80035de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	429a      	cmp	r2, r3
 8003620:	d208      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f023 020f 	bic.w	r2, r3, #15
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	490e      	ldr	r1, [pc, #56]	@ (8003668 <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d214      	bcs.n	800366c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 020f 	bic.w	r2, r3, #15
 800364a:	4906      	ldr	r1, [pc, #24]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <HAL_RCC_ClockConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e086      	b.n	8003772 <HAL_RCC_ClockConfig+0x34e>
 8003664:	52002000 	.word	0x52002000
 8003668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	4b3f      	ldr	r3, [pc, #252]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003684:	429a      	cmp	r2, r3
 8003686:	d208      	bcs.n	800369a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003688:	4b3c      	ldr	r3, [pc, #240]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4939      	ldr	r1, [pc, #228]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 8003696:	4313      	orrs	r3, r2
 8003698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	4b34      	ldr	r3, [pc, #208]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d208      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036b6:	4b31      	ldr	r3, [pc, #196]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	492e      	ldr	r1, [pc, #184]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	4b28      	ldr	r3, [pc, #160]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d208      	bcs.n	80036f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4922      	ldr	r1, [pc, #136]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d010      	beq.n	8003724 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	4b1d      	ldr	r3, [pc, #116]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800370e:	429a      	cmp	r2, r3
 8003710:	d208      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003712:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4917      	ldr	r1, [pc, #92]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 8003720:	4313      	orrs	r3, r2
 8003722:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003724:	f000 f834 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b14      	ldr	r3, [pc, #80]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	4912      	ldr	r1, [pc, #72]	@ (8003780 <HAL_RCC_ClockConfig+0x35c>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
 8003740:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003742:	4b0e      	ldr	r3, [pc, #56]	@ (800377c <HAL_RCC_ClockConfig+0x358>)
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	4a0d      	ldr	r2, [pc, #52]	@ (8003780 <HAL_RCC_ClockConfig+0x35c>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <HAL_RCC_ClockConfig+0x360>)
 800375a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800375c:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <HAL_RCC_ClockConfig+0x364>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_RCC_ClockConfig+0x368>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fd00 	bl	800116c <HAL_InitTick>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400
 8003780:	0800d2fc 	.word	0x0800d2fc
 8003784:	24000004 	.word	0x24000004
 8003788:	24000000 	.word	0x24000000
 800378c:	24000008 	.word	0x24000008

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	@ 0x24
 8003794:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003796:	4bb3      	ldr	r3, [pc, #716]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800379e:	2b18      	cmp	r3, #24
 80037a0:	f200 8155 	bhi.w	8003a4e <HAL_RCC_GetSysClockFreq+0x2be>
 80037a4:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	08003811 	.word	0x08003811
 80037b0:	08003a4f 	.word	0x08003a4f
 80037b4:	08003a4f 	.word	0x08003a4f
 80037b8:	08003a4f 	.word	0x08003a4f
 80037bc:	08003a4f 	.word	0x08003a4f
 80037c0:	08003a4f 	.word	0x08003a4f
 80037c4:	08003a4f 	.word	0x08003a4f
 80037c8:	08003a4f 	.word	0x08003a4f
 80037cc:	08003837 	.word	0x08003837
 80037d0:	08003a4f 	.word	0x08003a4f
 80037d4:	08003a4f 	.word	0x08003a4f
 80037d8:	08003a4f 	.word	0x08003a4f
 80037dc:	08003a4f 	.word	0x08003a4f
 80037e0:	08003a4f 	.word	0x08003a4f
 80037e4:	08003a4f 	.word	0x08003a4f
 80037e8:	08003a4f 	.word	0x08003a4f
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	08003a4f 	.word	0x08003a4f
 80037f4:	08003a4f 	.word	0x08003a4f
 80037f8:	08003a4f 	.word	0x08003a4f
 80037fc:	08003a4f 	.word	0x08003a4f
 8003800:	08003a4f 	.word	0x08003a4f
 8003804:	08003a4f 	.word	0x08003a4f
 8003808:	08003a4f 	.word	0x08003a4f
 800380c:	08003843 	.word	0x08003843
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003810:	4b94      	ldr	r3, [pc, #592]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800381c:	4b91      	ldr	r3, [pc, #580]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	4a90      	ldr	r2, [pc, #576]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800382e:	e111      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003830:	4b8d      	ldr	r3, [pc, #564]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003832:	61bb      	str	r3, [r7, #24]
      break;
 8003834:	e10e      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003836:	4b8d      	ldr	r3, [pc, #564]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003838:	61bb      	str	r3, [r7, #24]
      break;
 800383a:	e10b      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800383c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800383e:	61bb      	str	r3, [r7, #24]
      break;
 8003840:	e108      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003842:	4b88      	ldr	r3, [pc, #544]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800384c:	4b85      	ldr	r3, [pc, #532]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003856:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003858:	4b82      	ldr	r3, [pc, #520]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003862:	4b80      	ldr	r3, [pc, #512]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003866:	08db      	lsrs	r3, r3, #3
 8003868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80e1 	beq.w	8003a48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b02      	cmp	r3, #2
 800388a:	f000 8083 	beq.w	8003994 <HAL_RCC_GetSysClockFreq+0x204>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b02      	cmp	r3, #2
 8003892:	f200 80a1 	bhi.w	80039d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x114>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d056      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038a2:	e099      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d02d      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	08db      	lsrs	r3, r3, #3
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038da:	4b62      	ldr	r3, [pc, #392]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800390a:	e087      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003a78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391e:	4b51      	ldr	r3, [pc, #324]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003932:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800394e:	e065      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800395e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003962:	4b40      	ldr	r3, [pc, #256]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003972:	ed97 6a02 	vldr	s12, [r7, #8]
 8003976:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800397a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003992:	e043      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003a80 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039d6:	e021      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	0a5b      	lsrs	r3, r3, #9
 8003a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a26:	3301      	adds	r3, #1
 8003a28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a40:	ee17 3a90 	vmov	r3, s15
 8003a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
      break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a4e:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a50:	61bb      	str	r3, [r7, #24]
      break;
 8003a52:	bf00      	nop
  }

  return sysclockfreq;
 8003a54:	69bb      	ldr	r3, [r7, #24]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	@ 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	58024400 	.word	0x58024400
 8003a68:	03d09000 	.word	0x03d09000
 8003a6c:	003d0900 	.word	0x003d0900
 8003a70:	017d7840 	.word	0x017d7840
 8003a74:	46000000 	.word	0x46000000
 8003a78:	4c742400 	.word	0x4c742400
 8003a7c:	4a742400 	.word	0x4a742400
 8003a80:	4bbebc20 	.word	0x4bbebc20

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a8a:	f7ff fe81 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	490f      	ldr	r1, [pc, #60]	@ (8003ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a07      	ldr	r2, [pc, #28]	@ (8003adc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ac0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ac2:	4a07      	ldr	r2, [pc, #28]	@ (8003ae0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <HAL_RCC_GetHCLKFreq+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	0800d2fc 	.word	0x0800d2fc
 8003adc:	24000004 	.word	0x24000004
 8003ae0:	24000000 	.word	0x24000000

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ae8:	f7ff ffcc 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4904      	ldr	r1, [pc, #16]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	0800d2fc 	.word	0x0800d2fc

08003b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	223f      	movs	r2, #63	@ 0x3f
 8003b1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_RCC_GetClockConfig+0x7c>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0207 	and.w	r2, r3, #7
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003b2c:	4b17      	ldr	r3, [pc, #92]	@ (8003b8c <HAL_RCC_GetClockConfig+0x7c>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <HAL_RCC_GetClockConfig+0x7c>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003b44:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <HAL_RCC_GetClockConfig+0x7c>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003b50:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <HAL_RCC_GetClockConfig+0x7c>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <HAL_RCC_GetClockConfig+0x7c>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003b68:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <HAL_RCC_GetClockConfig+0x7c>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b74:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_RCC_GetClockConfig+0x80>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 020f 	and.w	r2, r3, #15
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	601a      	str	r2, [r3, #0]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	52002000 	.word	0x52002000

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b98:	b0ca      	sub	sp, #296	@ 0x128
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003bb8:	2500      	movs	r5, #0
 8003bba:	ea54 0305 	orrs.w	r3, r4, r5
 8003bbe:	d049      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bca:	d02f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003bcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bd0:	d828      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bd6:	d01a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bdc:	d822      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003be6:	d007      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003be8:	e01c      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bea:	4bb8      	ldr	r3, [pc, #736]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bee:	4ab7      	ldr	r2, [pc, #732]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bf6:	e01a      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	2102      	movs	r1, #2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 f9d1 	bl	8004fa8 <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c0c:	e00f      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	3328      	adds	r3, #40	@ 0x28
 8003c14:	2102      	movs	r1, #2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 fa78 	bl	800510c <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c22:	e004      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c2a:	e000      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c36:	4ba5      	ldr	r3, [pc, #660]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c44:	4aa1      	ldr	r2, [pc, #644]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c4a:	e003      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c60:	f04f 0900 	mov.w	r9, #0
 8003c64:	ea58 0309 	orrs.w	r3, r8, r9
 8003c68:	d047      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d82a      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c74:	a201      	add	r2, pc, #4	@ (adr r2, 8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c91 	.word	0x08003c91
 8003c80:	08003c9f 	.word	0x08003c9f
 8003c84:	08003cb5 	.word	0x08003cb5
 8003c88:	08003cd3 	.word	0x08003cd3
 8003c8c:	08003cd3 	.word	0x08003cd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4b8e      	ldr	r3, [pc, #568]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	4a8d      	ldr	r2, [pc, #564]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c9c:	e01a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f97e 	bl	8004fa8 <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cb2:	e00f      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	3328      	adds	r3, #40	@ 0x28
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 fa25 	bl	800510c <RCCEx_PLL3_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cc8:	e004      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce0:	f023 0107 	bic.w	r1, r3, #7
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	4a78      	ldr	r2, [pc, #480]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cf0:	e003      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003d06:	f04f 0b00 	mov.w	fp, #0
 8003d0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d0e:	d04c      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d1a:	d030      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d20:	d829      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d24:	d02d      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d28:	d825      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d2a:	2b80      	cmp	r3, #128	@ 0x80
 8003d2c:	d018      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d2e:	2b80      	cmp	r3, #128	@ 0x80
 8003d30:	d821      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d36:	2b40      	cmp	r3, #64	@ 0x40
 8003d38:	d007      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d3a:	e01c      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3c:	4b63      	ldr	r3, [pc, #396]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	4a62      	ldr	r2, [pc, #392]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d48:	e01c      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	3308      	adds	r3, #8
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f928 	bl	8004fa8 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d5e:	e011      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	3328      	adds	r3, #40	@ 0x28
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 f9cf 	bl	800510c <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7c:	e002      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d90:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003db6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003dc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	d053      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003dd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dd6:	d035      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003dd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ddc:	d82e      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dde:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003de2:	d031      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003de4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003de8:	d828      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dee:	d01a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003df0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003df4:	d822      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003dfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dfe:	d007      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e00:	e01c      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e02:	4b32      	ldr	r3, [pc, #200]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	4a31      	ldr	r2, [pc, #196]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e0e:	e01c      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	3308      	adds	r3, #8
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 f8c5 	bl	8004fa8 <RCCEx_PLL2_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e24:	e011      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	3328      	adds	r3, #40	@ 0x28
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f96c 	bl	800510c <RCCEx_PLL3_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e006      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e62:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	d056      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e9e:	d038      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ea0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ea4:	d831      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ea6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eaa:	d034      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003eac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eb0:	d82b      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003eb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ebc:	d825      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d006      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ec2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ec8:	e01f      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed0:	4ba2      	ldr	r3, [pc, #648]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	4aa1      	ldr	r2, [pc, #644]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003edc:	e01c      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f85e 	bl	8004fa8 <RCCEx_PLL2_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ef2:	e011      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	3328      	adds	r3, #40	@ 0x28
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f905 	bl	800510c <RCCEx_PLL3_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f08:	e006      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f10:	e002      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f20:	4b8e      	ldr	r3, [pc, #568]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f30:	4a8a      	ldr	r2, [pc, #552]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f36:	e003      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	d03a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	2b30      	cmp	r3, #48	@ 0x30
 8003f68:	d01f      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f6a:	2b30      	cmp	r3, #48	@ 0x30
 8003f6c:	d819      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d00c      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d815      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d111      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7e:	4b77      	ldr	r3, [pc, #476]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	4a76      	ldr	r2, [pc, #472]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003f8a:	e011      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	3308      	adds	r3, #8
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 f807 	bl	8004fa8 <RCCEx_PLL2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fa0:	e006      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa8:	e002      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fb8:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc6:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fcc:	e003      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003fe2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003fec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	d051      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004000:	d035      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004006:	d82e      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004008:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800400c:	d031      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800400e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004012:	d828      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004018:	d01a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401e:	d822      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004028:	d007      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800402a:	e01c      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800402c:	4b4b      	ldr	r3, [pc, #300]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	4a4a      	ldr	r2, [pc, #296]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004038:	e01c      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	3308      	adds	r3, #8
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f000 ffb0 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800404e:	e011      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	3328      	adds	r3, #40	@ 0x28
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f001 f857 	bl	800510c <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004064:	e006      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800407c:	4b37      	ldr	r3, [pc, #220]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	4a34      	ldr	r2, [pc, #208]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80040b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80040b4:	460b      	mov	r3, r1
 80040b6:	4313      	orrs	r3, r2
 80040b8:	d056      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c4:	d033      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040ca:	d82c      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040d0:	d02f      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040d6:	d826      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040dc:	d02b      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040e2:	d820      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040e8:	d012      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80040ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040ee:	d81a      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d022      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f8:	d115      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	3308      	adds	r3, #8
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f000 ff50 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800410e:	e015      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	3328      	adds	r3, #40	@ 0x28
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fff7 	bl	800510c <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004124:	e00a      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800412c:	e006      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800413a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10d      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004144:	4b05      	ldr	r3, [pc, #20]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004148:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004152:	4a02      	ldr	r2, [pc, #8]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004154:	430b      	orrs	r3, r1
 8004156:	6513      	str	r3, [r2, #80]	@ 0x50
 8004158:	e006      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800417e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d055      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004194:	d033      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800419a:	d82c      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a0:	d02f      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a6:	d826      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041ac:	d02b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041b2:	d820      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b8:	d012      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80041ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041be:	d81a      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d022      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041c8:	d115      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3308      	adds	r3, #8
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fee8 	bl	8004fa8 <RCCEx_PLL2_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041de:	e015      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e4:	3328      	adds	r3, #40	@ 0x28
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 ff8f 	bl	800510c <RCCEx_PLL3_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041f4:	e00a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fc:	e006      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80041fe:	bf00      	nop
 8004200:	e004      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800420a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004214:	4ba3      	ldr	r3, [pc, #652]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004218:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004224:	4a9f      	ldr	r2, [pc, #636]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004226:	430b      	orrs	r3, r1
 8004228:	6593      	str	r3, [r2, #88]	@ 0x58
 800422a:	e003      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800424a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800424e:	460b      	mov	r3, r1
 8004250:	4313      	orrs	r3, r2
 8004252:	d037      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800425e:	d00e      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004264:	d816      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d018      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800426a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800426e:	d111      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004270:	4b8c      	ldr	r3, [pc, #560]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	4a8b      	ldr	r2, [pc, #556]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800427c:	e00f      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	3308      	adds	r3, #8
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe8e 	bl	8004fa8 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004292:	e004      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429a:	e000      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800429c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042a6:	4b7f      	ldr	r3, [pc, #508]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b4:	4a7b      	ldr	r2, [pc, #492]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d039      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d81c      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80042ee:	a201      	add	r2, pc, #4	@ (adr r2, 80042f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004331 	.word	0x08004331
 80042f8:	08004305 	.word	0x08004305
 80042fc:	08004313 	.word	0x08004313
 8004300:	08004331 	.word	0x08004331
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4b67      	ldr	r3, [pc, #412]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	4a66      	ldr	r2, [pc, #408]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004310:	e00f      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	3308      	adds	r3, #8
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fe44 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004326:	e004      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800433a:	4b5a      	ldr	r3, [pc, #360]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433e:	f023 0103 	bic.w	r1, r3, #3
 8004342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004348:	4a56      	ldr	r2, [pc, #344]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800434a:	430b      	orrs	r3, r1
 800434c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800434e:	e003      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800436e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	f000 809f 	beq.w	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800437a:	4b4b      	ldr	r3, [pc, #300]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a4a      	ldr	r2, [pc, #296]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004386:	f7fd fa03 	bl	8001790 <HAL_GetTick>
 800438a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438e:	e00b      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004390:	f7fd f9fe 	bl	8001790 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b64      	cmp	r3, #100	@ 0x64
 800439e:	d903      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043a6:	e005      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a8:	4b3f      	ldr	r3, [pc, #252]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ed      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80043b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d179      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043bc:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043c8:	4053      	eors	r3, r2
 80043ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d015      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043d2:	4b34      	ldr	r3, [pc, #208]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043de:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e2:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ea:	4b2e      	ldr	r3, [pc, #184]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ee:	4a2d      	ldr	r2, [pc, #180]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043f6:	4a2b      	ldr	r2, [pc, #172]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800440a:	d118      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd f9c0 	bl	8001790 <HAL_GetTick>
 8004410:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004414:	e00d      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd f9bb 	bl	8001790 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004420:	1ad2      	subs	r2, r2, r3
 8004422:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004426:	429a      	cmp	r2, r3
 8004428:	d903      	bls.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004430:	e005      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004432:	4b1c      	ldr	r3, [pc, #112]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0eb      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800443e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004442:	2b00      	cmp	r3, #0
 8004444:	d129      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800444e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004456:	d10e      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004458:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004468:	091a      	lsrs	r2, r3, #4
 800446a:	4b10      	ldr	r3, [pc, #64]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800446c:	4013      	ands	r3, r2
 800446e:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004470:	430b      	orrs	r3, r1
 8004472:	6113      	str	r3, [r2, #16]
 8004474:	e005      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800447c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004480:	6113      	str	r3, [r2, #16]
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004484:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800448e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004492:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6713      	str	r3, [r2, #112]	@ 0x70
 8004498:	e00e      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80044a2:	e009      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80044a4:	58024400 	.word	0x58024400
 80044a8:	58024800 	.word	0x58024800
 80044ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f002 0301 	and.w	r3, r2, #1
 80044c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f000 8089 	beq.w	80045ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044e0:	2b28      	cmp	r3, #40	@ 0x28
 80044e2:	d86b      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80044e4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	080045c5 	.word	0x080045c5
 80044f0:	080045bd 	.word	0x080045bd
 80044f4:	080045bd 	.word	0x080045bd
 80044f8:	080045bd 	.word	0x080045bd
 80044fc:	080045bd 	.word	0x080045bd
 8004500:	080045bd 	.word	0x080045bd
 8004504:	080045bd 	.word	0x080045bd
 8004508:	080045bd 	.word	0x080045bd
 800450c:	08004591 	.word	0x08004591
 8004510:	080045bd 	.word	0x080045bd
 8004514:	080045bd 	.word	0x080045bd
 8004518:	080045bd 	.word	0x080045bd
 800451c:	080045bd 	.word	0x080045bd
 8004520:	080045bd 	.word	0x080045bd
 8004524:	080045bd 	.word	0x080045bd
 8004528:	080045bd 	.word	0x080045bd
 800452c:	080045a7 	.word	0x080045a7
 8004530:	080045bd 	.word	0x080045bd
 8004534:	080045bd 	.word	0x080045bd
 8004538:	080045bd 	.word	0x080045bd
 800453c:	080045bd 	.word	0x080045bd
 8004540:	080045bd 	.word	0x080045bd
 8004544:	080045bd 	.word	0x080045bd
 8004548:	080045bd 	.word	0x080045bd
 800454c:	080045c5 	.word	0x080045c5
 8004550:	080045bd 	.word	0x080045bd
 8004554:	080045bd 	.word	0x080045bd
 8004558:	080045bd 	.word	0x080045bd
 800455c:	080045bd 	.word	0x080045bd
 8004560:	080045bd 	.word	0x080045bd
 8004564:	080045bd 	.word	0x080045bd
 8004568:	080045bd 	.word	0x080045bd
 800456c:	080045c5 	.word	0x080045c5
 8004570:	080045bd 	.word	0x080045bd
 8004574:	080045bd 	.word	0x080045bd
 8004578:	080045bd 	.word	0x080045bd
 800457c:	080045bd 	.word	0x080045bd
 8004580:	080045bd 	.word	0x080045bd
 8004584:	080045bd 	.word	0x080045bd
 8004588:	080045bd 	.word	0x080045bd
 800458c:	080045c5 	.word	0x080045c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004594:	3308      	adds	r3, #8
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fd05 	bl	8004fa8 <RCCEx_PLL2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045a4:	e00f      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	3328      	adds	r3, #40	@ 0x28
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fdac 	bl	800510c <RCCEx_PLL3_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045ba:	e004      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045c2:	e000      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045ce:	4bbf      	ldr	r3, [pc, #764]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045dc:	4abb      	ldr	r2, [pc, #748]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80045e2:	e003      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f002 0302 	and.w	r3, r2, #2
 80045f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045fc:	2300      	movs	r3, #0
 80045fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004602:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004606:	460b      	mov	r3, r1
 8004608:	4313      	orrs	r3, r2
 800460a:	d041      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004612:	2b05      	cmp	r3, #5
 8004614:	d824      	bhi.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004616:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	08004669 	.word	0x08004669
 8004620:	08004635 	.word	0x08004635
 8004624:	0800464b 	.word	0x0800464b
 8004628:	08004669 	.word	0x08004669
 800462c:	08004669 	.word	0x08004669
 8004630:	08004669 	.word	0x08004669
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	3308      	adds	r3, #8
 800463a:	2101      	movs	r1, #1
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fcb3 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004648:	e00f      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	3328      	adds	r3, #40	@ 0x28
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fd5a 	bl	800510c <RCCEx_PLL3_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800465e:	e004      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004672:	4b96      	ldr	r3, [pc, #600]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f023 0107 	bic.w	r1, r3, #7
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004680:	4a92      	ldr	r2, [pc, #584]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004682:	430b      	orrs	r3, r1
 8004684:	6553      	str	r3, [r2, #84]	@ 0x54
 8004686:	e003      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f002 0304 	and.w	r3, r2, #4
 800469c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d044      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d825      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046bc:	a201      	add	r2, pc, #4	@ (adr r2, 80046c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	08004711 	.word	0x08004711
 80046c8:	080046dd 	.word	0x080046dd
 80046cc:	080046f3 	.word	0x080046f3
 80046d0:	08004711 	.word	0x08004711
 80046d4:	08004711 	.word	0x08004711
 80046d8:	08004711 	.word	0x08004711
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e0:	3308      	adds	r3, #8
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fc5f 	bl	8004fa8 <RCCEx_PLL2_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046f0:	e00f      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	3328      	adds	r3, #40	@ 0x28
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fd06 	bl	800510c <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004706:	e004      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800470e:	e000      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800471a:	4b6c      	ldr	r3, [pc, #432]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800471c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471e:	f023 0107 	bic.w	r1, r3, #7
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472a:	4a68      	ldr	r2, [pc, #416]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800472c:	430b      	orrs	r3, r1
 800472e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004730:	e003      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f002 0320 	and.w	r3, r2, #32
 8004746:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800474a:	2300      	movs	r3, #0
 800474c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d055      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004766:	d033      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800476c:	d82c      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004772:	d02f      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d826      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800477a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800477e:	d02b      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004780:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004784:	d820      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800478a:	d012      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800478c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004790:	d81a      	bhi.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d022      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800479a:	d115      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a0:	3308      	adds	r3, #8
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fbff 	bl	8004fa8 <RCCEx_PLL2_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047b0:	e015      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	3328      	adds	r3, #40	@ 0x28
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fca6 	bl	800510c <RCCEx_PLL3_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047c6:	e00a      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ce:	e006      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047d0:	bf00      	nop
 80047d2:	e004      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047d4:	bf00      	nop
 80047d6:	e002      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047d8:	bf00      	nop
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047e6:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	4a35      	ldr	r2, [pc, #212]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004816:	2300      	movs	r3, #0
 8004818:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800481c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d058      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800482e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004832:	d033      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004834:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004838:	d82c      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800483a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483e:	d02f      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004844:	d826      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004846:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800484a:	d02b      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800484c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004850:	d820      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004852:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004856:	d012      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485c:	d81a      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d022      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004866:	d115      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	3308      	adds	r3, #8
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb99 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800487c:	e015      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004882:	3328      	adds	r3, #40	@ 0x28
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fc40 	bl	800510c <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004892:	e00a      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800489a:	e006      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800489c:	bf00      	nop
 800489e:	e004      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048a0:	bf00      	nop
 80048a2:	e002      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10e      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048c2:	4a02      	ldr	r2, [pc, #8]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048c8:	e006      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048ca:	bf00      	nop
 80048cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80048e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80048f2:	460b      	mov	r3, r1
 80048f4:	4313      	orrs	r3, r2
 80048f6:	d055      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004900:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004904:	d033      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004906:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800490a:	d82c      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800490c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004910:	d02f      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004916:	d826      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004918:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800491c:	d02b      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800491e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004922:	d820      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004928:	d012      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800492a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492e:	d81a      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d022      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004938:	d115      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493e:	3308      	adds	r3, #8
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fb30 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800494e:	e015      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004954:	3328      	adds	r3, #40	@ 0x28
 8004956:	2102      	movs	r1, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fbd7 	bl	800510c <RCCEx_PLL3_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004964:	e00a      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800496e:	bf00      	nop
 8004970:	e004      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004972:	bf00      	nop
 8004974:	e002      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800497a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800497c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004984:	4ba1      	ldr	r3, [pc, #644]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004988:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004994:	4a9d      	ldr	r2, [pc, #628]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004996:	430b      	orrs	r3, r1
 8004998:	6593      	str	r3, [r2, #88]	@ 0x58
 800499a:	e003      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f002 0308 	and.w	r3, r2, #8
 80049b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049be:	460b      	mov	r3, r1
 80049c0:	4313      	orrs	r3, r2
 80049c2:	d01e      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	3328      	adds	r3, #40	@ 0x28
 80049d8:	2102      	movs	r1, #2
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fb96 	bl	800510c <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049ec:	4b87      	ldr	r3, [pc, #540]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049fc:	4a83      	ldr	r2, [pc, #524]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f002 0310 	and.w	r3, r2, #16
 8004a0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	d01e      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a34:	3328      	adds	r3, #40	@ 0x28
 8004a36:	2102      	movs	r1, #2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fb67 	bl	800510c <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a4a:	4b70      	ldr	r3, [pc, #448]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	d03e      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a8c:	d022      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a92:	d81b      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004a9e:	e015      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fa7d 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ab4:	e00f      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aba:	3328      	adds	r3, #40	@ 0x28
 8004abc:	2102      	movs	r1, #2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fb24 	bl	800510c <RCCEx_PLL3_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aca:	e004      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10b      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ade:	4b4b      	ldr	r3, [pc, #300]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aee:	4a47      	ldr	r2, [pc, #284]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004af4:	e003      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b14:	460b      	mov	r3, r1
 8004b16:	4313      	orrs	r3, r2
 8004b18:	d03b      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b26:	d01f      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b2c:	d818      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b32:	d003      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b38:	d007      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b3a:	e011      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3c:	4b33      	ldr	r3, [pc, #204]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	4a32      	ldr	r2, [pc, #200]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b48:	e00f      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	3328      	adds	r3, #40	@ 0x28
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fada 	bl	800510c <RCCEx_PLL3_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b5e:	e004      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b72:	4b26      	ldr	r3, [pc, #152]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	4a22      	ldr	r2, [pc, #136]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b88:	e003      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ba4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4313      	orrs	r3, r2
 8004bac:	d034      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbc:	d007      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004bbe:	e011      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc0:	4b12      	ldr	r3, [pc, #72]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	4a11      	ldr	r2, [pc, #68]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bcc:	e00e      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f9e6 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004be2:	e003      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10d      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bf4:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c02:	4a02      	ldr	r2, [pc, #8]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c08:	e006      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c0a:	bf00      	nop
 8004c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c26:	2300      	movs	r3, #0
 8004c28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d00c      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	3328      	adds	r3, #40	@ 0x28
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fa65 	bl	800510c <RCCEx_PLL3_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c64:	460b      	mov	r3, r1
 8004c66:	4313      	orrs	r3, r2
 8004c68:	d038      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c76:	d018      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c7c:	d811      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c82:	d014      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c88:	d80b      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d011      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c94:	4bc3      	ldr	r3, [pc, #780]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	4ac2      	ldr	r2, [pc, #776]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ca8:	e004      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004caa:	bf00      	nop
 8004cac:	e002      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cbc:	4bb9      	ldr	r3, [pc, #740]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ccc:	4ab5      	ldr	r2, [pc, #724]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cd2:	e003      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ce8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cea:	2300      	movs	r3, #0
 8004cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cf8:	4baa      	ldr	r3, [pc, #680]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d06:	4aa7      	ldr	r2, [pc, #668]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004d18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d22:	460b      	mov	r3, r1
 8004d24:	4313      	orrs	r3, r2
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d28:	4b9e      	ldr	r3, [pc, #632]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d38:	4a9a      	ldr	r2, [pc, #616]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d54:	460b      	mov	r3, r1
 8004d56:	4313      	orrs	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d5a:	4b92      	ldr	r3, [pc, #584]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d68:	4a8e      	ldr	r2, [pc, #568]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d00e      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d8a:	4b86      	ldr	r3, [pc, #536]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	4a85      	ldr	r2, [pc, #532]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d94:	6113      	str	r3, [r2, #16]
 8004d96:	4b83      	ldr	r3, [pc, #524]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d98:	6919      	ldr	r1, [r3, #16]
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004da2:	4a80      	ldr	r2, [pc, #512]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004db6:	2300      	movs	r3, #0
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004dc4:	4b77      	ldr	r3, [pc, #476]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd2:	4a74      	ldr	r2, [pc, #464]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de6:	2300      	movs	r3, #0
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004dee:	460b      	mov	r3, r1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004df4:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e04:	4a67      	ldr	r2, [pc, #412]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e06:	430b      	orrs	r3, r1
 8004e08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	2100      	movs	r1, #0
 8004e14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e20:	460b      	mov	r3, r1
 8004e22:	4313      	orrs	r3, r2
 8004e24:	d011      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f8ba 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	2100      	movs	r1, #0
 8004e54:	6239      	str	r1, [r7, #32]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e60:	460b      	mov	r3, r1
 8004e62:	4313      	orrs	r3, r2
 8004e64:	d011      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f89a 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	2100      	movs	r1, #0
 8004e94:	61b9      	str	r1, [r7, #24]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d011      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eaa:	3308      	adds	r3, #8
 8004eac:	2102      	movs	r1, #2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f87a 	bl	8004fa8 <RCCEx_PLL2_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6139      	str	r1, [r7, #16]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	d011      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eea:	3328      	adds	r3, #40	@ 0x28
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f90c 	bl	800510c <RCCEx_PLL3_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	2100      	movs	r1, #0
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f20:	460b      	mov	r3, r1
 8004f22:	4313      	orrs	r3, r2
 8004f24:	d011      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2a:	3328      	adds	r3, #40	@ 0x28
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f8ec 	bl	800510c <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	2100      	movs	r1, #0
 8004f54:	6039      	str	r1, [r7, #0]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f60:	460b      	mov	r3, r1
 8004f62:	4313      	orrs	r3, r2
 8004f64:	d011      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6a:	3328      	adds	r3, #40	@ 0x28
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f8cc 	bl	800510c <RCCEx_PLL3_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004f8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e000      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fa4:	58024400 	.word	0x58024400

08004fa8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fb6:	4b53      	ldr	r3, [pc, #332]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d101      	bne.n	8004fc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e099      	b.n	80050fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a4e      	ldr	r2, [pc, #312]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8004fcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd2:	f7fc fbdd 	bl	8001790 <HAL_GetTick>
 8004fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fda:	f7fc fbd9 	bl	8001790 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e086      	b.n	80050fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fec:	4b45      	ldr	r3, [pc, #276]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ff8:	4b42      	ldr	r3, [pc, #264]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	031b      	lsls	r3, r3, #12
 8005006:	493f      	ldr	r1, [pc, #252]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	628b      	str	r3, [r1, #40]	@ 0x28
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	3b01      	subs	r3, #1
 8005012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	3b01      	subs	r3, #1
 800501c:	025b      	lsls	r3, r3, #9
 800501e:	b29b      	uxth	r3, r3
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	3b01      	subs	r3, #1
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	3b01      	subs	r3, #1
 8005036:	061b      	lsls	r3, r3, #24
 8005038:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800503c:	4931      	ldr	r1, [pc, #196]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005042:	4b30      	ldr	r3, [pc, #192]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	492d      	ldr	r1, [pc, #180]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005054:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	f023 0220 	bic.w	r2, r3, #32
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4928      	ldr	r1, [pc, #160]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005066:	4b27      	ldr	r3, [pc, #156]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	4a26      	ldr	r2, [pc, #152]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 800506c:	f023 0310 	bic.w	r3, r3, #16
 8005070:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005072:	4b24      	ldr	r3, [pc, #144]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005076:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <RCCEx_PLL2_Config+0x160>)
 8005078:	4013      	ands	r3, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	69d2      	ldr	r2, [r2, #28]
 800507e:	00d2      	lsls	r2, r2, #3
 8005080:	4920      	ldr	r1, [pc, #128]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005082:	4313      	orrs	r3, r2
 8005084:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005086:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	4a1e      	ldr	r2, [pc, #120]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 800508c:	f043 0310 	orr.w	r3, r3, #16
 8005090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005098:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	4a19      	ldr	r2, [pc, #100]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 800509e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050a4:	e00f      	b.n	80050c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d106      	bne.n	80050ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050ac:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	4a14      	ldr	r2, [pc, #80]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 80050b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b8:	e005      	b.n	80050c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050ba:	4b12      	ldr	r3, [pc, #72]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	4a11      	ldr	r2, [pc, #68]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d2:	f7fc fb5d 	bl	8001790 <HAL_GetTick>
 80050d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050d8:	e008      	b.n	80050ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050da:	f7fc fb59 	bl	8001790 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050ec:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	58024400 	.word	0x58024400
 8005108:	ffff0007 	.word	0xffff0007

0800510c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800511a:	4b53      	ldr	r3, [pc, #332]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b03      	cmp	r3, #3
 8005124:	d101      	bne.n	800512a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e099      	b.n	800525e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800512a:	4b4f      	ldr	r3, [pc, #316]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a4e      	ldr	r2, [pc, #312]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005136:	f7fc fb2b 	bl	8001790 <HAL_GetTick>
 800513a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800513c:	e008      	b.n	8005150 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800513e:	f7fc fb27 	bl	8001790 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e086      	b.n	800525e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005150:	4b45      	ldr	r3, [pc, #276]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f0      	bne.n	800513e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800515c:	4b42      	ldr	r3, [pc, #264]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	051b      	lsls	r3, r3, #20
 800516a:	493f      	ldr	r1, [pc, #252]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	3b01      	subs	r3, #1
 8005176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	3b01      	subs	r3, #1
 8005180:	025b      	lsls	r3, r3, #9
 8005182:	b29b      	uxth	r3, r3
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	3b01      	subs	r3, #1
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	3b01      	subs	r3, #1
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051a0:	4931      	ldr	r1, [pc, #196]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051a6:	4b30      	ldr	r3, [pc, #192]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	492d      	ldr	r1, [pc, #180]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	4928      	ldr	r1, [pc, #160]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051ca:	4b27      	ldr	r3, [pc, #156]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	4a26      	ldr	r2, [pc, #152]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051d6:	4b24      	ldr	r3, [pc, #144]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051da:	4b24      	ldr	r3, [pc, #144]	@ (800526c <RCCEx_PLL3_Config+0x160>)
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	69d2      	ldr	r2, [r2, #28]
 80051e2:	00d2      	lsls	r2, r2, #3
 80051e4:	4920      	ldr	r1, [pc, #128]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005202:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005206:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005208:	e00f      	b.n	800522a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d106      	bne.n	800521e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005210:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	4a14      	ldr	r2, [pc, #80]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005216:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800521a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800521c:	e005      	b.n	800522a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800521e:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	4a11      	ldr	r2, [pc, #68]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005224:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005228:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800522a:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a0e      	ldr	r2, [pc, #56]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005236:	f7fc faab 	bl	8001790 <HAL_GetTick>
 800523a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800523c:	e008      	b.n	8005250 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800523e:	f7fc faa7 	bl	8001790 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e006      	b.n	800525e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005250:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <RCCEx_PLL3_Config+0x15c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	58024400 	.word	0x58024400
 800526c:	ffff0007 	.word	0xffff0007

08005270 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e10f      	b.n	80054a2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a87      	ldr	r2, [pc, #540]	@ (80054ac <HAL_SPI_Init+0x23c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00f      	beq.n	80052b2 <HAL_SPI_Init+0x42>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a86      	ldr	r2, [pc, #536]	@ (80054b0 <HAL_SPI_Init+0x240>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00a      	beq.n	80052b2 <HAL_SPI_Init+0x42>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a84      	ldr	r2, [pc, #528]	@ (80054b4 <HAL_SPI_Init+0x244>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d005      	beq.n	80052b2 <HAL_SPI_Init+0x42>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	d901      	bls.n	80052b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0f7      	b.n	80054a2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fe2e 	bl	8005f14 <SPI_GetPacketSize>
 80052b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a7b      	ldr	r2, [pc, #492]	@ (80054ac <HAL_SPI_Init+0x23c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00c      	beq.n	80052de <HAL_SPI_Init+0x6e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a79      	ldr	r2, [pc, #484]	@ (80054b0 <HAL_SPI_Init+0x240>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <HAL_SPI_Init+0x6e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a78      	ldr	r2, [pc, #480]	@ (80054b4 <HAL_SPI_Init+0x244>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d002      	beq.n	80052de <HAL_SPI_Init+0x6e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d811      	bhi.n	8005302 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052e2:	4a72      	ldr	r2, [pc, #456]	@ (80054ac <HAL_SPI_Init+0x23c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a70      	ldr	r2, [pc, #448]	@ (80054b0 <HAL_SPI_Init+0x240>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_SPI_Init+0x8c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6f      	ldr	r2, [pc, #444]	@ (80054b4 <HAL_SPI_Init+0x244>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d104      	bne.n	8005306 <HAL_SPI_Init+0x96>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d901      	bls.n	8005306 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0cd      	b.n	80054a2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fb fe86 	bl	800102c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005342:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800534c:	d119      	bne.n	8005382 <HAL_SPI_Init+0x112>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005356:	d103      	bne.n	8005360 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10c      	bne.n	8005382 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800536c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005370:	d107      	bne.n	8005382 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00f      	beq.n	80053ae <HAL_SPI_Init+0x13e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2b06      	cmp	r3, #6
 8005394:	d90b      	bls.n	80053ae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	e007      	b.n	80053be <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c6:	431a      	orrs	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	ea42 0103 	orr.w	r1, r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541e:	ea42 0103 	orr.w	r1, r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d113      	bne.n	800545e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005448:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800545c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40013000 	.word	0x40013000
 80054b0:	40003800 	.word	0x40003800
 80054b4:	40003c00 	.word	0x40003c00

080054b8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3320      	adds	r3, #32
 80054ce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d0:	f7fc f95e 	bl	8001790 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
 80054e4:	e1d1      	b.n	800588a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit+0x3a>
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e1c9      	b.n	800588a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_SPI_Transmit+0x4c>
 8005500:	2302      	movs	r3, #2
 8005502:	e1c2      	b.n	800588a <HAL_SPI_Transmit+0x3d2>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2203      	movs	r2, #3
 8005510:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	88fa      	ldrh	r2, [r7, #6]
 800552e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800555c:	d108      	bne.n	8005570 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e009      	b.n	8005584 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005582:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	4b96      	ldr	r3, [pc, #600]	@ (80057e4 <HAL_SPI_Transmit+0x32c>)
 800558c:	4013      	ands	r3, r2
 800558e:	88f9      	ldrh	r1, [r7, #6]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	430b      	orrs	r3, r1
 8005596:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055b0:	d107      	bne.n	80055c2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	d947      	bls.n	800565a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80055ca:	e03f      	b.n	800564c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d114      	bne.n	8005604 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005602:	e023      	b.n	800564c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005604:	f7fc f8c4 	bl	8001790 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d803      	bhi.n	800561c <HAL_SPI_Transmit+0x164>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d102      	bne.n	8005622 <HAL_SPI_Transmit+0x16a>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d114      	bne.n	800564c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fba8 	bl	8005d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e11e      	b.n	800588a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1b9      	bne.n	80055cc <HAL_SPI_Transmit+0x114>
 8005658:	e0f1      	b.n	800583e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b07      	cmp	r3, #7
 8005660:	f240 80e6 	bls.w	8005830 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005664:	e05d      	b.n	8005722 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b02      	cmp	r3, #2
 8005672:	d132      	bne.n	80056da <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d918      	bls.n	80056b2 <HAL_SPI_Transmit+0x1fa>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d014      	beq.n	80056b2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005698:	1d1a      	adds	r2, r3, #4
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b02      	subs	r3, #2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056b0:	e037      	b.n	8005722 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b6:	881a      	ldrh	r2, [r3, #0]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056d8:	e023      	b.n	8005722 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056da:	f7fc f859 	bl	8001790 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d803      	bhi.n	80056f2 <HAL_SPI_Transmit+0x23a>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Transmit+0x240>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d114      	bne.n	8005722 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fb3d 	bl	8005d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005704:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0b3      	b.n	800588a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d19b      	bne.n	8005666 <HAL_SPI_Transmit+0x1ae>
 800572e:	e086      	b.n	800583e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b02      	cmp	r3, #2
 800573c:	d154      	bne.n	80057e8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b03      	cmp	r3, #3
 8005748:	d918      	bls.n	800577c <HAL_SPI_Transmit+0x2c4>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574e:	2b40      	cmp	r3, #64	@ 0x40
 8005750:	d914      	bls.n	800577c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005762:	1d1a      	adds	r2, r3, #4
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b04      	subs	r3, #4
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800577a:	e059      	b.n	8005830 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d917      	bls.n	80057b8 <HAL_SPI_Transmit+0x300>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005794:	881a      	ldrh	r2, [r3, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579e:	1c9a      	adds	r2, r3, #2
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b02      	subs	r3, #2
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80057b6:	e03b      	b.n	8005830 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3320      	adds	r3, #32
 80057c2:	7812      	ldrb	r2, [r2, #0]
 80057c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80057e2:	e025      	b.n	8005830 <HAL_SPI_Transmit+0x378>
 80057e4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e8:	f7fb ffd2 	bl	8001790 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d803      	bhi.n	8005800 <HAL_SPI_Transmit+0x348>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fe:	d102      	bne.n	8005806 <HAL_SPI_Transmit+0x34e>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d114      	bne.n	8005830 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fab6 	bl	8005d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005812:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e02c      	b.n	800588a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	f47f af79 	bne.w	8005730 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2200      	movs	r2, #0
 8005846:	2108      	movs	r1, #8
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fb35 	bl	8005eb8 <SPI_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fa87 	bl	8005d78 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005888:	2300      	movs	r3, #0
  }
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop

08005894 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3330      	adds	r3, #48	@ 0x30
 80058b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058b8:	f7fb ff6a 	bl	8001790 <HAL_GetTick>
 80058bc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d001      	beq.n	80058ce <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
 80058cc:	e250      	b.n	8005d70 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_SPI_Receive+0x46>
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e248      	b.n	8005d70 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_SPI_Receive+0x58>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e241      	b.n	8005d70 <HAL_SPI_Receive+0x4dc>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2204      	movs	r2, #4
 80058f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	88fa      	ldrh	r2, [r7, #6]
 800590e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	88fa      	ldrh	r2, [r7, #6]
 8005916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005944:	d108      	bne.n	8005958 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e009      	b.n	800596c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800596a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	4b95      	ldr	r3, [pc, #596]	@ (8005bc8 <HAL_SPI_Receive+0x334>)
 8005974:	4013      	ands	r3, r2
 8005976:	88f9      	ldrh	r1, [r7, #6]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	430b      	orrs	r3, r1
 800597e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005998:	d107      	bne.n	80059aa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	d96c      	bls.n	8005a8c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80059b2:	e064      	b.n	8005a7e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d114      	bne.n	80059f4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80059f2:	e044      	b.n	8005a7e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8bfa      	ldrh	r2, [r7, #30]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d919      	bls.n	8005a36 <HAL_SPI_Receive+0x1a2>
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d014      	beq.n	8005a36 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a16:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a34:	e023      	b.n	8005a7e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a36:	f7fb feab 	bl	8001790 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d803      	bhi.n	8005a4e <HAL_SPI_Receive+0x1ba>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d102      	bne.n	8005a54 <HAL_SPI_Receive+0x1c0>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d114      	bne.n	8005a7e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f98f 	bl	8005d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e178      	b.n	8005d70 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d194      	bne.n	80059b4 <HAL_SPI_Receive+0x120>
 8005a8a:	e15e      	b.n	8005d4a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	f240 8153 	bls.w	8005d3c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005a96:	e08f      	b.n	8005bb8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d114      	bne.n	8005ad8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	b292      	uxth	r2, r2
 8005ab8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005ad6:	e06f      	b.n	8005bb8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8bfa      	ldrh	r2, [r7, #30]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d924      	bls.n	8005b30 <HAL_SPI_Receive+0x29c>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01f      	beq.n	8005b30 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	8812      	ldrh	r2, [r2, #0]
 8005af8:	b292      	uxth	r2, r2
 8005afa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	8812      	ldrh	r2, [r2, #0]
 8005b0e:	b292      	uxth	r2, r2
 8005b10:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b16:	1c9a      	adds	r2, r3, #2
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b02      	subs	r3, #2
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005b2e:	e043      	b.n	8005bb8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d119      	bne.n	8005b70 <HAL_SPI_Receive+0x2dc>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d014      	beq.n	8005b70 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	8812      	ldrh	r2, [r2, #0]
 8005b4e:	b292      	uxth	r2, r2
 8005b50:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b56:	1c9a      	adds	r2, r3, #2
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005b6e:	e023      	b.n	8005bb8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b70:	f7fb fe0e 	bl	8001790 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d803      	bhi.n	8005b88 <HAL_SPI_Receive+0x2f4>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b86:	d102      	bne.n	8005b8e <HAL_SPI_Receive+0x2fa>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d114      	bne.n	8005bb8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f8f2 	bl	8005d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e0db      	b.n	8005d70 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f af69 	bne.w	8005a98 <HAL_SPI_Receive+0x204>
 8005bc6:	e0c0      	b.n	8005d4a <HAL_SPI_Receive+0x4b6>
 8005bc8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d117      	bne.n	8005c12 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bee:	7812      	ldrb	r2, [r2, #0]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005c10:	e094      	b.n	8005d3c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8bfa      	ldrh	r2, [r7, #30]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d946      	bls.n	8005cae <HAL_SPI_Receive+0x41a>
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d041      	beq.n	8005cae <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c52:	7812      	ldrb	r2, [r2, #0]
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b04      	subs	r3, #4
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005cac:	e046      	b.n	8005d3c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d81c      	bhi.n	8005cf4 <HAL_SPI_Receive+0x460>
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005cf2:	e023      	b.n	8005d3c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf4:	f7fb fd4c 	bl	8001790 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d803      	bhi.n	8005d0c <HAL_SPI_Receive+0x478>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d102      	bne.n	8005d12 <HAL_SPI_Receive+0x47e>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d114      	bne.n	8005d3c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f830 	bl	8005d78 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e019      	b.n	8005d70 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f47f af41 	bne.w	8005bcc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f814 	bl	8005d78 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0208 	orr.w	r2, r2, #8
 8005d96:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0210 	orr.w	r2, r2, #16
 8005da6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6919      	ldr	r1, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb4 <SPI_CloseTransfer+0x13c>)
 8005dc4:	400b      	ands	r3, r1
 8005dc6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005dd6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d014      	beq.n	8005e0e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00f      	beq.n	8005e0e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0220 	orr.w	r2, r2, #32
 8005e0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d014      	beq.n	8005e44 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00f      	beq.n	8005e44 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e2a:	f043 0204 	orr.w	r2, r3, #4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00f      	beq.n	8005e6e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00f      	beq.n	8005e98 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e7e:	f043 0208 	orr.w	r2, r3, #8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	fffffc90 	.word	0xfffffc90

08005eb8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ec8:	e010      	b.n	8005eec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eca:	f7fb fc61 	bl	8001790 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d803      	bhi.n	8005ee2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d102      	bne.n	8005ee8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e00f      	b.n	8005f0c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d0df      	beq.n	8005eca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	3307      	adds	r3, #7
 8005f32:	08db      	lsrs	r3, r3, #3
 8005f34:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e049      	b.n	8005ff0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f841 	bl	8005ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f000 fc61 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d001      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e054      	b.n	80060ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a26      	ldr	r2, [pc, #152]	@ (80060dc <HAL_TIM_Base_Start_IT+0xd0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604e:	d01d      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a22      	ldr	r2, [pc, #136]	@ (80060e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	@ (80060e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1f      	ldr	r2, [pc, #124]	@ (80060e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1e      	ldr	r2, [pc, #120]	@ (80060ec <HAL_TIM_Base_Start_IT+0xe0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1c      	ldr	r2, [pc, #112]	@ (80060f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d115      	bne.n	80060b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <HAL_TIM_Base_Start_IT+0xec>)
 8006094:	4013      	ands	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d015      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0xbe>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d011      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0201 	orr.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	e008      	b.n	80060ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e000      	b.n	80060cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40001800 	.word	0x40001800
 80060f4:	40014000 	.word	0x40014000
 80060f8:	00010007 	.word	0x00010007

080060fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e049      	b.n	80061a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fa62 	bl	80015ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f000 fb88 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_TIM_PWM_Start+0x24>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e03c      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d109      	bne.n	80061ea <HAL_TIM_PWM_Start+0x3e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e02f      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d109      	bne.n	8006204 <HAL_TIM_PWM_Start+0x58>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e022      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d109      	bne.n	800621e <HAL_TIM_PWM_Start+0x72>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b01      	cmp	r3, #1
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	e015      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b10      	cmp	r3, #16
 8006222:	d109      	bne.n	8006238 <HAL_TIM_PWM_Start+0x8c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e008      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e0a1      	b.n	8006396 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <HAL_TIM_PWM_Start+0xb6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006260:	e023      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Start+0xc6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006270:	e01b      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Start+0xd6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006280:	e013      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b0c      	cmp	r3, #12
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xe6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006290:	e00b      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b10      	cmp	r3, #16
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Start+0xf6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062a0:	e003      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fe48 	bl	8006f48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a38      	ldr	r2, [pc, #224]	@ (80063a0 <HAL_TIM_PWM_Start+0x1f4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIM_PWM_Start+0x13e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a37      	ldr	r2, [pc, #220]	@ (80063a4 <HAL_TIM_PWM_Start+0x1f8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIM_PWM_Start+0x13e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a35      	ldr	r2, [pc, #212]	@ (80063a8 <HAL_TIM_PWM_Start+0x1fc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIM_PWM_Start+0x13e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a34      	ldr	r2, [pc, #208]	@ (80063ac <HAL_TIM_PWM_Start+0x200>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIM_PWM_Start+0x13e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a32      	ldr	r2, [pc, #200]	@ (80063b0 <HAL_TIM_PWM_Start+0x204>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_Start+0x142>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <HAL_TIM_PWM_Start+0x144>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006302:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a25      	ldr	r2, [pc, #148]	@ (80063a0 <HAL_TIM_PWM_Start+0x1f4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d022      	beq.n	8006354 <HAL_TIM_PWM_Start+0x1a8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006316:	d01d      	beq.n	8006354 <HAL_TIM_PWM_Start+0x1a8>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a25      	ldr	r2, [pc, #148]	@ (80063b4 <HAL_TIM_PWM_Start+0x208>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d018      	beq.n	8006354 <HAL_TIM_PWM_Start+0x1a8>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a24      	ldr	r2, [pc, #144]	@ (80063b8 <HAL_TIM_PWM_Start+0x20c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d013      	beq.n	8006354 <HAL_TIM_PWM_Start+0x1a8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a22      	ldr	r2, [pc, #136]	@ (80063bc <HAL_TIM_PWM_Start+0x210>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <HAL_TIM_PWM_Start+0x1a8>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1a      	ldr	r2, [pc, #104]	@ (80063a4 <HAL_TIM_PWM_Start+0x1f8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d009      	beq.n	8006354 <HAL_TIM_PWM_Start+0x1a8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1e      	ldr	r2, [pc, #120]	@ (80063c0 <HAL_TIM_PWM_Start+0x214>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_TIM_PWM_Start+0x1a8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <HAL_TIM_PWM_Start+0x1fc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d115      	bne.n	8006380 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	4b1a      	ldr	r3, [pc, #104]	@ (80063c4 <HAL_TIM_PWM_Start+0x218>)
 800635c:	4013      	ands	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b06      	cmp	r3, #6
 8006364:	d015      	beq.n	8006392 <HAL_TIM_PWM_Start+0x1e6>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800636c:	d011      	beq.n	8006392 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0201 	orr.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637e:	e008      	b.n	8006392 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e000      	b.n	8006394 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40014400 	.word	0x40014400
 80063b0:	40014800 	.word	0x40014800
 80063b4:	40000400 	.word	0x40000400
 80063b8:	40000800 	.word	0x40000800
 80063bc:	40000c00 	.word	0x40000c00
 80063c0:	40001800 	.word	0x40001800
 80063c4:	00010007 	.word	0x00010007

080063c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d020      	beq.n	800642c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0202 	mvn.w	r2, #2
 80063fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9fe 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 8006418:	e005      	b.n	8006426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f9f0 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fa01 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d020      	beq.n	8006478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01b      	beq.n	8006478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0204 	mvn.w	r2, #4
 8006448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9d8 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 8006464:	e005      	b.n	8006472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9ca 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f9db 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d020      	beq.n	80064c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01b      	beq.n	80064c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0208 	mvn.w	r2, #8
 8006494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2204      	movs	r2, #4
 800649a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9b2 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9a4 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9b5 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d020      	beq.n	8006510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01b      	beq.n	8006510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0210 	mvn.w	r2, #16
 80064e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2208      	movs	r2, #8
 80064e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f98c 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 80064fc:	e005      	b.n	800650a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f97e 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f98f 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00c      	beq.n	8006534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0201 	mvn.w	r2, #1
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fa fcb6 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00c      	beq.n	8006562 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800655a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fdb1 	bl	80070c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006572:	2b00      	cmp	r3, #0
 8006574:	d007      	beq.n	8006586 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800657e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fda9 	bl	80070d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00c      	beq.n	80065aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f949 	bl	800683c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f06f 0220 	mvn.w	r2, #32
 80065c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fd71 	bl	80070b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e0ff      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b14      	cmp	r3, #20
 8006602:	f200 80f0 	bhi.w	80067e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006606:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006661 	.word	0x08006661
 8006610:	080067e7 	.word	0x080067e7
 8006614:	080067e7 	.word	0x080067e7
 8006618:	080067e7 	.word	0x080067e7
 800661c:	080066a1 	.word	0x080066a1
 8006620:	080067e7 	.word	0x080067e7
 8006624:	080067e7 	.word	0x080067e7
 8006628:	080067e7 	.word	0x080067e7
 800662c:	080066e3 	.word	0x080066e3
 8006630:	080067e7 	.word	0x080067e7
 8006634:	080067e7 	.word	0x080067e7
 8006638:	080067e7 	.word	0x080067e7
 800663c:	08006723 	.word	0x08006723
 8006640:	080067e7 	.word	0x080067e7
 8006644:	080067e7 	.word	0x080067e7
 8006648:	080067e7 	.word	0x080067e7
 800664c:	08006765 	.word	0x08006765
 8006650:	080067e7 	.word	0x080067e7
 8006654:	080067e7 	.word	0x080067e7
 8006658:	080067e7 	.word	0x080067e7
 800665c:	080067a5 	.word	0x080067a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f998 	bl	800699c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0208 	orr.w	r2, r2, #8
 800667a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0204 	bic.w	r2, r2, #4
 800668a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6999      	ldr	r1, [r3, #24]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	619a      	str	r2, [r3, #24]
      break;
 800669e:	e0a5      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fa08 	bl	8006abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6999      	ldr	r1, [r3, #24]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	021a      	lsls	r2, r3, #8
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	619a      	str	r2, [r3, #24]
      break;
 80066e0:	e084      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fa71 	bl	8006bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0208 	orr.w	r2, r2, #8
 80066fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0204 	bic.w	r2, r2, #4
 800670c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69d9      	ldr	r1, [r3, #28]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	61da      	str	r2, [r3, #28]
      break;
 8006720:	e064      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fad9 	bl	8006ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800673c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800674c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69d9      	ldr	r1, [r3, #28]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	021a      	lsls	r2, r3, #8
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	61da      	str	r2, [r3, #28]
      break;
 8006762:	e043      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fb22 	bl	8006db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0208 	orr.w	r2, r2, #8
 800677e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0204 	bic.w	r2, r2, #4
 800678e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067a2:	e023      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fb66 	bl	8006e7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	021a      	lsls	r2, r3, #8
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067e4:	e002      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop

08006800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a46      	ldr	r2, [pc, #280]	@ (800697c <TIM_Base_SetConfig+0x12c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686e:	d00f      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a43      	ldr	r2, [pc, #268]	@ (8006980 <TIM_Base_SetConfig+0x130>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a42      	ldr	r2, [pc, #264]	@ (8006984 <TIM_Base_SetConfig+0x134>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a41      	ldr	r2, [pc, #260]	@ (8006988 <TIM_Base_SetConfig+0x138>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a40      	ldr	r2, [pc, #256]	@ (800698c <TIM_Base_SetConfig+0x13c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d108      	bne.n	80068a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a35      	ldr	r2, [pc, #212]	@ (800697c <TIM_Base_SetConfig+0x12c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d01f      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b0:	d01b      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a32      	ldr	r2, [pc, #200]	@ (8006980 <TIM_Base_SetConfig+0x130>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d017      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a31      	ldr	r2, [pc, #196]	@ (8006984 <TIM_Base_SetConfig+0x134>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d013      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a30      	ldr	r2, [pc, #192]	@ (8006988 <TIM_Base_SetConfig+0x138>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00f      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2f      	ldr	r2, [pc, #188]	@ (800698c <TIM_Base_SetConfig+0x13c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00b      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006990 <TIM_Base_SetConfig+0x140>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d007      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006994 <TIM_Base_SetConfig+0x144>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_Base_SetConfig+0x9a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006998 <TIM_Base_SetConfig+0x148>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d108      	bne.n	80068fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a16      	ldr	r2, [pc, #88]	@ (800697c <TIM_Base_SetConfig+0x12c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a18      	ldr	r2, [pc, #96]	@ (800698c <TIM_Base_SetConfig+0x13c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a17      	ldr	r2, [pc, #92]	@ (8006990 <TIM_Base_SetConfig+0x140>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a16      	ldr	r2, [pc, #88]	@ (8006994 <TIM_Base_SetConfig+0x144>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <TIM_Base_SetConfig+0x148>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d103      	bne.n	8006950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b01      	cmp	r3, #1
 8006960:	d105      	bne.n	800696e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f023 0201 	bic.w	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	611a      	str	r2, [r3, #16]
  }
}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40010000 	.word	0x40010000
 8006980:	40000400 	.word	0x40000400
 8006984:	40000800 	.word	0x40000800
 8006988:	40000c00 	.word	0x40000c00
 800698c:	40010400 	.word	0x40010400
 8006990:	40014000 	.word	0x40014000
 8006994:	40014400 	.word	0x40014400
 8006998:	40014800 	.word	0x40014800

0800699c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f023 0201 	bic.w	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4b37      	ldr	r3, [pc, #220]	@ (8006aa4 <TIM_OC1_SetConfig+0x108>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f023 0302 	bic.w	r3, r3, #2
 80069e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2d      	ldr	r2, [pc, #180]	@ (8006aa8 <TIM_OC1_SetConfig+0x10c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00f      	beq.n	8006a18 <TIM_OC1_SetConfig+0x7c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a2c      	ldr	r2, [pc, #176]	@ (8006aac <TIM_OC1_SetConfig+0x110>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00b      	beq.n	8006a18 <TIM_OC1_SetConfig+0x7c>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab0 <TIM_OC1_SetConfig+0x114>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d007      	beq.n	8006a18 <TIM_OC1_SetConfig+0x7c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab4 <TIM_OC1_SetConfig+0x118>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d003      	beq.n	8006a18 <TIM_OC1_SetConfig+0x7c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a29      	ldr	r2, [pc, #164]	@ (8006ab8 <TIM_OC1_SetConfig+0x11c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d10c      	bne.n	8006a32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0308 	bic.w	r3, r3, #8
 8006a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 0304 	bic.w	r3, r3, #4
 8006a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <TIM_OC1_SetConfig+0x10c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_OC1_SetConfig+0xbe>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <TIM_OC1_SetConfig+0x110>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_OC1_SetConfig+0xbe>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab0 <TIM_OC1_SetConfig+0x114>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_OC1_SetConfig+0xbe>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	@ (8006ab4 <TIM_OC1_SetConfig+0x118>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC1_SetConfig+0xbe>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a18      	ldr	r2, [pc, #96]	@ (8006ab8 <TIM_OC1_SetConfig+0x11c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d111      	bne.n	8006a7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	fffeff8f 	.word	0xfffeff8f
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800

08006abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f023 0210 	bic.w	r2, r3, #16
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4b34      	ldr	r3, [pc, #208]	@ (8006bb8 <TIM_OC2_SetConfig+0xfc>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0320 	bic.w	r3, r3, #32
 8006b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a29      	ldr	r2, [pc, #164]	@ (8006bbc <TIM_OC2_SetConfig+0x100>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC2_SetConfig+0x68>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a28      	ldr	r2, [pc, #160]	@ (8006bc0 <TIM_OC2_SetConfig+0x104>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d10d      	bne.n	8006b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	@ (8006bbc <TIM_OC2_SetConfig+0x100>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_OC2_SetConfig+0xac>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc0 <TIM_OC2_SetConfig+0x104>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_OC2_SetConfig+0xac>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc4 <TIM_OC2_SetConfig+0x108>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_OC2_SetConfig+0xac>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc8 <TIM_OC2_SetConfig+0x10c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_OC2_SetConfig+0xac>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a1a      	ldr	r2, [pc, #104]	@ (8006bcc <TIM_OC2_SetConfig+0x110>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d113      	bne.n	8006b90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	621a      	str	r2, [r3, #32]
}
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	feff8fff 	.word	0xfeff8fff
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40010400 	.word	0x40010400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4b33      	ldr	r3, [pc, #204]	@ (8006cc8 <TIM_OC3_SetConfig+0xf8>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a28      	ldr	r2, [pc, #160]	@ (8006ccc <TIM_OC3_SetConfig+0xfc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d003      	beq.n	8006c36 <TIM_OC3_SetConfig+0x66>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a27      	ldr	r2, [pc, #156]	@ (8006cd0 <TIM_OC3_SetConfig+0x100>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d10d      	bne.n	8006c52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1d      	ldr	r2, [pc, #116]	@ (8006ccc <TIM_OC3_SetConfig+0xfc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_OC3_SetConfig+0xaa>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd0 <TIM_OC3_SetConfig+0x100>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_OC3_SetConfig+0xaa>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd4 <TIM_OC3_SetConfig+0x104>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_OC3_SetConfig+0xaa>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd8 <TIM_OC3_SetConfig+0x108>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_OC3_SetConfig+0xaa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a19      	ldr	r2, [pc, #100]	@ (8006cdc <TIM_OC3_SetConfig+0x10c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d113      	bne.n	8006ca2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	621a      	str	r2, [r3, #32]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	fffeff8f 	.word	0xfffeff8f
 8006ccc:	40010000 	.word	0x40010000
 8006cd0:	40010400 	.word	0x40010400
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800

08006ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4b24      	ldr	r3, [pc, #144]	@ (8006d9c <TIM_OC4_SetConfig+0xbc>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	031b      	lsls	r3, r3, #12
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a19      	ldr	r2, [pc, #100]	@ (8006da0 <TIM_OC4_SetConfig+0xc0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00f      	beq.n	8006d60 <TIM_OC4_SetConfig+0x80>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a18      	ldr	r2, [pc, #96]	@ (8006da4 <TIM_OC4_SetConfig+0xc4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <TIM_OC4_SetConfig+0x80>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	@ (8006da8 <TIM_OC4_SetConfig+0xc8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d007      	beq.n	8006d60 <TIM_OC4_SetConfig+0x80>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a16      	ldr	r2, [pc, #88]	@ (8006dac <TIM_OC4_SetConfig+0xcc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_OC4_SetConfig+0x80>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <TIM_OC4_SetConfig+0xd0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d109      	bne.n	8006d74 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	019b      	lsls	r3, r3, #6
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	feff8fff 	.word	0xfeff8fff
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010400 	.word	0x40010400
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40014400 	.word	0x40014400
 8006db0:	40014800 	.word	0x40014800

08006db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	4b21      	ldr	r3, [pc, #132]	@ (8006e64 <TIM_OC5_SetConfig+0xb0>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006df4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	041b      	lsls	r3, r3, #16
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a18      	ldr	r2, [pc, #96]	@ (8006e68 <TIM_OC5_SetConfig+0xb4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00f      	beq.n	8006e2a <TIM_OC5_SetConfig+0x76>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a17      	ldr	r2, [pc, #92]	@ (8006e6c <TIM_OC5_SetConfig+0xb8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00b      	beq.n	8006e2a <TIM_OC5_SetConfig+0x76>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a16      	ldr	r2, [pc, #88]	@ (8006e70 <TIM_OC5_SetConfig+0xbc>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d007      	beq.n	8006e2a <TIM_OC5_SetConfig+0x76>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a15      	ldr	r2, [pc, #84]	@ (8006e74 <TIM_OC5_SetConfig+0xc0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d003      	beq.n	8006e2a <TIM_OC5_SetConfig+0x76>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a14      	ldr	r2, [pc, #80]	@ (8006e78 <TIM_OC5_SetConfig+0xc4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d109      	bne.n	8006e3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	621a      	str	r2, [r3, #32]
}
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	fffeff8f 	.word	0xfffeff8f
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40010400 	.word	0x40010400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800

08006e7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4b22      	ldr	r3, [pc, #136]	@ (8006f30 <TIM_OC6_SetConfig+0xb4>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	021b      	lsls	r3, r3, #8
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	051b      	lsls	r3, r3, #20
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a19      	ldr	r2, [pc, #100]	@ (8006f34 <TIM_OC6_SetConfig+0xb8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00f      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x78>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a18      	ldr	r2, [pc, #96]	@ (8006f38 <TIM_OC6_SetConfig+0xbc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00b      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x78>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a17      	ldr	r2, [pc, #92]	@ (8006f3c <TIM_OC6_SetConfig+0xc0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d007      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x78>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a16      	ldr	r2, [pc, #88]	@ (8006f40 <TIM_OC6_SetConfig+0xc4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC6_SetConfig+0x78>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <TIM_OC6_SetConfig+0xc8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d109      	bne.n	8006f08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	029b      	lsls	r3, r3, #10
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	feff8fff 	.word	0xfeff8fff
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40010400 	.word	0x40010400
 8006f3c:	40014000 	.word	0x40014000
 8006f40:	40014400 	.word	0x40014400
 8006f44:	40014800 	.word	0x40014800

08006f48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1a      	ldr	r2, [r3, #32]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	43db      	mvns	r3, r3
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f80:	431a      	orrs	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e06d      	b.n	8007088 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a30      	ldr	r2, [pc, #192]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2f      	ldr	r2, [pc, #188]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d108      	bne.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fe6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a20      	ldr	r2, [pc, #128]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d022      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800701e:	d01d      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1d      	ldr	r2, [pc, #116]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d018      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1c      	ldr	r2, [pc, #112]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d013      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1a      	ldr	r2, [pc, #104]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00e      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d009      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a16      	ldr	r2, [pc, #88]	@ (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a15      	ldr	r2, [pc, #84]	@ (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d10c      	bne.n	8007076 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007062:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	4313      	orrs	r3, r2
 800706c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	40010000 	.word	0x40010000
 8007098:	40010400 	.word	0x40010400
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40001800 	.word	0x40001800
 80070ac:	40014000 	.word	0x40014000

080070b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <__NVIC_SetPriority>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	db0a      	blt.n	8007116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	b2da      	uxtb	r2, r3
 8007104:	490c      	ldr	r1, [pc, #48]	@ (8007138 <__NVIC_SetPriority+0x4c>)
 8007106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800710a:	0112      	lsls	r2, r2, #4
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	440b      	add	r3, r1
 8007110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007114:	e00a      	b.n	800712c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4908      	ldr	r1, [pc, #32]	@ (800713c <__NVIC_SetPriority+0x50>)
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	3b04      	subs	r3, #4
 8007124:	0112      	lsls	r2, r2, #4
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	440b      	add	r3, r1
 800712a:	761a      	strb	r2, [r3, #24]
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	e000e100 	.word	0xe000e100
 800713c:	e000ed00 	.word	0xe000ed00

08007140 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007144:	4b05      	ldr	r3, [pc, #20]	@ (800715c <SysTick_Handler+0x1c>)
 8007146:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007148:	f001 fd50 	bl	8008bec <xTaskGetSchedulerState>
 800714c:	4603      	mov	r3, r0
 800714e:	2b01      	cmp	r3, #1
 8007150:	d001      	beq.n	8007156 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007152:	f002 fb49 	bl	80097e8 <xPortSysTickHandler>
  }
}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	e000e010 	.word	0xe000e010

08007160 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007164:	2100      	movs	r1, #0
 8007166:	f06f 0004 	mvn.w	r0, #4
 800716a:	f7ff ffbf 	bl	80070ec <__NVIC_SetPriority>
#endif
}
 800716e:	bf00      	nop
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800717a:	f3ef 8305 	mrs	r3, IPSR
 800717e:	603b      	str	r3, [r7, #0]
  return(result);
 8007180:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007186:	f06f 0305 	mvn.w	r3, #5
 800718a:	607b      	str	r3, [r7, #4]
 800718c:	e00c      	b.n	80071a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800718e:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <osKernelInitialize+0x44>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007196:	4b08      	ldr	r3, [pc, #32]	@ (80071b8 <osKernelInitialize+0x44>)
 8007198:	2201      	movs	r2, #1
 800719a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800719c:	2300      	movs	r3, #0
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e002      	b.n	80071a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071a8:	687b      	ldr	r3, [r7, #4]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	2400044c 	.word	0x2400044c

080071bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c2:	f3ef 8305 	mrs	r3, IPSR
 80071c6:	603b      	str	r3, [r7, #0]
  return(result);
 80071c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80071ce:	f06f 0305 	mvn.w	r3, #5
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e010      	b.n	80071f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007204 <osKernelStart+0x48>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d109      	bne.n	80071f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071de:	f7ff ffbf 	bl	8007160 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071e2:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <osKernelStart+0x48>)
 80071e4:	2202      	movs	r2, #2
 80071e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071e8:	f001 f87a 	bl	80082e0 <vTaskStartScheduler>
      stat = osOK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	e002      	b.n	80071f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295
 80071f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071f8:	687b      	ldr	r3, [r7, #4]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	2400044c 	.word	0x2400044c

08007208 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b08e      	sub	sp, #56	@ 0x38
 800720c:	af04      	add	r7, sp, #16
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007218:	f3ef 8305 	mrs	r3, IPSR
 800721c:	617b      	str	r3, [r7, #20]
  return(result);
 800721e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007220:	2b00      	cmp	r3, #0
 8007222:	d17e      	bne.n	8007322 <osThreadNew+0x11a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d07b      	beq.n	8007322 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800722a:	2380      	movs	r3, #128	@ 0x80
 800722c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800722e:	2318      	movs	r3, #24
 8007230:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
 800723a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d045      	beq.n	80072ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <osThreadNew+0x48>
        name = attr->name;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <osThreadNew+0x6e>
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b38      	cmp	r3, #56	@ 0x38
 8007268:	d805      	bhi.n	8007276 <osThreadNew+0x6e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <osThreadNew+0x72>
        return (NULL);
 8007276:	2300      	movs	r3, #0
 8007278:	e054      	b.n	8007324 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	089b      	lsrs	r3, r3, #2
 8007288:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00e      	beq.n	80072b0 <osThreadNew+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b5b      	cmp	r3, #91	@ 0x5b
 8007298:	d90a      	bls.n	80072b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d006      	beq.n	80072b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <osThreadNew+0xa8>
        mem = 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e010      	b.n	80072d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10c      	bne.n	80072d2 <osThreadNew+0xca>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d108      	bne.n	80072d2 <osThreadNew+0xca>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <osThreadNew+0xca>
          mem = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e001      	b.n	80072d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d110      	bne.n	80072fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e0:	9202      	str	r2, [sp, #8]
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6a3a      	ldr	r2, [r7, #32]
 80072ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fe1a 	bl	8007f28 <xTaskCreateStatic>
 80072f4:	4603      	mov	r3, r0
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	e013      	b.n	8007322 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d110      	bne.n	8007322 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	b29a      	uxth	r2, r3
 8007304:	f107 0310 	add.w	r3, r7, #16
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fe68 	bl	8007fe8 <xTaskCreate>
 8007318:	4603      	mov	r3, r0
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <osThreadNew+0x11a>
            hTask = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007322:	693b      	ldr	r3, [r7, #16]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3728      	adds	r7, #40	@ 0x28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007334:	f3ef 8305 	mrs	r3, IPSR
 8007338:	60bb      	str	r3, [r7, #8]
  return(result);
 800733a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <osDelay+0x1c>
    stat = osErrorISR;
 8007340:	f06f 0305 	mvn.w	r3, #5
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	e007      	b.n	8007358 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 ff8e 	bl	8008274 <vTaskDelay>
    }
  }

  return (stat);
 8007358:	68fb      	ldr	r3, [r7, #12]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a07      	ldr	r2, [pc, #28]	@ (8007390 <vApplicationGetIdleTaskMemory+0x2c>)
 8007374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4a06      	ldr	r2, [pc, #24]	@ (8007394 <vApplicationGetIdleTaskMemory+0x30>)
 800737a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2280      	movs	r2, #128	@ 0x80
 8007380:	601a      	str	r2, [r3, #0]
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	24000450 	.word	0x24000450
 8007394:	240004ac 	.word	0x240004ac

08007398 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4a07      	ldr	r2, [pc, #28]	@ (80073c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80073a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	4a06      	ldr	r2, [pc, #24]	@ (80073c8 <vApplicationGetTimerTaskMemory+0x30>)
 80073ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073b6:	601a      	str	r2, [r3, #0]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	240006ac 	.word	0x240006ac
 80073c8:	24000708 	.word	0x24000708

080073cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 0208 	add.w	r2, r3, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295
 80073e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f103 0208 	add.w	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f103 0208 	add.w	r2, r3, #8
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	601a      	str	r2, [r3, #0]
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d103      	bne.n	800748e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e00c      	b.n	80074a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3308      	adds	r3, #8
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e002      	b.n	800749c <vListInsert+0x2e>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d2f6      	bcs.n	8007496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6892      	ldr	r2, [r2, #8]
 80074f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6852      	ldr	r2, [r2, #4]
 8007500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d103      	bne.n	8007514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1e5a      	subs	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	e7fd      	b.n	800755c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007560:	f002 f8b2 	bl	80096c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756c:	68f9      	ldr	r1, [r7, #12]
 800756e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	441a      	add	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	3b01      	subs	r3, #1
 8007592:	68f9      	ldr	r1, [r7, #12]
 8007594:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007596:	fb01 f303 	mul.w	r3, r1, r3
 800759a:	441a      	add	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	22ff      	movs	r2, #255	@ 0xff
 80075a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	22ff      	movs	r2, #255	@ 0xff
 80075ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d114      	bne.n	80075e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01a      	beq.n	80075f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3310      	adds	r3, #16
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 f91a 	bl	80087fc <xTaskRemoveFromEventList>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d012      	beq.n	80075f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <xQueueGenericReset+0xd0>)
 80075d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	e009      	b.n	80075f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3310      	adds	r3, #16
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fef1 	bl	80073cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3324      	adds	r3, #36	@ 0x24
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff feec 	bl	80073cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075f4:	f002 f89a 	bl	800972c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075f8:	2301      	movs	r3, #1
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	e000ed04 	.word	0xe000ed04

08007608 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08e      	sub	sp, #56	@ 0x38
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <xQueueGenericCreateStatic+0x56>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <xQueueGenericCreateStatic+0x5a>
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <xQueueGenericCreateStatic+0x5c>
 8007662:	2300      	movs	r3, #0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10b      	bne.n	8007680 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	623b      	str	r3, [r7, #32]
}
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	e7fd      	b.n	800767c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <xQueueGenericCreateStatic+0x84>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <xQueueGenericCreateStatic+0x88>
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <xQueueGenericCreateStatic+0x8a>
 8007690:	2300      	movs	r3, #0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10b      	bne.n	80076ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	61fb      	str	r3, [r7, #28]
}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	e7fd      	b.n	80076aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076ae:	2350      	movs	r3, #80	@ 0x50
 80076b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b50      	cmp	r3, #80	@ 0x50
 80076b6:	d00b      	beq.n	80076d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	61bb      	str	r3, [r7, #24]
}
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	e7fd      	b.n	80076cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80076d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00d      	beq.n	80076f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80076e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f805 	bl	8007702 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3730      	adds	r7, #48	@ 0x30
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
 800770e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d103      	bne.n	800771e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e002      	b.n	8007724 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007730:	2101      	movs	r1, #1
 8007732:	69b8      	ldr	r0, [r7, #24]
 8007734:	f7ff fefe 	bl	8007534 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	78fa      	ldrb	r2, [r7, #3]
 800773c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08e      	sub	sp, #56	@ 0x38
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007756:	2300      	movs	r3, #0
 8007758:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10b      	bne.n	800777c <xQueueGenericSend+0x34>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	e7fd      	b.n	8007778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <xQueueGenericSend+0x42>
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <xQueueGenericSend+0x46>
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <xQueueGenericSend+0x48>
 800778e:	2300      	movs	r3, #0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <xQueueGenericSend+0x64>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d103      	bne.n	80077ba <xQueueGenericSend+0x72>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <xQueueGenericSend+0x76>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <xQueueGenericSend+0x78>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10b      	bne.n	80077dc <xQueueGenericSend+0x94>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	623b      	str	r3, [r7, #32]
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077dc:	f001 fa06 	bl	8008bec <xTaskGetSchedulerState>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d102      	bne.n	80077ec <xQueueGenericSend+0xa4>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <xQueueGenericSend+0xa8>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <xQueueGenericSend+0xaa>
 80077f0:	2300      	movs	r3, #0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10b      	bne.n	800780e <xQueueGenericSend+0xc6>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	61fb      	str	r3, [r7, #28]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800780e:	f001 ff5b 	bl	80096c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	429a      	cmp	r2, r3
 800781c:	d302      	bcc.n	8007824 <xQueueGenericSend+0xdc>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d129      	bne.n	8007878 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800782a:	f000 fa0f 	bl	8007c4c <prvCopyDataToQueue>
 800782e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d010      	beq.n	800785a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	3324      	adds	r3, #36	@ 0x24
 800783c:	4618      	mov	r0, r3
 800783e:	f000 ffdd 	bl	80087fc <xTaskRemoveFromEventList>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d013      	beq.n	8007870 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007848:	4b3f      	ldr	r3, [pc, #252]	@ (8007948 <xQueueGenericSend+0x200>)
 800784a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	e00a      	b.n	8007870 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007860:	4b39      	ldr	r3, [pc, #228]	@ (8007948 <xQueueGenericSend+0x200>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007870:	f001 ff5c 	bl	800972c <vPortExitCritical>
				return pdPASS;
 8007874:	2301      	movs	r3, #1
 8007876:	e063      	b.n	8007940 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800787e:	f001 ff55 	bl	800972c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007882:	2300      	movs	r3, #0
 8007884:	e05c      	b.n	8007940 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800788c:	f107 0314 	add.w	r3, r7, #20
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f817 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007896:	2301      	movs	r3, #1
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800789a:	f001 ff47 	bl	800972c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800789e:	f000 fd87 	bl	80083b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078a2:	f001 ff11 	bl	80096c8 <vPortEnterCritical>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d103      	bne.n	80078bc <xQueueGenericSend+0x174>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d103      	bne.n	80078d2 <xQueueGenericSend+0x18a>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078d2:	f001 ff2b 	bl	800972c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078d6:	1d3a      	adds	r2, r7, #4
 80078d8:	f107 0314 	add.w	r3, r7, #20
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 f806 	bl	80088f0 <xTaskCheckForTimeOut>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d124      	bne.n	8007934 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078ec:	f000 faa6 	bl	8007e3c <prvIsQueueFull>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d018      	beq.n	8007928 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	3310      	adds	r3, #16
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 ff2a 	bl	8008758 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007906:	f000 fa31 	bl	8007d6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800790a:	f000 fd5f 	bl	80083cc <xTaskResumeAll>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	f47f af7c 	bne.w	800780e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007916:	4b0c      	ldr	r3, [pc, #48]	@ (8007948 <xQueueGenericSend+0x200>)
 8007918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	e772      	b.n	800780e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800792a:	f000 fa1f 	bl	8007d6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800792e:	f000 fd4d 	bl	80083cc <xTaskResumeAll>
 8007932:	e76c      	b.n	800780e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007936:	f000 fa19 	bl	8007d6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800793a:	f000 fd47 	bl	80083cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800793e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007940:	4618      	mov	r0, r3
 8007942:	3738      	adds	r7, #56	@ 0x38
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b090      	sub	sp, #64	@ 0x40
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <xQueueGenericSendFromISR+0x3e>
 8007982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <xQueueGenericSendFromISR+0x42>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <xQueueGenericSendFromISR+0x44>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10b      	bne.n	80079ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d103      	bne.n	80079ba <xQueueGenericSendFromISR+0x6e>
 80079b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d101      	bne.n	80079be <xQueueGenericSendFromISR+0x72>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e000      	b.n	80079c0 <xQueueGenericSendFromISR+0x74>
 80079be:	2300      	movs	r3, #0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10b      	bne.n	80079dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	623b      	str	r3, [r7, #32]
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	e7fd      	b.n	80079d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079dc:	f001 ff54 	bl	8009888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079e0:	f3ef 8211 	mrs	r2, BASEPRI
 80079e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	61fa      	str	r2, [r7, #28]
 80079f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d302      	bcc.n	8007a0e <xQueueGenericSendFromISR+0xc2>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d12f      	bne.n	8007a6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a24:	f000 f912 	bl	8007c4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d112      	bne.n	8007a58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d016      	beq.n	8007a68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3c:	3324      	adds	r3, #36	@ 0x24
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fedc 	bl	80087fc <xTaskRemoveFromEventList>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	e007      	b.n	8007a68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	b25a      	sxtb	r2, r3
 8007a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a6c:	e001      	b.n	8007a72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3740      	adds	r7, #64	@ 0x40
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08c      	sub	sp, #48	@ 0x30
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <xQueueReceive+0x32>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	623b      	str	r3, [r7, #32]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <xQueueReceive+0x40>
 8007ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <xQueueReceive+0x44>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e000      	b.n	8007ace <xQueueReceive+0x46>
 8007acc:	2300      	movs	r3, #0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <xQueueReceive+0x62>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	61fb      	str	r3, [r7, #28]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aea:	f001 f87f 	bl	8008bec <xTaskGetSchedulerState>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <xQueueReceive+0x72>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <xQueueReceive+0x76>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <xQueueReceive+0x78>
 8007afe:	2300      	movs	r3, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10b      	bne.n	8007b1c <xQueueReceive+0x94>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	61bb      	str	r3, [r7, #24]
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	e7fd      	b.n	8007b18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b1c:	f001 fdd4 	bl	80096c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01f      	beq.n	8007b6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b30:	f000 f8f6 	bl	8007d20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b36:	1e5a      	subs	r2, r3, #1
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b46:	3310      	adds	r3, #16
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 fe57 	bl	80087fc <xTaskRemoveFromEventList>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b54:	4b3c      	ldr	r3, [pc, #240]	@ (8007c48 <xQueueReceive+0x1c0>)
 8007b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b64:	f001 fde2 	bl	800972c <vPortExitCritical>
				return pdPASS;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e069      	b.n	8007c40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b72:	f001 fddb 	bl	800972c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e062      	b.n	8007c40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b80:	f107 0310 	add.w	r3, r7, #16
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fe9d 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b8e:	f001 fdcd 	bl	800972c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b92:	f000 fc0d 	bl	80083b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b96:	f001 fd97 	bl	80096c8 <vPortEnterCritical>
 8007b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d103      	bne.n	8007bb0 <xQueueReceive+0x128>
 8007ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bb6:	b25b      	sxtb	r3, r3
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbc:	d103      	bne.n	8007bc6 <xQueueReceive+0x13e>
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bc6:	f001 fdb1 	bl	800972c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bca:	1d3a      	adds	r2, r7, #4
 8007bcc:	f107 0310 	add.w	r3, r7, #16
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fe8c 	bl	80088f0 <xTaskCheckForTimeOut>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d123      	bne.n	8007c26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007be0:	f000 f916 	bl	8007e10 <prvIsQueueEmpty>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d017      	beq.n	8007c1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	3324      	adds	r3, #36	@ 0x24
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fdb0 	bl	8008758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bfa:	f000 f8b7 	bl	8007d6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bfe:	f000 fbe5 	bl	80083cc <xTaskResumeAll>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d189      	bne.n	8007b1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007c08:	4b0f      	ldr	r3, [pc, #60]	@ (8007c48 <xQueueReceive+0x1c0>)
 8007c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	e780      	b.n	8007b1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c1c:	f000 f8a6 	bl	8007d6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c20:	f000 fbd4 	bl	80083cc <xTaskResumeAll>
 8007c24:	e77a      	b.n	8007b1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c28:	f000 f8a0 	bl	8007d6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c2c:	f000 fbce 	bl	80083cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c32:	f000 f8ed 	bl	8007e10 <prvIsQueueEmpty>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f43f af6f 	beq.w	8007b1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3730      	adds	r7, #48	@ 0x30
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10d      	bne.n	8007c86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d14d      	bne.n	8007d0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 ffd6 	bl	8008c28 <xTaskPriorityDisinherit>
 8007c7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	609a      	str	r2, [r3, #8]
 8007c84:	e043      	b.n	8007d0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d119      	bne.n	8007cc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6858      	ldr	r0, [r3, #4]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c94:	461a      	mov	r2, r3
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	f003 facf 	bl	800b23a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca4:	441a      	add	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d32b      	bcc.n	8007d0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	e026      	b.n	8007d0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68d8      	ldr	r0, [r3, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc8:	461a      	mov	r2, r3
 8007cca:	68b9      	ldr	r1, [r7, #8]
 8007ccc:	f003 fab5 	bl	800b23a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd8:	425b      	negs	r3, r3
 8007cda:	441a      	add	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d207      	bcs.n	8007cfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf4:	425b      	negs	r3, r3
 8007cf6:	441a      	add	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d105      	bne.n	8007d0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007d16:	697b      	ldr	r3, [r7, #20]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d018      	beq.n	8007d64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	441a      	add	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d303      	bcc.n	8007d54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68d9      	ldr	r1, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6838      	ldr	r0, [r7, #0]
 8007d60:	f003 fa6b 	bl	800b23a <memcpy>
	}
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d74:	f001 fca8 	bl	80096c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d80:	e011      	b.n	8007da6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d012      	beq.n	8007db0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3324      	adds	r3, #36	@ 0x24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fd34 	bl	80087fc <xTaskRemoveFromEventList>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d9a:	f000 fe0d 	bl	80089b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	dce9      	bgt.n	8007d82 <prvUnlockQueue+0x16>
 8007dae:	e000      	b.n	8007db2 <prvUnlockQueue+0x46>
					break;
 8007db0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	22ff      	movs	r2, #255	@ 0xff
 8007db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007dba:	f001 fcb7 	bl	800972c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007dbe:	f001 fc83 	bl	80096c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dca:	e011      	b.n	8007df0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d012      	beq.n	8007dfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3310      	adds	r3, #16
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fd0f 	bl	80087fc <xTaskRemoveFromEventList>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007de4:	f000 fde8 	bl	80089b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	dce9      	bgt.n	8007dcc <prvUnlockQueue+0x60>
 8007df8:	e000      	b.n	8007dfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	22ff      	movs	r2, #255	@ 0xff
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007e04:	f001 fc92 	bl	800972c <vPortExitCritical>
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e18:	f001 fc56 	bl	80096c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e001      	b.n	8007e2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e2e:	f001 fc7d 	bl	800972c <vPortExitCritical>

	return xReturn;
 8007e32:	68fb      	ldr	r3, [r7, #12]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e44:	f001 fc40 	bl	80096c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d102      	bne.n	8007e5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e001      	b.n	8007e5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e5e:	f001 fc65 	bl	800972c <vPortExitCritical>

	return xReturn;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	e014      	b.n	8007ea6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8007ebc <vQueueAddToRegistry+0x50>)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10b      	bne.n	8007ea0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e88:	490c      	ldr	r1, [pc, #48]	@ (8007ebc <vQueueAddToRegistry+0x50>)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e92:	4a0a      	ldr	r2, [pc, #40]	@ (8007ebc <vQueueAddToRegistry+0x50>)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	4413      	add	r3, r2
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e9e:	e006      	b.n	8007eae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b07      	cmp	r3, #7
 8007eaa:	d9e7      	bls.n	8007e7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	24000b08 	.word	0x24000b08

08007ec0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ed0:	f001 fbfa 	bl	80096c8 <vPortEnterCritical>
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d103      	bne.n	8007eea <vQueueWaitForMessageRestricted+0x2a>
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef0:	b25b      	sxtb	r3, r3
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d103      	bne.n	8007f00 <vQueueWaitForMessageRestricted+0x40>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f00:	f001 fc14 	bl	800972c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	3324      	adds	r3, #36	@ 0x24
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fc45 	bl	80087a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f1a:	6978      	ldr	r0, [r7, #20]
 8007f1c:	f7ff ff26 	bl	8007d6c <prvUnlockQueue>
	}
 8007f20:	bf00      	nop
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08e      	sub	sp, #56	@ 0x38
 8007f2c:	af04      	add	r7, sp, #16
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	623b      	str	r3, [r7, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	e7fd      	b.n	8007f50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	61fb      	str	r3, [r7, #28]
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f72:	235c      	movs	r3, #92	@ 0x5c
 8007f74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f7a:	d00b      	beq.n	8007f94 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	61bb      	str	r3, [r7, #24]
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01e      	beq.n	8007fda <xTaskCreateStatic+0xb2>
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01b      	beq.n	8007fda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007faa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f850 	bl	8008072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fd4:	f000 f8de 	bl	8008194 <prvAddNewTaskToReadyList>
 8007fd8:	e001      	b.n	8007fde <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fde:	697b      	ldr	r3, [r7, #20]
	}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3728      	adds	r7, #40	@ 0x28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08c      	sub	sp, #48	@ 0x30
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ff8:	88fb      	ldrh	r3, [r7, #6]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fc85 	bl	800990c <pvPortMalloc>
 8008002:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800800a:	205c      	movs	r0, #92	@ 0x5c
 800800c:	f001 fc7e 	bl	800990c <pvPortMalloc>
 8008010:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	631a      	str	r2, [r3, #48]	@ 0x30
 800801e:	e005      	b.n	800802c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008020:	6978      	ldr	r0, [r7, #20]
 8008022:	f001 fd41 	bl	8009aa8 <vPortFree>
 8008026:	e001      	b.n	800802c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800803a:	88fa      	ldrh	r2, [r7, #6]
 800803c:	2300      	movs	r3, #0
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f80e 	bl	8008072 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008056:	69f8      	ldr	r0, [r7, #28]
 8008058:	f000 f89c 	bl	8008194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e002      	b.n	8008068 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295
 8008066:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008068:	69bb      	ldr	r3, [r7, #24]
	}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b088      	sub	sp, #32
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	461a      	mov	r2, r3
 800808a:	21a5      	movs	r1, #165	@ 0xa5
 800808c:	f003 f855 	bl	800b13a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800809a:	440b      	add	r3, r1
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	617b      	str	r3, [r7, #20]
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d01f      	beq.n	8008112 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080d2:	2300      	movs	r3, #0
 80080d4:	61fb      	str	r3, [r7, #28]
 80080d6:	e012      	b.n	80080fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	7819      	ldrb	r1, [r3, #0]
 80080e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	3334      	adds	r3, #52	@ 0x34
 80080e8:	460a      	mov	r2, r1
 80080ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d006      	beq.n	8008106 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	3301      	adds	r3, #1
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2b0f      	cmp	r3, #15
 8008102:	d9e9      	bls.n	80080d8 <prvInitialiseNewTask+0x66>
 8008104:	e000      	b.n	8008108 <prvInitialiseNewTask+0x96>
			{
				break;
 8008106:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008110:	e003      	b.n	800811a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	2b37      	cmp	r3, #55	@ 0x37
 800811e:	d901      	bls.n	8008124 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008120:	2337      	movs	r3, #55	@ 0x37
 8008122:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008128:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800812e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	2200      	movs	r2, #0
 8008134:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	3304      	adds	r3, #4
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff f966 	bl	800740c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	3318      	adds	r3, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff f961 	bl	800740c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800814e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800815e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	2200      	movs	r2, #0
 8008164:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	68f9      	ldr	r1, [r7, #12]
 8008172:	69b8      	ldr	r0, [r7, #24]
 8008174:	f001 f976 	bl	8009464 <pxPortInitialiseStack>
 8008178:	4602      	mov	r2, r0
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800817e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800818a:	bf00      	nop
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800819c:	f001 fa94 	bl	80096c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081aa:	4b2c      	ldr	r3, [pc, #176]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081b2:	4a2a      	ldr	r2, [pc, #168]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081b8:	4b27      	ldr	r3, [pc, #156]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d110      	bne.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081c0:	f000 fc1e 	bl	8008a00 <prvInitialiseTaskLists>
 80081c4:	e00d      	b.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081c6:	4b26      	ldr	r3, [pc, #152]	@ (8008260 <prvAddNewTaskToReadyList+0xcc>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081ce:	4b23      	ldr	r3, [pc, #140]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	429a      	cmp	r2, r3
 80081da:	d802      	bhi.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081dc:	4a1f      	ldr	r2, [pc, #124]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081e2:	4b20      	ldr	r3, [pc, #128]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008268 <prvAddNewTaskToReadyList+0xd4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d903      	bls.n	8008208 <prvAddNewTaskToReadyList+0x74>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008204:	4a18      	ldr	r2, [pc, #96]	@ (8008268 <prvAddNewTaskToReadyList+0xd4>)
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4a15      	ldr	r2, [pc, #84]	@ (800826c <prvAddNewTaskToReadyList+0xd8>)
 8008216:	441a      	add	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f7ff f901 	bl	8007426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008224:	f001 fa82 	bl	800972c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008228:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <prvAddNewTaskToReadyList+0xcc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00e      	beq.n	800824e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008230:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	429a      	cmp	r2, r3
 800823c:	d207      	bcs.n	800824e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800823e:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <prvAddNewTaskToReadyList+0xdc>)
 8008240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	2400101c 	.word	0x2400101c
 800825c:	24000b48 	.word	0x24000b48
 8008260:	24001028 	.word	0x24001028
 8008264:	24001038 	.word	0x24001038
 8008268:	24001024 	.word	0x24001024
 800826c:	24000b4c 	.word	0x24000b4c
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008286:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <vTaskDelay+0x64>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <vTaskDelay+0x32>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60bb      	str	r3, [r7, #8]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082a6:	f000 f883 	bl	80083b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082aa:	2100      	movs	r1, #0
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fd2b 	bl	8008d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082b2:	f000 f88b 	bl	80083cc <xTaskResumeAll>
 80082b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082be:	4b07      	ldr	r3, [pc, #28]	@ (80082dc <vTaskDelay+0x68>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	24001044 	.word	0x24001044
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	@ 0x28
 80082e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ee:	463a      	mov	r2, r7
 80082f0:	1d39      	adds	r1, r7, #4
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff f834 	bl	8007364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	2300      	movs	r3, #0
 800830c:	460a      	mov	r2, r1
 800830e:	4922      	ldr	r1, [pc, #136]	@ (8008398 <vTaskStartScheduler+0xb8>)
 8008310:	4822      	ldr	r0, [pc, #136]	@ (800839c <vTaskStartScheduler+0xbc>)
 8008312:	f7ff fe09 	bl	8007f28 <xTaskCreateStatic>
 8008316:	4603      	mov	r3, r0
 8008318:	4a21      	ldr	r2, [pc, #132]	@ (80083a0 <vTaskStartScheduler+0xc0>)
 800831a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800831c:	4b20      	ldr	r3, [pc, #128]	@ (80083a0 <vTaskStartScheduler+0xc0>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e001      	b.n	800832e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d102      	bne.n	800833a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008334:	f000 fd3c 	bl	8008db0 <xTimerCreateTimerTask>
 8008338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d116      	bne.n	800836e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008354:	4b13      	ldr	r3, [pc, #76]	@ (80083a4 <vTaskStartScheduler+0xc4>)
 8008356:	f04f 32ff 	mov.w	r2, #4294967295
 800835a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800835c:	4b12      	ldr	r3, [pc, #72]	@ (80083a8 <vTaskStartScheduler+0xc8>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <vTaskStartScheduler+0xcc>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008368:	f001 f90a 	bl	8009580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800836c:	e00f      	b.n	800838e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d10b      	bne.n	800838e <vTaskStartScheduler+0xae>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	60fb      	str	r3, [r7, #12]
}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	e7fd      	b.n	800838a <vTaskStartScheduler+0xaa>
}
 800838e:	bf00      	nop
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	0800d278 	.word	0x0800d278
 800839c:	080089d1 	.word	0x080089d1
 80083a0:	24001040 	.word	0x24001040
 80083a4:	2400103c 	.word	0x2400103c
 80083a8:	24001028 	.word	0x24001028
 80083ac:	24001020 	.word	0x24001020

080083b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083b4:	4b04      	ldr	r3, [pc, #16]	@ (80083c8 <vTaskSuspendAll+0x18>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3301      	adds	r3, #1
 80083ba:	4a03      	ldr	r2, [pc, #12]	@ (80083c8 <vTaskSuspendAll+0x18>)
 80083bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083be:	bf00      	nop
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	24001044 	.word	0x24001044

080083cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083da:	4b42      	ldr	r3, [pc, #264]	@ (80084e4 <xTaskResumeAll+0x118>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10b      	bne.n	80083fa <xTaskResumeAll+0x2e>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	603b      	str	r3, [r7, #0]
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	e7fd      	b.n	80083f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083fa:	f001 f965 	bl	80096c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083fe:	4b39      	ldr	r3, [pc, #228]	@ (80084e4 <xTaskResumeAll+0x118>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3b01      	subs	r3, #1
 8008404:	4a37      	ldr	r2, [pc, #220]	@ (80084e4 <xTaskResumeAll+0x118>)
 8008406:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008408:	4b36      	ldr	r3, [pc, #216]	@ (80084e4 <xTaskResumeAll+0x118>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d162      	bne.n	80084d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008410:	4b35      	ldr	r3, [pc, #212]	@ (80084e8 <xTaskResumeAll+0x11c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d05e      	beq.n	80084d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008418:	e02f      	b.n	800847a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841a:	4b34      	ldr	r3, [pc, #208]	@ (80084ec <xTaskResumeAll+0x120>)
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3318      	adds	r3, #24
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff f85a 	bl	80074e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3304      	adds	r3, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff f855 	bl	80074e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843a:	4b2d      	ldr	r3, [pc, #180]	@ (80084f0 <xTaskResumeAll+0x124>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d903      	bls.n	800844a <xTaskResumeAll+0x7e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	4a2a      	ldr	r2, [pc, #168]	@ (80084f0 <xTaskResumeAll+0x124>)
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4a27      	ldr	r2, [pc, #156]	@ (80084f4 <xTaskResumeAll+0x128>)
 8008458:	441a      	add	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3304      	adds	r3, #4
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f7fe ffe0 	bl	8007426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846a:	4b23      	ldr	r3, [pc, #140]	@ (80084f8 <xTaskResumeAll+0x12c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	429a      	cmp	r2, r3
 8008472:	d302      	bcc.n	800847a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008474:	4b21      	ldr	r3, [pc, #132]	@ (80084fc <xTaskResumeAll+0x130>)
 8008476:	2201      	movs	r2, #1
 8008478:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800847a:	4b1c      	ldr	r3, [pc, #112]	@ (80084ec <xTaskResumeAll+0x120>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1cb      	bne.n	800841a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008488:	f000 fb90 	bl	8008bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800848c:	4b1c      	ldr	r3, [pc, #112]	@ (8008500 <xTaskResumeAll+0x134>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d010      	beq.n	80084ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008498:	f000 f846 	bl	8008528 <xTaskIncrementTick>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084a2:	4b16      	ldr	r3, [pc, #88]	@ (80084fc <xTaskResumeAll+0x130>)
 80084a4:	2201      	movs	r2, #1
 80084a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f1      	bne.n	8008498 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084b4:	4b12      	ldr	r3, [pc, #72]	@ (8008500 <xTaskResumeAll+0x134>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084ba:	4b10      	ldr	r3, [pc, #64]	@ (80084fc <xTaskResumeAll+0x130>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d009      	beq.n	80084d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084c2:	2301      	movs	r3, #1
 80084c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008504 <xTaskResumeAll+0x138>)
 80084c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084d6:	f001 f929 	bl	800972c <vPortExitCritical>

	return xAlreadyYielded;
 80084da:	68bb      	ldr	r3, [r7, #8]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	24001044 	.word	0x24001044
 80084e8:	2400101c 	.word	0x2400101c
 80084ec:	24000fdc 	.word	0x24000fdc
 80084f0:	24001024 	.word	0x24001024
 80084f4:	24000b4c 	.word	0x24000b4c
 80084f8:	24000b48 	.word	0x24000b48
 80084fc:	24001030 	.word	0x24001030
 8008500:	2400102c 	.word	0x2400102c
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800850e:	4b05      	ldr	r3, [pc, #20]	@ (8008524 <xTaskGetTickCount+0x1c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008514:	687b      	ldr	r3, [r7, #4]
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	24001020 	.word	0x24001020

08008528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008532:	4b4f      	ldr	r3, [pc, #316]	@ (8008670 <xTaskIncrementTick+0x148>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 8090 	bne.w	800865c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800853c:	4b4d      	ldr	r3, [pc, #308]	@ (8008674 <xTaskIncrementTick+0x14c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008544:	4a4b      	ldr	r2, [pc, #300]	@ (8008674 <xTaskIncrementTick+0x14c>)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d121      	bne.n	8008594 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008550:	4b49      	ldr	r3, [pc, #292]	@ (8008678 <xTaskIncrementTick+0x150>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <xTaskIncrementTick+0x4a>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	603b      	str	r3, [r7, #0]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xTaskIncrementTick+0x46>
 8008572:	4b41      	ldr	r3, [pc, #260]	@ (8008678 <xTaskIncrementTick+0x150>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	4b40      	ldr	r3, [pc, #256]	@ (800867c <xTaskIncrementTick+0x154>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a3e      	ldr	r2, [pc, #248]	@ (8008678 <xTaskIncrementTick+0x150>)
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	4a3e      	ldr	r2, [pc, #248]	@ (800867c <xTaskIncrementTick+0x154>)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	4b3e      	ldr	r3, [pc, #248]	@ (8008680 <xTaskIncrementTick+0x158>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	4a3c      	ldr	r2, [pc, #240]	@ (8008680 <xTaskIncrementTick+0x158>)
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	f000 fb0c 	bl	8008bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008594:	4b3b      	ldr	r3, [pc, #236]	@ (8008684 <xTaskIncrementTick+0x15c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	d349      	bcc.n	8008632 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800859e:	4b36      	ldr	r3, [pc, #216]	@ (8008678 <xTaskIncrementTick+0x150>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a8:	4b36      	ldr	r3, [pc, #216]	@ (8008684 <xTaskIncrementTick+0x15c>)
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295
 80085ae:	601a      	str	r2, [r3, #0]
					break;
 80085b0:	e03f      	b.n	8008632 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b2:	4b31      	ldr	r3, [pc, #196]	@ (8008678 <xTaskIncrementTick+0x150>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d203      	bcs.n	80085d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008684 <xTaskIncrementTick+0x15c>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085d0:	e02f      	b.n	8008632 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe ff82 	bl	80074e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d004      	beq.n	80085ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	3318      	adds	r3, #24
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe ff79 	bl	80074e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f2:	4b25      	ldr	r3, [pc, #148]	@ (8008688 <xTaskIncrementTick+0x160>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d903      	bls.n	8008602 <xTaskIncrementTick+0xda>
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fe:	4a22      	ldr	r2, [pc, #136]	@ (8008688 <xTaskIncrementTick+0x160>)
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4a1f      	ldr	r2, [pc, #124]	@ (800868c <xTaskIncrementTick+0x164>)
 8008610:	441a      	add	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fe ff04 	bl	8007426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4b1b      	ldr	r3, [pc, #108]	@ (8008690 <xTaskIncrementTick+0x168>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008628:	429a      	cmp	r2, r3
 800862a:	d3b8      	bcc.n	800859e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008630:	e7b5      	b.n	800859e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008632:	4b17      	ldr	r3, [pc, #92]	@ (8008690 <xTaskIncrementTick+0x168>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008638:	4914      	ldr	r1, [pc, #80]	@ (800868c <xTaskIncrementTick+0x164>)
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d901      	bls.n	800864e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800864a:	2301      	movs	r3, #1
 800864c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800864e:	4b11      	ldr	r3, [pc, #68]	@ (8008694 <xTaskIncrementTick+0x16c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008656:	2301      	movs	r3, #1
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e004      	b.n	8008666 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800865c:	4b0e      	ldr	r3, [pc, #56]	@ (8008698 <xTaskIncrementTick+0x170>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	4a0d      	ldr	r2, [pc, #52]	@ (8008698 <xTaskIncrementTick+0x170>)
 8008664:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008666:	697b      	ldr	r3, [r7, #20]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	24001044 	.word	0x24001044
 8008674:	24001020 	.word	0x24001020
 8008678:	24000fd4 	.word	0x24000fd4
 800867c:	24000fd8 	.word	0x24000fd8
 8008680:	24001034 	.word	0x24001034
 8008684:	2400103c 	.word	0x2400103c
 8008688:	24001024 	.word	0x24001024
 800868c:	24000b4c 	.word	0x24000b4c
 8008690:	24000b48 	.word	0x24000b48
 8008694:	24001030 	.word	0x24001030
 8008698:	2400102c 	.word	0x2400102c

0800869c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086a2:	4b28      	ldr	r3, [pc, #160]	@ (8008744 <vTaskSwitchContext+0xa8>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086aa:	4b27      	ldr	r3, [pc, #156]	@ (8008748 <vTaskSwitchContext+0xac>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086b0:	e042      	b.n	8008738 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80086b2:	4b25      	ldr	r3, [pc, #148]	@ (8008748 <vTaskSwitchContext+0xac>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b8:	4b24      	ldr	r3, [pc, #144]	@ (800874c <vTaskSwitchContext+0xb0>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	e011      	b.n	80086e4 <vTaskSwitchContext+0x48>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <vTaskSwitchContext+0x42>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	607b      	str	r3, [r7, #4]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <vTaskSwitchContext+0x3e>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	491a      	ldr	r1, [pc, #104]	@ (8008750 <vTaskSwitchContext+0xb4>)
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0e3      	beq.n	80086c0 <vTaskSwitchContext+0x24>
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4a13      	ldr	r2, [pc, #76]	@ (8008750 <vTaskSwitchContext+0xb4>)
 8008704:	4413      	add	r3, r2
 8008706:	60bb      	str	r3, [r7, #8]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3308      	adds	r3, #8
 800871a:	429a      	cmp	r2, r3
 800871c:	d104      	bne.n	8008728 <vTaskSwitchContext+0x8c>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	605a      	str	r2, [r3, #4]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	4a09      	ldr	r2, [pc, #36]	@ (8008754 <vTaskSwitchContext+0xb8>)
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	4a06      	ldr	r2, [pc, #24]	@ (800874c <vTaskSwitchContext+0xb0>)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6013      	str	r3, [r2, #0]
}
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	24001044 	.word	0x24001044
 8008748:	24001030 	.word	0x24001030
 800874c:	24001024 	.word	0x24001024
 8008750:	24000b4c 	.word	0x24000b4c
 8008754:	24000b48 	.word	0x24000b48

08008758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	60fb      	str	r3, [r7, #12]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008780:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <vTaskPlaceOnEventList+0x48>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3318      	adds	r3, #24
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7fe fe70 	bl	800746e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800878e:	2101      	movs	r1, #1
 8008790:	6838      	ldr	r0, [r7, #0]
 8008792:	f000 fab9 	bl	8008d08 <prvAddCurrentTaskToDelayedList>
}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	24000b48 	.word	0x24000b48

080087a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	617b      	str	r3, [r7, #20]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087ce:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3318      	adds	r3, #24
 80087d4:	4619      	mov	r1, r3
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7fe fe25 	bl	8007426 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	68b8      	ldr	r0, [r7, #8]
 80087ec:	f000 fa8c 	bl	8008d08 <prvAddCurrentTaskToDelayedList>
	}
 80087f0:	bf00      	nop
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	24000b48 	.word	0x24000b48

080087fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	60fb      	str	r3, [r7, #12]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3318      	adds	r3, #24
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fe56 	bl	80074e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008834:	4b1d      	ldr	r3, [pc, #116]	@ (80088ac <xTaskRemoveFromEventList+0xb0>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11d      	bne.n	8008878 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	3304      	adds	r3, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fe4d 	bl	80074e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884a:	4b19      	ldr	r3, [pc, #100]	@ (80088b0 <xTaskRemoveFromEventList+0xb4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d903      	bls.n	800885a <xTaskRemoveFromEventList+0x5e>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	4a16      	ldr	r2, [pc, #88]	@ (80088b0 <xTaskRemoveFromEventList+0xb4>)
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4a13      	ldr	r2, [pc, #76]	@ (80088b4 <xTaskRemoveFromEventList+0xb8>)
 8008868:	441a      	add	r2, r3
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f7fe fdd8 	bl	8007426 <vListInsertEnd>
 8008876:	e005      	b.n	8008884 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3318      	adds	r3, #24
 800887c:	4619      	mov	r1, r3
 800887e:	480e      	ldr	r0, [pc, #56]	@ (80088b8 <xTaskRemoveFromEventList+0xbc>)
 8008880:	f7fe fdd1 	bl	8007426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008888:	4b0c      	ldr	r3, [pc, #48]	@ (80088bc <xTaskRemoveFromEventList+0xc0>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	429a      	cmp	r2, r3
 8008890:	d905      	bls.n	800889e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008892:	2301      	movs	r3, #1
 8008894:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008896:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <xTaskRemoveFromEventList+0xc4>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e001      	b.n	80088a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	24001044 	.word	0x24001044
 80088b0:	24001024 	.word	0x24001024
 80088b4:	24000b4c 	.word	0x24000b4c
 80088b8:	24000fdc 	.word	0x24000fdc
 80088bc:	24000b48 	.word	0x24000b48
 80088c0:	24001030 	.word	0x24001030

080088c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088cc:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <vTaskInternalSetTimeOutState+0x24>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <vTaskInternalSetTimeOutState+0x28>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	24001034 	.word	0x24001034
 80088ec:	24001020 	.word	0x24001020

080088f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008936:	f000 fec7 	bl	80096c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800893a:	4b1d      	ldr	r3, [pc, #116]	@ (80089b0 <xTaskCheckForTimeOut+0xc0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d102      	bne.n	800895a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
 8008958:	e023      	b.n	80089a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4b15      	ldr	r3, [pc, #84]	@ (80089b4 <xTaskCheckForTimeOut+0xc4>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d007      	beq.n	8008976 <xTaskCheckForTimeOut+0x86>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	429a      	cmp	r2, r3
 800896e:	d302      	bcc.n	8008976 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008970:	2301      	movs	r3, #1
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	e015      	b.n	80089a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	429a      	cmp	r2, r3
 800897e:	d20b      	bcs.n	8008998 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	1ad2      	subs	r2, r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff ff99 	bl	80088c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	e004      	b.n	80089a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800899e:	2301      	movs	r3, #1
 80089a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089a2:	f000 fec3 	bl	800972c <vPortExitCritical>

	return xReturn;
 80089a6:	69fb      	ldr	r3, [r7, #28]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3720      	adds	r7, #32
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	24001020 	.word	0x24001020
 80089b4:	24001034 	.word	0x24001034

080089b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089bc:	4b03      	ldr	r3, [pc, #12]	@ (80089cc <vTaskMissedYield+0x14>)
 80089be:	2201      	movs	r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
}
 80089c2:	bf00      	nop
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	24001030 	.word	0x24001030

080089d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089d8:	f000 f852 	bl	8008a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <prvIdleTask+0x28>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d9f9      	bls.n	80089d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089e4:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <prvIdleTask+0x2c>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089f4:	e7f0      	b.n	80089d8 <prvIdleTask+0x8>
 80089f6:	bf00      	nop
 80089f8:	24000b4c 	.word	0x24000b4c
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	e00c      	b.n	8008a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4a12      	ldr	r2, [pc, #72]	@ (8008a60 <prvInitialiseTaskLists+0x60>)
 8008a18:	4413      	add	r3, r2
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fcd6 	bl	80073cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3301      	adds	r3, #1
 8008a24:	607b      	str	r3, [r7, #4]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b37      	cmp	r3, #55	@ 0x37
 8008a2a:	d9ef      	bls.n	8008a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a2c:	480d      	ldr	r0, [pc, #52]	@ (8008a64 <prvInitialiseTaskLists+0x64>)
 8008a2e:	f7fe fccd 	bl	80073cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a32:	480d      	ldr	r0, [pc, #52]	@ (8008a68 <prvInitialiseTaskLists+0x68>)
 8008a34:	f7fe fcca 	bl	80073cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a38:	480c      	ldr	r0, [pc, #48]	@ (8008a6c <prvInitialiseTaskLists+0x6c>)
 8008a3a:	f7fe fcc7 	bl	80073cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a3e:	480c      	ldr	r0, [pc, #48]	@ (8008a70 <prvInitialiseTaskLists+0x70>)
 8008a40:	f7fe fcc4 	bl	80073cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a44:	480b      	ldr	r0, [pc, #44]	@ (8008a74 <prvInitialiseTaskLists+0x74>)
 8008a46:	f7fe fcc1 	bl	80073cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <prvInitialiseTaskLists+0x78>)
 8008a4c:	4a05      	ldr	r2, [pc, #20]	@ (8008a64 <prvInitialiseTaskLists+0x64>)
 8008a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a50:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <prvInitialiseTaskLists+0x7c>)
 8008a52:	4a05      	ldr	r2, [pc, #20]	@ (8008a68 <prvInitialiseTaskLists+0x68>)
 8008a54:	601a      	str	r2, [r3, #0]
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	24000b4c 	.word	0x24000b4c
 8008a64:	24000fac 	.word	0x24000fac
 8008a68:	24000fc0 	.word	0x24000fc0
 8008a6c:	24000fdc 	.word	0x24000fdc
 8008a70:	24000ff0 	.word	0x24000ff0
 8008a74:	24001008 	.word	0x24001008
 8008a78:	24000fd4 	.word	0x24000fd4
 8008a7c:	24000fd8 	.word	0x24000fd8

08008a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a86:	e019      	b.n	8008abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a88:	f000 fe1e 	bl	80096c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8c:	4b10      	ldr	r3, [pc, #64]	@ (8008ad0 <prvCheckTasksWaitingTermination+0x50>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe fd21 	bl	80074e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad4 <prvCheckTasksWaitingTermination+0x54>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8008ad4 <prvCheckTasksWaitingTermination+0x54>)
 8008aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x58>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x58>)
 8008ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ab2:	f000 fe3b 	bl	800972c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f848 	bl	8008b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x58>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e1      	bne.n	8008a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	24000ff0 	.word	0x24000ff0
 8008ad4:	2400101c 	.word	0x2400101c
 8008ad8:	24001004 	.word	0x24001004

08008adc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008ae8:	e005      	b.n	8008af6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3301      	adds	r3, #1
 8008aee:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2ba5      	cmp	r3, #165	@ 0xa5
 8008afc:	d0f5      	beq.n	8008aea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	089b      	lsrs	r3, r3, #2
 8008b02:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	b29b      	uxth	r3, r3
	}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <uxTaskGetStackHighWaterMark+0x14>
 8008b22:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <uxTaskGetStackHighWaterMark+0x34>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	e000      	b.n	8008b2a <uxTaskGetStackHighWaterMark+0x16>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b30:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8008b32:	6938      	ldr	r0, [r7, #16]
 8008b34:	f7ff ffd2 	bl	8008adc <prvTaskCheckFreeStackSpace>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
	}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	24000b48 	.word	0x24000b48

08008b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d108      	bne.n	8008b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 ffa0 	bl	8009aa8 <vPortFree>
				vPortFree( pxTCB );
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 ff9d 	bl	8009aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b6e:	e019      	b.n	8008ba4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d103      	bne.n	8008b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 ff94 	bl	8009aa8 <vPortFree>
	}
 8008b80:	e010      	b.n	8008ba4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d00b      	beq.n	8008ba4 <prvDeleteTCB+0x58>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	60fb      	str	r3, [r7, #12]
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	e7fd      	b.n	8008ba0 <prvDeleteTCB+0x54>
	}
 8008ba4:	bf00      	nop
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008be4 <prvResetNextTaskUnblockTime+0x38>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <prvResetNextTaskUnblockTime+0x3c>)
 8008bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bc4:	e008      	b.n	8008bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc6:	4b07      	ldr	r3, [pc, #28]	@ (8008be4 <prvResetNextTaskUnblockTime+0x38>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	4a04      	ldr	r2, [pc, #16]	@ (8008be8 <prvResetNextTaskUnblockTime+0x3c>)
 8008bd6:	6013      	str	r3, [r2, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	24000fd4 	.word	0x24000fd4
 8008be8:	2400103c 	.word	0x2400103c

08008bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c20 <xTaskGetSchedulerState+0x34>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	607b      	str	r3, [r7, #4]
 8008bfe:	e008      	b.n	8008c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c00:	4b08      	ldr	r3, [pc, #32]	@ (8008c24 <xTaskGetSchedulerState+0x38>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c08:	2302      	movs	r3, #2
 8008c0a:	607b      	str	r3, [r7, #4]
 8008c0c:	e001      	b.n	8008c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c12:	687b      	ldr	r3, [r7, #4]
	}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	24001028 	.word	0x24001028
 8008c24:	24001044 	.word	0x24001044

08008c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d058      	beq.n	8008cf0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8008cfc <xTaskPriorityDisinherit+0xd4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d00b      	beq.n	8008c60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	60fb      	str	r3, [r7, #12]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10b      	bne.n	8008c80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	60bb      	str	r3, [r7, #8]
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	e7fd      	b.n	8008c7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c84:	1e5a      	subs	r2, r3, #1
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d02c      	beq.n	8008cf0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d128      	bne.n	8008cf0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fc1c 	bl	80074e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d00 <xTaskPriorityDisinherit+0xd8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d903      	bls.n	8008cd0 <xTaskPriorityDisinherit+0xa8>
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8008d00 <xTaskPriorityDisinherit+0xd8>)
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4a09      	ldr	r2, [pc, #36]	@ (8008d04 <xTaskPriorityDisinherit+0xdc>)
 8008cde:	441a      	add	r2, r3
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fb9d 	bl	8007426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cec:	2301      	movs	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cf0:	697b      	ldr	r3, [r7, #20]
	}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	24000b48 	.word	0x24000b48
 8008d00:	24001024 	.word	0x24001024
 8008d04:	24000b4c 	.word	0x24000b4c

08008d08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d12:	4b21      	ldr	r3, [pc, #132]	@ (8008d98 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d18:	4b20      	ldr	r3, [pc, #128]	@ (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fbde 	bl	80074e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d10a      	bne.n	8008d42 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d007      	beq.n	8008d42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d32:	4b1a      	ldr	r3, [pc, #104]	@ (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4819      	ldr	r0, [pc, #100]	@ (8008da0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d3c:	f7fe fb73 	bl	8007426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d40:	e026      	b.n	8008d90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d4a:	4b14      	ldr	r3, [pc, #80]	@ (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d209      	bcs.n	8008d6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d5a:	4b12      	ldr	r3, [pc, #72]	@ (8008da4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f7fe fb81 	bl	800746e <vListInsert>
}
 8008d6c:	e010      	b.n	8008d90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008da8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b0a      	ldr	r3, [pc, #40]	@ (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f7fe fb77 	bl	800746e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d80:	4b0a      	ldr	r3, [pc, #40]	@ (8008dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d202      	bcs.n	8008d90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d8a:	4a08      	ldr	r2, [pc, #32]	@ (8008dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	6013      	str	r3, [r2, #0]
}
 8008d90:	bf00      	nop
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	24001020 	.word	0x24001020
 8008d9c:	24000b48 	.word	0x24000b48
 8008da0:	24001008 	.word	0x24001008
 8008da4:	24000fd8 	.word	0x24000fd8
 8008da8:	24000fd4 	.word	0x24000fd4
 8008dac:	2400103c 	.word	0x2400103c

08008db0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	@ 0x28
 8008db4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dba:	f000 fb13 	bl	80093e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8008e34 <xTimerCreateTimerTask+0x84>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d021      	beq.n	8008e0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dce:	1d3a      	adds	r2, r7, #4
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fadd 	bl	8007398 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	9202      	str	r2, [sp, #8]
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	2302      	movs	r3, #2
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	2300      	movs	r3, #0
 8008dee:	460a      	mov	r2, r1
 8008df0:	4911      	ldr	r1, [pc, #68]	@ (8008e38 <xTimerCreateTimerTask+0x88>)
 8008df2:	4812      	ldr	r0, [pc, #72]	@ (8008e3c <xTimerCreateTimerTask+0x8c>)
 8008df4:	f7ff f898 	bl	8007f28 <xTaskCreateStatic>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	4a11      	ldr	r2, [pc, #68]	@ (8008e40 <xTimerCreateTimerTask+0x90>)
 8008dfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dfe:	4b10      	ldr	r3, [pc, #64]	@ (8008e40 <xTimerCreateTimerTask+0x90>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10b      	bne.n	8008e28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	613b      	str	r3, [r7, #16]
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	e7fd      	b.n	8008e24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e28:	697b      	ldr	r3, [r7, #20]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	24001078 	.word	0x24001078
 8008e38:	0800d280 	.word	0x0800d280
 8008e3c:	08008f7d 	.word	0x08008f7d
 8008e40:	2400107c 	.word	0x2400107c

08008e44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	@ 0x28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10b      	bne.n	8008e74 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	623b      	str	r3, [r7, #32]
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	e7fd      	b.n	8008e70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e74:	4b19      	ldr	r3, [pc, #100]	@ (8008edc <xTimerGenericCommand+0x98>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d02a      	beq.n	8008ed2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b05      	cmp	r3, #5
 8008e8c:	dc18      	bgt.n	8008ec0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e8e:	f7ff fead 	bl	8008bec <xTaskGetSchedulerState>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d109      	bne.n	8008eac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e98:	4b10      	ldr	r3, [pc, #64]	@ (8008edc <xTimerGenericCommand+0x98>)
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	f107 0110 	add.w	r1, r7, #16
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ea4:	f7fe fc50 	bl	8007748 <xQueueGenericSend>
 8008ea8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008eaa:	e012      	b.n	8008ed2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008eac:	4b0b      	ldr	r3, [pc, #44]	@ (8008edc <xTimerGenericCommand+0x98>)
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	f107 0110 	add.w	r1, r7, #16
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f7fe fc46 	bl	8007748 <xQueueGenericSend>
 8008ebc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ebe:	e008      	b.n	8008ed2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <xTimerGenericCommand+0x98>)
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	f107 0110 	add.w	r1, r7, #16
 8008ec8:	2300      	movs	r3, #0
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	f7fe fd3e 	bl	800794c <xQueueGenericSendFromISR>
 8008ed0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3728      	adds	r7, #40	@ 0x28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	24001078 	.word	0x24001078

08008ee0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eea:	4b23      	ldr	r3, [pc, #140]	@ (8008f78 <prvProcessExpiredTimer+0x98>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe faf1 	bl	80074e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d023      	beq.n	8008f54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	699a      	ldr	r2, [r3, #24]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	18d1      	adds	r1, r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	6978      	ldr	r0, [r7, #20]
 8008f1a:	f000 f8d5 	bl	80090c8 <prvInsertTimerInActiveList>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d020      	beq.n	8008f66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f24:	2300      	movs	r3, #0
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	6978      	ldr	r0, [r7, #20]
 8008f30:	f7ff ff88 	bl	8008e44 <xTimerGenericCommand>
 8008f34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d114      	bne.n	8008f66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60fb      	str	r3, [r7, #12]
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	e7fd      	b.n	8008f50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f5a:	f023 0301 	bic.w	r3, r3, #1
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	6978      	ldr	r0, [r7, #20]
 8008f6c:	4798      	blx	r3
}
 8008f6e:	bf00      	nop
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	24001070 	.word	0x24001070

08008f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 f859 	bl	8009040 <prvGetNextExpireTime>
 8008f8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4619      	mov	r1, r3
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f805 	bl	8008fa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f9a:	f000 f8d7 	bl	800914c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f9e:	bf00      	nop
 8008fa0:	e7f0      	b.n	8008f84 <prvTimerTask+0x8>
	...

08008fa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fae:	f7ff f9ff 	bl	80083b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fb2:	f107 0308 	add.w	r3, r7, #8
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f866 	bl	8009088 <prvSampleTimeNow>
 8008fbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d130      	bne.n	8009026 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <prvProcessTimerOrBlockTask+0x3c>
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d806      	bhi.n	8008fe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fd2:	f7ff f9fb 	bl	80083cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008fd6:	68f9      	ldr	r1, [r7, #12]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ff81 	bl	8008ee0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fde:	e024      	b.n	800902a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d008      	beq.n	8008ff8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fe6:	4b13      	ldr	r3, [pc, #76]	@ (8009034 <prvProcessTimerOrBlockTask+0x90>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <prvProcessTimerOrBlockTask+0x50>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e000      	b.n	8008ff6 <prvProcessTimerOrBlockTask+0x52>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8009038 <prvProcessTimerOrBlockTask+0x94>)
 8008ffa:	6818      	ldr	r0, [r3, #0]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	4619      	mov	r1, r3
 8009006:	f7fe ff5b 	bl	8007ec0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800900a:	f7ff f9df 	bl	80083cc <xTaskResumeAll>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009014:	4b09      	ldr	r3, [pc, #36]	@ (800903c <prvProcessTimerOrBlockTask+0x98>)
 8009016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	f3bf 8f6f 	isb	sy
}
 8009024:	e001      	b.n	800902a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009026:	f7ff f9d1 	bl	80083cc <xTaskResumeAll>
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	24001074 	.word	0x24001074
 8009038:	24001078 	.word	0x24001078
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009048:	4b0e      	ldr	r3, [pc, #56]	@ (8009084 <prvGetNextExpireTime+0x44>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <prvGetNextExpireTime+0x16>
 8009052:	2201      	movs	r2, #1
 8009054:	e000      	b.n	8009058 <prvGetNextExpireTime+0x18>
 8009056:	2200      	movs	r2, #0
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009064:	4b07      	ldr	r3, [pc, #28]	@ (8009084 <prvGetNextExpireTime+0x44>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	e001      	b.n	8009074 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009074:	68fb      	ldr	r3, [r7, #12]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	24001070 	.word	0x24001070

08009088 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009090:	f7ff fa3a 	bl	8008508 <xTaskGetTickCount>
 8009094:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009096:	4b0b      	ldr	r3, [pc, #44]	@ (80090c4 <prvSampleTimeNow+0x3c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	429a      	cmp	r2, r3
 800909e:	d205      	bcs.n	80090ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090a0:	f000 f93a 	bl	8009318 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e002      	b.n	80090b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090b2:	4a04      	ldr	r2, [pc, #16]	@ (80090c4 <prvSampleTimeNow+0x3c>)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090b8:	68fb      	ldr	r3, [r7, #12]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	24001080 	.word	0x24001080

080090c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d812      	bhi.n	8009114 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	1ad2      	subs	r2, r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d302      	bcc.n	8009102 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090fc:	2301      	movs	r3, #1
 80090fe:	617b      	str	r3, [r7, #20]
 8009100:	e01b      	b.n	800913a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009102:	4b10      	ldr	r3, [pc, #64]	@ (8009144 <prvInsertTimerInActiveList+0x7c>)
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3304      	adds	r3, #4
 800910a:	4619      	mov	r1, r3
 800910c:	4610      	mov	r0, r2
 800910e:	f7fe f9ae 	bl	800746e <vListInsert>
 8009112:	e012      	b.n	800913a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d206      	bcs.n	800912a <prvInsertTimerInActiveList+0x62>
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d302      	bcc.n	800912a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e007      	b.n	800913a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800912a:	4b07      	ldr	r3, [pc, #28]	@ (8009148 <prvInsertTimerInActiveList+0x80>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3304      	adds	r3, #4
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f7fe f99a 	bl	800746e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800913a:	697b      	ldr	r3, [r7, #20]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	24001074 	.word	0x24001074
 8009148:	24001070 	.word	0x24001070

0800914c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08e      	sub	sp, #56	@ 0x38
 8009150:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009152:	e0ce      	b.n	80092f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	da19      	bge.n	800918e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800915a:	1d3b      	adds	r3, r7, #4
 800915c:	3304      	adds	r3, #4
 800915e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10b      	bne.n	800917e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	61fb      	str	r3, [r7, #28]
}
 8009178:	bf00      	nop
 800917a:	bf00      	nop
 800917c:	e7fd      	b.n	800917a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800917e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009184:	6850      	ldr	r0, [r2, #4]
 8009186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009188:	6892      	ldr	r2, [r2, #8]
 800918a:	4611      	mov	r1, r2
 800918c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	f2c0 80ae 	blt.w	80092f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800919a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a4:	3304      	adds	r3, #4
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe f99a 	bl	80074e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091ac:	463b      	mov	r3, r7
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff ff6a 	bl	8009088 <prvSampleTimeNow>
 80091b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b09      	cmp	r3, #9
 80091ba:	f200 8097 	bhi.w	80092ec <prvProcessReceivedCommands+0x1a0>
 80091be:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <prvProcessReceivedCommands+0x78>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	080091ed 	.word	0x080091ed
 80091c8:	080091ed 	.word	0x080091ed
 80091cc:	080091ed 	.word	0x080091ed
 80091d0:	08009263 	.word	0x08009263
 80091d4:	08009277 	.word	0x08009277
 80091d8:	080092c3 	.word	0x080092c3
 80091dc:	080091ed 	.word	0x080091ed
 80091e0:	080091ed 	.word	0x080091ed
 80091e4:	08009263 	.word	0x08009263
 80091e8:	08009277 	.word	0x08009277
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091f2:	f043 0301 	orr.w	r3, r3, #1
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	18d1      	adds	r1, r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800920a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800920c:	f7ff ff5c 	bl	80090c8 <prvInsertTimerInActiveList>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d06c      	beq.n	80092f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800921c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d061      	beq.n	80092f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	441a      	add	r2, r3
 8009234:	2300      	movs	r3, #0
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2300      	movs	r3, #0
 800923a:	2100      	movs	r1, #0
 800923c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800923e:	f7ff fe01 	bl	8008e44 <xTimerGenericCommand>
 8009242:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d152      	bne.n	80092f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	61bb      	str	r3, [r7, #24]
}
 800925c:	bf00      	nop
 800925e:	bf00      	nop
 8009260:	e7fd      	b.n	800925e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009268:	f023 0301 	bic.w	r3, r3, #1
 800926c:	b2da      	uxtb	r2, r3
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009274:	e03d      	b.n	80092f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800927c:	f043 0301 	orr.w	r3, r3, #1
 8009280:	b2da      	uxtb	r2, r3
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800928e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10b      	bne.n	80092ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	617b      	str	r3, [r7, #20]
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	e7fd      	b.n	80092aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	699a      	ldr	r2, [r3, #24]
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	18d1      	adds	r1, r2, r3
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092bc:	f7ff ff04 	bl	80090c8 <prvInsertTimerInActiveList>
					break;
 80092c0:	e017      	b.n	80092f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d103      	bne.n	80092d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80092d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092d2:	f000 fbe9 	bl	8009aa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092d6:	e00c      	b.n	80092f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092de:	f023 0301 	bic.w	r3, r3, #1
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092ea:	e002      	b.n	80092f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80092ec:	bf00      	nop
 80092ee:	e000      	b.n	80092f2 <prvProcessReceivedCommands+0x1a6>
					break;
 80092f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092f2:	4b08      	ldr	r3, [pc, #32]	@ (8009314 <prvProcessReceivedCommands+0x1c8>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	1d39      	adds	r1, r7, #4
 80092f8:	2200      	movs	r2, #0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fbc4 	bl	8007a88 <xQueueReceive>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	f47f af26 	bne.w	8009154 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	3730      	adds	r7, #48	@ 0x30
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	24001078 	.word	0x24001078

08009318 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800931e:	e049      	b.n	80093b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009320:	4b2e      	ldr	r3, [pc, #184]	@ (80093dc <prvSwitchTimerLists+0xc4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932a:	4b2c      	ldr	r3, [pc, #176]	@ (80093dc <prvSwitchTimerLists+0xc4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	3304      	adds	r3, #4
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe f8d1 	bl	80074e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d02f      	beq.n	80093b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4413      	add	r3, r2
 800935c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	429a      	cmp	r2, r3
 8009364:	d90e      	bls.n	8009384 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009372:	4b1a      	ldr	r3, [pc, #104]	@ (80093dc <prvSwitchTimerLists+0xc4>)
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3304      	adds	r3, #4
 800937a:	4619      	mov	r1, r3
 800937c:	4610      	mov	r0, r2
 800937e:	f7fe f876 	bl	800746e <vListInsert>
 8009382:	e017      	b.n	80093b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009384:	2300      	movs	r3, #0
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	2300      	movs	r3, #0
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	2100      	movs	r1, #0
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff fd58 	bl	8008e44 <xTimerGenericCommand>
 8009394:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	603b      	str	r3, [r7, #0]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093b4:	4b09      	ldr	r3, [pc, #36]	@ (80093dc <prvSwitchTimerLists+0xc4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1b0      	bne.n	8009320 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093be:	4b07      	ldr	r3, [pc, #28]	@ (80093dc <prvSwitchTimerLists+0xc4>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093c4:	4b06      	ldr	r3, [pc, #24]	@ (80093e0 <prvSwitchTimerLists+0xc8>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a04      	ldr	r2, [pc, #16]	@ (80093dc <prvSwitchTimerLists+0xc4>)
 80093ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093cc:	4a04      	ldr	r2, [pc, #16]	@ (80093e0 <prvSwitchTimerLists+0xc8>)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6013      	str	r3, [r2, #0]
}
 80093d2:	bf00      	nop
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	24001070 	.word	0x24001070
 80093e0:	24001074 	.word	0x24001074

080093e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093ea:	f000 f96d 	bl	80096c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093ee:	4b15      	ldr	r3, [pc, #84]	@ (8009444 <prvCheckForValidListAndQueue+0x60>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d120      	bne.n	8009438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093f6:	4814      	ldr	r0, [pc, #80]	@ (8009448 <prvCheckForValidListAndQueue+0x64>)
 80093f8:	f7fd ffe8 	bl	80073cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093fc:	4813      	ldr	r0, [pc, #76]	@ (800944c <prvCheckForValidListAndQueue+0x68>)
 80093fe:	f7fd ffe5 	bl	80073cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009402:	4b13      	ldr	r3, [pc, #76]	@ (8009450 <prvCheckForValidListAndQueue+0x6c>)
 8009404:	4a10      	ldr	r2, [pc, #64]	@ (8009448 <prvCheckForValidListAndQueue+0x64>)
 8009406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009408:	4b12      	ldr	r3, [pc, #72]	@ (8009454 <prvCheckForValidListAndQueue+0x70>)
 800940a:	4a10      	ldr	r2, [pc, #64]	@ (800944c <prvCheckForValidListAndQueue+0x68>)
 800940c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800940e:	2300      	movs	r3, #0
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	4b11      	ldr	r3, [pc, #68]	@ (8009458 <prvCheckForValidListAndQueue+0x74>)
 8009414:	4a11      	ldr	r2, [pc, #68]	@ (800945c <prvCheckForValidListAndQueue+0x78>)
 8009416:	2110      	movs	r1, #16
 8009418:	200a      	movs	r0, #10
 800941a:	f7fe f8f5 	bl	8007608 <xQueueGenericCreateStatic>
 800941e:	4603      	mov	r3, r0
 8009420:	4a08      	ldr	r2, [pc, #32]	@ (8009444 <prvCheckForValidListAndQueue+0x60>)
 8009422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009424:	4b07      	ldr	r3, [pc, #28]	@ (8009444 <prvCheckForValidListAndQueue+0x60>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800942c:	4b05      	ldr	r3, [pc, #20]	@ (8009444 <prvCheckForValidListAndQueue+0x60>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	490b      	ldr	r1, [pc, #44]	@ (8009460 <prvCheckForValidListAndQueue+0x7c>)
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe fd1a 	bl	8007e6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009438:	f000 f978 	bl	800972c <vPortExitCritical>
}
 800943c:	bf00      	nop
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	24001078 	.word	0x24001078
 8009448:	24001048 	.word	0x24001048
 800944c:	2400105c 	.word	0x2400105c
 8009450:	24001070 	.word	0x24001070
 8009454:	24001074 	.word	0x24001074
 8009458:	24001124 	.word	0x24001124
 800945c:	24001084 	.word	0x24001084
 8009460:	0800d288 	.word	0x0800d288

08009464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3b04      	subs	r3, #4
 8009474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800947c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3b04      	subs	r3, #4
 8009482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	f023 0201 	bic.w	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3b04      	subs	r3, #4
 8009492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009494:	4a0c      	ldr	r2, [pc, #48]	@ (80094c8 <pxPortInitialiseStack+0x64>)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3b14      	subs	r3, #20
 800949e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3b04      	subs	r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f06f 0202 	mvn.w	r2, #2
 80094b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3b20      	subs	r3, #32
 80094b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094ba:	68fb      	ldr	r3, [r7, #12]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	080094cd 	.word	0x080094cd

080094cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094d6:	4b13      	ldr	r3, [pc, #76]	@ (8009524 <prvTaskExitError+0x58>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094de:	d00b      	beq.n	80094f8 <prvTaskExitError+0x2c>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	60fb      	str	r3, [r7, #12]
}
 80094f2:	bf00      	nop
 80094f4:	bf00      	nop
 80094f6:	e7fd      	b.n	80094f4 <prvTaskExitError+0x28>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	60bb      	str	r3, [r7, #8]
}
 800950a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800950c:	bf00      	nop
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0fc      	beq.n	800950e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	24000010 	.word	0x24000010
	...

08009530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009530:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <pxCurrentTCBConst2>)
 8009532:	6819      	ldr	r1, [r3, #0]
 8009534:	6808      	ldr	r0, [r1, #0]
 8009536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953a:	f380 8809 	msr	PSP, r0
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f04f 0000 	mov.w	r0, #0
 8009546:	f380 8811 	msr	BASEPRI, r0
 800954a:	4770      	bx	lr
 800954c:	f3af 8000 	nop.w

08009550 <pxCurrentTCBConst2>:
 8009550:	24000b48 	.word	0x24000b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009558:	4808      	ldr	r0, [pc, #32]	@ (800957c <prvPortStartFirstTask+0x24>)
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	6800      	ldr	r0, [r0, #0]
 800955e:	f380 8808 	msr	MSP, r0
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8814 	msr	CONTROL, r0
 800956a:	b662      	cpsie	i
 800956c:	b661      	cpsie	f
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	df00      	svc	0
 8009578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800957a:	bf00      	nop
 800957c:	e000ed08 	.word	0xe000ed08

08009580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009586:	4b47      	ldr	r3, [pc, #284]	@ (80096a4 <xPortStartScheduler+0x124>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a47      	ldr	r2, [pc, #284]	@ (80096a8 <xPortStartScheduler+0x128>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d10b      	bne.n	80095a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	613b      	str	r3, [r7, #16]
}
 80095a2:	bf00      	nop
 80095a4:	bf00      	nop
 80095a6:	e7fd      	b.n	80095a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095a8:	4b3e      	ldr	r3, [pc, #248]	@ (80096a4 <xPortStartScheduler+0x124>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a3f      	ldr	r2, [pc, #252]	@ (80096ac <xPortStartScheduler+0x12c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d10b      	bne.n	80095ca <xPortStartScheduler+0x4a>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	60fb      	str	r3, [r7, #12]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095ca:	4b39      	ldr	r3, [pc, #228]	@ (80096b0 <xPortStartScheduler+0x130>)
 80095cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	22ff      	movs	r2, #255	@ 0xff
 80095da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	4b31      	ldr	r3, [pc, #196]	@ (80096b4 <xPortStartScheduler+0x134>)
 80095f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095f2:	4b31      	ldr	r3, [pc, #196]	@ (80096b8 <xPortStartScheduler+0x138>)
 80095f4:	2207      	movs	r2, #7
 80095f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095f8:	e009      	b.n	800960e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095fa:	4b2f      	ldr	r3, [pc, #188]	@ (80096b8 <xPortStartScheduler+0x138>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3b01      	subs	r3, #1
 8009600:	4a2d      	ldr	r2, [pc, #180]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009602:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	b2db      	uxtb	r3, r3
 800960c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800960e:	78fb      	ldrb	r3, [r7, #3]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009616:	2b80      	cmp	r3, #128	@ 0x80
 8009618:	d0ef      	beq.n	80095fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800961a:	4b27      	ldr	r3, [pc, #156]	@ (80096b8 <xPortStartScheduler+0x138>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1c3 0307 	rsb	r3, r3, #7
 8009622:	2b04      	cmp	r3, #4
 8009624:	d00b      	beq.n	800963e <xPortStartScheduler+0xbe>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	60bb      	str	r3, [r7, #8]
}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	e7fd      	b.n	800963a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800963e:	4b1e      	ldr	r3, [pc, #120]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	4a1c      	ldr	r2, [pc, #112]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009648:	4b1b      	ldr	r3, [pc, #108]	@ (80096b8 <xPortStartScheduler+0x138>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009650:	4a19      	ldr	r2, [pc, #100]	@ (80096b8 <xPortStartScheduler+0x138>)
 8009652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	b2da      	uxtb	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800965c:	4b17      	ldr	r3, [pc, #92]	@ (80096bc <xPortStartScheduler+0x13c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a16      	ldr	r2, [pc, #88]	@ (80096bc <xPortStartScheduler+0x13c>)
 8009662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009668:	4b14      	ldr	r3, [pc, #80]	@ (80096bc <xPortStartScheduler+0x13c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a13      	ldr	r2, [pc, #76]	@ (80096bc <xPortStartScheduler+0x13c>)
 800966e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009674:	f000 f8da 	bl	800982c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009678:	4b11      	ldr	r3, [pc, #68]	@ (80096c0 <xPortStartScheduler+0x140>)
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800967e:	f000 f8f9 	bl	8009874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009682:	4b10      	ldr	r3, [pc, #64]	@ (80096c4 <xPortStartScheduler+0x144>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a0f      	ldr	r2, [pc, #60]	@ (80096c4 <xPortStartScheduler+0x144>)
 8009688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800968c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800968e:	f7ff ff63 	bl	8009558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009692:	f7ff f803 	bl	800869c <vTaskSwitchContext>
	prvTaskExitError();
 8009696:	f7ff ff19 	bl	80094cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	e000ed00 	.word	0xe000ed00
 80096a8:	410fc271 	.word	0x410fc271
 80096ac:	410fc270 	.word	0x410fc270
 80096b0:	e000e400 	.word	0xe000e400
 80096b4:	24001174 	.word	0x24001174
 80096b8:	24001178 	.word	0x24001178
 80096bc:	e000ed20 	.word	0xe000ed20
 80096c0:	24000010 	.word	0x24000010
 80096c4:	e000ef34 	.word	0xe000ef34

080096c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	607b      	str	r3, [r7, #4]
}
 80096e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096e2:	4b10      	ldr	r3, [pc, #64]	@ (8009724 <vPortEnterCritical+0x5c>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3301      	adds	r3, #1
 80096e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009724 <vPortEnterCritical+0x5c>)
 80096ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009724 <vPortEnterCritical+0x5c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d110      	bne.n	8009716 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <vPortEnterCritical+0x60>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <vPortEnterCritical+0x4e>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	603b      	str	r3, [r7, #0]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <vPortEnterCritical+0x4a>
	}
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	24000010 	.word	0x24000010
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009732:	4b12      	ldr	r3, [pc, #72]	@ (800977c <vPortExitCritical+0x50>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10b      	bne.n	8009752 <vPortExitCritical+0x26>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	607b      	str	r3, [r7, #4]
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	e7fd      	b.n	800974e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009752:	4b0a      	ldr	r3, [pc, #40]	@ (800977c <vPortExitCritical+0x50>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3b01      	subs	r3, #1
 8009758:	4a08      	ldr	r2, [pc, #32]	@ (800977c <vPortExitCritical+0x50>)
 800975a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800975c:	4b07      	ldr	r3, [pc, #28]	@ (800977c <vPortExitCritical+0x50>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d105      	bne.n	8009770 <vPortExitCritical+0x44>
 8009764:	2300      	movs	r3, #0
 8009766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f383 8811 	msr	BASEPRI, r3
}
 800976e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	24000010 	.word	0x24000010

08009780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009780:	f3ef 8009 	mrs	r0, PSP
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	4b15      	ldr	r3, [pc, #84]	@ (80097e0 <pxCurrentTCBConst>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	f01e 0f10 	tst.w	lr, #16
 8009790:	bf08      	it	eq
 8009792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	6010      	str	r0, [r2, #0]
 800979c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80097a4:	f380 8811 	msr	BASEPRI, r0
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f7fe ff74 	bl	800869c <vTaskSwitchContext>
 80097b4:	f04f 0000 	mov.w	r0, #0
 80097b8:	f380 8811 	msr	BASEPRI, r0
 80097bc:	bc09      	pop	{r0, r3}
 80097be:	6819      	ldr	r1, [r3, #0]
 80097c0:	6808      	ldr	r0, [r1, #0]
 80097c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c6:	f01e 0f10 	tst.w	lr, #16
 80097ca:	bf08      	it	eq
 80097cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097d0:	f380 8809 	msr	PSP, r0
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst>:
 80097e0:	24000b48 	.word	0x24000b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
}
 8009800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009802:	f7fe fe91 	bl	8008528 <xTaskIncrementTick>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800980c:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <xPortSysTickHandler+0x40>)
 800980e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f383 8811 	msr	BASEPRI, r3
}
 800981e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009830:	4b0b      	ldr	r3, [pc, #44]	@ (8009860 <vPortSetupTimerInterrupt+0x34>)
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <vPortSetupTimerInterrupt+0x38>)
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800983c:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <vPortSetupTimerInterrupt+0x3c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a0a      	ldr	r2, [pc, #40]	@ (800986c <vPortSetupTimerInterrupt+0x40>)
 8009842:	fba2 2303 	umull	r2, r3, r2, r3
 8009846:	099b      	lsrs	r3, r3, #6
 8009848:	4a09      	ldr	r2, [pc, #36]	@ (8009870 <vPortSetupTimerInterrupt+0x44>)
 800984a:	3b01      	subs	r3, #1
 800984c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800984e:	4b04      	ldr	r3, [pc, #16]	@ (8009860 <vPortSetupTimerInterrupt+0x34>)
 8009850:	2207      	movs	r2, #7
 8009852:	601a      	str	r2, [r3, #0]
}
 8009854:	bf00      	nop
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	e000e010 	.word	0xe000e010
 8009864:	e000e018 	.word	0xe000e018
 8009868:	24000000 	.word	0x24000000
 800986c:	10624dd3 	.word	0x10624dd3
 8009870:	e000e014 	.word	0xe000e014

08009874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009884 <vPortEnableVFP+0x10>
 8009878:	6801      	ldr	r1, [r0, #0]
 800987a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800987e:	6001      	str	r1, [r0, #0]
 8009880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009882:	bf00      	nop
 8009884:	e000ed88 	.word	0xe000ed88

08009888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800988e:	f3ef 8305 	mrs	r3, IPSR
 8009892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b0f      	cmp	r3, #15
 8009898:	d915      	bls.n	80098c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800989a:	4a18      	ldr	r2, [pc, #96]	@ (80098fc <vPortValidateInterruptPriority+0x74>)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098a4:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <vPortValidateInterruptPriority+0x78>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	7afa      	ldrb	r2, [r7, #11]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d20b      	bcs.n	80098c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	607b      	str	r3, [r7, #4]
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	e7fd      	b.n	80098c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009904 <vPortValidateInterruptPriority+0x7c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009908 <vPortValidateInterruptPriority+0x80>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d90b      	bls.n	80098ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	603b      	str	r3, [r7, #0]
}
 80098e8:	bf00      	nop
 80098ea:	bf00      	nop
 80098ec:	e7fd      	b.n	80098ea <vPortValidateInterruptPriority+0x62>
	}
 80098ee:	bf00      	nop
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	e000e3f0 	.word	0xe000e3f0
 8009900:	24001174 	.word	0x24001174
 8009904:	e000ed0c 	.word	0xe000ed0c
 8009908:	24001178 	.word	0x24001178

0800990c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	@ 0x28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009918:	f7fe fd4a 	bl	80083b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800991c:	4b5c      	ldr	r3, [pc, #368]	@ (8009a90 <pvPortMalloc+0x184>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009924:	f000 f924 	bl	8009b70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009928:	4b5a      	ldr	r3, [pc, #360]	@ (8009a94 <pvPortMalloc+0x188>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4013      	ands	r3, r2
 8009930:	2b00      	cmp	r3, #0
 8009932:	f040 8095 	bne.w	8009a60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01e      	beq.n	800997a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800993c:	2208      	movs	r2, #8
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4413      	add	r3, r2
 8009942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b00      	cmp	r3, #0
 800994c:	d015      	beq.n	800997a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f023 0307 	bic.w	r3, r3, #7
 8009954:	3308      	adds	r3, #8
 8009956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <pvPortMalloc+0x6e>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	617b      	str	r3, [r7, #20]
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	e7fd      	b.n	8009976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d06f      	beq.n	8009a60 <pvPortMalloc+0x154>
 8009980:	4b45      	ldr	r3, [pc, #276]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d86a      	bhi.n	8009a60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800998a:	4b44      	ldr	r3, [pc, #272]	@ (8009a9c <pvPortMalloc+0x190>)
 800998c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800998e:	4b43      	ldr	r3, [pc, #268]	@ (8009a9c <pvPortMalloc+0x190>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009994:	e004      	b.n	80099a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d903      	bls.n	80099b2 <pvPortMalloc+0xa6>
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f1      	bne.n	8009996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099b2:	4b37      	ldr	r3, [pc, #220]	@ (8009a90 <pvPortMalloc+0x184>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d051      	beq.n	8009a60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2208      	movs	r2, #8
 80099c2:	4413      	add	r3, r2
 80099c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	1ad2      	subs	r2, r2, r3
 80099d6:	2308      	movs	r3, #8
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	429a      	cmp	r2, r3
 80099dc:	d920      	bls.n	8009a20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <pvPortMalloc+0xfc>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	613b      	str	r3, [r7, #16]
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	e7fd      	b.n	8009a04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a1a:	69b8      	ldr	r0, [r7, #24]
 8009a1c:	f000 f90a 	bl	8009c34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a20:	4b1d      	ldr	r3, [pc, #116]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa0 <pvPortMalloc+0x194>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d203      	bcs.n	8009a42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a3a:	4b17      	ldr	r3, [pc, #92]	@ (8009a98 <pvPortMalloc+0x18c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a18      	ldr	r2, [pc, #96]	@ (8009aa0 <pvPortMalloc+0x194>)
 8009a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	4b13      	ldr	r3, [pc, #76]	@ (8009a94 <pvPortMalloc+0x188>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a56:	4b13      	ldr	r3, [pc, #76]	@ (8009aa4 <pvPortMalloc+0x198>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	4a11      	ldr	r2, [pc, #68]	@ (8009aa4 <pvPortMalloc+0x198>)
 8009a5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a60:	f7fe fcb4 	bl	80083cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <pvPortMalloc+0x17a>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	60fb      	str	r3, [r7, #12]
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <pvPortMalloc+0x176>
	return pvReturn;
 8009a86:	69fb      	ldr	r3, [r7, #28]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3728      	adds	r7, #40	@ 0x28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	24004d84 	.word	0x24004d84
 8009a94:	24004d98 	.word	0x24004d98
 8009a98:	24004d88 	.word	0x24004d88
 8009a9c:	24004d7c 	.word	0x24004d7c
 8009aa0:	24004d8c 	.word	0x24004d8c
 8009aa4:	24004d90 	.word	0x24004d90

08009aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d04f      	beq.n	8009b5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009aba:	2308      	movs	r3, #8
 8009abc:	425b      	negs	r3, r3
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b25      	ldr	r3, [pc, #148]	@ (8009b64 <vPortFree+0xbc>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10b      	bne.n	8009aee <vPortFree+0x46>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	60fb      	str	r3, [r7, #12]
}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	e7fd      	b.n	8009aea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <vPortFree+0x66>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	60bb      	str	r3, [r7, #8]
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	e7fd      	b.n	8009b0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	4b14      	ldr	r3, [pc, #80]	@ (8009b64 <vPortFree+0xbc>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01e      	beq.n	8009b5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11a      	bne.n	8009b5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	4b0e      	ldr	r3, [pc, #56]	@ (8009b64 <vPortFree+0xbc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	401a      	ands	r2, r3
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b34:	f7fe fc3c 	bl	80083b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b68 <vPortFree+0xc0>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4413      	add	r3, r2
 8009b42:	4a09      	ldr	r2, [pc, #36]	@ (8009b68 <vPortFree+0xc0>)
 8009b44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b46:	6938      	ldr	r0, [r7, #16]
 8009b48:	f000 f874 	bl	8009c34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b4c:	4b07      	ldr	r3, [pc, #28]	@ (8009b6c <vPortFree+0xc4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	3301      	adds	r3, #1
 8009b52:	4a06      	ldr	r2, [pc, #24]	@ (8009b6c <vPortFree+0xc4>)
 8009b54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b56:	f7fe fc39 	bl	80083cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b5a:	bf00      	nop
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	24004d98 	.word	0x24004d98
 8009b68:	24004d88 	.word	0x24004d88
 8009b6c:	24004d94 	.word	0x24004d94

08009b70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b7c:	4b27      	ldr	r3, [pc, #156]	@ (8009c1c <prvHeapInit+0xac>)
 8009b7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00c      	beq.n	8009ba4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f023 0307 	bic.w	r3, r3, #7
 8009b96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c1c <prvHeapInit+0xac>)
 8009ba0:	4413      	add	r3, r2
 8009ba2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c20 <prvHeapInit+0xb0>)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bae:	4b1c      	ldr	r3, [pc, #112]	@ (8009c20 <prvHeapInit+0xb0>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bbc:	2208      	movs	r2, #8
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f023 0307 	bic.w	r3, r3, #7
 8009bca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4a15      	ldr	r2, [pc, #84]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bd2:	4b14      	ldr	r3, [pc, #80]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bda:	4b12      	ldr	r3, [pc, #72]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c24 <prvHeapInit+0xb4>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8009c28 <prvHeapInit+0xb8>)
 8009bfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	4a09      	ldr	r2, [pc, #36]	@ (8009c2c <prvHeapInit+0xbc>)
 8009c06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c08:	4b09      	ldr	r3, [pc, #36]	@ (8009c30 <prvHeapInit+0xc0>)
 8009c0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c0e:	601a      	str	r2, [r3, #0]
}
 8009c10:	bf00      	nop
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	2400117c 	.word	0x2400117c
 8009c20:	24004d7c 	.word	0x24004d7c
 8009c24:	24004d84 	.word	0x24004d84
 8009c28:	24004d8c 	.word	0x24004d8c
 8009c2c:	24004d88 	.word	0x24004d88
 8009c30:	24004d98 	.word	0x24004d98

08009c34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c3c:	4b28      	ldr	r3, [pc, #160]	@ (8009ce0 <prvInsertBlockIntoFreeList+0xac>)
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e002      	b.n	8009c48 <prvInsertBlockIntoFreeList+0x14>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d8f7      	bhi.n	8009c42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d108      	bne.n	8009c76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	441a      	add	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	441a      	add	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d118      	bne.n	8009cbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d00d      	beq.n	8009cb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	e008      	b.n	8009cc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	e003      	b.n	8009cc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d002      	beq.n	8009cd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	24004d7c 	.word	0x24004d7c
 8009ce4:	24004d84 	.word	0x24004d84

08009ce8 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 8009cec:	2200      	movs	r2, #0
 8009cee:	2108      	movs	r1, #8
 8009cf0:	480a      	ldr	r0, [pc, #40]	@ (8009d1c <ad7606_Init+0x34>)
 8009cf2:	f7f8 f891 	bl	8001e18 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	f7f7 fd56 	bl	80017a8 <HAL_Delay>
    AD7606_RST_SET();
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	2108      	movs	r1, #8
 8009d00:	4806      	ldr	r0, [pc, #24]	@ (8009d1c <ad7606_Init+0x34>)
 8009d02:	f7f8 f889 	bl	8001e18 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8009d06:	2001      	movs	r0, #1
 8009d08:	f7f7 fd4e 	bl	80017a8 <HAL_Delay>
    AD7606_RST_RESET();
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2108      	movs	r1, #8
 8009d10:	4802      	ldr	r0, [pc, #8]	@ (8009d1c <ad7606_Init+0x34>)
 8009d12:	f7f8 f881 	bl	8001e18 <HAL_GPIO_WritePin>
}
 8009d16:	bf00      	nop
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	58021800 	.word	0x58021800

08009d20 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2180      	movs	r1, #128	@ 0x80
 8009d32:	4809      	ldr	r0, [pc, #36]	@ (8009d58 <ad7606_Read+0x38>)
 8009d34:	f7f8 f870 	bl	8001e18 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 8009d38:	88fa      	ldrh	r2, [r7, #6]
 8009d3a:	2364      	movs	r3, #100	@ 0x64
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7fb fda8 	bl	8005894 <HAL_SPI_Receive>
    AD7606_CS_SET();
 8009d44:	2201      	movs	r2, #1
 8009d46:	2180      	movs	r1, #128	@ 0x80
 8009d48:	4803      	ldr	r0, [pc, #12]	@ (8009d58 <ad7606_Read+0x38>)
 8009d4a:	f7f8 f865 	bl	8001e18 <HAL_GPIO_WritePin>
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	58021800 	.word	0x58021800

08009d5c <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7fc fa1f 	bl	80061ac <HAL_TIM_PWM_Start>
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	460b      	mov	r3, r1
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e03d      	b.n	8009e08 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	da0f      	bge.n	8009dbc <ad7606_Convert+0x44>
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	425b      	negs	r3, r3
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	425b      	negs	r3, r3
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	b21b      	sxth	r3, r3
 8009dba:	e005      	b.n	8009dc8 <ad7606_Convert+0x50>
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	0052      	lsls	r2, r2, #1
 8009dcc:	68f9      	ldr	r1, [r7, #12]
 8009dce:	440a      	add	r2, r1
 8009dd0:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009de6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009dea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	4413      	add	r3, r2
 8009df6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8009e20 <ad7606_Convert+0xa8>
 8009dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dfe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	3301      	adds	r3, #1
 8009e06:	617b      	str	r3, [r7, #20]
 8009e08:	897b      	ldrh	r3, [r7, #10]
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	dbbd      	blt.n	8009d8c <ad7606_Convert+0x14>
    }
}
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	47000000 	.word	0x47000000

08009e24 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 8009e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e28:	b087      	sub	sp, #28
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	817b      	strh	r3, [r7, #10]
 8009e34:	466b      	mov	r3, sp
 8009e36:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 8009e38:	8979      	ldrh	r1, [r7, #10]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	b28b      	uxth	r3, r1
 8009e42:	2200      	movs	r2, #0
 8009e44:	4698      	mov	r8, r3
 8009e46:	4691      	mov	r9, r2
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	f04f 0300 	mov.w	r3, #0
 8009e50:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8009e54:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8009e58:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8009e5c:	b28b      	uxth	r3, r1
 8009e5e:	2200      	movs	r2, #0
 8009e60:	461c      	mov	r4, r3
 8009e62:	4615      	mov	r5, r2
 8009e64:	f04f 0200 	mov.w	r2, #0
 8009e68:	f04f 0300 	mov.w	r3, #0
 8009e6c:	012b      	lsls	r3, r5, #4
 8009e6e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009e72:	0122      	lsls	r2, r4, #4
 8009e74:	460b      	mov	r3, r1
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	3307      	adds	r3, #7
 8009e7a:	08db      	lsrs	r3, r3, #3
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	ebad 0d03 	sub.w	sp, sp, r3
 8009e82:	466b      	mov	r3, sp
 8009e84:	3301      	adds	r3, #1
 8009e86:	085b      	lsrs	r3, r3, #1
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 8009e8c:	897b      	ldrh	r3, [r7, #10]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6939      	ldr	r1, [r7, #16]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f7ff ff44 	bl	8009d20 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8009e98:	897b      	ldrh	r3, [r7, #10]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6938      	ldr	r0, [r7, #16]
 8009ea0:	f7ff ff6a 	bl	8009d78 <ad7606_Convert>
 8009ea4:	46b5      	mov	sp, r6
}
 8009ea6:	bf00      	nop
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009eb0 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af04      	add	r7, sp, #16
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8009ec4:	883b      	ldrh	r3, [r7, #0]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 8009ece:	883b      	ldrh	r3, [r7, #0]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	69d8      	ldr	r0, [r3, #28]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	2364      	movs	r3, #100	@ 0x64
 8009ee6:	9302      	str	r3, [sp, #8]
 8009ee8:	2302      	movs	r3, #2
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f7f8 f87a 	bl	8001fec <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d105      	bne.n	8009f0a <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 8009efe:	883b      	ldrh	r3, [r7, #0]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	82da      	strh	r2, [r3, #22]
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	2100      	movs	r1, #0
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff ffc4 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	885b      	ldrh	r3, [r3, #2]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	2101      	movs	r1, #1
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff ffbd 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	889b      	ldrh	r3, [r3, #4]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	2102      	movs	r1, #2
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff ffb6 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	88db      	ldrh	r3, [r3, #6]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2103      	movs	r1, #3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ffaf 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	891b      	ldrh	r3, [r3, #8]
 8009f56:	461a      	mov	r2, r3
 8009f58:	210b      	movs	r1, #11
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff ffa8 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	895b      	ldrh	r3, [r3, #10]
 8009f64:	461a      	mov	r2, r3
 8009f66:	210c      	movs	r1, #12
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff ffa1 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	899b      	ldrh	r3, [r3, #12]
 8009f72:	461a      	mov	r2, r3
 8009f74:	210d      	movs	r1, #13
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff ff9a 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	89db      	ldrh	r3, [r3, #14]
 8009f80:	461a      	mov	r2, r3
 8009f82:	210e      	movs	r1, #14
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff ff93 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	8a1b      	ldrh	r3, [r3, #16]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	210f      	movs	r1, #15
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff ff8c 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	8a5b      	ldrh	r3, [r3, #18]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	2110      	movs	r1, #16
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff ff85 	bl	8009eb0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	8a9b      	ldrh	r3, [r3, #20]
 8009faa:	461a      	mov	r2, r3
 8009fac:	2111      	movs	r1, #17
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff ff7e 	bl	8009eb0 <INA228_writeReg>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 8009fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fc0:	b08c      	sub	sp, #48	@ 0x30
 8009fc2:	af04      	add	r7, sp, #16
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60fb      	str	r3, [r7, #12]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	78fb      	ldrb	r3, [r7, #3]
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	4921      	ldr	r1, [pc, #132]	@ (800a068 <INA228_readReg+0xac>)
 8009fe2:	5ccb      	ldrb	r3, [r1, r3]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	2364      	movs	r3, #100	@ 0x64
 8009fe8:	9302      	str	r3, [sp, #8]
 8009fea:	9101      	str	r1, [sp, #4]
 8009fec:	f107 030c 	add.w	r3, r7, #12
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4601      	mov	r1, r0
 8009ff6:	481d      	ldr	r0, [pc, #116]	@ (800a06c <INA228_readReg+0xb0>)
 8009ff8:	f7f8 f90c 	bl	8002214 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 8009ffc:	7b3b      	ldrb	r3, [r7, #12]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2200      	movs	r2, #0
 800a002:	469a      	mov	sl, r3
 800a004:	4693      	mov	fp, r2
 800a006:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800a00a:	2301      	movs	r3, #1
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	e01b      	b.n	800a048 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 800a010:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	020b      	lsls	r3, r1, #8
 800a01e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a022:	0202      	lsls	r2, r0, #8
 800a024:	f107 000c 	add.w	r0, r7, #12
 800a028:	6979      	ldr	r1, [r7, #20]
 800a02a:	4401      	add	r1, r0
 800a02c:	7809      	ldrb	r1, [r1, #0]
 800a02e:	b2c9      	uxtb	r1, r1
 800a030:	2000      	movs	r0, #0
 800a032:	460c      	mov	r4, r1
 800a034:	4605      	mov	r5, r0
 800a036:	ea42 0804 	orr.w	r8, r2, r4
 800a03a:	ea43 0905 	orr.w	r9, r3, r5
 800a03e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	3301      	adds	r3, #1
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	4a07      	ldr	r2, [pc, #28]	@ (800a068 <INA228_readReg+0xac>)
 800a04c:	5cd3      	ldrb	r3, [r2, r3]
 800a04e:	461a      	mov	r2, r3
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	4293      	cmp	r3, r2
 800a054:	dbdc      	blt.n	800a010 <INA228_readReg+0x54>
	}

	return value;
 800a056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800a05a:	4610      	mov	r0, r2
 800a05c:	4619      	mov	r1, r3
 800a05e:	3720      	adds	r7, #32
 800a060:	46bd      	mov	sp, r7
 800a062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a066:	bf00      	nop
 800a068:	0800d30c 	.word	0x0800d30c
 800a06c:	24000248 	.word	0x24000248

0800a070 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 800a078:	2105      	movs	r1, #5
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff ff9e 	bl	8009fbc <INA228_readReg>
 800a080:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800a084:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a088:	f04f 0200 	mov.w	r2, #0
 800a08c:	f04f 0300 	mov.w	r3, #0
 800a090:	0902      	lsrs	r2, r0, #4
 800a092:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800a096:	090b      	lsrs	r3, r1, #4
 800a098:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 800a09c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0a0:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a0a4:	f173 0300 	sbcs.w	r3, r3, #0
 800a0a8:	d30c      	bcc.n	800a0c4 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 800a0aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0ae:	f7f6 fa37 	bl	8000520 <__aeabi_ul2f>
 800a0b2:	ee07 0a10 	vmov	s14, r0
 800a0b6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a110 <INA228_getVBUS_V+0xa0>
 800a0ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0be:	edc7 7a05 	vstr	s15, [r7, #20]
 800a0c2:	e005      	b.n	800a0d0 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 800a0c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0c8:	f7f6 fa2a 	bl	8000520 <__aeabi_ul2f>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125) / 1000000;
 800a0d0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a0d8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 800a100 <INA228_getVBUS_V+0x90>
 800a0dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a0e0:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 800a108 <INA228_getVBUS_V+0x98>
 800a0e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800a0ec:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	ee07 3a90 	vmov	s15, r3
}
 800a0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	00000000 	.word	0x00000000
 800a104:	40686a00 	.word	0x40686a00
 800a108:	00000000 	.word	0x00000000
 800a10c:	412e8480 	.word	0x412e8480
 800a110:	49800000 	.word	0x49800000

0800a114 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 800a11c:	2107      	movs	r1, #7
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7ff ff4c 	bl	8009fbc <INA228_readReg>
 800a124:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800a128:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	0902      	lsrs	r2, r0, #4
 800a136:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800a13a:	090b      	lsrs	r3, r1, #4
 800a13c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 800a140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a144:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800a148:	f173 0300 	sbcs.w	r3, r3, #0
 800a14c:	d30c      	bcc.n	800a168 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 800a14e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a152:	f7f6 f9e5 	bl	8000520 <__aeabi_ul2f>
 800a156:	ee07 0a10 	vmov	s14, r0
 800a15a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a184 <INA228_getCURRENT_signedLSB+0x70>
 800a15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a162:	edc7 7a05 	vstr	s15, [r7, #20]
 800a166:	e005      	b.n	800a174 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 800a168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a16c:	f7f6 f9d8 	bl	8000520 <__aeabi_ul2f>
 800a170:	4603      	mov	r3, r0
 800a172:	617b      	str	r3, [r7, #20]
	}

	return data;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	ee07 3a90 	vmov	s15, r3
}
 800a17a:	eeb0 0a67 	vmov.f32	s0, s15
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	49800000 	.word	0x49800000

0800a188 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ffbf 	bl	800a114 <INA228_getCURRENT_signedLSB>
 800a196:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	edd3 7a06 	vldr	s15, [r3, #24]
 800a1a0:	ed97 7a03 	vldr	s14, [r7, #12]
 800a1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1a8:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	ee07 3a90 	vmov	s15, r3
}
 800a1b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <OLED_WR_Byte>:
		OLED_WR_Byte(0xA0, OLED_CMD);
	}
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	460a      	mov	r2, r1
 800a1c6:	71fb      	strb	r3, [r7, #7]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800a1cc:	1dfb      	adds	r3, r7, #7
 800a1ce:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800a1d0:	79bb      	ldrb	r3, [r7, #6]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	2140      	movs	r1, #64	@ 0x40
 800a1da:	4811      	ldr	r0, [pc, #68]	@ (800a220 <OLED_WR_Byte+0x64>)
 800a1dc:	f7f7 fe1c 	bl	8001e18 <HAL_GPIO_WritePin>
 800a1e0:	e004      	b.n	800a1ec <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2140      	movs	r1, #64	@ 0x40
 800a1e6:	480e      	ldr	r0, [pc, #56]	@ (800a220 <OLED_WR_Byte+0x64>)
 800a1e8:	f7f7 fe16 	bl	8001e18 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	480c      	ldr	r0, [pc, #48]	@ (800a224 <OLED_WR_Byte+0x68>)
 800a1f2:	f7f7 fe11 	bl	8001e18 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800a1f6:	23c8      	movs	r3, #200	@ 0xc8
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	480a      	ldr	r0, [pc, #40]	@ (800a228 <OLED_WR_Byte+0x6c>)
 800a1fe:	f7fb f95b 	bl	80054b8 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800a202:	2201      	movs	r2, #1
 800a204:	2102      	movs	r1, #2
 800a206:	4807      	ldr	r0, [pc, #28]	@ (800a224 <OLED_WR_Byte+0x68>)
 800a208:	f7f7 fe06 	bl	8001e18 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800a20c:	2201      	movs	r2, #1
 800a20e:	2140      	movs	r1, #64	@ 0x40
 800a210:	4803      	ldr	r0, [pc, #12]	@ (800a220 <OLED_WR_Byte+0x64>)
 800a212:	f7f7 fe01 	bl	8001e18 <HAL_GPIO_WritePin>
}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	58022000 	.word	0x58022000
 800a224:	58020400 	.word	0x58020400
 800a228:	2400029c 	.word	0x2400029c

0800a22c <OLED_Refresh>:
	OLED_WR_Byte(0xAF, OLED_CMD); // 关闭屏幕
}

// 更新显存到OLED
void OLED_Refresh(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a232:	2300      	movs	r3, #0
 800a234:	71fb      	strb	r3, [r7, #7]
 800a236:	e026      	b.n	800a286 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	3b50      	subs	r3, #80	@ 0x50
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2100      	movs	r1, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff ffbb 	bl	800a1bc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800a246:	2100      	movs	r1, #0
 800a248:	2000      	movs	r0, #0
 800a24a:	f7ff ffb7 	bl	800a1bc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800a24e:	2100      	movs	r1, #0
 800a250:	2010      	movs	r0, #16
 800a252:	f7ff ffb3 	bl	800a1bc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a256:	2300      	movs	r3, #0
 800a258:	71bb      	strb	r3, [r7, #6]
 800a25a:	e00d      	b.n	800a278 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800a25c:	79ba      	ldrb	r2, [r7, #6]
 800a25e:	79fb      	ldrb	r3, [r7, #7]
 800a260:	490d      	ldr	r1, [pc, #52]	@ (800a298 <OLED_Refresh+0x6c>)
 800a262:	00d2      	lsls	r2, r2, #3
 800a264:	440a      	add	r2, r1
 800a266:	4413      	add	r3, r2
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2101      	movs	r1, #1
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff ffa5 	bl	800a1bc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a272:	79bb      	ldrb	r3, [r7, #6]
 800a274:	3301      	adds	r3, #1
 800a276:	71bb      	strb	r3, [r7, #6]
 800a278:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	daed      	bge.n	800a25c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	3301      	adds	r3, #1
 800a284:	71fb      	strb	r3, [r7, #7]
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	2b07      	cmp	r3, #7
 800a28a:	d9d5      	bls.n	800a238 <OLED_Refresh+0xc>
	}
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	24004d9c 	.word	0x24004d9c

0800a29c <OLED_Clear>:
// 清屏函数
void OLED_Clear(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	71fb      	strb	r3, [r7, #7]
 800a2a6:	e014      	b.n	800a2d2 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	71bb      	strb	r3, [r7, #6]
 800a2ac:	e00a      	b.n	800a2c4 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800a2ae:	79ba      	ldrb	r2, [r7, #6]
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	490c      	ldr	r1, [pc, #48]	@ (800a2e4 <OLED_Clear+0x48>)
 800a2b4:	00d2      	lsls	r2, r2, #3
 800a2b6:	440a      	add	r2, r1
 800a2b8:	4413      	add	r3, r2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800a2be:	79bb      	ldrb	r3, [r7, #6]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	71bb      	strb	r3, [r7, #6]
 800a2c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	daf0      	bge.n	800a2ae <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	71fb      	strb	r3, [r7, #7]
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	2b07      	cmp	r3, #7
 800a2d6:	d9e7      	bls.n	800a2a8 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800a2d8:	f7ff ffa8 	bl	800a22c <OLED_Refresh>
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	24004d9c 	.word	0x24004d9c

0800a2e8 <OLED_DrawPoint>:

// 画点
// x:0~127
// y:0~63
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	460a      	mov	r2, r1
 800a2f2:	71fb      	strb	r3, [r7, #7]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800a2f8:	79bb      	ldrb	r3, [r7, #6]
 800a2fa:	08db      	lsrs	r3, r3, #3
 800a2fc:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800a2fe:	79bb      	ldrb	r3, [r7, #6]
 800a300:	f003 0307 	and.w	r3, r3, #7
 800a304:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	2201      	movs	r2, #1
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800a310:	79fa      	ldrb	r2, [r7, #7]
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	490a      	ldr	r1, [pc, #40]	@ (800a340 <OLED_DrawPoint+0x58>)
 800a316:	00d2      	lsls	r2, r2, #3
 800a318:	440a      	add	r2, r1
 800a31a:	4413      	add	r3, r2
 800a31c:	7818      	ldrb	r0, [r3, #0]
 800a31e:	79fa      	ldrb	r2, [r7, #7]
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	7b79      	ldrb	r1, [r7, #13]
 800a324:	4301      	orrs	r1, r0
 800a326:	b2c8      	uxtb	r0, r1
 800a328:	4905      	ldr	r1, [pc, #20]	@ (800a340 <OLED_DrawPoint+0x58>)
 800a32a:	00d2      	lsls	r2, r2, #3
 800a32c:	440a      	add	r2, r1
 800a32e:	4413      	add	r3, r2
 800a330:	4602      	mov	r2, r0
 800a332:	701a      	strb	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	24004d9c 	.word	0x24004d9c

0800a344 <OLED_ClearPoint>:

// 清除一个点
// x:0~127
// y:0~63
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	460a      	mov	r2, r1
 800a34e:	71fb      	strb	r3, [r7, #7]
 800a350:	4613      	mov	r3, r2
 800a352:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800a354:	79bb      	ldrb	r3, [r7, #6]
 800a356:	08db      	lsrs	r3, r3, #3
 800a358:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800a35a:	79bb      	ldrb	r3, [r7, #6]
 800a35c:	f003 0307 	and.w	r3, r3, #7
 800a360:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2201      	movs	r2, #1
 800a366:	fa02 f303 	lsl.w	r3, r2, r3
 800a36a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800a36c:	79fa      	ldrb	r2, [r7, #7]
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	491b      	ldr	r1, [pc, #108]	@ (800a3e0 <OLED_ClearPoint+0x9c>)
 800a372:	00d2      	lsls	r2, r2, #3
 800a374:	440a      	add	r2, r1
 800a376:	4413      	add	r3, r2
 800a378:	7819      	ldrb	r1, [r3, #0]
 800a37a:	79fa      	ldrb	r2, [r7, #7]
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	43c9      	mvns	r1, r1
 800a380:	b2c8      	uxtb	r0, r1
 800a382:	4917      	ldr	r1, [pc, #92]	@ (800a3e0 <OLED_ClearPoint+0x9c>)
 800a384:	00d2      	lsls	r2, r2, #3
 800a386:	440a      	add	r2, r1
 800a388:	4413      	add	r3, r2
 800a38a:	4602      	mov	r2, r0
 800a38c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800a38e:	79fa      	ldrb	r2, [r7, #7]
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	4913      	ldr	r1, [pc, #76]	@ (800a3e0 <OLED_ClearPoint+0x9c>)
 800a394:	00d2      	lsls	r2, r2, #3
 800a396:	440a      	add	r2, r1
 800a398:	4413      	add	r3, r2
 800a39a:	7818      	ldrb	r0, [r3, #0]
 800a39c:	79fa      	ldrb	r2, [r7, #7]
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	7b79      	ldrb	r1, [r7, #13]
 800a3a2:	4301      	orrs	r1, r0
 800a3a4:	b2c8      	uxtb	r0, r1
 800a3a6:	490e      	ldr	r1, [pc, #56]	@ (800a3e0 <OLED_ClearPoint+0x9c>)
 800a3a8:	00d2      	lsls	r2, r2, #3
 800a3aa:	440a      	add	r2, r1
 800a3ac:	4413      	add	r3, r2
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800a3b2:	79fa      	ldrb	r2, [r7, #7]
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	490a      	ldr	r1, [pc, #40]	@ (800a3e0 <OLED_ClearPoint+0x9c>)
 800a3b8:	00d2      	lsls	r2, r2, #3
 800a3ba:	440a      	add	r2, r1
 800a3bc:	4413      	add	r3, r2
 800a3be:	7819      	ldrb	r1, [r3, #0]
 800a3c0:	79fa      	ldrb	r2, [r7, #7]
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
 800a3c4:	43c9      	mvns	r1, r1
 800a3c6:	b2c8      	uxtb	r0, r1
 800a3c8:	4905      	ldr	r1, [pc, #20]	@ (800a3e0 <OLED_ClearPoint+0x9c>)
 800a3ca:	00d2      	lsls	r2, r2, #3
 800a3cc:	440a      	add	r2, r1
 800a3ce:	4413      	add	r3, r2
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	701a      	strb	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	24004d9c 	.word	0x24004d9c

0800a3e4 <OLED_ShowChar>:
// x:0~127
// y:0~63
// size:选择字体 12/16/24
// 取模方式 逐列式
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800a3e4:	b590      	push	{r4, r7, lr}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4623      	mov	r3, r4
 800a3f4:	71fb      	strb	r3, [r7, #7]
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	71bb      	strb	r3, [r7, #6]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	717b      	strb	r3, [r7, #5]
 800a3fe:	4613      	mov	r3, r2
 800a400:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800a402:	79bb      	ldrb	r3, [r7, #6]
 800a404:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800a406:	793b      	ldrb	r3, [r7, #4]
 800a408:	08db      	lsrs	r3, r3, #3
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	793b      	ldrb	r3, [r7, #4]
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	bf14      	ite	ne
 800a41a:	2301      	movne	r3, #1
 800a41c:	2300      	moveq	r3, #0
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	4413      	add	r3, r2
 800a422:	b2da      	uxtb	r2, r3
 800a424:	793b      	ldrb	r3, [r7, #4]
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	fb12 f303 	smulbb	r3, r2, r3
 800a42e:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800a430:	797b      	ldrb	r3, [r7, #5]
 800a432:	3b20      	subs	r3, #32
 800a434:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]
 800a43a:	e057      	b.n	800a4ec <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800a43c:	793b      	ldrb	r3, [r7, #4]
 800a43e:	2b0c      	cmp	r3, #12
 800a440:	d10b      	bne.n	800a45a <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800a442:	7aba      	ldrb	r2, [r7, #10]
 800a444:	7bf9      	ldrb	r1, [r7, #15]
 800a446:	482e      	ldr	r0, [pc, #184]	@ (800a500 <OLED_ShowChar+0x11c>)
 800a448:	4613      	mov	r3, r2
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4403      	add	r3, r0
 800a452:	440b      	add	r3, r1
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	737b      	strb	r3, [r7, #13]
 800a458:	e019      	b.n	800a48e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800a45a:	793b      	ldrb	r3, [r7, #4]
 800a45c:	2b10      	cmp	r3, #16
 800a45e:	d108      	bne.n	800a472 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800a460:	7aba      	ldrb	r2, [r7, #10]
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	4927      	ldr	r1, [pc, #156]	@ (800a504 <OLED_ShowChar+0x120>)
 800a466:	0112      	lsls	r2, r2, #4
 800a468:	440a      	add	r2, r1
 800a46a:	4413      	add	r3, r2
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	737b      	strb	r3, [r7, #13]
 800a470:	e00d      	b.n	800a48e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800a472:	793b      	ldrb	r3, [r7, #4]
 800a474:	2b18      	cmp	r3, #24
 800a476:	d13e      	bne.n	800a4f6 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800a478:	7aba      	ldrb	r2, [r7, #10]
 800a47a:	7bf9      	ldrb	r1, [r7, #15]
 800a47c:	4822      	ldr	r0, [pc, #136]	@ (800a508 <OLED_ShowChar+0x124>)
 800a47e:	4613      	mov	r3, r2
 800a480:	00db      	lsls	r3, r3, #3
 800a482:	4413      	add	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4403      	add	r3, r0
 800a488:	440b      	add	r3, r1
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800a48e:	2300      	movs	r3, #0
 800a490:	73bb      	strb	r3, [r7, #14]
 800a492:	e025      	b.n	800a4e0 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800a494:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	da06      	bge.n	800a4aa <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800a49c:	79ba      	ldrb	r2, [r7, #6]
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7ff ff20 	bl	800a2e8 <OLED_DrawPoint>
 800a4a8:	e005      	b.n	800a4b6 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800a4aa:	79ba      	ldrb	r2, [r7, #6]
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff ff47 	bl	800a344 <OLED_ClearPoint>
			temp <<= 1;
 800a4b6:	7b7b      	ldrb	r3, [r7, #13]
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	737b      	strb	r3, [r7, #13]
			y++;
 800a4bc:	79bb      	ldrb	r3, [r7, #6]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800a4c2:	79ba      	ldrb	r2, [r7, #6]
 800a4c4:	7b3b      	ldrb	r3, [r7, #12]
 800a4c6:	1ad2      	subs	r2, r2, r3
 800a4c8:	793b      	ldrb	r3, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d105      	bne.n	800a4da <OLED_ShowChar+0xf6>
			{
				y = y0;
 800a4ce:	7b3b      	ldrb	r3, [r7, #12]
 800a4d0:	71bb      	strb	r3, [r7, #6]
				x++;
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	71fb      	strb	r3, [r7, #7]
				break;
 800a4d8:	e005      	b.n	800a4e6 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800a4da:	7bbb      	ldrb	r3, [r7, #14]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	73bb      	strb	r3, [r7, #14]
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	2b07      	cmp	r3, #7
 800a4e4:	d9d6      	bls.n	800a494 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	73fb      	strb	r3, [r7, #15]
 800a4ec:	7bfa      	ldrb	r2, [r7, #15]
 800a4ee:	7afb      	ldrb	r3, [r7, #11]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d3a3      	bcc.n	800a43c <OLED_ShowChar+0x58>
 800a4f4:	e000      	b.n	800a4f8 <OLED_ShowChar+0x114>
			return;
 800a4f6:	bf00      	nop
			}
		}
	}
}
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd90      	pop	{r4, r7, pc}
 800a4fe:	bf00      	nop
 800a500:	0800d34c 	.word	0x0800d34c
 800a504:	0800d7c0 	.word	0x0800d7c0
 800a508:	0800ddb0 	.word	0x0800ddb0

0800a50c <OLED_ShowString>:
// 显示字符串
// x,y:起点坐标
// size1:字体大小
//*chr:字符串起始地址
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	603a      	str	r2, [r7, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	4603      	mov	r3, r0
 800a518:	71fb      	strb	r3, [r7, #7]
 800a51a:	460b      	mov	r3, r1
 800a51c:	71bb      	strb	r3, [r7, #6]
 800a51e:	4613      	mov	r3, r2
 800a520:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800a522:	e01b      	b.n	800a55c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781a      	ldrb	r2, [r3, #0]
 800a528:	797b      	ldrb	r3, [r7, #5]
 800a52a:	79b9      	ldrb	r1, [r7, #6]
 800a52c:	79f8      	ldrb	r0, [r7, #7]
 800a52e:	f7ff ff59 	bl	800a3e4 <OLED_ShowChar>
		x += size1 / 2;
 800a532:	797b      	ldrb	r3, [r7, #5]
 800a534:	085b      	lsrs	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	4413      	add	r3, r2
 800a53c:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800a53e:	79fa      	ldrb	r2, [r7, #7]
 800a540:	797b      	ldrb	r3, [r7, #5]
 800a542:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a546:	429a      	cmp	r2, r3
 800a548:	dd05      	ble.n	800a556 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800a54a:	2302      	movs	r3, #2
 800a54c:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800a54e:	79ba      	ldrb	r2, [r7, #6]
 800a550:	797b      	ldrb	r3, [r7, #5]
 800a552:	4413      	add	r3, r2
 800a554:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	3301      	adds	r3, #1
 800a55a:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b1f      	cmp	r3, #31
 800a562:	d903      	bls.n	800a56c <OLED_ShowString+0x60>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b7e      	cmp	r3, #126	@ 0x7e
 800a56a:	d9db      	bls.n	800a524 <OLED_ShowString+0x18>
	}
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <OLED_Init>:
	OLED_ShowString(2, 2, str, 12);
	OLED_Refresh();
}
// OLED的初始化
void OLED_Init(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800a578:	2200      	movs	r2, #0
 800a57a:	2120      	movs	r1, #32
 800a57c:	483f      	ldr	r0, [pc, #252]	@ (800a67c <OLED_Init+0x108>)
 800a57e:	f7f7 fc4b 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800a582:	20c8      	movs	r0, #200	@ 0xc8
 800a584:	f7f7 f910 	bl	80017a8 <HAL_Delay>
	OLED_RES_Set();
 800a588:	2201      	movs	r2, #1
 800a58a:	2120      	movs	r1, #32
 800a58c:	483b      	ldr	r0, [pc, #236]	@ (800a67c <OLED_Init+0x108>)
 800a58e:	f7f7 fc43 	bl	8001e18 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800a592:	2100      	movs	r1, #0
 800a594:	20ae      	movs	r0, #174	@ 0xae
 800a596:	f7ff fe11 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800a59a:	2100      	movs	r1, #0
 800a59c:	2000      	movs	r0, #0
 800a59e:	f7ff fe0d 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	2010      	movs	r0, #16
 800a5a6:	f7ff fe09 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	2040      	movs	r0, #64	@ 0x40
 800a5ae:	f7ff fe05 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	2081      	movs	r0, #129	@ 0x81
 800a5b6:	f7ff fe01 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	20cf      	movs	r0, #207	@ 0xcf
 800a5be:	f7ff fdfd 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	20a1      	movs	r0, #161	@ 0xa1
 800a5c6:	f7ff fdf9 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	20c8      	movs	r0, #200	@ 0xc8
 800a5ce:	f7ff fdf5 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	20a6      	movs	r0, #166	@ 0xa6
 800a5d6:	f7ff fdf1 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800a5da:	2100      	movs	r1, #0
 800a5dc:	20a8      	movs	r0, #168	@ 0xa8
 800a5de:	f7ff fded 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	203f      	movs	r0, #63	@ 0x3f
 800a5e6:	f7ff fde9 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	20d3      	movs	r0, #211	@ 0xd3
 800a5ee:	f7ff fde5 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f7ff fde1 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	20d5      	movs	r0, #213	@ 0xd5
 800a5fe:	f7ff fddd 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800a602:	2100      	movs	r1, #0
 800a604:	2080      	movs	r0, #128	@ 0x80
 800a606:	f7ff fdd9 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800a60a:	2100      	movs	r1, #0
 800a60c:	20d9      	movs	r0, #217	@ 0xd9
 800a60e:	f7ff fdd5 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800a612:	2100      	movs	r1, #0
 800a614:	20f1      	movs	r0, #241	@ 0xf1
 800a616:	f7ff fdd1 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800a61a:	2100      	movs	r1, #0
 800a61c:	20da      	movs	r0, #218	@ 0xda
 800a61e:	f7ff fdcd 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800a622:	2100      	movs	r1, #0
 800a624:	2012      	movs	r0, #18
 800a626:	f7ff fdc9 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800a62a:	2100      	movs	r1, #0
 800a62c:	20db      	movs	r0, #219	@ 0xdb
 800a62e:	f7ff fdc5 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800a632:	2100      	movs	r1, #0
 800a634:	2040      	movs	r0, #64	@ 0x40
 800a636:	f7ff fdc1 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800a63a:	2100      	movs	r1, #0
 800a63c:	2020      	movs	r0, #32
 800a63e:	f7ff fdbd 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800a642:	2100      	movs	r1, #0
 800a644:	2002      	movs	r0, #2
 800a646:	f7ff fdb9 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800a64a:	2100      	movs	r1, #0
 800a64c:	208d      	movs	r0, #141	@ 0x8d
 800a64e:	f7ff fdb5 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800a652:	2100      	movs	r1, #0
 800a654:	2014      	movs	r0, #20
 800a656:	f7ff fdb1 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800a65a:	2100      	movs	r1, #0
 800a65c:	20a4      	movs	r0, #164	@ 0xa4
 800a65e:	f7ff fdad 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800a662:	2100      	movs	r1, #0
 800a664:	20a6      	movs	r0, #166	@ 0xa6
 800a666:	f7ff fda9 	bl	800a1bc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800a66a:	2100      	movs	r1, #0
 800a66c:	20af      	movs	r0, #175	@ 0xaf
 800a66e:	f7ff fda5 	bl	800a1bc <OLED_WR_Byte>
	OLED_Clear();
 800a672:	f7ff fe13 	bl	800a29c <OLED_Clear>
}
 800a676:	bf00      	nop
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	58020800 	.word	0x58020800

0800a680 <__cvt>:
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	ed2d 8b02 	vpush	{d8}
 800a686:	eeb0 8b40 	vmov.f64	d8, d0
 800a68a:	b085      	sub	sp, #20
 800a68c:	4617      	mov	r7, r2
 800a68e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a690:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a692:	ee18 2a90 	vmov	r2, s17
 800a696:	f025 0520 	bic.w	r5, r5, #32
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	bfb6      	itet	lt
 800a69e:	222d      	movlt	r2, #45	@ 0x2d
 800a6a0:	2200      	movge	r2, #0
 800a6a2:	eeb1 8b40 	vneglt.f64	d8, d0
 800a6a6:	2d46      	cmp	r5, #70	@ 0x46
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	d004      	beq.n	800a6b8 <__cvt+0x38>
 800a6ae:	2d45      	cmp	r5, #69	@ 0x45
 800a6b0:	d100      	bne.n	800a6b4 <__cvt+0x34>
 800a6b2:	3401      	adds	r4, #1
 800a6b4:	2102      	movs	r1, #2
 800a6b6:	e000      	b.n	800a6ba <__cvt+0x3a>
 800a6b8:	2103      	movs	r1, #3
 800a6ba:	ab03      	add	r3, sp, #12
 800a6bc:	9301      	str	r3, [sp, #4]
 800a6be:	ab02      	add	r3, sp, #8
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	4633      	mov	r3, r6
 800a6c6:	eeb0 0b48 	vmov.f64	d0, d8
 800a6ca:	f000 fe4d 	bl	800b368 <_dtoa_r>
 800a6ce:	2d47      	cmp	r5, #71	@ 0x47
 800a6d0:	d114      	bne.n	800a6fc <__cvt+0x7c>
 800a6d2:	07fb      	lsls	r3, r7, #31
 800a6d4:	d50a      	bpl.n	800a6ec <__cvt+0x6c>
 800a6d6:	1902      	adds	r2, r0, r4
 800a6d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e0:	bf08      	it	eq
 800a6e2:	9203      	streq	r2, [sp, #12]
 800a6e4:	2130      	movs	r1, #48	@ 0x30
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d319      	bcc.n	800a720 <__cvt+0xa0>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f0:	1a1b      	subs	r3, r3, r0
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	b005      	add	sp, #20
 800a6f6:	ecbd 8b02 	vpop	{d8}
 800a6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6fc:	2d46      	cmp	r5, #70	@ 0x46
 800a6fe:	eb00 0204 	add.w	r2, r0, r4
 800a702:	d1e9      	bne.n	800a6d8 <__cvt+0x58>
 800a704:	7803      	ldrb	r3, [r0, #0]
 800a706:	2b30      	cmp	r3, #48	@ 0x30
 800a708:	d107      	bne.n	800a71a <__cvt+0x9a>
 800a70a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a712:	bf1c      	itt	ne
 800a714:	f1c4 0401 	rsbne	r4, r4, #1
 800a718:	6034      	strne	r4, [r6, #0]
 800a71a:	6833      	ldr	r3, [r6, #0]
 800a71c:	441a      	add	r2, r3
 800a71e:	e7db      	b.n	800a6d8 <__cvt+0x58>
 800a720:	1c5c      	adds	r4, r3, #1
 800a722:	9403      	str	r4, [sp, #12]
 800a724:	7019      	strb	r1, [r3, #0]
 800a726:	e7de      	b.n	800a6e6 <__cvt+0x66>

0800a728 <__exponent>:
 800a728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a72a:	2900      	cmp	r1, #0
 800a72c:	bfba      	itte	lt
 800a72e:	4249      	neglt	r1, r1
 800a730:	232d      	movlt	r3, #45	@ 0x2d
 800a732:	232b      	movge	r3, #43	@ 0x2b
 800a734:	2909      	cmp	r1, #9
 800a736:	7002      	strb	r2, [r0, #0]
 800a738:	7043      	strb	r3, [r0, #1]
 800a73a:	dd29      	ble.n	800a790 <__exponent+0x68>
 800a73c:	f10d 0307 	add.w	r3, sp, #7
 800a740:	461d      	mov	r5, r3
 800a742:	270a      	movs	r7, #10
 800a744:	461a      	mov	r2, r3
 800a746:	fbb1 f6f7 	udiv	r6, r1, r7
 800a74a:	fb07 1416 	mls	r4, r7, r6, r1
 800a74e:	3430      	adds	r4, #48	@ 0x30
 800a750:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a754:	460c      	mov	r4, r1
 800a756:	2c63      	cmp	r4, #99	@ 0x63
 800a758:	f103 33ff 	add.w	r3, r3, #4294967295
 800a75c:	4631      	mov	r1, r6
 800a75e:	dcf1      	bgt.n	800a744 <__exponent+0x1c>
 800a760:	3130      	adds	r1, #48	@ 0x30
 800a762:	1e94      	subs	r4, r2, #2
 800a764:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a768:	1c41      	adds	r1, r0, #1
 800a76a:	4623      	mov	r3, r4
 800a76c:	42ab      	cmp	r3, r5
 800a76e:	d30a      	bcc.n	800a786 <__exponent+0x5e>
 800a770:	f10d 0309 	add.w	r3, sp, #9
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	42ac      	cmp	r4, r5
 800a778:	bf88      	it	hi
 800a77a:	2300      	movhi	r3, #0
 800a77c:	3302      	adds	r3, #2
 800a77e:	4403      	add	r3, r0
 800a780:	1a18      	subs	r0, r3, r0
 800a782:	b003      	add	sp, #12
 800a784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a786:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a78a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a78e:	e7ed      	b.n	800a76c <__exponent+0x44>
 800a790:	2330      	movs	r3, #48	@ 0x30
 800a792:	3130      	adds	r1, #48	@ 0x30
 800a794:	7083      	strb	r3, [r0, #2]
 800a796:	70c1      	strb	r1, [r0, #3]
 800a798:	1d03      	adds	r3, r0, #4
 800a79a:	e7f1      	b.n	800a780 <__exponent+0x58>
 800a79c:	0000      	movs	r0, r0
	...

0800a7a0 <_printf_float>:
 800a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	b08d      	sub	sp, #52	@ 0x34
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	461f      	mov	r7, r3
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	f000 fccb 	bl	800b14c <_localeconv_r>
 800a7b6:	f8d0 b000 	ldr.w	fp, [r0]
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f7f5 fde0 	bl	8000380 <strlen>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	9005      	str	r0, [sp, #20]
 800a7d0:	3307      	adds	r3, #7
 800a7d2:	f023 0307 	bic.w	r3, r3, #7
 800a7d6:	f103 0108 	add.w	r1, r3, #8
 800a7da:	f8c8 1000 	str.w	r1, [r8]
 800a7de:	ed93 0b00 	vldr	d0, [r3]
 800a7e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800aa40 <_printf_float+0x2a0>
 800a7e6:	eeb0 7bc0 	vabs.f64	d7, d0
 800a7ea:	eeb4 7b46 	vcmp.f64	d7, d6
 800a7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a7f6:	dd24      	ble.n	800a842 <_printf_float+0xa2>
 800a7f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a800:	d502      	bpl.n	800a808 <_printf_float+0x68>
 800a802:	232d      	movs	r3, #45	@ 0x2d
 800a804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a808:	498f      	ldr	r1, [pc, #572]	@ (800aa48 <_printf_float+0x2a8>)
 800a80a:	4b90      	ldr	r3, [pc, #576]	@ (800aa4c <_printf_float+0x2ac>)
 800a80c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a810:	bf94      	ite	ls
 800a812:	4688      	movls	r8, r1
 800a814:	4698      	movhi	r8, r3
 800a816:	f022 0204 	bic.w	r2, r2, #4
 800a81a:	2303      	movs	r3, #3
 800a81c:	6123      	str	r3, [r4, #16]
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	f04f 0a00 	mov.w	sl, #0
 800a824:	9700      	str	r7, [sp, #0]
 800a826:	4633      	mov	r3, r6
 800a828:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a82a:	4621      	mov	r1, r4
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f9d1 	bl	800abd4 <_printf_common>
 800a832:	3001      	adds	r0, #1
 800a834:	f040 8089 	bne.w	800a94a <_printf_float+0x1aa>
 800a838:	f04f 30ff 	mov.w	r0, #4294967295
 800a83c:	b00d      	add	sp, #52	@ 0x34
 800a83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a842:	eeb4 0b40 	vcmp.f64	d0, d0
 800a846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84a:	d709      	bvc.n	800a860 <_printf_float+0xc0>
 800a84c:	ee10 3a90 	vmov	r3, s1
 800a850:	2b00      	cmp	r3, #0
 800a852:	bfbc      	itt	lt
 800a854:	232d      	movlt	r3, #45	@ 0x2d
 800a856:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a85a:	497d      	ldr	r1, [pc, #500]	@ (800aa50 <_printf_float+0x2b0>)
 800a85c:	4b7d      	ldr	r3, [pc, #500]	@ (800aa54 <_printf_float+0x2b4>)
 800a85e:	e7d5      	b.n	800a80c <_printf_float+0x6c>
 800a860:	6863      	ldr	r3, [r4, #4]
 800a862:	1c59      	adds	r1, r3, #1
 800a864:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a868:	d139      	bne.n	800a8de <_printf_float+0x13e>
 800a86a:	2306      	movs	r3, #6
 800a86c:	6063      	str	r3, [r4, #4]
 800a86e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a872:	2300      	movs	r3, #0
 800a874:	6022      	str	r2, [r4, #0]
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	ab0a      	add	r3, sp, #40	@ 0x28
 800a87a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a87e:	ab09      	add	r3, sp, #36	@ 0x24
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	6861      	ldr	r1, [r4, #4]
 800a884:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a888:	4628      	mov	r0, r5
 800a88a:	f7ff fef9 	bl	800a680 <__cvt>
 800a88e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a892:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a894:	4680      	mov	r8, r0
 800a896:	d129      	bne.n	800a8ec <_printf_float+0x14c>
 800a898:	1cc8      	adds	r0, r1, #3
 800a89a:	db02      	blt.n	800a8a2 <_printf_float+0x102>
 800a89c:	6863      	ldr	r3, [r4, #4]
 800a89e:	4299      	cmp	r1, r3
 800a8a0:	dd41      	ble.n	800a926 <_printf_float+0x186>
 800a8a2:	f1a9 0902 	sub.w	r9, r9, #2
 800a8a6:	fa5f f989 	uxtb.w	r9, r9
 800a8aa:	3901      	subs	r1, #1
 800a8ac:	464a      	mov	r2, r9
 800a8ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a8b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8b4:	f7ff ff38 	bl	800a728 <__exponent>
 800a8b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8ba:	1813      	adds	r3, r2, r0
 800a8bc:	2a01      	cmp	r2, #1
 800a8be:	4682      	mov	sl, r0
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	dc02      	bgt.n	800a8ca <_printf_float+0x12a>
 800a8c4:	6822      	ldr	r2, [r4, #0]
 800a8c6:	07d2      	lsls	r2, r2, #31
 800a8c8:	d501      	bpl.n	800a8ce <_printf_float+0x12e>
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	6123      	str	r3, [r4, #16]
 800a8ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0a6      	beq.n	800a824 <_printf_float+0x84>
 800a8d6:	232d      	movs	r3, #45	@ 0x2d
 800a8d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8dc:	e7a2      	b.n	800a824 <_printf_float+0x84>
 800a8de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8e2:	d1c4      	bne.n	800a86e <_printf_float+0xce>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1c2      	bne.n	800a86e <_printf_float+0xce>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e7bf      	b.n	800a86c <_printf_float+0xcc>
 800a8ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a8f0:	d9db      	bls.n	800a8aa <_printf_float+0x10a>
 800a8f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a8f6:	d118      	bne.n	800a92a <_printf_float+0x18a>
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	6863      	ldr	r3, [r4, #4]
 800a8fc:	dd0b      	ble.n	800a916 <_printf_float+0x176>
 800a8fe:	6121      	str	r1, [r4, #16]
 800a900:	b913      	cbnz	r3, 800a908 <_printf_float+0x168>
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	07d0      	lsls	r0, r2, #31
 800a906:	d502      	bpl.n	800a90e <_printf_float+0x16e>
 800a908:	3301      	adds	r3, #1
 800a90a:	440b      	add	r3, r1
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a910:	f04f 0a00 	mov.w	sl, #0
 800a914:	e7db      	b.n	800a8ce <_printf_float+0x12e>
 800a916:	b913      	cbnz	r3, 800a91e <_printf_float+0x17e>
 800a918:	6822      	ldr	r2, [r4, #0]
 800a91a:	07d2      	lsls	r2, r2, #31
 800a91c:	d501      	bpl.n	800a922 <_printf_float+0x182>
 800a91e:	3302      	adds	r3, #2
 800a920:	e7f4      	b.n	800a90c <_printf_float+0x16c>
 800a922:	2301      	movs	r3, #1
 800a924:	e7f2      	b.n	800a90c <_printf_float+0x16c>
 800a926:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a92a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a92c:	4299      	cmp	r1, r3
 800a92e:	db05      	blt.n	800a93c <_printf_float+0x19c>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	6121      	str	r1, [r4, #16]
 800a934:	07d8      	lsls	r0, r3, #31
 800a936:	d5ea      	bpl.n	800a90e <_printf_float+0x16e>
 800a938:	1c4b      	adds	r3, r1, #1
 800a93a:	e7e7      	b.n	800a90c <_printf_float+0x16c>
 800a93c:	2900      	cmp	r1, #0
 800a93e:	bfd4      	ite	le
 800a940:	f1c1 0202 	rsble	r2, r1, #2
 800a944:	2201      	movgt	r2, #1
 800a946:	4413      	add	r3, r2
 800a948:	e7e0      	b.n	800a90c <_printf_float+0x16c>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	055a      	lsls	r2, r3, #21
 800a94e:	d407      	bmi.n	800a960 <_printf_float+0x1c0>
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	4642      	mov	r2, r8
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	47b8      	blx	r7
 800a95a:	3001      	adds	r0, #1
 800a95c:	d12a      	bne.n	800a9b4 <_printf_float+0x214>
 800a95e:	e76b      	b.n	800a838 <_printf_float+0x98>
 800a960:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a964:	f240 80e0 	bls.w	800ab28 <_printf_float+0x388>
 800a968:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a96c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a974:	d133      	bne.n	800a9de <_printf_float+0x23e>
 800a976:	4a38      	ldr	r2, [pc, #224]	@ (800aa58 <_printf_float+0x2b8>)
 800a978:	2301      	movs	r3, #1
 800a97a:	4631      	mov	r1, r6
 800a97c:	4628      	mov	r0, r5
 800a97e:	47b8      	blx	r7
 800a980:	3001      	adds	r0, #1
 800a982:	f43f af59 	beq.w	800a838 <_printf_float+0x98>
 800a986:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a98a:	4543      	cmp	r3, r8
 800a98c:	db02      	blt.n	800a994 <_printf_float+0x1f4>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	07d8      	lsls	r0, r3, #31
 800a992:	d50f      	bpl.n	800a9b4 <_printf_float+0x214>
 800a994:	9b05      	ldr	r3, [sp, #20]
 800a996:	465a      	mov	r2, fp
 800a998:	4631      	mov	r1, r6
 800a99a:	4628      	mov	r0, r5
 800a99c:	47b8      	blx	r7
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f43f af4a 	beq.w	800a838 <_printf_float+0x98>
 800a9a4:	f04f 0900 	mov.w	r9, #0
 800a9a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9ac:	f104 0a1a 	add.w	sl, r4, #26
 800a9b0:	45c8      	cmp	r8, r9
 800a9b2:	dc09      	bgt.n	800a9c8 <_printf_float+0x228>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	079b      	lsls	r3, r3, #30
 800a9b8:	f100 8107 	bmi.w	800abca <_printf_float+0x42a>
 800a9bc:	68e0      	ldr	r0, [r4, #12]
 800a9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9c0:	4298      	cmp	r0, r3
 800a9c2:	bfb8      	it	lt
 800a9c4:	4618      	movlt	r0, r3
 800a9c6:	e739      	b.n	800a83c <_printf_float+0x9c>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4652      	mov	r2, sl
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	47b8      	blx	r7
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	f43f af30 	beq.w	800a838 <_printf_float+0x98>
 800a9d8:	f109 0901 	add.w	r9, r9, #1
 800a9dc:	e7e8      	b.n	800a9b0 <_printf_float+0x210>
 800a9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dc3b      	bgt.n	800aa5c <_printf_float+0x2bc>
 800a9e4:	4a1c      	ldr	r2, [pc, #112]	@ (800aa58 <_printf_float+0x2b8>)
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	47b8      	blx	r7
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	f43f af22 	beq.w	800a838 <_printf_float+0x98>
 800a9f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9f8:	ea59 0303 	orrs.w	r3, r9, r3
 800a9fc:	d102      	bne.n	800aa04 <_printf_float+0x264>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	07d9      	lsls	r1, r3, #31
 800aa02:	d5d7      	bpl.n	800a9b4 <_printf_float+0x214>
 800aa04:	9b05      	ldr	r3, [sp, #20]
 800aa06:	465a      	mov	r2, fp
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b8      	blx	r7
 800aa0e:	3001      	adds	r0, #1
 800aa10:	f43f af12 	beq.w	800a838 <_printf_float+0x98>
 800aa14:	f04f 0a00 	mov.w	sl, #0
 800aa18:	f104 0b1a 	add.w	fp, r4, #26
 800aa1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1e:	425b      	negs	r3, r3
 800aa20:	4553      	cmp	r3, sl
 800aa22:	dc01      	bgt.n	800aa28 <_printf_float+0x288>
 800aa24:	464b      	mov	r3, r9
 800aa26:	e794      	b.n	800a952 <_printf_float+0x1b2>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	465a      	mov	r2, fp
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	f43f af00 	beq.w	800a838 <_printf_float+0x98>
 800aa38:	f10a 0a01 	add.w	sl, sl, #1
 800aa3c:	e7ee      	b.n	800aa1c <_printf_float+0x27c>
 800aa3e:	bf00      	nop
 800aa40:	ffffffff 	.word	0xffffffff
 800aa44:	7fefffff 	.word	0x7fefffff
 800aa48:	0800eb10 	.word	0x0800eb10
 800aa4c:	0800eb14 	.word	0x0800eb14
 800aa50:	0800eb18 	.word	0x0800eb18
 800aa54:	0800eb1c 	.word	0x0800eb1c
 800aa58:	0800eb20 	.word	0x0800eb20
 800aa5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa62:	4553      	cmp	r3, sl
 800aa64:	bfa8      	it	ge
 800aa66:	4653      	movge	r3, sl
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	4699      	mov	r9, r3
 800aa6c:	dc37      	bgt.n	800aade <_printf_float+0x33e>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	9307      	str	r3, [sp, #28]
 800aa72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa76:	f104 021a 	add.w	r2, r4, #26
 800aa7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa7c:	9907      	ldr	r1, [sp, #28]
 800aa7e:	9306      	str	r3, [sp, #24]
 800aa80:	eba3 0309 	sub.w	r3, r3, r9
 800aa84:	428b      	cmp	r3, r1
 800aa86:	dc31      	bgt.n	800aaec <_printf_float+0x34c>
 800aa88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa8a:	459a      	cmp	sl, r3
 800aa8c:	dc3b      	bgt.n	800ab06 <_printf_float+0x366>
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	07da      	lsls	r2, r3, #31
 800aa92:	d438      	bmi.n	800ab06 <_printf_float+0x366>
 800aa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa96:	ebaa 0903 	sub.w	r9, sl, r3
 800aa9a:	9b06      	ldr	r3, [sp, #24]
 800aa9c:	ebaa 0303 	sub.w	r3, sl, r3
 800aaa0:	4599      	cmp	r9, r3
 800aaa2:	bfa8      	it	ge
 800aaa4:	4699      	movge	r9, r3
 800aaa6:	f1b9 0f00 	cmp.w	r9, #0
 800aaaa:	dc34      	bgt.n	800ab16 <_printf_float+0x376>
 800aaac:	f04f 0800 	mov.w	r8, #0
 800aab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aab4:	f104 0b1a 	add.w	fp, r4, #26
 800aab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaba:	ebaa 0303 	sub.w	r3, sl, r3
 800aabe:	eba3 0309 	sub.w	r3, r3, r9
 800aac2:	4543      	cmp	r3, r8
 800aac4:	f77f af76 	ble.w	800a9b4 <_printf_float+0x214>
 800aac8:	2301      	movs	r3, #1
 800aaca:	465a      	mov	r2, fp
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	f43f aeb0 	beq.w	800a838 <_printf_float+0x98>
 800aad8:	f108 0801 	add.w	r8, r8, #1
 800aadc:	e7ec      	b.n	800aab8 <_printf_float+0x318>
 800aade:	4642      	mov	r2, r8
 800aae0:	4631      	mov	r1, r6
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	d1c1      	bne.n	800aa6e <_printf_float+0x2ce>
 800aaea:	e6a5      	b.n	800a838 <_printf_float+0x98>
 800aaec:	2301      	movs	r3, #1
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	9206      	str	r2, [sp, #24]
 800aaf4:	47b8      	blx	r7
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	f43f ae9e 	beq.w	800a838 <_printf_float+0x98>
 800aafc:	9b07      	ldr	r3, [sp, #28]
 800aafe:	9a06      	ldr	r2, [sp, #24]
 800ab00:	3301      	adds	r3, #1
 800ab02:	9307      	str	r3, [sp, #28]
 800ab04:	e7b9      	b.n	800aa7a <_printf_float+0x2da>
 800ab06:	9b05      	ldr	r3, [sp, #20]
 800ab08:	465a      	mov	r2, fp
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	47b8      	blx	r7
 800ab10:	3001      	adds	r0, #1
 800ab12:	d1bf      	bne.n	800aa94 <_printf_float+0x2f4>
 800ab14:	e690      	b.n	800a838 <_printf_float+0x98>
 800ab16:	9a06      	ldr	r2, [sp, #24]
 800ab18:	464b      	mov	r3, r9
 800ab1a:	4442      	add	r2, r8
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b8      	blx	r7
 800ab22:	3001      	adds	r0, #1
 800ab24:	d1c2      	bne.n	800aaac <_printf_float+0x30c>
 800ab26:	e687      	b.n	800a838 <_printf_float+0x98>
 800ab28:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ab2c:	f1b9 0f01 	cmp.w	r9, #1
 800ab30:	dc01      	bgt.n	800ab36 <_printf_float+0x396>
 800ab32:	07db      	lsls	r3, r3, #31
 800ab34:	d536      	bpl.n	800aba4 <_printf_float+0x404>
 800ab36:	2301      	movs	r3, #1
 800ab38:	4642      	mov	r2, r8
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	47b8      	blx	r7
 800ab40:	3001      	adds	r0, #1
 800ab42:	f43f ae79 	beq.w	800a838 <_printf_float+0x98>
 800ab46:	9b05      	ldr	r3, [sp, #20]
 800ab48:	465a      	mov	r2, fp
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b8      	blx	r7
 800ab50:	3001      	adds	r0, #1
 800ab52:	f43f ae71 	beq.w	800a838 <_printf_float+0x98>
 800ab56:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ab5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab62:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab66:	d018      	beq.n	800ab9a <_printf_float+0x3fa>
 800ab68:	464b      	mov	r3, r9
 800ab6a:	f108 0201 	add.w	r2, r8, #1
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b8      	blx	r7
 800ab74:	3001      	adds	r0, #1
 800ab76:	d10c      	bne.n	800ab92 <_printf_float+0x3f2>
 800ab78:	e65e      	b.n	800a838 <_printf_float+0x98>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	465a      	mov	r2, fp
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4628      	mov	r0, r5
 800ab82:	47b8      	blx	r7
 800ab84:	3001      	adds	r0, #1
 800ab86:	f43f ae57 	beq.w	800a838 <_printf_float+0x98>
 800ab8a:	f108 0801 	add.w	r8, r8, #1
 800ab8e:	45c8      	cmp	r8, r9
 800ab90:	dbf3      	blt.n	800ab7a <_printf_float+0x3da>
 800ab92:	4653      	mov	r3, sl
 800ab94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab98:	e6dc      	b.n	800a954 <_printf_float+0x1b4>
 800ab9a:	f04f 0800 	mov.w	r8, #0
 800ab9e:	f104 0b1a 	add.w	fp, r4, #26
 800aba2:	e7f4      	b.n	800ab8e <_printf_float+0x3ee>
 800aba4:	2301      	movs	r3, #1
 800aba6:	4642      	mov	r2, r8
 800aba8:	e7e1      	b.n	800ab6e <_printf_float+0x3ce>
 800abaa:	2301      	movs	r3, #1
 800abac:	464a      	mov	r2, r9
 800abae:	4631      	mov	r1, r6
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b8      	blx	r7
 800abb4:	3001      	adds	r0, #1
 800abb6:	f43f ae3f 	beq.w	800a838 <_printf_float+0x98>
 800abba:	f108 0801 	add.w	r8, r8, #1
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abc2:	1a5b      	subs	r3, r3, r1
 800abc4:	4543      	cmp	r3, r8
 800abc6:	dcf0      	bgt.n	800abaa <_printf_float+0x40a>
 800abc8:	e6f8      	b.n	800a9bc <_printf_float+0x21c>
 800abca:	f04f 0800 	mov.w	r8, #0
 800abce:	f104 0919 	add.w	r9, r4, #25
 800abd2:	e7f4      	b.n	800abbe <_printf_float+0x41e>

0800abd4 <_printf_common>:
 800abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	4616      	mov	r6, r2
 800abda:	4698      	mov	r8, r3
 800abdc:	688a      	ldr	r2, [r1, #8]
 800abde:	690b      	ldr	r3, [r1, #16]
 800abe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	bfb8      	it	lt
 800abe8:	4613      	movlt	r3, r2
 800abea:	6033      	str	r3, [r6, #0]
 800abec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abf0:	4607      	mov	r7, r0
 800abf2:	460c      	mov	r4, r1
 800abf4:	b10a      	cbz	r2, 800abfa <_printf_common+0x26>
 800abf6:	3301      	adds	r3, #1
 800abf8:	6033      	str	r3, [r6, #0]
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	0699      	lsls	r1, r3, #26
 800abfe:	bf42      	ittt	mi
 800ac00:	6833      	ldrmi	r3, [r6, #0]
 800ac02:	3302      	addmi	r3, #2
 800ac04:	6033      	strmi	r3, [r6, #0]
 800ac06:	6825      	ldr	r5, [r4, #0]
 800ac08:	f015 0506 	ands.w	r5, r5, #6
 800ac0c:	d106      	bne.n	800ac1c <_printf_common+0x48>
 800ac0e:	f104 0a19 	add.w	sl, r4, #25
 800ac12:	68e3      	ldr	r3, [r4, #12]
 800ac14:	6832      	ldr	r2, [r6, #0]
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	42ab      	cmp	r3, r5
 800ac1a:	dc26      	bgt.n	800ac6a <_printf_common+0x96>
 800ac1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac20:	6822      	ldr	r2, [r4, #0]
 800ac22:	3b00      	subs	r3, #0
 800ac24:	bf18      	it	ne
 800ac26:	2301      	movne	r3, #1
 800ac28:	0692      	lsls	r2, r2, #26
 800ac2a:	d42b      	bmi.n	800ac84 <_printf_common+0xb0>
 800ac2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac30:	4641      	mov	r1, r8
 800ac32:	4638      	mov	r0, r7
 800ac34:	47c8      	blx	r9
 800ac36:	3001      	adds	r0, #1
 800ac38:	d01e      	beq.n	800ac78 <_printf_common+0xa4>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	6922      	ldr	r2, [r4, #16]
 800ac3e:	f003 0306 	and.w	r3, r3, #6
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	bf02      	ittt	eq
 800ac46:	68e5      	ldreq	r5, [r4, #12]
 800ac48:	6833      	ldreq	r3, [r6, #0]
 800ac4a:	1aed      	subeq	r5, r5, r3
 800ac4c:	68a3      	ldr	r3, [r4, #8]
 800ac4e:	bf0c      	ite	eq
 800ac50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac54:	2500      	movne	r5, #0
 800ac56:	4293      	cmp	r3, r2
 800ac58:	bfc4      	itt	gt
 800ac5a:	1a9b      	subgt	r3, r3, r2
 800ac5c:	18ed      	addgt	r5, r5, r3
 800ac5e:	2600      	movs	r6, #0
 800ac60:	341a      	adds	r4, #26
 800ac62:	42b5      	cmp	r5, r6
 800ac64:	d11a      	bne.n	800ac9c <_printf_common+0xc8>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e008      	b.n	800ac7c <_printf_common+0xa8>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	4641      	mov	r1, r8
 800ac70:	4638      	mov	r0, r7
 800ac72:	47c8      	blx	r9
 800ac74:	3001      	adds	r0, #1
 800ac76:	d103      	bne.n	800ac80 <_printf_common+0xac>
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac80:	3501      	adds	r5, #1
 800ac82:	e7c6      	b.n	800ac12 <_printf_common+0x3e>
 800ac84:	18e1      	adds	r1, r4, r3
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	2030      	movs	r0, #48	@ 0x30
 800ac8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac8e:	4422      	add	r2, r4
 800ac90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac98:	3302      	adds	r3, #2
 800ac9a:	e7c7      	b.n	800ac2c <_printf_common+0x58>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4641      	mov	r1, r8
 800aca2:	4638      	mov	r0, r7
 800aca4:	47c8      	blx	r9
 800aca6:	3001      	adds	r0, #1
 800aca8:	d0e6      	beq.n	800ac78 <_printf_common+0xa4>
 800acaa:	3601      	adds	r6, #1
 800acac:	e7d9      	b.n	800ac62 <_printf_common+0x8e>
	...

0800acb0 <_printf_i>:
 800acb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	7e0f      	ldrb	r7, [r1, #24]
 800acb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acb8:	2f78      	cmp	r7, #120	@ 0x78
 800acba:	4691      	mov	r9, r2
 800acbc:	4680      	mov	r8, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	469a      	mov	sl, r3
 800acc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800acc6:	d807      	bhi.n	800acd8 <_printf_i+0x28>
 800acc8:	2f62      	cmp	r7, #98	@ 0x62
 800acca:	d80a      	bhi.n	800ace2 <_printf_i+0x32>
 800accc:	2f00      	cmp	r7, #0
 800acce:	f000 80d2 	beq.w	800ae76 <_printf_i+0x1c6>
 800acd2:	2f58      	cmp	r7, #88	@ 0x58
 800acd4:	f000 80b9 	beq.w	800ae4a <_printf_i+0x19a>
 800acd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ace0:	e03a      	b.n	800ad58 <_printf_i+0xa8>
 800ace2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ace6:	2b15      	cmp	r3, #21
 800ace8:	d8f6      	bhi.n	800acd8 <_printf_i+0x28>
 800acea:	a101      	add	r1, pc, #4	@ (adr r1, 800acf0 <_printf_i+0x40>)
 800acec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acf0:	0800ad49 	.word	0x0800ad49
 800acf4:	0800ad5d 	.word	0x0800ad5d
 800acf8:	0800acd9 	.word	0x0800acd9
 800acfc:	0800acd9 	.word	0x0800acd9
 800ad00:	0800acd9 	.word	0x0800acd9
 800ad04:	0800acd9 	.word	0x0800acd9
 800ad08:	0800ad5d 	.word	0x0800ad5d
 800ad0c:	0800acd9 	.word	0x0800acd9
 800ad10:	0800acd9 	.word	0x0800acd9
 800ad14:	0800acd9 	.word	0x0800acd9
 800ad18:	0800acd9 	.word	0x0800acd9
 800ad1c:	0800ae5d 	.word	0x0800ae5d
 800ad20:	0800ad87 	.word	0x0800ad87
 800ad24:	0800ae17 	.word	0x0800ae17
 800ad28:	0800acd9 	.word	0x0800acd9
 800ad2c:	0800acd9 	.word	0x0800acd9
 800ad30:	0800ae7f 	.word	0x0800ae7f
 800ad34:	0800acd9 	.word	0x0800acd9
 800ad38:	0800ad87 	.word	0x0800ad87
 800ad3c:	0800acd9 	.word	0x0800acd9
 800ad40:	0800acd9 	.word	0x0800acd9
 800ad44:	0800ae1f 	.word	0x0800ae1f
 800ad48:	6833      	ldr	r3, [r6, #0]
 800ad4a:	1d1a      	adds	r2, r3, #4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6032      	str	r2, [r6, #0]
 800ad50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e09d      	b.n	800ae98 <_printf_i+0x1e8>
 800ad5c:	6833      	ldr	r3, [r6, #0]
 800ad5e:	6820      	ldr	r0, [r4, #0]
 800ad60:	1d19      	adds	r1, r3, #4
 800ad62:	6031      	str	r1, [r6, #0]
 800ad64:	0606      	lsls	r6, r0, #24
 800ad66:	d501      	bpl.n	800ad6c <_printf_i+0xbc>
 800ad68:	681d      	ldr	r5, [r3, #0]
 800ad6a:	e003      	b.n	800ad74 <_printf_i+0xc4>
 800ad6c:	0645      	lsls	r5, r0, #25
 800ad6e:	d5fb      	bpl.n	800ad68 <_printf_i+0xb8>
 800ad70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad74:	2d00      	cmp	r5, #0
 800ad76:	da03      	bge.n	800ad80 <_printf_i+0xd0>
 800ad78:	232d      	movs	r3, #45	@ 0x2d
 800ad7a:	426d      	negs	r5, r5
 800ad7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad80:	4859      	ldr	r0, [pc, #356]	@ (800aee8 <_printf_i+0x238>)
 800ad82:	230a      	movs	r3, #10
 800ad84:	e011      	b.n	800adaa <_printf_i+0xfa>
 800ad86:	6821      	ldr	r1, [r4, #0]
 800ad88:	6833      	ldr	r3, [r6, #0]
 800ad8a:	0608      	lsls	r0, r1, #24
 800ad8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad90:	d402      	bmi.n	800ad98 <_printf_i+0xe8>
 800ad92:	0649      	lsls	r1, r1, #25
 800ad94:	bf48      	it	mi
 800ad96:	b2ad      	uxthmi	r5, r5
 800ad98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad9a:	4853      	ldr	r0, [pc, #332]	@ (800aee8 <_printf_i+0x238>)
 800ad9c:	6033      	str	r3, [r6, #0]
 800ad9e:	bf14      	ite	ne
 800ada0:	230a      	movne	r3, #10
 800ada2:	2308      	moveq	r3, #8
 800ada4:	2100      	movs	r1, #0
 800ada6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800adaa:	6866      	ldr	r6, [r4, #4]
 800adac:	60a6      	str	r6, [r4, #8]
 800adae:	2e00      	cmp	r6, #0
 800adb0:	bfa2      	ittt	ge
 800adb2:	6821      	ldrge	r1, [r4, #0]
 800adb4:	f021 0104 	bicge.w	r1, r1, #4
 800adb8:	6021      	strge	r1, [r4, #0]
 800adba:	b90d      	cbnz	r5, 800adc0 <_printf_i+0x110>
 800adbc:	2e00      	cmp	r6, #0
 800adbe:	d04b      	beq.n	800ae58 <_printf_i+0x1a8>
 800adc0:	4616      	mov	r6, r2
 800adc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800adc6:	fb03 5711 	mls	r7, r3, r1, r5
 800adca:	5dc7      	ldrb	r7, [r0, r7]
 800adcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800add0:	462f      	mov	r7, r5
 800add2:	42bb      	cmp	r3, r7
 800add4:	460d      	mov	r5, r1
 800add6:	d9f4      	bls.n	800adc2 <_printf_i+0x112>
 800add8:	2b08      	cmp	r3, #8
 800adda:	d10b      	bne.n	800adf4 <_printf_i+0x144>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	07df      	lsls	r7, r3, #31
 800ade0:	d508      	bpl.n	800adf4 <_printf_i+0x144>
 800ade2:	6923      	ldr	r3, [r4, #16]
 800ade4:	6861      	ldr	r1, [r4, #4]
 800ade6:	4299      	cmp	r1, r3
 800ade8:	bfde      	ittt	le
 800adea:	2330      	movle	r3, #48	@ 0x30
 800adec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adf4:	1b92      	subs	r2, r2, r6
 800adf6:	6122      	str	r2, [r4, #16]
 800adf8:	f8cd a000 	str.w	sl, [sp]
 800adfc:	464b      	mov	r3, r9
 800adfe:	aa03      	add	r2, sp, #12
 800ae00:	4621      	mov	r1, r4
 800ae02:	4640      	mov	r0, r8
 800ae04:	f7ff fee6 	bl	800abd4 <_printf_common>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d14a      	bne.n	800aea2 <_printf_i+0x1f2>
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	b004      	add	sp, #16
 800ae12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f043 0320 	orr.w	r3, r3, #32
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	4833      	ldr	r0, [pc, #204]	@ (800aeec <_printf_i+0x23c>)
 800ae20:	2778      	movs	r7, #120	@ 0x78
 800ae22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	6831      	ldr	r1, [r6, #0]
 800ae2a:	061f      	lsls	r7, r3, #24
 800ae2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae30:	d402      	bmi.n	800ae38 <_printf_i+0x188>
 800ae32:	065f      	lsls	r7, r3, #25
 800ae34:	bf48      	it	mi
 800ae36:	b2ad      	uxthmi	r5, r5
 800ae38:	6031      	str	r1, [r6, #0]
 800ae3a:	07d9      	lsls	r1, r3, #31
 800ae3c:	bf44      	itt	mi
 800ae3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae42:	6023      	strmi	r3, [r4, #0]
 800ae44:	b11d      	cbz	r5, 800ae4e <_printf_i+0x19e>
 800ae46:	2310      	movs	r3, #16
 800ae48:	e7ac      	b.n	800ada4 <_printf_i+0xf4>
 800ae4a:	4827      	ldr	r0, [pc, #156]	@ (800aee8 <_printf_i+0x238>)
 800ae4c:	e7e9      	b.n	800ae22 <_printf_i+0x172>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	f023 0320 	bic.w	r3, r3, #32
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	e7f6      	b.n	800ae46 <_printf_i+0x196>
 800ae58:	4616      	mov	r6, r2
 800ae5a:	e7bd      	b.n	800add8 <_printf_i+0x128>
 800ae5c:	6833      	ldr	r3, [r6, #0]
 800ae5e:	6825      	ldr	r5, [r4, #0]
 800ae60:	6961      	ldr	r1, [r4, #20]
 800ae62:	1d18      	adds	r0, r3, #4
 800ae64:	6030      	str	r0, [r6, #0]
 800ae66:	062e      	lsls	r6, r5, #24
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	d501      	bpl.n	800ae70 <_printf_i+0x1c0>
 800ae6c:	6019      	str	r1, [r3, #0]
 800ae6e:	e002      	b.n	800ae76 <_printf_i+0x1c6>
 800ae70:	0668      	lsls	r0, r5, #25
 800ae72:	d5fb      	bpl.n	800ae6c <_printf_i+0x1bc>
 800ae74:	8019      	strh	r1, [r3, #0]
 800ae76:	2300      	movs	r3, #0
 800ae78:	6123      	str	r3, [r4, #16]
 800ae7a:	4616      	mov	r6, r2
 800ae7c:	e7bc      	b.n	800adf8 <_printf_i+0x148>
 800ae7e:	6833      	ldr	r3, [r6, #0]
 800ae80:	1d1a      	adds	r2, r3, #4
 800ae82:	6032      	str	r2, [r6, #0]
 800ae84:	681e      	ldr	r6, [r3, #0]
 800ae86:	6862      	ldr	r2, [r4, #4]
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7f5 fa28 	bl	80002e0 <memchr>
 800ae90:	b108      	cbz	r0, 800ae96 <_printf_i+0x1e6>
 800ae92:	1b80      	subs	r0, r0, r6
 800ae94:	6060      	str	r0, [r4, #4]
 800ae96:	6863      	ldr	r3, [r4, #4]
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aea0:	e7aa      	b.n	800adf8 <_printf_i+0x148>
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	4632      	mov	r2, r6
 800aea6:	4649      	mov	r1, r9
 800aea8:	4640      	mov	r0, r8
 800aeaa:	47d0      	blx	sl
 800aeac:	3001      	adds	r0, #1
 800aeae:	d0ad      	beq.n	800ae0c <_printf_i+0x15c>
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	079b      	lsls	r3, r3, #30
 800aeb4:	d413      	bmi.n	800aede <_printf_i+0x22e>
 800aeb6:	68e0      	ldr	r0, [r4, #12]
 800aeb8:	9b03      	ldr	r3, [sp, #12]
 800aeba:	4298      	cmp	r0, r3
 800aebc:	bfb8      	it	lt
 800aebe:	4618      	movlt	r0, r3
 800aec0:	e7a6      	b.n	800ae10 <_printf_i+0x160>
 800aec2:	2301      	movs	r3, #1
 800aec4:	4632      	mov	r2, r6
 800aec6:	4649      	mov	r1, r9
 800aec8:	4640      	mov	r0, r8
 800aeca:	47d0      	blx	sl
 800aecc:	3001      	adds	r0, #1
 800aece:	d09d      	beq.n	800ae0c <_printf_i+0x15c>
 800aed0:	3501      	adds	r5, #1
 800aed2:	68e3      	ldr	r3, [r4, #12]
 800aed4:	9903      	ldr	r1, [sp, #12]
 800aed6:	1a5b      	subs	r3, r3, r1
 800aed8:	42ab      	cmp	r3, r5
 800aeda:	dcf2      	bgt.n	800aec2 <_printf_i+0x212>
 800aedc:	e7eb      	b.n	800aeb6 <_printf_i+0x206>
 800aede:	2500      	movs	r5, #0
 800aee0:	f104 0619 	add.w	r6, r4, #25
 800aee4:	e7f5      	b.n	800aed2 <_printf_i+0x222>
 800aee6:	bf00      	nop
 800aee8:	0800eb22 	.word	0x0800eb22
 800aeec:	0800eb33 	.word	0x0800eb33

0800aef0 <std>:
 800aef0:	2300      	movs	r3, #0
 800aef2:	b510      	push	{r4, lr}
 800aef4:	4604      	mov	r4, r0
 800aef6:	e9c0 3300 	strd	r3, r3, [r0]
 800aefa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aefe:	6083      	str	r3, [r0, #8]
 800af00:	8181      	strh	r1, [r0, #12]
 800af02:	6643      	str	r3, [r0, #100]	@ 0x64
 800af04:	81c2      	strh	r2, [r0, #14]
 800af06:	6183      	str	r3, [r0, #24]
 800af08:	4619      	mov	r1, r3
 800af0a:	2208      	movs	r2, #8
 800af0c:	305c      	adds	r0, #92	@ 0x5c
 800af0e:	f000 f914 	bl	800b13a <memset>
 800af12:	4b0d      	ldr	r3, [pc, #52]	@ (800af48 <std+0x58>)
 800af14:	6263      	str	r3, [r4, #36]	@ 0x24
 800af16:	4b0d      	ldr	r3, [pc, #52]	@ (800af4c <std+0x5c>)
 800af18:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af1a:	4b0d      	ldr	r3, [pc, #52]	@ (800af50 <std+0x60>)
 800af1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <std+0x64>)
 800af20:	6323      	str	r3, [r4, #48]	@ 0x30
 800af22:	4b0d      	ldr	r3, [pc, #52]	@ (800af58 <std+0x68>)
 800af24:	6224      	str	r4, [r4, #32]
 800af26:	429c      	cmp	r4, r3
 800af28:	d006      	beq.n	800af38 <std+0x48>
 800af2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af2e:	4294      	cmp	r4, r2
 800af30:	d002      	beq.n	800af38 <std+0x48>
 800af32:	33d0      	adds	r3, #208	@ 0xd0
 800af34:	429c      	cmp	r4, r3
 800af36:	d105      	bne.n	800af44 <std+0x54>
 800af38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af40:	f000 b978 	b.w	800b234 <__retarget_lock_init_recursive>
 800af44:	bd10      	pop	{r4, pc}
 800af46:	bf00      	nop
 800af48:	0800b0b5 	.word	0x0800b0b5
 800af4c:	0800b0d7 	.word	0x0800b0d7
 800af50:	0800b10f 	.word	0x0800b10f
 800af54:	0800b133 	.word	0x0800b133
 800af58:	24005244 	.word	0x24005244

0800af5c <stdio_exit_handler>:
 800af5c:	4a02      	ldr	r2, [pc, #8]	@ (800af68 <stdio_exit_handler+0xc>)
 800af5e:	4903      	ldr	r1, [pc, #12]	@ (800af6c <stdio_exit_handler+0x10>)
 800af60:	4803      	ldr	r0, [pc, #12]	@ (800af70 <stdio_exit_handler+0x14>)
 800af62:	f000 b869 	b.w	800b038 <_fwalk_sglue>
 800af66:	bf00      	nop
 800af68:	24000038 	.word	0x24000038
 800af6c:	0800cad1 	.word	0x0800cad1
 800af70:	24000048 	.word	0x24000048

0800af74 <cleanup_stdio>:
 800af74:	6841      	ldr	r1, [r0, #4]
 800af76:	4b0c      	ldr	r3, [pc, #48]	@ (800afa8 <cleanup_stdio+0x34>)
 800af78:	4299      	cmp	r1, r3
 800af7a:	b510      	push	{r4, lr}
 800af7c:	4604      	mov	r4, r0
 800af7e:	d001      	beq.n	800af84 <cleanup_stdio+0x10>
 800af80:	f001 fda6 	bl	800cad0 <_fflush_r>
 800af84:	68a1      	ldr	r1, [r4, #8]
 800af86:	4b09      	ldr	r3, [pc, #36]	@ (800afac <cleanup_stdio+0x38>)
 800af88:	4299      	cmp	r1, r3
 800af8a:	d002      	beq.n	800af92 <cleanup_stdio+0x1e>
 800af8c:	4620      	mov	r0, r4
 800af8e:	f001 fd9f 	bl	800cad0 <_fflush_r>
 800af92:	68e1      	ldr	r1, [r4, #12]
 800af94:	4b06      	ldr	r3, [pc, #24]	@ (800afb0 <cleanup_stdio+0x3c>)
 800af96:	4299      	cmp	r1, r3
 800af98:	d004      	beq.n	800afa4 <cleanup_stdio+0x30>
 800af9a:	4620      	mov	r0, r4
 800af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa0:	f001 bd96 	b.w	800cad0 <_fflush_r>
 800afa4:	bd10      	pop	{r4, pc}
 800afa6:	bf00      	nop
 800afa8:	24005244 	.word	0x24005244
 800afac:	240052ac 	.word	0x240052ac
 800afb0:	24005314 	.word	0x24005314

0800afb4 <global_stdio_init.part.0>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	4b0b      	ldr	r3, [pc, #44]	@ (800afe4 <global_stdio_init.part.0+0x30>)
 800afb8:	4c0b      	ldr	r4, [pc, #44]	@ (800afe8 <global_stdio_init.part.0+0x34>)
 800afba:	4a0c      	ldr	r2, [pc, #48]	@ (800afec <global_stdio_init.part.0+0x38>)
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	4620      	mov	r0, r4
 800afc0:	2200      	movs	r2, #0
 800afc2:	2104      	movs	r1, #4
 800afc4:	f7ff ff94 	bl	800aef0 <std>
 800afc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afcc:	2201      	movs	r2, #1
 800afce:	2109      	movs	r1, #9
 800afd0:	f7ff ff8e 	bl	800aef0 <std>
 800afd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afd8:	2202      	movs	r2, #2
 800afda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afde:	2112      	movs	r1, #18
 800afe0:	f7ff bf86 	b.w	800aef0 <std>
 800afe4:	2400537c 	.word	0x2400537c
 800afe8:	24005244 	.word	0x24005244
 800afec:	0800af5d 	.word	0x0800af5d

0800aff0 <__sfp_lock_acquire>:
 800aff0:	4801      	ldr	r0, [pc, #4]	@ (800aff8 <__sfp_lock_acquire+0x8>)
 800aff2:	f000 b920 	b.w	800b236 <__retarget_lock_acquire_recursive>
 800aff6:	bf00      	nop
 800aff8:	24005385 	.word	0x24005385

0800affc <__sfp_lock_release>:
 800affc:	4801      	ldr	r0, [pc, #4]	@ (800b004 <__sfp_lock_release+0x8>)
 800affe:	f000 b91b 	b.w	800b238 <__retarget_lock_release_recursive>
 800b002:	bf00      	nop
 800b004:	24005385 	.word	0x24005385

0800b008 <__sinit>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	4604      	mov	r4, r0
 800b00c:	f7ff fff0 	bl	800aff0 <__sfp_lock_acquire>
 800b010:	6a23      	ldr	r3, [r4, #32]
 800b012:	b11b      	cbz	r3, 800b01c <__sinit+0x14>
 800b014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b018:	f7ff bff0 	b.w	800affc <__sfp_lock_release>
 800b01c:	4b04      	ldr	r3, [pc, #16]	@ (800b030 <__sinit+0x28>)
 800b01e:	6223      	str	r3, [r4, #32]
 800b020:	4b04      	ldr	r3, [pc, #16]	@ (800b034 <__sinit+0x2c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1f5      	bne.n	800b014 <__sinit+0xc>
 800b028:	f7ff ffc4 	bl	800afb4 <global_stdio_init.part.0>
 800b02c:	e7f2      	b.n	800b014 <__sinit+0xc>
 800b02e:	bf00      	nop
 800b030:	0800af75 	.word	0x0800af75
 800b034:	2400537c 	.word	0x2400537c

0800b038 <_fwalk_sglue>:
 800b038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b03c:	4607      	mov	r7, r0
 800b03e:	4688      	mov	r8, r1
 800b040:	4614      	mov	r4, r2
 800b042:	2600      	movs	r6, #0
 800b044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b048:	f1b9 0901 	subs.w	r9, r9, #1
 800b04c:	d505      	bpl.n	800b05a <_fwalk_sglue+0x22>
 800b04e:	6824      	ldr	r4, [r4, #0]
 800b050:	2c00      	cmp	r4, #0
 800b052:	d1f7      	bne.n	800b044 <_fwalk_sglue+0xc>
 800b054:	4630      	mov	r0, r6
 800b056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05a:	89ab      	ldrh	r3, [r5, #12]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d907      	bls.n	800b070 <_fwalk_sglue+0x38>
 800b060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b064:	3301      	adds	r3, #1
 800b066:	d003      	beq.n	800b070 <_fwalk_sglue+0x38>
 800b068:	4629      	mov	r1, r5
 800b06a:	4638      	mov	r0, r7
 800b06c:	47c0      	blx	r8
 800b06e:	4306      	orrs	r6, r0
 800b070:	3568      	adds	r5, #104	@ 0x68
 800b072:	e7e9      	b.n	800b048 <_fwalk_sglue+0x10>

0800b074 <siprintf>:
 800b074:	b40e      	push	{r1, r2, r3}
 800b076:	b500      	push	{lr}
 800b078:	b09c      	sub	sp, #112	@ 0x70
 800b07a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b07c:	9002      	str	r0, [sp, #8]
 800b07e:	9006      	str	r0, [sp, #24]
 800b080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b084:	4809      	ldr	r0, [pc, #36]	@ (800b0ac <siprintf+0x38>)
 800b086:	9107      	str	r1, [sp, #28]
 800b088:	9104      	str	r1, [sp, #16]
 800b08a:	4909      	ldr	r1, [pc, #36]	@ (800b0b0 <siprintf+0x3c>)
 800b08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b090:	9105      	str	r1, [sp, #20]
 800b092:	6800      	ldr	r0, [r0, #0]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	a902      	add	r1, sp, #8
 800b098:	f001 fb9a 	bl	800c7d0 <_svfiprintf_r>
 800b09c:	9b02      	ldr	r3, [sp, #8]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	b01c      	add	sp, #112	@ 0x70
 800b0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a8:	b003      	add	sp, #12
 800b0aa:	4770      	bx	lr
 800b0ac:	24000044 	.word	0x24000044
 800b0b0:	ffff0208 	.word	0xffff0208

0800b0b4 <__sread>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0bc:	f000 f86c 	bl	800b198 <_read_r>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	bfab      	itete	ge
 800b0c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b0c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b0c8:	181b      	addge	r3, r3, r0
 800b0ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0ce:	bfac      	ite	ge
 800b0d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0d2:	81a3      	strhlt	r3, [r4, #12]
 800b0d4:	bd10      	pop	{r4, pc}

0800b0d6 <__swrite>:
 800b0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0da:	461f      	mov	r7, r3
 800b0dc:	898b      	ldrh	r3, [r1, #12]
 800b0de:	05db      	lsls	r3, r3, #23
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	4616      	mov	r6, r2
 800b0e6:	d505      	bpl.n	800b0f4 <__swrite+0x1e>
 800b0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f000 f840 	bl	800b174 <_lseek_r>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0fe:	81a3      	strh	r3, [r4, #12]
 800b100:	4632      	mov	r2, r6
 800b102:	463b      	mov	r3, r7
 800b104:	4628      	mov	r0, r5
 800b106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b10a:	f000 b857 	b.w	800b1bc <_write_r>

0800b10e <__sseek>:
 800b10e:	b510      	push	{r4, lr}
 800b110:	460c      	mov	r4, r1
 800b112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b116:	f000 f82d 	bl	800b174 <_lseek_r>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	bf15      	itete	ne
 800b120:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b12a:	81a3      	strheq	r3, [r4, #12]
 800b12c:	bf18      	it	ne
 800b12e:	81a3      	strhne	r3, [r4, #12]
 800b130:	bd10      	pop	{r4, pc}

0800b132 <__sclose>:
 800b132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b136:	f000 b80d 	b.w	800b154 <_close_r>

0800b13a <memset>:
 800b13a:	4402      	add	r2, r0
 800b13c:	4603      	mov	r3, r0
 800b13e:	4293      	cmp	r3, r2
 800b140:	d100      	bne.n	800b144 <memset+0xa>
 800b142:	4770      	bx	lr
 800b144:	f803 1b01 	strb.w	r1, [r3], #1
 800b148:	e7f9      	b.n	800b13e <memset+0x4>
	...

0800b14c <_localeconv_r>:
 800b14c:	4800      	ldr	r0, [pc, #0]	@ (800b150 <_localeconv_r+0x4>)
 800b14e:	4770      	bx	lr
 800b150:	24000184 	.word	0x24000184

0800b154 <_close_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d06      	ldr	r5, [pc, #24]	@ (800b170 <_close_r+0x1c>)
 800b158:	2300      	movs	r3, #0
 800b15a:	4604      	mov	r4, r0
 800b15c:	4608      	mov	r0, r1
 800b15e:	602b      	str	r3, [r5, #0]
 800b160:	f7f6 f8f8 	bl	8001354 <_close>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d102      	bne.n	800b16e <_close_r+0x1a>
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	b103      	cbz	r3, 800b16e <_close_r+0x1a>
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	24005380 	.word	0x24005380

0800b174 <_lseek_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	@ (800b194 <_lseek_r+0x20>)
 800b178:	4604      	mov	r4, r0
 800b17a:	4608      	mov	r0, r1
 800b17c:	4611      	mov	r1, r2
 800b17e:	2200      	movs	r2, #0
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	f7f6 f90d 	bl	80013a2 <_lseek>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_lseek_r+0x1e>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_lseek_r+0x1e>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	24005380 	.word	0x24005380

0800b198 <_read_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	@ (800b1b8 <_read_r+0x20>)
 800b19c:	4604      	mov	r4, r0
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f7f6 f89b 	bl	80012e2 <_read>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_read_r+0x1e>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_read_r+0x1e>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	24005380 	.word	0x24005380

0800b1bc <_write_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	@ (800b1dc <_write_r+0x20>)
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f7f6 f8a6 	bl	800131c <_write>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_write_r+0x1e>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_write_r+0x1e>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	24005380 	.word	0x24005380

0800b1e0 <__errno>:
 800b1e0:	4b01      	ldr	r3, [pc, #4]	@ (800b1e8 <__errno+0x8>)
 800b1e2:	6818      	ldr	r0, [r3, #0]
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	24000044 	.word	0x24000044

0800b1ec <__libc_init_array>:
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	4d0d      	ldr	r5, [pc, #52]	@ (800b224 <__libc_init_array+0x38>)
 800b1f0:	4c0d      	ldr	r4, [pc, #52]	@ (800b228 <__libc_init_array+0x3c>)
 800b1f2:	1b64      	subs	r4, r4, r5
 800b1f4:	10a4      	asrs	r4, r4, #2
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	42a6      	cmp	r6, r4
 800b1fa:	d109      	bne.n	800b210 <__libc_init_array+0x24>
 800b1fc:	4d0b      	ldr	r5, [pc, #44]	@ (800b22c <__libc_init_array+0x40>)
 800b1fe:	4c0c      	ldr	r4, [pc, #48]	@ (800b230 <__libc_init_array+0x44>)
 800b200:	f001 fff6 	bl	800d1f0 <_init>
 800b204:	1b64      	subs	r4, r4, r5
 800b206:	10a4      	asrs	r4, r4, #2
 800b208:	2600      	movs	r6, #0
 800b20a:	42a6      	cmp	r6, r4
 800b20c:	d105      	bne.n	800b21a <__libc_init_array+0x2e>
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	f855 3b04 	ldr.w	r3, [r5], #4
 800b214:	4798      	blx	r3
 800b216:	3601      	adds	r6, #1
 800b218:	e7ee      	b.n	800b1f8 <__libc_init_array+0xc>
 800b21a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21e:	4798      	blx	r3
 800b220:	3601      	adds	r6, #1
 800b222:	e7f2      	b.n	800b20a <__libc_init_array+0x1e>
 800b224:	0800ee88 	.word	0x0800ee88
 800b228:	0800ee88 	.word	0x0800ee88
 800b22c:	0800ee88 	.word	0x0800ee88
 800b230:	0800ee8c 	.word	0x0800ee8c

0800b234 <__retarget_lock_init_recursive>:
 800b234:	4770      	bx	lr

0800b236 <__retarget_lock_acquire_recursive>:
 800b236:	4770      	bx	lr

0800b238 <__retarget_lock_release_recursive>:
 800b238:	4770      	bx	lr

0800b23a <memcpy>:
 800b23a:	440a      	add	r2, r1
 800b23c:	4291      	cmp	r1, r2
 800b23e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b242:	d100      	bne.n	800b246 <memcpy+0xc>
 800b244:	4770      	bx	lr
 800b246:	b510      	push	{r4, lr}
 800b248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b24c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b250:	4291      	cmp	r1, r2
 800b252:	d1f9      	bne.n	800b248 <memcpy+0xe>
 800b254:	bd10      	pop	{r4, pc}

0800b256 <quorem>:
 800b256:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25a:	6903      	ldr	r3, [r0, #16]
 800b25c:	690c      	ldr	r4, [r1, #16]
 800b25e:	42a3      	cmp	r3, r4
 800b260:	4607      	mov	r7, r0
 800b262:	db7e      	blt.n	800b362 <quorem+0x10c>
 800b264:	3c01      	subs	r4, #1
 800b266:	f101 0814 	add.w	r8, r1, #20
 800b26a:	00a3      	lsls	r3, r4, #2
 800b26c:	f100 0514 	add.w	r5, r0, #20
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b27c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b280:	3301      	adds	r3, #1
 800b282:	429a      	cmp	r2, r3
 800b284:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b288:	fbb2 f6f3 	udiv	r6, r2, r3
 800b28c:	d32e      	bcc.n	800b2ec <quorem+0x96>
 800b28e:	f04f 0a00 	mov.w	sl, #0
 800b292:	46c4      	mov	ip, r8
 800b294:	46ae      	mov	lr, r5
 800b296:	46d3      	mov	fp, sl
 800b298:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b29c:	b298      	uxth	r0, r3
 800b29e:	fb06 a000 	mla	r0, r6, r0, sl
 800b2a2:	0c02      	lsrs	r2, r0, #16
 800b2a4:	0c1b      	lsrs	r3, r3, #16
 800b2a6:	fb06 2303 	mla	r3, r6, r3, r2
 800b2aa:	f8de 2000 	ldr.w	r2, [lr]
 800b2ae:	b280      	uxth	r0, r0
 800b2b0:	b292      	uxth	r2, r2
 800b2b2:	1a12      	subs	r2, r2, r0
 800b2b4:	445a      	add	r2, fp
 800b2b6:	f8de 0000 	ldr.w	r0, [lr]
 800b2ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b2c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b2c8:	b292      	uxth	r2, r2
 800b2ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b2ce:	45e1      	cmp	r9, ip
 800b2d0:	f84e 2b04 	str.w	r2, [lr], #4
 800b2d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b2d8:	d2de      	bcs.n	800b298 <quorem+0x42>
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	58eb      	ldr	r3, [r5, r3]
 800b2de:	b92b      	cbnz	r3, 800b2ec <quorem+0x96>
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	3b04      	subs	r3, #4
 800b2e4:	429d      	cmp	r5, r3
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	d32f      	bcc.n	800b34a <quorem+0xf4>
 800b2ea:	613c      	str	r4, [r7, #16]
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	f001 f90b 	bl	800c508 <__mcmp>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	db25      	blt.n	800b342 <quorem+0xec>
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2fe:	f8d1 c000 	ldr.w	ip, [r1]
 800b302:	fa1f fe82 	uxth.w	lr, r2
 800b306:	fa1f f38c 	uxth.w	r3, ip
 800b30a:	eba3 030e 	sub.w	r3, r3, lr
 800b30e:	4403      	add	r3, r0
 800b310:	0c12      	lsrs	r2, r2, #16
 800b312:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b316:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b320:	45c1      	cmp	r9, r8
 800b322:	f841 3b04 	str.w	r3, [r1], #4
 800b326:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b32a:	d2e6      	bcs.n	800b2fa <quorem+0xa4>
 800b32c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b334:	b922      	cbnz	r2, 800b340 <quorem+0xea>
 800b336:	3b04      	subs	r3, #4
 800b338:	429d      	cmp	r5, r3
 800b33a:	461a      	mov	r2, r3
 800b33c:	d30b      	bcc.n	800b356 <quorem+0x100>
 800b33e:	613c      	str	r4, [r7, #16]
 800b340:	3601      	adds	r6, #1
 800b342:	4630      	mov	r0, r6
 800b344:	b003      	add	sp, #12
 800b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34a:	6812      	ldr	r2, [r2, #0]
 800b34c:	3b04      	subs	r3, #4
 800b34e:	2a00      	cmp	r2, #0
 800b350:	d1cb      	bne.n	800b2ea <quorem+0x94>
 800b352:	3c01      	subs	r4, #1
 800b354:	e7c6      	b.n	800b2e4 <quorem+0x8e>
 800b356:	6812      	ldr	r2, [r2, #0]
 800b358:	3b04      	subs	r3, #4
 800b35a:	2a00      	cmp	r2, #0
 800b35c:	d1ef      	bne.n	800b33e <quorem+0xe8>
 800b35e:	3c01      	subs	r4, #1
 800b360:	e7ea      	b.n	800b338 <quorem+0xe2>
 800b362:	2000      	movs	r0, #0
 800b364:	e7ee      	b.n	800b344 <quorem+0xee>
	...

0800b368 <_dtoa_r>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	ed2d 8b02 	vpush	{d8}
 800b370:	69c7      	ldr	r7, [r0, #28]
 800b372:	b091      	sub	sp, #68	@ 0x44
 800b374:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b378:	ec55 4b10 	vmov	r4, r5, d0
 800b37c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b37e:	9107      	str	r1, [sp, #28]
 800b380:	4681      	mov	r9, r0
 800b382:	9209      	str	r2, [sp, #36]	@ 0x24
 800b384:	930d      	str	r3, [sp, #52]	@ 0x34
 800b386:	b97f      	cbnz	r7, 800b3a8 <_dtoa_r+0x40>
 800b388:	2010      	movs	r0, #16
 800b38a:	f000 fd8d 	bl	800bea8 <malloc>
 800b38e:	4602      	mov	r2, r0
 800b390:	f8c9 001c 	str.w	r0, [r9, #28]
 800b394:	b920      	cbnz	r0, 800b3a0 <_dtoa_r+0x38>
 800b396:	4ba0      	ldr	r3, [pc, #640]	@ (800b618 <_dtoa_r+0x2b0>)
 800b398:	21ef      	movs	r1, #239	@ 0xef
 800b39a:	48a0      	ldr	r0, [pc, #640]	@ (800b61c <_dtoa_r+0x2b4>)
 800b39c:	f001 fbea 	bl	800cb74 <__assert_func>
 800b3a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b3a4:	6007      	str	r7, [r0, #0]
 800b3a6:	60c7      	str	r7, [r0, #12]
 800b3a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b3ac:	6819      	ldr	r1, [r3, #0]
 800b3ae:	b159      	cbz	r1, 800b3c8 <_dtoa_r+0x60>
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	604a      	str	r2, [r1, #4]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	4093      	lsls	r3, r2
 800b3b8:	608b      	str	r3, [r1, #8]
 800b3ba:	4648      	mov	r0, r9
 800b3bc:	f000 fe6a 	bl	800c094 <_Bfree>
 800b3c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	1e2b      	subs	r3, r5, #0
 800b3ca:	bfbb      	ittet	lt
 800b3cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b3d0:	9303      	strlt	r3, [sp, #12]
 800b3d2:	2300      	movge	r3, #0
 800b3d4:	2201      	movlt	r2, #1
 800b3d6:	bfac      	ite	ge
 800b3d8:	6033      	strge	r3, [r6, #0]
 800b3da:	6032      	strlt	r2, [r6, #0]
 800b3dc:	4b90      	ldr	r3, [pc, #576]	@ (800b620 <_dtoa_r+0x2b8>)
 800b3de:	9e03      	ldr	r6, [sp, #12]
 800b3e0:	43b3      	bics	r3, r6
 800b3e2:	d110      	bne.n	800b406 <_dtoa_r+0x9e>
 800b3e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b3f0:	4323      	orrs	r3, r4
 800b3f2:	f000 84de 	beq.w	800bdb2 <_dtoa_r+0xa4a>
 800b3f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b3f8:	4f8a      	ldr	r7, [pc, #552]	@ (800b624 <_dtoa_r+0x2bc>)
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 84e0 	beq.w	800bdc0 <_dtoa_r+0xa58>
 800b400:	1cfb      	adds	r3, r7, #3
 800b402:	f000 bcdb 	b.w	800bdbc <_dtoa_r+0xa54>
 800b406:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b40a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b412:	d10a      	bne.n	800b42a <_dtoa_r+0xc2>
 800b414:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b416:	2301      	movs	r3, #1
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b41c:	b113      	cbz	r3, 800b424 <_dtoa_r+0xbc>
 800b41e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b420:	4b81      	ldr	r3, [pc, #516]	@ (800b628 <_dtoa_r+0x2c0>)
 800b422:	6013      	str	r3, [r2, #0]
 800b424:	4f81      	ldr	r7, [pc, #516]	@ (800b62c <_dtoa_r+0x2c4>)
 800b426:	f000 bccb 	b.w	800bdc0 <_dtoa_r+0xa58>
 800b42a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b42c:	a90f      	add	r1, sp, #60	@ 0x3c
 800b42e:	4648      	mov	r0, r9
 800b430:	eeb0 0b48 	vmov.f64	d0, d8
 800b434:	f001 f918 	bl	800c668 <__d2b>
 800b438:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b43c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b43e:	9001      	str	r0, [sp, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d045      	beq.n	800b4d0 <_dtoa_r+0x168>
 800b444:	eeb0 7b48 	vmov.f64	d7, d8
 800b448:	ee18 1a90 	vmov	r1, s17
 800b44c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b450:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b454:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b458:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b45c:	2500      	movs	r5, #0
 800b45e:	ee07 1a90 	vmov	s15, r1
 800b462:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b466:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b600 <_dtoa_r+0x298>
 800b46a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b46e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b608 <_dtoa_r+0x2a0>
 800b472:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b476:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b610 <_dtoa_r+0x2a8>
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b482:	eeb0 7b46 	vmov.f64	d7, d6
 800b486:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b48a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b48e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b496:	ee16 8a90 	vmov	r8, s13
 800b49a:	d508      	bpl.n	800b4ae <_dtoa_r+0x146>
 800b49c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b4a0:	eeb4 6b47 	vcmp.f64	d6, d7
 800b4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a8:	bf18      	it	ne
 800b4aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b4ae:	f1b8 0f16 	cmp.w	r8, #22
 800b4b2:	d82b      	bhi.n	800b50c <_dtoa_r+0x1a4>
 800b4b4:	495e      	ldr	r1, [pc, #376]	@ (800b630 <_dtoa_r+0x2c8>)
 800b4b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b4ba:	ed91 7b00 	vldr	d7, [r1]
 800b4be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c6:	d501      	bpl.n	800b4cc <_dtoa_r+0x164>
 800b4c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	e01e      	b.n	800b50e <_dtoa_r+0x1a6>
 800b4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b4d8:	2920      	cmp	r1, #32
 800b4da:	bfc1      	itttt	gt
 800b4dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b4e0:	408e      	lslgt	r6, r1
 800b4e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b4e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b4ea:	bfd6      	itet	le
 800b4ec:	f1c1 0120 	rsble	r1, r1, #32
 800b4f0:	4331      	orrgt	r1, r6
 800b4f2:	fa04 f101 	lslle.w	r1, r4, r1
 800b4f6:	ee07 1a90 	vmov	s15, r1
 800b4fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b4fe:	3b01      	subs	r3, #1
 800b500:	ee17 1a90 	vmov	r1, s15
 800b504:	2501      	movs	r5, #1
 800b506:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b50a:	e7a8      	b.n	800b45e <_dtoa_r+0xf6>
 800b50c:	2101      	movs	r1, #1
 800b50e:	1ad2      	subs	r2, r2, r3
 800b510:	1e53      	subs	r3, r2, #1
 800b512:	9306      	str	r3, [sp, #24]
 800b514:	bf45      	ittet	mi
 800b516:	f1c2 0301 	rsbmi	r3, r2, #1
 800b51a:	9305      	strmi	r3, [sp, #20]
 800b51c:	2300      	movpl	r3, #0
 800b51e:	2300      	movmi	r3, #0
 800b520:	bf4c      	ite	mi
 800b522:	9306      	strmi	r3, [sp, #24]
 800b524:	9305      	strpl	r3, [sp, #20]
 800b526:	f1b8 0f00 	cmp.w	r8, #0
 800b52a:	910c      	str	r1, [sp, #48]	@ 0x30
 800b52c:	db18      	blt.n	800b560 <_dtoa_r+0x1f8>
 800b52e:	9b06      	ldr	r3, [sp, #24]
 800b530:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b534:	4443      	add	r3, r8
 800b536:	9306      	str	r3, [sp, #24]
 800b538:	2300      	movs	r3, #0
 800b53a:	9a07      	ldr	r2, [sp, #28]
 800b53c:	2a09      	cmp	r2, #9
 800b53e:	d849      	bhi.n	800b5d4 <_dtoa_r+0x26c>
 800b540:	2a05      	cmp	r2, #5
 800b542:	bfc4      	itt	gt
 800b544:	3a04      	subgt	r2, #4
 800b546:	9207      	strgt	r2, [sp, #28]
 800b548:	9a07      	ldr	r2, [sp, #28]
 800b54a:	f1a2 0202 	sub.w	r2, r2, #2
 800b54e:	bfcc      	ite	gt
 800b550:	2400      	movgt	r4, #0
 800b552:	2401      	movle	r4, #1
 800b554:	2a03      	cmp	r2, #3
 800b556:	d848      	bhi.n	800b5ea <_dtoa_r+0x282>
 800b558:	e8df f002 	tbb	[pc, r2]
 800b55c:	3a2c2e0b 	.word	0x3a2c2e0b
 800b560:	9b05      	ldr	r3, [sp, #20]
 800b562:	2200      	movs	r2, #0
 800b564:	eba3 0308 	sub.w	r3, r3, r8
 800b568:	9305      	str	r3, [sp, #20]
 800b56a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b56c:	f1c8 0300 	rsb	r3, r8, #0
 800b570:	e7e3      	b.n	800b53a <_dtoa_r+0x1d2>
 800b572:	2200      	movs	r2, #0
 800b574:	9208      	str	r2, [sp, #32]
 800b576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b578:	2a00      	cmp	r2, #0
 800b57a:	dc39      	bgt.n	800b5f0 <_dtoa_r+0x288>
 800b57c:	f04f 0b01 	mov.w	fp, #1
 800b580:	46da      	mov	sl, fp
 800b582:	465a      	mov	r2, fp
 800b584:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b588:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b58c:	2100      	movs	r1, #0
 800b58e:	2004      	movs	r0, #4
 800b590:	f100 0614 	add.w	r6, r0, #20
 800b594:	4296      	cmp	r6, r2
 800b596:	d930      	bls.n	800b5fa <_dtoa_r+0x292>
 800b598:	6079      	str	r1, [r7, #4]
 800b59a:	4648      	mov	r0, r9
 800b59c:	9304      	str	r3, [sp, #16]
 800b59e:	f000 fd39 	bl	800c014 <_Balloc>
 800b5a2:	9b04      	ldr	r3, [sp, #16]
 800b5a4:	4607      	mov	r7, r0
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d146      	bne.n	800b638 <_dtoa_r+0x2d0>
 800b5aa:	4b22      	ldr	r3, [pc, #136]	@ (800b634 <_dtoa_r+0x2cc>)
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800b5b2:	e6f2      	b.n	800b39a <_dtoa_r+0x32>
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	e7dd      	b.n	800b574 <_dtoa_r+0x20c>
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	9208      	str	r2, [sp, #32]
 800b5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5be:	eb08 0b02 	add.w	fp, r8, r2
 800b5c2:	f10b 0a01 	add.w	sl, fp, #1
 800b5c6:	4652      	mov	r2, sl
 800b5c8:	2a01      	cmp	r2, #1
 800b5ca:	bfb8      	it	lt
 800b5cc:	2201      	movlt	r2, #1
 800b5ce:	e7db      	b.n	800b588 <_dtoa_r+0x220>
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	e7f2      	b.n	800b5ba <_dtoa_r+0x252>
 800b5d4:	2401      	movs	r4, #1
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b5dc:	f04f 3bff 	mov.w	fp, #4294967295
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	46da      	mov	sl, fp
 800b5e4:	2212      	movs	r2, #18
 800b5e6:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5e8:	e7ce      	b.n	800b588 <_dtoa_r+0x220>
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	9208      	str	r2, [sp, #32]
 800b5ee:	e7f5      	b.n	800b5dc <_dtoa_r+0x274>
 800b5f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b5f4:	46da      	mov	sl, fp
 800b5f6:	465a      	mov	r2, fp
 800b5f8:	e7c6      	b.n	800b588 <_dtoa_r+0x220>
 800b5fa:	3101      	adds	r1, #1
 800b5fc:	0040      	lsls	r0, r0, #1
 800b5fe:	e7c7      	b.n	800b590 <_dtoa_r+0x228>
 800b600:	636f4361 	.word	0x636f4361
 800b604:	3fd287a7 	.word	0x3fd287a7
 800b608:	8b60c8b3 	.word	0x8b60c8b3
 800b60c:	3fc68a28 	.word	0x3fc68a28
 800b610:	509f79fb 	.word	0x509f79fb
 800b614:	3fd34413 	.word	0x3fd34413
 800b618:	0800eb51 	.word	0x0800eb51
 800b61c:	0800eb68 	.word	0x0800eb68
 800b620:	7ff00000 	.word	0x7ff00000
 800b624:	0800eb4d 	.word	0x0800eb4d
 800b628:	0800eb21 	.word	0x0800eb21
 800b62c:	0800eb20 	.word	0x0800eb20
 800b630:	0800ec60 	.word	0x0800ec60
 800b634:	0800ebc0 	.word	0x0800ebc0
 800b638:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b63c:	f1ba 0f0e 	cmp.w	sl, #14
 800b640:	6010      	str	r0, [r2, #0]
 800b642:	d86f      	bhi.n	800b724 <_dtoa_r+0x3bc>
 800b644:	2c00      	cmp	r4, #0
 800b646:	d06d      	beq.n	800b724 <_dtoa_r+0x3bc>
 800b648:	f1b8 0f00 	cmp.w	r8, #0
 800b64c:	f340 80c2 	ble.w	800b7d4 <_dtoa_r+0x46c>
 800b650:	4aca      	ldr	r2, [pc, #808]	@ (800b97c <_dtoa_r+0x614>)
 800b652:	f008 010f 	and.w	r1, r8, #15
 800b656:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b65a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b65e:	ed92 7b00 	vldr	d7, [r2]
 800b662:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b666:	f000 80a9 	beq.w	800b7bc <_dtoa_r+0x454>
 800b66a:	4ac5      	ldr	r2, [pc, #788]	@ (800b980 <_dtoa_r+0x618>)
 800b66c:	ed92 6b08 	vldr	d6, [r2, #32]
 800b670:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b674:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b678:	f001 010f 	and.w	r1, r1, #15
 800b67c:	2203      	movs	r2, #3
 800b67e:	48c0      	ldr	r0, [pc, #768]	@ (800b980 <_dtoa_r+0x618>)
 800b680:	2900      	cmp	r1, #0
 800b682:	f040 809d 	bne.w	800b7c0 <_dtoa_r+0x458>
 800b686:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b68a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b68e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b692:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b694:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b698:	2900      	cmp	r1, #0
 800b69a:	f000 80c1 	beq.w	800b820 <_dtoa_r+0x4b8>
 800b69e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b6a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6aa:	f140 80b9 	bpl.w	800b820 <_dtoa_r+0x4b8>
 800b6ae:	f1ba 0f00 	cmp.w	sl, #0
 800b6b2:	f000 80b5 	beq.w	800b820 <_dtoa_r+0x4b8>
 800b6b6:	f1bb 0f00 	cmp.w	fp, #0
 800b6ba:	dd31      	ble.n	800b720 <_dtoa_r+0x3b8>
 800b6bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b6c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b6c8:	f108 31ff 	add.w	r1, r8, #4294967295
 800b6cc:	9104      	str	r1, [sp, #16]
 800b6ce:	3201      	adds	r2, #1
 800b6d0:	465c      	mov	r4, fp
 800b6d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b6d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b6da:	ee07 2a90 	vmov	s15, r2
 800b6de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b6e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b6e6:	ee15 2a90 	vmov	r2, s11
 800b6ea:	ec51 0b15 	vmov	r0, r1, d5
 800b6ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b6f2:	2c00      	cmp	r4, #0
 800b6f4:	f040 8098 	bne.w	800b828 <_dtoa_r+0x4c0>
 800b6f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b6fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b700:	ec41 0b17 	vmov	d7, r0, r1
 800b704:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70c:	f300 8261 	bgt.w	800bbd2 <_dtoa_r+0x86a>
 800b710:	eeb1 7b47 	vneg.f64	d7, d7
 800b714:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71c:	f100 80f5 	bmi.w	800b90a <_dtoa_r+0x5a2>
 800b720:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b724:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b726:	2a00      	cmp	r2, #0
 800b728:	f2c0 812c 	blt.w	800b984 <_dtoa_r+0x61c>
 800b72c:	f1b8 0f0e 	cmp.w	r8, #14
 800b730:	f300 8128 	bgt.w	800b984 <_dtoa_r+0x61c>
 800b734:	4b91      	ldr	r3, [pc, #580]	@ (800b97c <_dtoa_r+0x614>)
 800b736:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b73a:	ed93 6b00 	vldr	d6, [r3]
 800b73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b740:	2b00      	cmp	r3, #0
 800b742:	da03      	bge.n	800b74c <_dtoa_r+0x3e4>
 800b744:	f1ba 0f00 	cmp.w	sl, #0
 800b748:	f340 80d2 	ble.w	800b8f0 <_dtoa_r+0x588>
 800b74c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b750:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b754:	463e      	mov	r6, r7
 800b756:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b75a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b75e:	ee15 3a10 	vmov	r3, s10
 800b762:	3330      	adds	r3, #48	@ 0x30
 800b764:	f806 3b01 	strb.w	r3, [r6], #1
 800b768:	1bf3      	subs	r3, r6, r7
 800b76a:	459a      	cmp	sl, r3
 800b76c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b770:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b774:	f040 80f8 	bne.w	800b968 <_dtoa_r+0x600>
 800b778:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b77c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b784:	f300 80dd 	bgt.w	800b942 <_dtoa_r+0x5da>
 800b788:	eeb4 7b46 	vcmp.f64	d7, d6
 800b78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b790:	d104      	bne.n	800b79c <_dtoa_r+0x434>
 800b792:	ee15 3a10 	vmov	r3, s10
 800b796:	07db      	lsls	r3, r3, #31
 800b798:	f100 80d3 	bmi.w	800b942 <_dtoa_r+0x5da>
 800b79c:	9901      	ldr	r1, [sp, #4]
 800b79e:	4648      	mov	r0, r9
 800b7a0:	f000 fc78 	bl	800c094 <_Bfree>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7a8:	7033      	strb	r3, [r6, #0]
 800b7aa:	f108 0301 	add.w	r3, r8, #1
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 8304 	beq.w	800bdc0 <_dtoa_r+0xa58>
 800b7b8:	601e      	str	r6, [r3, #0]
 800b7ba:	e301      	b.n	800bdc0 <_dtoa_r+0xa58>
 800b7bc:	2202      	movs	r2, #2
 800b7be:	e75e      	b.n	800b67e <_dtoa_r+0x316>
 800b7c0:	07cc      	lsls	r4, r1, #31
 800b7c2:	d504      	bpl.n	800b7ce <_dtoa_r+0x466>
 800b7c4:	ed90 6b00 	vldr	d6, [r0]
 800b7c8:	3201      	adds	r2, #1
 800b7ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7ce:	1049      	asrs	r1, r1, #1
 800b7d0:	3008      	adds	r0, #8
 800b7d2:	e755      	b.n	800b680 <_dtoa_r+0x318>
 800b7d4:	d022      	beq.n	800b81c <_dtoa_r+0x4b4>
 800b7d6:	f1c8 0100 	rsb	r1, r8, #0
 800b7da:	4a68      	ldr	r2, [pc, #416]	@ (800b97c <_dtoa_r+0x614>)
 800b7dc:	f001 000f 	and.w	r0, r1, #15
 800b7e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b7e4:	ed92 7b00 	vldr	d7, [r2]
 800b7e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b7ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b7f0:	4863      	ldr	r0, [pc, #396]	@ (800b980 <_dtoa_r+0x618>)
 800b7f2:	1109      	asrs	r1, r1, #4
 800b7f4:	2400      	movs	r4, #0
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	b929      	cbnz	r1, 800b806 <_dtoa_r+0x49e>
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	f43f af49 	beq.w	800b692 <_dtoa_r+0x32a>
 800b800:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b804:	e745      	b.n	800b692 <_dtoa_r+0x32a>
 800b806:	07ce      	lsls	r6, r1, #31
 800b808:	d505      	bpl.n	800b816 <_dtoa_r+0x4ae>
 800b80a:	ed90 6b00 	vldr	d6, [r0]
 800b80e:	3201      	adds	r2, #1
 800b810:	2401      	movs	r4, #1
 800b812:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b816:	1049      	asrs	r1, r1, #1
 800b818:	3008      	adds	r0, #8
 800b81a:	e7ed      	b.n	800b7f8 <_dtoa_r+0x490>
 800b81c:	2202      	movs	r2, #2
 800b81e:	e738      	b.n	800b692 <_dtoa_r+0x32a>
 800b820:	f8cd 8010 	str.w	r8, [sp, #16]
 800b824:	4654      	mov	r4, sl
 800b826:	e754      	b.n	800b6d2 <_dtoa_r+0x36a>
 800b828:	4a54      	ldr	r2, [pc, #336]	@ (800b97c <_dtoa_r+0x614>)
 800b82a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b82e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b832:	9a08      	ldr	r2, [sp, #32]
 800b834:	ec41 0b17 	vmov	d7, r0, r1
 800b838:	443c      	add	r4, r7
 800b83a:	b34a      	cbz	r2, 800b890 <_dtoa_r+0x528>
 800b83c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b840:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b844:	463e      	mov	r6, r7
 800b846:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b84a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b84e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b852:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b856:	ee14 2a90 	vmov	r2, s9
 800b85a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b85e:	3230      	adds	r2, #48	@ 0x30
 800b860:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b864:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b86c:	f806 2b01 	strb.w	r2, [r6], #1
 800b870:	d438      	bmi.n	800b8e4 <_dtoa_r+0x57c>
 800b872:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b876:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87e:	d462      	bmi.n	800b946 <_dtoa_r+0x5de>
 800b880:	42a6      	cmp	r6, r4
 800b882:	f43f af4d 	beq.w	800b720 <_dtoa_r+0x3b8>
 800b886:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b88a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b88e:	e7e0      	b.n	800b852 <_dtoa_r+0x4ea>
 800b890:	4621      	mov	r1, r4
 800b892:	463e      	mov	r6, r7
 800b894:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b898:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b89c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b8a0:	ee14 2a90 	vmov	r2, s9
 800b8a4:	3230      	adds	r2, #48	@ 0x30
 800b8a6:	f806 2b01 	strb.w	r2, [r6], #1
 800b8aa:	42a6      	cmp	r6, r4
 800b8ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b8b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b8b4:	d119      	bne.n	800b8ea <_dtoa_r+0x582>
 800b8b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b8ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b8be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c6:	dc3e      	bgt.n	800b946 <_dtoa_r+0x5de>
 800b8c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b8cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d4:	f57f af24 	bpl.w	800b720 <_dtoa_r+0x3b8>
 800b8d8:	460e      	mov	r6, r1
 800b8da:	3901      	subs	r1, #1
 800b8dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8e0:	2b30      	cmp	r3, #48	@ 0x30
 800b8e2:	d0f9      	beq.n	800b8d8 <_dtoa_r+0x570>
 800b8e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b8e8:	e758      	b.n	800b79c <_dtoa_r+0x434>
 800b8ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b8ee:	e7d5      	b.n	800b89c <_dtoa_r+0x534>
 800b8f0:	d10b      	bne.n	800b90a <_dtoa_r+0x5a2>
 800b8f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b8f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b8fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b906:	f2c0 8161 	blt.w	800bbcc <_dtoa_r+0x864>
 800b90a:	2400      	movs	r4, #0
 800b90c:	4625      	mov	r5, r4
 800b90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b910:	43db      	mvns	r3, r3
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	463e      	mov	r6, r7
 800b916:	f04f 0800 	mov.w	r8, #0
 800b91a:	4621      	mov	r1, r4
 800b91c:	4648      	mov	r0, r9
 800b91e:	f000 fbb9 	bl	800c094 <_Bfree>
 800b922:	2d00      	cmp	r5, #0
 800b924:	d0de      	beq.n	800b8e4 <_dtoa_r+0x57c>
 800b926:	f1b8 0f00 	cmp.w	r8, #0
 800b92a:	d005      	beq.n	800b938 <_dtoa_r+0x5d0>
 800b92c:	45a8      	cmp	r8, r5
 800b92e:	d003      	beq.n	800b938 <_dtoa_r+0x5d0>
 800b930:	4641      	mov	r1, r8
 800b932:	4648      	mov	r0, r9
 800b934:	f000 fbae 	bl	800c094 <_Bfree>
 800b938:	4629      	mov	r1, r5
 800b93a:	4648      	mov	r0, r9
 800b93c:	f000 fbaa 	bl	800c094 <_Bfree>
 800b940:	e7d0      	b.n	800b8e4 <_dtoa_r+0x57c>
 800b942:	f8cd 8010 	str.w	r8, [sp, #16]
 800b946:	4633      	mov	r3, r6
 800b948:	461e      	mov	r6, r3
 800b94a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b94e:	2a39      	cmp	r2, #57	@ 0x39
 800b950:	d106      	bne.n	800b960 <_dtoa_r+0x5f8>
 800b952:	429f      	cmp	r7, r3
 800b954:	d1f8      	bne.n	800b948 <_dtoa_r+0x5e0>
 800b956:	9a04      	ldr	r2, [sp, #16]
 800b958:	3201      	adds	r2, #1
 800b95a:	9204      	str	r2, [sp, #16]
 800b95c:	2230      	movs	r2, #48	@ 0x30
 800b95e:	703a      	strb	r2, [r7, #0]
 800b960:	781a      	ldrb	r2, [r3, #0]
 800b962:	3201      	adds	r2, #1
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	e7bd      	b.n	800b8e4 <_dtoa_r+0x57c>
 800b968:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b96c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b974:	f47f aeef 	bne.w	800b756 <_dtoa_r+0x3ee>
 800b978:	e710      	b.n	800b79c <_dtoa_r+0x434>
 800b97a:	bf00      	nop
 800b97c:	0800ec60 	.word	0x0800ec60
 800b980:	0800ec38 	.word	0x0800ec38
 800b984:	9908      	ldr	r1, [sp, #32]
 800b986:	2900      	cmp	r1, #0
 800b988:	f000 80e3 	beq.w	800bb52 <_dtoa_r+0x7ea>
 800b98c:	9907      	ldr	r1, [sp, #28]
 800b98e:	2901      	cmp	r1, #1
 800b990:	f300 80c8 	bgt.w	800bb24 <_dtoa_r+0x7bc>
 800b994:	2d00      	cmp	r5, #0
 800b996:	f000 80c1 	beq.w	800bb1c <_dtoa_r+0x7b4>
 800b99a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b99e:	9e05      	ldr	r6, [sp, #20]
 800b9a0:	461c      	mov	r4, r3
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	9b05      	ldr	r3, [sp, #20]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	9305      	str	r3, [sp, #20]
 800b9aa:	9b06      	ldr	r3, [sp, #24]
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	4413      	add	r3, r2
 800b9b0:	4648      	mov	r0, r9
 800b9b2:	9306      	str	r3, [sp, #24]
 800b9b4:	f000 fc22 	bl	800c1fc <__i2b>
 800b9b8:	9b04      	ldr	r3, [sp, #16]
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	b166      	cbz	r6, 800b9d8 <_dtoa_r+0x670>
 800b9be:	9a06      	ldr	r2, [sp, #24]
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	dd09      	ble.n	800b9d8 <_dtoa_r+0x670>
 800b9c4:	42b2      	cmp	r2, r6
 800b9c6:	9905      	ldr	r1, [sp, #20]
 800b9c8:	bfa8      	it	ge
 800b9ca:	4632      	movge	r2, r6
 800b9cc:	1a89      	subs	r1, r1, r2
 800b9ce:	9105      	str	r1, [sp, #20]
 800b9d0:	9906      	ldr	r1, [sp, #24]
 800b9d2:	1ab6      	subs	r6, r6, r2
 800b9d4:	1a8a      	subs	r2, r1, r2
 800b9d6:	9206      	str	r2, [sp, #24]
 800b9d8:	b1fb      	cbz	r3, 800ba1a <_dtoa_r+0x6b2>
 800b9da:	9a08      	ldr	r2, [sp, #32]
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	f000 80bc 	beq.w	800bb5a <_dtoa_r+0x7f2>
 800b9e2:	b19c      	cbz	r4, 800ba0c <_dtoa_r+0x6a4>
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	4648      	mov	r0, r9
 800b9ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9ec:	f000 fcc6 	bl	800c37c <__pow5mult>
 800b9f0:	9a01      	ldr	r2, [sp, #4]
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	4648      	mov	r0, r9
 800b9f8:	f000 fc16 	bl	800c228 <__multiply>
 800b9fc:	9901      	ldr	r1, [sp, #4]
 800b9fe:	9004      	str	r0, [sp, #16]
 800ba00:	4648      	mov	r0, r9
 800ba02:	f000 fb47 	bl	800c094 <_Bfree>
 800ba06:	9a04      	ldr	r2, [sp, #16]
 800ba08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba0a:	9201      	str	r2, [sp, #4]
 800ba0c:	1b1a      	subs	r2, r3, r4
 800ba0e:	d004      	beq.n	800ba1a <_dtoa_r+0x6b2>
 800ba10:	9901      	ldr	r1, [sp, #4]
 800ba12:	4648      	mov	r0, r9
 800ba14:	f000 fcb2 	bl	800c37c <__pow5mult>
 800ba18:	9001      	str	r0, [sp, #4]
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	4648      	mov	r0, r9
 800ba1e:	f000 fbed 	bl	800c1fc <__i2b>
 800ba22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba24:	4604      	mov	r4, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 81d0 	beq.w	800bdcc <_dtoa_r+0xa64>
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	4601      	mov	r1, r0
 800ba30:	4648      	mov	r0, r9
 800ba32:	f000 fca3 	bl	800c37c <__pow5mult>
 800ba36:	9b07      	ldr	r3, [sp, #28]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	f300 8095 	bgt.w	800bb6a <_dtoa_r+0x802>
 800ba40:	9b02      	ldr	r3, [sp, #8]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f040 808b 	bne.w	800bb5e <_dtoa_r+0x7f6>
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	f040 8087 	bne.w	800bb62 <_dtoa_r+0x7fa>
 800ba54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ba58:	0d12      	lsrs	r2, r2, #20
 800ba5a:	0512      	lsls	r2, r2, #20
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	f000 8082 	beq.w	800bb66 <_dtoa_r+0x7fe>
 800ba62:	9b05      	ldr	r3, [sp, #20]
 800ba64:	3301      	adds	r3, #1
 800ba66:	9305      	str	r3, [sp, #20]
 800ba68:	9b06      	ldr	r3, [sp, #24]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	9306      	str	r3, [sp, #24]
 800ba6e:	2301      	movs	r3, #1
 800ba70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 81af 	beq.w	800bdd8 <_dtoa_r+0xa70>
 800ba7a:	6922      	ldr	r2, [r4, #16]
 800ba7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ba80:	6910      	ldr	r0, [r2, #16]
 800ba82:	f000 fb6f 	bl	800c164 <__hi0bits>
 800ba86:	f1c0 0020 	rsb	r0, r0, #32
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	4418      	add	r0, r3
 800ba8e:	f010 001f 	ands.w	r0, r0, #31
 800ba92:	d076      	beq.n	800bb82 <_dtoa_r+0x81a>
 800ba94:	f1c0 0220 	rsb	r2, r0, #32
 800ba98:	2a04      	cmp	r2, #4
 800ba9a:	dd69      	ble.n	800bb70 <_dtoa_r+0x808>
 800ba9c:	9b05      	ldr	r3, [sp, #20]
 800ba9e:	f1c0 001c 	rsb	r0, r0, #28
 800baa2:	4403      	add	r3, r0
 800baa4:	9305      	str	r3, [sp, #20]
 800baa6:	9b06      	ldr	r3, [sp, #24]
 800baa8:	4406      	add	r6, r0
 800baaa:	4403      	add	r3, r0
 800baac:	9306      	str	r3, [sp, #24]
 800baae:	9b05      	ldr	r3, [sp, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	dd05      	ble.n	800bac0 <_dtoa_r+0x758>
 800bab4:	9901      	ldr	r1, [sp, #4]
 800bab6:	461a      	mov	r2, r3
 800bab8:	4648      	mov	r0, r9
 800baba:	f000 fcb9 	bl	800c430 <__lshift>
 800babe:	9001      	str	r0, [sp, #4]
 800bac0:	9b06      	ldr	r3, [sp, #24]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	dd05      	ble.n	800bad2 <_dtoa_r+0x76a>
 800bac6:	4621      	mov	r1, r4
 800bac8:	461a      	mov	r2, r3
 800baca:	4648      	mov	r0, r9
 800bacc:	f000 fcb0 	bl	800c430 <__lshift>
 800bad0:	4604      	mov	r4, r0
 800bad2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d056      	beq.n	800bb86 <_dtoa_r+0x81e>
 800bad8:	9801      	ldr	r0, [sp, #4]
 800bada:	4621      	mov	r1, r4
 800badc:	f000 fd14 	bl	800c508 <__mcmp>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	da50      	bge.n	800bb86 <_dtoa_r+0x81e>
 800bae4:	f108 33ff 	add.w	r3, r8, #4294967295
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9901      	ldr	r1, [sp, #4]
 800baec:	2300      	movs	r3, #0
 800baee:	220a      	movs	r2, #10
 800baf0:	4648      	mov	r0, r9
 800baf2:	f000 faf1 	bl	800c0d8 <__multadd>
 800baf6:	9b08      	ldr	r3, [sp, #32]
 800baf8:	9001      	str	r0, [sp, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 816e 	beq.w	800bddc <_dtoa_r+0xa74>
 800bb00:	4629      	mov	r1, r5
 800bb02:	2300      	movs	r3, #0
 800bb04:	220a      	movs	r2, #10
 800bb06:	4648      	mov	r0, r9
 800bb08:	f000 fae6 	bl	800c0d8 <__multadd>
 800bb0c:	f1bb 0f00 	cmp.w	fp, #0
 800bb10:	4605      	mov	r5, r0
 800bb12:	dc64      	bgt.n	800bbde <_dtoa_r+0x876>
 800bb14:	9b07      	ldr	r3, [sp, #28]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	dc3e      	bgt.n	800bb98 <_dtoa_r+0x830>
 800bb1a:	e060      	b.n	800bbde <_dtoa_r+0x876>
 800bb1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bb22:	e73c      	b.n	800b99e <_dtoa_r+0x636>
 800bb24:	f10a 34ff 	add.w	r4, sl, #4294967295
 800bb28:	42a3      	cmp	r3, r4
 800bb2a:	bfbf      	itttt	lt
 800bb2c:	1ae2      	sublt	r2, r4, r3
 800bb2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bb30:	189b      	addlt	r3, r3, r2
 800bb32:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800bb34:	bfae      	itee	ge
 800bb36:	1b1c      	subge	r4, r3, r4
 800bb38:	4623      	movlt	r3, r4
 800bb3a:	2400      	movlt	r4, #0
 800bb3c:	f1ba 0f00 	cmp.w	sl, #0
 800bb40:	bfb5      	itete	lt
 800bb42:	9a05      	ldrlt	r2, [sp, #20]
 800bb44:	9e05      	ldrge	r6, [sp, #20]
 800bb46:	eba2 060a 	sublt.w	r6, r2, sl
 800bb4a:	4652      	movge	r2, sl
 800bb4c:	bfb8      	it	lt
 800bb4e:	2200      	movlt	r2, #0
 800bb50:	e727      	b.n	800b9a2 <_dtoa_r+0x63a>
 800bb52:	9e05      	ldr	r6, [sp, #20]
 800bb54:	9d08      	ldr	r5, [sp, #32]
 800bb56:	461c      	mov	r4, r3
 800bb58:	e730      	b.n	800b9bc <_dtoa_r+0x654>
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	e758      	b.n	800ba10 <_dtoa_r+0x6a8>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	e786      	b.n	800ba70 <_dtoa_r+0x708>
 800bb62:	9b02      	ldr	r3, [sp, #8]
 800bb64:	e784      	b.n	800ba70 <_dtoa_r+0x708>
 800bb66:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bb68:	e783      	b.n	800ba72 <_dtoa_r+0x70a>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb6e:	e784      	b.n	800ba7a <_dtoa_r+0x712>
 800bb70:	d09d      	beq.n	800baae <_dtoa_r+0x746>
 800bb72:	9b05      	ldr	r3, [sp, #20]
 800bb74:	321c      	adds	r2, #28
 800bb76:	4413      	add	r3, r2
 800bb78:	9305      	str	r3, [sp, #20]
 800bb7a:	9b06      	ldr	r3, [sp, #24]
 800bb7c:	4416      	add	r6, r2
 800bb7e:	4413      	add	r3, r2
 800bb80:	e794      	b.n	800baac <_dtoa_r+0x744>
 800bb82:	4602      	mov	r2, r0
 800bb84:	e7f5      	b.n	800bb72 <_dtoa_r+0x80a>
 800bb86:	f1ba 0f00 	cmp.w	sl, #0
 800bb8a:	f8cd 8010 	str.w	r8, [sp, #16]
 800bb8e:	46d3      	mov	fp, sl
 800bb90:	dc21      	bgt.n	800bbd6 <_dtoa_r+0x86e>
 800bb92:	9b07      	ldr	r3, [sp, #28]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	dd1e      	ble.n	800bbd6 <_dtoa_r+0x86e>
 800bb98:	f1bb 0f00 	cmp.w	fp, #0
 800bb9c:	f47f aeb7 	bne.w	800b90e <_dtoa_r+0x5a6>
 800bba0:	4621      	mov	r1, r4
 800bba2:	465b      	mov	r3, fp
 800bba4:	2205      	movs	r2, #5
 800bba6:	4648      	mov	r0, r9
 800bba8:	f000 fa96 	bl	800c0d8 <__multadd>
 800bbac:	4601      	mov	r1, r0
 800bbae:	4604      	mov	r4, r0
 800bbb0:	9801      	ldr	r0, [sp, #4]
 800bbb2:	f000 fca9 	bl	800c508 <__mcmp>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f77f aea9 	ble.w	800b90e <_dtoa_r+0x5a6>
 800bbbc:	463e      	mov	r6, r7
 800bbbe:	2331      	movs	r3, #49	@ 0x31
 800bbc0:	f806 3b01 	strb.w	r3, [r6], #1
 800bbc4:	9b04      	ldr	r3, [sp, #16]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	e6a4      	b.n	800b916 <_dtoa_r+0x5ae>
 800bbcc:	f8cd 8010 	str.w	r8, [sp, #16]
 800bbd0:	4654      	mov	r4, sl
 800bbd2:	4625      	mov	r5, r4
 800bbd4:	e7f2      	b.n	800bbbc <_dtoa_r+0x854>
 800bbd6:	9b08      	ldr	r3, [sp, #32]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 8103 	beq.w	800bde4 <_dtoa_r+0xa7c>
 800bbde:	2e00      	cmp	r6, #0
 800bbe0:	dd05      	ble.n	800bbee <_dtoa_r+0x886>
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	4648      	mov	r0, r9
 800bbe8:	f000 fc22 	bl	800c430 <__lshift>
 800bbec:	4605      	mov	r5, r0
 800bbee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d058      	beq.n	800bca6 <_dtoa_r+0x93e>
 800bbf4:	6869      	ldr	r1, [r5, #4]
 800bbf6:	4648      	mov	r0, r9
 800bbf8:	f000 fa0c 	bl	800c014 <_Balloc>
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	b928      	cbnz	r0, 800bc0c <_dtoa_r+0x8a4>
 800bc00:	4b82      	ldr	r3, [pc, #520]	@ (800be0c <_dtoa_r+0xaa4>)
 800bc02:	4602      	mov	r2, r0
 800bc04:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc08:	f7ff bbc7 	b.w	800b39a <_dtoa_r+0x32>
 800bc0c:	692a      	ldr	r2, [r5, #16]
 800bc0e:	3202      	adds	r2, #2
 800bc10:	0092      	lsls	r2, r2, #2
 800bc12:	f105 010c 	add.w	r1, r5, #12
 800bc16:	300c      	adds	r0, #12
 800bc18:	f7ff fb0f 	bl	800b23a <memcpy>
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4648      	mov	r0, r9
 800bc22:	f000 fc05 	bl	800c430 <__lshift>
 800bc26:	1c7b      	adds	r3, r7, #1
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	eb07 030b 	add.w	r3, r7, fp
 800bc2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc30:	9b02      	ldr	r3, [sp, #8]
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	46a8      	mov	r8, r5
 800bc38:	9308      	str	r3, [sp, #32]
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	9b05      	ldr	r3, [sp, #20]
 800bc3e:	9801      	ldr	r0, [sp, #4]
 800bc40:	4621      	mov	r1, r4
 800bc42:	f103 3bff 	add.w	fp, r3, #4294967295
 800bc46:	f7ff fb06 	bl	800b256 <quorem>
 800bc4a:	4641      	mov	r1, r8
 800bc4c:	9002      	str	r0, [sp, #8]
 800bc4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bc52:	9801      	ldr	r0, [sp, #4]
 800bc54:	f000 fc58 	bl	800c508 <__mcmp>
 800bc58:	462a      	mov	r2, r5
 800bc5a:	9006      	str	r0, [sp, #24]
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	4648      	mov	r0, r9
 800bc60:	f000 fc6e 	bl	800c540 <__mdiff>
 800bc64:	68c2      	ldr	r2, [r0, #12]
 800bc66:	4606      	mov	r6, r0
 800bc68:	b9fa      	cbnz	r2, 800bcaa <_dtoa_r+0x942>
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	9801      	ldr	r0, [sp, #4]
 800bc6e:	f000 fc4b 	bl	800c508 <__mcmp>
 800bc72:	4602      	mov	r2, r0
 800bc74:	4631      	mov	r1, r6
 800bc76:	4648      	mov	r0, r9
 800bc78:	920a      	str	r2, [sp, #40]	@ 0x28
 800bc7a:	f000 fa0b 	bl	800c094 <_Bfree>
 800bc7e:	9b07      	ldr	r3, [sp, #28]
 800bc80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc82:	9e05      	ldr	r6, [sp, #20]
 800bc84:	ea43 0102 	orr.w	r1, r3, r2
 800bc88:	9b08      	ldr	r3, [sp, #32]
 800bc8a:	4319      	orrs	r1, r3
 800bc8c:	d10f      	bne.n	800bcae <_dtoa_r+0x946>
 800bc8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc92:	d028      	beq.n	800bce6 <_dtoa_r+0x97e>
 800bc94:	9b06      	ldr	r3, [sp, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	dd02      	ble.n	800bca0 <_dtoa_r+0x938>
 800bc9a:	9b02      	ldr	r3, [sp, #8]
 800bc9c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bca0:	f88b a000 	strb.w	sl, [fp]
 800bca4:	e639      	b.n	800b91a <_dtoa_r+0x5b2>
 800bca6:	4628      	mov	r0, r5
 800bca8:	e7bd      	b.n	800bc26 <_dtoa_r+0x8be>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	e7e2      	b.n	800bc74 <_dtoa_r+0x90c>
 800bcae:	9b06      	ldr	r3, [sp, #24]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	db04      	blt.n	800bcbe <_dtoa_r+0x956>
 800bcb4:	9907      	ldr	r1, [sp, #28]
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	9908      	ldr	r1, [sp, #32]
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	d120      	bne.n	800bd00 <_dtoa_r+0x998>
 800bcbe:	2a00      	cmp	r2, #0
 800bcc0:	ddee      	ble.n	800bca0 <_dtoa_r+0x938>
 800bcc2:	9901      	ldr	r1, [sp, #4]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	4648      	mov	r0, r9
 800bcc8:	f000 fbb2 	bl	800c430 <__lshift>
 800bccc:	4621      	mov	r1, r4
 800bcce:	9001      	str	r0, [sp, #4]
 800bcd0:	f000 fc1a 	bl	800c508 <__mcmp>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	dc03      	bgt.n	800bce0 <_dtoa_r+0x978>
 800bcd8:	d1e2      	bne.n	800bca0 <_dtoa_r+0x938>
 800bcda:	f01a 0f01 	tst.w	sl, #1
 800bcde:	d0df      	beq.n	800bca0 <_dtoa_r+0x938>
 800bce0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bce4:	d1d9      	bne.n	800bc9a <_dtoa_r+0x932>
 800bce6:	2339      	movs	r3, #57	@ 0x39
 800bce8:	f88b 3000 	strb.w	r3, [fp]
 800bcec:	4633      	mov	r3, r6
 800bcee:	461e      	mov	r6, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bcf6:	2a39      	cmp	r2, #57	@ 0x39
 800bcf8:	d053      	beq.n	800bda2 <_dtoa_r+0xa3a>
 800bcfa:	3201      	adds	r2, #1
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e60c      	b.n	800b91a <_dtoa_r+0x5b2>
 800bd00:	2a00      	cmp	r2, #0
 800bd02:	dd07      	ble.n	800bd14 <_dtoa_r+0x9ac>
 800bd04:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bd08:	d0ed      	beq.n	800bce6 <_dtoa_r+0x97e>
 800bd0a:	f10a 0301 	add.w	r3, sl, #1
 800bd0e:	f88b 3000 	strb.w	r3, [fp]
 800bd12:	e602      	b.n	800b91a <_dtoa_r+0x5b2>
 800bd14:	9b05      	ldr	r3, [sp, #20]
 800bd16:	9a05      	ldr	r2, [sp, #20]
 800bd18:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bd1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d029      	beq.n	800bd76 <_dtoa_r+0xa0e>
 800bd22:	9901      	ldr	r1, [sp, #4]
 800bd24:	2300      	movs	r3, #0
 800bd26:	220a      	movs	r2, #10
 800bd28:	4648      	mov	r0, r9
 800bd2a:	f000 f9d5 	bl	800c0d8 <__multadd>
 800bd2e:	45a8      	cmp	r8, r5
 800bd30:	9001      	str	r0, [sp, #4]
 800bd32:	f04f 0300 	mov.w	r3, #0
 800bd36:	f04f 020a 	mov.w	r2, #10
 800bd3a:	4641      	mov	r1, r8
 800bd3c:	4648      	mov	r0, r9
 800bd3e:	d107      	bne.n	800bd50 <_dtoa_r+0x9e8>
 800bd40:	f000 f9ca 	bl	800c0d8 <__multadd>
 800bd44:	4680      	mov	r8, r0
 800bd46:	4605      	mov	r5, r0
 800bd48:	9b05      	ldr	r3, [sp, #20]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	9305      	str	r3, [sp, #20]
 800bd4e:	e775      	b.n	800bc3c <_dtoa_r+0x8d4>
 800bd50:	f000 f9c2 	bl	800c0d8 <__multadd>
 800bd54:	4629      	mov	r1, r5
 800bd56:	4680      	mov	r8, r0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	220a      	movs	r2, #10
 800bd5c:	4648      	mov	r0, r9
 800bd5e:	f000 f9bb 	bl	800c0d8 <__multadd>
 800bd62:	4605      	mov	r5, r0
 800bd64:	e7f0      	b.n	800bd48 <_dtoa_r+0x9e0>
 800bd66:	f1bb 0f00 	cmp.w	fp, #0
 800bd6a:	bfcc      	ite	gt
 800bd6c:	465e      	movgt	r6, fp
 800bd6e:	2601      	movle	r6, #1
 800bd70:	443e      	add	r6, r7
 800bd72:	f04f 0800 	mov.w	r8, #0
 800bd76:	9901      	ldr	r1, [sp, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	4648      	mov	r0, r9
 800bd7c:	f000 fb58 	bl	800c430 <__lshift>
 800bd80:	4621      	mov	r1, r4
 800bd82:	9001      	str	r0, [sp, #4]
 800bd84:	f000 fbc0 	bl	800c508 <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	dcaf      	bgt.n	800bcec <_dtoa_r+0x984>
 800bd8c:	d102      	bne.n	800bd94 <_dtoa_r+0xa2c>
 800bd8e:	f01a 0f01 	tst.w	sl, #1
 800bd92:	d1ab      	bne.n	800bcec <_dtoa_r+0x984>
 800bd94:	4633      	mov	r3, r6
 800bd96:	461e      	mov	r6, r3
 800bd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd9c:	2a30      	cmp	r2, #48	@ 0x30
 800bd9e:	d0fa      	beq.n	800bd96 <_dtoa_r+0xa2e>
 800bda0:	e5bb      	b.n	800b91a <_dtoa_r+0x5b2>
 800bda2:	429f      	cmp	r7, r3
 800bda4:	d1a3      	bne.n	800bcee <_dtoa_r+0x986>
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	2331      	movs	r3, #49	@ 0x31
 800bdae:	703b      	strb	r3, [r7, #0]
 800bdb0:	e5b3      	b.n	800b91a <_dtoa_r+0x5b2>
 800bdb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bdb4:	4f16      	ldr	r7, [pc, #88]	@ (800be10 <_dtoa_r+0xaa8>)
 800bdb6:	b11b      	cbz	r3, 800bdc0 <_dtoa_r+0xa58>
 800bdb8:	f107 0308 	add.w	r3, r7, #8
 800bdbc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	b011      	add	sp, #68	@ 0x44
 800bdc4:	ecbd 8b02 	vpop	{d8}
 800bdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdcc:	9b07      	ldr	r3, [sp, #28]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	f77f ae36 	ble.w	800ba40 <_dtoa_r+0x6d8>
 800bdd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdd8:	2001      	movs	r0, #1
 800bdda:	e656      	b.n	800ba8a <_dtoa_r+0x722>
 800bddc:	f1bb 0f00 	cmp.w	fp, #0
 800bde0:	f77f aed7 	ble.w	800bb92 <_dtoa_r+0x82a>
 800bde4:	463e      	mov	r6, r7
 800bde6:	9801      	ldr	r0, [sp, #4]
 800bde8:	4621      	mov	r1, r4
 800bdea:	f7ff fa34 	bl	800b256 <quorem>
 800bdee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bdf2:	f806 ab01 	strb.w	sl, [r6], #1
 800bdf6:	1bf2      	subs	r2, r6, r7
 800bdf8:	4593      	cmp	fp, r2
 800bdfa:	ddb4      	ble.n	800bd66 <_dtoa_r+0x9fe>
 800bdfc:	9901      	ldr	r1, [sp, #4]
 800bdfe:	2300      	movs	r3, #0
 800be00:	220a      	movs	r2, #10
 800be02:	4648      	mov	r0, r9
 800be04:	f000 f968 	bl	800c0d8 <__multadd>
 800be08:	9001      	str	r0, [sp, #4]
 800be0a:	e7ec      	b.n	800bde6 <_dtoa_r+0xa7e>
 800be0c:	0800ebc0 	.word	0x0800ebc0
 800be10:	0800eb44 	.word	0x0800eb44

0800be14 <_free_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4605      	mov	r5, r0
 800be18:	2900      	cmp	r1, #0
 800be1a:	d041      	beq.n	800bea0 <_free_r+0x8c>
 800be1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be20:	1f0c      	subs	r4, r1, #4
 800be22:	2b00      	cmp	r3, #0
 800be24:	bfb8      	it	lt
 800be26:	18e4      	addlt	r4, r4, r3
 800be28:	f000 f8e8 	bl	800bffc <__malloc_lock>
 800be2c:	4a1d      	ldr	r2, [pc, #116]	@ (800bea4 <_free_r+0x90>)
 800be2e:	6813      	ldr	r3, [r2, #0]
 800be30:	b933      	cbnz	r3, 800be40 <_free_r+0x2c>
 800be32:	6063      	str	r3, [r4, #4]
 800be34:	6014      	str	r4, [r2, #0]
 800be36:	4628      	mov	r0, r5
 800be38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be3c:	f000 b8e4 	b.w	800c008 <__malloc_unlock>
 800be40:	42a3      	cmp	r3, r4
 800be42:	d908      	bls.n	800be56 <_free_r+0x42>
 800be44:	6820      	ldr	r0, [r4, #0]
 800be46:	1821      	adds	r1, r4, r0
 800be48:	428b      	cmp	r3, r1
 800be4a:	bf01      	itttt	eq
 800be4c:	6819      	ldreq	r1, [r3, #0]
 800be4e:	685b      	ldreq	r3, [r3, #4]
 800be50:	1809      	addeq	r1, r1, r0
 800be52:	6021      	streq	r1, [r4, #0]
 800be54:	e7ed      	b.n	800be32 <_free_r+0x1e>
 800be56:	461a      	mov	r2, r3
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	b10b      	cbz	r3, 800be60 <_free_r+0x4c>
 800be5c:	42a3      	cmp	r3, r4
 800be5e:	d9fa      	bls.n	800be56 <_free_r+0x42>
 800be60:	6811      	ldr	r1, [r2, #0]
 800be62:	1850      	adds	r0, r2, r1
 800be64:	42a0      	cmp	r0, r4
 800be66:	d10b      	bne.n	800be80 <_free_r+0x6c>
 800be68:	6820      	ldr	r0, [r4, #0]
 800be6a:	4401      	add	r1, r0
 800be6c:	1850      	adds	r0, r2, r1
 800be6e:	4283      	cmp	r3, r0
 800be70:	6011      	str	r1, [r2, #0]
 800be72:	d1e0      	bne.n	800be36 <_free_r+0x22>
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	6053      	str	r3, [r2, #4]
 800be7a:	4408      	add	r0, r1
 800be7c:	6010      	str	r0, [r2, #0]
 800be7e:	e7da      	b.n	800be36 <_free_r+0x22>
 800be80:	d902      	bls.n	800be88 <_free_r+0x74>
 800be82:	230c      	movs	r3, #12
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	e7d6      	b.n	800be36 <_free_r+0x22>
 800be88:	6820      	ldr	r0, [r4, #0]
 800be8a:	1821      	adds	r1, r4, r0
 800be8c:	428b      	cmp	r3, r1
 800be8e:	bf04      	itt	eq
 800be90:	6819      	ldreq	r1, [r3, #0]
 800be92:	685b      	ldreq	r3, [r3, #4]
 800be94:	6063      	str	r3, [r4, #4]
 800be96:	bf04      	itt	eq
 800be98:	1809      	addeq	r1, r1, r0
 800be9a:	6021      	streq	r1, [r4, #0]
 800be9c:	6054      	str	r4, [r2, #4]
 800be9e:	e7ca      	b.n	800be36 <_free_r+0x22>
 800bea0:	bd38      	pop	{r3, r4, r5, pc}
 800bea2:	bf00      	nop
 800bea4:	2400538c 	.word	0x2400538c

0800bea8 <malloc>:
 800bea8:	4b02      	ldr	r3, [pc, #8]	@ (800beb4 <malloc+0xc>)
 800beaa:	4601      	mov	r1, r0
 800beac:	6818      	ldr	r0, [r3, #0]
 800beae:	f000 b825 	b.w	800befc <_malloc_r>
 800beb2:	bf00      	nop
 800beb4:	24000044 	.word	0x24000044

0800beb8 <sbrk_aligned>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	4e0f      	ldr	r6, [pc, #60]	@ (800bef8 <sbrk_aligned+0x40>)
 800bebc:	460c      	mov	r4, r1
 800bebe:	6831      	ldr	r1, [r6, #0]
 800bec0:	4605      	mov	r5, r0
 800bec2:	b911      	cbnz	r1, 800beca <sbrk_aligned+0x12>
 800bec4:	f000 fe46 	bl	800cb54 <_sbrk_r>
 800bec8:	6030      	str	r0, [r6, #0]
 800beca:	4621      	mov	r1, r4
 800becc:	4628      	mov	r0, r5
 800bece:	f000 fe41 	bl	800cb54 <_sbrk_r>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	d103      	bne.n	800bede <sbrk_aligned+0x26>
 800bed6:	f04f 34ff 	mov.w	r4, #4294967295
 800beda:	4620      	mov	r0, r4
 800bedc:	bd70      	pop	{r4, r5, r6, pc}
 800bede:	1cc4      	adds	r4, r0, #3
 800bee0:	f024 0403 	bic.w	r4, r4, #3
 800bee4:	42a0      	cmp	r0, r4
 800bee6:	d0f8      	beq.n	800beda <sbrk_aligned+0x22>
 800bee8:	1a21      	subs	r1, r4, r0
 800beea:	4628      	mov	r0, r5
 800beec:	f000 fe32 	bl	800cb54 <_sbrk_r>
 800bef0:	3001      	adds	r0, #1
 800bef2:	d1f2      	bne.n	800beda <sbrk_aligned+0x22>
 800bef4:	e7ef      	b.n	800bed6 <sbrk_aligned+0x1e>
 800bef6:	bf00      	nop
 800bef8:	24005388 	.word	0x24005388

0800befc <_malloc_r>:
 800befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf00:	1ccd      	adds	r5, r1, #3
 800bf02:	f025 0503 	bic.w	r5, r5, #3
 800bf06:	3508      	adds	r5, #8
 800bf08:	2d0c      	cmp	r5, #12
 800bf0a:	bf38      	it	cc
 800bf0c:	250c      	movcc	r5, #12
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	4606      	mov	r6, r0
 800bf12:	db01      	blt.n	800bf18 <_malloc_r+0x1c>
 800bf14:	42a9      	cmp	r1, r5
 800bf16:	d904      	bls.n	800bf22 <_malloc_r+0x26>
 800bf18:	230c      	movs	r3, #12
 800bf1a:	6033      	str	r3, [r6, #0]
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bff8 <_malloc_r+0xfc>
 800bf26:	f000 f869 	bl	800bffc <__malloc_lock>
 800bf2a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf2e:	461c      	mov	r4, r3
 800bf30:	bb44      	cbnz	r4, 800bf84 <_malloc_r+0x88>
 800bf32:	4629      	mov	r1, r5
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7ff ffbf 	bl	800beb8 <sbrk_aligned>
 800bf3a:	1c43      	adds	r3, r0, #1
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	d158      	bne.n	800bff2 <_malloc_r+0xf6>
 800bf40:	f8d8 4000 	ldr.w	r4, [r8]
 800bf44:	4627      	mov	r7, r4
 800bf46:	2f00      	cmp	r7, #0
 800bf48:	d143      	bne.n	800bfd2 <_malloc_r+0xd6>
 800bf4a:	2c00      	cmp	r4, #0
 800bf4c:	d04b      	beq.n	800bfe6 <_malloc_r+0xea>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	4639      	mov	r1, r7
 800bf52:	4630      	mov	r0, r6
 800bf54:	eb04 0903 	add.w	r9, r4, r3
 800bf58:	f000 fdfc 	bl	800cb54 <_sbrk_r>
 800bf5c:	4581      	cmp	r9, r0
 800bf5e:	d142      	bne.n	800bfe6 <_malloc_r+0xea>
 800bf60:	6821      	ldr	r1, [r4, #0]
 800bf62:	1a6d      	subs	r5, r5, r1
 800bf64:	4629      	mov	r1, r5
 800bf66:	4630      	mov	r0, r6
 800bf68:	f7ff ffa6 	bl	800beb8 <sbrk_aligned>
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	d03a      	beq.n	800bfe6 <_malloc_r+0xea>
 800bf70:	6823      	ldr	r3, [r4, #0]
 800bf72:	442b      	add	r3, r5
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	f8d8 3000 	ldr.w	r3, [r8]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	bb62      	cbnz	r2, 800bfd8 <_malloc_r+0xdc>
 800bf7e:	f8c8 7000 	str.w	r7, [r8]
 800bf82:	e00f      	b.n	800bfa4 <_malloc_r+0xa8>
 800bf84:	6822      	ldr	r2, [r4, #0]
 800bf86:	1b52      	subs	r2, r2, r5
 800bf88:	d420      	bmi.n	800bfcc <_malloc_r+0xd0>
 800bf8a:	2a0b      	cmp	r2, #11
 800bf8c:	d917      	bls.n	800bfbe <_malloc_r+0xc2>
 800bf8e:	1961      	adds	r1, r4, r5
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	6025      	str	r5, [r4, #0]
 800bf94:	bf18      	it	ne
 800bf96:	6059      	strne	r1, [r3, #4]
 800bf98:	6863      	ldr	r3, [r4, #4]
 800bf9a:	bf08      	it	eq
 800bf9c:	f8c8 1000 	streq.w	r1, [r8]
 800bfa0:	5162      	str	r2, [r4, r5]
 800bfa2:	604b      	str	r3, [r1, #4]
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f000 f82f 	bl	800c008 <__malloc_unlock>
 800bfaa:	f104 000b 	add.w	r0, r4, #11
 800bfae:	1d23      	adds	r3, r4, #4
 800bfb0:	f020 0007 	bic.w	r0, r0, #7
 800bfb4:	1ac2      	subs	r2, r0, r3
 800bfb6:	bf1c      	itt	ne
 800bfb8:	1a1b      	subne	r3, r3, r0
 800bfba:	50a3      	strne	r3, [r4, r2]
 800bfbc:	e7af      	b.n	800bf1e <_malloc_r+0x22>
 800bfbe:	6862      	ldr	r2, [r4, #4]
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	bf0c      	ite	eq
 800bfc4:	f8c8 2000 	streq.w	r2, [r8]
 800bfc8:	605a      	strne	r2, [r3, #4]
 800bfca:	e7eb      	b.n	800bfa4 <_malloc_r+0xa8>
 800bfcc:	4623      	mov	r3, r4
 800bfce:	6864      	ldr	r4, [r4, #4]
 800bfd0:	e7ae      	b.n	800bf30 <_malloc_r+0x34>
 800bfd2:	463c      	mov	r4, r7
 800bfd4:	687f      	ldr	r7, [r7, #4]
 800bfd6:	e7b6      	b.n	800bf46 <_malloc_r+0x4a>
 800bfd8:	461a      	mov	r2, r3
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	d1fb      	bne.n	800bfd8 <_malloc_r+0xdc>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	6053      	str	r3, [r2, #4]
 800bfe4:	e7de      	b.n	800bfa4 <_malloc_r+0xa8>
 800bfe6:	230c      	movs	r3, #12
 800bfe8:	6033      	str	r3, [r6, #0]
 800bfea:	4630      	mov	r0, r6
 800bfec:	f000 f80c 	bl	800c008 <__malloc_unlock>
 800bff0:	e794      	b.n	800bf1c <_malloc_r+0x20>
 800bff2:	6005      	str	r5, [r0, #0]
 800bff4:	e7d6      	b.n	800bfa4 <_malloc_r+0xa8>
 800bff6:	bf00      	nop
 800bff8:	2400538c 	.word	0x2400538c

0800bffc <__malloc_lock>:
 800bffc:	4801      	ldr	r0, [pc, #4]	@ (800c004 <__malloc_lock+0x8>)
 800bffe:	f7ff b91a 	b.w	800b236 <__retarget_lock_acquire_recursive>
 800c002:	bf00      	nop
 800c004:	24005384 	.word	0x24005384

0800c008 <__malloc_unlock>:
 800c008:	4801      	ldr	r0, [pc, #4]	@ (800c010 <__malloc_unlock+0x8>)
 800c00a:	f7ff b915 	b.w	800b238 <__retarget_lock_release_recursive>
 800c00e:	bf00      	nop
 800c010:	24005384 	.word	0x24005384

0800c014 <_Balloc>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	69c6      	ldr	r6, [r0, #28]
 800c018:	4604      	mov	r4, r0
 800c01a:	460d      	mov	r5, r1
 800c01c:	b976      	cbnz	r6, 800c03c <_Balloc+0x28>
 800c01e:	2010      	movs	r0, #16
 800c020:	f7ff ff42 	bl	800bea8 <malloc>
 800c024:	4602      	mov	r2, r0
 800c026:	61e0      	str	r0, [r4, #28]
 800c028:	b920      	cbnz	r0, 800c034 <_Balloc+0x20>
 800c02a:	4b18      	ldr	r3, [pc, #96]	@ (800c08c <_Balloc+0x78>)
 800c02c:	4818      	ldr	r0, [pc, #96]	@ (800c090 <_Balloc+0x7c>)
 800c02e:	216b      	movs	r1, #107	@ 0x6b
 800c030:	f000 fda0 	bl	800cb74 <__assert_func>
 800c034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c038:	6006      	str	r6, [r0, #0]
 800c03a:	60c6      	str	r6, [r0, #12]
 800c03c:	69e6      	ldr	r6, [r4, #28]
 800c03e:	68f3      	ldr	r3, [r6, #12]
 800c040:	b183      	cbz	r3, 800c064 <_Balloc+0x50>
 800c042:	69e3      	ldr	r3, [r4, #28]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c04a:	b9b8      	cbnz	r0, 800c07c <_Balloc+0x68>
 800c04c:	2101      	movs	r1, #1
 800c04e:	fa01 f605 	lsl.w	r6, r1, r5
 800c052:	1d72      	adds	r2, r6, #5
 800c054:	0092      	lsls	r2, r2, #2
 800c056:	4620      	mov	r0, r4
 800c058:	f000 fdaa 	bl	800cbb0 <_calloc_r>
 800c05c:	b160      	cbz	r0, 800c078 <_Balloc+0x64>
 800c05e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c062:	e00e      	b.n	800c082 <_Balloc+0x6e>
 800c064:	2221      	movs	r2, #33	@ 0x21
 800c066:	2104      	movs	r1, #4
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fda1 	bl	800cbb0 <_calloc_r>
 800c06e:	69e3      	ldr	r3, [r4, #28]
 800c070:	60f0      	str	r0, [r6, #12]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e4      	bne.n	800c042 <_Balloc+0x2e>
 800c078:	2000      	movs	r0, #0
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	6802      	ldr	r2, [r0, #0]
 800c07e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c082:	2300      	movs	r3, #0
 800c084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c088:	e7f7      	b.n	800c07a <_Balloc+0x66>
 800c08a:	bf00      	nop
 800c08c:	0800eb51 	.word	0x0800eb51
 800c090:	0800ebd1 	.word	0x0800ebd1

0800c094 <_Bfree>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	69c6      	ldr	r6, [r0, #28]
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	b976      	cbnz	r6, 800c0bc <_Bfree+0x28>
 800c09e:	2010      	movs	r0, #16
 800c0a0:	f7ff ff02 	bl	800bea8 <malloc>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	61e8      	str	r0, [r5, #28]
 800c0a8:	b920      	cbnz	r0, 800c0b4 <_Bfree+0x20>
 800c0aa:	4b09      	ldr	r3, [pc, #36]	@ (800c0d0 <_Bfree+0x3c>)
 800c0ac:	4809      	ldr	r0, [pc, #36]	@ (800c0d4 <_Bfree+0x40>)
 800c0ae:	218f      	movs	r1, #143	@ 0x8f
 800c0b0:	f000 fd60 	bl	800cb74 <__assert_func>
 800c0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b8:	6006      	str	r6, [r0, #0]
 800c0ba:	60c6      	str	r6, [r0, #12]
 800c0bc:	b13c      	cbz	r4, 800c0ce <_Bfree+0x3a>
 800c0be:	69eb      	ldr	r3, [r5, #28]
 800c0c0:	6862      	ldr	r2, [r4, #4]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0c8:	6021      	str	r1, [r4, #0]
 800c0ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
 800c0d0:	0800eb51 	.word	0x0800eb51
 800c0d4:	0800ebd1 	.word	0x0800ebd1

0800c0d8 <__multadd>:
 800c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	690d      	ldr	r5, [r1, #16]
 800c0de:	4607      	mov	r7, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	461e      	mov	r6, r3
 800c0e4:	f101 0c14 	add.w	ip, r1, #20
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ee:	b299      	uxth	r1, r3
 800c0f0:	fb02 6101 	mla	r1, r2, r1, r6
 800c0f4:	0c1e      	lsrs	r6, r3, #16
 800c0f6:	0c0b      	lsrs	r3, r1, #16
 800c0f8:	fb02 3306 	mla	r3, r2, r6, r3
 800c0fc:	b289      	uxth	r1, r1
 800c0fe:	3001      	adds	r0, #1
 800c100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c104:	4285      	cmp	r5, r0
 800c106:	f84c 1b04 	str.w	r1, [ip], #4
 800c10a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c10e:	dcec      	bgt.n	800c0ea <__multadd+0x12>
 800c110:	b30e      	cbz	r6, 800c156 <__multadd+0x7e>
 800c112:	68a3      	ldr	r3, [r4, #8]
 800c114:	42ab      	cmp	r3, r5
 800c116:	dc19      	bgt.n	800c14c <__multadd+0x74>
 800c118:	6861      	ldr	r1, [r4, #4]
 800c11a:	4638      	mov	r0, r7
 800c11c:	3101      	adds	r1, #1
 800c11e:	f7ff ff79 	bl	800c014 <_Balloc>
 800c122:	4680      	mov	r8, r0
 800c124:	b928      	cbnz	r0, 800c132 <__multadd+0x5a>
 800c126:	4602      	mov	r2, r0
 800c128:	4b0c      	ldr	r3, [pc, #48]	@ (800c15c <__multadd+0x84>)
 800c12a:	480d      	ldr	r0, [pc, #52]	@ (800c160 <__multadd+0x88>)
 800c12c:	21ba      	movs	r1, #186	@ 0xba
 800c12e:	f000 fd21 	bl	800cb74 <__assert_func>
 800c132:	6922      	ldr	r2, [r4, #16]
 800c134:	3202      	adds	r2, #2
 800c136:	f104 010c 	add.w	r1, r4, #12
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	300c      	adds	r0, #12
 800c13e:	f7ff f87c 	bl	800b23a <memcpy>
 800c142:	4621      	mov	r1, r4
 800c144:	4638      	mov	r0, r7
 800c146:	f7ff ffa5 	bl	800c094 <_Bfree>
 800c14a:	4644      	mov	r4, r8
 800c14c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c150:	3501      	adds	r5, #1
 800c152:	615e      	str	r6, [r3, #20]
 800c154:	6125      	str	r5, [r4, #16]
 800c156:	4620      	mov	r0, r4
 800c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15c:	0800ebc0 	.word	0x0800ebc0
 800c160:	0800ebd1 	.word	0x0800ebd1

0800c164 <__hi0bits>:
 800c164:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c168:	4603      	mov	r3, r0
 800c16a:	bf36      	itet	cc
 800c16c:	0403      	lslcc	r3, r0, #16
 800c16e:	2000      	movcs	r0, #0
 800c170:	2010      	movcc	r0, #16
 800c172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c176:	bf3c      	itt	cc
 800c178:	021b      	lslcc	r3, r3, #8
 800c17a:	3008      	addcc	r0, #8
 800c17c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c180:	bf3c      	itt	cc
 800c182:	011b      	lslcc	r3, r3, #4
 800c184:	3004      	addcc	r0, #4
 800c186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c18a:	bf3c      	itt	cc
 800c18c:	009b      	lslcc	r3, r3, #2
 800c18e:	3002      	addcc	r0, #2
 800c190:	2b00      	cmp	r3, #0
 800c192:	db05      	blt.n	800c1a0 <__hi0bits+0x3c>
 800c194:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c198:	f100 0001 	add.w	r0, r0, #1
 800c19c:	bf08      	it	eq
 800c19e:	2020      	moveq	r0, #32
 800c1a0:	4770      	bx	lr

0800c1a2 <__lo0bits>:
 800c1a2:	6803      	ldr	r3, [r0, #0]
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	f013 0007 	ands.w	r0, r3, #7
 800c1aa:	d00b      	beq.n	800c1c4 <__lo0bits+0x22>
 800c1ac:	07d9      	lsls	r1, r3, #31
 800c1ae:	d421      	bmi.n	800c1f4 <__lo0bits+0x52>
 800c1b0:	0798      	lsls	r0, r3, #30
 800c1b2:	bf49      	itett	mi
 800c1b4:	085b      	lsrmi	r3, r3, #1
 800c1b6:	089b      	lsrpl	r3, r3, #2
 800c1b8:	2001      	movmi	r0, #1
 800c1ba:	6013      	strmi	r3, [r2, #0]
 800c1bc:	bf5c      	itt	pl
 800c1be:	6013      	strpl	r3, [r2, #0]
 800c1c0:	2002      	movpl	r0, #2
 800c1c2:	4770      	bx	lr
 800c1c4:	b299      	uxth	r1, r3
 800c1c6:	b909      	cbnz	r1, 800c1cc <__lo0bits+0x2a>
 800c1c8:	0c1b      	lsrs	r3, r3, #16
 800c1ca:	2010      	movs	r0, #16
 800c1cc:	b2d9      	uxtb	r1, r3
 800c1ce:	b909      	cbnz	r1, 800c1d4 <__lo0bits+0x32>
 800c1d0:	3008      	adds	r0, #8
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	0719      	lsls	r1, r3, #28
 800c1d6:	bf04      	itt	eq
 800c1d8:	091b      	lsreq	r3, r3, #4
 800c1da:	3004      	addeq	r0, #4
 800c1dc:	0799      	lsls	r1, r3, #30
 800c1de:	bf04      	itt	eq
 800c1e0:	089b      	lsreq	r3, r3, #2
 800c1e2:	3002      	addeq	r0, #2
 800c1e4:	07d9      	lsls	r1, r3, #31
 800c1e6:	d403      	bmi.n	800c1f0 <__lo0bits+0x4e>
 800c1e8:	085b      	lsrs	r3, r3, #1
 800c1ea:	f100 0001 	add.w	r0, r0, #1
 800c1ee:	d003      	beq.n	800c1f8 <__lo0bits+0x56>
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	4770      	bx	lr
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	4770      	bx	lr
 800c1f8:	2020      	movs	r0, #32
 800c1fa:	4770      	bx	lr

0800c1fc <__i2b>:
 800c1fc:	b510      	push	{r4, lr}
 800c1fe:	460c      	mov	r4, r1
 800c200:	2101      	movs	r1, #1
 800c202:	f7ff ff07 	bl	800c014 <_Balloc>
 800c206:	4602      	mov	r2, r0
 800c208:	b928      	cbnz	r0, 800c216 <__i2b+0x1a>
 800c20a:	4b05      	ldr	r3, [pc, #20]	@ (800c220 <__i2b+0x24>)
 800c20c:	4805      	ldr	r0, [pc, #20]	@ (800c224 <__i2b+0x28>)
 800c20e:	f240 1145 	movw	r1, #325	@ 0x145
 800c212:	f000 fcaf 	bl	800cb74 <__assert_func>
 800c216:	2301      	movs	r3, #1
 800c218:	6144      	str	r4, [r0, #20]
 800c21a:	6103      	str	r3, [r0, #16]
 800c21c:	bd10      	pop	{r4, pc}
 800c21e:	bf00      	nop
 800c220:	0800ebc0 	.word	0x0800ebc0
 800c224:	0800ebd1 	.word	0x0800ebd1

0800c228 <__multiply>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	4614      	mov	r4, r2
 800c22e:	690a      	ldr	r2, [r1, #16]
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	429a      	cmp	r2, r3
 800c234:	bfa8      	it	ge
 800c236:	4623      	movge	r3, r4
 800c238:	460f      	mov	r7, r1
 800c23a:	bfa4      	itt	ge
 800c23c:	460c      	movge	r4, r1
 800c23e:	461f      	movge	r7, r3
 800c240:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c244:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c248:	68a3      	ldr	r3, [r4, #8]
 800c24a:	6861      	ldr	r1, [r4, #4]
 800c24c:	eb0a 0609 	add.w	r6, sl, r9
 800c250:	42b3      	cmp	r3, r6
 800c252:	b085      	sub	sp, #20
 800c254:	bfb8      	it	lt
 800c256:	3101      	addlt	r1, #1
 800c258:	f7ff fedc 	bl	800c014 <_Balloc>
 800c25c:	b930      	cbnz	r0, 800c26c <__multiply+0x44>
 800c25e:	4602      	mov	r2, r0
 800c260:	4b44      	ldr	r3, [pc, #272]	@ (800c374 <__multiply+0x14c>)
 800c262:	4845      	ldr	r0, [pc, #276]	@ (800c378 <__multiply+0x150>)
 800c264:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c268:	f000 fc84 	bl	800cb74 <__assert_func>
 800c26c:	f100 0514 	add.w	r5, r0, #20
 800c270:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c274:	462b      	mov	r3, r5
 800c276:	2200      	movs	r2, #0
 800c278:	4543      	cmp	r3, r8
 800c27a:	d321      	bcc.n	800c2c0 <__multiply+0x98>
 800c27c:	f107 0114 	add.w	r1, r7, #20
 800c280:	f104 0214 	add.w	r2, r4, #20
 800c284:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c288:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c28c:	9302      	str	r3, [sp, #8]
 800c28e:	1b13      	subs	r3, r2, r4
 800c290:	3b15      	subs	r3, #21
 800c292:	f023 0303 	bic.w	r3, r3, #3
 800c296:	3304      	adds	r3, #4
 800c298:	f104 0715 	add.w	r7, r4, #21
 800c29c:	42ba      	cmp	r2, r7
 800c29e:	bf38      	it	cc
 800c2a0:	2304      	movcc	r3, #4
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	9b02      	ldr	r3, [sp, #8]
 800c2a6:	9103      	str	r1, [sp, #12]
 800c2a8:	428b      	cmp	r3, r1
 800c2aa:	d80c      	bhi.n	800c2c6 <__multiply+0x9e>
 800c2ac:	2e00      	cmp	r6, #0
 800c2ae:	dd03      	ble.n	800c2b8 <__multiply+0x90>
 800c2b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d05b      	beq.n	800c370 <__multiply+0x148>
 800c2b8:	6106      	str	r6, [r0, #16]
 800c2ba:	b005      	add	sp, #20
 800c2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c0:	f843 2b04 	str.w	r2, [r3], #4
 800c2c4:	e7d8      	b.n	800c278 <__multiply+0x50>
 800c2c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2ca:	f1ba 0f00 	cmp.w	sl, #0
 800c2ce:	d024      	beq.n	800c31a <__multiply+0xf2>
 800c2d0:	f104 0e14 	add.w	lr, r4, #20
 800c2d4:	46a9      	mov	r9, r5
 800c2d6:	f04f 0c00 	mov.w	ip, #0
 800c2da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2de:	f8d9 3000 	ldr.w	r3, [r9]
 800c2e2:	fa1f fb87 	uxth.w	fp, r7
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c2ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c2f0:	f8d9 7000 	ldr.w	r7, [r9]
 800c2f4:	4463      	add	r3, ip
 800c2f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800c2fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c302:	b29b      	uxth	r3, r3
 800c304:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c308:	4572      	cmp	r2, lr
 800c30a:	f849 3b04 	str.w	r3, [r9], #4
 800c30e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c312:	d8e2      	bhi.n	800c2da <__multiply+0xb2>
 800c314:	9b01      	ldr	r3, [sp, #4]
 800c316:	f845 c003 	str.w	ip, [r5, r3]
 800c31a:	9b03      	ldr	r3, [sp, #12]
 800c31c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c320:	3104      	adds	r1, #4
 800c322:	f1b9 0f00 	cmp.w	r9, #0
 800c326:	d021      	beq.n	800c36c <__multiply+0x144>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	f104 0c14 	add.w	ip, r4, #20
 800c32e:	46ae      	mov	lr, r5
 800c330:	f04f 0a00 	mov.w	sl, #0
 800c334:	f8bc b000 	ldrh.w	fp, [ip]
 800c338:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c33c:	fb09 770b 	mla	r7, r9, fp, r7
 800c340:	4457      	add	r7, sl
 800c342:	b29b      	uxth	r3, r3
 800c344:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c348:	f84e 3b04 	str.w	r3, [lr], #4
 800c34c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c350:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c354:	f8be 3000 	ldrh.w	r3, [lr]
 800c358:	fb09 330a 	mla	r3, r9, sl, r3
 800c35c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c360:	4562      	cmp	r2, ip
 800c362:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c366:	d8e5      	bhi.n	800c334 <__multiply+0x10c>
 800c368:	9f01      	ldr	r7, [sp, #4]
 800c36a:	51eb      	str	r3, [r5, r7]
 800c36c:	3504      	adds	r5, #4
 800c36e:	e799      	b.n	800c2a4 <__multiply+0x7c>
 800c370:	3e01      	subs	r6, #1
 800c372:	e79b      	b.n	800c2ac <__multiply+0x84>
 800c374:	0800ebc0 	.word	0x0800ebc0
 800c378:	0800ebd1 	.word	0x0800ebd1

0800c37c <__pow5mult>:
 800c37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c380:	4615      	mov	r5, r2
 800c382:	f012 0203 	ands.w	r2, r2, #3
 800c386:	4607      	mov	r7, r0
 800c388:	460e      	mov	r6, r1
 800c38a:	d007      	beq.n	800c39c <__pow5mult+0x20>
 800c38c:	4c25      	ldr	r4, [pc, #148]	@ (800c424 <__pow5mult+0xa8>)
 800c38e:	3a01      	subs	r2, #1
 800c390:	2300      	movs	r3, #0
 800c392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c396:	f7ff fe9f 	bl	800c0d8 <__multadd>
 800c39a:	4606      	mov	r6, r0
 800c39c:	10ad      	asrs	r5, r5, #2
 800c39e:	d03d      	beq.n	800c41c <__pow5mult+0xa0>
 800c3a0:	69fc      	ldr	r4, [r7, #28]
 800c3a2:	b97c      	cbnz	r4, 800c3c4 <__pow5mult+0x48>
 800c3a4:	2010      	movs	r0, #16
 800c3a6:	f7ff fd7f 	bl	800bea8 <malloc>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	61f8      	str	r0, [r7, #28]
 800c3ae:	b928      	cbnz	r0, 800c3bc <__pow5mult+0x40>
 800c3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c428 <__pow5mult+0xac>)
 800c3b2:	481e      	ldr	r0, [pc, #120]	@ (800c42c <__pow5mult+0xb0>)
 800c3b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3b8:	f000 fbdc 	bl	800cb74 <__assert_func>
 800c3bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3c0:	6004      	str	r4, [r0, #0]
 800c3c2:	60c4      	str	r4, [r0, #12]
 800c3c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3cc:	b94c      	cbnz	r4, 800c3e2 <__pow5mult+0x66>
 800c3ce:	f240 2171 	movw	r1, #625	@ 0x271
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	f7ff ff12 	bl	800c1fc <__i2b>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3de:	4604      	mov	r4, r0
 800c3e0:	6003      	str	r3, [r0, #0]
 800c3e2:	f04f 0900 	mov.w	r9, #0
 800c3e6:	07eb      	lsls	r3, r5, #31
 800c3e8:	d50a      	bpl.n	800c400 <__pow5mult+0x84>
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	f7ff ff1a 	bl	800c228 <__multiply>
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4680      	mov	r8, r0
 800c3f8:	4638      	mov	r0, r7
 800c3fa:	f7ff fe4b 	bl	800c094 <_Bfree>
 800c3fe:	4646      	mov	r6, r8
 800c400:	106d      	asrs	r5, r5, #1
 800c402:	d00b      	beq.n	800c41c <__pow5mult+0xa0>
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	b938      	cbnz	r0, 800c418 <__pow5mult+0x9c>
 800c408:	4622      	mov	r2, r4
 800c40a:	4621      	mov	r1, r4
 800c40c:	4638      	mov	r0, r7
 800c40e:	f7ff ff0b 	bl	800c228 <__multiply>
 800c412:	6020      	str	r0, [r4, #0]
 800c414:	f8c0 9000 	str.w	r9, [r0]
 800c418:	4604      	mov	r4, r0
 800c41a:	e7e4      	b.n	800c3e6 <__pow5mult+0x6a>
 800c41c:	4630      	mov	r0, r6
 800c41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c422:	bf00      	nop
 800c424:	0800ec2c 	.word	0x0800ec2c
 800c428:	0800eb51 	.word	0x0800eb51
 800c42c:	0800ebd1 	.word	0x0800ebd1

0800c430 <__lshift>:
 800c430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c434:	460c      	mov	r4, r1
 800c436:	6849      	ldr	r1, [r1, #4]
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c43e:	68a3      	ldr	r3, [r4, #8]
 800c440:	4607      	mov	r7, r0
 800c442:	4691      	mov	r9, r2
 800c444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c448:	f108 0601 	add.w	r6, r8, #1
 800c44c:	42b3      	cmp	r3, r6
 800c44e:	db0b      	blt.n	800c468 <__lshift+0x38>
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff fddf 	bl	800c014 <_Balloc>
 800c456:	4605      	mov	r5, r0
 800c458:	b948      	cbnz	r0, 800c46e <__lshift+0x3e>
 800c45a:	4602      	mov	r2, r0
 800c45c:	4b28      	ldr	r3, [pc, #160]	@ (800c500 <__lshift+0xd0>)
 800c45e:	4829      	ldr	r0, [pc, #164]	@ (800c504 <__lshift+0xd4>)
 800c460:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c464:	f000 fb86 	bl	800cb74 <__assert_func>
 800c468:	3101      	adds	r1, #1
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	e7ee      	b.n	800c44c <__lshift+0x1c>
 800c46e:	2300      	movs	r3, #0
 800c470:	f100 0114 	add.w	r1, r0, #20
 800c474:	f100 0210 	add.w	r2, r0, #16
 800c478:	4618      	mov	r0, r3
 800c47a:	4553      	cmp	r3, sl
 800c47c:	db33      	blt.n	800c4e6 <__lshift+0xb6>
 800c47e:	6920      	ldr	r0, [r4, #16]
 800c480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c484:	f104 0314 	add.w	r3, r4, #20
 800c488:	f019 091f 	ands.w	r9, r9, #31
 800c48c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c494:	d02b      	beq.n	800c4ee <__lshift+0xbe>
 800c496:	f1c9 0e20 	rsb	lr, r9, #32
 800c49a:	468a      	mov	sl, r1
 800c49c:	2200      	movs	r2, #0
 800c49e:	6818      	ldr	r0, [r3, #0]
 800c4a0:	fa00 f009 	lsl.w	r0, r0, r9
 800c4a4:	4310      	orrs	r0, r2
 800c4a6:	f84a 0b04 	str.w	r0, [sl], #4
 800c4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ae:	459c      	cmp	ip, r3
 800c4b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4b4:	d8f3      	bhi.n	800c49e <__lshift+0x6e>
 800c4b6:	ebac 0304 	sub.w	r3, ip, r4
 800c4ba:	3b15      	subs	r3, #21
 800c4bc:	f023 0303 	bic.w	r3, r3, #3
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	f104 0015 	add.w	r0, r4, #21
 800c4c6:	4584      	cmp	ip, r0
 800c4c8:	bf38      	it	cc
 800c4ca:	2304      	movcc	r3, #4
 800c4cc:	50ca      	str	r2, [r1, r3]
 800c4ce:	b10a      	cbz	r2, 800c4d4 <__lshift+0xa4>
 800c4d0:	f108 0602 	add.w	r6, r8, #2
 800c4d4:	3e01      	subs	r6, #1
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	612e      	str	r6, [r5, #16]
 800c4da:	4621      	mov	r1, r4
 800c4dc:	f7ff fdda 	bl	800c094 <_Bfree>
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	e7c5      	b.n	800c47a <__lshift+0x4a>
 800c4ee:	3904      	subs	r1, #4
 800c4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4f8:	459c      	cmp	ip, r3
 800c4fa:	d8f9      	bhi.n	800c4f0 <__lshift+0xc0>
 800c4fc:	e7ea      	b.n	800c4d4 <__lshift+0xa4>
 800c4fe:	bf00      	nop
 800c500:	0800ebc0 	.word	0x0800ebc0
 800c504:	0800ebd1 	.word	0x0800ebd1

0800c508 <__mcmp>:
 800c508:	690a      	ldr	r2, [r1, #16]
 800c50a:	4603      	mov	r3, r0
 800c50c:	6900      	ldr	r0, [r0, #16]
 800c50e:	1a80      	subs	r0, r0, r2
 800c510:	b530      	push	{r4, r5, lr}
 800c512:	d10e      	bne.n	800c532 <__mcmp+0x2a>
 800c514:	3314      	adds	r3, #20
 800c516:	3114      	adds	r1, #20
 800c518:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c51c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c520:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c524:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c528:	4295      	cmp	r5, r2
 800c52a:	d003      	beq.n	800c534 <__mcmp+0x2c>
 800c52c:	d205      	bcs.n	800c53a <__mcmp+0x32>
 800c52e:	f04f 30ff 	mov.w	r0, #4294967295
 800c532:	bd30      	pop	{r4, r5, pc}
 800c534:	42a3      	cmp	r3, r4
 800c536:	d3f3      	bcc.n	800c520 <__mcmp+0x18>
 800c538:	e7fb      	b.n	800c532 <__mcmp+0x2a>
 800c53a:	2001      	movs	r0, #1
 800c53c:	e7f9      	b.n	800c532 <__mcmp+0x2a>
	...

0800c540 <__mdiff>:
 800c540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	4689      	mov	r9, r1
 800c546:	4606      	mov	r6, r0
 800c548:	4611      	mov	r1, r2
 800c54a:	4648      	mov	r0, r9
 800c54c:	4614      	mov	r4, r2
 800c54e:	f7ff ffdb 	bl	800c508 <__mcmp>
 800c552:	1e05      	subs	r5, r0, #0
 800c554:	d112      	bne.n	800c57c <__mdiff+0x3c>
 800c556:	4629      	mov	r1, r5
 800c558:	4630      	mov	r0, r6
 800c55a:	f7ff fd5b 	bl	800c014 <_Balloc>
 800c55e:	4602      	mov	r2, r0
 800c560:	b928      	cbnz	r0, 800c56e <__mdiff+0x2e>
 800c562:	4b3f      	ldr	r3, [pc, #252]	@ (800c660 <__mdiff+0x120>)
 800c564:	f240 2137 	movw	r1, #567	@ 0x237
 800c568:	483e      	ldr	r0, [pc, #248]	@ (800c664 <__mdiff+0x124>)
 800c56a:	f000 fb03 	bl	800cb74 <__assert_func>
 800c56e:	2301      	movs	r3, #1
 800c570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c574:	4610      	mov	r0, r2
 800c576:	b003      	add	sp, #12
 800c578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57c:	bfbc      	itt	lt
 800c57e:	464b      	movlt	r3, r9
 800c580:	46a1      	movlt	r9, r4
 800c582:	4630      	mov	r0, r6
 800c584:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c588:	bfba      	itte	lt
 800c58a:	461c      	movlt	r4, r3
 800c58c:	2501      	movlt	r5, #1
 800c58e:	2500      	movge	r5, #0
 800c590:	f7ff fd40 	bl	800c014 <_Balloc>
 800c594:	4602      	mov	r2, r0
 800c596:	b918      	cbnz	r0, 800c5a0 <__mdiff+0x60>
 800c598:	4b31      	ldr	r3, [pc, #196]	@ (800c660 <__mdiff+0x120>)
 800c59a:	f240 2145 	movw	r1, #581	@ 0x245
 800c59e:	e7e3      	b.n	800c568 <__mdiff+0x28>
 800c5a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5a4:	6926      	ldr	r6, [r4, #16]
 800c5a6:	60c5      	str	r5, [r0, #12]
 800c5a8:	f109 0310 	add.w	r3, r9, #16
 800c5ac:	f109 0514 	add.w	r5, r9, #20
 800c5b0:	f104 0e14 	add.w	lr, r4, #20
 800c5b4:	f100 0b14 	add.w	fp, r0, #20
 800c5b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	46d9      	mov	r9, fp
 800c5c4:	f04f 0c00 	mov.w	ip, #0
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	fa1f f38a 	uxth.w	r3, sl
 800c5d8:	4619      	mov	r1, r3
 800c5da:	b283      	uxth	r3, r0
 800c5dc:	1acb      	subs	r3, r1, r3
 800c5de:	0c00      	lsrs	r0, r0, #16
 800c5e0:	4463      	add	r3, ip
 800c5e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c5e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5f0:	4576      	cmp	r6, lr
 800c5f2:	f849 3b04 	str.w	r3, [r9], #4
 800c5f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5fa:	d8e5      	bhi.n	800c5c8 <__mdiff+0x88>
 800c5fc:	1b33      	subs	r3, r6, r4
 800c5fe:	3b15      	subs	r3, #21
 800c600:	f023 0303 	bic.w	r3, r3, #3
 800c604:	3415      	adds	r4, #21
 800c606:	3304      	adds	r3, #4
 800c608:	42a6      	cmp	r6, r4
 800c60a:	bf38      	it	cc
 800c60c:	2304      	movcc	r3, #4
 800c60e:	441d      	add	r5, r3
 800c610:	445b      	add	r3, fp
 800c612:	461e      	mov	r6, r3
 800c614:	462c      	mov	r4, r5
 800c616:	4544      	cmp	r4, r8
 800c618:	d30e      	bcc.n	800c638 <__mdiff+0xf8>
 800c61a:	f108 0103 	add.w	r1, r8, #3
 800c61e:	1b49      	subs	r1, r1, r5
 800c620:	f021 0103 	bic.w	r1, r1, #3
 800c624:	3d03      	subs	r5, #3
 800c626:	45a8      	cmp	r8, r5
 800c628:	bf38      	it	cc
 800c62a:	2100      	movcc	r1, #0
 800c62c:	440b      	add	r3, r1
 800c62e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c632:	b191      	cbz	r1, 800c65a <__mdiff+0x11a>
 800c634:	6117      	str	r7, [r2, #16]
 800c636:	e79d      	b.n	800c574 <__mdiff+0x34>
 800c638:	f854 1b04 	ldr.w	r1, [r4], #4
 800c63c:	46e6      	mov	lr, ip
 800c63e:	0c08      	lsrs	r0, r1, #16
 800c640:	fa1c fc81 	uxtah	ip, ip, r1
 800c644:	4471      	add	r1, lr
 800c646:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c64a:	b289      	uxth	r1, r1
 800c64c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c650:	f846 1b04 	str.w	r1, [r6], #4
 800c654:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c658:	e7dd      	b.n	800c616 <__mdiff+0xd6>
 800c65a:	3f01      	subs	r7, #1
 800c65c:	e7e7      	b.n	800c62e <__mdiff+0xee>
 800c65e:	bf00      	nop
 800c660:	0800ebc0 	.word	0x0800ebc0
 800c664:	0800ebd1 	.word	0x0800ebd1

0800c668 <__d2b>:
 800c668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c66c:	460f      	mov	r7, r1
 800c66e:	2101      	movs	r1, #1
 800c670:	ec59 8b10 	vmov	r8, r9, d0
 800c674:	4616      	mov	r6, r2
 800c676:	f7ff fccd 	bl	800c014 <_Balloc>
 800c67a:	4604      	mov	r4, r0
 800c67c:	b930      	cbnz	r0, 800c68c <__d2b+0x24>
 800c67e:	4602      	mov	r2, r0
 800c680:	4b23      	ldr	r3, [pc, #140]	@ (800c710 <__d2b+0xa8>)
 800c682:	4824      	ldr	r0, [pc, #144]	@ (800c714 <__d2b+0xac>)
 800c684:	f240 310f 	movw	r1, #783	@ 0x30f
 800c688:	f000 fa74 	bl	800cb74 <__assert_func>
 800c68c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c694:	b10d      	cbz	r5, 800c69a <__d2b+0x32>
 800c696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c69a:	9301      	str	r3, [sp, #4]
 800c69c:	f1b8 0300 	subs.w	r3, r8, #0
 800c6a0:	d023      	beq.n	800c6ea <__d2b+0x82>
 800c6a2:	4668      	mov	r0, sp
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	f7ff fd7c 	bl	800c1a2 <__lo0bits>
 800c6aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6ae:	b1d0      	cbz	r0, 800c6e6 <__d2b+0x7e>
 800c6b0:	f1c0 0320 	rsb	r3, r0, #32
 800c6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b8:	430b      	orrs	r3, r1
 800c6ba:	40c2      	lsrs	r2, r0
 800c6bc:	6163      	str	r3, [r4, #20]
 800c6be:	9201      	str	r2, [sp, #4]
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	61a3      	str	r3, [r4, #24]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bf0c      	ite	eq
 800c6c8:	2201      	moveq	r2, #1
 800c6ca:	2202      	movne	r2, #2
 800c6cc:	6122      	str	r2, [r4, #16]
 800c6ce:	b1a5      	cbz	r5, 800c6fa <__d2b+0x92>
 800c6d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6d4:	4405      	add	r5, r0
 800c6d6:	603d      	str	r5, [r7, #0]
 800c6d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6dc:	6030      	str	r0, [r6, #0]
 800c6de:	4620      	mov	r0, r4
 800c6e0:	b003      	add	sp, #12
 800c6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6e6:	6161      	str	r1, [r4, #20]
 800c6e8:	e7ea      	b.n	800c6c0 <__d2b+0x58>
 800c6ea:	a801      	add	r0, sp, #4
 800c6ec:	f7ff fd59 	bl	800c1a2 <__lo0bits>
 800c6f0:	9b01      	ldr	r3, [sp, #4]
 800c6f2:	6163      	str	r3, [r4, #20]
 800c6f4:	3020      	adds	r0, #32
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	e7e8      	b.n	800c6cc <__d2b+0x64>
 800c6fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c702:	6038      	str	r0, [r7, #0]
 800c704:	6918      	ldr	r0, [r3, #16]
 800c706:	f7ff fd2d 	bl	800c164 <__hi0bits>
 800c70a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c70e:	e7e5      	b.n	800c6dc <__d2b+0x74>
 800c710:	0800ebc0 	.word	0x0800ebc0
 800c714:	0800ebd1 	.word	0x0800ebd1

0800c718 <__ssputs_r>:
 800c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	688e      	ldr	r6, [r1, #8]
 800c71e:	461f      	mov	r7, r3
 800c720:	42be      	cmp	r6, r7
 800c722:	680b      	ldr	r3, [r1, #0]
 800c724:	4682      	mov	sl, r0
 800c726:	460c      	mov	r4, r1
 800c728:	4690      	mov	r8, r2
 800c72a:	d82d      	bhi.n	800c788 <__ssputs_r+0x70>
 800c72c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c730:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c734:	d026      	beq.n	800c784 <__ssputs_r+0x6c>
 800c736:	6965      	ldr	r5, [r4, #20]
 800c738:	6909      	ldr	r1, [r1, #16]
 800c73a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c73e:	eba3 0901 	sub.w	r9, r3, r1
 800c742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c746:	1c7b      	adds	r3, r7, #1
 800c748:	444b      	add	r3, r9
 800c74a:	106d      	asrs	r5, r5, #1
 800c74c:	429d      	cmp	r5, r3
 800c74e:	bf38      	it	cc
 800c750:	461d      	movcc	r5, r3
 800c752:	0553      	lsls	r3, r2, #21
 800c754:	d527      	bpl.n	800c7a6 <__ssputs_r+0x8e>
 800c756:	4629      	mov	r1, r5
 800c758:	f7ff fbd0 	bl	800befc <_malloc_r>
 800c75c:	4606      	mov	r6, r0
 800c75e:	b360      	cbz	r0, 800c7ba <__ssputs_r+0xa2>
 800c760:	6921      	ldr	r1, [r4, #16]
 800c762:	464a      	mov	r2, r9
 800c764:	f7fe fd69 	bl	800b23a <memcpy>
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c772:	81a3      	strh	r3, [r4, #12]
 800c774:	6126      	str	r6, [r4, #16]
 800c776:	6165      	str	r5, [r4, #20]
 800c778:	444e      	add	r6, r9
 800c77a:	eba5 0509 	sub.w	r5, r5, r9
 800c77e:	6026      	str	r6, [r4, #0]
 800c780:	60a5      	str	r5, [r4, #8]
 800c782:	463e      	mov	r6, r7
 800c784:	42be      	cmp	r6, r7
 800c786:	d900      	bls.n	800c78a <__ssputs_r+0x72>
 800c788:	463e      	mov	r6, r7
 800c78a:	6820      	ldr	r0, [r4, #0]
 800c78c:	4632      	mov	r2, r6
 800c78e:	4641      	mov	r1, r8
 800c790:	f000 f9c6 	bl	800cb20 <memmove>
 800c794:	68a3      	ldr	r3, [r4, #8]
 800c796:	1b9b      	subs	r3, r3, r6
 800c798:	60a3      	str	r3, [r4, #8]
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	4433      	add	r3, r6
 800c79e:	6023      	str	r3, [r4, #0]
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	f000 fa28 	bl	800cbfc <_realloc_r>
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d1e0      	bne.n	800c774 <__ssputs_r+0x5c>
 800c7b2:	6921      	ldr	r1, [r4, #16]
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	f7ff fb2d 	bl	800be14 <_free_r>
 800c7ba:	230c      	movs	r3, #12
 800c7bc:	f8ca 3000 	str.w	r3, [sl]
 800c7c0:	89a3      	ldrh	r3, [r4, #12]
 800c7c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7cc:	e7e9      	b.n	800c7a2 <__ssputs_r+0x8a>
	...

0800c7d0 <_svfiprintf_r>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	4698      	mov	r8, r3
 800c7d6:	898b      	ldrh	r3, [r1, #12]
 800c7d8:	061b      	lsls	r3, r3, #24
 800c7da:	b09d      	sub	sp, #116	@ 0x74
 800c7dc:	4607      	mov	r7, r0
 800c7de:	460d      	mov	r5, r1
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	d510      	bpl.n	800c806 <_svfiprintf_r+0x36>
 800c7e4:	690b      	ldr	r3, [r1, #16]
 800c7e6:	b973      	cbnz	r3, 800c806 <_svfiprintf_r+0x36>
 800c7e8:	2140      	movs	r1, #64	@ 0x40
 800c7ea:	f7ff fb87 	bl	800befc <_malloc_r>
 800c7ee:	6028      	str	r0, [r5, #0]
 800c7f0:	6128      	str	r0, [r5, #16]
 800c7f2:	b930      	cbnz	r0, 800c802 <_svfiprintf_r+0x32>
 800c7f4:	230c      	movs	r3, #12
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	b01d      	add	sp, #116	@ 0x74
 800c7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c802:	2340      	movs	r3, #64	@ 0x40
 800c804:	616b      	str	r3, [r5, #20]
 800c806:	2300      	movs	r3, #0
 800c808:	9309      	str	r3, [sp, #36]	@ 0x24
 800c80a:	2320      	movs	r3, #32
 800c80c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c810:	f8cd 800c 	str.w	r8, [sp, #12]
 800c814:	2330      	movs	r3, #48	@ 0x30
 800c816:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c9b4 <_svfiprintf_r+0x1e4>
 800c81a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c81e:	f04f 0901 	mov.w	r9, #1
 800c822:	4623      	mov	r3, r4
 800c824:	469a      	mov	sl, r3
 800c826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c82a:	b10a      	cbz	r2, 800c830 <_svfiprintf_r+0x60>
 800c82c:	2a25      	cmp	r2, #37	@ 0x25
 800c82e:	d1f9      	bne.n	800c824 <_svfiprintf_r+0x54>
 800c830:	ebba 0b04 	subs.w	fp, sl, r4
 800c834:	d00b      	beq.n	800c84e <_svfiprintf_r+0x7e>
 800c836:	465b      	mov	r3, fp
 800c838:	4622      	mov	r2, r4
 800c83a:	4629      	mov	r1, r5
 800c83c:	4638      	mov	r0, r7
 800c83e:	f7ff ff6b 	bl	800c718 <__ssputs_r>
 800c842:	3001      	adds	r0, #1
 800c844:	f000 80a7 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c84a:	445a      	add	r2, fp
 800c84c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c84e:	f89a 3000 	ldrb.w	r3, [sl]
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 809f 	beq.w	800c996 <_svfiprintf_r+0x1c6>
 800c858:	2300      	movs	r3, #0
 800c85a:	f04f 32ff 	mov.w	r2, #4294967295
 800c85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c862:	f10a 0a01 	add.w	sl, sl, #1
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	9307      	str	r3, [sp, #28]
 800c86a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c86e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c870:	4654      	mov	r4, sl
 800c872:	2205      	movs	r2, #5
 800c874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c878:	484e      	ldr	r0, [pc, #312]	@ (800c9b4 <_svfiprintf_r+0x1e4>)
 800c87a:	f7f3 fd31 	bl	80002e0 <memchr>
 800c87e:	9a04      	ldr	r2, [sp, #16]
 800c880:	b9d8      	cbnz	r0, 800c8ba <_svfiprintf_r+0xea>
 800c882:	06d0      	lsls	r0, r2, #27
 800c884:	bf44      	itt	mi
 800c886:	2320      	movmi	r3, #32
 800c888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c88c:	0711      	lsls	r1, r2, #28
 800c88e:	bf44      	itt	mi
 800c890:	232b      	movmi	r3, #43	@ 0x2b
 800c892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c896:	f89a 3000 	ldrb.w	r3, [sl]
 800c89a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c89c:	d015      	beq.n	800c8ca <_svfiprintf_r+0xfa>
 800c89e:	9a07      	ldr	r2, [sp, #28]
 800c8a0:	4654      	mov	r4, sl
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	f04f 0c0a 	mov.w	ip, #10
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ae:	3b30      	subs	r3, #48	@ 0x30
 800c8b0:	2b09      	cmp	r3, #9
 800c8b2:	d94b      	bls.n	800c94c <_svfiprintf_r+0x17c>
 800c8b4:	b1b0      	cbz	r0, 800c8e4 <_svfiprintf_r+0x114>
 800c8b6:	9207      	str	r2, [sp, #28]
 800c8b8:	e014      	b.n	800c8e4 <_svfiprintf_r+0x114>
 800c8ba:	eba0 0308 	sub.w	r3, r0, r8
 800c8be:	fa09 f303 	lsl.w	r3, r9, r3
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	9304      	str	r3, [sp, #16]
 800c8c6:	46a2      	mov	sl, r4
 800c8c8:	e7d2      	b.n	800c870 <_svfiprintf_r+0xa0>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	1d19      	adds	r1, r3, #4
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	9103      	str	r1, [sp, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bfbb      	ittet	lt
 800c8d6:	425b      	neglt	r3, r3
 800c8d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c8dc:	9307      	strge	r3, [sp, #28]
 800c8de:	9307      	strlt	r3, [sp, #28]
 800c8e0:	bfb8      	it	lt
 800c8e2:	9204      	strlt	r2, [sp, #16]
 800c8e4:	7823      	ldrb	r3, [r4, #0]
 800c8e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8e8:	d10a      	bne.n	800c900 <_svfiprintf_r+0x130>
 800c8ea:	7863      	ldrb	r3, [r4, #1]
 800c8ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8ee:	d132      	bne.n	800c956 <_svfiprintf_r+0x186>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	1d1a      	adds	r2, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	9203      	str	r2, [sp, #12]
 800c8f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8fc:	3402      	adds	r4, #2
 800c8fe:	9305      	str	r3, [sp, #20]
 800c900:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c9c4 <_svfiprintf_r+0x1f4>
 800c904:	7821      	ldrb	r1, [r4, #0]
 800c906:	2203      	movs	r2, #3
 800c908:	4650      	mov	r0, sl
 800c90a:	f7f3 fce9 	bl	80002e0 <memchr>
 800c90e:	b138      	cbz	r0, 800c920 <_svfiprintf_r+0x150>
 800c910:	9b04      	ldr	r3, [sp, #16]
 800c912:	eba0 000a 	sub.w	r0, r0, sl
 800c916:	2240      	movs	r2, #64	@ 0x40
 800c918:	4082      	lsls	r2, r0
 800c91a:	4313      	orrs	r3, r2
 800c91c:	3401      	adds	r4, #1
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c924:	4824      	ldr	r0, [pc, #144]	@ (800c9b8 <_svfiprintf_r+0x1e8>)
 800c926:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c92a:	2206      	movs	r2, #6
 800c92c:	f7f3 fcd8 	bl	80002e0 <memchr>
 800c930:	2800      	cmp	r0, #0
 800c932:	d036      	beq.n	800c9a2 <_svfiprintf_r+0x1d2>
 800c934:	4b21      	ldr	r3, [pc, #132]	@ (800c9bc <_svfiprintf_r+0x1ec>)
 800c936:	bb1b      	cbnz	r3, 800c980 <_svfiprintf_r+0x1b0>
 800c938:	9b03      	ldr	r3, [sp, #12]
 800c93a:	3307      	adds	r3, #7
 800c93c:	f023 0307 	bic.w	r3, r3, #7
 800c940:	3308      	adds	r3, #8
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c946:	4433      	add	r3, r6
 800c948:	9309      	str	r3, [sp, #36]	@ 0x24
 800c94a:	e76a      	b.n	800c822 <_svfiprintf_r+0x52>
 800c94c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c950:	460c      	mov	r4, r1
 800c952:	2001      	movs	r0, #1
 800c954:	e7a8      	b.n	800c8a8 <_svfiprintf_r+0xd8>
 800c956:	2300      	movs	r3, #0
 800c958:	3401      	adds	r4, #1
 800c95a:	9305      	str	r3, [sp, #20]
 800c95c:	4619      	mov	r1, r3
 800c95e:	f04f 0c0a 	mov.w	ip, #10
 800c962:	4620      	mov	r0, r4
 800c964:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c968:	3a30      	subs	r2, #48	@ 0x30
 800c96a:	2a09      	cmp	r2, #9
 800c96c:	d903      	bls.n	800c976 <_svfiprintf_r+0x1a6>
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0c6      	beq.n	800c900 <_svfiprintf_r+0x130>
 800c972:	9105      	str	r1, [sp, #20]
 800c974:	e7c4      	b.n	800c900 <_svfiprintf_r+0x130>
 800c976:	fb0c 2101 	mla	r1, ip, r1, r2
 800c97a:	4604      	mov	r4, r0
 800c97c:	2301      	movs	r3, #1
 800c97e:	e7f0      	b.n	800c962 <_svfiprintf_r+0x192>
 800c980:	ab03      	add	r3, sp, #12
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	462a      	mov	r2, r5
 800c986:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c0 <_svfiprintf_r+0x1f0>)
 800c988:	a904      	add	r1, sp, #16
 800c98a:	4638      	mov	r0, r7
 800c98c:	f7fd ff08 	bl	800a7a0 <_printf_float>
 800c990:	1c42      	adds	r2, r0, #1
 800c992:	4606      	mov	r6, r0
 800c994:	d1d6      	bne.n	800c944 <_svfiprintf_r+0x174>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	065b      	lsls	r3, r3, #25
 800c99a:	f53f af2d 	bmi.w	800c7f8 <_svfiprintf_r+0x28>
 800c99e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9a0:	e72c      	b.n	800c7fc <_svfiprintf_r+0x2c>
 800c9a2:	ab03      	add	r3, sp, #12
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	462a      	mov	r2, r5
 800c9a8:	4b05      	ldr	r3, [pc, #20]	@ (800c9c0 <_svfiprintf_r+0x1f0>)
 800c9aa:	a904      	add	r1, sp, #16
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	f7fe f97f 	bl	800acb0 <_printf_i>
 800c9b2:	e7ed      	b.n	800c990 <_svfiprintf_r+0x1c0>
 800c9b4:	0800ed28 	.word	0x0800ed28
 800c9b8:	0800ed32 	.word	0x0800ed32
 800c9bc:	0800a7a1 	.word	0x0800a7a1
 800c9c0:	0800c719 	.word	0x0800c719
 800c9c4:	0800ed2e 	.word	0x0800ed2e

0800c9c8 <__sflush_r>:
 800c9c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d0:	0716      	lsls	r6, r2, #28
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	d454      	bmi.n	800ca82 <__sflush_r+0xba>
 800c9d8:	684b      	ldr	r3, [r1, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	dc02      	bgt.n	800c9e4 <__sflush_r+0x1c>
 800c9de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	dd48      	ble.n	800ca76 <__sflush_r+0xae>
 800c9e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d045      	beq.n	800ca76 <__sflush_r+0xae>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9f0:	682f      	ldr	r7, [r5, #0]
 800c9f2:	6a21      	ldr	r1, [r4, #32]
 800c9f4:	602b      	str	r3, [r5, #0]
 800c9f6:	d030      	beq.n	800ca5a <__sflush_r+0x92>
 800c9f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	0759      	lsls	r1, r3, #29
 800c9fe:	d505      	bpl.n	800ca0c <__sflush_r+0x44>
 800ca00:	6863      	ldr	r3, [r4, #4]
 800ca02:	1ad2      	subs	r2, r2, r3
 800ca04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca06:	b10b      	cbz	r3, 800ca0c <__sflush_r+0x44>
 800ca08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca0a:	1ad2      	subs	r2, r2, r3
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca10:	6a21      	ldr	r1, [r4, #32]
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b0      	blx	r6
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	d106      	bne.n	800ca2a <__sflush_r+0x62>
 800ca1c:	6829      	ldr	r1, [r5, #0]
 800ca1e:	291d      	cmp	r1, #29
 800ca20:	d82b      	bhi.n	800ca7a <__sflush_r+0xb2>
 800ca22:	4a2a      	ldr	r2, [pc, #168]	@ (800cacc <__sflush_r+0x104>)
 800ca24:	410a      	asrs	r2, r1
 800ca26:	07d6      	lsls	r6, r2, #31
 800ca28:	d427      	bmi.n	800ca7a <__sflush_r+0xb2>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	6062      	str	r2, [r4, #4]
 800ca2e:	04d9      	lsls	r1, r3, #19
 800ca30:	6922      	ldr	r2, [r4, #16]
 800ca32:	6022      	str	r2, [r4, #0]
 800ca34:	d504      	bpl.n	800ca40 <__sflush_r+0x78>
 800ca36:	1c42      	adds	r2, r0, #1
 800ca38:	d101      	bne.n	800ca3e <__sflush_r+0x76>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b903      	cbnz	r3, 800ca40 <__sflush_r+0x78>
 800ca3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca42:	602f      	str	r7, [r5, #0]
 800ca44:	b1b9      	cbz	r1, 800ca76 <__sflush_r+0xae>
 800ca46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca4a:	4299      	cmp	r1, r3
 800ca4c:	d002      	beq.n	800ca54 <__sflush_r+0x8c>
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f7ff f9e0 	bl	800be14 <_free_r>
 800ca54:	2300      	movs	r3, #0
 800ca56:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca58:	e00d      	b.n	800ca76 <__sflush_r+0xae>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	47b0      	blx	r6
 800ca60:	4602      	mov	r2, r0
 800ca62:	1c50      	adds	r0, r2, #1
 800ca64:	d1c9      	bne.n	800c9fa <__sflush_r+0x32>
 800ca66:	682b      	ldr	r3, [r5, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d0c6      	beq.n	800c9fa <__sflush_r+0x32>
 800ca6c:	2b1d      	cmp	r3, #29
 800ca6e:	d001      	beq.n	800ca74 <__sflush_r+0xac>
 800ca70:	2b16      	cmp	r3, #22
 800ca72:	d11e      	bne.n	800cab2 <__sflush_r+0xea>
 800ca74:	602f      	str	r7, [r5, #0]
 800ca76:	2000      	movs	r0, #0
 800ca78:	e022      	b.n	800cac0 <__sflush_r+0xf8>
 800ca7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca7e:	b21b      	sxth	r3, r3
 800ca80:	e01b      	b.n	800caba <__sflush_r+0xf2>
 800ca82:	690f      	ldr	r7, [r1, #16]
 800ca84:	2f00      	cmp	r7, #0
 800ca86:	d0f6      	beq.n	800ca76 <__sflush_r+0xae>
 800ca88:	0793      	lsls	r3, r2, #30
 800ca8a:	680e      	ldr	r6, [r1, #0]
 800ca8c:	bf08      	it	eq
 800ca8e:	694b      	ldreq	r3, [r1, #20]
 800ca90:	600f      	str	r7, [r1, #0]
 800ca92:	bf18      	it	ne
 800ca94:	2300      	movne	r3, #0
 800ca96:	eba6 0807 	sub.w	r8, r6, r7
 800ca9a:	608b      	str	r3, [r1, #8]
 800ca9c:	f1b8 0f00 	cmp.w	r8, #0
 800caa0:	dde9      	ble.n	800ca76 <__sflush_r+0xae>
 800caa2:	6a21      	ldr	r1, [r4, #32]
 800caa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800caa6:	4643      	mov	r3, r8
 800caa8:	463a      	mov	r2, r7
 800caaa:	4628      	mov	r0, r5
 800caac:	47b0      	blx	r6
 800caae:	2800      	cmp	r0, #0
 800cab0:	dc08      	bgt.n	800cac4 <__sflush_r+0xfc>
 800cab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac4:	4407      	add	r7, r0
 800cac6:	eba8 0800 	sub.w	r8, r8, r0
 800caca:	e7e7      	b.n	800ca9c <__sflush_r+0xd4>
 800cacc:	dfbffffe 	.word	0xdfbffffe

0800cad0 <_fflush_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	690b      	ldr	r3, [r1, #16]
 800cad4:	4605      	mov	r5, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	b913      	cbnz	r3, 800cae0 <_fflush_r+0x10>
 800cada:	2500      	movs	r5, #0
 800cadc:	4628      	mov	r0, r5
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	b118      	cbz	r0, 800caea <_fflush_r+0x1a>
 800cae2:	6a03      	ldr	r3, [r0, #32]
 800cae4:	b90b      	cbnz	r3, 800caea <_fflush_r+0x1a>
 800cae6:	f7fe fa8f 	bl	800b008 <__sinit>
 800caea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0f3      	beq.n	800cada <_fflush_r+0xa>
 800caf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800caf4:	07d0      	lsls	r0, r2, #31
 800caf6:	d404      	bmi.n	800cb02 <_fflush_r+0x32>
 800caf8:	0599      	lsls	r1, r3, #22
 800cafa:	d402      	bmi.n	800cb02 <_fflush_r+0x32>
 800cafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cafe:	f7fe fb9a 	bl	800b236 <__retarget_lock_acquire_recursive>
 800cb02:	4628      	mov	r0, r5
 800cb04:	4621      	mov	r1, r4
 800cb06:	f7ff ff5f 	bl	800c9c8 <__sflush_r>
 800cb0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb0c:	07da      	lsls	r2, r3, #31
 800cb0e:	4605      	mov	r5, r0
 800cb10:	d4e4      	bmi.n	800cadc <_fflush_r+0xc>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	059b      	lsls	r3, r3, #22
 800cb16:	d4e1      	bmi.n	800cadc <_fflush_r+0xc>
 800cb18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb1a:	f7fe fb8d 	bl	800b238 <__retarget_lock_release_recursive>
 800cb1e:	e7dd      	b.n	800cadc <_fflush_r+0xc>

0800cb20 <memmove>:
 800cb20:	4288      	cmp	r0, r1
 800cb22:	b510      	push	{r4, lr}
 800cb24:	eb01 0402 	add.w	r4, r1, r2
 800cb28:	d902      	bls.n	800cb30 <memmove+0x10>
 800cb2a:	4284      	cmp	r4, r0
 800cb2c:	4623      	mov	r3, r4
 800cb2e:	d807      	bhi.n	800cb40 <memmove+0x20>
 800cb30:	1e43      	subs	r3, r0, #1
 800cb32:	42a1      	cmp	r1, r4
 800cb34:	d008      	beq.n	800cb48 <memmove+0x28>
 800cb36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb3e:	e7f8      	b.n	800cb32 <memmove+0x12>
 800cb40:	4402      	add	r2, r0
 800cb42:	4601      	mov	r1, r0
 800cb44:	428a      	cmp	r2, r1
 800cb46:	d100      	bne.n	800cb4a <memmove+0x2a>
 800cb48:	bd10      	pop	{r4, pc}
 800cb4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb52:	e7f7      	b.n	800cb44 <memmove+0x24>

0800cb54 <_sbrk_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d06      	ldr	r5, [pc, #24]	@ (800cb70 <_sbrk_r+0x1c>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f4 fc2c 	bl	80013bc <_sbrk>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_sbrk_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_sbrk_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	24005380 	.word	0x24005380

0800cb74 <__assert_func>:
 800cb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb76:	4614      	mov	r4, r2
 800cb78:	461a      	mov	r2, r3
 800cb7a:	4b09      	ldr	r3, [pc, #36]	@ (800cba0 <__assert_func+0x2c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4605      	mov	r5, r0
 800cb80:	68d8      	ldr	r0, [r3, #12]
 800cb82:	b954      	cbnz	r4, 800cb9a <__assert_func+0x26>
 800cb84:	4b07      	ldr	r3, [pc, #28]	@ (800cba4 <__assert_func+0x30>)
 800cb86:	461c      	mov	r4, r3
 800cb88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb8c:	9100      	str	r1, [sp, #0]
 800cb8e:	462b      	mov	r3, r5
 800cb90:	4905      	ldr	r1, [pc, #20]	@ (800cba8 <__assert_func+0x34>)
 800cb92:	f000 f86f 	bl	800cc74 <fiprintf>
 800cb96:	f000 f87f 	bl	800cc98 <abort>
 800cb9a:	4b04      	ldr	r3, [pc, #16]	@ (800cbac <__assert_func+0x38>)
 800cb9c:	e7f4      	b.n	800cb88 <__assert_func+0x14>
 800cb9e:	bf00      	nop
 800cba0:	24000044 	.word	0x24000044
 800cba4:	0800ed7e 	.word	0x0800ed7e
 800cba8:	0800ed50 	.word	0x0800ed50
 800cbac:	0800ed43 	.word	0x0800ed43

0800cbb0 <_calloc_r>:
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	fba1 5402 	umull	r5, r4, r1, r2
 800cbb6:	b93c      	cbnz	r4, 800cbc8 <_calloc_r+0x18>
 800cbb8:	4629      	mov	r1, r5
 800cbba:	f7ff f99f 	bl	800befc <_malloc_r>
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	b928      	cbnz	r0, 800cbce <_calloc_r+0x1e>
 800cbc2:	2600      	movs	r6, #0
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	220c      	movs	r2, #12
 800cbca:	6002      	str	r2, [r0, #0]
 800cbcc:	e7f9      	b.n	800cbc2 <_calloc_r+0x12>
 800cbce:	462a      	mov	r2, r5
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	f7fe fab2 	bl	800b13a <memset>
 800cbd6:	e7f5      	b.n	800cbc4 <_calloc_r+0x14>

0800cbd8 <__ascii_mbtowc>:
 800cbd8:	b082      	sub	sp, #8
 800cbda:	b901      	cbnz	r1, 800cbde <__ascii_mbtowc+0x6>
 800cbdc:	a901      	add	r1, sp, #4
 800cbde:	b142      	cbz	r2, 800cbf2 <__ascii_mbtowc+0x1a>
 800cbe0:	b14b      	cbz	r3, 800cbf6 <__ascii_mbtowc+0x1e>
 800cbe2:	7813      	ldrb	r3, [r2, #0]
 800cbe4:	600b      	str	r3, [r1, #0]
 800cbe6:	7812      	ldrb	r2, [r2, #0]
 800cbe8:	1e10      	subs	r0, r2, #0
 800cbea:	bf18      	it	ne
 800cbec:	2001      	movne	r0, #1
 800cbee:	b002      	add	sp, #8
 800cbf0:	4770      	bx	lr
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	e7fb      	b.n	800cbee <__ascii_mbtowc+0x16>
 800cbf6:	f06f 0001 	mvn.w	r0, #1
 800cbfa:	e7f8      	b.n	800cbee <__ascii_mbtowc+0x16>

0800cbfc <_realloc_r>:
 800cbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc00:	4680      	mov	r8, r0
 800cc02:	4615      	mov	r5, r2
 800cc04:	460c      	mov	r4, r1
 800cc06:	b921      	cbnz	r1, 800cc12 <_realloc_r+0x16>
 800cc08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	f7ff b975 	b.w	800befc <_malloc_r>
 800cc12:	b92a      	cbnz	r2, 800cc20 <_realloc_r+0x24>
 800cc14:	f7ff f8fe 	bl	800be14 <_free_r>
 800cc18:	2400      	movs	r4, #0
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc20:	f000 f841 	bl	800cca6 <_malloc_usable_size_r>
 800cc24:	4285      	cmp	r5, r0
 800cc26:	4606      	mov	r6, r0
 800cc28:	d802      	bhi.n	800cc30 <_realloc_r+0x34>
 800cc2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cc2e:	d8f4      	bhi.n	800cc1a <_realloc_r+0x1e>
 800cc30:	4629      	mov	r1, r5
 800cc32:	4640      	mov	r0, r8
 800cc34:	f7ff f962 	bl	800befc <_malloc_r>
 800cc38:	4607      	mov	r7, r0
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d0ec      	beq.n	800cc18 <_realloc_r+0x1c>
 800cc3e:	42b5      	cmp	r5, r6
 800cc40:	462a      	mov	r2, r5
 800cc42:	4621      	mov	r1, r4
 800cc44:	bf28      	it	cs
 800cc46:	4632      	movcs	r2, r6
 800cc48:	f7fe faf7 	bl	800b23a <memcpy>
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4640      	mov	r0, r8
 800cc50:	f7ff f8e0 	bl	800be14 <_free_r>
 800cc54:	463c      	mov	r4, r7
 800cc56:	e7e0      	b.n	800cc1a <_realloc_r+0x1e>

0800cc58 <__ascii_wctomb>:
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4608      	mov	r0, r1
 800cc5c:	b141      	cbz	r1, 800cc70 <__ascii_wctomb+0x18>
 800cc5e:	2aff      	cmp	r2, #255	@ 0xff
 800cc60:	d904      	bls.n	800cc6c <__ascii_wctomb+0x14>
 800cc62:	228a      	movs	r2, #138	@ 0x8a
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6a:	4770      	bx	lr
 800cc6c:	700a      	strb	r2, [r1, #0]
 800cc6e:	2001      	movs	r0, #1
 800cc70:	4770      	bx	lr
	...

0800cc74 <fiprintf>:
 800cc74:	b40e      	push	{r1, r2, r3}
 800cc76:	b503      	push	{r0, r1, lr}
 800cc78:	4601      	mov	r1, r0
 800cc7a:	ab03      	add	r3, sp, #12
 800cc7c:	4805      	ldr	r0, [pc, #20]	@ (800cc94 <fiprintf+0x20>)
 800cc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc82:	6800      	ldr	r0, [r0, #0]
 800cc84:	9301      	str	r3, [sp, #4]
 800cc86:	f000 f83f 	bl	800cd08 <_vfiprintf_r>
 800cc8a:	b002      	add	sp, #8
 800cc8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc90:	b003      	add	sp, #12
 800cc92:	4770      	bx	lr
 800cc94:	24000044 	.word	0x24000044

0800cc98 <abort>:
 800cc98:	b508      	push	{r3, lr}
 800cc9a:	2006      	movs	r0, #6
 800cc9c:	f000 fa08 	bl	800d0b0 <raise>
 800cca0:	2001      	movs	r0, #1
 800cca2:	f7f4 fb13 	bl	80012cc <_exit>

0800cca6 <_malloc_usable_size_r>:
 800cca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccaa:	1f18      	subs	r0, r3, #4
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	bfbc      	itt	lt
 800ccb0:	580b      	ldrlt	r3, [r1, r0]
 800ccb2:	18c0      	addlt	r0, r0, r3
 800ccb4:	4770      	bx	lr

0800ccb6 <__sfputc_r>:
 800ccb6:	6893      	ldr	r3, [r2, #8]
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	b410      	push	{r4}
 800ccbe:	6093      	str	r3, [r2, #8]
 800ccc0:	da08      	bge.n	800ccd4 <__sfputc_r+0x1e>
 800ccc2:	6994      	ldr	r4, [r2, #24]
 800ccc4:	42a3      	cmp	r3, r4
 800ccc6:	db01      	blt.n	800cccc <__sfputc_r+0x16>
 800ccc8:	290a      	cmp	r1, #10
 800ccca:	d103      	bne.n	800ccd4 <__sfputc_r+0x1e>
 800cccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd0:	f000 b932 	b.w	800cf38 <__swbuf_r>
 800ccd4:	6813      	ldr	r3, [r2, #0]
 800ccd6:	1c58      	adds	r0, r3, #1
 800ccd8:	6010      	str	r0, [r2, #0]
 800ccda:	7019      	strb	r1, [r3, #0]
 800ccdc:	4608      	mov	r0, r1
 800ccde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <__sfputs_r>:
 800cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce6:	4606      	mov	r6, r0
 800cce8:	460f      	mov	r7, r1
 800ccea:	4614      	mov	r4, r2
 800ccec:	18d5      	adds	r5, r2, r3
 800ccee:	42ac      	cmp	r4, r5
 800ccf0:	d101      	bne.n	800ccf6 <__sfputs_r+0x12>
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	e007      	b.n	800cd06 <__sfputs_r+0x22>
 800ccf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfa:	463a      	mov	r2, r7
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f7ff ffda 	bl	800ccb6 <__sfputc_r>
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	d1f3      	bne.n	800ccee <__sfputs_r+0xa>
 800cd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd08 <_vfiprintf_r>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	460d      	mov	r5, r1
 800cd0e:	b09d      	sub	sp, #116	@ 0x74
 800cd10:	4614      	mov	r4, r2
 800cd12:	4698      	mov	r8, r3
 800cd14:	4606      	mov	r6, r0
 800cd16:	b118      	cbz	r0, 800cd20 <_vfiprintf_r+0x18>
 800cd18:	6a03      	ldr	r3, [r0, #32]
 800cd1a:	b90b      	cbnz	r3, 800cd20 <_vfiprintf_r+0x18>
 800cd1c:	f7fe f974 	bl	800b008 <__sinit>
 800cd20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd22:	07d9      	lsls	r1, r3, #31
 800cd24:	d405      	bmi.n	800cd32 <_vfiprintf_r+0x2a>
 800cd26:	89ab      	ldrh	r3, [r5, #12]
 800cd28:	059a      	lsls	r2, r3, #22
 800cd2a:	d402      	bmi.n	800cd32 <_vfiprintf_r+0x2a>
 800cd2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd2e:	f7fe fa82 	bl	800b236 <__retarget_lock_acquire_recursive>
 800cd32:	89ab      	ldrh	r3, [r5, #12]
 800cd34:	071b      	lsls	r3, r3, #28
 800cd36:	d501      	bpl.n	800cd3c <_vfiprintf_r+0x34>
 800cd38:	692b      	ldr	r3, [r5, #16]
 800cd3a:	b99b      	cbnz	r3, 800cd64 <_vfiprintf_r+0x5c>
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4630      	mov	r0, r6
 800cd40:	f000 f938 	bl	800cfb4 <__swsetup_r>
 800cd44:	b170      	cbz	r0, 800cd64 <_vfiprintf_r+0x5c>
 800cd46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd48:	07dc      	lsls	r4, r3, #31
 800cd4a:	d504      	bpl.n	800cd56 <_vfiprintf_r+0x4e>
 800cd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd50:	b01d      	add	sp, #116	@ 0x74
 800cd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	0598      	lsls	r0, r3, #22
 800cd5a:	d4f7      	bmi.n	800cd4c <_vfiprintf_r+0x44>
 800cd5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd5e:	f7fe fa6b 	bl	800b238 <__retarget_lock_release_recursive>
 800cd62:	e7f3      	b.n	800cd4c <_vfiprintf_r+0x44>
 800cd64:	2300      	movs	r3, #0
 800cd66:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd68:	2320      	movs	r3, #32
 800cd6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd72:	2330      	movs	r3, #48	@ 0x30
 800cd74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf24 <_vfiprintf_r+0x21c>
 800cd78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd7c:	f04f 0901 	mov.w	r9, #1
 800cd80:	4623      	mov	r3, r4
 800cd82:	469a      	mov	sl, r3
 800cd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd88:	b10a      	cbz	r2, 800cd8e <_vfiprintf_r+0x86>
 800cd8a:	2a25      	cmp	r2, #37	@ 0x25
 800cd8c:	d1f9      	bne.n	800cd82 <_vfiprintf_r+0x7a>
 800cd8e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd92:	d00b      	beq.n	800cdac <_vfiprintf_r+0xa4>
 800cd94:	465b      	mov	r3, fp
 800cd96:	4622      	mov	r2, r4
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7ff ffa2 	bl	800cce4 <__sfputs_r>
 800cda0:	3001      	adds	r0, #1
 800cda2:	f000 80a7 	beq.w	800cef4 <_vfiprintf_r+0x1ec>
 800cda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cda8:	445a      	add	r2, fp
 800cdaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdac:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 809f 	beq.w	800cef4 <_vfiprintf_r+0x1ec>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc0:	f10a 0a01 	add.w	sl, sl, #1
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	9307      	str	r3, [sp, #28]
 800cdc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdce:	4654      	mov	r4, sl
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd6:	4853      	ldr	r0, [pc, #332]	@ (800cf24 <_vfiprintf_r+0x21c>)
 800cdd8:	f7f3 fa82 	bl	80002e0 <memchr>
 800cddc:	9a04      	ldr	r2, [sp, #16]
 800cdde:	b9d8      	cbnz	r0, 800ce18 <_vfiprintf_r+0x110>
 800cde0:	06d1      	lsls	r1, r2, #27
 800cde2:	bf44      	itt	mi
 800cde4:	2320      	movmi	r3, #32
 800cde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdea:	0713      	lsls	r3, r2, #28
 800cdec:	bf44      	itt	mi
 800cdee:	232b      	movmi	r3, #43	@ 0x2b
 800cdf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdf4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdfa:	d015      	beq.n	800ce28 <_vfiprintf_r+0x120>
 800cdfc:	9a07      	ldr	r2, [sp, #28]
 800cdfe:	4654      	mov	r4, sl
 800ce00:	2000      	movs	r0, #0
 800ce02:	f04f 0c0a 	mov.w	ip, #10
 800ce06:	4621      	mov	r1, r4
 800ce08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce0c:	3b30      	subs	r3, #48	@ 0x30
 800ce0e:	2b09      	cmp	r3, #9
 800ce10:	d94b      	bls.n	800ceaa <_vfiprintf_r+0x1a2>
 800ce12:	b1b0      	cbz	r0, 800ce42 <_vfiprintf_r+0x13a>
 800ce14:	9207      	str	r2, [sp, #28]
 800ce16:	e014      	b.n	800ce42 <_vfiprintf_r+0x13a>
 800ce18:	eba0 0308 	sub.w	r3, r0, r8
 800ce1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce20:	4313      	orrs	r3, r2
 800ce22:	9304      	str	r3, [sp, #16]
 800ce24:	46a2      	mov	sl, r4
 800ce26:	e7d2      	b.n	800cdce <_vfiprintf_r+0xc6>
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	1d19      	adds	r1, r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	9103      	str	r1, [sp, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bfbb      	ittet	lt
 800ce34:	425b      	neglt	r3, r3
 800ce36:	f042 0202 	orrlt.w	r2, r2, #2
 800ce3a:	9307      	strge	r3, [sp, #28]
 800ce3c:	9307      	strlt	r3, [sp, #28]
 800ce3e:	bfb8      	it	lt
 800ce40:	9204      	strlt	r2, [sp, #16]
 800ce42:	7823      	ldrb	r3, [r4, #0]
 800ce44:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce46:	d10a      	bne.n	800ce5e <_vfiprintf_r+0x156>
 800ce48:	7863      	ldrb	r3, [r4, #1]
 800ce4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce4c:	d132      	bne.n	800ceb4 <_vfiprintf_r+0x1ac>
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	1d1a      	adds	r2, r3, #4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	9203      	str	r2, [sp, #12]
 800ce56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce5a:	3402      	adds	r4, #2
 800ce5c:	9305      	str	r3, [sp, #20]
 800ce5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf34 <_vfiprintf_r+0x22c>
 800ce62:	7821      	ldrb	r1, [r4, #0]
 800ce64:	2203      	movs	r2, #3
 800ce66:	4650      	mov	r0, sl
 800ce68:	f7f3 fa3a 	bl	80002e0 <memchr>
 800ce6c:	b138      	cbz	r0, 800ce7e <_vfiprintf_r+0x176>
 800ce6e:	9b04      	ldr	r3, [sp, #16]
 800ce70:	eba0 000a 	sub.w	r0, r0, sl
 800ce74:	2240      	movs	r2, #64	@ 0x40
 800ce76:	4082      	lsls	r2, r0
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	3401      	adds	r4, #1
 800ce7c:	9304      	str	r3, [sp, #16]
 800ce7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce82:	4829      	ldr	r0, [pc, #164]	@ (800cf28 <_vfiprintf_r+0x220>)
 800ce84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce88:	2206      	movs	r2, #6
 800ce8a:	f7f3 fa29 	bl	80002e0 <memchr>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d03f      	beq.n	800cf12 <_vfiprintf_r+0x20a>
 800ce92:	4b26      	ldr	r3, [pc, #152]	@ (800cf2c <_vfiprintf_r+0x224>)
 800ce94:	bb1b      	cbnz	r3, 800cede <_vfiprintf_r+0x1d6>
 800ce96:	9b03      	ldr	r3, [sp, #12]
 800ce98:	3307      	adds	r3, #7
 800ce9a:	f023 0307 	bic.w	r3, r3, #7
 800ce9e:	3308      	adds	r3, #8
 800cea0:	9303      	str	r3, [sp, #12]
 800cea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea4:	443b      	add	r3, r7
 800cea6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cea8:	e76a      	b.n	800cd80 <_vfiprintf_r+0x78>
 800ceaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceae:	460c      	mov	r4, r1
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	e7a8      	b.n	800ce06 <_vfiprintf_r+0xfe>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	3401      	adds	r4, #1
 800ceb8:	9305      	str	r3, [sp, #20]
 800ceba:	4619      	mov	r1, r3
 800cebc:	f04f 0c0a 	mov.w	ip, #10
 800cec0:	4620      	mov	r0, r4
 800cec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec6:	3a30      	subs	r2, #48	@ 0x30
 800cec8:	2a09      	cmp	r2, #9
 800ceca:	d903      	bls.n	800ced4 <_vfiprintf_r+0x1cc>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d0c6      	beq.n	800ce5e <_vfiprintf_r+0x156>
 800ced0:	9105      	str	r1, [sp, #20]
 800ced2:	e7c4      	b.n	800ce5e <_vfiprintf_r+0x156>
 800ced4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ced8:	4604      	mov	r4, r0
 800ceda:	2301      	movs	r3, #1
 800cedc:	e7f0      	b.n	800cec0 <_vfiprintf_r+0x1b8>
 800cede:	ab03      	add	r3, sp, #12
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	462a      	mov	r2, r5
 800cee4:	4b12      	ldr	r3, [pc, #72]	@ (800cf30 <_vfiprintf_r+0x228>)
 800cee6:	a904      	add	r1, sp, #16
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7fd fc59 	bl	800a7a0 <_printf_float>
 800ceee:	4607      	mov	r7, r0
 800cef0:	1c78      	adds	r0, r7, #1
 800cef2:	d1d6      	bne.n	800cea2 <_vfiprintf_r+0x19a>
 800cef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cef6:	07d9      	lsls	r1, r3, #31
 800cef8:	d405      	bmi.n	800cf06 <_vfiprintf_r+0x1fe>
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	059a      	lsls	r2, r3, #22
 800cefe:	d402      	bmi.n	800cf06 <_vfiprintf_r+0x1fe>
 800cf00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf02:	f7fe f999 	bl	800b238 <__retarget_lock_release_recursive>
 800cf06:	89ab      	ldrh	r3, [r5, #12]
 800cf08:	065b      	lsls	r3, r3, #25
 800cf0a:	f53f af1f 	bmi.w	800cd4c <_vfiprintf_r+0x44>
 800cf0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf10:	e71e      	b.n	800cd50 <_vfiprintf_r+0x48>
 800cf12:	ab03      	add	r3, sp, #12
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	462a      	mov	r2, r5
 800cf18:	4b05      	ldr	r3, [pc, #20]	@ (800cf30 <_vfiprintf_r+0x228>)
 800cf1a:	a904      	add	r1, sp, #16
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7fd fec7 	bl	800acb0 <_printf_i>
 800cf22:	e7e4      	b.n	800ceee <_vfiprintf_r+0x1e6>
 800cf24:	0800ed28 	.word	0x0800ed28
 800cf28:	0800ed32 	.word	0x0800ed32
 800cf2c:	0800a7a1 	.word	0x0800a7a1
 800cf30:	0800cce5 	.word	0x0800cce5
 800cf34:	0800ed2e 	.word	0x0800ed2e

0800cf38 <__swbuf_r>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	460e      	mov	r6, r1
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	4605      	mov	r5, r0
 800cf40:	b118      	cbz	r0, 800cf4a <__swbuf_r+0x12>
 800cf42:	6a03      	ldr	r3, [r0, #32]
 800cf44:	b90b      	cbnz	r3, 800cf4a <__swbuf_r+0x12>
 800cf46:	f7fe f85f 	bl	800b008 <__sinit>
 800cf4a:	69a3      	ldr	r3, [r4, #24]
 800cf4c:	60a3      	str	r3, [r4, #8]
 800cf4e:	89a3      	ldrh	r3, [r4, #12]
 800cf50:	071a      	lsls	r2, r3, #28
 800cf52:	d501      	bpl.n	800cf58 <__swbuf_r+0x20>
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	b943      	cbnz	r3, 800cf6a <__swbuf_r+0x32>
 800cf58:	4621      	mov	r1, r4
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	f000 f82a 	bl	800cfb4 <__swsetup_r>
 800cf60:	b118      	cbz	r0, 800cf6a <__swbuf_r+0x32>
 800cf62:	f04f 37ff 	mov.w	r7, #4294967295
 800cf66:	4638      	mov	r0, r7
 800cf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	6922      	ldr	r2, [r4, #16]
 800cf6e:	1a98      	subs	r0, r3, r2
 800cf70:	6963      	ldr	r3, [r4, #20]
 800cf72:	b2f6      	uxtb	r6, r6
 800cf74:	4283      	cmp	r3, r0
 800cf76:	4637      	mov	r7, r6
 800cf78:	dc05      	bgt.n	800cf86 <__swbuf_r+0x4e>
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f7ff fda7 	bl	800cad0 <_fflush_r>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d1ed      	bne.n	800cf62 <__swbuf_r+0x2a>
 800cf86:	68a3      	ldr	r3, [r4, #8]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	60a3      	str	r3, [r4, #8]
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	6022      	str	r2, [r4, #0]
 800cf92:	701e      	strb	r6, [r3, #0]
 800cf94:	6962      	ldr	r2, [r4, #20]
 800cf96:	1c43      	adds	r3, r0, #1
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d004      	beq.n	800cfa6 <__swbuf_r+0x6e>
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	07db      	lsls	r3, r3, #31
 800cfa0:	d5e1      	bpl.n	800cf66 <__swbuf_r+0x2e>
 800cfa2:	2e0a      	cmp	r6, #10
 800cfa4:	d1df      	bne.n	800cf66 <__swbuf_r+0x2e>
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f7ff fd91 	bl	800cad0 <_fflush_r>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d0d9      	beq.n	800cf66 <__swbuf_r+0x2e>
 800cfb2:	e7d6      	b.n	800cf62 <__swbuf_r+0x2a>

0800cfb4 <__swsetup_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4b29      	ldr	r3, [pc, #164]	@ (800d05c <__swsetup_r+0xa8>)
 800cfb8:	4605      	mov	r5, r0
 800cfba:	6818      	ldr	r0, [r3, #0]
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	b118      	cbz	r0, 800cfc8 <__swsetup_r+0x14>
 800cfc0:	6a03      	ldr	r3, [r0, #32]
 800cfc2:	b90b      	cbnz	r3, 800cfc8 <__swsetup_r+0x14>
 800cfc4:	f7fe f820 	bl	800b008 <__sinit>
 800cfc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfcc:	0719      	lsls	r1, r3, #28
 800cfce:	d422      	bmi.n	800d016 <__swsetup_r+0x62>
 800cfd0:	06da      	lsls	r2, r3, #27
 800cfd2:	d407      	bmi.n	800cfe4 <__swsetup_r+0x30>
 800cfd4:	2209      	movs	r2, #9
 800cfd6:	602a      	str	r2, [r5, #0]
 800cfd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfdc:	81a3      	strh	r3, [r4, #12]
 800cfde:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe2:	e033      	b.n	800d04c <__swsetup_r+0x98>
 800cfe4:	0758      	lsls	r0, r3, #29
 800cfe6:	d512      	bpl.n	800d00e <__swsetup_r+0x5a>
 800cfe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfea:	b141      	cbz	r1, 800cffe <__swsetup_r+0x4a>
 800cfec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cff0:	4299      	cmp	r1, r3
 800cff2:	d002      	beq.n	800cffa <__swsetup_r+0x46>
 800cff4:	4628      	mov	r0, r5
 800cff6:	f7fe ff0d 	bl	800be14 <_free_r>
 800cffa:	2300      	movs	r3, #0
 800cffc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d004:	81a3      	strh	r3, [r4, #12]
 800d006:	2300      	movs	r3, #0
 800d008:	6063      	str	r3, [r4, #4]
 800d00a:	6923      	ldr	r3, [r4, #16]
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f043 0308 	orr.w	r3, r3, #8
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	6923      	ldr	r3, [r4, #16]
 800d018:	b94b      	cbnz	r3, 800d02e <__swsetup_r+0x7a>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d024:	d003      	beq.n	800d02e <__swsetup_r+0x7a>
 800d026:	4621      	mov	r1, r4
 800d028:	4628      	mov	r0, r5
 800d02a:	f000 f883 	bl	800d134 <__smakebuf_r>
 800d02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d032:	f013 0201 	ands.w	r2, r3, #1
 800d036:	d00a      	beq.n	800d04e <__swsetup_r+0x9a>
 800d038:	2200      	movs	r2, #0
 800d03a:	60a2      	str	r2, [r4, #8]
 800d03c:	6962      	ldr	r2, [r4, #20]
 800d03e:	4252      	negs	r2, r2
 800d040:	61a2      	str	r2, [r4, #24]
 800d042:	6922      	ldr	r2, [r4, #16]
 800d044:	b942      	cbnz	r2, 800d058 <__swsetup_r+0xa4>
 800d046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d04a:	d1c5      	bne.n	800cfd8 <__swsetup_r+0x24>
 800d04c:	bd38      	pop	{r3, r4, r5, pc}
 800d04e:	0799      	lsls	r1, r3, #30
 800d050:	bf58      	it	pl
 800d052:	6962      	ldrpl	r2, [r4, #20]
 800d054:	60a2      	str	r2, [r4, #8]
 800d056:	e7f4      	b.n	800d042 <__swsetup_r+0x8e>
 800d058:	2000      	movs	r0, #0
 800d05a:	e7f7      	b.n	800d04c <__swsetup_r+0x98>
 800d05c:	24000044 	.word	0x24000044

0800d060 <_raise_r>:
 800d060:	291f      	cmp	r1, #31
 800d062:	b538      	push	{r3, r4, r5, lr}
 800d064:	4605      	mov	r5, r0
 800d066:	460c      	mov	r4, r1
 800d068:	d904      	bls.n	800d074 <_raise_r+0x14>
 800d06a:	2316      	movs	r3, #22
 800d06c:	6003      	str	r3, [r0, #0]
 800d06e:	f04f 30ff 	mov.w	r0, #4294967295
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d076:	b112      	cbz	r2, 800d07e <_raise_r+0x1e>
 800d078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d07c:	b94b      	cbnz	r3, 800d092 <_raise_r+0x32>
 800d07e:	4628      	mov	r0, r5
 800d080:	f000 f830 	bl	800d0e4 <_getpid_r>
 800d084:	4622      	mov	r2, r4
 800d086:	4601      	mov	r1, r0
 800d088:	4628      	mov	r0, r5
 800d08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d08e:	f000 b817 	b.w	800d0c0 <_kill_r>
 800d092:	2b01      	cmp	r3, #1
 800d094:	d00a      	beq.n	800d0ac <_raise_r+0x4c>
 800d096:	1c59      	adds	r1, r3, #1
 800d098:	d103      	bne.n	800d0a2 <_raise_r+0x42>
 800d09a:	2316      	movs	r3, #22
 800d09c:	6003      	str	r3, [r0, #0]
 800d09e:	2001      	movs	r0, #1
 800d0a0:	e7e7      	b.n	800d072 <_raise_r+0x12>
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	4798      	blx	r3
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	e7e0      	b.n	800d072 <_raise_r+0x12>

0800d0b0 <raise>:
 800d0b0:	4b02      	ldr	r3, [pc, #8]	@ (800d0bc <raise+0xc>)
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	f7ff bfd3 	b.w	800d060 <_raise_r>
 800d0ba:	bf00      	nop
 800d0bc:	24000044 	.word	0x24000044

0800d0c0 <_kill_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4d07      	ldr	r5, [pc, #28]	@ (800d0e0 <_kill_r+0x20>)
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	f7f4 f8ed 	bl	80012ac <_kill>
 800d0d2:	1c43      	adds	r3, r0, #1
 800d0d4:	d102      	bne.n	800d0dc <_kill_r+0x1c>
 800d0d6:	682b      	ldr	r3, [r5, #0]
 800d0d8:	b103      	cbz	r3, 800d0dc <_kill_r+0x1c>
 800d0da:	6023      	str	r3, [r4, #0]
 800d0dc:	bd38      	pop	{r3, r4, r5, pc}
 800d0de:	bf00      	nop
 800d0e0:	24005380 	.word	0x24005380

0800d0e4 <_getpid_r>:
 800d0e4:	f7f4 b8da 	b.w	800129c <_getpid>

0800d0e8 <__swhatbuf_r>:
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f0:	2900      	cmp	r1, #0
 800d0f2:	b096      	sub	sp, #88	@ 0x58
 800d0f4:	4615      	mov	r5, r2
 800d0f6:	461e      	mov	r6, r3
 800d0f8:	da0d      	bge.n	800d116 <__swhatbuf_r+0x2e>
 800d0fa:	89a3      	ldrh	r3, [r4, #12]
 800d0fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d100:	f04f 0100 	mov.w	r1, #0
 800d104:	bf14      	ite	ne
 800d106:	2340      	movne	r3, #64	@ 0x40
 800d108:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d10c:	2000      	movs	r0, #0
 800d10e:	6031      	str	r1, [r6, #0]
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	b016      	add	sp, #88	@ 0x58
 800d114:	bd70      	pop	{r4, r5, r6, pc}
 800d116:	466a      	mov	r2, sp
 800d118:	f000 f848 	bl	800d1ac <_fstat_r>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	dbec      	blt.n	800d0fa <__swhatbuf_r+0x12>
 800d120:	9901      	ldr	r1, [sp, #4]
 800d122:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d126:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d12a:	4259      	negs	r1, r3
 800d12c:	4159      	adcs	r1, r3
 800d12e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d132:	e7eb      	b.n	800d10c <__swhatbuf_r+0x24>

0800d134 <__smakebuf_r>:
 800d134:	898b      	ldrh	r3, [r1, #12]
 800d136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d138:	079d      	lsls	r5, r3, #30
 800d13a:	4606      	mov	r6, r0
 800d13c:	460c      	mov	r4, r1
 800d13e:	d507      	bpl.n	800d150 <__smakebuf_r+0x1c>
 800d140:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d144:	6023      	str	r3, [r4, #0]
 800d146:	6123      	str	r3, [r4, #16]
 800d148:	2301      	movs	r3, #1
 800d14a:	6163      	str	r3, [r4, #20]
 800d14c:	b003      	add	sp, #12
 800d14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d150:	ab01      	add	r3, sp, #4
 800d152:	466a      	mov	r2, sp
 800d154:	f7ff ffc8 	bl	800d0e8 <__swhatbuf_r>
 800d158:	9f00      	ldr	r7, [sp, #0]
 800d15a:	4605      	mov	r5, r0
 800d15c:	4639      	mov	r1, r7
 800d15e:	4630      	mov	r0, r6
 800d160:	f7fe fecc 	bl	800befc <_malloc_r>
 800d164:	b948      	cbnz	r0, 800d17a <__smakebuf_r+0x46>
 800d166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d16a:	059a      	lsls	r2, r3, #22
 800d16c:	d4ee      	bmi.n	800d14c <__smakebuf_r+0x18>
 800d16e:	f023 0303 	bic.w	r3, r3, #3
 800d172:	f043 0302 	orr.w	r3, r3, #2
 800d176:	81a3      	strh	r3, [r4, #12]
 800d178:	e7e2      	b.n	800d140 <__smakebuf_r+0xc>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	6020      	str	r0, [r4, #0]
 800d17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d182:	81a3      	strh	r3, [r4, #12]
 800d184:	9b01      	ldr	r3, [sp, #4]
 800d186:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d18a:	b15b      	cbz	r3, 800d1a4 <__smakebuf_r+0x70>
 800d18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d190:	4630      	mov	r0, r6
 800d192:	f000 f81d 	bl	800d1d0 <_isatty_r>
 800d196:	b128      	cbz	r0, 800d1a4 <__smakebuf_r+0x70>
 800d198:	89a3      	ldrh	r3, [r4, #12]
 800d19a:	f023 0303 	bic.w	r3, r3, #3
 800d19e:	f043 0301 	orr.w	r3, r3, #1
 800d1a2:	81a3      	strh	r3, [r4, #12]
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	431d      	orrs	r5, r3
 800d1a8:	81a5      	strh	r5, [r4, #12]
 800d1aa:	e7cf      	b.n	800d14c <__smakebuf_r+0x18>

0800d1ac <_fstat_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d07      	ldr	r5, [pc, #28]	@ (800d1cc <_fstat_r+0x20>)
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	4608      	mov	r0, r1
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	602b      	str	r3, [r5, #0]
 800d1ba:	f7f4 f8d7 	bl	800136c <_fstat>
 800d1be:	1c43      	adds	r3, r0, #1
 800d1c0:	d102      	bne.n	800d1c8 <_fstat_r+0x1c>
 800d1c2:	682b      	ldr	r3, [r5, #0]
 800d1c4:	b103      	cbz	r3, 800d1c8 <_fstat_r+0x1c>
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ca:	bf00      	nop
 800d1cc:	24005380 	.word	0x24005380

0800d1d0 <_isatty_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4d06      	ldr	r5, [pc, #24]	@ (800d1ec <_isatty_r+0x1c>)
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	4608      	mov	r0, r1
 800d1da:	602b      	str	r3, [r5, #0]
 800d1dc:	f7f4 f8d6 	bl	800138c <_isatty>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_isatty_r+0x1a>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_isatty_r+0x1a>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	24005380 	.word	0x24005380

0800d1f0 <_init>:
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f2:	bf00      	nop
 800d1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f6:	bc08      	pop	{r3}
 800d1f8:	469e      	mov	lr, r3
 800d1fa:	4770      	bx	lr

0800d1fc <_fini>:
 800d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fe:	bf00      	nop
 800d200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d202:	bc08      	pop	{r3}
 800d204:	469e      	mov	lr, r3
 800d206:	4770      	bx	lr
