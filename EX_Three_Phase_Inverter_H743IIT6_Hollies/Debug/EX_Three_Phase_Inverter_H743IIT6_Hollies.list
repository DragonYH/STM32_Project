
EX_Three_Phase_Inverter_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002508  080149a0  080149a0  000159a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016ea8  08016ea8  00017ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016eb0  08016eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016eb4  08016eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f4  24000000  08016eb8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006dec  240002f4  080171ac  000182f4  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240070e0  080171ac  000190e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000182f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038ee2  00000000  00000000  00018322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d3d  00000000  00000000  00051204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026e8  00000000  00000000  00058f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d54  00000000  00000000  0005b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000414fe  00000000  00000000  0005d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000370e4  00000000  00000000  0009e882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176ad3  00000000  00000000  000d5966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024c439  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b148  00000000  00000000  0024c4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  0025763c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000001f4  00000000  00000000  002576b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  002578a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014984 	.word	0x08014984

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	08014984 	.word	0x08014984

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f011 ffb2 	bl	8012522 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fc13 	bl	8001df0 <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 fcd7 	bl	8000f82 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 fd02 	bl	8001ff8 <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 fcc2 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000310 	.word	0x24000310
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f001 fe05 	bl	8002290 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fb10 	bl	8001cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fb27 	bl	8001ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 80006b0:	f010 f980 	bl	80109b4 <OLED_Init>
  ad7606_Init();
 80006b4:	f00f fd40 	bl	8010138 <ad7606_Init>
  INA228_config(INA228_0);
 80006b8:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_FREERTOS_Init+0xa4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f00f fe50 	bl	8010362 <INA228_config>
  pll_Init_V(&signal_V, 50, 20000, 10.f);
 80006c2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80006c6:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006ca:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8000754 <MX_FREERTOS_Init+0xa8>
 80006ce:	4822      	ldr	r0, [pc, #136]	@ (8000758 <MX_FREERTOS_Init+0xac>)
 80006d0:	f010 fc8e 	bl	8010ff0 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006d4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006d8:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000754 <MX_FREERTOS_Init+0xa8>
 80006dc:	481f      	ldr	r0, [pc, #124]	@ (800075c <MX_FREERTOS_Init+0xb0>)
 80006de:	f010 fd1f 	bl	8011120 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	481e      	ldr	r0, [pc, #120]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006e6:	f008 fc85 	bl	8008ff4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	481c      	ldr	r0, [pc, #112]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006ee:	f008 fc81 	bl	8008ff4 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006f2:	2108      	movs	r1, #8
 80006f4:	481a      	ldr	r0, [pc, #104]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006f6:	f008 fc7d 	bl	8008ff4 <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4819      	ldr	r0, [pc, #100]	@ (8000764 <MX_FREERTOS_Init+0xb8>)
 80006fe:	f001 fb99 	bl	8001e34 <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 8000706:	f00f fd51 	bl	80101ac <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_FREERTOS_Init+0xc0>)
 800070c:	2100      	movs	r1, #0
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 8000710:	f00c fa60 	bl	800cbd4 <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 800071a:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 800071c:	2100      	movs	r1, #0
 800071e:	4817      	ldr	r0, [pc, #92]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 8000720:	f00c fa58 	bl	800cbd4 <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_FREERTOS_Init+0xd4>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <MX_FREERTOS_Init+0xd8>)
 800072c:	2100      	movs	r1, #0
 800072e:	4816      	ldr	r0, [pc, #88]	@ (8000788 <MX_FREERTOS_Init+0xdc>)
 8000730:	f00c fa50 	bl	800cbd4 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a15      	ldr	r2, [pc, #84]	@ (800078c <MX_FREERTOS_Init+0xe0>)
 8000738:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <MX_FREERTOS_Init+0xe4>)
 800073c:	2100      	movs	r1, #0
 800073e:	4815      	ldr	r0, [pc, #84]	@ (8000794 <MX_FREERTOS_Init+0xe8>)
 8000740:	f00c fa48 	bl	800cbd4 <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_FREERTOS_Init+0xec>)
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	08016320 	.word	0x08016320
 8000754:	42480000 	.word	0x42480000
 8000758:	24006f8c 	.word	0x24006f8c
 800075c:	24006f90 	.word	0x24006f90
 8000760:	24000508 	.word	0x24000508
 8000764:	24000310 	.word	0x24000310
 8000768:	24000554 	.word	0x24000554
 800076c:	08014a80 	.word	0x08014a80
 8000770:	0800079d 	.word	0x0800079d
 8000774:	24000344 	.word	0x24000344
 8000778:	08014aa4 	.word	0x08014aa4
 800077c:	080007fd 	.word	0x080007fd
 8000780:	24000348 	.word	0x24000348
 8000784:	08014ac8 	.word	0x08014ac8
 8000788:	080008d5 	.word	0x080008d5
 800078c:	2400034c 	.word	0x2400034c
 8000790:	08014aec 	.word	0x08014aec
 8000794:	0800091d 	.word	0x0800091d
 8000798:	24000350 	.word	0x24000350

0800079c <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007a4:	f00e ff88 	bl	800f6b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2102      	movs	r1, #2
 80007ac:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <StartStateLED+0x5c>)
 80007ae:	f001 ff1f 	bl	80025f0 <HAL_GPIO_WritePin>
    osDelay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b6:	f00c fa9f 	bl	800ccf8 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007ba:	2101      	movs	r1, #1
 80007bc:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <StartStateLED+0x5c>)
 80007be:	f001 ff30 	bl	8002622 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007c2:	2064      	movs	r0, #100	@ 0x64
 80007c4:	f00c fa98 	bl	800ccf8 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007c8:	2101      	movs	r1, #1
 80007ca:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <StartStateLED+0x5c>)
 80007cc:	f001 ff29 	bl	8002622 <HAL_GPIO_TogglePin>
    osDelay(200);
 80007d0:	20c8      	movs	r0, #200	@ 0xc8
 80007d2:	f00c fa91 	bl	800ccf8 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007d6:	2101      	movs	r1, #1
 80007d8:	4807      	ldr	r0, [pc, #28]	@ (80007f8 <StartStateLED+0x5c>)
 80007da:	f001 ff22 	bl	8002622 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007de:	2064      	movs	r0, #100	@ 0x64
 80007e0:	f00c fa8a 	bl	800ccf8 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007e4:	2101      	movs	r1, #1
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <StartStateLED+0x5c>)
 80007e8:	f001 ff1b 	bl	8002622 <HAL_GPIO_TogglePin>
    osDelay(200);
 80007ec:	20c8      	movs	r0, #200	@ 0xc8
 80007ee:	f00c fa83 	bl	800ccf8 <osDelay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007f2:	bf00      	nop
 80007f4:	e7d8      	b.n	80007a8 <StartStateLED+0xc>
 80007f6:	bf00      	nop
 80007f8:	58022000 	.word	0x58022000

080007fc <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af02      	add	r7, sp, #8
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */

  /* Infinite loop */
  for (;;)
  {
    sprintf((char *)text, "Ua: %6.3f Ub: %6.3f", signal_V->basic->input_a, signal_V->basic->input_b);
 8000804:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <StartOledShow+0xb8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	edd3 7a00 	vldr	s15, [r3]
 800080e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000812:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <StartOledShow+0xb8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	edd3 7a01 	vldr	s15, [r3, #4]
 800081c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000820:	ed8d 7b00 	vstr	d7, [sp]
 8000824:	ec53 2b16 	vmov	r2, r3, d6
 8000828:	4923      	ldr	r1, [pc, #140]	@ (80008b8 <StartOledShow+0xbc>)
 800082a:	4824      	ldr	r0, [pc, #144]	@ (80008bc <StartOledShow+0xc0>)
 800082c:	f011 fe16 	bl	801245c <siprintf>
    OLED_ShowString(0, 0, text, 12);
 8000830:	230c      	movs	r3, #12
 8000832:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <StartOledShow+0xc0>)
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f010 f888 	bl	801094c <OLED_ShowString>
    sprintf((char *)text, "Ia: %6.3f Ib: %6.3f", adcValue[3], adcValue[4]);
 800083c:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <StartOledShow+0xc4>)
 800083e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000842:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <StartOledShow+0xc4>)
 8000848:	edd3 7a04 	vldr	s15, [r3, #16]
 800084c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000850:	ed8d 7b00 	vstr	d7, [sp]
 8000854:	ec53 2b16 	vmov	r2, r3, d6
 8000858:	491a      	ldr	r1, [pc, #104]	@ (80008c4 <StartOledShow+0xc8>)
 800085a:	4818      	ldr	r0, [pc, #96]	@ (80008bc <StartOledShow+0xc0>)
 800085c:	f011 fdfe 	bl	801245c <siprintf>
    OLED_ShowString(0, 12, text, 12);
 8000860:	230c      	movs	r3, #12
 8000862:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <StartOledShow+0xc0>)
 8000864:	210c      	movs	r1, #12
 8000866:	2000      	movs	r0, #0
 8000868:	f010 f870 	bl	801094c <OLED_ShowString>
    sprintf((char *)text, "cnt: %ld", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1));
 800086c:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <StartOledShow+0xcc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000872:	461a      	mov	r2, r3
 8000874:	4915      	ldr	r1, [pc, #84]	@ (80008cc <StartOledShow+0xd0>)
 8000876:	4811      	ldr	r0, [pc, #68]	@ (80008bc <StartOledShow+0xc0>)
 8000878:	f011 fdf0 	bl	801245c <siprintf>
    OLED_ShowString(0, 24, text, 12);
 800087c:	230c      	movs	r3, #12
 800087e:	4a0f      	ldr	r2, [pc, #60]	@ (80008bc <StartOledShow+0xc0>)
 8000880:	2118      	movs	r1, #24
 8000882:	2000      	movs	r0, #0
 8000884:	f010 f862 	bl	801094c <OLED_ShowString>
    // 获取当前堆栈剩余空间
    sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
 8000888:	2000      	movs	r0, #0
 800088a:	f00d fe29 	bl	800e4e0 <uxTaskGetStackHighWaterMark>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	490f      	ldr	r1, [pc, #60]	@ (80008d0 <StartOledShow+0xd4>)
 8000894:	4809      	ldr	r0, [pc, #36]	@ (80008bc <StartOledShow+0xc0>)
 8000896:	f011 fde1 	bl	801245c <siprintf>
    OLED_ShowString(0, 48, text, 12);
 800089a:	230c      	movs	r3, #12
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <StartOledShow+0xc0>)
 800089e:	2130      	movs	r1, #48	@ 0x30
 80008a0:	2000      	movs	r0, #0
 80008a2:	f010 f853 	bl	801094c <OLED_ShowString>
    OLED_Refresh();
 80008a6:	f00f fee1 	bl	801066c <OLED_Refresh>
    osDelay(100);
 80008aa:	2064      	movs	r0, #100	@ 0x64
 80008ac:	f00c fa24 	bl	800ccf8 <osDelay>
    sprintf((char *)text, "Ua: %6.3f Ub: %6.3f", signal_V->basic->input_a, signal_V->basic->input_b);
 80008b0:	bf00      	nop
 80008b2:	e7a7      	b.n	8000804 <StartOledShow+0x8>
 80008b4:	24006f8c 	.word	0x24006f8c
 80008b8:	080149cc 	.word	0x080149cc
 80008bc:	24000324 	.word	0x24000324
 80008c0:	24006f64 	.word	0x24006f64
 80008c4:	080149e0 	.word	0x080149e0
 80008c8:	24000508 	.word	0x24000508
 80008cc:	080149f4 	.word	0x080149f4
 80008d0:	08014a00 	.word	0x08014a00

080008d4 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <StartDcSamp+0x3c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f00f fded 	bl	80104c0 <INA228_getVBUS_V>
 80008e6:	eef0 7a40 	vmov.f32	s15, s0
 80008ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <StartDcSamp+0x40>)
 80008ec:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <StartDcSamp+0x3c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00f fe67 	bl	80105c8 <INA228_getCURRENT_A>
 80008fa:	eef0 7a40 	vmov.f32	s15, s0
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <StartDcSamp+0x44>)
 8000900:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 8000904:	200a      	movs	r0, #10
 8000906:	f00c f9f7 	bl	800ccf8 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 800090a:	bf00      	nop
 800090c:	e7e6      	b.n	80008dc <StartDcSamp+0x8>
 800090e:	bf00      	nop
 8000910:	08016320 	.word	0x08016320
 8000914:	24006f84 	.word	0x24006f84
 8000918:	24006f88 	.word	0x24006f88

0800091c <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsartDebug */
  /* Infinite loop */
  for (;;)
  {
    CDC_Transmit_FS((uint8_t *)"Hello World!\r\n", 14);
 8000924:	210e      	movs	r1, #14
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <StartUsartDebug+0x1c>)
 8000928:	f00e ff86 	bl	800f838 <CDC_Transmit_FS>
    osDelay(100);
 800092c:	2064      	movs	r0, #100	@ 0x64
 800092e:	f00c f9e3 	bl	800ccf8 <osDelay>
    CDC_Transmit_FS((uint8_t *)"Hello World!\r\n", 14);
 8000932:	bf00      	nop
 8000934:	e7f6      	b.n	8000924 <StartUsartDebug+0x8>
 8000936:	bf00      	nop
 8000938:	08014a10 	.word	0x08014a10

0800093c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b69      	ldr	r3, [pc, #420]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	4a67      	ldr	r2, [pc, #412]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000962:	4b65      	ldr	r3, [pc, #404]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000970:	4b61      	ldr	r3, [pc, #388]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	4a60      	ldr	r2, [pc, #384]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000980:	4b5d      	ldr	r3, [pc, #372]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b5a      	ldr	r3, [pc, #360]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	4a58      	ldr	r2, [pc, #352]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099e:	4b56      	ldr	r3, [pc, #344]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b52      	ldr	r3, [pc, #328]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	4a51      	ldr	r2, [pc, #324]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009bc:	4b4e      	ldr	r3, [pc, #312]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ca:	4b4b      	ldr	r3, [pc, #300]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	4a49      	ldr	r2, [pc, #292]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009da:	4b47      	ldr	r3, [pc, #284]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009e8:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	4a42      	ldr	r2, [pc, #264]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f8:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <MX_GPIO_Init+0x1bc>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	483c      	ldr	r0, [pc, #240]	@ (8000afc <MX_GPIO_Init+0x1c0>)
 8000a0c:	f001 fdf0 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2102      	movs	r1, #2
 8000a14:	483a      	ldr	r0, [pc, #232]	@ (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a16:	f001 fdeb 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2188      	movs	r1, #136	@ 0x88
 8000a1e:	4839      	ldr	r0, [pc, #228]	@ (8000b04 <MX_GPIO_Init+0x1c8>)
 8000a20:	f001 fde6 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2101      	movs	r1, #1
 8000a28:	4837      	ldr	r0, [pc, #220]	@ (8000b08 <MX_GPIO_Init+0x1cc>)
 8000a2a:	f001 fde1 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2140      	movs	r1, #64	@ 0x40
 8000a32:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <MX_GPIO_Init+0x1cc>)
 8000a34:	f001 fddc 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	482b      	ldr	r0, [pc, #172]	@ (8000afc <MX_GPIO_Init+0x1c0>)
 8000a50:	f001 fc1e 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4825      	ldr	r0, [pc, #148]	@ (8000b00 <MX_GPIO_Init+0x1c4>)
 8000a6c:	f001 fc10 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000a70:	2388      	movs	r3, #136	@ 0x88
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	481f      	ldr	r0, [pc, #124]	@ (8000b04 <MX_GPIO_Init+0x1c8>)
 8000a88:	f001 fc02 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000a8c:	2340      	movs	r3, #64	@ 0x40
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a90:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <MX_GPIO_Init+0x1c8>)
 8000aa2:	f001 fbf5 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <MX_GPIO_Init+0x1cc>)
 8000abe:	f001 fbe7 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000ac2:	2340      	movs	r3, #64	@ 0x40
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	@ (8000b08 <MX_GPIO_Init+0x1cc>)
 8000ada:	f001 fbd9 	bl	8002290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	2017      	movs	r0, #23
 8000ae4:	f001 f8e4 	bl	8001cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ae8:	2017      	movs	r0, #23
 8000aea:	f001 f8fb 	bl	8001ce4 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	@ 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58020800 	.word	0x58020800
 8000b00:	58020400 	.word	0x58020400
 8000b04:	58021800 	.word	0x58021800
 8000b08:	58022000 	.word	0x58022000

08000b0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b12:	4a1c      	ldr	r2, [pc, #112]	@ (8000b84 <MX_I2C1_Init+0x78>)
 8000b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <MX_I2C1_Init+0x7c>)
 8000b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b46:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b48:	f001 fda0 	bl	800268c <HAL_I2C_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b52:	f000 fa16 	bl	8000f82 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4809      	ldr	r0, [pc, #36]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b5a:	f002 fb23 	bl	80031a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b64:	f000 fa0d 	bl	8000f82 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_I2C1_Init+0x74>)
 8000b6c:	f002 fb65 	bl	800323a <HAL_I2CEx_ConfigDigitalFilter>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f000 fa04 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	24000354 	.word	0x24000354
 8000b84:	40005400 	.word	0x40005400
 8000b88:	307075b1 	.word	0x307075b1

08000b8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	22c0      	movs	r2, #192	@ 0xc0
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f011 fcb8 	bl	8012522 <memset>
  if(i2cHandle->Instance==I2C1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a26      	ldr	r2, [pc, #152]	@ (8000c50 <HAL_I2C_MspInit+0xc4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d145      	bne.n	8000c48 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bbc:	f04f 0208 	mov.w	r2, #8
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 fe78 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bde:	f000 f9d0 	bl	8000f82 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <HAL_I2C_MspInit+0xc8>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c54 <HAL_I2C_MspInit+0xc8>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_I2C_MspInit+0xc8>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c00:	23c0      	movs	r3, #192	@ 0xc0
 8000c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c06:	2312      	movs	r3, #18
 8000c08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c22:	4619      	mov	r1, r3
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <HAL_I2C_MspInit+0xcc>)
 8000c26:	f001 fb33 	bl	8002290 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_I2C_MspInit+0xc8>)
 8000c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c30:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_I2C_MspInit+0xc8>)
 8000c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_I2C_MspInit+0xc8>)
 8000c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c48:	bf00      	nop
 8000c4a:	37e8      	adds	r7, #232	@ 0xe8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40005400 	.word	0x40005400
 8000c54:	58024400 	.word	0x58024400
 8000c58:	58020400 	.word	0x58020400

08000c5c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c62:	f000 f961 	bl	8000f28 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c66:	4b40      	ldr	r3, [pc, #256]	@ (8000d68 <main+0x10c>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d11b      	bne.n	8000caa <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c72:	f3bf 8f4f 	dsb	sy
}
 8000c76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c78:	f3bf 8f6f 	isb	sy
}
 8000c7c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <main+0x10c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c86:	f3bf 8f4f 	dsb	sy
}
 8000c8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c8c:	f3bf 8f6f 	isb	sy
}
 8000c90:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c92:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <main+0x10c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a34      	ldr	r2, [pc, #208]	@ (8000d68 <main+0x10c>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9e:	f3bf 8f4f 	dsb	sy
}
 8000ca2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ca4:	f3bf 8f6f 	isb	sy
}
 8000ca8:	e000      	b.n	8000cac <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000caa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000cac:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <main+0x10c>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d138      	bne.n	8000d2a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <main+0x10c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc0:	f3bf 8f4f 	dsb	sy
}
 8000cc4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <main+0x10c>)
 8000cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ccc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	0b5b      	lsrs	r3, r3, #13
 8000cd2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cd6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ce0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	015a      	lsls	r2, r3, #5
 8000ce6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000cea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf0:	491d      	ldr	r1, [pc, #116]	@ (8000d68 <main+0x10c>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	1e5a      	subs	r2, r3, #1
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1ef      	bne.n	8000ce2 <main+0x86>
    } while(sets-- != 0U);
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1e5a      	subs	r2, r3, #1
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1e5      	bne.n	8000cd8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0c:	f3bf 8f4f 	dsb	sy
}
 8000d10:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <main+0x10c>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <main+0x10c>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d1e:	f3bf 8f4f 	dsb	sy
}
 8000d22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d24:	f3bf 8f6f 	isb	sy
}
 8000d28:	e000      	b.n	8000d2c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d2a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f000 fe7c 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f81c 	bl	8000d6c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d34:	f000 f8c8 	bl	8000ec8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d38:	f7ff fe00 	bl	800093c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d3c:	f000 f928 	bl	8000f90 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d40:	f000 f97c 	bl	800103c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000d44:	f000 fd34 	bl	80017b0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d48:	f7ff fee0 	bl	8000b0c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d4c:	f000 fc68 	bl	8001620 <MX_TIM1_Init>
  MX_DAC1_Init();
 8000d50:	f7ff fc2c 	bl	80005ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000d54:	f00e fcb0 	bl	800f6b8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d58:	f00b fef2 	bl	800cb40 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d5c:	f7ff fca6 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d60:	f00b ff12 	bl	800cb88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <main+0x108>
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09e      	sub	sp, #120	@ 0x78
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d76:	224c      	movs	r2, #76	@ 0x4c
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f011 fbd1 	bl	8012522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2220      	movs	r2, #32
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f011 fbca 	bl	8012522 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f003 fd3e 	bl	8004810 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <SystemClock_Config+0x150>)
 8000d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9c:	4a47      	ldr	r2, [pc, #284]	@ (8000ebc <SystemClock_Config+0x150>)
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000da4:	4b45      	ldr	r3, [pc, #276]	@ (8000ebc <SystemClock_Config+0x150>)
 8000da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b44      	ldr	r3, [pc, #272]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a43      	ldr	r2, [pc, #268]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000dc6:	bf00      	nop
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dd4:	d1f8      	bne.n	8000dc8 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <SystemClock_Config+0x158>)
 8000dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ddc:	4a39      	ldr	r2, [pc, #228]	@ (8000ec4 <SystemClock_Config+0x158>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000de6:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <SystemClock_Config+0x158>)
 8000de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a30      	ldr	r2, [pc, #192]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000dfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <SystemClock_Config+0x150>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e12:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <SystemClock_Config+0x150>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <SystemClock_Config+0x150>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000e26:	bf00      	nop
 8000e28:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <SystemClock_Config+0x154>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e34:	d1f8      	bne.n	8000e28 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e44:	2302      	movs	r3, #2
 8000e46:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e4c:	23c0      	movs	r3, #192	@ 0xc0
 8000e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e54:	2314      	movs	r3, #20
 8000e56:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fd19 	bl	80048a4 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e78:	f000 f883 	bl	8000f82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000e7c:	233f      	movs	r3, #63	@ 0x3f
 8000e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2303      	movs	r3, #3
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e8c:	2340      	movs	r3, #64	@ 0x40
 8000e8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e90:	2340      	movs	r3, #64	@ 0x40
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e9a:	2340      	movs	r3, #64	@ 0x40
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f004 f957 	bl	8005158 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000eb0:	f000 f867 	bl	8000f82 <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3778      	adds	r7, #120	@ 0x78
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	58000400 	.word	0x58000400
 8000ec0:	58024800 	.word	0x58024800
 8000ec4:	58024400 	.word	0x58024400

08000ec8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0b0      	sub	sp, #192	@ 0xc0
 8000ecc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ece:	463b      	mov	r3, r7
 8000ed0:	22c0      	movs	r2, #192	@ 0xc0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f011 fb24 	bl	8012522 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000eda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000ee6:	2319      	movs	r3, #25
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000eea:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 fcd9 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f1c:	f000 f831 	bl	8000f82 <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	37c0      	adds	r7, #192	@ 0xc0
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f3a:	f000 fee1 	bl	8001d00 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f46:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000f4a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fefe 	bl	8001d70 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f74:	2004      	movs	r0, #4
 8000f76:	f000 fedb 	bl	8001d30 <HAL_MPU_Enable>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f86:	b672      	cpsid	i
}
 8000f88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8a:	bf00      	nop
 8000f8c:	e7fd      	b.n	8000f8a <Error_Handler+0x8>
	...

08000f90 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000f96:	4a28      	ldr	r2, [pc, #160]	@ (8001038 <MX_SPI1_Init+0xa8>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000f9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fa4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fa8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fbe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fea:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ff0:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_SPI1_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8001010:	2200      	movs	r2, #0
 8001012:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_SPI1_Init+0xa4>)
 8001022:	f005 ffbf 	bl	8006fa4 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800102c:	f7ff ffa9 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	240003a8 	.word	0x240003a8
 8001038:	40013000 	.word	0x40013000

0800103c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001042:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <MX_SPI2_Init+0xac>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001048:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800104c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001050:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001054:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001058:	220f      	movs	r2, #15
 800105a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800105e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001062:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800106c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001070:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001074:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001078:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ac:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_SPI2_Init+0xa8>)
 80010d2:	f005 ff67 	bl	8006fa4 <HAL_SPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80010dc:	f7ff ff51 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	24000430 	.word	0x24000430
 80010e8:	40003800 	.word	0x40003800

080010ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a34      	ldr	r2, [pc, #208]	@ (80011dc <HAL_SPI_MspInit+0xf0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d12e      	bne.n	800116c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001114:	4a32      	ldr	r2, [pc, #200]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001116:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800111a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800111e:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113c:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 800114a:	23a0      	movs	r3, #160	@ 0xa0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115a:	2305      	movs	r3, #5
 800115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	481f      	ldr	r0, [pc, #124]	@ (80011e4 <HAL_SPI_MspInit+0xf8>)
 8001166:	f001 f893 	bl	8002290 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800116a:	e032      	b.n	80011d2 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1d      	ldr	r2, [pc, #116]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12d      	bne.n	80011d2 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800117c:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_SPI_MspInit+0xf4>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80011b2:	2306      	movs	r3, #6
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c2:	2305      	movs	r3, #5
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	@ (80011ec <HAL_SPI_MspInit+0x100>)
 80011ce:	f001 f85f 	bl	8002290 <HAL_GPIO_Init>
}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	@ 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40013000 	.word	0x40013000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58020000 	.word	0x58020000
 80011e8:	40003800 	.word	0x40003800
 80011ec:	58022000 	.word	0x58022000

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_MspInit+0x38>)
 80011f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_MspInit+0x38>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_MspInit+0x38>)
 8001208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	210f      	movs	r1, #15
 8001218:	f06f 0001 	mvn.w	r0, #1
 800121c:	f000 fd48 	bl	8001cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024400 	.word	0x58024400

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	@ 0x40
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d827      	bhi.n	800128a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2036      	movs	r0, #54	@ 0x36
 8001240:	f000 fd36 	bl	8001cb0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001244:	2036      	movs	r0, #54	@ 0x36
 8001246:	f000 fd4d 	bl	8001ce4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800124a:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <HAL_InitTick+0xc4>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001256:	4a27      	ldr	r2, [pc, #156]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_InitTick+0xc8>)
 8001262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126e:	f107 0210 	add.w	r2, r7, #16
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f004 fae3 	bl	8005844 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001284:	2b00      	cmp	r3, #0
 8001286:	d106      	bne.n	8001296 <HAL_InitTick+0x6a>
 8001288:	e001      	b.n	800128e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e02b      	b.n	80012e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800128e:	f004 fac3 	bl	8005818 <HAL_RCC_GetPCLK1Freq>
 8001292:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001296:	f004 fabf 	bl	8005818 <HAL_RCC_GetPCLK1Freq>
 800129a:	4603      	mov	r3, r0
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_InitTick+0xcc>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	3b01      	subs	r3, #1
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <HAL_InitTick+0xd0>)
 80012b0:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <HAL_InitTick+0xd4>)
 80012b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_InitTick+0xd0>)
 80012b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <HAL_InitTick+0xd0>)
 80012be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_InitTick+0xd0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_InitTick+0xd0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ce:	480b      	ldr	r0, [pc, #44]	@ (80012fc <HAL_InitTick+0xd0>)
 80012d0:	f006 fcd5 	bl	8007c7e <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d104      	bne.n	80012e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012da:	4808      	ldr	r0, [pc, #32]	@ (80012fc <HAL_InitTick+0xd0>)
 80012dc:	f006 fd26 	bl	8007d2c <HAL_TIM_Base_Start_IT>
 80012e0:	4603      	mov	r3, r0
 80012e2:	e000      	b.n	80012e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3740      	adds	r7, #64	@ 0x40
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24000008 	.word	0x24000008
 80012f4:	58024400 	.word	0x58024400
 80012f8:	431bde83 	.word	0x431bde83
 80012fc:	240004b8 	.word	0x240004b8
 8001300:	40001000 	.word	0x40001000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <NMI_Handler+0x4>

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <UsageFault_Handler+0x4>

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800133e:	2040      	movs	r0, #64	@ 0x40
 8001340:	f001 f989 	bl	8002656 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <TIM6_DAC_IRQHandler+0x20>)
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001356:	4804      	ldr	r0, [pc, #16]	@ (8001368 <TIM6_DAC_IRQHandler+0x20>)
 8001358:	f000 fdc3 	bl	8001ee2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <TIM6_DAC_IRQHandler+0x24>)
 800135e:	f006 fecd 	bl	80080fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000310 	.word	0x24000310
 800136c:	240004b8 	.word	0x240004b8

08001370 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <OTG_FS_IRQHandler+0x10>)
 8001376:	f002 f8ed 	bl	8003554 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	240063d4 	.word	0x240063d4

08001384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return 1;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_kill>:

int _kill(int pid, int sig)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800139e:	f011 f923 	bl	80125e8 <__errno>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2216      	movs	r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
  return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_exit>:

void _exit (int status)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffe7 	bl	8001394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013c6:	bf00      	nop
 80013c8:	e7fd      	b.n	80013c6 <_exit+0x12>

080013ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e00a      	b.n	80013f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013dc:	f3af 8000 	nop.w
 80013e0:	4601      	mov	r1, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	60ba      	str	r2, [r7, #8]
 80013e8:	b2ca      	uxtb	r2, r1
 80013ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dbf0      	blt.n	80013dc <_read+0x12>
  }

  return len;
 80013fa:	687b      	ldr	r3, [r7, #4]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e009      	b.n	800142a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	60ba      	str	r2, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	dbf1      	blt.n	8001416 <_write+0x12>
  }
  return len;
 8001432:	687b      	ldr	r3, [r7, #4]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_close>:

int _close(int file)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001464:	605a      	str	r2, [r3, #4]
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_isatty>:

int _isatty(int file)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f011 f888 	bl	80125e8 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	24080000 	.word	0x24080000
 8001504:	00004000 	.word	0x00004000
 8001508:	24000504 	.word	0x24000504
 800150c:	240070e0 	.word	0x240070e0

08001510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001514:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <SystemInit+0xe4>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151a:	4a36      	ldr	r2, [pc, #216]	@ (80015f4 <SystemInit+0xe4>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001524:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <SystemInit+0xe8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	2b06      	cmp	r3, #6
 800152e:	d807      	bhi.n	8001540 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001530:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <SystemInit+0xe8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 030f 	bic.w	r3, r3, #15
 8001538:	4a2f      	ldr	r2, [pc, #188]	@ (80015f8 <SystemInit+0xe8>)
 800153a:	f043 0307 	orr.w	r3, r3, #7
 800153e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <SystemInit+0xec>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a2d      	ldr	r2, [pc, #180]	@ (80015fc <SystemInit+0xec>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800154c:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <SystemInit+0xec>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001552:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <SystemInit+0xec>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4929      	ldr	r1, [pc, #164]	@ (80015fc <SystemInit+0xec>)
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <SystemInit+0xf0>)
 800155a:	4013      	ands	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <SystemInit+0xe8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <SystemInit+0xe8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 030f 	bic.w	r3, r3, #15
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <SystemInit+0xe8>)
 8001574:	f043 0307 	orr.w	r3, r3, #7
 8001578:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <SystemInit+0xec>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001580:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <SystemInit+0xec>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001586:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <SystemInit+0xec>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <SystemInit+0xec>)
 800158e:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <SystemInit+0xf4>)
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <SystemInit+0xec>)
 8001594:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <SystemInit+0xf8>)
 8001596:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <SystemInit+0xec>)
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <SystemInit+0xfc>)
 800159c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <SystemInit+0xec>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <SystemInit+0xec>)
 80015a6:	4a19      	ldr	r2, [pc, #100]	@ (800160c <SystemInit+0xfc>)
 80015a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <SystemInit+0xec>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <SystemInit+0xec>)
 80015b2:	4a16      	ldr	r2, [pc, #88]	@ (800160c <SystemInit+0xfc>)
 80015b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <SystemInit+0xec>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <SystemInit+0xec>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	@ (80015fc <SystemInit+0xec>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <SystemInit+0xec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <SystemInit+0x100>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <SystemInit+0x104>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015da:	d202      	bcs.n	80015e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <SystemInit+0x108>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <SystemInit+0x10c>)
 80015e4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00
 80015f8:	52002000 	.word	0x52002000
 80015fc:	58024400 	.word	0x58024400
 8001600:	eaf6ed7f 	.word	0xeaf6ed7f
 8001604:	02020200 	.word	0x02020200
 8001608:	01ff0000 	.word	0x01ff0000
 800160c:	01010280 	.word	0x01010280
 8001610:	5c001000 	.word	0x5c001000
 8001614:	ffff0000 	.word	0xffff0000
 8001618:	51008108 	.word	0x51008108
 800161c:	52004000 	.word	0x52004000

08001620 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b09a      	sub	sp, #104	@ 0x68
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001640:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	222c      	movs	r2, #44	@ 0x2c
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f010 ff61 	bl	8012522 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001660:	4b51      	ldr	r3, [pc, #324]	@ (80017a8 <MX_TIM1_Init+0x188>)
 8001662:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <MX_TIM1_Init+0x18c>)
 8001664:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001666:	4b50      	ldr	r3, [pc, #320]	@ (80017a8 <MX_TIM1_Init+0x188>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800166c:	4b4e      	ldr	r3, [pc, #312]	@ (80017a8 <MX_TIM1_Init+0x188>)
 800166e:	2220      	movs	r2, #32
 8001670:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8001672:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <MX_TIM1_Init+0x188>)
 8001674:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001678:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b4b      	ldr	r3, [pc, #300]	@ (80017a8 <MX_TIM1_Init+0x188>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001680:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <MX_TIM1_Init+0x188>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b48      	ldr	r3, [pc, #288]	@ (80017a8 <MX_TIM1_Init+0x188>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800168c:	4846      	ldr	r0, [pc, #280]	@ (80017a8 <MX_TIM1_Init+0x188>)
 800168e:	f006 faf6 	bl	8007c7e <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001698:	f7ff fc73 	bl	8000f82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016a6:	4619      	mov	r1, r3
 80016a8:	483f      	ldr	r0, [pc, #252]	@ (80017a8 <MX_TIM1_Init+0x188>)
 80016aa:	f006 ff43 	bl	8008534 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016b4:	f7ff fc65 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b8:	483b      	ldr	r0, [pc, #236]	@ (80017a8 <MX_TIM1_Init+0x188>)
 80016ba:	f006 fbaf 	bl	8007e1c <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016c4:	f7ff fc5d 	bl	8000f82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016d8:	4619      	mov	r1, r3
 80016da:	4833      	ldr	r0, [pc, #204]	@ (80017a8 <MX_TIM1_Init+0x188>)
 80016dc:	f007 fd4c 	bl	8009178 <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016e6:	f7ff fc4c 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ea:	2360      	movs	r3, #96	@ 0x60
 80016ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 80016ee:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016fc:	2304      	movs	r3, #4
 80016fe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001708:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4825      	ldr	r0, [pc, #148]	@ (80017a8 <MX_TIM1_Init+0x188>)
 8001712:	f006 fdfb 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800171c:	f7ff fc31 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001720:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001724:	2204      	movs	r2, #4
 8001726:	4619      	mov	r1, r3
 8001728:	481f      	ldr	r0, [pc, #124]	@ (80017a8 <MX_TIM1_Init+0x188>)
 800172a:	f006 fdef 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001734:	f7ff fc25 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800173c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001740:	2208      	movs	r2, #8
 8001742:	4619      	mov	r1, r3
 8001744:	4818      	ldr	r0, [pc, #96]	@ (80017a8 <MX_TIM1_Init+0x188>)
 8001746:	f006 fde1 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001750:	f7ff fc17 	bl	8000f82 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <MX_TIM1_Init+0x188>)
 800178a:	f007 fd83 	bl	8009294 <HAL_TIMEx_ConfigBreakDeadTime>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8001794:	f7ff fbf5 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001798:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <MX_TIM1_Init+0x188>)
 800179a:	f000 f8b9 	bl	8001910 <HAL_TIM_MspPostInit>

}
 800179e:	bf00      	nop
 80017a0:	3768      	adds	r7, #104	@ 0x68
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000508 	.word	0x24000508
 80017ac:	40010000 	.word	0x40010000

080017b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	@ 0x38
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e2:	4b2e      	ldr	r3, [pc, #184]	@ (800189c <MX_TIM2_Init+0xec>)
 80017e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ea:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <MX_TIM2_Init+0xec>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <MX_TIM2_Init+0xec>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <MX_TIM2_Init+0xec>)
 80017f8:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80017fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b27      	ldr	r3, [pc, #156]	@ (800189c <MX_TIM2_Init+0xec>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001804:	4b25      	ldr	r3, [pc, #148]	@ (800189c <MX_TIM2_Init+0xec>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800180a:	4824      	ldr	r0, [pc, #144]	@ (800189c <MX_TIM2_Init+0xec>)
 800180c:	f006 fa37 	bl	8007c7e <HAL_TIM_Base_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001816:	f7ff fbb4 	bl	8000f82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001820:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001824:	4619      	mov	r1, r3
 8001826:	481d      	ldr	r0, [pc, #116]	@ (800189c <MX_TIM2_Init+0xec>)
 8001828:	f006 fe84 	bl	8008534 <HAL_TIM_ConfigClockSource>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001832:	f7ff fba6 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001836:	4819      	ldr	r0, [pc, #100]	@ (800189c <MX_TIM2_Init+0xec>)
 8001838:	f006 faf0 	bl	8007e1c <HAL_TIM_PWM_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001842:	f7ff fb9e 	bl	8000f82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4811      	ldr	r0, [pc, #68]	@ (800189c <MX_TIM2_Init+0xec>)
 8001856:	f007 fc8f 	bl	8009178 <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001860:	f7ff fb8f 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001864:	2360      	movs	r3, #96	@ 0x60
 8001866:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001868:	f242 3327 	movw	r3, #8999	@ 0x2327
 800186c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001876:	463b      	mov	r3, r7
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	4807      	ldr	r0, [pc, #28]	@ (800189c <MX_TIM2_Init+0xec>)
 800187e:	f006 fd45 	bl	800830c <HAL_TIM_PWM_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001888:	f7ff fb7b 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800188c:	4803      	ldr	r0, [pc, #12]	@ (800189c <MX_TIM2_Init+0xec>)
 800188e:	f000 f83f 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8001892:	bf00      	nop
 8001894:	3738      	adds	r7, #56	@ 0x38
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24000554 	.word	0x24000554

080018a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a16      	ldr	r2, [pc, #88]	@ (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10f      	bne.n	80018d2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018d0:	e013      	b.n	80018fa <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018da:	d10e      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40010000 	.word	0x40010000
 800190c:	58024400 	.word	0x58024400

08001910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a25      	ldr	r2, [pc, #148]	@ (80019c4 <HAL_TIM_MspPostInit+0xb4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d120      	bne.n	8001974 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_TIM_MspPostInit+0xb8>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001938:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <HAL_TIM_MspPostInit+0xb8>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <HAL_TIM_MspPostInit+0xb8>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001950:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001962:	2301      	movs	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4817      	ldr	r0, [pc, #92]	@ (80019cc <HAL_TIM_MspPostInit+0xbc>)
 800196e:	f000 fc8f 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001972:	e023      	b.n	80019bc <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800197c:	d11e      	bne.n	80019bc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_TIM_MspPostInit+0xb8>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001984:	4a10      	ldr	r2, [pc, #64]	@ (80019c8 <HAL_TIM_MspPostInit+0xb8>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <HAL_TIM_MspPostInit+0xb8>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ac:	2301      	movs	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4806      	ldr	r0, [pc, #24]	@ (80019d0 <HAL_TIM_MspPostInit+0xc0>)
 80019b8:	f000 fc6a 	bl	8002290 <HAL_GPIO_Init>
}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	@ 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40010000 	.word	0x40010000
 80019c8:	58024400 	.word	0x58024400
 80019cc:	58020400 	.word	0x58020400
 80019d0:	58020000 	.word	0x58020000

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019d8:	f7ff fd9a 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480c      	ldr	r0, [pc, #48]	@ (8001a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019de:	490d      	ldr	r1, [pc, #52]	@ (8001a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a02:	f010 fdf7 	bl	80125f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7ff f929 	bl	8000c5c <main>
  bx  lr
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a14:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8001a18:	08016eb8 	.word	0x08016eb8
  ldr r2, =_sbss
 8001a1c:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001a20:	240070e0 	.word	0x240070e0

08001a24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC3_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f000 f933 	bl	8001c9a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a34:	f003 fd46 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_Init+0x68>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	4913      	ldr	r1, [pc, #76]	@ (8001a94 <HAL_Init+0x6c>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_Init+0x68>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a94 <HAL_Init+0x6c>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	f003 031f 	and.w	r3, r3, #31
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <HAL_Init+0x70>)
 8001a6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <HAL_Init+0x74>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a72:	2005      	movs	r0, #5
 8001a74:	f7ff fbda 	bl	800122c <HAL_InitTick>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e002      	b.n	8001a88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a82:	f7ff fbb5 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	58024400 	.word	0x58024400
 8001a94:	08014b10 	.word	0x08014b10
 8001a98:	24000004 	.word	0x24000004
 8001a9c:	24000000 	.word	0x24000000

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2400000c 	.word	0x2400000c
 8001ac4:	240005a0 	.word	0x240005a0

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	240005a0 	.word	0x240005a0

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2400000c 	.word	0x2400000c

08001b28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_GetREVID+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0c1b      	lsrs	r3, r3, #16
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	5c001000 	.word	0x5c001000

08001b40 <__NVIC_SetPriorityGrouping>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	05fa0000 	.word	0x05fa0000

08001b88 <__NVIC_GetPriorityGrouping>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	@ (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	@ (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff4c 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbe:	f7ff ff63 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001cc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	6978      	ldr	r0, [r7, #20]
 8001cca:	f7ff ffb3 	bl	8001c34 <NVIC_EncodePriority>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff82 	bl	8001be0 <__NVIC_SetPriority>
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff56 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d04:	f3bf 8f5f 	dmb	sy
}
 8001d08:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <HAL_MPU_Disable+0x28>)
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	4a06      	ldr	r2, [pc, #24]	@ (8001d28 <HAL_MPU_Disable+0x28>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d14:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_MPU_Disable+0x2c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00
 8001d2c:	e000ed90 	.word	0xe000ed90

08001d30 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d38:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <HAL_MPU_Enable+0x38>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d42:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_MPU_Enable+0x3c>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_MPU_Enable+0x3c>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4e:	f3bf 8f4f 	dsb	sy
}
 8001d52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d54:	f3bf 8f6f 	isb	sy
}
 8001d58:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed90 	.word	0xe000ed90
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	785a      	ldrb	r2, [r3, #1]
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <HAL_MPU_ConfigRegion+0x7c>)
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d80:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <HAL_MPU_ConfigRegion+0x7c>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_MPU_ConfigRegion+0x7c>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d8c:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_MPU_ConfigRegion+0x7c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7b1b      	ldrb	r3, [r3, #12]
 8001d98:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7adb      	ldrb	r3, [r3, #11]
 8001d9e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7a9b      	ldrb	r3, [r3, #10]
 8001da6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7b5b      	ldrb	r3, [r3, #13]
 8001dae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001db0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7b9b      	ldrb	r3, [r3, #14]
 8001db6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001db8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7bdb      	ldrb	r3, [r3, #15]
 8001dbe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7a5b      	ldrb	r3, [r3, #9]
 8001dc6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7a1b      	ldrb	r3, [r3, #8]
 8001dce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dd0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dda:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ddc:	6113      	str	r3, [r2, #16]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed90 	.word	0xe000ed90

08001df0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e014      	b.n	8001e2c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	791b      	ldrb	r3, [r3, #4]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fbfc 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e046      	b.n	8001ed6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	795b      	ldrb	r3, [r3, #5]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_DAC_Start+0x20>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e040      	b.n	8001ed6 <HAL_DAC_Start+0xa2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d11d      	bne.n	8001ec8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	e014      	b.n	8001ec8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2102      	movs	r1, #2
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0202 	orr.w	r2, r2, #2
 8001ec6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01d      	beq.n	8001f40 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d018      	beq.n	8001f40 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2204      	movs	r2, #4
 8001f12:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f38:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f851 	bl	8001fe2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01d      	beq.n	8001f86 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d018      	beq.n	8001f86 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2204      	movs	r2, #4
 8001f58:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f043 0202 	orr.w	r2, r3, #2
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f97b 	bl	800227c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b087      	sub	sp, #28
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e015      	b.n	8001fd6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e004      	b.n	8001fcc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3314      	adds	r3, #20
 8001fca:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_DAC_ConfigChannel+0x1e>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e12a      	b.n	8002270 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	795b      	ldrb	r3, [r3, #5]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_DAC_ConfigChannel+0x2e>
 8002022:	2302      	movs	r3, #2
 8002024:	e124      	b.n	8002270 <HAL_DAC_ConfigChannel+0x278>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2202      	movs	r2, #2
 8002030:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b04      	cmp	r3, #4
 8002038:	d17a      	bne.n	8002130 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800203a:	f7ff fd45 	bl	8001ac8 <HAL_GetTick>
 800203e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d13d      	bne.n	80020c2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002046:	e018      	b.n	800207a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002048:	f7ff fd3e 	bl	8001ac8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d911      	bls.n	800207a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205c:	4b86      	ldr	r3, [pc, #536]	@ (8002278 <HAL_DAC_ConfigChannel+0x280>)
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f043 0208 	orr.w	r2, r3, #8
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2203      	movs	r2, #3
 8002074:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e0fa      	b.n	8002270 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002080:	4b7d      	ldr	r3, [pc, #500]	@ (8002278 <HAL_DAC_ConfigChannel+0x280>)
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1df      	bne.n	8002048 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	6992      	ldr	r2, [r2, #24]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
 8002092:	e020      	b.n	80020d6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002094:	f7ff fd18 	bl	8001ac8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d90f      	bls.n	80020c2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da0a      	bge.n	80020c2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f043 0208 	orr.w	r2, r3, #8
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2203      	movs	r2, #3
 80020bc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0d6      	b.n	8002270 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	dbe3      	blt.n	8002094 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	6992      	ldr	r2, [r2, #24]
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	ea02 0103 	and.w	r1, r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	69da      	ldr	r2, [r3, #28]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	21ff      	movs	r1, #255	@ 0xff
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	ea02 0103 	and.w	r1, r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d11d      	bne.n	8002174 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	221f      	movs	r2, #31
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2207      	movs	r2, #7
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
 800219c:	e00f      	b.n	80021be <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d102      	bne.n	80021ac <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80021a6:	2301      	movs	r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021aa:	e008      	b.n	80021be <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80021b4:	2301      	movs	r3, #1
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b8:	e001      	b.n	80021be <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43da      	mvns	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	400a      	ands	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	22c0      	movs	r2, #192	@ 0xc0
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800226c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002270:	4618      	mov	r0, r3
 8002272:	3728      	adds	r7, #40	@ 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20008000 	.word	0x20008000

0800227c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800229e:	4b89      	ldr	r3, [pc, #548]	@ (80024c4 <HAL_GPIO_Init+0x234>)
 80022a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022a2:	e194      	b.n	80025ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8186 	beq.w	80025c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d005      	beq.n	80022d4 <HAL_GPIO_Init+0x44>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d130      	bne.n	8002336 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230a:	2201      	movs	r2, #1
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0201 	and.w	r2, r3, #1
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b03      	cmp	r3, #3
 8002340:	d017      	beq.n	8002372 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d123      	bne.n	80023c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	69b9      	ldr	r1, [r7, #24]
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80e0 	beq.w	80025c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002408:	4b2f      	ldr	r3, [pc, #188]	@ (80024c8 <HAL_GPIO_Init+0x238>)
 800240a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800240e:	4a2e      	ldr	r2, [pc, #184]	@ (80024c8 <HAL_GPIO_Init+0x238>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002418:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_GPIO_Init+0x238>)
 800241a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002426:	4a29      	ldr	r2, [pc, #164]	@ (80024cc <HAL_GPIO_Init+0x23c>)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a20      	ldr	r2, [pc, #128]	@ (80024d0 <HAL_GPIO_Init+0x240>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d052      	beq.n	80024f8 <HAL_GPIO_Init+0x268>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <HAL_GPIO_Init+0x244>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d031      	beq.n	80024be <HAL_GPIO_Init+0x22e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1e      	ldr	r2, [pc, #120]	@ (80024d8 <HAL_GPIO_Init+0x248>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02b      	beq.n	80024ba <HAL_GPIO_Init+0x22a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <HAL_GPIO_Init+0x24c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1c      	ldr	r2, [pc, #112]	@ (80024e0 <HAL_GPIO_Init+0x250>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <HAL_GPIO_Init+0x254>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1a      	ldr	r2, [pc, #104]	@ (80024e8 <HAL_GPIO_Init+0x258>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_GPIO_Init+0x25c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a18      	ldr	r2, [pc, #96]	@ (80024f0 <HAL_GPIO_Init+0x260>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <HAL_GPIO_Init+0x264>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x20e>
 800249a:	2309      	movs	r3, #9
 800249c:	e02d      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 800249e:	230a      	movs	r3, #10
 80024a0:	e02b      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024a2:	2308      	movs	r3, #8
 80024a4:	e029      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024a6:	2307      	movs	r3, #7
 80024a8:	e027      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024aa:	2306      	movs	r3, #6
 80024ac:	e025      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024ae:	2305      	movs	r3, #5
 80024b0:	e023      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e021      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e01f      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e01d      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e01b      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024c2:	bf00      	nop
 80024c4:	58000080 	.word	0x58000080
 80024c8:	58024400 	.word	0x58024400
 80024cc:	58000400 	.word	0x58000400
 80024d0:	58020000 	.word	0x58020000
 80024d4:	58020400 	.word	0x58020400
 80024d8:	58020800 	.word	0x58020800
 80024dc:	58020c00 	.word	0x58020c00
 80024e0:	58021000 	.word	0x58021000
 80024e4:	58021400 	.word	0x58021400
 80024e8:	58021800 	.word	0x58021800
 80024ec:	58021c00 	.word	0x58021c00
 80024f0:	58022000 	.word	0x58022000
 80024f4:	58022400 	.word	0x58022400
 80024f8:	2300      	movs	r3, #0
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250a:	4938      	ldr	r1, [pc, #224]	@ (80025ec <HAL_GPIO_Init+0x35c>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800253e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800256c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3301      	adds	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f ae63 	bne.w	80022a4 <HAL_GPIO_Init+0x14>
  }
}
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	3724      	adds	r7, #36	@ 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	58000400 	.word	0x58000400

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002634:	887a      	ldrh	r2, [r7, #2]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	041a      	lsls	r2, r3, #16
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43d9      	mvns	r1, r3
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	400b      	ands	r3, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002664:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	4618      	mov	r0, r3
 800267e:	f00f f81b 	bl	80116b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e08b      	b.n	80027b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fa6a 	bl	8000b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	e006      	b.n	8002714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d108      	bne.n	800272e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	e007      	b.n	800273e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800273c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_I2C_Init+0x134>)
 800274a:	430b      	orrs	r3, r1
 800274c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800275c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69d9      	ldr	r1, [r3, #28]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	02008000 	.word	0x02008000

080027c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	f040 80f9 	bne.w	80029de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x34>
 80027f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0ed      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_I2C_Mem_Write+0x4e>
 800280e:	2302      	movs	r3, #2
 8002810:	e0e6      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800281a:	f7ff f955 	bl	8001ac8 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2319      	movs	r3, #25
 8002826:	2201      	movs	r2, #1
 8002828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fac3 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0d1      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2221      	movs	r2, #33	@ 0x21
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800285c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002864:	88f8      	ldrh	r0, [r7, #6]
 8002866:	893a      	ldrh	r2, [r7, #8]
 8002868:	8979      	ldrh	r1, [r7, #10]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	4603      	mov	r3, r0
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f9d3 	bl	8002c20 <I2C_RequestMemoryWrite>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0a9      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2bff      	cmp	r3, #255	@ 0xff
 8002894:	d90e      	bls.n	80028b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	22ff      	movs	r2, #255	@ 0xff
 800289a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fc47 	bl	8003140 <I2C_TransferConfig>
 80028b2:	e00f      	b.n	80028d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fc36 	bl	8003140 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fac6 	bl	8002e6a <I2C_WaitOnTXISFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e07b      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d034      	beq.n	800298c <HAL_I2C_Mem_Write+0x1c8>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	d130      	bne.n	800298c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	2200      	movs	r2, #0
 8002932:	2180      	movs	r1, #128	@ 0x80
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fa3f 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e04d      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2bff      	cmp	r3, #255	@ 0xff
 800294c:	d90e      	bls.n	800296c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	22ff      	movs	r2, #255	@ 0xff
 8002952:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002958:	b2da      	uxtb	r2, r3
 800295a:	8979      	ldrh	r1, [r7, #10]
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fbeb 	bl	8003140 <I2C_TransferConfig>
 800296a:	e00f      	b.n	800298c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	b2da      	uxtb	r2, r3
 800297c:	8979      	ldrh	r1, [r7, #10]
 800297e:	2300      	movs	r3, #0
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fbda 	bl	8003140 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d19e      	bne.n	80028d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 faac 	bl	8002ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e01a      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2220      	movs	r2, #32
 80029b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_I2C_Mem_Write+0x224>)
 80029be:	400b      	ands	r3, r1
 80029c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029de:	2302      	movs	r3, #2
  }
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	fe00e800 	.word	0xfe00e800

080029ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	f040 80fd 	bne.w	8002c0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_I2C_Mem_Read+0x34>
 8002a1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0f1      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_I2C_Mem_Read+0x4e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e0ea      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a42:	f7ff f841 	bl	8001ac8 <HAL_GetTick>
 8002a46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2319      	movs	r3, #25
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f9af 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d5      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2222      	movs	r2, #34	@ 0x22
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a8c:	88f8      	ldrh	r0, [r7, #6]
 8002a8e:	893a      	ldrh	r2, [r7, #8]
 8002a90:	8979      	ldrh	r1, [r7, #10]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f913 	bl	8002cc8 <I2C_RequestMemoryRead>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0ad      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2bff      	cmp	r3, #255	@ 0xff
 8002abc:	d90e      	bls.n	8002adc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	@ 0xff
 8002ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	4b52      	ldr	r3, [pc, #328]	@ (8002c18 <HAL_I2C_Mem_Read+0x22c>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fb33 	bl	8003140 <I2C_TransferConfig>
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	4b4a      	ldr	r3, [pc, #296]	@ (8002c18 <HAL_I2C_Mem_Read+0x22c>)
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb22 	bl	8003140 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	2200      	movs	r2, #0
 8002b04:	2104      	movs	r1, #4
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f956 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07c      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d034      	beq.n	8002bbc <HAL_I2C_Mem_Read+0x1d0>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d130      	bne.n	8002bbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	2200      	movs	r2, #0
 8002b62:	2180      	movs	r1, #128	@ 0x80
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f927 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e04d      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2bff      	cmp	r3, #255	@ 0xff
 8002b7c:	d90e      	bls.n	8002b9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	22ff      	movs	r2, #255	@ 0xff
 8002b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fad3 	bl	8003140 <I2C_TransferConfig>
 8002b9a:	e00f      	b.n	8002bbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fac2 	bl	8003140 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d19a      	bne.n	8002afc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f994 	bl	8002ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e01a      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2220      	movs	r2, #32
 8002be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_I2C_Mem_Read+0x230>)
 8002bee:	400b      	ands	r3, r1
 8002bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	80002400 	.word	0x80002400
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	817b      	strh	r3, [r7, #10]
 8002c32:	460b      	mov	r3, r1
 8002c34:	813b      	strh	r3, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	8979      	ldrh	r1, [r7, #10]
 8002c40:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <I2C_RequestMemoryWrite+0xa4>)
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fa79 	bl	8003140 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f909 	bl	8002e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e02c      	b.n	8002cbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c68:	893b      	ldrh	r3, [r7, #8]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c72:	e015      	b.n	8002ca0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c74:	893b      	ldrh	r3, [r7, #8]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	69b9      	ldr	r1, [r7, #24]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f8ef 	bl	8002e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e012      	b.n	8002cbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c96:	893b      	ldrh	r3, [r7, #8]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2180      	movs	r1, #128	@ 0x80
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f884 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	80002000 	.word	0x80002000

08002cc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	817b      	strh	r3, [r7, #10]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	813b      	strh	r3, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <I2C_RequestMemoryRead+0xa4>)
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fa26 	bl	8003140 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	69b9      	ldr	r1, [r7, #24]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f8b6 	bl	8002e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e02c      	b.n	8002d62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d0e:	893b      	ldrh	r3, [r7, #8]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d18:	e015      	b.n	8002d46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1a:	893b      	ldrh	r3, [r7, #8]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f89c 	bl	8002e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e012      	b.n	8002d62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2140      	movs	r1, #64	@ 0x40
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f831 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	80002000 	.word	0x80002000

08002d70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d007      	beq.n	8002dac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	619a      	str	r2, [r3, #24]
  }
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc8:	e03b      	b.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f8d6 	bl	8002f80 <I2C_IsErrorOccurred>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e041      	b.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d02d      	beq.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe fe6f 	bl	8001ac8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x44>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d122      	bne.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4013      	ands	r3, r2
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d113      	bne.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00f      	b.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d0b4      	beq.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e76:	e033      	b.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f87f 	bl	8002f80 <I2C_IsErrorOccurred>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e031      	b.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d025      	beq.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e94:	f7fe fe18 	bl	8001ac8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d302      	bcc.n	8002eaa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11a      	bne.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d013      	beq.n	8002ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d1c4      	bne.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f04:	e02f      	b.n	8002f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f838 	bl	8002f80 <I2C_IsErrorOccurred>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e02d      	b.n	8002f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fdd5 	bl	8001ac8 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11a      	bne.n	8002f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d013      	beq.n	8002f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	f043 0220 	orr.w	r2, r3, #32
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e007      	b.n	8002f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d1c8      	bne.n	8002f06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d068      	beq.n	800307e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fb4:	e049      	b.n	800304a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d045      	beq.n	800304a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fd83 	bl	8001ac8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_IsErrorOccurred+0x54>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13a      	bne.n	800304a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fe6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ff6:	d121      	bne.n	800303c <I2C_IsErrorOccurred+0xbc>
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ffe:	d01d      	beq.n	800303c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b20      	cmp	r3, #32
 8003004:	d01a      	beq.n	800303c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003014:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003016:	f7fe fd57 	bl	8001ac8 <HAL_GetTick>
 800301a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301c:	e00e      	b.n	800303c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800301e:	f7fe fd53 	bl	8001ac8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b19      	cmp	r3, #25
 800302a:	d907      	bls.n	800303c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	f043 0320 	orr.w	r3, r3, #32
 8003032:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800303a:	e006      	b.n	800304a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d1e9      	bne.n	800301e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b20      	cmp	r3, #32
 8003056:	d003      	beq.n	8003060 <I2C_IsErrorOccurred+0xe0>
 8003058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0aa      	beq.n	8002fb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2220      	movs	r2, #32
 800306e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01c      	beq.n	800312e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fe3b 	bl	8002d70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <I2C_IsErrorOccurred+0x1bc>)
 8003106:	400b      	ands	r3, r1
 8003108:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800312e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	@ 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	817b      	strh	r3, [r7, #10]
 800314e:	4613      	mov	r3, r2
 8003150:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003158:	7a7b      	ldrb	r3, [r7, #9]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003160:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	4313      	orrs	r3, r2
 800316a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800316e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	0d5b      	lsrs	r3, r3, #21
 800317a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <I2C_TransferConfig+0x60>)
 8003180:	430b      	orrs	r3, r1
 8003182:	43db      	mvns	r3, r3
 8003184:	ea02 0103 	and.w	r1, r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	03ff63ff 	.word	0x03ff63ff

080031a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d138      	bne.n	800322c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e032      	b.n	800322e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	@ 0x24
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	d139      	bne.n	80032c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800325a:	2302      	movs	r3, #2
 800325c:	e033      	b.n	80032c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2224      	movs	r2, #36	@ 0x24
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800328c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af02      	add	r7, sp, #8
 80032d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0fe      	b.n	80034e2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f00c fbe5 	bl	800fac8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2203      	movs	r2, #3
 8003302:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f006 f9a9 	bl	8009662 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7c1a      	ldrb	r2, [r3, #16]
 8003318:	f88d 2000 	strb.w	r2, [sp]
 800331c:	3304      	adds	r3, #4
 800331e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003320:	f006 f87a 	bl	8009418 <USB_CoreInit>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0d5      	b.n	80034e2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f006 f9a1 	bl	8009684 <USB_SetCurrentMode>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0c6      	b.n	80034e2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e04a      	b.n	80033f0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	3315      	adds	r3, #21
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3314      	adds	r3, #20
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	b298      	uxth	r0, r3
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	332e      	adds	r3, #46	@ 0x2e
 8003396:	4602      	mov	r2, r0
 8003398:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	3318      	adds	r3, #24
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	331c      	adds	r3, #28
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3320      	adds	r3, #32
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3324      	adds	r3, #36	@ 0x24
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	3301      	adds	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	791b      	ldrb	r3, [r3, #4]
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d3af      	bcc.n	800335a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	e044      	b.n	800348a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800346e:	7bfa      	ldrb	r2, [r7, #15]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	3301      	adds	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	429a      	cmp	r2, r3
 8003492:	d3b5      	bcc.n	8003400 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7c1a      	ldrb	r2, [r3, #16]
 800349c:	f88d 2000 	strb.w	r2, [sp]
 80034a0:	3304      	adds	r3, #4
 80034a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a4:	f006 f93a 	bl	800971c <USB_DevInit>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e013      	b.n	80034e2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7b1b      	ldrb	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 f96d 	bl	80047b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f007 f979 	bl	800a7d2 <USB_DevDisconnect>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_PCD_Start+0x1c>
 8003502:	2302      	movs	r3, #2
 8003504:	e022      	b.n	800354c <HAL_PCD_Start+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003526:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f006 f884 	bl	8009640 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f007 f927 	bl	800a790 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b08d      	sub	sp, #52	@ 0x34
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f007 f9e5 	bl	800a93a <USB_GetMode>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 84b9 	bne.w	8003eea <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f007 f949 	bl	800a814 <USB_ReadInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 84af 	beq.w	8003ee8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f007 f936 	bl	800a814 <USB_ReadInterrupts>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d107      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f002 0202 	and.w	r2, r2, #2
 80035c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f007 f924 	bl	800a814 <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d161      	bne.n	800369a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0210 	bic.w	r2, r2, #16
 80035e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	3304      	adds	r3, #4
 8003604:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	0c5b      	lsrs	r3, r3, #17
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	2b02      	cmp	r3, #2
 8003610:	d124      	bne.n	800365c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d035      	beq.n	800368a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6a38      	ldr	r0, [r7, #32]
 8003632:	f006 ff5b 	bl	800a4ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003642:	441a      	add	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003654:	441a      	add	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	615a      	str	r2, [r3, #20]
 800365a:	e016      	b.n	800368a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	0c5b      	lsrs	r3, r3, #17
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	2b06      	cmp	r3, #6
 8003666:	d110      	bne.n	800368a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800366e:	2208      	movs	r2, #8
 8003670:	4619      	mov	r1, r3
 8003672:	6a38      	ldr	r0, [r7, #32]
 8003674:	f006 ff3a 	bl	800a4ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003684:	441a      	add	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0210 	orr.w	r2, r2, #16
 8003698:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f007 f8b8 	bl	800a814 <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036ae:	f040 80a7 	bne.w	8003800 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f007 f8bd 	bl	800a83a <USB_ReadDevAllOutEpInterrupt>
 80036c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80036c2:	e099      	b.n	80037f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 808e 	beq.w	80037ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f007 f8e1 	bl	800a8a2 <USB_ReadDevOutEPInterrupt>
 80036e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00c      	beq.n	8003706 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	2301      	movs	r3, #1
 80036fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fecf 	bl	80044a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800371c:	461a      	mov	r2, r3
 800371e:	2308      	movs	r3, #8
 8003720:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003722:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 ffa5 	bl	8004674 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003740:	461a      	mov	r2, r3
 8003742:	2310      	movs	r3, #16
 8003744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d030      	beq.n	80037b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003758:	2b80      	cmp	r3, #128	@ 0x80
 800375a:	d109      	bne.n	8003770 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800376a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800376e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	78db      	ldrb	r3, [r3, #3]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d108      	bne.n	80037a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f00c faba 	bl	800fd14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ac:	461a      	mov	r2, r3
 80037ae:	2302      	movs	r3, #2
 80037b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c8:	461a      	mov	r2, r3
 80037ca:	2320      	movs	r3, #32
 80037cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e4:	461a      	mov	r2, r3
 80037e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	3301      	adds	r3, #1
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f47f af62 	bne.w	80036c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f007 f805 	bl	800a814 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003814:	f040 80db 	bne.w	80039ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f007 f826 	bl	800a86e <USB_ReadDevAllInEpInterrupt>
 8003822:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003828:	e0cd      	b.n	80039c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80c2 	beq.w	80039ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f007 f84c 	bl	800a8de <USB_ReadDevInEPInterrupt>
 8003846:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d057      	beq.n	8003902 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	2201      	movs	r2, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43db      	mvns	r3, r3
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003872:	4013      	ands	r3, r2
 8003874:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003882:	461a      	mov	r2, r3
 8003884:	2301      	movs	r3, #1
 8003886:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	799b      	ldrb	r3, [r3, #6]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d132      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3320      	adds	r3, #32
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4403      	add	r3, r0
 80038b0:	331c      	adds	r3, #28
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4419      	add	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4403      	add	r3, r0
 80038c4:	3320      	adds	r3, #32
 80038c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d113      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x3a2>
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3324      	adds	r3, #36	@ 0x24
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d108      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038ee:	461a      	mov	r2, r3
 80038f0:	2101      	movs	r1, #1
 80038f2:	f007 f855 	bl	800a9a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f00c f984 	bl	800fc0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003918:	461a      	mov	r2, r3
 800391a:	2308      	movs	r3, #8
 800391c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003934:	461a      	mov	r2, r3
 8003936:	2310      	movs	r3, #16
 8003938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003950:	461a      	mov	r2, r3
 8003952:	2340      	movs	r3, #64	@ 0x40
 8003954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d023      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003962:	6a38      	ldr	r0, [r7, #32]
 8003964:	f006 f838 	bl	80099d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	3310      	adds	r3, #16
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	3304      	adds	r3, #4
 800397a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	78db      	ldrb	r3, [r3, #3]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d108      	bne.n	8003996 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4619      	mov	r1, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f00c f9d1 	bl	800fd38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a2:	461a      	mov	r2, r3
 80039a4:	2302      	movs	r3, #2
 80039a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fce8 	bl	800438a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	3301      	adds	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f47f af2e 	bne.w	800382a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f006 ff1e 	bl	800a814 <USB_ReadInterrupts>
 80039d8:	4603      	mov	r3, r0
 80039da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039e2:	d122      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d108      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fef3 	bl	80047f8 <HAL_PCDEx_LPM_Callback>
 8003a12:	e002      	b.n	8003a1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f00c f96f 	bl	800fcf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f006 fef0 	bl	800a814 <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a3e:	d112      	bne.n	8003a66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d102      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f00c f92b 	bl	800fcac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f006 fed2 	bl	800a814 <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a7a:	d121      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003a8a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d111      	bne.n	8003aba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	f003 020f 	and.w	r2, r3, #15
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fea0 	bl	80047f8 <HAL_PCDEx_LPM_Callback>
 8003ab8:	e002      	b.n	8003ac0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f00c f8f6 	bl	800fcac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f006 fea5 	bl	800a814 <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad4:	f040 80b7 	bne.w	8003c46 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2110      	movs	r1, #16
 8003af2:	4618      	mov	r0, r3
 8003af4:	f005 ff70 	bl	80099d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003afc:	e046      	b.n	8003b8c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b22:	0151      	lsls	r1, r2, #5
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	440a      	add	r2, r1
 8003b28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b56:	0151      	lsls	r1, r2, #5
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	3301      	adds	r3, #1
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	461a      	mov	r2, r3
 8003b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d3b2      	bcc.n	8003afe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ba6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003baa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7bdb      	ldrb	r3, [r3, #15]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d016      	beq.n	8003be2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc4:	f043 030b 	orr.w	r3, r3, #11
 8003bc8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bda:	f043 030b 	orr.w	r3, r3, #11
 8003bde:	6453      	str	r3, [r2, #68]	@ 0x44
 8003be0:	e015      	b.n	8003c0e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c08:	f043 030b 	orr.w	r3, r3, #11
 8003c0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c30:	461a      	mov	r2, r3
 8003c32:	f006 feb5 	bl	800a9a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f006 fde2 	bl	800a814 <USB_ReadInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c5a:	d123      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f006 fe79 	bl	800a958 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f005 ff2d 	bl	8009aca <USB_GetDevSpeed>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681c      	ldr	r4, [r3, #0]
 8003c7c:	f001 fd9c 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 8003c80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c86:	461a      	mov	r2, r3
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f005 fc37 	bl	80094fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f00b ffe3 	bl	800fc5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f006 fdb3 	bl	800a814 <USB_ReadInterrupts>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d10a      	bne.n	8003cce <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f00b ffc0 	bl	800fc3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f002 0208 	and.w	r2, r2, #8
 8003ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f006 fd9e 	bl	800a814 <USB_ReadInterrupts>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cde:	2b80      	cmp	r3, #128	@ 0x80
 8003ce0:	d123      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	e014      	b.n	8003d1e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fb08 	bl	8004328 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	791b      	ldrb	r3, [r3, #4]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d3e4      	bcc.n	8003cf4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f006 fd70 	bl	800a814 <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d3e:	d13c      	bne.n	8003dba <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d40:	2301      	movs	r3, #1
 8003d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d44:	e02b      	b.n	8003d9e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	3318      	adds	r3, #24
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d115      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da12      	bge.n	8003d98 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3317      	adds	r3, #23
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fac8 	bl	8004328 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	791b      	ldrb	r3, [r3, #4]
 8003da2:	461a      	mov	r2, r3
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d3cd      	bcc.n	8003d46 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f006 fd28 	bl	800a814 <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dce:	d156      	bne.n	8003e7e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd4:	e045      	b.n	8003e62 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d12e      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003dfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da2b      	bge.n	8003e5c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d121      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e58:	6053      	str	r3, [r2, #4]
            break;
 8003e5a:	e008      	b.n	8003e6e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	3301      	adds	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	791b      	ldrb	r3, [r3, #4]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d3b3      	bcc.n	8003dd6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f006 fcc6 	bl	800a814 <USB_ReadInterrupts>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e92:	d10a      	bne.n	8003eaa <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f00b ff61 	bl	800fd5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f006 fcb0 	bl	800a814 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d115      	bne.n	8003eea <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f00b ff51 	bl	800fd78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	e000      	b.n	8003eea <HAL_PCD_IRQHandler+0x996>
      return;
 8003ee8:	bf00      	nop
    }
  }
}
 8003eea:	3734      	adds	r7, #52	@ 0x34
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd90      	pop	{r4, r7, pc}

08003ef0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_PCD_SetAddress+0x1a>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e012      	b.n	8003f30 <HAL_PCD_SetAddress+0x40>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f006 fc0f 	bl	800a744 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	70fb      	strb	r3, [r7, #3]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	803b      	strh	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da0f      	bge.n	8003f7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	3310      	adds	r3, #16
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	3304      	adds	r3, #4
 8003f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	705a      	strb	r2, [r3, #1]
 8003f7c:	e00f      	b.n	8003f9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003faa:	883a      	ldrh	r2, [r7, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	78ba      	ldrb	r2, [r7, #2]
 8003fb4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	785b      	ldrb	r3, [r3, #1]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fc8:	78bb      	ldrb	r3, [r7, #2]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d102      	bne.n	8003fd4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_PCD_EP_Open+0xaa>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e00e      	b.n	8004000 <HAL_PCD_EP_Open+0xc8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f005 fd8f 	bl	8009b14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da0f      	bge.n	800403c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	3310      	adds	r3, #16
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	705a      	strb	r2, [r3, #1]
 800403a:	e00f      	b.n	800405c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_PCD_EP_Close+0x6e>
 8004072:	2302      	movs	r3, #2
 8004074:	e00e      	b.n	8004094 <HAL_PCD_EP_Close+0x8c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	4618      	mov	r0, r3
 8004086:	f005 fdcd 	bl	8009c24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	460b      	mov	r3, r1
 80040aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	7afb      	ldrb	r3, [r7, #11]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040de:	7afb      	ldrb	r3, [r7, #11]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	799b      	ldrb	r3, [r3, #6]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	799b      	ldrb	r3, [r3, #6]
 8004100:	461a      	mov	r2, r3
 8004102:	6979      	ldr	r1, [r7, #20]
 8004104:	f005 fe6a 	bl	8009ddc <USB_EPStartXfer>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004134:	681b      	ldr	r3, [r3, #0]
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	460b      	mov	r3, r1
 8004150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	3310      	adds	r3, #16
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2201      	movs	r2, #1
 8004180:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	b2da      	uxtb	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	799b      	ldrb	r3, [r3, #6]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d102      	bne.n	800419c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	799b      	ldrb	r3, [r3, #6]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6979      	ldr	r1, [r7, #20]
 80041a8:	f005 fe18 	bl	8009ddc <USB_EPStartXfer>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	7912      	ldrb	r2, [r2, #4]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e04f      	b.n	8004274 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da0f      	bge.n	80041fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 020f 	and.w	r2, r3, #15
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	3310      	adds	r3, #16
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	3304      	adds	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	705a      	strb	r2, [r3, #1]
 80041fa:	e00d      	b.n	8004218 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_PCD_EP_SetStall+0x82>
 8004234:	2302      	movs	r3, #2
 8004236:	e01d      	b.n	8004274 <HAL_PCD_EP_SetStall+0xbe>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	4618      	mov	r0, r3
 8004248:	f006 f9a8 	bl	800a59c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7999      	ldrb	r1, [r3, #6]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004264:	461a      	mov	r2, r3
 8004266:	f006 fb9b 	bl	800a9a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	7912      	ldrb	r2, [r2, #4]
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e042      	b.n	8004320 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800429a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da0f      	bge.n	80042c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3310      	adds	r3, #16
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	705a      	strb	r2, [r3, #1]
 80042c0:	e00f      	b.n	80042e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 020f 	and.w	r2, r3, #15
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_PCD_EP_ClrStall+0x86>
 80042fe:	2302      	movs	r3, #2
 8004300:	e00e      	b.n	8004320 <HAL_PCD_EP_ClrStall+0xa4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	4618      	mov	r0, r3
 8004312:	f006 f9b1 	bl	800a678 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	da0c      	bge.n	8004356 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3310      	adds	r3, #16
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e00c      	b.n	8004370 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	4618      	mov	r0, r3
 8004378:	f005 ffd0 	bl	800a31c <USB_EPStopXfer>
 800437c:	4603      	mov	r3, r0
 800437e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004380:	7afb      	ldrb	r3, [r7, #11]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b08a      	sub	sp, #40	@ 0x28
 800438e:	af02      	add	r7, sp, #8
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	3310      	adds	r3, #16
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	3304      	adds	r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d901      	bls.n	80043c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06b      	b.n	800449a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d902      	bls.n	80043de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3303      	adds	r3, #3
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043e6:	e02a      	b.n	800443e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d902      	bls.n	8004404 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3303      	adds	r3, #3
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68d9      	ldr	r1, [r3, #12]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	4603      	mov	r3, r0
 8004420:	6978      	ldr	r0, [r7, #20]
 8004422:	f006 f825 	bl	800a470 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	441a      	add	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	441a      	add	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	429a      	cmp	r2, r3
 8004452:	d809      	bhi.n	8004468 <PCD_WriteEmptyTxFifo+0xde>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800445c:	429a      	cmp	r2, r3
 800445e:	d203      	bcs.n	8004468 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1bf      	bne.n	80043e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	429a      	cmp	r2, r3
 8004472:	d811      	bhi.n	8004498 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	2201      	movs	r2, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	43db      	mvns	r3, r3
 800448e:	6939      	ldr	r1, [r7, #16]
 8004490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004494:	4013      	ands	r3, r2
 8004496:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	333c      	adds	r3, #60	@ 0x3c
 80044bc:	3304      	adds	r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	799b      	ldrb	r3, [r3, #6]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d17b      	bne.n	80045d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	4a61      	ldr	r2, [pc, #388]	@ (800466c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	f240 80b9 	bls.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80b3 	beq.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450c:	6093      	str	r3, [r2, #8]
 800450e:	e0a7      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	2320      	movs	r3, #32
 800452a:	6093      	str	r3, [r2, #8]
 800452c:	e098      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 8093 	bne.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4a4b      	ldr	r2, [pc, #300]	@ (800466c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d90f      	bls.n	8004562 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004558:	461a      	mov	r2, r3
 800455a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455e:	6093      	str	r3, [r2, #8]
 8004560:	e07e      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	0159      	lsls	r1, r3, #5
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	440b      	add	r3, r1
 8004584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d114      	bne.n	80045c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045ac:	461a      	mov	r2, r3
 80045ae:	2101      	movs	r1, #1
 80045b0:	f006 f9f6 	bl	800a9a0 <USB_EP0_OutStart>
 80045b4:	e006      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f00b fb02 	bl	800fbd4 <HAL_PCD_DataOutStageCallback>
 80045d0:	e046      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4a26      	ldr	r2, [pc, #152]	@ (8004670 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d124      	bne.n	8004624 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f0:	461a      	mov	r2, r3
 80045f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f6:	6093      	str	r3, [r2, #8]
 80045f8:	e032      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	2320      	movs	r3, #32
 8004614:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f00b fad9 	bl	800fbd4 <HAL_PCD_DataOutStageCallback>
 8004622:	e01d      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d114      	bne.n	8004654 <PCD_EP_OutXfrComplete_int+0x1b0>
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800464c:	461a      	mov	r2, r3
 800464e:	2100      	movs	r1, #0
 8004650:	f006 f9a6 	bl	800a9a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f00b faba 	bl	800fbd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	4f54300a 	.word	0x4f54300a
 8004670:	4f54310a 	.word	0x4f54310a

08004674 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	333c      	adds	r3, #60	@ 0x3c
 800468c:	3304      	adds	r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d90e      	bls.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f00b fa71 	bl	800fbb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d90c      	bls.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	799b      	ldrb	r3, [r3, #6]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d108      	bne.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046e8:	461a      	mov	r2, r3
 80046ea:	2101      	movs	r1, #1
 80046ec:	f006 f958 	bl	800a9a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	4f54300a 	.word	0x4f54300a

08004700 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
 800470c:	4613      	mov	r3, r2
 800470e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800471e:	883b      	ldrh	r3, [r7, #0]
 8004720:	0419      	lsls	r1, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	430a      	orrs	r2, r1
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
 800472c:	e028      	b.n	8004780 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4413      	add	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e00d      	b.n	800475e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	3340      	adds	r3, #64	@ 0x40
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	3301      	adds	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	3b01      	subs	r3, #1
 8004764:	429a      	cmp	r2, r3
 8004766:	d3ec      	bcc.n	8004742 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004768:	883b      	ldrh	r3, [r7, #0]
 800476a:	0418      	lsls	r0, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	3b01      	subs	r3, #1
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	4302      	orrs	r2, r0
 8004778:	3340      	adds	r3, #64	@ 0x40
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047de:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	10000003 	.word	0x10000003

080047f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004818:	4b19      	ldr	r3, [pc, #100]	@ (8004880 <HAL_PWREx_ConfigSupply+0x70>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b04      	cmp	r3, #4
 8004822:	d00a      	beq.n	800483a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004824:	4b16      	ldr	r3, [pc, #88]	@ (8004880 <HAL_PWREx_ConfigSupply+0x70>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	d001      	beq.n	8004836 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e01f      	b.n	8004876 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e01d      	b.n	8004876 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800483a:	4b11      	ldr	r3, [pc, #68]	@ (8004880 <HAL_PWREx_ConfigSupply+0x70>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f023 0207 	bic.w	r2, r3, #7
 8004842:	490f      	ldr	r1, [pc, #60]	@ (8004880 <HAL_PWREx_ConfigSupply+0x70>)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4313      	orrs	r3, r2
 8004848:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800484a:	f7fd f93d 	bl	8001ac8 <HAL_GetTick>
 800484e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004850:	e009      	b.n	8004866 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004852:	f7fd f939 	bl	8001ac8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004860:	d901      	bls.n	8004866 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e007      	b.n	8004876 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_PWREx_ConfigSupply+0x70>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800486e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004872:	d1ee      	bne.n	8004852 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	58024800 	.word	0x58024800

08004884 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a04      	ldr	r2, [pc, #16]	@ (80048a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800488e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004892:	60d3      	str	r3, [r2, #12]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	58024800 	.word	0x58024800

080048a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08c      	sub	sp, #48	@ 0x30
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f000 bc48 	b.w	8005148 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8088 	beq.w	80049d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	4b99      	ldr	r3, [pc, #612]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048d0:	4b96      	ldr	r3, [pc, #600]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d007      	beq.n	80048ec <HAL_RCC_OscConfig+0x48>
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	2b18      	cmp	r3, #24
 80048e0:	d111      	bne.n	8004906 <HAL_RCC_OscConfig+0x62>
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d10c      	bne.n	8004906 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4b8f      	ldr	r3, [pc, #572]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d06d      	beq.n	80049d4 <HAL_RCC_OscConfig+0x130>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d169      	bne.n	80049d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f000 bc21 	b.w	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x7a>
 8004910:	4b86      	ldr	r3, [pc, #536]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a85      	ldr	r2, [pc, #532]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e02e      	b.n	800497c <HAL_RCC_OscConfig+0xd8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x9c>
 8004926:	4b81      	ldr	r3, [pc, #516]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a80      	ldr	r2, [pc, #512]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800492c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b7e      	ldr	r3, [pc, #504]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a7d      	ldr	r2, [pc, #500]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004938:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	e01d      	b.n	800497c <HAL_RCC_OscConfig+0xd8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0xc0>
 800494a:	4b78      	ldr	r3, [pc, #480]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a77      	ldr	r2, [pc, #476]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	4b75      	ldr	r3, [pc, #468]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a74      	ldr	r2, [pc, #464]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0xd8>
 8004964:	4b71      	ldr	r3, [pc, #452]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a70      	ldr	r2, [pc, #448]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 800496a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b6e      	ldr	r3, [pc, #440]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a6d      	ldr	r2, [pc, #436]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800497a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd f8a0 	bl	8001ac8 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd f89c 	bl	8001ac8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	@ 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e3d4      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800499e:	4b63      	ldr	r3, [pc, #396]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0xe8>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7fd f88c 	bl	8001ac8 <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fd f888 	bl	8001ac8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	@ 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e3c0      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049c6:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x110>
 80049d2:	e000      	b.n	80049d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80ca 	beq.w	8004b78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e4:	4b51      	ldr	r3, [pc, #324]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ee:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_RCC_OscConfig+0x166>
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2b18      	cmp	r3, #24
 80049fe:	d156      	bne.n	8004aae <HAL_RCC_OscConfig+0x20a>
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d151      	bne.n	8004aae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a0a:	4b48      	ldr	r3, [pc, #288]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x17e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e392      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a22:	4b42      	ldr	r3, [pc, #264]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 0219 	bic.w	r2, r3, #25
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	493f      	ldr	r1, [pc, #252]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd f848 	bl	8001ac8 <HAL_GetTick>
 8004a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd f844 	bl	8001ac8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e37c      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a4e:	4b37      	ldr	r3, [pc, #220]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	f7fd f865 	bl	8001b28 <HAL_GetREVID>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d817      	bhi.n	8004a98 <HAL_RCC_OscConfig+0x1f4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b40      	cmp	r3, #64	@ 0x40
 8004a6e:	d108      	bne.n	8004a82 <HAL_RCC_OscConfig+0x1de>
 8004a70:	4b2e      	ldr	r3, [pc, #184]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a78:	4a2c      	ldr	r2, [pc, #176]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a80:	e07a      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4b2a      	ldr	r3, [pc, #168]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	031b      	lsls	r3, r3, #12
 8004a90:	4926      	ldr	r1, [pc, #152]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a96:	e06f      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	4921      	ldr	r1, [pc, #132]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aac:	e064      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d047      	beq.n	8004b46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 0219 	bic.w	r2, r3, #25
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	491a      	ldr	r1, [pc, #104]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fc fffe 	bl	8001ac8 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fc fffa 	bl	8001ac8 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e332      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae2:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	f7fd f81b 	bl	8001b28 <HAL_GetREVID>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d819      	bhi.n	8004b30 <HAL_RCC_OscConfig+0x28c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d108      	bne.n	8004b16 <HAL_RCC_OscConfig+0x272>
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b0c:	4a07      	ldr	r2, [pc, #28]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b12:	6053      	str	r3, [r2, #4]
 8004b14:	e030      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	031b      	lsls	r3, r3, #12
 8004b24:	4901      	ldr	r1, [pc, #4]	@ (8004b2c <HAL_RCC_OscConfig+0x288>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
 8004b2a:	e025      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	4b9a      	ldr	r3, [pc, #616]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	4997      	ldr	r1, [pc, #604]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
 8004b44:	e018      	b.n	8004b78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b46:	4b95      	ldr	r3, [pc, #596]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a94      	ldr	r2, [pc, #592]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fc ffb9 	bl	8001ac8 <HAL_GetTick>
 8004b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5a:	f7fc ffb5 	bl	8001ac8 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e2ed      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b6c:	4b8b      	ldr	r3, [pc, #556]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a9 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b86:	4b85      	ldr	r3, [pc, #532]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b90:	4b82      	ldr	r3, [pc, #520]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d007      	beq.n	8004bac <HAL_RCC_OscConfig+0x308>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b18      	cmp	r3, #24
 8004ba0:	d13a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x374>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d135      	bne.n	8004c18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bac:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x320>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b80      	cmp	r3, #128	@ 0x80
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e2c1      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bc4:	f7fc ffb0 	bl	8001b28 <HAL_GetREVID>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d817      	bhi.n	8004c02 <HAL_RCC_OscConfig+0x35e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d108      	bne.n	8004bec <HAL_RCC_OscConfig+0x348>
 8004bda:	4b70      	ldr	r3, [pc, #448]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004be2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004be8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bea:	e075      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bec:	4b6b      	ldr	r3, [pc, #428]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	069b      	lsls	r3, r3, #26
 8004bfa:	4968      	ldr	r1, [pc, #416]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c00:	e06a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c02:	4b66      	ldr	r3, [pc, #408]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	4962      	ldr	r1, [pc, #392]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c16:	e05f      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d042      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c20:	4b5e      	ldr	r3, [pc, #376]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fc ff4c 	bl	8001ac8 <HAL_GetTick>
 8004c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c34:	f7fc ff48 	bl	8001ac8 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e280      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c46:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c52:	f7fc ff69 	bl	8001b28 <HAL_GetREVID>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d817      	bhi.n	8004c90 <HAL_RCC_OscConfig+0x3ec>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d108      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3d6>
 8004c68:	4b4c      	ldr	r3, [pc, #304]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c70:	4a4a      	ldr	r2, [pc, #296]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c76:	6053      	str	r3, [r2, #4]
 8004c78:	e02e      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
 8004c7a:	4b48      	ldr	r3, [pc, #288]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	4944      	ldr	r1, [pc, #272]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	604b      	str	r3, [r1, #4]
 8004c8e:	e023      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
 8004c90:	4b42      	ldr	r3, [pc, #264]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	493f      	ldr	r1, [pc, #252]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60cb      	str	r3, [r1, #12]
 8004ca4:	e018      	b.n	8004cd8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3c      	ldr	r2, [pc, #240]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fc ff09 	bl	8001ac8 <HAL_GetTick>
 8004cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cba:	f7fc ff05 	bl	8001ac8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e23d      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ccc:	4b33      	ldr	r3, [pc, #204]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d036      	beq.n	8004d52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d019      	beq.n	8004d20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cec:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fc fee6 	bl	8001ac8 <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fc fee2 	bl	8001ac8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e21a      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d12:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x45c>
 8004d1e:	e018      	b.n	8004d52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b1e      	ldr	r3, [pc, #120]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d24:	4a1d      	ldr	r2, [pc, #116]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fc fecc 	bl	8001ac8 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fc fec8 	bl	8001ac8 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e200      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d46:	4b15      	ldr	r3, [pc, #84]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d039      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d72:	f7fc fea9 	bl	8001ac8 <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d7a:	f7fc fea5 	bl	8001ac8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1dd      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x4d6>
 8004d98:	e01b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x52e>
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004da0:	4b9b      	ldr	r3, [pc, #620]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a9a      	ldr	r2, [pc, #616]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004daa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dac:	f7fc fe8c 	bl	8001ac8 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db4:	f7fc fe88 	bl	8001ac8 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e1c0      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dc6:	4b92      	ldr	r3, [pc, #584]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8081 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004de0:	4b8c      	ldr	r3, [pc, #560]	@ (8005014 <HAL_RCC_OscConfig+0x770>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a8b      	ldr	r2, [pc, #556]	@ (8005014 <HAL_RCC_OscConfig+0x770>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dec:	f7fc fe6c 	bl	8001ac8 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df4:	f7fc fe68 	bl	8001ac8 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	@ 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e1a0      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e06:	4b83      	ldr	r3, [pc, #524]	@ (8005014 <HAL_RCC_OscConfig+0x770>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_OscConfig+0x584>
 8004e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e26:	e02d      	b.n	8004e84 <HAL_RCC_OscConfig+0x5e0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10c      	bne.n	8004e4a <HAL_RCC_OscConfig+0x5a6>
 8004e30:	4b77      	ldr	r3, [pc, #476]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	4a76      	ldr	r2, [pc, #472]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e3c:	4b74      	ldr	r3, [pc, #464]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e40:	4a73      	ldr	r2, [pc, #460]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e42:	f023 0304 	bic.w	r3, r3, #4
 8004e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e48:	e01c      	b.n	8004e84 <HAL_RCC_OscConfig+0x5e0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c8>
 8004e52:	4b6f      	ldr	r3, [pc, #444]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	4a6e      	ldr	r2, [pc, #440]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a6b      	ldr	r2, [pc, #428]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0x5e0>
 8004e6c:	4b68      	ldr	r3, [pc, #416]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e70:	4a67      	ldr	r2, [pc, #412]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e78:	4b65      	ldr	r3, [pc, #404]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7c:	4a64      	ldr	r2, [pc, #400]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004e7e:	f023 0304 	bic.w	r3, r3, #4
 8004e82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fc fe1c 	bl	8001ac8 <HAL_GetTick>
 8004e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fc fe18 	bl	8001ac8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e14e      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eaa:	4b59      	ldr	r3, [pc, #356]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ee      	beq.n	8004e94 <HAL_RCC_OscConfig+0x5f0>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fc fe06 	bl	8001ac8 <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fc fe02 	bl	8001ac8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e138      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ee      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 812d 	beq.w	8005146 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004eec:	4b48      	ldr	r3, [pc, #288]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef4:	2b18      	cmp	r3, #24
 8004ef6:	f000 80bd 	beq.w	8005074 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f040 809e 	bne.w	8005040 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b42      	ldr	r3, [pc, #264]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a41      	ldr	r2, [pc, #260]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc fdda 	bl	8001ac8 <HAL_GetTick>
 8004f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fc fdd6 	bl	8001ac8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e10e      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f2a:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f36:	4b36      	ldr	r3, [pc, #216]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f3a:	4b37      	ldr	r3, [pc, #220]	@ (8005018 <HAL_RCC_OscConfig+0x774>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	4931      	ldr	r1, [pc, #196]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	3b01      	subs	r3, #1
 8004f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	025b      	lsls	r3, r3, #9
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f80:	4923      	ldr	r1, [pc, #140]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f86:	4b22      	ldr	r3, [pc, #136]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	4a21      	ldr	r2, [pc, #132]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f92:	4b1f      	ldr	r3, [pc, #124]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f96:	4b21      	ldr	r3, [pc, #132]	@ (800501c <HAL_RCC_OscConfig+0x778>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f9e:	00d2      	lsls	r2, r2, #3
 8004fa0:	491b      	ldr	r1, [pc, #108]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	f023 020c 	bic.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	4917      	ldr	r1, [pc, #92]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fb8:	4b15      	ldr	r3, [pc, #84]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	f023 0202 	bic.w	r2, r3, #2
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc4:	4912      	ldr	r1, [pc, #72]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fca:	4b11      	ldr	r3, [pc, #68]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	4a10      	ldr	r2, [pc, #64]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	4a0d      	ldr	r2, [pc, #52]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004fee:	4b08      	ldr	r3, [pc, #32]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	4a07      	ldr	r2, [pc, #28]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ffa:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <HAL_RCC_OscConfig+0x76c>)
 8005000:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fc fd5f 	bl	8001ac8 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800500c:	e011      	b.n	8005032 <HAL_RCC_OscConfig+0x78e>
 800500e:	bf00      	nop
 8005010:	58024400 	.word	0x58024400
 8005014:	58024800 	.word	0x58024800
 8005018:	fffffc0c 	.word	0xfffffc0c
 800501c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fc fd52 	bl	8001ac8 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e08a      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005032:	4b47      	ldr	r3, [pc, #284]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x77c>
 800503e:	e082      	b.n	8005146 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b43      	ldr	r3, [pc, #268]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a42      	ldr	r2, [pc, #264]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fc fd3c 	bl	8001ac8 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005054:	f7fc fd38 	bl	8001ac8 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e070      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005066:	4b3a      	ldr	r3, [pc, #232]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x7b0>
 8005072:	e068      	b.n	8005146 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005074:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800507a:	4b35      	ldr	r3, [pc, #212]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	2b01      	cmp	r3, #1
 8005086:	d031      	beq.n	80050ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f003 0203 	and.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d12a      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d122      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d11a      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	0a5b      	lsrs	r3, r3, #9
 80050ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d111      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d108      	bne.n	80050ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	0e1b      	lsrs	r3, r3, #24
 80050de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e02b      	b.n	8005148 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050f0:	4b17      	ldr	r3, [pc, #92]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 80050f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f4:	08db      	lsrs	r3, r3, #3
 80050f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d01f      	beq.n	8005146 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005106:	4b12      	ldr	r3, [pc, #72]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	4a11      	ldr	r2, [pc, #68]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005112:	f7fc fcd9 	bl	8001ac8 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005118:	bf00      	nop
 800511a:	f7fc fcd5 	bl	8001ac8 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	4293      	cmp	r3, r2
 8005124:	d0f9      	beq.n	800511a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005126:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800512a:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <HAL_RCC_OscConfig+0x8b0>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005132:	00d2      	lsls	r2, r2, #3
 8005134:	4906      	ldr	r1, [pc, #24]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005136:	4313      	orrs	r3, r2
 8005138:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800513a:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 800513c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513e:	4a04      	ldr	r2, [pc, #16]	@ (8005150 <HAL_RCC_OscConfig+0x8ac>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3730      	adds	r7, #48	@ 0x30
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	58024400 	.word	0x58024400
 8005154:	ffff0007 	.word	0xffff0007

08005158 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e19c      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800516c:	4b8a      	ldr	r3, [pc, #552]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d910      	bls.n	800519c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b87      	ldr	r3, [pc, #540]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 020f 	bic.w	r2, r3, #15
 8005182:	4985      	ldr	r1, [pc, #532]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b83      	ldr	r3, [pc, #524]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e184      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	4b7b      	ldr	r3, [pc, #492]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d908      	bls.n	80051ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051b8:	4b78      	ldr	r3, [pc, #480]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	4975      	ldr	r1, [pc, #468]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d010      	beq.n	80051f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	4b70      	ldr	r3, [pc, #448]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d908      	bls.n	80051f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051e6:	4b6d      	ldr	r3, [pc, #436]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	496a      	ldr	r1, [pc, #424]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	4b64      	ldr	r3, [pc, #400]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005210:	429a      	cmp	r2, r3
 8005212:	d908      	bls.n	8005226 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005214:	4b61      	ldr	r3, [pc, #388]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	495e      	ldr	r1, [pc, #376]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005222:	4313      	orrs	r3, r2
 8005224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	4b59      	ldr	r3, [pc, #356]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800523e:	429a      	cmp	r2, r3
 8005240:	d908      	bls.n	8005254 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005242:	4b56      	ldr	r3, [pc, #344]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	4953      	ldr	r1, [pc, #332]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005250:	4313      	orrs	r3, r2
 8005252:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d010      	beq.n	8005282 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	4b4d      	ldr	r3, [pc, #308]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	429a      	cmp	r2, r3
 800526e:	d908      	bls.n	8005282 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005270:	4b4a      	ldr	r3, [pc, #296]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f023 020f 	bic.w	r2, r3, #15
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4947      	ldr	r1, [pc, #284]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800527e:	4313      	orrs	r3, r2
 8005280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d055      	beq.n	800533a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800528e:	4b43      	ldr	r3, [pc, #268]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	4940      	ldr	r1, [pc, #256]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800529c:	4313      	orrs	r3, r2
 800529e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a8:	4b3c      	ldr	r3, [pc, #240]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d121      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0f6      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052c0:	4b36      	ldr	r3, [pc, #216]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0ea      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052d8:	4b30      	ldr	r3, [pc, #192]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0de      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052e8:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0d6      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052f8:	4b28      	ldr	r3, [pc, #160]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f023 0207 	bic.w	r2, r3, #7
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4925      	ldr	r1, [pc, #148]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005306:	4313      	orrs	r3, r2
 8005308:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fc fbdd 	bl	8001ac8 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005310:	e00a      	b.n	8005328 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005312:	f7fc fbd9 	bl	8001ac8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0be      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005328:	4b1c      	ldr	r3, [pc, #112]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	429a      	cmp	r2, r3
 8005338:	d1eb      	bne.n	8005312 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	4b14      	ldr	r3, [pc, #80]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	429a      	cmp	r2, r3
 8005354:	d208      	bcs.n	8005368 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005356:	4b11      	ldr	r3, [pc, #68]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f023 020f 	bic.w	r2, r3, #15
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	490e      	ldr	r1, [pc, #56]	@ (800539c <HAL_RCC_ClockConfig+0x244>)
 8005364:	4313      	orrs	r3, r2
 8005366:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d214      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 020f 	bic.w	r2, r3, #15
 800537e:	4906      	ldr	r1, [pc, #24]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <HAL_RCC_ClockConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e086      	b.n	80054a6 <HAL_RCC_ClockConfig+0x34e>
 8005398:	52002000 	.word	0x52002000
 800539c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	4b3f      	ldr	r3, [pc, #252]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d208      	bcs.n	80053ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053bc:	4b3c      	ldr	r3, [pc, #240]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	4939      	ldr	r1, [pc, #228]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	4b34      	ldr	r3, [pc, #208]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d208      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ea:	4b31      	ldr	r3, [pc, #196]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	492e      	ldr	r1, [pc, #184]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005414:	429a      	cmp	r2, r3
 8005416:	d208      	bcs.n	800542a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005418:	4b25      	ldr	r3, [pc, #148]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	4922      	ldr	r1, [pc, #136]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005426:	4313      	orrs	r3, r2
 8005428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	4b1d      	ldr	r3, [pc, #116]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005442:	429a      	cmp	r2, r3
 8005444:	d208      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005446:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4917      	ldr	r1, [pc, #92]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005454:	4313      	orrs	r3, r2
 8005456:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005458:	f000 f834 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	4912      	ldr	r1, [pc, #72]	@ (80054b4 <HAL_RCC_ClockConfig+0x35c>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
 8005474:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005476:	4b0e      	ldr	r3, [pc, #56]	@ (80054b0 <HAL_RCC_ClockConfig+0x358>)
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	4a0d      	ldr	r2, [pc, #52]	@ (80054b4 <HAL_RCC_ClockConfig+0x35c>)
 8005480:	5cd3      	ldrb	r3, [r2, r3]
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	4a0a      	ldr	r2, [pc, #40]	@ (80054b8 <HAL_RCC_ClockConfig+0x360>)
 800548e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005490:	4a0a      	ldr	r2, [pc, #40]	@ (80054bc <HAL_RCC_ClockConfig+0x364>)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005496:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <HAL_RCC_ClockConfig+0x368>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fb fec6 	bl	800122c <HAL_InitTick>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
 80054b4:	08014b10 	.word	0x08014b10
 80054b8:	24000004 	.word	0x24000004
 80054bc:	24000000 	.word	0x24000000
 80054c0:	24000008 	.word	0x24000008

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b089      	sub	sp, #36	@ 0x24
 80054c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ca:	4bb3      	ldr	r3, [pc, #716]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054d2:	2b18      	cmp	r3, #24
 80054d4:	f200 8155 	bhi.w	8005782 <HAL_RCC_GetSysClockFreq+0x2be>
 80054d8:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005545 	.word	0x08005545
 80054e4:	08005783 	.word	0x08005783
 80054e8:	08005783 	.word	0x08005783
 80054ec:	08005783 	.word	0x08005783
 80054f0:	08005783 	.word	0x08005783
 80054f4:	08005783 	.word	0x08005783
 80054f8:	08005783 	.word	0x08005783
 80054fc:	08005783 	.word	0x08005783
 8005500:	0800556b 	.word	0x0800556b
 8005504:	08005783 	.word	0x08005783
 8005508:	08005783 	.word	0x08005783
 800550c:	08005783 	.word	0x08005783
 8005510:	08005783 	.word	0x08005783
 8005514:	08005783 	.word	0x08005783
 8005518:	08005783 	.word	0x08005783
 800551c:	08005783 	.word	0x08005783
 8005520:	08005571 	.word	0x08005571
 8005524:	08005783 	.word	0x08005783
 8005528:	08005783 	.word	0x08005783
 800552c:	08005783 	.word	0x08005783
 8005530:	08005783 	.word	0x08005783
 8005534:	08005783 	.word	0x08005783
 8005538:	08005783 	.word	0x08005783
 800553c:	08005783 	.word	0x08005783
 8005540:	08005577 	.word	0x08005577
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005544:	4b94      	ldr	r3, [pc, #592]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d009      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005550:	4b91      	ldr	r3, [pc, #580]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	08db      	lsrs	r3, r3, #3
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	4a90      	ldr	r2, [pc, #576]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
 8005560:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005562:	e111      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005564:	4b8d      	ldr	r3, [pc, #564]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005566:	61bb      	str	r3, [r7, #24]
      break;
 8005568:	e10e      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800556a:	4b8d      	ldr	r3, [pc, #564]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800556c:	61bb      	str	r3, [r7, #24]
      break;
 800556e:	e10b      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005570:	4b8c      	ldr	r3, [pc, #560]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005572:	61bb      	str	r3, [r7, #24]
      break;
 8005574:	e108      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005576:	4b88      	ldr	r3, [pc, #544]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005580:	4b85      	ldr	r3, [pc, #532]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800558c:	4b82      	ldr	r3, [pc, #520]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005596:	4b80      	ldr	r3, [pc, #512]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559a:	08db      	lsrs	r3, r3, #3
 800559c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80e1 	beq.w	800577c <HAL_RCC_GetSysClockFreq+0x2b8>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f000 8083 	beq.w	80056c8 <HAL_RCC_GetSysClockFreq+0x204>
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	f200 80a1 	bhi.w	800570c <HAL_RCC_GetSysClockFreq+0x248>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x114>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d056      	beq.n	8005684 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055d6:	e099      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02d      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055e4:	4b6c      	ldr	r3, [pc, #432]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	08db      	lsrs	r3, r3, #3
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	4a6b      	ldr	r2, [pc, #428]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	4b62      	ldr	r3, [pc, #392]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005622:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800563e:	e087      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80057ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b51      	ldr	r3, [pc, #324]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a02 	vldr	s12, [r7, #8]
 8005666:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005682:	e065      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005696:	4b40      	ldr	r3, [pc, #256]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056c6:	e043      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80057b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056da:	4b2f      	ldr	r3, [pc, #188]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800570a:	e021      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800571a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571e:	4b1e      	ldr	r3, [pc, #120]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005732:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800574e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005750:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	0a5b      	lsrs	r3, r3, #9
 8005756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800575a:	3301      	adds	r3, #1
 800575c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005768:	edd7 6a07 	vldr	s13, [r7, #28]
 800576c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005774:	ee17 3a90 	vmov	r3, s15
 8005778:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800577a:	e005      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]
      break;
 8005780:	e002      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005784:	61bb      	str	r3, [r7, #24]
      break;
 8005786:	bf00      	nop
  }

  return sysclockfreq;
 8005788:	69bb      	ldr	r3, [r7, #24]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3724      	adds	r7, #36	@ 0x24
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	58024400 	.word	0x58024400
 800579c:	03d09000 	.word	0x03d09000
 80057a0:	003d0900 	.word	0x003d0900
 80057a4:	017d7840 	.word	0x017d7840
 80057a8:	46000000 	.word	0x46000000
 80057ac:	4c742400 	.word	0x4c742400
 80057b0:	4a742400 	.word	0x4a742400
 80057b4:	4bbebc20 	.word	0x4bbebc20

080057b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057be:	f7ff fe81 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 80057c2:	4602      	mov	r2, r0
 80057c4:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x50>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	490f      	ldr	r1, [pc, #60]	@ (800580c <HAL_RCC_GetHCLKFreq+0x54>)
 80057d0:	5ccb      	ldrb	r3, [r1, r3]
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	fa22 f303 	lsr.w	r3, r2, r3
 80057da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x50>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	4a09      	ldr	r2, [pc, #36]	@ (800580c <HAL_RCC_GetHCLKFreq+0x54>)
 80057e6:	5cd3      	ldrb	r3, [r2, r3]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	4a07      	ldr	r2, [pc, #28]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x58>)
 80057f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057f6:	4a07      	ldr	r2, [pc, #28]	@ (8005814 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057fc:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x58>)
 80057fe:	681b      	ldr	r3, [r3, #0]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	58024400 	.word	0x58024400
 800580c:	08014b10 	.word	0x08014b10
 8005810:	24000004 	.word	0x24000004
 8005814:	24000000 	.word	0x24000000

08005818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800581c:	f7ff ffcc 	bl	80057b8 <HAL_RCC_GetHCLKFreq>
 8005820:	4602      	mov	r2, r0
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	4904      	ldr	r1, [pc, #16]	@ (8005840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800582e:	5ccb      	ldrb	r3, [r1, r3]
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	58024400 	.word	0x58024400
 8005840:	08014b10 	.word	0x08014b10

08005844 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	223f      	movs	r2, #63	@ 0x3f
 8005852:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0207 	and.w	r2, r3, #7
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005860:	4b17      	ldr	r3, [pc, #92]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800586c:	4b14      	ldr	r3, [pc, #80]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f003 020f 	and.w	r2, r3, #15
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005878:	4b11      	ldr	r3, [pc, #68]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005884:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800589c:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058a8:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <HAL_RCC_GetClockConfig+0x80>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	58024400 	.word	0x58024400
 80058c4:	52002000 	.word	0x52002000

080058c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b0ca      	sub	sp, #296	@ 0x128
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058da:	2300      	movs	r3, #0
 80058dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80058ec:	2500      	movs	r5, #0
 80058ee:	ea54 0305 	orrs.w	r3, r4, r5
 80058f2:	d049      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058fe:	d02f      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005900:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005904:	d828      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005906:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800590a:	d01a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800590c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005910:	d822      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800591a:	d007      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800591c:	e01c      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591e:	4bb8      	ldr	r3, [pc, #736]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	4ab7      	ldr	r2, [pc, #732]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800592a:	e01a      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005930:	3308      	adds	r3, #8
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f9d1 	bl	8006cdc <RCCEx_PLL2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005940:	e00f      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	3328      	adds	r3, #40	@ 0x28
 8005948:	2102      	movs	r1, #2
 800594a:	4618      	mov	r0, r3
 800594c:	f001 fa78 	bl	8006e40 <RCCEx_PLL3_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005956:	e004      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800595e:	e000      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800596a:	4ba5      	ldr	r3, [pc, #660]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800596c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005978:	4aa1      	ldr	r2, [pc, #644]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800597a:	430b      	orrs	r3, r1
 800597c:	6513      	str	r3, [r2, #80]	@ 0x50
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	ea58 0309 	orrs.w	r3, r8, r9
 800599c:	d047      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d82a      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c5 	.word	0x080059c5
 80059b4:	080059d3 	.word	0x080059d3
 80059b8:	080059e9 	.word	0x080059e9
 80059bc:	08005a07 	.word	0x08005a07
 80059c0:	08005a07 	.word	0x08005a07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4a8d      	ldr	r2, [pc, #564]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059d0:	e01a      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	3308      	adds	r3, #8
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f97e 	bl	8006cdc <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059e6:	e00f      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	3328      	adds	r3, #40	@ 0x28
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fa25 	bl	8006e40 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059fc:	e004      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a10:	4b7b      	ldr	r3, [pc, #492]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a14:	f023 0107 	bic.w	r1, r3, #7
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1e:	4a78      	ldr	r2, [pc, #480]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a24:	e003      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005a3a:	f04f 0b00 	mov.w	fp, #0
 8005a3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a42:	d04c      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a4e:	d030      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a54:	d829      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a58:	d02d      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a5c:	d825      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a5e:	2b80      	cmp	r3, #128	@ 0x80
 8005a60:	d018      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a62:	2b80      	cmp	r3, #128	@ 0x80
 8005a64:	d821      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a6a:	2b40      	cmp	r3, #64	@ 0x40
 8005a6c:	d007      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a6e:	e01c      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b63      	ldr	r3, [pc, #396]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	4a62      	ldr	r2, [pc, #392]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a7c:	e01c      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3308      	adds	r3, #8
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f928 	bl	8006cdc <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a92:	e011      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	3328      	adds	r3, #40	@ 0x28
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f9cf 	bl	8006e40 <RCCEx_PLL3_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005aa8:	e006      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ab0:	e002      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ace:	4a4c      	ldr	r2, [pc, #304]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ad4:	e003      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005aea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005aee:	2300      	movs	r3, #0
 8005af0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005af4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d053      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b0a:	d035      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b10:	d82e      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b16:	d031      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b1c:	d828      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b22:	d01a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b28:	d822      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b32:	d007      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b34:	e01c      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b36:	4b32      	ldr	r3, [pc, #200]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	4a31      	ldr	r2, [pc, #196]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b42:	e01c      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	3308      	adds	r3, #8
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f8c5 	bl	8006cdc <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b58:	e011      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	3328      	adds	r3, #40	@ 0x28
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 f96c 	bl	8006e40 <RCCEx_PLL3_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b6e:	e006      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b76:	e002      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b78:	bf00      	nop
 8005b7a:	e000      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10b      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b86:	4b1e      	ldr	r3, [pc, #120]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b96:	4a1a      	ldr	r2, [pc, #104]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b9c:	e003      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005bb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005bbc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	d056      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bd2:	d038      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005bd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bd8:	d831      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bde:	d034      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005be0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005be4:	d82b      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005be6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bea:	d01d      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005bec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bf0:	d825      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005bf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005bfc:	e01f      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bfe:	bf00      	nop
 8005c00:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c04:	4ba2      	ldr	r3, [pc, #648]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	4aa1      	ldr	r2, [pc, #644]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c10:	e01c      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c16:	3308      	adds	r3, #8
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 f85e 	bl	8006cdc <RCCEx_PLL2_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c26:	e011      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2c:	3328      	adds	r3, #40	@ 0x28
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 f905 	bl	8006e40 <RCCEx_PLL3_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c54:	4b8e      	ldr	r3, [pc, #568]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c64:	4a8a      	ldr	r2, [pc, #552]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005c8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d03a      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c9a:	2b30      	cmp	r3, #48	@ 0x30
 8005c9c:	d01f      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005c9e:	2b30      	cmp	r3, #48	@ 0x30
 8005ca0:	d819      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d815      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d019      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005cae:	2b10      	cmp	r3, #16
 8005cb0:	d111      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb2:	4b77      	ldr	r3, [pc, #476]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	4a76      	ldr	r2, [pc, #472]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005cbe:	e011      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 f807 	bl	8006cdc <RCCEx_PLL2_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005cd4:	e006      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cdc:	e002      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cec:	4b68      	ldr	r3, [pc, #416]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cfa:	4a65      	ldr	r2, [pc, #404]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4313      	orrs	r3, r2
 8005d28:	d051      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d34:	d035      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d3a:	d82e      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d40:	d031      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d46:	d828      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d4c:	d01a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d52:	d822      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5c:	d007      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d5e:	e01c      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d60:	4b4b      	ldr	r3, [pc, #300]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a4a      	ldr	r2, [pc, #296]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d6c:	e01c      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	3308      	adds	r3, #8
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 ffb0 	bl	8006cdc <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d82:	e011      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	3328      	adds	r3, #40	@ 0x28
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 f857 	bl	8006e40 <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da0:	e002      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005db0:	4b37      	ldr	r3, [pc, #220]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbe:	4a34      	ldr	r2, [pc, #208]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dc4:	e003      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005dda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dde:	2300      	movs	r3, #0
 8005de0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005de4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005de8:	460b      	mov	r3, r1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	d056      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df8:	d033      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005dfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dfe:	d82c      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e04:	d02f      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e0a:	d826      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e10:	d02b      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e16:	d820      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e1c:	d012      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e22:	d81a      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d022      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e2c:	d115      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e32:	3308      	adds	r3, #8
 8005e34:	2101      	movs	r1, #1
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 ff50 	bl	8006cdc <RCCEx_PLL2_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e42:	e015      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	3328      	adds	r3, #40	@ 0x28
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fff7 	bl	8006e40 <RCCEx_PLL3_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e58:	e00a      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10d      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e78:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e86:	4a02      	ldr	r2, [pc, #8]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e8e:	bf00      	nop
 8005e90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eb2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d055      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ec8:	d033      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ece:	d82c      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed4:	d02f      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eda:	d826      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005edc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ee0:	d02b      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ee2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ee6:	d820      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eec:	d012      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef2:	d81a      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d022      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005efc:	d115      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f02:	3308      	adds	r3, #8
 8005f04:	2101      	movs	r1, #1
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fee8 	bl	8006cdc <RCCEx_PLL2_Config>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f12:	e015      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	3328      	adds	r3, #40	@ 0x28
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 ff8f 	bl	8006e40 <RCCEx_PLL3_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f28:	e00a      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f30:	e006      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f32:	bf00      	nop
 8005f34:	e004      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f36:	bf00      	nop
 8005f38:	e002      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f48:	4ba3      	ldr	r3, [pc, #652]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f58:	4a9f      	ldr	r2, [pc, #636]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f5e:	e003      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d037      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f92:	d00e      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f98:	d816      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d018      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa2:	d111      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	4a8b      	ldr	r2, [pc, #556]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fb0:	e00f      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	2101      	movs	r1, #1
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fe8e 	bl	8006cdc <RCCEx_PLL2_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005fc6:	e004      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fda:	4b7f      	ldr	r3, [pc, #508]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe8:	4a7b      	ldr	r2, [pc, #492]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fea:	430b      	orrs	r3, r1
 8005fec:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fee:	e003      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800600e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006012:	460b      	mov	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	d039      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800601e:	2b03      	cmp	r3, #3
 8006020:	d81c      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006022:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006065 	.word	0x08006065
 800602c:	08006039 	.word	0x08006039
 8006030:	08006047 	.word	0x08006047
 8006034:	08006065 	.word	0x08006065
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006038:	4b67      	ldr	r3, [pc, #412]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	4a66      	ldr	r2, [pc, #408]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800603e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006044:	e00f      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	3308      	adds	r3, #8
 800604c:	2102      	movs	r1, #2
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fe44 	bl	8006cdc <RCCEx_PLL2_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800605a:	e004      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006062:	e000      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800606e:	4b5a      	ldr	r3, [pc, #360]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006072:	f023 0103 	bic.w	r1, r3, #3
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800607c:	4a56      	ldr	r2, [pc, #344]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800607e:	430b      	orrs	r3, r1
 8006080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006098:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f000 809f 	beq.w	80061ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ae:	4b4b      	ldr	r3, [pc, #300]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a4a      	ldr	r2, [pc, #296]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ba:	f7fb fd05 	bl	8001ac8 <HAL_GetTick>
 80060be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060c2:	e00b      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c4:	f7fb fd00 	bl	8001ac8 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b64      	cmp	r3, #100	@ 0x64
 80060d2:	d903      	bls.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060da:	e005      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060dc:	4b3f      	ldr	r3, [pc, #252]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0ed      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d179      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060f0:	4b39      	ldr	r3, [pc, #228]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060fc:	4053      	eors	r3, r2
 80060fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006106:	4b34      	ldr	r3, [pc, #208]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800610e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006112:	4b31      	ldr	r3, [pc, #196]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006116:	4a30      	ldr	r2, [pc, #192]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800611c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800611e:	4b2e      	ldr	r3, [pc, #184]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006122:	4a2d      	ldr	r2, [pc, #180]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006128:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800612a:	4a2b      	ldr	r2, [pc, #172]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006130:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800613a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800613e:	d118      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fb fcc2 	bl	8001ac8 <HAL_GetTick>
 8006144:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006148:	e00d      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fb fcbd 	bl	8001ac8 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006154:	1ad2      	subs	r2, r2, r3
 8006156:	f241 3388 	movw	r3, #5000	@ 0x1388
 800615a:	429a      	cmp	r2, r3
 800615c:	d903      	bls.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006164:	e005      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006166:	4b1c      	ldr	r3, [pc, #112]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0eb      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006176:	2b00      	cmp	r3, #0
 8006178:	d129      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800618a:	d10e      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800618c:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800619c:	091a      	lsrs	r2, r3, #4
 800619e:	4b10      	ldr	r3, [pc, #64]	@ (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	4a0d      	ldr	r2, [pc, #52]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6113      	str	r3, [r2, #16]
 80061a8:	e005      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80061aa:	4b0b      	ldr	r3, [pc, #44]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	4a0a      	ldr	r2, [pc, #40]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061b4:	6113      	str	r3, [r2, #16]
 80061b6:	4b08      	ldr	r3, [pc, #32]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c6:	4a04      	ldr	r2, [pc, #16]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80061cc:	e00e      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80061d6:	e009      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80061d8:	58024400 	.word	0x58024400
 80061dc:	58024800 	.word	0x58024800
 80061e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f002 0301 	and.w	r3, r2, #1
 80061f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061fc:	2300      	movs	r3, #0
 80061fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006202:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006206:	460b      	mov	r3, r1
 8006208:	4313      	orrs	r3, r2
 800620a:	f000 8089 	beq.w	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006214:	2b28      	cmp	r3, #40	@ 0x28
 8006216:	d86b      	bhi.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006218:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	080062f9 	.word	0x080062f9
 8006224:	080062f1 	.word	0x080062f1
 8006228:	080062f1 	.word	0x080062f1
 800622c:	080062f1 	.word	0x080062f1
 8006230:	080062f1 	.word	0x080062f1
 8006234:	080062f1 	.word	0x080062f1
 8006238:	080062f1 	.word	0x080062f1
 800623c:	080062f1 	.word	0x080062f1
 8006240:	080062c5 	.word	0x080062c5
 8006244:	080062f1 	.word	0x080062f1
 8006248:	080062f1 	.word	0x080062f1
 800624c:	080062f1 	.word	0x080062f1
 8006250:	080062f1 	.word	0x080062f1
 8006254:	080062f1 	.word	0x080062f1
 8006258:	080062f1 	.word	0x080062f1
 800625c:	080062f1 	.word	0x080062f1
 8006260:	080062db 	.word	0x080062db
 8006264:	080062f1 	.word	0x080062f1
 8006268:	080062f1 	.word	0x080062f1
 800626c:	080062f1 	.word	0x080062f1
 8006270:	080062f1 	.word	0x080062f1
 8006274:	080062f1 	.word	0x080062f1
 8006278:	080062f1 	.word	0x080062f1
 800627c:	080062f1 	.word	0x080062f1
 8006280:	080062f9 	.word	0x080062f9
 8006284:	080062f1 	.word	0x080062f1
 8006288:	080062f1 	.word	0x080062f1
 800628c:	080062f1 	.word	0x080062f1
 8006290:	080062f1 	.word	0x080062f1
 8006294:	080062f1 	.word	0x080062f1
 8006298:	080062f1 	.word	0x080062f1
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	080062f9 	.word	0x080062f9
 80062a4:	080062f1 	.word	0x080062f1
 80062a8:	080062f1 	.word	0x080062f1
 80062ac:	080062f1 	.word	0x080062f1
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	080062f1 	.word	0x080062f1
 80062b8:	080062f1 	.word	0x080062f1
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	080062f9 	.word	0x080062f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	3308      	adds	r3, #8
 80062ca:	2101      	movs	r1, #1
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fd05 	bl	8006cdc <RCCEx_PLL2_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062d8:	e00f      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	3328      	adds	r3, #40	@ 0x28
 80062e0:	2101      	movs	r1, #1
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fdac 	bl	8006e40 <RCCEx_PLL3_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062ee:	e004      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062f6:	e000      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80062f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006302:	4bbf      	ldr	r3, [pc, #764]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006306:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006310:	4abb      	ldr	r2, [pc, #748]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006312:	430b      	orrs	r3, r1
 8006314:	6553      	str	r3, [r2, #84]	@ 0x54
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f002 0302 	and.w	r3, r2, #2
 800632c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006336:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d041      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006346:	2b05      	cmp	r3, #5
 8006348:	d824      	bhi.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800634a:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	0800639d 	.word	0x0800639d
 8006354:	08006369 	.word	0x08006369
 8006358:	0800637f 	.word	0x0800637f
 800635c:	0800639d 	.word	0x0800639d
 8006360:	0800639d 	.word	0x0800639d
 8006364:	0800639d 	.word	0x0800639d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636c:	3308      	adds	r3, #8
 800636e:	2101      	movs	r1, #1
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fcb3 	bl	8006cdc <RCCEx_PLL2_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800637c:	e00f      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	3328      	adds	r3, #40	@ 0x28
 8006384:	2101      	movs	r1, #1
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd5a 	bl	8006e40 <RCCEx_PLL3_Config>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006392:	e004      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800639a:	e000      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800639c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800639e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063a6:	4b96      	ldr	r3, [pc, #600]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063aa:	f023 0107 	bic.w	r1, r3, #7
 80063ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063b4:	4a92      	ldr	r2, [pc, #584]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063b6:	430b      	orrs	r3, r1
 80063b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80063ba:	e003      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f002 0304 	and.w	r3, r2, #4
 80063d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80063de:	460b      	mov	r3, r1
 80063e0:	4313      	orrs	r3, r2
 80063e2:	d044      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ec:	2b05      	cmp	r3, #5
 80063ee:	d825      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80063f0:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	08006445 	.word	0x08006445
 80063fc:	08006411 	.word	0x08006411
 8006400:	08006427 	.word	0x08006427
 8006404:	08006445 	.word	0x08006445
 8006408:	08006445 	.word	0x08006445
 800640c:	08006445 	.word	0x08006445
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006414:	3308      	adds	r3, #8
 8006416:	2101      	movs	r1, #1
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fc5f 	bl	8006cdc <RCCEx_PLL2_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006424:	e00f      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	3328      	adds	r3, #40	@ 0x28
 800642c:	2101      	movs	r1, #1
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fd06 	bl	8006e40 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800643a:	e004      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800644e:	4b6c      	ldr	r3, [pc, #432]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006452:	f023 0107 	bic.w	r1, r3, #7
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800645e:	4a68      	ldr	r2, [pc, #416]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006460:	430b      	orrs	r3, r1
 8006462:	6593      	str	r3, [r2, #88]	@ 0x58
 8006464:	e003      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800646a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f002 0320 	and.w	r3, r2, #32
 800647a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800647e:	2300      	movs	r3, #0
 8006480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d055      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800649a:	d033      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800649c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064a0:	d82c      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a6:	d02f      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ac:	d826      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064b2:	d02b      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80064b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80064b8:	d820      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064be:	d012      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80064c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c4:	d81a      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d022      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80064ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ce:	d115      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d4:	3308      	adds	r3, #8
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fbff 	bl	8006cdc <RCCEx_PLL2_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064e4:	e015      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	3328      	adds	r3, #40	@ 0x28
 80064ec:	2102      	movs	r1, #2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fca6 	bl	8006e40 <RCCEx_PLL3_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064fa:	e00a      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006502:	e006      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006504:	bf00      	nop
 8006506:	e004      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006508:	bf00      	nop
 800650a:	e002      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800650c:	bf00      	nop
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800651a:	4b39      	ldr	r3, [pc, #228]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800651c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800652a:	4a35      	ldr	r2, [pc, #212]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800652c:	430b      	orrs	r3, r1
 800652e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006530:	e003      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800653a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800654a:	2300      	movs	r3, #0
 800654c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006550:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006554:	460b      	mov	r3, r1
 8006556:	4313      	orrs	r3, r2
 8006558:	d058      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006562:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006566:	d033      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006568:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800656c:	d82c      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006572:	d02f      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006578:	d826      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800657a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800657e:	d02b      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006584:	d820      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800658a:	d012      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800658c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006590:	d81a      	bhi.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d022      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659a:	d115      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	3308      	adds	r3, #8
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fb99 	bl	8006cdc <RCCEx_PLL2_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065b0:	e015      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	3328      	adds	r3, #40	@ 0x28
 80065b8:	2102      	movs	r1, #2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fc40 	bl	8006e40 <RCCEx_PLL3_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80065c6:	e00a      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ce:	e006      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065d0:	bf00      	nop
 80065d2:	e004      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80065dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10e      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065e6:	4b06      	ldr	r3, [pc, #24]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065f6:	4a02      	ldr	r2, [pc, #8]	@ (8006600 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80065fc:	e006      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80065fe:	bf00      	nop
 8006600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006622:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006626:	460b      	mov	r3, r1
 8006628:	4313      	orrs	r3, r2
 800662a:	d055      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006630:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006634:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006638:	d033      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800663a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800663e:	d82c      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006644:	d02f      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664a:	d826      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800664c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006650:	d02b      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006652:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006656:	d820      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800665c:	d012      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800665e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006662:	d81a      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d022      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800666c:	d115      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	3308      	adds	r3, #8
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fb30 	bl	8006cdc <RCCEx_PLL2_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006682:	e015      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	3328      	adds	r3, #40	@ 0x28
 800668a:	2102      	movs	r1, #2
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fbd7 	bl	8006e40 <RCCEx_PLL3_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006698:	e00a      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066a0:	e006      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066a2:	bf00      	nop
 80066a4:	e004      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80066c8:	4a9d      	ldr	r2, [pc, #628]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ca:	430b      	orrs	r3, r1
 80066cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f002 0308 	and.w	r3, r2, #8
 80066e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066e8:	2300      	movs	r3, #0
 80066ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066f2:	460b      	mov	r3, r1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	d01e      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006704:	d10c      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	3328      	adds	r3, #40	@ 0x28
 800670c:	2102      	movs	r1, #2
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fb96 	bl	8006e40 <RCCEx_PLL3_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006720:	4b87      	ldr	r3, [pc, #540]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006724:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006730:	4a83      	ldr	r2, [pc, #524]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006732:	430b      	orrs	r3, r1
 8006734:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f002 0310 	and.w	r3, r2, #16
 8006742:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800674c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d01e      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800675e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006762:	d10c      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	3328      	adds	r3, #40	@ 0x28
 800676a:	2102      	movs	r1, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fb67 	bl	8006e40 <RCCEx_PLL3_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800677e:	4b70      	ldr	r3, [pc, #448]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006782:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800678e:	4a6c      	ldr	r2, [pc, #432]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80067ae:	460b      	mov	r3, r1
 80067b0:	4313      	orrs	r3, r2
 80067b2:	d03e      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80067b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c0:	d022      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80067c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c6:	d81b      	bhi.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d0:	d00b      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80067d2:	e015      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	3308      	adds	r3, #8
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fa7d 	bl	8006cdc <RCCEx_PLL2_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067e8:	e00f      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	3328      	adds	r3, #40	@ 0x28
 80067f0:	2102      	movs	r1, #2
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fb24 	bl	8006e40 <RCCEx_PLL3_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067fe:	e004      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006812:	4b4b      	ldr	r3, [pc, #300]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006822:	4a47      	ldr	r2, [pc, #284]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006824:	430b      	orrs	r3, r1
 8006826:	6593      	str	r3, [r2, #88]	@ 0x58
 8006828:	e003      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800682e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800683e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006840:	2300      	movs	r3, #0
 8006842:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006844:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006848:	460b      	mov	r3, r1
 800684a:	4313      	orrs	r3, r2
 800684c:	d03b      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006856:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800685a:	d01f      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800685c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006860:	d818      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006866:	d003      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006868:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800686c:	d007      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800686e:	e011      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006870:	4b33      	ldr	r3, [pc, #204]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	4a32      	ldr	r2, [pc, #200]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800687a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800687c:	e00f      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	3328      	adds	r3, #40	@ 0x28
 8006884:	2101      	movs	r1, #1
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fada 	bl	8006e40 <RCCEx_PLL3_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006892:	e004      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800689a:	e000      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800689c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800689e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10b      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068a6:	4b26      	ldr	r3, [pc, #152]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b6:	4a22      	ldr	r2, [pc, #136]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80068d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80068d4:	2300      	movs	r3, #0
 80068d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80068d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068dc:	460b      	mov	r3, r1
 80068de:	4313      	orrs	r3, r2
 80068e0:	d034      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d007      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80068f2:	e011      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f4:	4b12      	ldr	r3, [pc, #72]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	4a11      	ldr	r2, [pc, #68]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006900:	e00e      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	3308      	adds	r3, #8
 8006908:	2102      	movs	r1, #2
 800690a:	4618      	mov	r0, r3
 800690c:	f000 f9e6 	bl	8006cdc <RCCEx_PLL2_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006916:	e003      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800691e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10d      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006928:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800692a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800692c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006936:	4a02      	ldr	r2, [pc, #8]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006938:	430b      	orrs	r3, r1
 800693a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800693c:	e006      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800693e:	bf00      	nop
 8006940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800695a:	2300      	movs	r3, #0
 800695c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800695e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006962:	460b      	mov	r3, r1
 8006964:	4313      	orrs	r3, r2
 8006966:	d00c      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696c:	3328      	adds	r3, #40	@ 0x28
 800696e:	2102      	movs	r1, #2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fa65 	bl	8006e40 <RCCEx_PLL3_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800698e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006990:	2300      	movs	r3, #0
 8006992:	667b      	str	r3, [r7, #100]	@ 0x64
 8006994:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d038      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069aa:	d018      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80069ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069b0:	d811      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80069b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b6:	d014      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069bc:	d80b      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d011      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c6:	d106      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4bc3      	ldr	r3, [pc, #780]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	4ac2      	ldr	r2, [pc, #776]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80069d4:	e008      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069dc:	e004      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069de:	bf00      	nop
 80069e0:	e002      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80069e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069f0:	4bb9      	ldr	r3, [pc, #740]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a00:	4ab5      	ldr	r2, [pc, #724]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a1e:	2300      	movs	r3, #0
 8006a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a26:	460b      	mov	r3, r1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a2c:	4baa      	ldr	r3, [pc, #680]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3a:	4aa7      	ldr	r2, [pc, #668]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a4e:	2300      	movs	r3, #0
 8006a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d00a      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006a5c:	4b9e      	ldr	r3, [pc, #632]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a6c:	4a9a      	ldr	r2, [pc, #616]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a80:	2300      	movs	r3, #0
 8006a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a8e:	4b92      	ldr	r3, [pc, #584]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a92:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a9c:	4a8e      	ldr	r2, [pc, #568]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006aae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d00e      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006abe:	4b86      	ldr	r3, [pc, #536]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	4a85      	ldr	r2, [pc, #532]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ac4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ac8:	6113      	str	r3, [r2, #16]
 8006aca:	4b83      	ldr	r3, [pc, #524]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006acc:	6919      	ldr	r1, [r3, #16]
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ad6:	4a80      	ldr	r2, [pc, #512]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad8:	430b      	orrs	r3, r1
 8006ada:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006af2:	460b      	mov	r3, r1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006af8:	4b77      	ldr	r3, [pc, #476]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b06:	4a74      	ldr	r2, [pc, #464]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006b22:	460b      	mov	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	d00a      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b28:	4b6b      	ldr	r3, [pc, #428]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b38:	4a67      	ldr	r2, [pc, #412]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	2100      	movs	r1, #0
 8006b48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006b54:	460b      	mov	r3, r1
 8006b56:	4313      	orrs	r3, r2
 8006b58:	d011      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5e:	3308      	adds	r3, #8
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 f8ba 	bl	8006cdc <RCCEx_PLL2_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	2100      	movs	r1, #0
 8006b88:	6239      	str	r1, [r7, #32]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b94:	460b      	mov	r3, r1
 8006b96:	4313      	orrs	r3, r2
 8006b98:	d011      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f89a 	bl	8006cdc <RCCEx_PLL2_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	61b9      	str	r1, [r7, #24]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d011      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bde:	3308      	adds	r3, #8
 8006be0:	2102      	movs	r1, #2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f87a 	bl	8006cdc <RCCEx_PLL2_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	2100      	movs	r1, #0
 8006c08:	6139      	str	r1, [r7, #16]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c14:	460b      	mov	r3, r1
 8006c16:	4313      	orrs	r3, r2
 8006c18:	d011      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1e:	3328      	adds	r3, #40	@ 0x28
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f90c 	bl	8006e40 <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	2100      	movs	r1, #0
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c54:	460b      	mov	r3, r1
 8006c56:	4313      	orrs	r3, r2
 8006c58:	d011      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	3328      	adds	r3, #40	@ 0x28
 8006c60:	2101      	movs	r1, #1
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 f8ec 	bl	8006e40 <RCCEx_PLL3_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	2100      	movs	r1, #0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	607b      	str	r3, [r7, #4]
 8006c90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c94:	460b      	mov	r3, r1
 8006c96:	4313      	orrs	r3, r2
 8006c98:	d011      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	3328      	adds	r3, #40	@ 0x28
 8006ca0:	2102      	movs	r1, #2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 f8cc 	bl	8006e40 <RCCEx_PLL3_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006cbe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cd8:	58024400 	.word	0x58024400

08006cdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cea:	4b53      	ldr	r3, [pc, #332]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d101      	bne.n	8006cfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e099      	b.n	8006e2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a4e      	ldr	r2, [pc, #312]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d06:	f7fa fedf 	bl	8001ac8 <HAL_GetTick>
 8006d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d0c:	e008      	b.n	8006d20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d0e:	f7fa fedb 	bl	8001ac8 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e086      	b.n	8006e2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d20:	4b45      	ldr	r3, [pc, #276]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f0      	bne.n	8006d0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d2c:	4b42      	ldr	r3, [pc, #264]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	031b      	lsls	r3, r3, #12
 8006d3a:	493f      	ldr	r1, [pc, #252]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	025b      	lsls	r3, r3, #9
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	061b      	lsls	r3, r3, #24
 8006d6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d70:	4931      	ldr	r1, [pc, #196]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d76:	4b30      	ldr	r3, [pc, #192]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	492d      	ldr	r1, [pc, #180]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d88:	4b2b      	ldr	r3, [pc, #172]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8c:	f023 0220 	bic.w	r2, r3, #32
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	4928      	ldr	r1, [pc, #160]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d9a:	4b27      	ldr	r3, [pc, #156]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	4a26      	ldr	r2, [pc, #152]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	f023 0310 	bic.w	r3, r3, #16
 8006da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006da6:	4b24      	ldr	r3, [pc, #144]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006da8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006daa:	4b24      	ldr	r3, [pc, #144]	@ (8006e3c <RCCEx_PLL2_Config+0x160>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	69d2      	ldr	r2, [r2, #28]
 8006db2:	00d2      	lsls	r2, r2, #3
 8006db4:	4920      	ldr	r1, [pc, #128]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dba:	4b1f      	ldr	r3, [pc, #124]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	f043 0310 	orr.w	r3, r3, #16
 8006dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	4a19      	ldr	r2, [pc, #100]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006dd8:	e00f      	b.n	8006dfa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d106      	bne.n	8006dee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006de0:	4b15      	ldr	r3, [pc, #84]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	4a14      	ldr	r2, [pc, #80]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006dec:	e005      	b.n	8006dfa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006dee:	4b12      	ldr	r3, [pc, #72]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df2:	4a11      	ldr	r2, [pc, #68]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006df4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006df8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006e00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e06:	f7fa fe5f 	bl	8001ac8 <HAL_GetTick>
 8006e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e0c:	e008      	b.n	8006e20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e0e:	f7fa fe5b 	bl	8001ac8 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <RCCEx_PLL2_Config+0x15c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	ffff0007 	.word	0xffff0007

08006e40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e4e:	4b53      	ldr	r3, [pc, #332]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d101      	bne.n	8006e5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e099      	b.n	8006f92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a4e      	ldr	r2, [pc, #312]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6a:	f7fa fe2d 	bl	8001ac8 <HAL_GetTick>
 8006e6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e70:	e008      	b.n	8006e84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e72:	f7fa fe29 	bl	8001ac8 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e086      	b.n	8006f92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e84:	4b45      	ldr	r3, [pc, #276]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f0      	bne.n	8006e72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e90:	4b42      	ldr	r3, [pc, #264]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	051b      	lsls	r3, r3, #20
 8006e9e:	493f      	ldr	r1, [pc, #252]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	025b      	lsls	r3, r3, #9
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	061b      	lsls	r3, r3, #24
 8006ed0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ed4:	4931      	ldr	r1, [pc, #196]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006eda:	4b30      	ldr	r3, [pc, #192]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	492d      	ldr	r1, [pc, #180]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006eec:	4b2b      	ldr	r3, [pc, #172]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	4928      	ldr	r1, [pc, #160]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006efe:	4b27      	ldr	r3, [pc, #156]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	4a26      	ldr	r2, [pc, #152]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f0a:	4b24      	ldr	r3, [pc, #144]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f0e:	4b24      	ldr	r3, [pc, #144]	@ (8006fa0 <RCCEx_PLL3_Config+0x160>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	69d2      	ldr	r2, [r2, #28]
 8006f16:	00d2      	lsls	r2, r2, #3
 8006f18:	4920      	ldr	r1, [pc, #128]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f22:	4a1e      	ldr	r2, [pc, #120]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f30:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	4a19      	ldr	r2, [pc, #100]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f3c:	e00f      	b.n	8006f5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d106      	bne.n	8006f52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f44:	4b15      	ldr	r3, [pc, #84]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	4a14      	ldr	r2, [pc, #80]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f50:	e005      	b.n	8006f5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f52:	4b12      	ldr	r3, [pc, #72]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	4a11      	ldr	r2, [pc, #68]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a0e      	ldr	r2, [pc, #56]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f6a:	f7fa fdad 	bl	8001ac8 <HAL_GetTick>
 8006f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f70:	e008      	b.n	8006f84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f72:	f7fa fda9 	bl	8001ac8 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e006      	b.n	8006f92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f84:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <RCCEx_PLL3_Config+0x15c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0f0      	beq.n	8006f72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	58024400 	.word	0x58024400
 8006fa0:	ffff0007 	.word	0xffff0007

08006fa4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e10f      	b.n	80071d6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a87      	ldr	r2, [pc, #540]	@ (80071e0 <HAL_SPI_Init+0x23c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00f      	beq.n	8006fe6 <HAL_SPI_Init+0x42>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a86      	ldr	r2, [pc, #536]	@ (80071e4 <HAL_SPI_Init+0x240>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00a      	beq.n	8006fe6 <HAL_SPI_Init+0x42>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a84      	ldr	r2, [pc, #528]	@ (80071e8 <HAL_SPI_Init+0x244>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d005      	beq.n	8006fe6 <HAL_SPI_Init+0x42>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	2b0f      	cmp	r3, #15
 8006fe0:	d901      	bls.n	8006fe6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e0f7      	b.n	80071d6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fe2e 	bl	8007c48 <SPI_GetPacketSize>
 8006fec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7b      	ldr	r2, [pc, #492]	@ (80071e0 <HAL_SPI_Init+0x23c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00c      	beq.n	8007012 <HAL_SPI_Init+0x6e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a79      	ldr	r2, [pc, #484]	@ (80071e4 <HAL_SPI_Init+0x240>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <HAL_SPI_Init+0x6e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a78      	ldr	r2, [pc, #480]	@ (80071e8 <HAL_SPI_Init+0x244>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d002      	beq.n	8007012 <HAL_SPI_Init+0x6e>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b08      	cmp	r3, #8
 8007010:	d811      	bhi.n	8007036 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007016:	4a72      	ldr	r2, [pc, #456]	@ (80071e0 <HAL_SPI_Init+0x23c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a70      	ldr	r2, [pc, #448]	@ (80071e4 <HAL_SPI_Init+0x240>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <HAL_SPI_Init+0x8c>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a6f      	ldr	r2, [pc, #444]	@ (80071e8 <HAL_SPI_Init+0x244>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d104      	bne.n	800703a <HAL_SPI_Init+0x96>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b10      	cmp	r3, #16
 8007034:	d901      	bls.n	800703a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e0cd      	b.n	80071d6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fa f84c 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007076:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007080:	d119      	bne.n	80070b6 <HAL_SPI_Init+0x112>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800708a:	d103      	bne.n	8007094 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10c      	bne.n	80070b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80070a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070a4:	d107      	bne.n	80070b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00f      	beq.n	80070e2 <HAL_SPI_Init+0x13e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b06      	cmp	r3, #6
 80070c8:	d90b      	bls.n	80070e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e007      	b.n	80070f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69da      	ldr	r2, [r3, #28]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fa:	431a      	orrs	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007104:	ea42 0103 	orr.w	r1, r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	431a      	orrs	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007152:	ea42 0103 	orr.w	r1, r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d113      	bne.n	8007192 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800717c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007190:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40013000 	.word	0x40013000
 80071e4:	40003800 	.word	0x40003800
 80071e8:	40003c00 	.word	0x40003c00

080071ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3320      	adds	r3, #32
 8007202:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007204:	f7fa fc60 	bl	8001ac8 <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b01      	cmp	r3, #1
 8007214:	d001      	beq.n	800721a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007216:	2302      	movs	r3, #2
 8007218:	e1d1      	b.n	80075be <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_SPI_Transmit+0x3a>
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e1c9      	b.n	80075be <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_SPI_Transmit+0x4c>
 8007234:	2302      	movs	r3, #2
 8007236:	e1c2      	b.n	80075be <HAL_SPI_Transmit+0x3d2>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2203      	movs	r2, #3
 8007244:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007290:	d108      	bne.n	80072a4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	e009      	b.n	80072b8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80072b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	4b96      	ldr	r3, [pc, #600]	@ (8007518 <HAL_SPI_Transmit+0x32c>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	88f9      	ldrh	r1, [r7, #6]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	430b      	orrs	r3, r1
 80072ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072e4:	d107      	bne.n	80072f6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b0f      	cmp	r3, #15
 80072fc:	d947      	bls.n	800738e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80072fe:	e03f      	b.n	8007380 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b02      	cmp	r3, #2
 800730c:	d114      	bne.n	8007338 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731e:	1d1a      	adds	r2, r3, #4
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007336:	e023      	b.n	8007380 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007338:	f7fa fbc6 	bl	8001ac8 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d803      	bhi.n	8007350 <HAL_SPI_Transmit+0x164>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d102      	bne.n	8007356 <HAL_SPI_Transmit+0x16a>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d114      	bne.n	8007380 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 fba8 	bl	8007aac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007362:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e11e      	b.n	80075be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1b9      	bne.n	8007300 <HAL_SPI_Transmit+0x114>
 800738c:	e0f1      	b.n	8007572 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b07      	cmp	r3, #7
 8007394:	f240 80e6 	bls.w	8007564 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007398:	e05d      	b.n	8007456 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d132      	bne.n	800740e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d918      	bls.n	80073e6 <HAL_SPI_Transmit+0x1fa>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d014      	beq.n	80073e6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b02      	subs	r3, #2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80073e4:	e037      	b.n	8007456 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ea:	881a      	ldrh	r2, [r3, #0]
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f4:	1c9a      	adds	r2, r3, #2
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007400:	b29b      	uxth	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800740c:	e023      	b.n	8007456 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800740e:	f7fa fb5b 	bl	8001ac8 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d803      	bhi.n	8007426 <HAL_SPI_Transmit+0x23a>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d102      	bne.n	800742c <HAL_SPI_Transmit+0x240>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d114      	bne.n	8007456 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fb3d 	bl	8007aac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007438:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e0b3      	b.n	80075be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d19b      	bne.n	800739a <HAL_SPI_Transmit+0x1ae>
 8007462:	e086      	b.n	8007572 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b02      	cmp	r3, #2
 8007470:	d154      	bne.n	800751c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d918      	bls.n	80074b0 <HAL_SPI_Transmit+0x2c4>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	2b40      	cmp	r3, #64	@ 0x40
 8007484:	d914      	bls.n	80074b0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007496:	1d1a      	adds	r2, r3, #4
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b04      	subs	r3, #4
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074ae:	e059      	b.n	8007564 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d917      	bls.n	80074ec <HAL_SPI_Transmit+0x300>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d013      	beq.n	80074ec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c8:	881a      	ldrh	r2, [r3, #0]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d2:	1c9a      	adds	r2, r3, #2
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b02      	subs	r3, #2
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074ea:	e03b      	b.n	8007564 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3320      	adds	r3, #32
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007516:	e025      	b.n	8007564 <HAL_SPI_Transmit+0x378>
 8007518:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800751c:	f7fa fad4 	bl	8001ac8 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d803      	bhi.n	8007534 <HAL_SPI_Transmit+0x348>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d102      	bne.n	800753a <HAL_SPI_Transmit+0x34e>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d114      	bne.n	8007564 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 fab6 	bl	8007aac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007546:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e02c      	b.n	80075be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	f47f af79 	bne.w	8007464 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2200      	movs	r2, #0
 800757a:	2108      	movs	r1, #8
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fb35 	bl	8007bec <SPI_WaitOnFlagUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fa87 	bl	8007aac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
  }
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop

080075c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3301      	adds	r3, #1
 80075e2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3330      	adds	r3, #48	@ 0x30
 80075ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ec:	f7fa fa6c 	bl	8001ac8 <HAL_GetTick>
 80075f0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d001      	beq.n	8007602 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80075fe:	2302      	movs	r3, #2
 8007600:	e250      	b.n	8007aa4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <HAL_SPI_Receive+0x46>
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e248      	b.n	8007aa4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_SPI_Receive+0x58>
 800761c:	2302      	movs	r3, #2
 800761e:	e241      	b.n	8007aa4 <HAL_SPI_Receive+0x4dc>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2204      	movs	r2, #4
 800762c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	88fa      	ldrh	r2, [r7, #6]
 8007642:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007678:	d108      	bne.n	800768c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e009      	b.n	80076a0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800769e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	4b95      	ldr	r3, [pc, #596]	@ (80078fc <HAL_SPI_Receive+0x334>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	88f9      	ldrh	r1, [r7, #6]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076cc:	d107      	bne.n	80076de <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b0f      	cmp	r3, #15
 80076e4:	d96c      	bls.n	80077c0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80076e6:	e064      	b.n	80077b2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d114      	bne.n	8007728 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007706:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007708:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007726:	e044      	b.n	80077b2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800772e:	b29b      	uxth	r3, r3
 8007730:	8bfa      	ldrh	r2, [r7, #30]
 8007732:	429a      	cmp	r2, r3
 8007734:	d919      	bls.n	800776a <HAL_SPI_Receive+0x1a2>
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d014      	beq.n	800776a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800774a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007750:	1d1a      	adds	r2, r3, #4
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007768:	e023      	b.n	80077b2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800776a:	f7fa f9ad 	bl	8001ac8 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d803      	bhi.n	8007782 <HAL_SPI_Receive+0x1ba>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d102      	bne.n	8007788 <HAL_SPI_Receive+0x1c0>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d114      	bne.n	80077b2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f98f 	bl	8007aac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007794:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e178      	b.n	8007aa4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d194      	bne.n	80076e8 <HAL_SPI_Receive+0x120>
 80077be:	e15e      	b.n	8007a7e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b07      	cmp	r3, #7
 80077c6:	f240 8153 	bls.w	8007a70 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80077ca:	e08f      	b.n	80078ec <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d114      	bne.n	800780c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	8812      	ldrh	r2, [r2, #0]
 80077ea:	b292      	uxth	r2, r2
 80077ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800780a:	e06f      	b.n	80078ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007812:	b29b      	uxth	r3, r3
 8007814:	8bfa      	ldrh	r2, [r7, #30]
 8007816:	429a      	cmp	r2, r3
 8007818:	d924      	bls.n	8007864 <HAL_SPI_Receive+0x29c>
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01f      	beq.n	8007864 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	8812      	ldrh	r2, [r2, #0]
 800782c:	b292      	uxth	r2, r2
 800782e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007834:	1c9a      	adds	r2, r3, #2
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	8812      	ldrh	r2, [r2, #0]
 8007842:	b292      	uxth	r2, r2
 8007844:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800784a:	1c9a      	adds	r2, r3, #2
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b02      	subs	r3, #2
 800785a:	b29a      	uxth	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007862:	e043      	b.n	80078ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	d119      	bne.n	80078a4 <HAL_SPI_Receive+0x2dc>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d014      	beq.n	80078a4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	8812      	ldrh	r2, [r2, #0]
 8007882:	b292      	uxth	r2, r2
 8007884:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800788a:	1c9a      	adds	r2, r3, #2
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078a2:	e023      	b.n	80078ec <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078a4:	f7fa f910 	bl	8001ac8 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d803      	bhi.n	80078bc <HAL_SPI_Receive+0x2f4>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d102      	bne.n	80078c2 <HAL_SPI_Receive+0x2fa>
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d114      	bne.n	80078ec <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 f8f2 	bl	8007aac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e0db      	b.n	8007aa4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f af69 	bne.w	80077cc <HAL_SPI_Receive+0x204>
 80078fa:	e0c0      	b.n	8007a7e <HAL_SPI_Receive+0x4b6>
 80078fc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b01      	cmp	r3, #1
 8007914:	d117      	bne.n	8007946 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007922:	7812      	ldrb	r2, [r2, #0]
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007944:	e094      	b.n	8007a70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800794c:	b29b      	uxth	r3, r3
 800794e:	8bfa      	ldrh	r2, [r7, #30]
 8007950:	429a      	cmp	r2, r3
 8007952:	d946      	bls.n	80079e2 <HAL_SPI_Receive+0x41a>
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d041      	beq.n	80079e2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800796a:	7812      	ldrb	r2, [r2, #0]
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007986:	7812      	ldrb	r2, [r2, #0]
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079a2:	7812      	ldrb	r2, [r2, #0]
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b04      	subs	r3, #4
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079e0:	e046      	b.n	8007a70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d81c      	bhi.n	8007a28 <HAL_SPI_Receive+0x460>
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d017      	beq.n	8007a28 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a04:	7812      	ldrb	r2, [r2, #0]
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a26:	e023      	b.n	8007a70 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a28:	f7fa f84e 	bl	8001ac8 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d803      	bhi.n	8007a40 <HAL_SPI_Receive+0x478>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3e:	d102      	bne.n	8007a46 <HAL_SPI_Receive+0x47e>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d114      	bne.n	8007a70 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f830 	bl	8007aac <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e019      	b.n	8007aa4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f47f af41 	bne.w	8007900 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f814 	bl	8007aac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
  }
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0208 	orr.w	r2, r2, #8
 8007aca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0210 	orr.w	r2, r2, #16
 8007ada:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6919      	ldr	r1, [r3, #16]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b3c      	ldr	r3, [pc, #240]	@ (8007be8 <SPI_CloseTransfer+0x13c>)
 8007af8:	400b      	ands	r3, r1
 8007afa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007b0a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d014      	beq.n	8007b42 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00f      	beq.n	8007b42 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0220 	orr.w	r2, r2, #32
 8007b40:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d014      	beq.n	8007b78 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00f      	beq.n	8007b78 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b5e:	f043 0204 	orr.w	r2, r3, #4
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b76:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00f      	beq.n	8007ba2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b88:	f043 0201 	orr.w	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ba0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00f      	beq.n	8007bcc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bb2:	f043 0208 	orr.w	r2, r3, #8
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	fffffc90 	.word	0xfffffc90

08007bec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007bfc:	e010      	b.n	8007c20 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bfe:	f7f9 ff63 	bl	8001ac8 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d803      	bhi.n	8007c16 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c14:	d102      	bne.n	8007c1c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e00f      	b.n	8007c40 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695a      	ldr	r2, [r3, #20]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	bf0c      	ite	eq
 8007c30:	2301      	moveq	r3, #1
 8007c32:	2300      	movne	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d0df      	beq.n	8007bfe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	3307      	adds	r3, #7
 8007c66:	08db      	lsrs	r3, r3, #3
 8007c68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e049      	b.n	8007d24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7f9 fdfb 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f000 fd59 	bl	8008774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d001      	beq.n	8007d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e054      	b.n	8007dee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a26      	ldr	r2, [pc, #152]	@ (8007dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d022      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x80>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d6e:	d01d      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x80>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a22      	ldr	r2, [pc, #136]	@ (8007e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d018      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x80>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a21      	ldr	r2, [pc, #132]	@ (8007e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d013      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x80>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a1f      	ldr	r2, [pc, #124]	@ (8007e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00e      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x80>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a1e      	ldr	r2, [pc, #120]	@ (8007e0c <HAL_TIM_Base_Start_IT+0xe0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d009      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x80>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8007e10 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x80>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e14 <HAL_TIM_Base_Start_IT+0xe8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d115      	bne.n	8007dd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689a      	ldr	r2, [r3, #8]
 8007db2:	4b19      	ldr	r3, [pc, #100]	@ (8007e18 <HAL_TIM_Base_Start_IT+0xec>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b06      	cmp	r3, #6
 8007dbc:	d015      	beq.n	8007dea <HAL_TIM_Base_Start_IT+0xbe>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc4:	d011      	beq.n	8007dea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd6:	e008      	b.n	8007dea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	e000      	b.n	8007dec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40000400 	.word	0x40000400
 8007e04:	40000800 	.word	0x40000800
 8007e08:	40000c00 	.word	0x40000c00
 8007e0c:	40010400 	.word	0x40010400
 8007e10:	40001800 	.word	0x40001800
 8007e14:	40014000 	.word	0x40014000
 8007e18:	00010007 	.word	0x00010007

08007e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e049      	b.n	8007ec2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f841 	bl	8007eca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f000 fc8a 	bl	8008774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d109      	bne.n	8007f04 <HAL_TIM_PWM_Start+0x24>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	bf14      	ite	ne
 8007efc:	2301      	movne	r3, #1
 8007efe:	2300      	moveq	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	e03c      	b.n	8007f7e <HAL_TIM_PWM_Start+0x9e>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d109      	bne.n	8007f1e <HAL_TIM_PWM_Start+0x3e>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	bf14      	ite	ne
 8007f16:	2301      	movne	r3, #1
 8007f18:	2300      	moveq	r3, #0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	e02f      	b.n	8007f7e <HAL_TIM_PWM_Start+0x9e>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d109      	bne.n	8007f38 <HAL_TIM_PWM_Start+0x58>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	bf14      	ite	ne
 8007f30:	2301      	movne	r3, #1
 8007f32:	2300      	moveq	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	e022      	b.n	8007f7e <HAL_TIM_PWM_Start+0x9e>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b0c      	cmp	r3, #12
 8007f3c:	d109      	bne.n	8007f52 <HAL_TIM_PWM_Start+0x72>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	bf14      	ite	ne
 8007f4a:	2301      	movne	r3, #1
 8007f4c:	2300      	moveq	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	e015      	b.n	8007f7e <HAL_TIM_PWM_Start+0x9e>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	d109      	bne.n	8007f6c <HAL_TIM_PWM_Start+0x8c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	bf14      	ite	ne
 8007f64:	2301      	movne	r3, #1
 8007f66:	2300      	moveq	r3, #0
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	e008      	b.n	8007f7e <HAL_TIM_PWM_Start+0x9e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	bf14      	ite	ne
 8007f78:	2301      	movne	r3, #1
 8007f7a:	2300      	moveq	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e0a1      	b.n	80080ca <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <HAL_TIM_PWM_Start+0xb6>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f94:	e023      	b.n	8007fde <HAL_TIM_PWM_Start+0xfe>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d104      	bne.n	8007fa6 <HAL_TIM_PWM_Start+0xc6>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fa4:	e01b      	b.n	8007fde <HAL_TIM_PWM_Start+0xfe>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d104      	bne.n	8007fb6 <HAL_TIM_PWM_Start+0xd6>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fb4:	e013      	b.n	8007fde <HAL_TIM_PWM_Start+0xfe>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b0c      	cmp	r3, #12
 8007fba:	d104      	bne.n	8007fc6 <HAL_TIM_PWM_Start+0xe6>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fc4:	e00b      	b.n	8007fde <HAL_TIM_PWM_Start+0xfe>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d104      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0xf6>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fd4:	e003      	b.n	8007fde <HAL_TIM_PWM_Start+0xfe>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 ffde 	bl	8008fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a38      	ldr	r2, [pc, #224]	@ (80080d4 <HAL_TIM_PWM_Start+0x1f4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <HAL_TIM_PWM_Start+0x13e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a37      	ldr	r2, [pc, #220]	@ (80080d8 <HAL_TIM_PWM_Start+0x1f8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <HAL_TIM_PWM_Start+0x13e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a35      	ldr	r2, [pc, #212]	@ (80080dc <HAL_TIM_PWM_Start+0x1fc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_TIM_PWM_Start+0x13e>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a34      	ldr	r2, [pc, #208]	@ (80080e0 <HAL_TIM_PWM_Start+0x200>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_TIM_PWM_Start+0x13e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a32      	ldr	r2, [pc, #200]	@ (80080e4 <HAL_TIM_PWM_Start+0x204>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d101      	bne.n	8008022 <HAL_TIM_PWM_Start+0x142>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <HAL_TIM_PWM_Start+0x144>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008036:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a25      	ldr	r2, [pc, #148]	@ (80080d4 <HAL_TIM_PWM_Start+0x1f4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d022      	beq.n	8008088 <HAL_TIM_PWM_Start+0x1a8>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800804a:	d01d      	beq.n	8008088 <HAL_TIM_PWM_Start+0x1a8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a25      	ldr	r2, [pc, #148]	@ (80080e8 <HAL_TIM_PWM_Start+0x208>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d018      	beq.n	8008088 <HAL_TIM_PWM_Start+0x1a8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a24      	ldr	r2, [pc, #144]	@ (80080ec <HAL_TIM_PWM_Start+0x20c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d013      	beq.n	8008088 <HAL_TIM_PWM_Start+0x1a8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a22      	ldr	r2, [pc, #136]	@ (80080f0 <HAL_TIM_PWM_Start+0x210>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00e      	beq.n	8008088 <HAL_TIM_PWM_Start+0x1a8>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1a      	ldr	r2, [pc, #104]	@ (80080d8 <HAL_TIM_PWM_Start+0x1f8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d009      	beq.n	8008088 <HAL_TIM_PWM_Start+0x1a8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1e      	ldr	r2, [pc, #120]	@ (80080f4 <HAL_TIM_PWM_Start+0x214>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d004      	beq.n	8008088 <HAL_TIM_PWM_Start+0x1a8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a16      	ldr	r2, [pc, #88]	@ (80080dc <HAL_TIM_PWM_Start+0x1fc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d115      	bne.n	80080b4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	4b1a      	ldr	r3, [pc, #104]	@ (80080f8 <HAL_TIM_PWM_Start+0x218>)
 8008090:	4013      	ands	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b06      	cmp	r3, #6
 8008098:	d015      	beq.n	80080c6 <HAL_TIM_PWM_Start+0x1e6>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080a0:	d011      	beq.n	80080c6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0201 	orr.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b2:	e008      	b.n	80080c6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0201 	orr.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e000      	b.n	80080c8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40010000 	.word	0x40010000
 80080d8:	40010400 	.word	0x40010400
 80080dc:	40014000 	.word	0x40014000
 80080e0:	40014400 	.word	0x40014400
 80080e4:	40014800 	.word	0x40014800
 80080e8:	40000400 	.word	0x40000400
 80080ec:	40000800 	.word	0x40000800
 80080f0:	40000c00 	.word	0x40000c00
 80080f4:	40001800 	.word	0x40001800
 80080f8:	00010007 	.word	0x00010007

080080fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d020      	beq.n	8008160 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0202 	mvn.w	r2, #2
 8008130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 faf6 	bl	8008738 <HAL_TIM_IC_CaptureCallback>
 800814c:	e005      	b.n	800815a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fae8 	bl	8008724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 faf9 	bl	800874c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d020      	beq.n	80081ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01b      	beq.n	80081ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0204 	mvn.w	r2, #4
 800817c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fad0 	bl	8008738 <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fac2 	bl	8008724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fad3 	bl	800874c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d020      	beq.n	80081f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01b      	beq.n	80081f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0208 	mvn.w	r2, #8
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 faaa 	bl	8008738 <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa9c 	bl	8008724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 faad 	bl	800874c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d020      	beq.n	8008244 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01b      	beq.n	8008244 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0210 	mvn.w	r2, #16
 8008214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2208      	movs	r2, #8
 800821a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa84 	bl	8008738 <HAL_TIM_IC_CaptureCallback>
 8008230:	e005      	b.n	800823e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa76 	bl	8008724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa87 	bl	800874c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00c      	beq.n	8008268 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0201 	mvn.w	r2, #1
 8008260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f009 faa8 	bl	80117b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00c      	beq.n	8008296 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800828e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f887 	bl	80093a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80082b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 f87f 	bl	80093b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa41 	bl	8008760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00c      	beq.n	8008302 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0220 	mvn.w	r2, #32
 80082fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 f847 	bl	8009390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008322:	2b01      	cmp	r3, #1
 8008324:	d101      	bne.n	800832a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008326:	2302      	movs	r3, #2
 8008328:	e0ff      	b.n	800852a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b14      	cmp	r3, #20
 8008336:	f200 80f0 	bhi.w	800851a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800833a:	a201      	add	r2, pc, #4	@ (adr r2, 8008340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008395 	.word	0x08008395
 8008344:	0800851b 	.word	0x0800851b
 8008348:	0800851b 	.word	0x0800851b
 800834c:	0800851b 	.word	0x0800851b
 8008350:	080083d5 	.word	0x080083d5
 8008354:	0800851b 	.word	0x0800851b
 8008358:	0800851b 	.word	0x0800851b
 800835c:	0800851b 	.word	0x0800851b
 8008360:	08008417 	.word	0x08008417
 8008364:	0800851b 	.word	0x0800851b
 8008368:	0800851b 	.word	0x0800851b
 800836c:	0800851b 	.word	0x0800851b
 8008370:	08008457 	.word	0x08008457
 8008374:	0800851b 	.word	0x0800851b
 8008378:	0800851b 	.word	0x0800851b
 800837c:	0800851b 	.word	0x0800851b
 8008380:	08008499 	.word	0x08008499
 8008384:	0800851b 	.word	0x0800851b
 8008388:	0800851b 	.word	0x0800851b
 800838c:	0800851b 	.word	0x0800851b
 8008390:	080084d9 	.word	0x080084d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fa90 	bl	80088c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0208 	orr.w	r2, r2, #8
 80083ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0204 	bic.w	r2, r2, #4
 80083be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6999      	ldr	r1, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	619a      	str	r2, [r3, #24]
      break;
 80083d2:	e0a5      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fb00 	bl	80089e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6999      	ldr	r1, [r3, #24]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	021a      	lsls	r2, r3, #8
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	619a      	str	r2, [r3, #24]
      break;
 8008414:	e084      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fb69 	bl	8008af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0208 	orr.w	r2, r2, #8
 8008430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0204 	bic.w	r2, r2, #4
 8008440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69d9      	ldr	r1, [r3, #28]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	61da      	str	r2, [r3, #28]
      break;
 8008454:	e064      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fbd1 	bl	8008c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69d9      	ldr	r1, [r3, #28]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	021a      	lsls	r2, r3, #8
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	61da      	str	r2, [r3, #28]
      break;
 8008496:	e043      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fc1a 	bl	8008cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0208 	orr.w	r2, r2, #8
 80084b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0204 	bic.w	r2, r2, #4
 80084c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80084d6:	e023      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fc5e 	bl	8008da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008502:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	021a      	lsls	r2, r3, #8
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008518:	e002      	b.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	75fb      	strb	r3, [r7, #23]
      break;
 800851e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop

08008534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <HAL_TIM_ConfigClockSource+0x1c>
 800854c:	2302      	movs	r3, #2
 800854e:	e0dc      	b.n	800870a <HAL_TIM_ConfigClockSource+0x1d6>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	4b6a      	ldr	r3, [pc, #424]	@ (8008714 <HAL_TIM_ConfigClockSource+0x1e0>)
 800856c:	4013      	ands	r3, r2
 800856e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a64      	ldr	r2, [pc, #400]	@ (8008718 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	f000 80a9 	beq.w	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 800858c:	4a62      	ldr	r2, [pc, #392]	@ (8008718 <HAL_TIM_ConfigClockSource+0x1e4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	f200 80ae 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008594:	4a61      	ldr	r2, [pc, #388]	@ (800871c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	f000 80a1 	beq.w	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 800859c:	4a5f      	ldr	r2, [pc, #380]	@ (800871c <HAL_TIM_ConfigClockSource+0x1e8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	f200 80a6 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085a4:	4a5e      	ldr	r2, [pc, #376]	@ (8008720 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	f000 8099 	beq.w	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 80085ac:	4a5c      	ldr	r2, [pc, #368]	@ (8008720 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f200 809e 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085b8:	f000 8091 	beq.w	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 80085bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80085c0:	f200 8096 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085c8:	f000 8089 	beq.w	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 80085cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085d0:	f200 808e 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085d8:	d03e      	beq.n	8008658 <HAL_TIM_ConfigClockSource+0x124>
 80085da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085de:	f200 8087 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e6:	f000 8086 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x1c2>
 80085ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ee:	d87f      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085f0:	2b70      	cmp	r3, #112	@ 0x70
 80085f2:	d01a      	beq.n	800862a <HAL_TIM_ConfigClockSource+0xf6>
 80085f4:	2b70      	cmp	r3, #112	@ 0x70
 80085f6:	d87b      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085f8:	2b60      	cmp	r3, #96	@ 0x60
 80085fa:	d050      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x16a>
 80085fc:	2b60      	cmp	r3, #96	@ 0x60
 80085fe:	d877      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008600:	2b50      	cmp	r3, #80	@ 0x50
 8008602:	d03c      	beq.n	800867e <HAL_TIM_ConfigClockSource+0x14a>
 8008604:	2b50      	cmp	r3, #80	@ 0x50
 8008606:	d873      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008608:	2b40      	cmp	r3, #64	@ 0x40
 800860a:	d058      	beq.n	80086be <HAL_TIM_ConfigClockSource+0x18a>
 800860c:	2b40      	cmp	r3, #64	@ 0x40
 800860e:	d86f      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008610:	2b30      	cmp	r3, #48	@ 0x30
 8008612:	d064      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 8008614:	2b30      	cmp	r3, #48	@ 0x30
 8008616:	d86b      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008618:	2b20      	cmp	r3, #32
 800861a:	d060      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 800861c:	2b20      	cmp	r3, #32
 800861e:	d867      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d05c      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 8008624:	2b10      	cmp	r3, #16
 8008626:	d05a      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x1aa>
 8008628:	e062      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800863a:	f000 fc95 	bl	8008f68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800864c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	609a      	str	r2, [r3, #8]
      break;
 8008656:	e04f      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008668:	f000 fc7e 	bl	8008f68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800867a:	609a      	str	r2, [r3, #8]
      break;
 800867c:	e03c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800868a:	461a      	mov	r2, r3
 800868c:	f000 fbee 	bl	8008e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2150      	movs	r1, #80	@ 0x50
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fc48 	bl	8008f2c <TIM_ITRx_SetConfig>
      break;
 800869c:	e02c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086aa:	461a      	mov	r2, r3
 80086ac:	f000 fc0d 	bl	8008eca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2160      	movs	r1, #96	@ 0x60
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fc38 	bl	8008f2c <TIM_ITRx_SetConfig>
      break;
 80086bc:	e01c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ca:	461a      	mov	r2, r3
 80086cc:	f000 fbce 	bl	8008e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2140      	movs	r1, #64	@ 0x40
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fc28 	bl	8008f2c <TIM_ITRx_SetConfig>
      break;
 80086dc:	e00c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f000 fc1f 	bl	8008f2c <TIM_ITRx_SetConfig>
      break;
 80086ee:	e003      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
      break;
 80086f4:	e000      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80086f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	ffceff88 	.word	0xffceff88
 8008718:	00100040 	.word	0x00100040
 800871c:	00100030 	.word	0x00100030
 8008720:	00100020 	.word	0x00100020

08008724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a46      	ldr	r2, [pc, #280]	@ (80088a0 <TIM_Base_SetConfig+0x12c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d013      	beq.n	80087b4 <TIM_Base_SetConfig+0x40>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008792:	d00f      	beq.n	80087b4 <TIM_Base_SetConfig+0x40>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a43      	ldr	r2, [pc, #268]	@ (80088a4 <TIM_Base_SetConfig+0x130>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00b      	beq.n	80087b4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a42      	ldr	r2, [pc, #264]	@ (80088a8 <TIM_Base_SetConfig+0x134>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d007      	beq.n	80087b4 <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a41      	ldr	r2, [pc, #260]	@ (80088ac <TIM_Base_SetConfig+0x138>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d003      	beq.n	80087b4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a40      	ldr	r2, [pc, #256]	@ (80088b0 <TIM_Base_SetConfig+0x13c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d108      	bne.n	80087c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a35      	ldr	r2, [pc, #212]	@ (80088a0 <TIM_Base_SetConfig+0x12c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d01f      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d4:	d01b      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a32      	ldr	r2, [pc, #200]	@ (80088a4 <TIM_Base_SetConfig+0x130>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d017      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a31      	ldr	r2, [pc, #196]	@ (80088a8 <TIM_Base_SetConfig+0x134>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d013      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a30      	ldr	r2, [pc, #192]	@ (80088ac <TIM_Base_SetConfig+0x138>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00f      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a2f      	ldr	r2, [pc, #188]	@ (80088b0 <TIM_Base_SetConfig+0x13c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00b      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a2e      	ldr	r2, [pc, #184]	@ (80088b4 <TIM_Base_SetConfig+0x140>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d007      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2d      	ldr	r2, [pc, #180]	@ (80088b8 <TIM_Base_SetConfig+0x144>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d003      	beq.n	800880e <TIM_Base_SetConfig+0x9a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2c      	ldr	r2, [pc, #176]	@ (80088bc <TIM_Base_SetConfig+0x148>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d108      	bne.n	8008820 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a16      	ldr	r2, [pc, #88]	@ (80088a0 <TIM_Base_SetConfig+0x12c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00f      	beq.n	800886c <TIM_Base_SetConfig+0xf8>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a18      	ldr	r2, [pc, #96]	@ (80088b0 <TIM_Base_SetConfig+0x13c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00b      	beq.n	800886c <TIM_Base_SetConfig+0xf8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a17      	ldr	r2, [pc, #92]	@ (80088b4 <TIM_Base_SetConfig+0x140>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d007      	beq.n	800886c <TIM_Base_SetConfig+0xf8>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a16      	ldr	r2, [pc, #88]	@ (80088b8 <TIM_Base_SetConfig+0x144>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <TIM_Base_SetConfig+0xf8>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a15      	ldr	r2, [pc, #84]	@ (80088bc <TIM_Base_SetConfig+0x148>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d103      	bne.n	8008874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b01      	cmp	r3, #1
 8008884:	d105      	bne.n	8008892 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f023 0201 	bic.w	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	611a      	str	r2, [r3, #16]
  }
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40000c00 	.word	0x40000c00
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40014400 	.word	0x40014400
 80088bc:	40014800 	.word	0x40014800

080088c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	f023 0201 	bic.w	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4b37      	ldr	r3, [pc, #220]	@ (80089c8 <TIM_OC1_SetConfig+0x108>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f023 0302 	bic.w	r3, r3, #2
 8008908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a2d      	ldr	r2, [pc, #180]	@ (80089cc <TIM_OC1_SetConfig+0x10c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00f      	beq.n	800893c <TIM_OC1_SetConfig+0x7c>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a2c      	ldr	r2, [pc, #176]	@ (80089d0 <TIM_OC1_SetConfig+0x110>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d00b      	beq.n	800893c <TIM_OC1_SetConfig+0x7c>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a2b      	ldr	r2, [pc, #172]	@ (80089d4 <TIM_OC1_SetConfig+0x114>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d007      	beq.n	800893c <TIM_OC1_SetConfig+0x7c>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a2a      	ldr	r2, [pc, #168]	@ (80089d8 <TIM_OC1_SetConfig+0x118>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d003      	beq.n	800893c <TIM_OC1_SetConfig+0x7c>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a29      	ldr	r2, [pc, #164]	@ (80089dc <TIM_OC1_SetConfig+0x11c>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d10c      	bne.n	8008956 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f023 0308 	bic.w	r3, r3, #8
 8008942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f023 0304 	bic.w	r3, r3, #4
 8008954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1c      	ldr	r2, [pc, #112]	@ (80089cc <TIM_OC1_SetConfig+0x10c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00f      	beq.n	800897e <TIM_OC1_SetConfig+0xbe>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1b      	ldr	r2, [pc, #108]	@ (80089d0 <TIM_OC1_SetConfig+0x110>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00b      	beq.n	800897e <TIM_OC1_SetConfig+0xbe>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a1a      	ldr	r2, [pc, #104]	@ (80089d4 <TIM_OC1_SetConfig+0x114>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d007      	beq.n	800897e <TIM_OC1_SetConfig+0xbe>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a19      	ldr	r2, [pc, #100]	@ (80089d8 <TIM_OC1_SetConfig+0x118>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d003      	beq.n	800897e <TIM_OC1_SetConfig+0xbe>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a18      	ldr	r2, [pc, #96]	@ (80089dc <TIM_OC1_SetConfig+0x11c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d111      	bne.n	80089a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800898c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	621a      	str	r2, [r3, #32]
}
 80089bc:	bf00      	nop
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	fffeff8f 	.word	0xfffeff8f
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40010400 	.word	0x40010400
 80089d4:	40014000 	.word	0x40014000
 80089d8:	40014400 	.word	0x40014400
 80089dc:	40014800 	.word	0x40014800

080089e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	f023 0210 	bic.w	r2, r3, #16
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4b34      	ldr	r3, [pc, #208]	@ (8008adc <TIM_OC2_SetConfig+0xfc>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0320 	bic.w	r3, r3, #32
 8008a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a29      	ldr	r2, [pc, #164]	@ (8008ae0 <TIM_OC2_SetConfig+0x100>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_OC2_SetConfig+0x68>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a28      	ldr	r2, [pc, #160]	@ (8008ae4 <TIM_OC2_SetConfig+0x104>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d10d      	bne.n	8008a64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae0 <TIM_OC2_SetConfig+0x100>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00f      	beq.n	8008a8c <TIM_OC2_SetConfig+0xac>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae4 <TIM_OC2_SetConfig+0x104>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d00b      	beq.n	8008a8c <TIM_OC2_SetConfig+0xac>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae8 <TIM_OC2_SetConfig+0x108>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d007      	beq.n	8008a8c <TIM_OC2_SetConfig+0xac>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8008aec <TIM_OC2_SetConfig+0x10c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d003      	beq.n	8008a8c <TIM_OC2_SetConfig+0xac>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a1a      	ldr	r2, [pc, #104]	@ (8008af0 <TIM_OC2_SetConfig+0x110>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d113      	bne.n	8008ab4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	621a      	str	r2, [r3, #32]
}
 8008ace:	bf00      	nop
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	feff8fff 	.word	0xfeff8fff
 8008ae0:	40010000 	.word	0x40010000
 8008ae4:	40010400 	.word	0x40010400
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40014400 	.word	0x40014400
 8008af0:	40014800 	.word	0x40014800

08008af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4b33      	ldr	r3, [pc, #204]	@ (8008bec <TIM_OC3_SetConfig+0xf8>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a28      	ldr	r2, [pc, #160]	@ (8008bf0 <TIM_OC3_SetConfig+0xfc>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_OC3_SetConfig+0x66>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a27      	ldr	r2, [pc, #156]	@ (8008bf4 <TIM_OC3_SetConfig+0x100>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d10d      	bne.n	8008b76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf0 <TIM_OC3_SetConfig+0xfc>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00f      	beq.n	8008b9e <TIM_OC3_SetConfig+0xaa>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf4 <TIM_OC3_SetConfig+0x100>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00b      	beq.n	8008b9e <TIM_OC3_SetConfig+0xaa>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf8 <TIM_OC3_SetConfig+0x104>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d007      	beq.n	8008b9e <TIM_OC3_SetConfig+0xaa>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a1a      	ldr	r2, [pc, #104]	@ (8008bfc <TIM_OC3_SetConfig+0x108>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d003      	beq.n	8008b9e <TIM_OC3_SetConfig+0xaa>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a19      	ldr	r2, [pc, #100]	@ (8008c00 <TIM_OC3_SetConfig+0x10c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d113      	bne.n	8008bc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	fffeff8f 	.word	0xfffeff8f
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40010400 	.word	0x40010400
 8008bf8:	40014000 	.word	0x40014000
 8008bfc:	40014400 	.word	0x40014400
 8008c00:	40014800 	.word	0x40014800

08008c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4b24      	ldr	r3, [pc, #144]	@ (8008cc0 <TIM_OC4_SetConfig+0xbc>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	031b      	lsls	r3, r3, #12
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a19      	ldr	r2, [pc, #100]	@ (8008cc4 <TIM_OC4_SetConfig+0xc0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00f      	beq.n	8008c84 <TIM_OC4_SetConfig+0x80>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a18      	ldr	r2, [pc, #96]	@ (8008cc8 <TIM_OC4_SetConfig+0xc4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00b      	beq.n	8008c84 <TIM_OC4_SetConfig+0x80>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a17      	ldr	r2, [pc, #92]	@ (8008ccc <TIM_OC4_SetConfig+0xc8>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_OC4_SetConfig+0x80>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a16      	ldr	r2, [pc, #88]	@ (8008cd0 <TIM_OC4_SetConfig+0xcc>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_OC4_SetConfig+0x80>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a15      	ldr	r2, [pc, #84]	@ (8008cd4 <TIM_OC4_SetConfig+0xd0>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d109      	bne.n	8008c98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	019b      	lsls	r3, r3, #6
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	621a      	str	r2, [r3, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	feff8fff 	.word	0xfeff8fff
 8008cc4:	40010000 	.word	0x40010000
 8008cc8:	40010400 	.word	0x40010400
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800

08008cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4b21      	ldr	r3, [pc, #132]	@ (8008d88 <TIM_OC5_SetConfig+0xb0>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	041b      	lsls	r3, r3, #16
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a18      	ldr	r2, [pc, #96]	@ (8008d8c <TIM_OC5_SetConfig+0xb4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00f      	beq.n	8008d4e <TIM_OC5_SetConfig+0x76>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a17      	ldr	r2, [pc, #92]	@ (8008d90 <TIM_OC5_SetConfig+0xb8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00b      	beq.n	8008d4e <TIM_OC5_SetConfig+0x76>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a16      	ldr	r2, [pc, #88]	@ (8008d94 <TIM_OC5_SetConfig+0xbc>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d007      	beq.n	8008d4e <TIM_OC5_SetConfig+0x76>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a15      	ldr	r2, [pc, #84]	@ (8008d98 <TIM_OC5_SetConfig+0xc0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d003      	beq.n	8008d4e <TIM_OC5_SetConfig+0x76>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a14      	ldr	r2, [pc, #80]	@ (8008d9c <TIM_OC5_SetConfig+0xc4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d109      	bne.n	8008d62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	621a      	str	r2, [r3, #32]
}
 8008d7c:	bf00      	nop
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	fffeff8f 	.word	0xfffeff8f
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40010400 	.word	0x40010400
 8008d94:	40014000 	.word	0x40014000
 8008d98:	40014400 	.word	0x40014400
 8008d9c:	40014800 	.word	0x40014800

08008da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4b22      	ldr	r3, [pc, #136]	@ (8008e54 <TIM_OC6_SetConfig+0xb4>)
 8008dcc:	4013      	ands	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	021b      	lsls	r3, r3, #8
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	051b      	lsls	r3, r3, #20
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a19      	ldr	r2, [pc, #100]	@ (8008e58 <TIM_OC6_SetConfig+0xb8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00f      	beq.n	8008e18 <TIM_OC6_SetConfig+0x78>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a18      	ldr	r2, [pc, #96]	@ (8008e5c <TIM_OC6_SetConfig+0xbc>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00b      	beq.n	8008e18 <TIM_OC6_SetConfig+0x78>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a17      	ldr	r2, [pc, #92]	@ (8008e60 <TIM_OC6_SetConfig+0xc0>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d007      	beq.n	8008e18 <TIM_OC6_SetConfig+0x78>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a16      	ldr	r2, [pc, #88]	@ (8008e64 <TIM_OC6_SetConfig+0xc4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d003      	beq.n	8008e18 <TIM_OC6_SetConfig+0x78>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a15      	ldr	r2, [pc, #84]	@ (8008e68 <TIM_OC6_SetConfig+0xc8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d109      	bne.n	8008e2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	029b      	lsls	r3, r3, #10
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	feff8fff 	.word	0xfeff8fff
 8008e58:	40010000 	.word	0x40010000
 8008e5c:	40010400 	.word	0x40010400
 8008e60:	40014000 	.word	0x40014000
 8008e64:	40014400 	.word	0x40014400
 8008e68:	40014800 	.word	0x40014800

08008e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f023 0201 	bic.w	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f023 030a 	bic.w	r3, r3, #10
 8008ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	621a      	str	r2, [r3, #32]
}
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b087      	sub	sp, #28
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	f023 0210 	bic.w	r2, r3, #16
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	031b      	lsls	r3, r3, #12
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	621a      	str	r2, [r3, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
	...

08008f2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4b09      	ldr	r3, [pc, #36]	@ (8008f64 <TIM_ITRx_SetConfig+0x38>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	f043 0307 	orr.w	r3, r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	609a      	str	r2, [r3, #8]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	ffcfff8f 	.word	0xffcfff8f

08008f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	021a      	lsls	r2, r3, #8
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	609a      	str	r2, [r3, #8]
}
 8008f9c:	bf00      	nop
 8008f9e:	371c      	adds	r7, #28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f003 031f 	and.w	r3, r3, #31
 8008fba:	2201      	movs	r2, #1
 8008fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a1a      	ldr	r2, [r3, #32]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	401a      	ands	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6a1a      	ldr	r2, [r3, #32]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe0:	431a      	orrs	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	621a      	str	r2, [r3, #32]
}
 8008fe6:	bf00      	nop
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d109      	bne.n	8009018 <HAL_TIMEx_PWMN_Start+0x24>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	bf14      	ite	ne
 8009010:	2301      	movne	r3, #1
 8009012:	2300      	moveq	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	e022      	b.n	800905e <HAL_TIMEx_PWMN_Start+0x6a>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b04      	cmp	r3, #4
 800901c:	d109      	bne.n	8009032 <HAL_TIMEx_PWMN_Start+0x3e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b01      	cmp	r3, #1
 8009028:	bf14      	ite	ne
 800902a:	2301      	movne	r3, #1
 800902c:	2300      	moveq	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	e015      	b.n	800905e <HAL_TIMEx_PWMN_Start+0x6a>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b08      	cmp	r3, #8
 8009036:	d109      	bne.n	800904c <HAL_TIMEx_PWMN_Start+0x58>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	bf14      	ite	ne
 8009044:	2301      	movne	r3, #1
 8009046:	2300      	moveq	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	e008      	b.n	800905e <HAL_TIMEx_PWMN_Start+0x6a>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b01      	cmp	r3, #1
 8009056:	bf14      	ite	ne
 8009058:	2301      	movne	r3, #1
 800905a:	2300      	moveq	r3, #0
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e073      	b.n	800914e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <HAL_TIMEx_PWMN_Start+0x82>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009074:	e013      	b.n	800909e <HAL_TIMEx_PWMN_Start+0xaa>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b04      	cmp	r3, #4
 800907a:	d104      	bne.n	8009086 <HAL_TIMEx_PWMN_Start+0x92>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009084:	e00b      	b.n	800909e <HAL_TIMEx_PWMN_Start+0xaa>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b08      	cmp	r3, #8
 800908a:	d104      	bne.n	8009096 <HAL_TIMEx_PWMN_Start+0xa2>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009094:	e003      	b.n	800909e <HAL_TIMEx_PWMN_Start+0xaa>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2204      	movs	r2, #4
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f990 	bl	80093cc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a25      	ldr	r2, [pc, #148]	@ (8009158 <HAL_TIMEx_PWMN_Start+0x164>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d022      	beq.n	800910c <HAL_TIMEx_PWMN_Start+0x118>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ce:	d01d      	beq.n	800910c <HAL_TIMEx_PWMN_Start+0x118>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a21      	ldr	r2, [pc, #132]	@ (800915c <HAL_TIMEx_PWMN_Start+0x168>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d018      	beq.n	800910c <HAL_TIMEx_PWMN_Start+0x118>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a20      	ldr	r2, [pc, #128]	@ (8009160 <HAL_TIMEx_PWMN_Start+0x16c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d013      	beq.n	800910c <HAL_TIMEx_PWMN_Start+0x118>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a1e      	ldr	r2, [pc, #120]	@ (8009164 <HAL_TIMEx_PWMN_Start+0x170>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00e      	beq.n	800910c <HAL_TIMEx_PWMN_Start+0x118>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a1d      	ldr	r2, [pc, #116]	@ (8009168 <HAL_TIMEx_PWMN_Start+0x174>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d009      	beq.n	800910c <HAL_TIMEx_PWMN_Start+0x118>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1b      	ldr	r2, [pc, #108]	@ (800916c <HAL_TIMEx_PWMN_Start+0x178>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d004      	beq.n	800910c <HAL_TIMEx_PWMN_Start+0x118>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a1a      	ldr	r2, [pc, #104]	@ (8009170 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d115      	bne.n	8009138 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	4b18      	ldr	r3, [pc, #96]	@ (8009174 <HAL_TIMEx_PWMN_Start+0x180>)
 8009114:	4013      	ands	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b06      	cmp	r3, #6
 800911c:	d015      	beq.n	800914a <HAL_TIMEx_PWMN_Start+0x156>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009124:	d011      	beq.n	800914a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0201 	orr.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009136:	e008      	b.n	800914a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0201 	orr.w	r2, r2, #1
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	e000      	b.n	800914c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800914a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	40010000 	.word	0x40010000
 800915c:	40000400 	.word	0x40000400
 8009160:	40000800 	.word	0x40000800
 8009164:	40000c00 	.word	0x40000c00
 8009168:	40010400 	.word	0x40010400
 800916c:	40001800 	.word	0x40001800
 8009170:	40014000 	.word	0x40014000
 8009174:	00010007 	.word	0x00010007

08009178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800918c:	2302      	movs	r3, #2
 800918e:	e06d      	b.n	800926c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a30      	ldr	r2, [pc, #192]	@ (8009278 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d004      	beq.n	80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a2f      	ldr	r2, [pc, #188]	@ (800927c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d108      	bne.n	80091d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80091ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a20      	ldr	r2, [pc, #128]	@ (8009278 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d022      	beq.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009202:	d01d      	beq.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a1d      	ldr	r2, [pc, #116]	@ (8009280 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d018      	beq.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a1c      	ldr	r2, [pc, #112]	@ (8009284 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d013      	beq.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1a      	ldr	r2, [pc, #104]	@ (8009288 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00e      	beq.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a15      	ldr	r2, [pc, #84]	@ (800927c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d009      	beq.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a16      	ldr	r2, [pc, #88]	@ (800928c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d004      	beq.n	8009240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a15      	ldr	r2, [pc, #84]	@ (8009290 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d10c      	bne.n	800925a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009246:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	4313      	orrs	r3, r2
 8009250:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	40010000 	.word	0x40010000
 800927c:	40010400 	.word	0x40010400
 8009280:	40000400 	.word	0x40000400
 8009284:	40000800 	.word	0x40000800
 8009288:	40000c00 	.word	0x40000c00
 800928c:	40001800 	.word	0x40001800
 8009290:	40014000 	.word	0x40014000

08009294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d101      	bne.n	80092b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80092ac:	2302      	movs	r3, #2
 80092ae:	e065      	b.n	800937c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	041b      	lsls	r3, r3, #16
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a16      	ldr	r2, [pc, #88]	@ (8009388 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d004      	beq.n	800933e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a14      	ldr	r2, [pc, #80]	@ (800938c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d115      	bne.n	800936a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009348:	051b      	lsls	r3, r3, #20
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	4313      	orrs	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	40010000 	.word	0x40010000
 800938c:	40010400 	.word	0x40010400

08009390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f003 030f 	and.w	r3, r3, #15
 80093de:	2204      	movs	r2, #4
 80093e0:	fa02 f303 	lsl.w	r3, r2, r3
 80093e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6a1a      	ldr	r2, [r3, #32]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	43db      	mvns	r3, r3
 80093ee:	401a      	ands	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6a1a      	ldr	r2, [r3, #32]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f003 030f 	and.w	r3, r3, #15
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	fa01 f303 	lsl.w	r3, r1, r3
 8009404:	431a      	orrs	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	621a      	str	r2, [r3, #32]
}
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
	...

08009418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009418:	b084      	sub	sp, #16
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	f107 001c 	add.w	r0, r7, #28
 8009426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800942a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800942e:	2b01      	cmp	r3, #1
 8009430:	d121      	bne.n	8009476 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009436:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	4b2c      	ldr	r3, [pc, #176]	@ (80094f4 <USB_CoreInit+0xdc>)
 8009444:	4013      	ands	r3, r2
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009456:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800945a:	2b01      	cmp	r3, #1
 800945c:	d105      	bne.n	800946a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 faf6 	bl	800aa5c <USB_CoreReset>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	e01b      	b.n	80094ae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 faea 	bl	800aa5c <USB_CoreReset>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800948c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009498:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	639a      	str	r2, [r3, #56]	@ 0x38
 80094a0:	e005      	b.n	80094ae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094ae:	7fbb      	ldrb	r3, [r7, #30]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d116      	bne.n	80094e2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80094c2:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <USB_CoreInit+0xe0>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f043 0206 	orr.w	r2, r3, #6
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f043 0220 	orr.w	r2, r3, #32
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094ee:	b004      	add	sp, #16
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	ffbdffbf 	.word	0xffbdffbf
 80094f8:	03ee0000 	.word	0x03ee0000

080094fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d165      	bne.n	80095dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4a41      	ldr	r2, [pc, #260]	@ (8009618 <USB_SetTurnaroundTime+0x11c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d906      	bls.n	8009526 <USB_SetTurnaroundTime+0x2a>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4a40      	ldr	r2, [pc, #256]	@ (800961c <USB_SetTurnaroundTime+0x120>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d202      	bcs.n	8009526 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009520:	230f      	movs	r3, #15
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	e062      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4a3c      	ldr	r2, [pc, #240]	@ (800961c <USB_SetTurnaroundTime+0x120>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d306      	bcc.n	800953c <USB_SetTurnaroundTime+0x40>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4a3b      	ldr	r2, [pc, #236]	@ (8009620 <USB_SetTurnaroundTime+0x124>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d202      	bcs.n	800953c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009536:	230e      	movs	r3, #14
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	e057      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	4a38      	ldr	r2, [pc, #224]	@ (8009620 <USB_SetTurnaroundTime+0x124>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d306      	bcc.n	8009552 <USB_SetTurnaroundTime+0x56>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	4a37      	ldr	r2, [pc, #220]	@ (8009624 <USB_SetTurnaroundTime+0x128>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d202      	bcs.n	8009552 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800954c:	230d      	movs	r3, #13
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e04c      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4a33      	ldr	r2, [pc, #204]	@ (8009624 <USB_SetTurnaroundTime+0x128>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d306      	bcc.n	8009568 <USB_SetTurnaroundTime+0x6c>
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4a32      	ldr	r2, [pc, #200]	@ (8009628 <USB_SetTurnaroundTime+0x12c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d802      	bhi.n	8009568 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009562:	230c      	movs	r3, #12
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	e041      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4a2f      	ldr	r2, [pc, #188]	@ (8009628 <USB_SetTurnaroundTime+0x12c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d906      	bls.n	800957e <USB_SetTurnaroundTime+0x82>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4a2e      	ldr	r2, [pc, #184]	@ (800962c <USB_SetTurnaroundTime+0x130>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d802      	bhi.n	800957e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009578:	230b      	movs	r3, #11
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	e036      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4a2a      	ldr	r2, [pc, #168]	@ (800962c <USB_SetTurnaroundTime+0x130>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d906      	bls.n	8009594 <USB_SetTurnaroundTime+0x98>
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4a29      	ldr	r2, [pc, #164]	@ (8009630 <USB_SetTurnaroundTime+0x134>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d802      	bhi.n	8009594 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800958e:	230a      	movs	r3, #10
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e02b      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4a26      	ldr	r2, [pc, #152]	@ (8009630 <USB_SetTurnaroundTime+0x134>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d906      	bls.n	80095aa <USB_SetTurnaroundTime+0xae>
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4a25      	ldr	r2, [pc, #148]	@ (8009634 <USB_SetTurnaroundTime+0x138>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d202      	bcs.n	80095aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80095a4:	2309      	movs	r3, #9
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e020      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4a21      	ldr	r2, [pc, #132]	@ (8009634 <USB_SetTurnaroundTime+0x138>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d306      	bcc.n	80095c0 <USB_SetTurnaroundTime+0xc4>
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	4a20      	ldr	r2, [pc, #128]	@ (8009638 <USB_SetTurnaroundTime+0x13c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d802      	bhi.n	80095c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80095ba:	2308      	movs	r3, #8
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	e015      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009638 <USB_SetTurnaroundTime+0x13c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d906      	bls.n	80095d6 <USB_SetTurnaroundTime+0xda>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4a1c      	ldr	r2, [pc, #112]	@ (800963c <USB_SetTurnaroundTime+0x140>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d202      	bcs.n	80095d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80095d0:	2307      	movs	r3, #7
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e00a      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80095d6:	2306      	movs	r3, #6
 80095d8:	617b      	str	r3, [r7, #20]
 80095da:	e007      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80095e2:	2309      	movs	r3, #9
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e001      	b.n	80095ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80095e8:	2309      	movs	r3, #9
 80095ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	029b      	lsls	r3, r3, #10
 8009600:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009604:	431a      	orrs	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	371c      	adds	r7, #28
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	00d8acbf 	.word	0x00d8acbf
 800961c:	00e4e1c0 	.word	0x00e4e1c0
 8009620:	00f42400 	.word	0x00f42400
 8009624:	01067380 	.word	0x01067380
 8009628:	011a499f 	.word	0x011a499f
 800962c:	01312cff 	.word	0x01312cff
 8009630:	014ca43f 	.word	0x014ca43f
 8009634:	016e3600 	.word	0x016e3600
 8009638:	01a6ab1f 	.word	0x01a6ab1f
 800963c:	01e84800 	.word	0x01e84800

08009640 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f043 0201 	orr.w	r2, r3, #1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f023 0201 	bic.w	r2, r3, #1
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d115      	bne.n	80096d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096b2:	200a      	movs	r0, #10
 80096b4:	f7f8 fa14 	bl	8001ae0 <HAL_Delay>
      ms += 10U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	330a      	adds	r3, #10
 80096bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 f93b 	bl	800a93a <USB_GetMode>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d01e      	beq.n	8009708 <USB_SetCurrentMode+0x84>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80096ce:	d9f0      	bls.n	80096b2 <USB_SetCurrentMode+0x2e>
 80096d0:	e01a      	b.n	8009708 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d115      	bne.n	8009704 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096e4:	200a      	movs	r0, #10
 80096e6:	f7f8 f9fb 	bl	8001ae0 <HAL_Delay>
      ms += 10U;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	330a      	adds	r3, #10
 80096ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 f922 	bl	800a93a <USB_GetMode>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d005      	beq.n	8009708 <USB_SetCurrentMode+0x84>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8009700:	d9f0      	bls.n	80096e4 <USB_SetCurrentMode+0x60>
 8009702:	e001      	b.n	8009708 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e005      	b.n	8009714 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2bc8      	cmp	r3, #200	@ 0xc8
 800970c:	d101      	bne.n	8009712 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e000      	b.n	8009714 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800971c:	b084      	sub	sp, #16
 800971e:	b580      	push	{r7, lr}
 8009720:	b086      	sub	sp, #24
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800972a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009736:	2300      	movs	r3, #0
 8009738:	613b      	str	r3, [r7, #16]
 800973a:	e009      	b.n	8009750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	3340      	adds	r3, #64	@ 0x40
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	2200      	movs	r2, #0
 8009748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3301      	adds	r3, #1
 800974e:	613b      	str	r3, [r7, #16]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2b0e      	cmp	r3, #14
 8009754:	d9f2      	bls.n	800973c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009756:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800975a:	2b00      	cmp	r3, #0
 800975c:	d11c      	bne.n	8009798 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800976c:	f043 0302 	orr.w	r3, r3, #2
 8009770:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009776:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e005      	b.n	80097a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800979c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097aa:	461a      	mov	r2, r3
 80097ac:	2300      	movs	r3, #0
 80097ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d10d      	bne.n	80097d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d104      	bne.n	80097ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f968 	bl	8009a98 <USB_SetDevSpeed>
 80097c8:	e008      	b.n	80097dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097ca:	2101      	movs	r1, #1
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f963 	bl	8009a98 <USB_SetDevSpeed>
 80097d2:	e003      	b.n	80097dc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097d4:	2103      	movs	r1, #3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f95e 	bl	8009a98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097dc:	2110      	movs	r1, #16
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f8fa 	bl	80099d8 <USB_FlushTxFifo>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f924 	bl	8009a3c <USB_FlushRxFifo>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009804:	461a      	mov	r2, r3
 8009806:	2300      	movs	r3, #0
 8009808:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009810:	461a      	mov	r2, r3
 8009812:	2300      	movs	r3, #0
 8009814:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800981c:	461a      	mov	r2, r3
 800981e:	2300      	movs	r3, #0
 8009820:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	e043      	b.n	80098b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800983a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800983e:	d118      	bne.n	8009872 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009852:	461a      	mov	r2, r3
 8009854:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	e013      	b.n	8009884 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009868:	461a      	mov	r2, r3
 800986a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	e008      	b.n	8009884 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800987e:	461a      	mov	r2, r3
 8009880:	2300      	movs	r3, #0
 8009882:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009890:	461a      	mov	r2, r3
 8009892:	2300      	movs	r3, #0
 8009894:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a2:	461a      	mov	r2, r3
 80098a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	3301      	adds	r3, #1
 80098ae:	613b      	str	r3, [r7, #16]
 80098b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098b4:	461a      	mov	r2, r3
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d3b5      	bcc.n	8009828 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098bc:	2300      	movs	r3, #0
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	e043      	b.n	800994a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098d8:	d118      	bne.n	800990c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ec:	461a      	mov	r2, r3
 80098ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	e013      	b.n	800991e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009902:	461a      	mov	r2, r3
 8009904:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	e008      	b.n	800991e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009918:	461a      	mov	r2, r3
 800991a:	2300      	movs	r3, #0
 800991c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800992a:	461a      	mov	r2, r3
 800992c:	2300      	movs	r3, #0
 800992e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800993c:	461a      	mov	r2, r3
 800993e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3301      	adds	r3, #1
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800994e:	461a      	mov	r2, r3
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	4293      	cmp	r3, r2
 8009954:	d3b5      	bcc.n	80098c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009968:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009976:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009978:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800997c:	2b00      	cmp	r3, #0
 800997e:	d105      	bne.n	800998c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	f043 0210 	orr.w	r2, r3, #16
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699a      	ldr	r2, [r3, #24]
 8009990:	4b0f      	ldr	r3, [pc, #60]	@ (80099d0 <USB_DevInit+0x2b4>)
 8009992:	4313      	orrs	r3, r2
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009998:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f043 0208 	orr.w	r2, r3, #8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d105      	bne.n	80099c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699a      	ldr	r2, [r3, #24]
 80099b8:	4b06      	ldr	r3, [pc, #24]	@ (80099d4 <USB_DevInit+0x2b8>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099cc:	b004      	add	sp, #16
 80099ce:	4770      	bx	lr
 80099d0:	803c3800 	.word	0x803c3800
 80099d4:	40000004 	.word	0x40000004

080099d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099f2:	d901      	bls.n	80099f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e01b      	b.n	8009a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	daf2      	bge.n	80099e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	019b      	lsls	r3, r3, #6
 8009a08:	f043 0220 	orr.w	r2, r3, #32
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3301      	adds	r3, #1
 8009a14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a1c:	d901      	bls.n	8009a22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e006      	b.n	8009a30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	d0f0      	beq.n	8009a10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a54:	d901      	bls.n	8009a5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e018      	b.n	8009a8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	daf2      	bge.n	8009a48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2210      	movs	r2, #16
 8009a6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a78:	d901      	bls.n	8009a7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e006      	b.n	8009a8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	f003 0310 	and.w	r3, r3, #16
 8009a86:	2b10      	cmp	r3, #16
 8009a88:	d0f0      	beq.n	8009a6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	68f9      	ldr	r1, [r7, #12]
 8009ab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b087      	sub	sp, #28
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f003 0306 	and.w	r3, r3, #6
 8009ae2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009aea:	2300      	movs	r3, #0
 8009aec:	75fb      	strb	r3, [r7, #23]
 8009aee:	e00a      	b.n	8009b06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d002      	beq.n	8009afc <USB_GetDevSpeed+0x32>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b06      	cmp	r3, #6
 8009afa:	d102      	bne.n	8009b02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009afc:	2302      	movs	r3, #2
 8009afe:	75fb      	strb	r3, [r7, #23]
 8009b00:	e001      	b.n	8009b06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b02:	230f      	movs	r3, #15
 8009b04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	371c      	adds	r7, #28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d139      	bne.n	8009ba4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b36:	69da      	ldr	r2, [r3, #28]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	f003 030f 	and.w	r3, r3, #15
 8009b40:	2101      	movs	r1, #1
 8009b42:	fa01 f303 	lsl.w	r3, r1, r3
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	68f9      	ldr	r1, [r7, #12]
 8009b4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d153      	bne.n	8009c10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	059b      	lsls	r3, r3, #22
 8009b8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b8c:	431a      	orrs	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	0159      	lsls	r1, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	440b      	add	r3, r1
 8009b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4b20      	ldr	r3, [pc, #128]	@ (8009c20 <USB_ActivateEndpoint+0x10c>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	600b      	str	r3, [r1, #0]
 8009ba2:	e035      	b.n	8009c10 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009bba:	041b      	lsls	r3, r3, #16
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d119      	bne.n	8009c10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	791b      	ldrb	r3, [r3, #4]
 8009bf6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	0159      	lsls	r1, r3, #5
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	440b      	add	r3, r1
 8009c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4b05      	ldr	r3, [pc, #20]	@ (8009c20 <USB_ActivateEndpoint+0x10c>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	10008000 	.word	0x10008000

08009c24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d161      	bne.n	8009d04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c56:	d11f      	bne.n	8009c98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 030f 	and.w	r3, r3, #15
 8009ca8:	2101      	movs	r1, #1
 8009caa:	fa01 f303 	lsl.w	r3, r1, r3
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	68f9      	ldr	r1, [r7, #12]
 8009cb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cb8:	4013      	ands	r3, r2
 8009cba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc2:	69da      	ldr	r2, [r3, #28]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	2101      	movs	r1, #1
 8009cce:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	43db      	mvns	r3, r3
 8009cd6:	68f9      	ldr	r1, [r7, #12]
 8009cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cdc:	4013      	ands	r3, r2
 8009cde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	0159      	lsls	r1, r3, #5
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	440b      	add	r3, r1
 8009cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4b35      	ldr	r3, [pc, #212]	@ (8009dd4 <USB_DeactivateEndpoint+0x1b0>)
 8009cfe:	4013      	ands	r3, r2
 8009d00:	600b      	str	r3, [r1, #0]
 8009d02:	e060      	b.n	8009dc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d1a:	d11f      	bne.n	8009d5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	0151      	lsls	r1, r2, #5
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	440a      	add	r2, r1
 8009d32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d72:	041b      	lsls	r3, r3, #16
 8009d74:	43db      	mvns	r3, r3
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d86:	69da      	ldr	r2, [r3, #28]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	2101      	movs	r1, #1
 8009d92:	fa01 f303 	lsl.w	r3, r1, r3
 8009d96:	041b      	lsls	r3, r3, #16
 8009d98:	43db      	mvns	r3, r3
 8009d9a:	68f9      	ldr	r1, [r7, #12]
 8009d9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009da0:	4013      	ands	r3, r2
 8009da2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	0159      	lsls	r1, r3, #5
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	440b      	add	r3, r1
 8009dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4b05      	ldr	r3, [pc, #20]	@ (8009dd8 <USB_DeactivateEndpoint+0x1b4>)
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	ec337800 	.word	0xec337800
 8009dd8:	eff37800 	.word	0xeff37800

08009ddc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08a      	sub	sp, #40	@ 0x28
 8009de0:	af02      	add	r7, sp, #8
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	4613      	mov	r3, r2
 8009de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	f040 8181 	bne.w	800a100 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d132      	bne.n	8009e6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e12:	691a      	ldr	r2, [r3, #16]
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	0159      	lsls	r1, r3, #5
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	440b      	add	r3, r1
 8009e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e20:	4619      	mov	r1, r3
 8009e22:	4ba5      	ldr	r3, [pc, #660]	@ (800a0b8 <USB_EPStartXfer+0x2dc>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	0151      	lsls	r1, r2, #5
 8009e3a:	69fa      	ldr	r2, [r7, #28]
 8009e3c:	440a      	add	r2, r1
 8009e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e54:	691a      	ldr	r2, [r3, #16]
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	0159      	lsls	r1, r3, #5
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	440b      	add	r3, r1
 8009e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e62:	4619      	mov	r1, r3
 8009e64:	4b95      	ldr	r3, [pc, #596]	@ (800a0bc <USB_EPStartXfer+0x2e0>)
 8009e66:	4013      	ands	r3, r2
 8009e68:	610b      	str	r3, [r1, #16]
 8009e6a:	e092      	b.n	8009f92 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e78:	691a      	ldr	r2, [r3, #16]
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	0159      	lsls	r1, r3, #5
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	440b      	add	r3, r1
 8009e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e86:	4619      	mov	r1, r3
 8009e88:	4b8c      	ldr	r3, [pc, #560]	@ (800a0bc <USB_EPStartXfer+0x2e0>)
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	0159      	lsls	r1, r3, #5
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	440b      	add	r3, r1
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4b83      	ldr	r3, [pc, #524]	@ (800a0b8 <USB_EPStartXfer+0x2dc>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d11a      	bne.n	8009eec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	691a      	ldr	r2, [r3, #16]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d903      	bls.n	8009eca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	689a      	ldr	r2, [r3, #8]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	69ba      	ldr	r2, [r7, #24]
 8009eda:	0151      	lsls	r1, r2, #5
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	440a      	add	r2, r1
 8009ee0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ee4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ee8:	6113      	str	r3, [r2, #16]
 8009eea:	e01b      	b.n	8009f24 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6919      	ldr	r1, [r3, #16]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	440b      	add	r3, r1
 8009f04:	1e59      	subs	r1, r3, #1
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f0e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f10:	4b6b      	ldr	r3, [pc, #428]	@ (800a0c0 <USB_EPStartXfer+0x2e4>)
 8009f12:	400b      	ands	r3, r1
 8009f14:	69b9      	ldr	r1, [r7, #24]
 8009f16:	0148      	lsls	r0, r1, #5
 8009f18:	69f9      	ldr	r1, [r7, #28]
 8009f1a:	4401      	add	r1, r0
 8009f1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f20:	4313      	orrs	r3, r2
 8009f22:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f3a:	69b9      	ldr	r1, [r7, #24]
 8009f3c:	0148      	lsls	r0, r1, #5
 8009f3e:	69f9      	ldr	r1, [r7, #28]
 8009f40:	4401      	add	r1, r0
 8009f42:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f46:	4313      	orrs	r3, r2
 8009f48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	791b      	ldrb	r3, [r3, #4]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d11f      	bne.n	8009f92 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	0151      	lsls	r1, r2, #5
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	440a      	add	r2, r1
 8009f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f6c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009f70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	69fa      	ldr	r2, [r7, #28]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d14b      	bne.n	800a030 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d009      	beq.n	8009fb4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fac:	461a      	mov	r2, r3
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	791b      	ldrb	r3, [r3, #4]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d128      	bne.n	800a00e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d110      	bne.n	8009fee <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fe6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	e00f      	b.n	800a00e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	0151      	lsls	r1, r2, #5
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	440a      	add	r2, r1
 800a004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a00c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a028:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	e16a      	b.n	800a306 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	0151      	lsls	r1, r2, #5
 800a042:	69fa      	ldr	r2, [r7, #28]
 800a044:	440a      	add	r2, r1
 800a046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a04a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a04e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	791b      	ldrb	r3, [r3, #4]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d015      	beq.n	800a084 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 8152 	beq.w	800a306 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	2101      	movs	r1, #1
 800a074:	fa01 f303 	lsl.w	r3, r1, r3
 800a078:	69f9      	ldr	r1, [r7, #28]
 800a07a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a07e:	4313      	orrs	r3, r2
 800a080:	634b      	str	r3, [r1, #52]	@ 0x34
 800a082:	e140      	b.n	800a306 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a090:	2b00      	cmp	r3, #0
 800a092:	d117      	bne.n	800a0c4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69ba      	ldr	r2, [r7, #24]
 800a0a4:	0151      	lsls	r1, r2, #5
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	440a      	add	r2, r1
 800a0aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	e016      	b.n	800a0e4 <USB_EPStartXfer+0x308>
 800a0b6:	bf00      	nop
 800a0b8:	e007ffff 	.word	0xe007ffff
 800a0bc:	fff80000 	.word	0xfff80000
 800a0c0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	0151      	lsls	r1, r2, #5
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	440a      	add	r2, r1
 800a0da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	68d9      	ldr	r1, [r3, #12]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	b298      	uxth	r0, r3
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f9b9 	bl	800a470 <USB_WritePacket>
 800a0fe:	e102      	b.n	800a306 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	0159      	lsls	r1, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	440b      	add	r3, r1
 800a116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11a:	4619      	mov	r1, r3
 800a11c:	4b7c      	ldr	r3, [pc, #496]	@ (800a310 <USB_EPStartXfer+0x534>)
 800a11e:	4013      	ands	r3, r2
 800a120:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12e:	691a      	ldr	r2, [r3, #16]
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	0159      	lsls	r1, r3, #5
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	440b      	add	r3, r1
 800a138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13c:	4619      	mov	r1, r3
 800a13e:	4b75      	ldr	r3, [pc, #468]	@ (800a314 <USB_EPStartXfer+0x538>)
 800a140:	4013      	ands	r3, r2
 800a142:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d12f      	bne.n	800a1aa <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	689a      	ldr	r2, [r3, #8]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16e:	691a      	ldr	r2, [r3, #16]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a178:	69b9      	ldr	r1, [r7, #24]
 800a17a:	0148      	lsls	r0, r1, #5
 800a17c:	69f9      	ldr	r1, [r7, #28]
 800a17e:	4401      	add	r1, r0
 800a180:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a184:	4313      	orrs	r3, r2
 800a186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	0151      	lsls	r1, r2, #5
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	440a      	add	r2, r1
 800a19e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1a6:	6113      	str	r3, [r2, #16]
 800a1a8:	e05f      	b.n	800a26a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d123      	bne.n	800a1fa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1be:	691a      	ldr	r2, [r3, #16]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1c8:	69b9      	ldr	r1, [r7, #24]
 800a1ca:	0148      	lsls	r0, r1, #5
 800a1cc:	69f9      	ldr	r1, [r7, #28]
 800a1ce:	4401      	add	r1, r0
 800a1d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	69ba      	ldr	r2, [r7, #24]
 800a1e8:	0151      	lsls	r1, r2, #5
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	440a      	add	r2, r1
 800a1ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1f6:	6113      	str	r3, [r2, #16]
 800a1f8:	e037      	b.n	800a26a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	691a      	ldr	r2, [r3, #16]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	4413      	add	r3, r2
 800a204:	1e5a      	subs	r2, r3, #1
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	8afa      	ldrh	r2, [r7, #22]
 800a216:	fb03 f202 	mul.w	r2, r3, r2
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	8afb      	ldrh	r3, [r7, #22]
 800a22e:	04d9      	lsls	r1, r3, #19
 800a230:	4b39      	ldr	r3, [pc, #228]	@ (800a318 <USB_EPStartXfer+0x53c>)
 800a232:	400b      	ands	r3, r1
 800a234:	69b9      	ldr	r1, [r7, #24]
 800a236:	0148      	lsls	r0, r1, #5
 800a238:	69f9      	ldr	r1, [r7, #28]
 800a23a:	4401      	add	r1, r0
 800a23c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a240:	4313      	orrs	r3, r2
 800a242:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a250:	691a      	ldr	r2, [r3, #16]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a25a:	69b9      	ldr	r1, [r7, #24]
 800a25c:	0148      	lsls	r0, r1, #5
 800a25e:	69f9      	ldr	r1, [r7, #28]
 800a260:	4401      	add	r1, r0
 800a262:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a266:	4313      	orrs	r3, r2
 800a268:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d10d      	bne.n	800a28c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d009      	beq.n	800a28c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	68d9      	ldr	r1, [r3, #12]
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a288:	460a      	mov	r2, r1
 800a28a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	791b      	ldrb	r3, [r3, #4]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d128      	bne.n	800a2e6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d110      	bne.n	800a2c6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	e00f      	b.n	800a2e6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	69fa      	ldr	r2, [r7, #28]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2e4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	0151      	lsls	r1, r2, #5
 800a2f8:	69fa      	ldr	r2, [r7, #28]
 800a2fa:	440a      	add	r2, r1
 800a2fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a300:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a304:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3720      	adds	r7, #32
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	fff80000 	.word	0xfff80000
 800a314:	e007ffff 	.word	0xe007ffff
 800a318:	1ff80000 	.word	0x1ff80000

0800a31c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	785b      	ldrb	r3, [r3, #1]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d14a      	bne.n	800a3d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a34e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a352:	f040 8086 	bne.w	800a462 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	7812      	ldrb	r2, [r2, #0]
 800a36a:	0151      	lsls	r1, r2, #5
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	440a      	add	r2, r1
 800a370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a374:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a378:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	0151      	lsls	r1, r2, #5
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	440a      	add	r2, r1
 800a394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a39c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d902      	bls.n	800a3b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3b2:	e056      	b.n	800a462 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3cc:	d0e7      	beq.n	800a39e <USB_EPStopXfer+0x82>
 800a3ce:	e048      	b.n	800a462 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3e8:	d13b      	bne.n	800a462 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	7812      	ldrb	r2, [r2, #0]
 800a3fe:	0151      	lsls	r1, r2, #5
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	440a      	add	r2, r1
 800a404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a408:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a40c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	7812      	ldrb	r2, [r2, #0]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	440a      	add	r2, r1
 800a428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a42c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a430:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a43e:	4293      	cmp	r3, r2
 800a440:	d902      	bls.n	800a448 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	75fb      	strb	r3, [r7, #23]
          break;
 800a446:	e00c      	b.n	800a462 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a45c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a460:	d0e7      	beq.n	800a432 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
}
 800a464:	4618      	mov	r0, r3
 800a466:	371c      	adds	r7, #28
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a470:	b480      	push	{r7}
 800a472:	b089      	sub	sp, #36	@ 0x24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	4611      	mov	r1, r2
 800a47c:	461a      	mov	r2, r3
 800a47e:	460b      	mov	r3, r1
 800a480:	71fb      	strb	r3, [r7, #7]
 800a482:	4613      	mov	r3, r2
 800a484:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a48e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a492:	2b00      	cmp	r3, #0
 800a494:	d123      	bne.n	800a4de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a496:	88bb      	ldrh	r3, [r7, #4]
 800a498:	3303      	adds	r3, #3
 800a49a:	089b      	lsrs	r3, r3, #2
 800a49c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61bb      	str	r3, [r7, #24]
 800a4a2:	e018      	b.n	800a4d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	031a      	lsls	r2, r3, #12
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	61bb      	str	r3, [r7, #24]
 800a4d6:	69ba      	ldr	r2, [r7, #24]
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d3e2      	bcc.n	800a4a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3724      	adds	r7, #36	@ 0x24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b08b      	sub	sp, #44	@ 0x2c
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a502:	88fb      	ldrh	r3, [r7, #6]
 800a504:	089b      	lsrs	r3, r3, #2
 800a506:	b29b      	uxth	r3, r3
 800a508:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	f003 0303 	and.w	r3, r3, #3
 800a510:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a512:	2300      	movs	r3, #0
 800a514:	623b      	str	r3, [r7, #32]
 800a516:	e014      	b.n	800a542 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	601a      	str	r2, [r3, #0]
    pDest++;
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	3301      	adds	r3, #1
 800a528:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52c:	3301      	adds	r3, #1
 800a52e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	3301      	adds	r3, #1
 800a534:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a538:	3301      	adds	r3, #1
 800a53a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	3301      	adds	r3, #1
 800a540:	623b      	str	r3, [r7, #32]
 800a542:	6a3a      	ldr	r2, [r7, #32]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	429a      	cmp	r2, r3
 800a548:	d3e6      	bcc.n	800a518 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a54a:	8bfb      	ldrh	r3, [r7, #30]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d01e      	beq.n	800a58e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a55a:	461a      	mov	r2, r3
 800a55c:	f107 0310 	add.w	r3, r7, #16
 800a560:	6812      	ldr	r2, [r2, #0]
 800a562:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	fa22 f303 	lsr.w	r3, r2, r3
 800a570:	b2da      	uxtb	r2, r3
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	701a      	strb	r2, [r3, #0]
      i++;
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	3301      	adds	r3, #1
 800a57a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57e:	3301      	adds	r3, #1
 800a580:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a582:	8bfb      	ldrh	r3, [r7, #30]
 800a584:	3b01      	subs	r3, #1
 800a586:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a588:	8bfb      	ldrh	r3, [r7, #30]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1ea      	bne.n	800a564 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a590:	4618      	mov	r0, r3
 800a592:	372c      	adds	r7, #44	@ 0x2c
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d12c      	bne.n	800a612 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	db12      	blt.n	800a5f0 <USB_EPSetStall+0x54>
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00f      	beq.n	800a5f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	0151      	lsls	r1, r2, #5
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	440a      	add	r2, r1
 800a5e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	0151      	lsls	r1, r2, #5
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	440a      	add	r2, r1
 800a606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a60a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	e02b      	b.n	800a66a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	db12      	blt.n	800a64a <USB_EPSetStall+0xae>
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00f      	beq.n	800a64a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4413      	add	r3, r2
 800a632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	0151      	lsls	r1, r2, #5
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	440a      	add	r2, r1
 800a640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a644:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a648:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	0151      	lsls	r1, r2, #5
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	440a      	add	r2, r1
 800a660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a664:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a668:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d128      	bne.n	800a6e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	0151      	lsls	r1, r2, #5
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	791b      	ldrb	r3, [r3, #4]
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d003      	beq.n	800a6c4 <USB_EPClearStall+0x4c>
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	791b      	ldrb	r3, [r3, #4]
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d138      	bne.n	800a736 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	0151      	lsls	r1, r2, #5
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	440a      	add	r2, r1
 800a6da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	e027      	b.n	800a736 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	0151      	lsls	r1, r2, #5
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	440a      	add	r2, r1
 800a6fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a700:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a704:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	791b      	ldrb	r3, [r3, #4]
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d003      	beq.n	800a716 <USB_EPClearStall+0x9e>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	791b      	ldrb	r3, [r3, #4]
 800a712:	2b02      	cmp	r3, #2
 800a714:	d10f      	bne.n	800a736 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a734:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a762:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a766:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a778:	68f9      	ldr	r1, [r7, #12]
 800a77a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a77e:	4313      	orrs	r3, r2
 800a780:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7aa:	f023 0303 	bic.w	r3, r3, #3
 800a7ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7be:	f023 0302 	bic.w	r3, r3, #2
 800a7c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b085      	sub	sp, #20
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7ec:	f023 0303 	bic.w	r3, r3, #3
 800a7f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a800:	f043 0302 	orr.w	r3, r3, #2
 800a804:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	4013      	ands	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a82c:	68fb      	ldr	r3, [r7, #12]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b085      	sub	sp, #20
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a856:	69db      	ldr	r3, [r3, #28]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	4013      	ands	r3, r2
 800a85c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	0c1b      	lsrs	r3, r3, #16
}
 800a862:	4618      	mov	r0, r3
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a86e:	b480      	push	{r7}
 800a870:	b085      	sub	sp, #20
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	4013      	ands	r3, r2
 800a890:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	b29b      	uxth	r3, r3
}
 800a896:	4618      	mov	r0, r3
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b087      	sub	sp, #28
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a900:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a902:	78fb      	ldrb	r3, [r7, #3]
 800a904:	f003 030f 	and.w	r3, r3, #15
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	fa22 f303 	lsr.w	r3, r2, r3
 800a90e:	01db      	lsls	r3, r3, #7
 800a910:	b2db      	uxtb	r3, r3
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	4313      	orrs	r3, r2
 800a916:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a918:	78fb      	ldrb	r3, [r7, #3]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	4013      	ands	r3, r2
 800a92a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a92c:	68bb      	ldr	r3, [r7, #8]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b083      	sub	sp, #12
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	f003 0301 	and.w	r3, r3, #1
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a972:	4619      	mov	r1, r3
 800a974:	4b09      	ldr	r3, [pc, #36]	@ (800a99c <USB_ActivateSetup+0x44>)
 800a976:	4013      	ands	r3, r2
 800a978:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a98c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	fffff800 	.word	0xfffff800

0800a9a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	333c      	adds	r3, #60	@ 0x3c
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	4a26      	ldr	r2, [pc, #152]	@ (800aa58 <USB_EP0_OutStart+0xb8>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d90a      	bls.n	800a9da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9d4:	d101      	bne.n	800a9da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e037      	b.n	800aa4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa08:	f043 0318 	orr.w	r3, r3, #24
 800aa0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aa20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aa22:	7afb      	ldrb	r3, [r7, #11]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d10f      	bne.n	800aa48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa2e:	461a      	mov	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aa46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	4f54300a 	.word	0x4f54300a

0800aa5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa74:	d901      	bls.n	800aa7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e01b      	b.n	800aab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	daf2      	bge.n	800aa68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	f043 0201 	orr.w	r2, r3, #1
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3301      	adds	r3, #1
 800aa96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa9e:	d901      	bls.n	800aaa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e006      	b.n	800aab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d0f0      	beq.n	800aa92 <USB_CoreReset+0x36>

  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
	...

0800aac0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aacc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aad0:	f005 faee 	bl	80100b0 <USBD_static_malloc>
 800aad4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d109      	bne.n	800aaf0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	32b0      	adds	r2, #176	@ 0xb0
 800aae6:	2100      	movs	r1, #0
 800aae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aaec:	2302      	movs	r3, #2
 800aaee:	e0d4      	b.n	800ac9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aaf0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f007 fd13 	bl	8012522 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	32b0      	adds	r2, #176	@ 0xb0
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	32b0      	adds	r2, #176	@ 0xb0
 800ab16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7c1b      	ldrb	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d138      	bne.n	800ab9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab28:	4b5e      	ldr	r3, [pc, #376]	@ (800aca4 <USBD_CDC_Init+0x1e4>)
 800ab2a:	7819      	ldrb	r1, [r3, #0]
 800ab2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab30:	2202      	movs	r2, #2
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f005 f999 	bl	800fe6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab38:	4b5a      	ldr	r3, [pc, #360]	@ (800aca4 <USBD_CDC_Init+0x1e4>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f003 020f 	and.w	r2, r3, #15
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	4613      	mov	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	440b      	add	r3, r1
 800ab4c:	3324      	adds	r3, #36	@ 0x24
 800ab4e:	2201      	movs	r2, #1
 800ab50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab52:	4b55      	ldr	r3, [pc, #340]	@ (800aca8 <USBD_CDC_Init+0x1e8>)
 800ab54:	7819      	ldrb	r1, [r3, #0]
 800ab56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f005 f984 	bl	800fe6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab62:	4b51      	ldr	r3, [pc, #324]	@ (800aca8 <USBD_CDC_Init+0x1e8>)
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	f003 020f 	and.w	r2, r3, #15
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab7e:	4b4b      	ldr	r3, [pc, #300]	@ (800acac <USBD_CDC_Init+0x1ec>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f003 020f 	and.w	r2, r3, #15
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	440b      	add	r3, r1
 800ab92:	3326      	adds	r3, #38	@ 0x26
 800ab94:	2210      	movs	r2, #16
 800ab96:	801a      	strh	r2, [r3, #0]
 800ab98:	e035      	b.n	800ac06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab9a:	4b42      	ldr	r3, [pc, #264]	@ (800aca4 <USBD_CDC_Init+0x1e4>)
 800ab9c:	7819      	ldrb	r1, [r3, #0]
 800ab9e:	2340      	movs	r3, #64	@ 0x40
 800aba0:	2202      	movs	r2, #2
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f005 f961 	bl	800fe6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aba8:	4b3e      	ldr	r3, [pc, #248]	@ (800aca4 <USBD_CDC_Init+0x1e4>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f003 020f 	and.w	r2, r3, #15
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	440b      	add	r3, r1
 800abbc:	3324      	adds	r3, #36	@ 0x24
 800abbe:	2201      	movs	r2, #1
 800abc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abc2:	4b39      	ldr	r3, [pc, #228]	@ (800aca8 <USBD_CDC_Init+0x1e8>)
 800abc4:	7819      	ldrb	r1, [r3, #0]
 800abc6:	2340      	movs	r3, #64	@ 0x40
 800abc8:	2202      	movs	r2, #2
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f005 f94d 	bl	800fe6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abd0:	4b35      	ldr	r3, [pc, #212]	@ (800aca8 <USBD_CDC_Init+0x1e8>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	f003 020f 	and.w	r2, r3, #15
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	440b      	add	r3, r1
 800abe4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abe8:	2201      	movs	r2, #1
 800abea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800abec:	4b2f      	ldr	r3, [pc, #188]	@ (800acac <USBD_CDC_Init+0x1ec>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 020f 	and.w	r2, r3, #15
 800abf4:	6879      	ldr	r1, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	3326      	adds	r3, #38	@ 0x26
 800ac02:	2210      	movs	r2, #16
 800ac04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac06:	4b29      	ldr	r3, [pc, #164]	@ (800acac <USBD_CDC_Init+0x1ec>)
 800ac08:	7819      	ldrb	r1, [r3, #0]
 800ac0a:	2308      	movs	r3, #8
 800ac0c:	2203      	movs	r2, #3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f005 f92b 	bl	800fe6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac14:	4b25      	ldr	r3, [pc, #148]	@ (800acac <USBD_CDC_Init+0x1ec>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	f003 020f 	and.w	r2, r3, #15
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	440b      	add	r3, r1
 800ac28:	3324      	adds	r3, #36	@ 0x24
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	33b0      	adds	r3, #176	@ 0xb0
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac64:	2302      	movs	r3, #2
 800ac66:	e018      	b.n	800ac9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	7c1b      	ldrb	r3, [r3, #16]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10a      	bne.n	800ac86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac70:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <USBD_CDC_Init+0x1e8>)
 800ac72:	7819      	ldrb	r1, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f005 f9e2 	bl	8010048 <USBD_LL_PrepareReceive>
 800ac84:	e008      	b.n	800ac98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac86:	4b08      	ldr	r3, [pc, #32]	@ (800aca8 <USBD_CDC_Init+0x1e8>)
 800ac88:	7819      	ldrb	r1, [r3, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac90:	2340      	movs	r3, #64	@ 0x40
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f005 f9d8 	bl	8010048 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	24000097 	.word	0x24000097
 800aca8:	24000098 	.word	0x24000098
 800acac:	24000099 	.word	0x24000099

0800acb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800acbc:	4b3a      	ldr	r3, [pc, #232]	@ (800ada8 <USBD_CDC_DeInit+0xf8>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f005 f8f7 	bl	800feb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800acc8:	4b37      	ldr	r3, [pc, #220]	@ (800ada8 <USBD_CDC_DeInit+0xf8>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 020f 	and.w	r2, r3, #15
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4613      	mov	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	3324      	adds	r3, #36	@ 0x24
 800acde:	2200      	movs	r2, #0
 800ace0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ace2:	4b32      	ldr	r3, [pc, #200]	@ (800adac <USBD_CDC_DeInit+0xfc>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f005 f8e4 	bl	800feb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800acee:	4b2f      	ldr	r3, [pc, #188]	@ (800adac <USBD_CDC_DeInit+0xfc>)
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	f003 020f 	and.w	r2, r3, #15
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4613      	mov	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad06:	2200      	movs	r2, #0
 800ad08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad0a:	4b29      	ldr	r3, [pc, #164]	@ (800adb0 <USBD_CDC_DeInit+0x100>)
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f005 f8d0 	bl	800feb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad16:	4b26      	ldr	r3, [pc, #152]	@ (800adb0 <USBD_CDC_DeInit+0x100>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	f003 020f 	and.w	r2, r3, #15
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	3324      	adds	r3, #36	@ 0x24
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ad30:	4b1f      	ldr	r3, [pc, #124]	@ (800adb0 <USBD_CDC_DeInit+0x100>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 020f 	and.w	r2, r3, #15
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	440b      	add	r3, r1
 800ad44:	3326      	adds	r3, #38	@ 0x26
 800ad46:	2200      	movs	r2, #0
 800ad48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	32b0      	adds	r2, #176	@ 0xb0
 800ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01f      	beq.n	800ad9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	33b0      	adds	r3, #176	@ 0xb0
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	32b0      	adds	r2, #176	@ 0xb0
 800ad7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f005 f9a4 	bl	80100cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	32b0      	adds	r2, #176	@ 0xb0
 800ad8e:	2100      	movs	r1, #0
 800ad90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	24000097 	.word	0x24000097
 800adac:	24000098 	.word	0x24000098
 800adb0:	24000099 	.word	0x24000099

0800adb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	32b0      	adds	r2, #176	@ 0xb0
 800adc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e0bf      	b.n	800af64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adec:	2b00      	cmp	r3, #0
 800adee:	d050      	beq.n	800ae92 <USBD_CDC_Setup+0xde>
 800adf0:	2b20      	cmp	r3, #32
 800adf2:	f040 80af 	bne.w	800af54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	88db      	ldrh	r3, [r3, #6]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d03a      	beq.n	800ae74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	b25b      	sxtb	r3, r3
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	da1b      	bge.n	800ae40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	33b0      	adds	r3, #176	@ 0xb0
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ae1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	88d2      	ldrh	r2, [r2, #6]
 800ae24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	88db      	ldrh	r3, [r3, #6]
 800ae2a:	2b07      	cmp	r3, #7
 800ae2c:	bf28      	it	cs
 800ae2e:	2307      	movcs	r3, #7
 800ae30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	89fa      	ldrh	r2, [r7, #14]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 fdbd 	bl	800c9b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ae3e:	e090      	b.n	800af62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	785a      	ldrb	r2, [r3, #1]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	88db      	ldrh	r3, [r3, #6]
 800ae4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800ae50:	d803      	bhi.n	800ae5a <USBD_CDC_Setup+0xa6>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	88db      	ldrh	r3, [r3, #6]
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	e000      	b.n	800ae5c <USBD_CDC_Setup+0xa8>
 800ae5a:	2240      	movs	r2, #64	@ 0x40
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae62:	6939      	ldr	r1, [r7, #16]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 fdcf 	bl	800ca10 <USBD_CtlPrepareRx>
      break;
 800ae72:	e076      	b.n	800af62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	33b0      	adds	r3, #176	@ 0xb0
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	7850      	ldrb	r0, [r2, #1]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	4798      	blx	r3
      break;
 800ae90:	e067      	b.n	800af62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	785b      	ldrb	r3, [r3, #1]
 800ae96:	2b0b      	cmp	r3, #11
 800ae98:	d851      	bhi.n	800af3e <USBD_CDC_Setup+0x18a>
 800ae9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aea0 <USBD_CDC_Setup+0xec>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aed1 	.word	0x0800aed1
 800aea4:	0800af4d 	.word	0x0800af4d
 800aea8:	0800af3f 	.word	0x0800af3f
 800aeac:	0800af3f 	.word	0x0800af3f
 800aeb0:	0800af3f 	.word	0x0800af3f
 800aeb4:	0800af3f 	.word	0x0800af3f
 800aeb8:	0800af3f 	.word	0x0800af3f
 800aebc:	0800af3f 	.word	0x0800af3f
 800aec0:	0800af3f 	.word	0x0800af3f
 800aec4:	0800af3f 	.word	0x0800af3f
 800aec8:	0800aefb 	.word	0x0800aefb
 800aecc:	0800af25 	.word	0x0800af25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d107      	bne.n	800aeec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aedc:	f107 030a 	add.w	r3, r7, #10
 800aee0:	2202      	movs	r2, #2
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f001 fd67 	bl	800c9b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aeea:	e032      	b.n	800af52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f001 fce5 	bl	800c8be <USBD_CtlError>
            ret = USBD_FAIL;
 800aef4:	2303      	movs	r3, #3
 800aef6:	75fb      	strb	r3, [r7, #23]
          break;
 800aef8:	e02b      	b.n	800af52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b03      	cmp	r3, #3
 800af04:	d107      	bne.n	800af16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af06:	f107 030d 	add.w	r3, r7, #13
 800af0a:	2201      	movs	r2, #1
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 fd52 	bl	800c9b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af14:	e01d      	b.n	800af52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 fcd0 	bl	800c8be <USBD_CtlError>
            ret = USBD_FAIL;
 800af1e:	2303      	movs	r3, #3
 800af20:	75fb      	strb	r3, [r7, #23]
          break;
 800af22:	e016      	b.n	800af52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d00f      	beq.n	800af50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f001 fcc3 	bl	800c8be <USBD_CtlError>
            ret = USBD_FAIL;
 800af38:	2303      	movs	r3, #3
 800af3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af3c:	e008      	b.n	800af50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f001 fcbc 	bl	800c8be <USBD_CtlError>
          ret = USBD_FAIL;
 800af46:	2303      	movs	r3, #3
 800af48:	75fb      	strb	r3, [r7, #23]
          break;
 800af4a:	e002      	b.n	800af52 <USBD_CDC_Setup+0x19e>
          break;
 800af4c:	bf00      	nop
 800af4e:	e008      	b.n	800af62 <USBD_CDC_Setup+0x1ae>
          break;
 800af50:	bf00      	nop
      }
      break;
 800af52:	e006      	b.n	800af62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 fcb1 	bl	800c8be <USBD_CtlError>
      ret = USBD_FAIL;
 800af5c:	2303      	movs	r3, #3
 800af5e:	75fb      	strb	r3, [r7, #23]
      break;
 800af60:	bf00      	nop
  }

  return (uint8_t)ret;
 800af62:	7dfb      	ldrb	r3, [r7, #23]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	32b0      	adds	r2, #176	@ 0xb0
 800af8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af92:	2303      	movs	r3, #3
 800af94:	e065      	b.n	800b062 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	32b0      	adds	r2, #176	@ 0xb0
 800afa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800afa6:	78fb      	ldrb	r3, [r7, #3]
 800afa8:	f003 020f 	and.w	r2, r3, #15
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	3318      	adds	r3, #24
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d02f      	beq.n	800b020 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800afc0:	78fb      	ldrb	r3, [r7, #3]
 800afc2:	f003 020f 	and.w	r2, r3, #15
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	440b      	add	r3, r1
 800afd2:	3318      	adds	r3, #24
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	78fb      	ldrb	r3, [r7, #3]
 800afd8:	f003 010f 	and.w	r1, r3, #15
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	460b      	mov	r3, r1
 800afe0:	00db      	lsls	r3, r3, #3
 800afe2:	440b      	add	r3, r1
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4403      	add	r3, r0
 800afe8:	331c      	adds	r3, #28
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	fbb2 f1f3 	udiv	r1, r2, r3
 800aff0:	fb01 f303 	mul.w	r3, r1, r3
 800aff4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d112      	bne.n	800b020 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800affa:	78fb      	ldrb	r3, [r7, #3]
 800affc:	f003 020f 	and.w	r2, r3, #15
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	440b      	add	r3, r1
 800b00c:	3318      	adds	r3, #24
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b012:	78f9      	ldrb	r1, [r7, #3]
 800b014:	2300      	movs	r3, #0
 800b016:	2200      	movs	r2, #0
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f004 fff4 	bl	8010006 <USBD_LL_Transmit>
 800b01e:	e01f      	b.n	800b060 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2200      	movs	r2, #0
 800b024:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	33b0      	adds	r3, #176	@ 0xb0
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	691b      	ldr	r3, [r3, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d010      	beq.n	800b060 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	33b0      	adds	r3, #176	@ 0xb0
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b05c:	78fa      	ldrb	r2, [r7, #3]
 800b05e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	460b      	mov	r3, r1
 800b074:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	32b0      	adds	r2, #176	@ 0xb0
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	32b0      	adds	r2, #176	@ 0xb0
 800b090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b098:	2303      	movs	r3, #3
 800b09a:	e01a      	b.n	800b0d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b09c:	78fb      	ldrb	r3, [r7, #3]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f004 fff2 	bl	801008a <USBD_LL_GetRxDataSize>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	33b0      	adds	r3, #176	@ 0xb0
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4413      	add	r3, r2
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	32b0      	adds	r2, #176	@ 0xb0
 800b0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e024      	b.n	800b146 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	33b0      	adds	r3, #176	@ 0xb0
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4413      	add	r3, r2
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d019      	beq.n	800b144 <USBD_CDC_EP0_RxReady+0x6a>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b116:	2bff      	cmp	r3, #255	@ 0xff
 800b118:	d014      	beq.n	800b144 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	33b0      	adds	r3, #176	@ 0xb0
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b132:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b13a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	22ff      	movs	r2, #255	@ 0xff
 800b140:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
	...

0800b150 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b158:	2182      	movs	r1, #130	@ 0x82
 800b15a:	4818      	ldr	r0, [pc, #96]	@ (800b1bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b15c:	f000 fd4f 	bl	800bbfe <USBD_GetEpDesc>
 800b160:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b162:	2101      	movs	r1, #1
 800b164:	4815      	ldr	r0, [pc, #84]	@ (800b1bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b166:	f000 fd4a 	bl	800bbfe <USBD_GetEpDesc>
 800b16a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b16c:	2181      	movs	r1, #129	@ 0x81
 800b16e:	4813      	ldr	r0, [pc, #76]	@ (800b1bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b170:	f000 fd45 	bl	800bbfe <USBD_GetEpDesc>
 800b174:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2210      	movs	r2, #16
 800b180:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d006      	beq.n	800b196 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b190:	711a      	strb	r2, [r3, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d006      	beq.n	800b1aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1a4:	711a      	strb	r2, [r3, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2243      	movs	r2, #67	@ 0x43
 800b1ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1b0:	4b02      	ldr	r3, [pc, #8]	@ (800b1bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	24000054 	.word	0x24000054

0800b1c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1c8:	2182      	movs	r1, #130	@ 0x82
 800b1ca:	4818      	ldr	r0, [pc, #96]	@ (800b22c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1cc:	f000 fd17 	bl	800bbfe <USBD_GetEpDesc>
 800b1d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	4815      	ldr	r0, [pc, #84]	@ (800b22c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1d6:	f000 fd12 	bl	800bbfe <USBD_GetEpDesc>
 800b1da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1dc:	2181      	movs	r1, #129	@ 0x81
 800b1de:	4813      	ldr	r0, [pc, #76]	@ (800b22c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1e0:	f000 fd0d 	bl	800bbfe <USBD_GetEpDesc>
 800b1e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2210      	movs	r2, #16
 800b1f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d006      	beq.n	800b206 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	711a      	strb	r2, [r3, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f042 0202 	orr.w	r2, r2, #2
 800b204:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d006      	beq.n	800b21a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	711a      	strb	r2, [r3, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f042 0202 	orr.w	r2, r2, #2
 800b218:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2243      	movs	r2, #67	@ 0x43
 800b21e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b220:	4b02      	ldr	r3, [pc, #8]	@ (800b22c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	24000054 	.word	0x24000054

0800b230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b238:	2182      	movs	r1, #130	@ 0x82
 800b23a:	4818      	ldr	r0, [pc, #96]	@ (800b29c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b23c:	f000 fcdf 	bl	800bbfe <USBD_GetEpDesc>
 800b240:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b242:	2101      	movs	r1, #1
 800b244:	4815      	ldr	r0, [pc, #84]	@ (800b29c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b246:	f000 fcda 	bl	800bbfe <USBD_GetEpDesc>
 800b24a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b24c:	2181      	movs	r1, #129	@ 0x81
 800b24e:	4813      	ldr	r0, [pc, #76]	@ (800b29c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b250:	f000 fcd5 	bl	800bbfe <USBD_GetEpDesc>
 800b254:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2210      	movs	r2, #16
 800b260:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d006      	beq.n	800b276 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b270:	711a      	strb	r2, [r3, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d006      	beq.n	800b28a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b284:	711a      	strb	r2, [r3, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2243      	movs	r2, #67	@ 0x43
 800b28e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b290:	4b02      	ldr	r3, [pc, #8]	@ (800b29c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	24000054 	.word	0x24000054

0800b2a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	220a      	movs	r2, #10
 800b2ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2ae:	4b03      	ldr	r3, [pc, #12]	@ (800b2bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	24000010 	.word	0x24000010

0800b2c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e009      	b.n	800b2e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	33b0      	adds	r3, #176	@ 0xb0
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b087      	sub	sp, #28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	32b0      	adds	r2, #176	@ 0xb0
 800b30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b316:	2303      	movs	r3, #3
 800b318:	e008      	b.n	800b32c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	371c      	adds	r7, #28
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	32b0      	adds	r2, #176	@ 0xb0
 800b34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b350:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b358:	2303      	movs	r3, #3
 800b35a:	e004      	b.n	800b366 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	32b0      	adds	r2, #176	@ 0xb0
 800b386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b38a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b396:	2303      	movs	r3, #3
 800b398:	e025      	b.n	800b3e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d11f      	bne.n	800b3e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b3ac:	4b10      	ldr	r3, [pc, #64]	@ (800b3f0 <USBD_CDC_TransmitPacket+0x7c>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	f003 020f 	and.w	r2, r3, #15
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4403      	add	r3, r0
 800b3c6:	3318      	adds	r3, #24
 800b3c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b3ca:	4b09      	ldr	r3, [pc, #36]	@ (800b3f0 <USBD_CDC_TransmitPacket+0x7c>)
 800b3cc:	7819      	ldrb	r1, [r3, #0]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f004 fe13 	bl	8010006 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	24000097 	.word	0x24000097

0800b3f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	32b0      	adds	r2, #176	@ 0xb0
 800b406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	32b0      	adds	r2, #176	@ 0xb0
 800b416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	e018      	b.n	800b454 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	7c1b      	ldrb	r3, [r3, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10a      	bne.n	800b440 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b42a:	4b0c      	ldr	r3, [pc, #48]	@ (800b45c <USBD_CDC_ReceivePacket+0x68>)
 800b42c:	7819      	ldrb	r1, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f004 fe05 	bl	8010048 <USBD_LL_PrepareReceive>
 800b43e:	e008      	b.n	800b452 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b440:	4b06      	ldr	r3, [pc, #24]	@ (800b45c <USBD_CDC_ReceivePacket+0x68>)
 800b442:	7819      	ldrb	r1, [r3, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b44a:	2340      	movs	r3, #64	@ 0x40
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f004 fdfb 	bl	8010048 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	24000098 	.word	0x24000098

0800b460 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	4613      	mov	r3, r2
 800b46c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b474:	2303      	movs	r3, #3
 800b476:	e01f      	b.n	800b4b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	79fa      	ldrb	r2, [r7, #7]
 800b4aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f004 fc71 	bl	800fd94 <USBD_LL_Init>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e025      	b.n	800b524 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	32ae      	adds	r2, #174	@ 0xae
 800b4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00f      	beq.n	800b514 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	32ae      	adds	r2, #174	@ 0xae
 800b4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b504:	f107 020e 	add.w	r2, r7, #14
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	4602      	mov	r2, r0
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f004 fc7d 	bl	800fe34 <USBD_LL_Start>
 800b53a:	4603      	mov	r3, r0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b54c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b54e:	4618      	mov	r0, r3
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b084      	sub	sp, #16
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	460b      	mov	r3, r1
 800b564:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b570:	2b00      	cmp	r3, #0
 800b572:	d009      	beq.n	800b588 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	4611      	mov	r1, r2
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	4798      	blx	r3
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	460b      	mov	r3, r1
 800b59c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	4611      	mov	r1, r2
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	4798      	blx	r3
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 f936 	bl	800c84a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5fa:	f003 031f 	and.w	r3, r3, #31
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d01a      	beq.n	800b638 <USBD_LL_SetupStage+0x72>
 800b602:	2b02      	cmp	r3, #2
 800b604:	d822      	bhi.n	800b64c <USBD_LL_SetupStage+0x86>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <USBD_LL_SetupStage+0x4a>
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d00a      	beq.n	800b624 <USBD_LL_SetupStage+0x5e>
 800b60e:	e01d      	b.n	800b64c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fb63 	bl	800bce4 <USBD_StdDevReq>
 800b61e:	4603      	mov	r3, r0
 800b620:	73fb      	strb	r3, [r7, #15]
      break;
 800b622:	e020      	b.n	800b666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fbcb 	bl	800bdc8 <USBD_StdItfReq>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]
      break;
 800b636:	e016      	b.n	800b666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fc2d 	bl	800bea0 <USBD_StdEPReq>
 800b646:	4603      	mov	r3, r0
 800b648:	73fb      	strb	r3, [r7, #15]
      break;
 800b64a:	e00c      	b.n	800b666 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b652:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b656:	b2db      	uxtb	r3, r3
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f004 fc4a 	bl	800fef4 <USBD_LL_StallEP>
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]
      break;
 800b664:	bf00      	nop
  }

  return ret;
 800b666:	7bfb      	ldrb	r3, [r7, #15]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	460b      	mov	r3, r1
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b682:	7afb      	ldrb	r3, [r7, #11]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d16e      	bne.n	800b766 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b68e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b696:	2b03      	cmp	r3, #3
 800b698:	f040 8098 	bne.w	800b7cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d913      	bls.n	800b6d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	689a      	ldr	r2, [r3, #8]
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	1ad2      	subs	r2, r2, r3
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	68da      	ldr	r2, [r3, #12]
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	bf28      	it	cs
 800b6c2:	4613      	movcs	r3, r2
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f001 f9be 	bl	800ca4a <USBD_CtlContinueRx>
 800b6ce:	e07d      	b.n	800b7cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6d6:	f003 031f 	and.w	r3, r3, #31
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d014      	beq.n	800b708 <USBD_LL_DataOutStage+0x98>
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d81d      	bhi.n	800b71e <USBD_LL_DataOutStage+0xae>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <USBD_LL_DataOutStage+0x7c>
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d003      	beq.n	800b6f2 <USBD_LL_DataOutStage+0x82>
 800b6ea:	e018      	b.n	800b71e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b6f0:	e018      	b.n	800b724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 fa64 	bl	800bbca <USBD_CoreFindIF>
 800b702:	4603      	mov	r3, r0
 800b704:	75bb      	strb	r3, [r7, #22]
            break;
 800b706:	e00d      	b.n	800b724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	4619      	mov	r1, r3
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fa66 	bl	800bbe4 <USBD_CoreFindEP>
 800b718:	4603      	mov	r3, r0
 800b71a:	75bb      	strb	r3, [r7, #22]
            break;
 800b71c:	e002      	b.n	800b724 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	75bb      	strb	r3, [r7, #22]
            break;
 800b722:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b724:	7dbb      	ldrb	r3, [r7, #22]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d119      	bne.n	800b75e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b730:	b2db      	uxtb	r3, r3
 800b732:	2b03      	cmp	r3, #3
 800b734:	d113      	bne.n	800b75e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b736:	7dba      	ldrb	r2, [r7, #22]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	32ae      	adds	r2, #174	@ 0xae
 800b73c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00b      	beq.n	800b75e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b746:	7dba      	ldrb	r2, [r7, #22]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b74e:	7dba      	ldrb	r2, [r7, #22]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	32ae      	adds	r2, #174	@ 0xae
 800b754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f001 f984 	bl	800ca6c <USBD_CtlSendStatus>
 800b764:	e032      	b.n	800b7cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b766:	7afb      	ldrb	r3, [r7, #11]
 800b768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	4619      	mov	r1, r3
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 fa37 	bl	800bbe4 <USBD_CoreFindEP>
 800b776:	4603      	mov	r3, r0
 800b778:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b77a:	7dbb      	ldrb	r3, [r7, #22]
 800b77c:	2bff      	cmp	r3, #255	@ 0xff
 800b77e:	d025      	beq.n	800b7cc <USBD_LL_DataOutStage+0x15c>
 800b780:	7dbb      	ldrb	r3, [r7, #22]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d122      	bne.n	800b7cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d117      	bne.n	800b7c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b792:	7dba      	ldrb	r2, [r7, #22]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	32ae      	adds	r2, #174	@ 0xae
 800b798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00f      	beq.n	800b7c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b7a2:	7dba      	ldrb	r2, [r7, #22]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b7aa:	7dba      	ldrb	r2, [r7, #22]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	32ae      	adds	r2, #174	@ 0xae
 800b7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	7afa      	ldrb	r2, [r7, #11]
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	4798      	blx	r3
 800b7be:	4603      	mov	r3, r0
 800b7c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b7c2:	7dfb      	ldrb	r3, [r7, #23]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	e000      	b.n	800b7ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b086      	sub	sp, #24
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7e4:	7afb      	ldrb	r3, [r7, #11]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d16f      	bne.n	800b8ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3314      	adds	r3, #20
 800b7ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d15a      	bne.n	800b8b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	689a      	ldr	r2, [r3, #8]
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	429a      	cmp	r2, r3
 800b804:	d914      	bls.n	800b830 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	689a      	ldr	r2, [r3, #8]
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	1ad2      	subs	r2, r2, r3
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	461a      	mov	r2, r3
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f001 f8e6 	bl	800c9ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b822:	2300      	movs	r3, #0
 800b824:	2200      	movs	r2, #0
 800b826:	2100      	movs	r1, #0
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f004 fc0d 	bl	8010048 <USBD_LL_PrepareReceive>
 800b82e:	e03f      	b.n	800b8b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d11c      	bne.n	800b876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b844:	429a      	cmp	r2, r3
 800b846:	d316      	bcc.n	800b876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b852:	429a      	cmp	r2, r3
 800b854:	d20f      	bcs.n	800b876 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b856:	2200      	movs	r2, #0
 800b858:	2100      	movs	r1, #0
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f001 f8c7 	bl	800c9ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b868:	2300      	movs	r3, #0
 800b86a:	2200      	movs	r2, #0
 800b86c:	2100      	movs	r1, #0
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f004 fbea 	bl	8010048 <USBD_LL_PrepareReceive>
 800b874:	e01c      	b.n	800b8b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d10f      	bne.n	800b8a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d009      	beq.n	800b8a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8a2:	2180      	movs	r1, #128	@ 0x80
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f004 fb25 	bl	800fef4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f001 f8f1 	bl	800ca92 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d03a      	beq.n	800b930 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff fe42 	bl	800b544 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8c8:	e032      	b.n	800b930 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b8ca:	7afb      	ldrb	r3, [r7, #11]
 800b8cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 f985 	bl	800bbe4 <USBD_CoreFindEP>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	2bff      	cmp	r3, #255	@ 0xff
 800b8e2:	d025      	beq.n	800b930 <USBD_LL_DataInStage+0x15a>
 800b8e4:	7dfb      	ldrb	r3, [r7, #23]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d122      	bne.n	800b930 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d11c      	bne.n	800b930 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b8f6:	7dfa      	ldrb	r2, [r7, #23]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	32ae      	adds	r2, #174	@ 0xae
 800b8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d014      	beq.n	800b930 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b906:	7dfa      	ldrb	r2, [r7, #23]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b90e:	7dfa      	ldrb	r2, [r7, #23]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	32ae      	adds	r2, #174	@ 0xae
 800b914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	7afa      	ldrb	r2, [r7, #11]
 800b91c:	4611      	mov	r1, r2
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	4798      	blx	r3
 800b922:	4603      	mov	r3, r0
 800b924:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b926:	7dbb      	ldrb	r3, [r7, #22]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b92c:	7dbb      	ldrb	r3, [r7, #22]
 800b92e:	e000      	b.n	800b932 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b972:	2b00      	cmp	r3, #0
 800b974:	d014      	beq.n	800b9a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00e      	beq.n	800b9a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	6852      	ldr	r2, [r2, #4]
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	4611      	mov	r1, r2
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	4798      	blx	r3
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b99c:	2303      	movs	r3, #3
 800b99e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9a0:	2340      	movs	r3, #64	@ 0x40
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f004 fa5f 	bl	800fe6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2240      	movs	r2, #64	@ 0x40
 800b9b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9bc:	2340      	movs	r3, #64	@ 0x40
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2180      	movs	r1, #128	@ 0x80
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f004 fa51 	bl	800fe6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2240      	movs	r2, #64	@ 0x40
 800b9d2:	621a      	str	r2, [r3, #32]

  return ret;
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	78fa      	ldrb	r2, [r7, #3]
 800b9ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b04      	cmp	r3, #4
 800ba10:	d006      	beq.n	800ba20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2204      	movs	r2, #4
 800ba24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	d106      	bne.n	800ba58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b082      	sub	sp, #8
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d110      	bne.n	800ba9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00b      	beq.n	800ba9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8a:	69db      	ldr	r3, [r3, #28]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d005      	beq.n	800ba9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba96:	69db      	ldr	r3, [r3, #28]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	460b      	mov	r3, r1
 800bab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	32ae      	adds	r2, #174	@ 0xae
 800babc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e01c      	b.n	800bb02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d115      	bne.n	800bb00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	32ae      	adds	r2, #174	@ 0xae
 800bade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae2:	6a1b      	ldr	r3, [r3, #32]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	32ae      	adds	r2, #174	@ 0xae
 800baf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	78fa      	ldrb	r2, [r7, #3]
 800bafa:	4611      	mov	r1, r2
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	32ae      	adds	r2, #174	@ 0xae
 800bb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	e01c      	b.n	800bb66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d115      	bne.n	800bb64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	32ae      	adds	r2, #174	@ 0xae
 800bb42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00b      	beq.n	800bb64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	32ae      	adds	r2, #174	@ 0xae
 800bb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5c:	78fa      	ldrb	r2, [r7, #3]
 800bb5e:	4611      	mov	r1, r2
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b083      	sub	sp, #12
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00e      	beq.n	800bbc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	6852      	ldr	r2, [r2, #4]
 800bbae:	b2d2      	uxtb	r2, r2
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	4798      	blx	r3
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	885b      	ldrh	r3, [r3, #2]
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	7812      	ldrb	r2, [r2, #0]
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d91f      	bls.n	800bc64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bc2a:	e013      	b.n	800bc54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bc2c:	f107 030a 	add.w	r3, r7, #10
 800bc30:	4619      	mov	r1, r3
 800bc32:	6978      	ldr	r0, [r7, #20]
 800bc34:	f000 f81b 	bl	800bc6e <USBD_GetNextDesc>
 800bc38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	2b05      	cmp	r3, #5
 800bc40:	d108      	bne.n	800bc54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	789b      	ldrb	r3, [r3, #2]
 800bc4a:	78fa      	ldrb	r2, [r7, #3]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d008      	beq.n	800bc62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	885b      	ldrh	r3, [r3, #2]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	897b      	ldrh	r3, [r7, #10]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d8e5      	bhi.n	800bc2c <USBD_GetEpDesc+0x2e>
 800bc60:	e000      	b.n	800bc64 <USBD_GetEpDesc+0x66>
          break;
 800bc62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc64:	693b      	ldr	r3, [r7, #16]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b085      	sub	sp, #20
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	881b      	ldrh	r3, [r3, #0]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	7812      	ldrb	r2, [r2, #0]
 800bc84:	4413      	add	r3, r2
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	461a      	mov	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4413      	add	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc98:	68fb      	ldr	r3, [r7, #12]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b087      	sub	sp, #28
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bcc4:	8a3b      	ldrh	r3, [r7, #16]
 800bcc6:	021b      	lsls	r3, r3, #8
 800bcc8:	b21a      	sxth	r2, r3
 800bcca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	b21b      	sxth	r3, r3
 800bcd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bcd4:	89fb      	ldrh	r3, [r7, #14]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	371c      	adds	r7, #28
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
	...

0800bce4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcfa:	2b40      	cmp	r3, #64	@ 0x40
 800bcfc:	d005      	beq.n	800bd0a <USBD_StdDevReq+0x26>
 800bcfe:	2b40      	cmp	r3, #64	@ 0x40
 800bd00:	d857      	bhi.n	800bdb2 <USBD_StdDevReq+0xce>
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00f      	beq.n	800bd26 <USBD_StdDevReq+0x42>
 800bd06:	2b20      	cmp	r3, #32
 800bd08:	d153      	bne.n	800bdb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	32ae      	adds	r2, #174	@ 0xae
 800bd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	4798      	blx	r3
 800bd20:	4603      	mov	r3, r0
 800bd22:	73fb      	strb	r3, [r7, #15]
      break;
 800bd24:	e04a      	b.n	800bdbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	2b09      	cmp	r3, #9
 800bd2c:	d83b      	bhi.n	800bda6 <USBD_StdDevReq+0xc2>
 800bd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd34 <USBD_StdDevReq+0x50>)
 800bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd34:	0800bd89 	.word	0x0800bd89
 800bd38:	0800bd9d 	.word	0x0800bd9d
 800bd3c:	0800bda7 	.word	0x0800bda7
 800bd40:	0800bd93 	.word	0x0800bd93
 800bd44:	0800bda7 	.word	0x0800bda7
 800bd48:	0800bd67 	.word	0x0800bd67
 800bd4c:	0800bd5d 	.word	0x0800bd5d
 800bd50:	0800bda7 	.word	0x0800bda7
 800bd54:	0800bd7f 	.word	0x0800bd7f
 800bd58:	0800bd71 	.word	0x0800bd71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fa3c 	bl	800c1dc <USBD_GetDescriptor>
          break;
 800bd64:	e024      	b.n	800bdb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fbcb 	bl	800c504 <USBD_SetAddress>
          break;
 800bd6e:	e01f      	b.n	800bdb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd70:	6839      	ldr	r1, [r7, #0]
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fc0a 	bl	800c58c <USBD_SetConfig>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73fb      	strb	r3, [r7, #15]
          break;
 800bd7c:	e018      	b.n	800bdb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fcad 	bl	800c6e0 <USBD_GetConfig>
          break;
 800bd86:	e013      	b.n	800bdb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fcde 	bl	800c74c <USBD_GetStatus>
          break;
 800bd90:	e00e      	b.n	800bdb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fd0d 	bl	800c7b4 <USBD_SetFeature>
          break;
 800bd9a:	e009      	b.n	800bdb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fd31 	bl	800c806 <USBD_ClrFeature>
          break;
 800bda4:	e004      	b.n	800bdb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fd88 	bl	800c8be <USBD_CtlError>
          break;
 800bdae:	bf00      	nop
      }
      break;
 800bdb0:	e004      	b.n	800bdbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fd82 	bl	800c8be <USBD_CtlError>
      break;
 800bdba:	bf00      	nop
  }

  return ret;
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop

0800bdc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdde:	2b40      	cmp	r3, #64	@ 0x40
 800bde0:	d005      	beq.n	800bdee <USBD_StdItfReq+0x26>
 800bde2:	2b40      	cmp	r3, #64	@ 0x40
 800bde4:	d852      	bhi.n	800be8c <USBD_StdItfReq+0xc4>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <USBD_StdItfReq+0x26>
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d14e      	bne.n	800be8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d840      	bhi.n	800be7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	889b      	ldrh	r3, [r3, #4]
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b01      	cmp	r3, #1
 800be04:	d836      	bhi.n	800be74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	889b      	ldrh	r3, [r3, #4]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7ff fedb 	bl	800bbca <USBD_CoreFindIF>
 800be14:	4603      	mov	r3, r0
 800be16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be18:	7bbb      	ldrb	r3, [r7, #14]
 800be1a:	2bff      	cmp	r3, #255	@ 0xff
 800be1c:	d01d      	beq.n	800be5a <USBD_StdItfReq+0x92>
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d11a      	bne.n	800be5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800be24:	7bba      	ldrb	r2, [r7, #14]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	32ae      	adds	r2, #174	@ 0xae
 800be2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00f      	beq.n	800be54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800be34:	7bba      	ldrb	r2, [r7, #14]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be3c:	7bba      	ldrb	r2, [r7, #14]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	32ae      	adds	r2, #174	@ 0xae
 800be42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	4798      	blx	r3
 800be4e:	4603      	mov	r3, r0
 800be50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be52:	e004      	b.n	800be5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be54:	2303      	movs	r3, #3
 800be56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be58:	e001      	b.n	800be5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be5a:	2303      	movs	r3, #3
 800be5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	88db      	ldrh	r3, [r3, #6]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d110      	bne.n	800be88 <USBD_StdItfReq+0xc0>
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10d      	bne.n	800be88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fdfd 	bl	800ca6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be72:	e009      	b.n	800be88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fd21 	bl	800c8be <USBD_CtlError>
          break;
 800be7c:	e004      	b.n	800be88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fd1c 	bl	800c8be <USBD_CtlError>
          break;
 800be86:	e000      	b.n	800be8a <USBD_StdItfReq+0xc2>
          break;
 800be88:	bf00      	nop
      }
      break;
 800be8a:	e004      	b.n	800be96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fd15 	bl	800c8be <USBD_CtlError>
      break;
 800be94:	bf00      	nop
  }

  return ret;
 800be96:	7bfb      	ldrb	r3, [r7, #15]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	889b      	ldrh	r3, [r3, #4]
 800beb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bebc:	2b40      	cmp	r3, #64	@ 0x40
 800bebe:	d007      	beq.n	800bed0 <USBD_StdEPReq+0x30>
 800bec0:	2b40      	cmp	r3, #64	@ 0x40
 800bec2:	f200 817f 	bhi.w	800c1c4 <USBD_StdEPReq+0x324>
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d02a      	beq.n	800bf20 <USBD_StdEPReq+0x80>
 800beca:	2b20      	cmp	r3, #32
 800becc:	f040 817a 	bne.w	800c1c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff fe85 	bl	800bbe4 <USBD_CoreFindEP>
 800beda:	4603      	mov	r3, r0
 800bedc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bede:	7b7b      	ldrb	r3, [r7, #13]
 800bee0:	2bff      	cmp	r3, #255	@ 0xff
 800bee2:	f000 8174 	beq.w	800c1ce <USBD_StdEPReq+0x32e>
 800bee6:	7b7b      	ldrb	r3, [r7, #13]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f040 8170 	bne.w	800c1ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800beee:	7b7a      	ldrb	r2, [r7, #13]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bef6:	7b7a      	ldrb	r2, [r7, #13]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	32ae      	adds	r2, #174	@ 0xae
 800befc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 8163 	beq.w	800c1ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bf08:	7b7a      	ldrb	r2, [r7, #13]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	32ae      	adds	r2, #174	@ 0xae
 800bf0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	4798      	blx	r3
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf1e:	e156      	b.n	800c1ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	785b      	ldrb	r3, [r3, #1]
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d008      	beq.n	800bf3a <USBD_StdEPReq+0x9a>
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	f300 8145 	bgt.w	800c1b8 <USBD_StdEPReq+0x318>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 809b 	beq.w	800c06a <USBD_StdEPReq+0x1ca>
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d03c      	beq.n	800bfb2 <USBD_StdEPReq+0x112>
 800bf38:	e13e      	b.n	800c1b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d002      	beq.n	800bf4c <USBD_StdEPReq+0xac>
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d016      	beq.n	800bf78 <USBD_StdEPReq+0xd8>
 800bf4a:	e02c      	b.n	800bfa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00d      	beq.n	800bf6e <USBD_StdEPReq+0xce>
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	2b80      	cmp	r3, #128	@ 0x80
 800bf56:	d00a      	beq.n	800bf6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f003 ffc9 	bl	800fef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf62:	2180      	movs	r1, #128	@ 0x80
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f003 ffc5 	bl	800fef4 <USBD_LL_StallEP>
 800bf6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf6c:	e020      	b.n	800bfb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fca4 	bl	800c8be <USBD_CtlError>
              break;
 800bf76:	e01b      	b.n	800bfb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	885b      	ldrh	r3, [r3, #2]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10e      	bne.n	800bf9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00b      	beq.n	800bf9e <USBD_StdEPReq+0xfe>
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b80      	cmp	r3, #128	@ 0x80
 800bf8a:	d008      	beq.n	800bf9e <USBD_StdEPReq+0xfe>
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	88db      	ldrh	r3, [r3, #6]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d104      	bne.n	800bf9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f003 ffab 	bl	800fef4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fd64 	bl	800ca6c <USBD_CtlSendStatus>

              break;
 800bfa4:	e004      	b.n	800bfb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fc88 	bl	800c8be <USBD_CtlError>
              break;
 800bfae:	bf00      	nop
          }
          break;
 800bfb0:	e107      	b.n	800c1c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d002      	beq.n	800bfc4 <USBD_StdEPReq+0x124>
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d016      	beq.n	800bff0 <USBD_StdEPReq+0x150>
 800bfc2:	e04b      	b.n	800c05c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00d      	beq.n	800bfe6 <USBD_StdEPReq+0x146>
 800bfca:	7bbb      	ldrb	r3, [r7, #14]
 800bfcc:	2b80      	cmp	r3, #128	@ 0x80
 800bfce:	d00a      	beq.n	800bfe6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f003 ff8d 	bl	800fef4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfda:	2180      	movs	r1, #128	@ 0x80
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f003 ff89 	bl	800fef4 <USBD_LL_StallEP>
 800bfe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfe4:	e040      	b.n	800c068 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fc68 	bl	800c8be <USBD_CtlError>
              break;
 800bfee:	e03b      	b.n	800c068 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	885b      	ldrh	r3, [r3, #2]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d136      	bne.n	800c066 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f003 ff93 	bl	800ff32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fd2d 	bl	800ca6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	4619      	mov	r1, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7ff fde4 	bl	800bbe4 <USBD_CoreFindEP>
 800c01c:	4603      	mov	r3, r0
 800c01e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c020:	7b7b      	ldrb	r3, [r7, #13]
 800c022:	2bff      	cmp	r3, #255	@ 0xff
 800c024:	d01f      	beq.n	800c066 <USBD_StdEPReq+0x1c6>
 800c026:	7b7b      	ldrb	r3, [r7, #13]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d11c      	bne.n	800c066 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c02c:	7b7a      	ldrb	r2, [r7, #13]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c034:	7b7a      	ldrb	r2, [r7, #13]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	32ae      	adds	r2, #174	@ 0xae
 800c03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d010      	beq.n	800c066 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c044:	7b7a      	ldrb	r2, [r7, #13]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	32ae      	adds	r2, #174	@ 0xae
 800c04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	4798      	blx	r3
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c05a:	e004      	b.n	800c066 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fc2d 	bl	800c8be <USBD_CtlError>
              break;
 800c064:	e000      	b.n	800c068 <USBD_StdEPReq+0x1c8>
              break;
 800c066:	bf00      	nop
          }
          break;
 800c068:	e0ab      	b.n	800c1c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b02      	cmp	r3, #2
 800c074:	d002      	beq.n	800c07c <USBD_StdEPReq+0x1dc>
 800c076:	2b03      	cmp	r3, #3
 800c078:	d032      	beq.n	800c0e0 <USBD_StdEPReq+0x240>
 800c07a:	e097      	b.n	800c1ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d007      	beq.n	800c092 <USBD_StdEPReq+0x1f2>
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	2b80      	cmp	r3, #128	@ 0x80
 800c086:	d004      	beq.n	800c092 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fc17 	bl	800c8be <USBD_CtlError>
                break;
 800c090:	e091      	b.n	800c1b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c096:	2b00      	cmp	r3, #0
 800c098:	da0b      	bge.n	800c0b2 <USBD_StdEPReq+0x212>
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	3310      	adds	r3, #16
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	e00b      	b.n	800c0ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fc6d 	bl	800c9b8 <USBD_CtlSendData>
              break;
 800c0de:	e06a      	b.n	800c1b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	da11      	bge.n	800c10c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0e8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ea:	f003 020f 	and.w	r2, r3, #15
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	440b      	add	r3, r1
 800c0fa:	3324      	adds	r3, #36	@ 0x24
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d117      	bne.n	800c132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fbda 	bl	800c8be <USBD_CtlError>
                  break;
 800c10a:	e054      	b.n	800c1b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c10c:	7bbb      	ldrb	r3, [r7, #14]
 800c10e:	f003 020f 	and.w	r2, r3, #15
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	440b      	add	r3, r1
 800c11e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c122:	881b      	ldrh	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d104      	bne.n	800c132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fbc7 	bl	800c8be <USBD_CtlError>
                  break;
 800c130:	e041      	b.n	800c1b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c136:	2b00      	cmp	r3, #0
 800c138:	da0b      	bge.n	800c152 <USBD_StdEPReq+0x2b2>
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	3310      	adds	r3, #16
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	4413      	add	r3, r2
 800c14e:	3304      	adds	r3, #4
 800c150:	e00b      	b.n	800c16a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	4413      	add	r3, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <USBD_StdEPReq+0x2d8>
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b80      	cmp	r3, #128	@ 0x80
 800c176:	d103      	bne.n	800c180 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	e00e      	b.n	800c19e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f003 fef3 	bl	800ff70 <USBD_LL_IsStallEP>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2201      	movs	r2, #1
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	e002      	b.n	800c19e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fc07 	bl	800c9b8 <USBD_CtlSendData>
              break;
 800c1aa:	e004      	b.n	800c1b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fb85 	bl	800c8be <USBD_CtlError>
              break;
 800c1b4:	bf00      	nop
          }
          break;
 800c1b6:	e004      	b.n	800c1c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fb7f 	bl	800c8be <USBD_CtlError>
          break;
 800c1c0:	bf00      	nop
      }
      break;
 800c1c2:	e005      	b.n	800c1d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fb79 	bl	800c8be <USBD_CtlError>
      break;
 800c1cc:	e000      	b.n	800c1d0 <USBD_StdEPReq+0x330>
      break;
 800c1ce:	bf00      	nop
  }

  return ret;
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
	...

0800c1dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	885b      	ldrh	r3, [r3, #2]
 800c1f6:	0a1b      	lsrs	r3, r3, #8
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	2b0e      	cmp	r3, #14
 800c1fe:	f200 8152 	bhi.w	800c4a6 <USBD_GetDescriptor+0x2ca>
 800c202:	a201      	add	r2, pc, #4	@ (adr r2, 800c208 <USBD_GetDescriptor+0x2c>)
 800c204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c208:	0800c279 	.word	0x0800c279
 800c20c:	0800c291 	.word	0x0800c291
 800c210:	0800c2d1 	.word	0x0800c2d1
 800c214:	0800c4a7 	.word	0x0800c4a7
 800c218:	0800c4a7 	.word	0x0800c4a7
 800c21c:	0800c447 	.word	0x0800c447
 800c220:	0800c473 	.word	0x0800c473
 800c224:	0800c4a7 	.word	0x0800c4a7
 800c228:	0800c4a7 	.word	0x0800c4a7
 800c22c:	0800c4a7 	.word	0x0800c4a7
 800c230:	0800c4a7 	.word	0x0800c4a7
 800c234:	0800c4a7 	.word	0x0800c4a7
 800c238:	0800c4a7 	.word	0x0800c4a7
 800c23c:	0800c4a7 	.word	0x0800c4a7
 800c240:	0800c245 	.word	0x0800c245
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c24a:	69db      	ldr	r3, [r3, #28]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00b      	beq.n	800c268 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	7c12      	ldrb	r2, [r2, #16]
 800c25c:	f107 0108 	add.w	r1, r7, #8
 800c260:	4610      	mov	r0, r2
 800c262:	4798      	blx	r3
 800c264:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c266:	e126      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fb27 	bl	800c8be <USBD_CtlError>
        err++;
 800c270:	7afb      	ldrb	r3, [r7, #11]
 800c272:	3301      	adds	r3, #1
 800c274:	72fb      	strb	r3, [r7, #11]
      break;
 800c276:	e11e      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	7c12      	ldrb	r2, [r2, #16]
 800c284:	f107 0108 	add.w	r1, r7, #8
 800c288:	4610      	mov	r0, r2
 800c28a:	4798      	blx	r3
 800c28c:	60f8      	str	r0, [r7, #12]
      break;
 800c28e:	e112      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7c1b      	ldrb	r3, [r3, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10d      	bne.n	800c2b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a0:	f107 0208 	add.w	r2, r7, #8
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	4798      	blx	r3
 800c2a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2b2:	e100      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2bc:	f107 0208 	add.w	r2, r7, #8
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	4798      	blx	r3
 800c2c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	701a      	strb	r2, [r3, #0]
      break;
 800c2ce:	e0f2      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	885b      	ldrh	r3, [r3, #2]
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b05      	cmp	r3, #5
 800c2d8:	f200 80ac 	bhi.w	800c434 <USBD_GetDescriptor+0x258>
 800c2dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e4 <USBD_GetDescriptor+0x108>)
 800c2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e2:	bf00      	nop
 800c2e4:	0800c2fd 	.word	0x0800c2fd
 800c2e8:	0800c331 	.word	0x0800c331
 800c2ec:	0800c365 	.word	0x0800c365
 800c2f0:	0800c399 	.word	0x0800c399
 800c2f4:	0800c3cd 	.word	0x0800c3cd
 800c2f8:	0800c401 	.word	0x0800c401
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31e:	e091      	b.n	800c444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 facb 	bl	800c8be <USBD_CtlError>
            err++;
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	3301      	adds	r3, #1
 800c32c:	72fb      	strb	r3, [r7, #11]
          break;
 800c32e:	e089      	b.n	800c444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c352:	e077      	b.n	800c444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fab1 	bl	800c8be <USBD_CtlError>
            err++;
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	3301      	adds	r3, #1
 800c360:	72fb      	strb	r3, [r7, #11]
          break;
 800c362:	e06f      	b.n	800c444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c386:	e05d      	b.n	800c444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa97 	bl	800c8be <USBD_CtlError>
            err++;
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	3301      	adds	r3, #1
 800c394:	72fb      	strb	r3, [r7, #11]
          break;
 800c396:	e055      	b.n	800c444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00b      	beq.n	800c3bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7c12      	ldrb	r2, [r2, #16]
 800c3b0:	f107 0108 	add.w	r1, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ba:	e043      	b.n	800c444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa7d 	bl	800c8be <USBD_CtlError>
            err++;
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ca:	e03b      	b.n	800c444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7c12      	ldrb	r2, [r2, #16]
 800c3e4:	f107 0108 	add.w	r1, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ee:	e029      	b.n	800c444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa63 	bl	800c8be <USBD_CtlError>
            err++;
 800c3f8:	7afb      	ldrb	r3, [r7, #11]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3fe:	e021      	b.n	800c444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c412:	699b      	ldr	r3, [r3, #24]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	7c12      	ldrb	r2, [r2, #16]
 800c418:	f107 0108 	add.w	r1, r7, #8
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c422:	e00f      	b.n	800c444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fa49 	bl	800c8be <USBD_CtlError>
            err++;
 800c42c:	7afb      	ldrb	r3, [r7, #11]
 800c42e:	3301      	adds	r3, #1
 800c430:	72fb      	strb	r3, [r7, #11]
          break;
 800c432:	e007      	b.n	800c444 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fa41 	bl	800c8be <USBD_CtlError>
          err++;
 800c43c:	7afb      	ldrb	r3, [r7, #11]
 800c43e:	3301      	adds	r3, #1
 800c440:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c442:	bf00      	nop
      }
      break;
 800c444:	e037      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	7c1b      	ldrb	r3, [r3, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d109      	bne.n	800c462 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c456:	f107 0208 	add.w	r2, r7, #8
 800c45a:	4610      	mov	r0, r2
 800c45c:	4798      	blx	r3
 800c45e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c460:	e029      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fa2a 	bl	800c8be <USBD_CtlError>
        err++;
 800c46a:	7afb      	ldrb	r3, [r7, #11]
 800c46c:	3301      	adds	r3, #1
 800c46e:	72fb      	strb	r3, [r7, #11]
      break;
 800c470:	e021      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	7c1b      	ldrb	r3, [r3, #16]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10d      	bne.n	800c496 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c482:	f107 0208 	add.w	r2, r7, #8
 800c486:	4610      	mov	r0, r2
 800c488:	4798      	blx	r3
 800c48a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	3301      	adds	r3, #1
 800c490:	2207      	movs	r2, #7
 800c492:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c494:	e00f      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fa10 	bl	800c8be <USBD_CtlError>
        err++;
 800c49e:	7afb      	ldrb	r3, [r7, #11]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c4a4:	e007      	b.n	800c4b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fa08 	bl	800c8be <USBD_CtlError>
      err++;
 800c4ae:	7afb      	ldrb	r3, [r7, #11]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c4b4:	bf00      	nop
  }

  if (err != 0U)
 800c4b6:	7afb      	ldrb	r3, [r7, #11]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d11e      	bne.n	800c4fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	88db      	ldrh	r3, [r3, #6]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d016      	beq.n	800c4f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c4c4:	893b      	ldrh	r3, [r7, #8]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00e      	beq.n	800c4e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	88da      	ldrh	r2, [r3, #6]
 800c4ce:	893b      	ldrh	r3, [r7, #8]
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	bf28      	it	cs
 800c4d4:	4613      	movcs	r3, r2
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4da:	893b      	ldrh	r3, [r7, #8]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	68f9      	ldr	r1, [r7, #12]
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fa69 	bl	800c9b8 <USBD_CtlSendData>
 800c4e6:	e009      	b.n	800c4fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f9e7 	bl	800c8be <USBD_CtlError>
 800c4f0:	e004      	b.n	800c4fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 faba 	bl	800ca6c <USBD_CtlSendStatus>
 800c4f8:	e000      	b.n	800c4fc <USBD_GetDescriptor+0x320>
    return;
 800c4fa:	bf00      	nop
  }
}
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop

0800c504 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	889b      	ldrh	r3, [r3, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d131      	bne.n	800c57a <USBD_SetAddress+0x76>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	88db      	ldrh	r3, [r3, #6]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d12d      	bne.n	800c57a <USBD_SetAddress+0x76>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	885b      	ldrh	r3, [r3, #2]
 800c522:	2b7f      	cmp	r3, #127	@ 0x7f
 800c524:	d829      	bhi.n	800c57a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	885b      	ldrh	r3, [r3, #2]
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c530:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d104      	bne.n	800c548 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f9bc 	bl	800c8be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c546:	e01d      	b.n	800c584 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	7bfa      	ldrb	r2, [r7, #15]
 800c54c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f003 fd37 	bl	800ffc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fa86 	bl	800ca6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c560:	7bfb      	ldrb	r3, [r7, #15]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d004      	beq.n	800c570 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2202      	movs	r2, #2
 800c56a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c56e:	e009      	b.n	800c584 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c578:	e004      	b.n	800c584 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f99e 	bl	800c8be <USBD_CtlError>
  }
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	885b      	ldrh	r3, [r3, #2]
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	4b4e      	ldr	r3, [pc, #312]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c5a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5a4:	4b4d      	ldr	r3, [pc, #308]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d905      	bls.n	800c5b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f985 	bl	800c8be <USBD_CtlError>
    return USBD_FAIL;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	e08c      	b.n	800c6d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d002      	beq.n	800c5ca <USBD_SetConfig+0x3e>
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d029      	beq.n	800c61c <USBD_SetConfig+0x90>
 800c5c8:	e075      	b.n	800c6b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c5ca:	4b44      	ldr	r3, [pc, #272]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d020      	beq.n	800c614 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c5d2:	4b42      	ldr	r3, [pc, #264]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5dc:	4b3f      	ldr	r3, [pc, #252]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7fe ffb9 	bl	800b55a <USBD_SetClassConfig>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d008      	beq.n	800c604 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f962 	bl	800c8be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c602:	e065      	b.n	800c6d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fa31 	bl	800ca6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2203      	movs	r2, #3
 800c60e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c612:	e05d      	b.n	800c6d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fa29 	bl	800ca6c <USBD_CtlSendStatus>
      break;
 800c61a:	e059      	b.n	800c6d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c61c:	4b2f      	ldr	r3, [pc, #188]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d112      	bne.n	800c64a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2202      	movs	r2, #2
 800c628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c62c:	4b2b      	ldr	r3, [pc, #172]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c636:	4b29      	ldr	r3, [pc, #164]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7fe ffa8 	bl	800b592 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fa12 	bl	800ca6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c648:	e042      	b.n	800c6d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c64a:	4b24      	ldr	r3, [pc, #144]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	461a      	mov	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d02a      	beq.n	800c6ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7fe ff96 	bl	800b592 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c666:	4b1d      	ldr	r3, [pc, #116]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c670:	4b1a      	ldr	r3, [pc, #104]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	4619      	mov	r1, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7fe ff6f 	bl	800b55a <USBD_SetClassConfig>
 800c67c:	4603      	mov	r3, r0
 800c67e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c680:	7bfb      	ldrb	r3, [r7, #15]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00f      	beq.n	800c6a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f918 	bl	800c8be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	b2db      	uxtb	r3, r3
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7fe ff7b 	bl	800b592 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6a4:	e014      	b.n	800c6d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f9e0 	bl	800ca6c <USBD_CtlSendStatus>
      break;
 800c6ac:	e010      	b.n	800c6d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f9dc 	bl	800ca6c <USBD_CtlSendStatus>
      break;
 800c6b4:	e00c      	b.n	800c6d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f900 	bl	800c8be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6be:	4b07      	ldr	r3, [pc, #28]	@ (800c6dc <USBD_SetConfig+0x150>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7fe ff64 	bl	800b592 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c6ce:	bf00      	nop
  }

  return ret;
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	240005a4 	.word	0x240005a4

0800c6e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	88db      	ldrh	r3, [r3, #6]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d004      	beq.n	800c6fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f8e2 	bl	800c8be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6fa:	e023      	b.n	800c744 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c702:	b2db      	uxtb	r3, r3
 800c704:	2b02      	cmp	r3, #2
 800c706:	dc02      	bgt.n	800c70e <USBD_GetConfig+0x2e>
 800c708:	2b00      	cmp	r3, #0
 800c70a:	dc03      	bgt.n	800c714 <USBD_GetConfig+0x34>
 800c70c:	e015      	b.n	800c73a <USBD_GetConfig+0x5a>
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d00b      	beq.n	800c72a <USBD_GetConfig+0x4a>
 800c712:	e012      	b.n	800c73a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	3308      	adds	r3, #8
 800c71e:	2201      	movs	r2, #1
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f948 	bl	800c9b8 <USBD_CtlSendData>
        break;
 800c728:	e00c      	b.n	800c744 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	3304      	adds	r3, #4
 800c72e:	2201      	movs	r2, #1
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f940 	bl	800c9b8 <USBD_CtlSendData>
        break;
 800c738:	e004      	b.n	800c744 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f8be 	bl	800c8be <USBD_CtlError>
        break;
 800c742:	bf00      	nop
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	3b01      	subs	r3, #1
 800c760:	2b02      	cmp	r3, #2
 800c762:	d81e      	bhi.n	800c7a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	88db      	ldrh	r3, [r3, #6]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d004      	beq.n	800c776 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f8a5 	bl	800c8be <USBD_CtlError>
        break;
 800c774:	e01a      	b.n	800c7ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c782:	2b00      	cmp	r3, #0
 800c784:	d005      	beq.n	800c792 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f043 0202 	orr.w	r2, r3, #2
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	330c      	adds	r3, #12
 800c796:	2202      	movs	r2, #2
 800c798:	4619      	mov	r1, r3
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f90c 	bl	800c9b8 <USBD_CtlSendData>
      break;
 800c7a0:	e004      	b.n	800c7ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f88a 	bl	800c8be <USBD_CtlError>
      break;
 800c7aa:	bf00      	nop
  }
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	885b      	ldrh	r3, [r3, #2]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d107      	bne.n	800c7d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f94c 	bl	800ca6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c7d4:	e013      	b.n	800c7fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	885b      	ldrh	r3, [r3, #2]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d10b      	bne.n	800c7f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	889b      	ldrh	r3, [r3, #4]
 800c7e2:	0a1b      	lsrs	r3, r3, #8
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f93c 	bl	800ca6c <USBD_CtlSendStatus>
}
 800c7f4:	e003      	b.n	800c7fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f860 	bl	800c8be <USBD_CtlError>
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b082      	sub	sp, #8
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c816:	b2db      	uxtb	r3, r3
 800c818:	3b01      	subs	r3, #1
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d80b      	bhi.n	800c836 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	885b      	ldrh	r3, [r3, #2]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d10c      	bne.n	800c840 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f91c 	bl	800ca6c <USBD_CtlSendStatus>
      }
      break;
 800c834:	e004      	b.n	800c840 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f840 	bl	800c8be <USBD_CtlError>
      break;
 800c83e:	e000      	b.n	800c842 <USBD_ClrFeature+0x3c>
      break;
 800c840:	bf00      	nop
  }
}
 800c842:	bf00      	nop
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b084      	sub	sp, #16
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	781a      	ldrb	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3301      	adds	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	781a      	ldrb	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3301      	adds	r3, #1
 800c872:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7ff fa16 	bl	800bca6 <SWAPBYTE>
 800c87a:	4603      	mov	r3, r0
 800c87c:	461a      	mov	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3301      	adds	r3, #1
 800c886:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff fa09 	bl	800bca6 <SWAPBYTE>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7ff f9fc 	bl	800bca6 <SWAPBYTE>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	80da      	strh	r2, [r3, #6]
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8c8:	2180      	movs	r1, #128	@ 0x80
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f003 fb12 	bl	800fef4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f003 fb0e 	bl	800fef4 <USBD_LL_StallEP>
}
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d042      	beq.n	800c97c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c8fa:	6938      	ldr	r0, [r7, #16]
 800c8fc:	f000 f842 	bl	800c984 <USBD_GetLen>
 800c900:	4603      	mov	r3, r0
 800c902:	3301      	adds	r3, #1
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c90a:	d808      	bhi.n	800c91e <USBD_GetString+0x3e>
 800c90c:	6938      	ldr	r0, [r7, #16]
 800c90e:	f000 f839 	bl	800c984 <USBD_GetLen>
 800c912:	4603      	mov	r3, r0
 800c914:	3301      	adds	r3, #1
 800c916:	b29b      	uxth	r3, r3
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	e001      	b.n	800c922 <USBD_GetString+0x42>
 800c91e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	4413      	add	r3, r2
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	7812      	ldrb	r2, [r2, #0]
 800c930:	701a      	strb	r2, [r3, #0]
  idx++;
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	3301      	adds	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c938:	7dfb      	ldrb	r3, [r7, #23]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	4413      	add	r3, r2
 800c93e:	2203      	movs	r2, #3
 800c940:	701a      	strb	r2, [r3, #0]
  idx++;
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	3301      	adds	r3, #1
 800c946:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c948:	e013      	b.n	800c972 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	4413      	add	r3, r2
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	7812      	ldrb	r2, [r2, #0]
 800c954:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	3301      	adds	r3, #1
 800c95a:	613b      	str	r3, [r7, #16]
    idx++;
 800c95c:	7dfb      	ldrb	r3, [r7, #23]
 800c95e:	3301      	adds	r3, #1
 800c960:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c962:	7dfb      	ldrb	r3, [r7, #23]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	4413      	add	r3, r2
 800c968:	2200      	movs	r2, #0
 800c96a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c96c:	7dfb      	ldrb	r3, [r7, #23]
 800c96e:	3301      	adds	r3, #1
 800c970:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e7      	bne.n	800c94a <USBD_GetString+0x6a>
 800c97a:	e000      	b.n	800c97e <USBD_GetString+0x9e>
    return;
 800c97c:	bf00      	nop
  }
}
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c994:	e005      	b.n	800c9a2 <USBD_GetLen+0x1e>
  {
    len++;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	3301      	adds	r3, #1
 800c99a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1f5      	bne.n	800c996 <USBD_GetLen+0x12>
  }

  return len;
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2202      	movs	r2, #2
 800c9c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	2100      	movs	r1, #0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f003 fb11 	bl	8010006 <USBD_LL_Transmit>

  return USBD_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	2100      	movs	r1, #0
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f003 fb00 	bl	8010006 <USBD_LL_Transmit>

  return USBD_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2203      	movs	r2, #3
 800ca20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	2100      	movs	r1, #0
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f003 fb04 	bl	8010048 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	60b9      	str	r1, [r7, #8]
 800ca54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f003 faf3 	bl	8010048 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2204      	movs	r2, #4
 800ca78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2100      	movs	r1, #0
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f003 fabf 	bl	8010006 <USBD_LL_Transmit>

  return USBD_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2205      	movs	r2, #5
 800ca9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800caa2:	2300      	movs	r3, #0
 800caa4:	2200      	movs	r2, #0
 800caa6:	2100      	movs	r1, #0
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f003 facd 	bl	8010048 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <__NVIC_SetPriority>:
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	4603      	mov	r3, r0
 800cac0:	6039      	str	r1, [r7, #0]
 800cac2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	db0a      	blt.n	800cae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	490c      	ldr	r1, [pc, #48]	@ (800cb04 <__NVIC_SetPriority+0x4c>)
 800cad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cad6:	0112      	lsls	r2, r2, #4
 800cad8:	b2d2      	uxtb	r2, r2
 800cada:	440b      	add	r3, r1
 800cadc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cae0:	e00a      	b.n	800caf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	4908      	ldr	r1, [pc, #32]	@ (800cb08 <__NVIC_SetPriority+0x50>)
 800cae8:	88fb      	ldrh	r3, [r7, #6]
 800caea:	f003 030f 	and.w	r3, r3, #15
 800caee:	3b04      	subs	r3, #4
 800caf0:	0112      	lsls	r2, r2, #4
 800caf2:	b2d2      	uxtb	r2, r2
 800caf4:	440b      	add	r3, r1
 800caf6:	761a      	strb	r2, [r3, #24]
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	e000e100 	.word	0xe000e100
 800cb08:	e000ed00 	.word	0xe000ed00

0800cb0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cb10:	4b05      	ldr	r3, [pc, #20]	@ (800cb28 <SysTick_Handler+0x1c>)
 800cb12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cb14:	f001 fd50 	bl	800e5b8 <xTaskGetSchedulerState>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d001      	beq.n	800cb22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cb1e:	f002 fb4b 	bl	800f1b8 <xPortSysTickHandler>
  }
}
 800cb22:	bf00      	nop
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	e000e010 	.word	0xe000e010

0800cb2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cb30:	2100      	movs	r1, #0
 800cb32:	f06f 0004 	mvn.w	r0, #4
 800cb36:	f7ff ffbf 	bl	800cab8 <__NVIC_SetPriority>
#endif
}
 800cb3a:	bf00      	nop
 800cb3c:	bd80      	pop	{r7, pc}
	...

0800cb40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb46:	f3ef 8305 	mrs	r3, IPSR
 800cb4a:	603b      	str	r3, [r7, #0]
  return(result);
 800cb4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cb52:	f06f 0305 	mvn.w	r3, #5
 800cb56:	607b      	str	r3, [r7, #4]
 800cb58:	e00c      	b.n	800cb74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800cb84 <osKernelInitialize+0x44>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d105      	bne.n	800cb6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb62:	4b08      	ldr	r3, [pc, #32]	@ (800cb84 <osKernelInitialize+0x44>)
 800cb64:	2201      	movs	r2, #1
 800cb66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	607b      	str	r3, [r7, #4]
 800cb6c:	e002      	b.n	800cb74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb74:	687b      	ldr	r3, [r7, #4]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	240005a8 	.word	0x240005a8

0800cb88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb8e:	f3ef 8305 	mrs	r3, IPSR
 800cb92:	603b      	str	r3, [r7, #0]
  return(result);
 800cb94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d003      	beq.n	800cba2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cb9a:	f06f 0305 	mvn.w	r3, #5
 800cb9e:	607b      	str	r3, [r7, #4]
 800cba0:	e010      	b.n	800cbc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cba2:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd0 <osKernelStart+0x48>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d109      	bne.n	800cbbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cbaa:	f7ff ffbf 	bl	800cb2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cbae:	4b08      	ldr	r3, [pc, #32]	@ (800cbd0 <osKernelStart+0x48>)
 800cbb0:	2202      	movs	r2, #2
 800cbb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cbb4:	f001 f87a 	bl	800dcac <vTaskStartScheduler>
      stat = osOK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	607b      	str	r3, [r7, #4]
 800cbbc:	e002      	b.n	800cbc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbc4:	687b      	ldr	r3, [r7, #4]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	240005a8 	.word	0x240005a8

0800cbd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08e      	sub	sp, #56	@ 0x38
 800cbd8:	af04      	add	r7, sp, #16
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbe4:	f3ef 8305 	mrs	r3, IPSR
 800cbe8:	617b      	str	r3, [r7, #20]
  return(result);
 800cbea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d17e      	bne.n	800ccee <osThreadNew+0x11a>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d07b      	beq.n	800ccee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cbf6:	2380      	movs	r3, #128	@ 0x80
 800cbf8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cbfa:	2318      	movs	r3, #24
 800cbfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cc02:	f04f 33ff 	mov.w	r3, #4294967295
 800cc06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d045      	beq.n	800cc9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <osThreadNew+0x48>
        name = attr->name;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	699b      	ldr	r3, [r3, #24]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	699b      	ldr	r3, [r3, #24]
 800cc28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d008      	beq.n	800cc42 <osThreadNew+0x6e>
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2b38      	cmp	r3, #56	@ 0x38
 800cc34:	d805      	bhi.n	800cc42 <osThreadNew+0x6e>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <osThreadNew+0x72>
        return (NULL);
 800cc42:	2300      	movs	r3, #0
 800cc44:	e054      	b.n	800ccf0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	695b      	ldr	r3, [r3, #20]
 800cc52:	089b      	lsrs	r3, r3, #2
 800cc54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00e      	beq.n	800cc7c <osThreadNew+0xa8>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	2b5b      	cmp	r3, #91	@ 0x5b
 800cc64:	d90a      	bls.n	800cc7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d006      	beq.n	800cc7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d002      	beq.n	800cc7c <osThreadNew+0xa8>
        mem = 1;
 800cc76:	2301      	movs	r3, #1
 800cc78:	61bb      	str	r3, [r7, #24]
 800cc7a:	e010      	b.n	800cc9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10c      	bne.n	800cc9e <osThreadNew+0xca>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d108      	bne.n	800cc9e <osThreadNew+0xca>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d104      	bne.n	800cc9e <osThreadNew+0xca>
          mem = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61bb      	str	r3, [r7, #24]
 800cc98:	e001      	b.n	800cc9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d110      	bne.n	800ccc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccac:	9202      	str	r2, [sp, #8]
 800ccae:	9301      	str	r3, [sp, #4]
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	6a3a      	ldr	r2, [r7, #32]
 800ccb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f000 fe1a 	bl	800d8f4 <xTaskCreateStatic>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	613b      	str	r3, [r7, #16]
 800ccc4:	e013      	b.n	800ccee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d110      	bne.n	800ccee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	f107 0310 	add.w	r3, r7, #16
 800ccd4:	9301      	str	r3, [sp, #4]
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 fe68 	bl	800d9b4 <xTaskCreate>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d001      	beq.n	800ccee <osThreadNew+0x11a>
            hTask = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ccee:	693b      	ldr	r3, [r7, #16]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3728      	adds	r7, #40	@ 0x28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd00:	f3ef 8305 	mrs	r3, IPSR
 800cd04:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <osDelay+0x1c>
    stat = osErrorISR;
 800cd0c:	f06f 0305 	mvn.w	r3, #5
 800cd10:	60fb      	str	r3, [r7, #12]
 800cd12:	e007      	b.n	800cd24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 ff8e 	bl	800dc40 <vTaskDelay>
    }
  }

  return (stat);
 800cd24:	68fb      	ldr	r3, [r7, #12]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	4a07      	ldr	r2, [pc, #28]	@ (800cd5c <vApplicationGetIdleTaskMemory+0x2c>)
 800cd40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	4a06      	ldr	r2, [pc, #24]	@ (800cd60 <vApplicationGetIdleTaskMemory+0x30>)
 800cd46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2280      	movs	r2, #128	@ 0x80
 800cd4c:	601a      	str	r2, [r3, #0]
}
 800cd4e:	bf00      	nop
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	240005ac 	.word	0x240005ac
 800cd60:	24000608 	.word	0x24000608

0800cd64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	4a07      	ldr	r2, [pc, #28]	@ (800cd90 <vApplicationGetTimerTaskMemory+0x2c>)
 800cd74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	4a06      	ldr	r2, [pc, #24]	@ (800cd94 <vApplicationGetTimerTaskMemory+0x30>)
 800cd7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	24000808 	.word	0x24000808
 800cd94:	24000864 	.word	0x24000864

0800cd98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f103 0208 	add.w	r2, r3, #8
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f103 0208 	add.w	r2, r3, #8
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f103 0208 	add.w	r2, r3, #8
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cdcc:	bf00      	nop
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	689a      	ldr	r2, [r3, #8]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	601a      	str	r2, [r3, #0]
}
 800ce2e:	bf00      	nop
 800ce30:	3714      	adds	r7, #20
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b085      	sub	sp, #20
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce50:	d103      	bne.n	800ce5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	e00c      	b.n	800ce74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	e002      	b.n	800ce68 <vListInsert+0x2e>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d2f6      	bcs.n	800ce62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	601a      	str	r2, [r3, #0]
}
 800cea0:	bf00      	nop
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ceac:	b480      	push	{r7}
 800ceae:	b085      	sub	sp, #20
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	6892      	ldr	r2, [r2, #8]
 800cec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	6852      	ldr	r2, [r2, #4]
 800cecc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d103      	bne.n	800cee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	689a      	ldr	r2, [r3, #8]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	1e5a      	subs	r2, r3, #1
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10b      	bne.n	800cf2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cf26:	bf00      	nop
 800cf28:	bf00      	nop
 800cf2a:	e7fd      	b.n	800cf28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cf2c:	f002 f8b4 	bl	800f098 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf38:	68f9      	ldr	r1, [r7, #12]
 800cf3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cf3c:	fb01 f303 	mul.w	r3, r1, r3
 800cf40:	441a      	add	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cf62:	fb01 f303 	mul.w	r3, r1, r3
 800cf66:	441a      	add	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	22ff      	movs	r2, #255	@ 0xff
 800cf70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	22ff      	movs	r2, #255	@ 0xff
 800cf78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d114      	bne.n	800cfac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d01a      	beq.n	800cfc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3310      	adds	r3, #16
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f001 f91a 	bl	800e1c8 <xTaskRemoveFromEventList>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d012      	beq.n	800cfc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd0 <xQueueGenericReset+0xd0>)
 800cf9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	e009      	b.n	800cfc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3310      	adds	r3, #16
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff fef1 	bl	800cd98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3324      	adds	r3, #36	@ 0x24
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff feec 	bl	800cd98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cfc0:	f002 f89c 	bl	800f0fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cfc4:	2301      	movs	r3, #1
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	e000ed04 	.word	0xe000ed04

0800cfd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b08e      	sub	sp, #56	@ 0x38
 800cfd8:	af02      	add	r7, sp, #8
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10b      	bne.n	800d000 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	e7fd      	b.n	800cffc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10b      	bne.n	800d01e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00a:	f383 8811 	msr	BASEPRI, r3
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d018:	bf00      	nop
 800d01a:	bf00      	nop
 800d01c:	e7fd      	b.n	800d01a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <xQueueGenericCreateStatic+0x56>
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <xQueueGenericCreateStatic+0x5a>
 800d02a:	2301      	movs	r3, #1
 800d02c:	e000      	b.n	800d030 <xQueueGenericCreateStatic+0x5c>
 800d02e:	2300      	movs	r3, #0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10b      	bne.n	800d04c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d038:	f383 8811 	msr	BASEPRI, r3
 800d03c:	f3bf 8f6f 	isb	sy
 800d040:	f3bf 8f4f 	dsb	sy
 800d044:	623b      	str	r3, [r7, #32]
}
 800d046:	bf00      	nop
 800d048:	bf00      	nop
 800d04a:	e7fd      	b.n	800d048 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d102      	bne.n	800d058 <xQueueGenericCreateStatic+0x84>
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <xQueueGenericCreateStatic+0x88>
 800d058:	2301      	movs	r3, #1
 800d05a:	e000      	b.n	800d05e <xQueueGenericCreateStatic+0x8a>
 800d05c:	2300      	movs	r3, #0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10b      	bne.n	800d07a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	61fb      	str	r3, [r7, #28]
}
 800d074:	bf00      	nop
 800d076:	bf00      	nop
 800d078:	e7fd      	b.n	800d076 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d07a:	2350      	movs	r3, #80	@ 0x50
 800d07c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2b50      	cmp	r3, #80	@ 0x50
 800d082:	d00b      	beq.n	800d09c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	61bb      	str	r3, [r7, #24]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d09c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00d      	beq.n	800d0c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	68b9      	ldr	r1, [r7, #8]
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 f805 	bl	800d0ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3730      	adds	r7, #48	@ 0x30
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	607a      	str	r2, [r7, #4]
 800d0da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d103      	bne.n	800d0ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	69ba      	ldr	r2, [r7, #24]
 800d0e6:	601a      	str	r2, [r3, #0]
 800d0e8:	e002      	b.n	800d0f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	69b8      	ldr	r0, [r7, #24]
 800d100:	f7ff fefe 	bl	800cf00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	78fa      	ldrb	r2, [r7, #3]
 800d108:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d10c:	bf00      	nop
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08e      	sub	sp, #56	@ 0x38
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d122:	2300      	movs	r3, #0
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10b      	bne.n	800d148 <xQueueGenericSend+0x34>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d142:	bf00      	nop
 800d144:	bf00      	nop
 800d146:	e7fd      	b.n	800d144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d103      	bne.n	800d156 <xQueueGenericSend+0x42>
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <xQueueGenericSend+0x46>
 800d156:	2301      	movs	r3, #1
 800d158:	e000      	b.n	800d15c <xQueueGenericSend+0x48>
 800d15a:	2300      	movs	r3, #0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10b      	bne.n	800d178 <xQueueGenericSend+0x64>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	e7fd      	b.n	800d174 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d103      	bne.n	800d186 <xQueueGenericSend+0x72>
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d182:	2b01      	cmp	r3, #1
 800d184:	d101      	bne.n	800d18a <xQueueGenericSend+0x76>
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <xQueueGenericSend+0x78>
 800d18a:	2300      	movs	r3, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10b      	bne.n	800d1a8 <xQueueGenericSend+0x94>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	623b      	str	r3, [r7, #32]
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	e7fd      	b.n	800d1a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1a8:	f001 fa06 	bl	800e5b8 <xTaskGetSchedulerState>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d102      	bne.n	800d1b8 <xQueueGenericSend+0xa4>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d101      	bne.n	800d1bc <xQueueGenericSend+0xa8>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e000      	b.n	800d1be <xQueueGenericSend+0xaa>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10b      	bne.n	800d1da <xQueueGenericSend+0xc6>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	61fb      	str	r3, [r7, #28]
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop
 800d1d8:	e7fd      	b.n	800d1d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1da:	f001 ff5d 	bl	800f098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d302      	bcc.n	800d1f0 <xQueueGenericSend+0xdc>
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d129      	bne.n	800d244 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1f0:	683a      	ldr	r2, [r7, #0]
 800d1f2:	68b9      	ldr	r1, [r7, #8]
 800d1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1f6:	f000 fa0f 	bl	800d618 <prvCopyDataToQueue>
 800d1fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d200:	2b00      	cmp	r3, #0
 800d202:	d010      	beq.n	800d226 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d206:	3324      	adds	r3, #36	@ 0x24
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 ffdd 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d013      	beq.n	800d23c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d214:	4b3f      	ldr	r3, [pc, #252]	@ (800d314 <xQueueGenericSend+0x200>)
 800d216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	e00a      	b.n	800d23c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d007      	beq.n	800d23c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d22c:	4b39      	ldr	r3, [pc, #228]	@ (800d314 <xQueueGenericSend+0x200>)
 800d22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d23c:	f001 ff5e 	bl	800f0fc <vPortExitCritical>
				return pdPASS;
 800d240:	2301      	movs	r3, #1
 800d242:	e063      	b.n	800d30c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d103      	bne.n	800d252 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d24a:	f001 ff57 	bl	800f0fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	e05c      	b.n	800d30c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d254:	2b00      	cmp	r3, #0
 800d256:	d106      	bne.n	800d266 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d258:	f107 0314 	add.w	r3, r7, #20
 800d25c:	4618      	mov	r0, r3
 800d25e:	f001 f817 	bl	800e290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d262:	2301      	movs	r3, #1
 800d264:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d266:	f001 ff49 	bl	800f0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d26a:	f000 fd87 	bl	800dd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d26e:	f001 ff13 	bl	800f098 <vPortEnterCritical>
 800d272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d278:	b25b      	sxtb	r3, r3
 800d27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27e:	d103      	bne.n	800d288 <xQueueGenericSend+0x174>
 800d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d28e:	b25b      	sxtb	r3, r3
 800d290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d294:	d103      	bne.n	800d29e <xQueueGenericSend+0x18a>
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d29e:	f001 ff2d 	bl	800f0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2a2:	1d3a      	adds	r2, r7, #4
 800d2a4:	f107 0314 	add.w	r3, r7, #20
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f001 f806 	bl	800e2bc <xTaskCheckForTimeOut>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d124      	bne.n	800d300 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2b8:	f000 faa6 	bl	800d808 <prvIsQueueFull>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d018      	beq.n	800d2f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c4:	3310      	adds	r3, #16
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 ff2a 	bl	800e124 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2d2:	f000 fa31 	bl	800d738 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2d6:	f000 fd5f 	bl	800dd98 <xTaskResumeAll>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f47f af7c 	bne.w	800d1da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d314 <xQueueGenericSend+0x200>)
 800d2e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	e772      	b.n	800d1da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2f6:	f000 fa1f 	bl	800d738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2fa:	f000 fd4d 	bl	800dd98 <xTaskResumeAll>
 800d2fe:	e76c      	b.n	800d1da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d302:	f000 fa19 	bl	800d738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d306:	f000 fd47 	bl	800dd98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d30a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3738      	adds	r7, #56	@ 0x38
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	e000ed04 	.word	0xe000ed04

0800d318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b090      	sub	sp, #64	@ 0x40
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
 800d324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10b      	bne.n	800d348 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d342:	bf00      	nop
 800d344:	bf00      	nop
 800d346:	e7fd      	b.n	800d344 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d103      	bne.n	800d356 <xQueueGenericSendFromISR+0x3e>
 800d34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <xQueueGenericSendFromISR+0x42>
 800d356:	2301      	movs	r3, #1
 800d358:	e000      	b.n	800d35c <xQueueGenericSendFromISR+0x44>
 800d35a:	2300      	movs	r3, #0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10b      	bne.n	800d378 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d372:	bf00      	nop
 800d374:	bf00      	nop
 800d376:	e7fd      	b.n	800d374 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b02      	cmp	r3, #2
 800d37c:	d103      	bne.n	800d386 <xQueueGenericSendFromISR+0x6e>
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d382:	2b01      	cmp	r3, #1
 800d384:	d101      	bne.n	800d38a <xQueueGenericSendFromISR+0x72>
 800d386:	2301      	movs	r3, #1
 800d388:	e000      	b.n	800d38c <xQueueGenericSendFromISR+0x74>
 800d38a:	2300      	movs	r3, #0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10b      	bne.n	800d3a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	623b      	str	r3, [r7, #32]
}
 800d3a2:	bf00      	nop
 800d3a4:	bf00      	nop
 800d3a6:	e7fd      	b.n	800d3a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3a8:	f001 ff56 	bl	800f258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3ac:	f3ef 8211 	mrs	r2, BASEPRI
 800d3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	61fa      	str	r2, [r7, #28]
 800d3c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d302      	bcc.n	800d3da <xQueueGenericSendFromISR+0xc2>
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d12f      	bne.n	800d43a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	68b9      	ldr	r1, [r7, #8]
 800d3ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3f0:	f000 f912 	bl	800d618 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fc:	d112      	bne.n	800d424 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d402:	2b00      	cmp	r3, #0
 800d404:	d016      	beq.n	800d434 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d408:	3324      	adds	r3, #36	@ 0x24
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 fedc 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00e      	beq.n	800d434 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00b      	beq.n	800d434 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2201      	movs	r2, #1
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	e007      	b.n	800d434 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d424:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d428:	3301      	adds	r3, #1
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	b25a      	sxtb	r2, r3
 800d42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d434:	2301      	movs	r3, #1
 800d436:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d438:	e001      	b.n	800d43e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d43a:	2300      	movs	r3, #0
 800d43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d440:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3740      	adds	r7, #64	@ 0x40
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08c      	sub	sp, #48	@ 0x30
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d460:	2300      	movs	r3, #0
 800d462:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10b      	bne.n	800d486 <xQueueReceive+0x32>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	623b      	str	r3, [r7, #32]
}
 800d480:	bf00      	nop
 800d482:	bf00      	nop
 800d484:	e7fd      	b.n	800d482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d103      	bne.n	800d494 <xQueueReceive+0x40>
 800d48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <xQueueReceive+0x44>
 800d494:	2301      	movs	r3, #1
 800d496:	e000      	b.n	800d49a <xQueueReceive+0x46>
 800d498:	2300      	movs	r3, #0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10b      	bne.n	800d4b6 <xQueueReceive+0x62>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	61fb      	str	r3, [r7, #28]
}
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	e7fd      	b.n	800d4b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4b6:	f001 f87f 	bl	800e5b8 <xTaskGetSchedulerState>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d102      	bne.n	800d4c6 <xQueueReceive+0x72>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <xQueueReceive+0x76>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e000      	b.n	800d4cc <xQueueReceive+0x78>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10b      	bne.n	800d4e8 <xQueueReceive+0x94>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	61bb      	str	r3, [r7, #24]
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	e7fd      	b.n	800d4e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4e8:	f001 fdd6 	bl	800f098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d01f      	beq.n	800d538 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4f8:	68b9      	ldr	r1, [r7, #8]
 800d4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4fc:	f000 f8f6 	bl	800d6ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d502:	1e5a      	subs	r2, r3, #1
 800d504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d506:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00f      	beq.n	800d530 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d512:	3310      	adds	r3, #16
 800d514:	4618      	mov	r0, r3
 800d516:	f000 fe57 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d007      	beq.n	800d530 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d520:	4b3c      	ldr	r3, [pc, #240]	@ (800d614 <xQueueReceive+0x1c0>)
 800d522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d526:	601a      	str	r2, [r3, #0]
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d530:	f001 fde4 	bl	800f0fc <vPortExitCritical>
				return pdPASS;
 800d534:	2301      	movs	r3, #1
 800d536:	e069      	b.n	800d60c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d103      	bne.n	800d546 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d53e:	f001 fddd 	bl	800f0fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d542:	2300      	movs	r3, #0
 800d544:	e062      	b.n	800d60c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d106      	bne.n	800d55a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d54c:	f107 0310 	add.w	r3, r7, #16
 800d550:	4618      	mov	r0, r3
 800d552:	f000 fe9d 	bl	800e290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d556:	2301      	movs	r3, #1
 800d558:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d55a:	f001 fdcf 	bl	800f0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d55e:	f000 fc0d 	bl	800dd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d562:	f001 fd99 	bl	800f098 <vPortEnterCritical>
 800d566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d56c:	b25b      	sxtb	r3, r3
 800d56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d572:	d103      	bne.n	800d57c <xQueueReceive+0x128>
 800d574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d576:	2200      	movs	r2, #0
 800d578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d582:	b25b      	sxtb	r3, r3
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d588:	d103      	bne.n	800d592 <xQueueReceive+0x13e>
 800d58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d592:	f001 fdb3 	bl	800f0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d596:	1d3a      	adds	r2, r7, #4
 800d598:	f107 0310 	add.w	r3, r7, #16
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f000 fe8c 	bl	800e2bc <xTaskCheckForTimeOut>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d123      	bne.n	800d5f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5ac:	f000 f916 	bl	800d7dc <prvIsQueueEmpty>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d017      	beq.n	800d5e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b8:	3324      	adds	r3, #36	@ 0x24
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 fdb0 	bl	800e124 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5c6:	f000 f8b7 	bl	800d738 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5ca:	f000 fbe5 	bl	800dd98 <xTaskResumeAll>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d189      	bne.n	800d4e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800d614 <xQueueReceive+0x1c0>)
 800d5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5da:	601a      	str	r2, [r3, #0]
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	e780      	b.n	800d4e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5e8:	f000 f8a6 	bl	800d738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5ec:	f000 fbd4 	bl	800dd98 <xTaskResumeAll>
 800d5f0:	e77a      	b.n	800d4e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5f4:	f000 f8a0 	bl	800d738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5f8:	f000 fbce 	bl	800dd98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5fe:	f000 f8ed 	bl	800d7dc <prvIsQueueEmpty>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	f43f af6f 	beq.w	800d4e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d60a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3730      	adds	r7, #48	@ 0x30
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	e000ed04 	.word	0xe000ed04

0800d618 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d624:	2300      	movs	r3, #0
 800d626:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d62c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10d      	bne.n	800d652 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d14d      	bne.n	800d6da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	4618      	mov	r0, r3
 800d644:	f000 ffd6 	bl	800e5f4 <xTaskPriorityDisinherit>
 800d648:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	609a      	str	r2, [r3, #8]
 800d650:	e043      	b.n	800d6da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d119      	bne.n	800d68c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6858      	ldr	r0, [r3, #4]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d660:	461a      	mov	r2, r3
 800d662:	68b9      	ldr	r1, [r7, #8]
 800d664:	f004 ffed 	bl	8012642 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d670:	441a      	add	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d32b      	bcc.n	800d6da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	605a      	str	r2, [r3, #4]
 800d68a:	e026      	b.n	800d6da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	68d8      	ldr	r0, [r3, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d694:	461a      	mov	r2, r3
 800d696:	68b9      	ldr	r1, [r7, #8]
 800d698:	f004 ffd3 	bl	8012642 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	68da      	ldr	r2, [r3, #12]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6a4:	425b      	negs	r3, r3
 800d6a6:	441a      	add	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	68da      	ldr	r2, [r3, #12]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d207      	bcs.n	800d6c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	689a      	ldr	r2, [r3, #8]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6c0:	425b      	negs	r3, r3
 800d6c2:	441a      	add	r2, r3
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d105      	bne.n	800d6da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	1c5a      	adds	r2, r3, #1
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d6e2:	697b      	ldr	r3, [r7, #20]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d018      	beq.n	800d730 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	68da      	ldr	r2, [r3, #12]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d706:	441a      	add	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68da      	ldr	r2, [r3, #12]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	429a      	cmp	r2, r3
 800d716:	d303      	bcc.n	800d720 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68d9      	ldr	r1, [r3, #12]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d728:	461a      	mov	r2, r3
 800d72a:	6838      	ldr	r0, [r7, #0]
 800d72c:	f004 ff89 	bl	8012642 <memcpy>
	}
}
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d740:	f001 fcaa 	bl	800f098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d74a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d74c:	e011      	b.n	800d772 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d752:	2b00      	cmp	r3, #0
 800d754:	d012      	beq.n	800d77c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3324      	adds	r3, #36	@ 0x24
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fd34 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d001      	beq.n	800d76a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d766:	f000 fe0d 	bl	800e384 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
 800d76c:	3b01      	subs	r3, #1
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d776:	2b00      	cmp	r3, #0
 800d778:	dce9      	bgt.n	800d74e <prvUnlockQueue+0x16>
 800d77a:	e000      	b.n	800d77e <prvUnlockQueue+0x46>
					break;
 800d77c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	22ff      	movs	r2, #255	@ 0xff
 800d782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d786:	f001 fcb9 	bl	800f0fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d78a:	f001 fc85 	bl	800f098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d794:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d796:	e011      	b.n	800d7bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d012      	beq.n	800d7c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3310      	adds	r3, #16
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 fd0f 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7b0:	f000 fde8 	bl	800e384 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7b4:	7bbb      	ldrb	r3, [r7, #14]
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	dce9      	bgt.n	800d798 <prvUnlockQueue+0x60>
 800d7c4:	e000      	b.n	800d7c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d7c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	22ff      	movs	r2, #255	@ 0xff
 800d7cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d7d0:	f001 fc94 	bl	800f0fc <vPortExitCritical>
}
 800d7d4:	bf00      	nop
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7e4:	f001 fc58 	bl	800f098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d102      	bne.n	800d7f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	e001      	b.n	800d7fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7fa:	f001 fc7f 	bl	800f0fc <vPortExitCritical>

	return xReturn;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d810:	f001 fc42 	bl	800f098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d102      	bne.n	800d826 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d820:	2301      	movs	r3, #1
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	e001      	b.n	800d82a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d826:	2300      	movs	r3, #0
 800d828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d82a:	f001 fc67 	bl	800f0fc <vPortExitCritical>

	return xReturn;
 800d82e:	68fb      	ldr	r3, [r7, #12]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d842:	2300      	movs	r3, #0
 800d844:	60fb      	str	r3, [r7, #12]
 800d846:	e014      	b.n	800d872 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d848:	4a0f      	ldr	r2, [pc, #60]	@ (800d888 <vQueueAddToRegistry+0x50>)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10b      	bne.n	800d86c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d854:	490c      	ldr	r1, [pc, #48]	@ (800d888 <vQueueAddToRegistry+0x50>)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d85e:	4a0a      	ldr	r2, [pc, #40]	@ (800d888 <vQueueAddToRegistry+0x50>)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	00db      	lsls	r3, r3, #3
 800d864:	4413      	add	r3, r2
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d86a:	e006      	b.n	800d87a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	3301      	adds	r3, #1
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2b07      	cmp	r3, #7
 800d876:	d9e7      	bls.n	800d848 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d878:	bf00      	nop
 800d87a:	bf00      	nop
 800d87c:	3714      	adds	r7, #20
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	24000c64 	.word	0x24000c64

0800d88c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d89c:	f001 fbfc 	bl	800f098 <vPortEnterCritical>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8a6:	b25b      	sxtb	r3, r3
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d103      	bne.n	800d8b6 <vQueueWaitForMessageRestricted+0x2a>
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8bc:	b25b      	sxtb	r3, r3
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c2:	d103      	bne.n	800d8cc <vQueueWaitForMessageRestricted+0x40>
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8cc:	f001 fc16 	bl	800f0fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d106      	bne.n	800d8e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	3324      	adds	r3, #36	@ 0x24
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	68b9      	ldr	r1, [r7, #8]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f000 fc45 	bl	800e170 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d8e6:	6978      	ldr	r0, [r7, #20]
 800d8e8:	f7ff ff26 	bl	800d738 <prvUnlockQueue>
	}
 800d8ec:	bf00      	nop
 800d8ee:	3718      	adds	r7, #24
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08e      	sub	sp, #56	@ 0x38
 800d8f8:	af04      	add	r7, sp, #16
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10b      	bne.n	800d920 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	623b      	str	r3, [r7, #32]
}
 800d91a:	bf00      	nop
 800d91c:	bf00      	nop
 800d91e:	e7fd      	b.n	800d91c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10b      	bne.n	800d93e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	61fb      	str	r3, [r7, #28]
}
 800d938:	bf00      	nop
 800d93a:	bf00      	nop
 800d93c:	e7fd      	b.n	800d93a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d93e:	235c      	movs	r3, #92	@ 0x5c
 800d940:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	2b5c      	cmp	r3, #92	@ 0x5c
 800d946:	d00b      	beq.n	800d960 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94c:	f383 8811 	msr	BASEPRI, r3
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	61bb      	str	r3, [r7, #24]
}
 800d95a:	bf00      	nop
 800d95c:	bf00      	nop
 800d95e:	e7fd      	b.n	800d95c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d960:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d964:	2b00      	cmp	r3, #0
 800d966:	d01e      	beq.n	800d9a6 <xTaskCreateStatic+0xb2>
 800d968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d01b      	beq.n	800d9a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d970:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d976:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97a:	2202      	movs	r2, #2
 800d97c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d980:	2300      	movs	r3, #0
 800d982:	9303      	str	r3, [sp, #12]
 800d984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d986:	9302      	str	r3, [sp, #8]
 800d988:	f107 0314 	add.w	r3, r7, #20
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	68b9      	ldr	r1, [r7, #8]
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f000 f850 	bl	800da3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d99e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d9a0:	f000 f8de 	bl	800db60 <prvAddNewTaskToReadyList>
 800d9a4:	e001      	b.n	800d9aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9aa:	697b      	ldr	r3, [r7, #20]
	}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3728      	adds	r7, #40	@ 0x28
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08c      	sub	sp, #48	@ 0x30
 800d9b8:	af04      	add	r7, sp, #16
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9c4:	88fb      	ldrh	r3, [r7, #6]
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f001 fc87 	bl	800f2dc <pvPortMalloc>
 800d9ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00e      	beq.n	800d9f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9d6:	205c      	movs	r0, #92	@ 0x5c
 800d9d8:	f001 fc80 	bl	800f2dc <pvPortMalloc>
 800d9dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d003      	beq.n	800d9ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d9ea:	e005      	b.n	800d9f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9ec:	6978      	ldr	r0, [r7, #20]
 800d9ee:	f001 fd43 	bl	800f478 <vPortFree>
 800d9f2:	e001      	b.n	800d9f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d017      	beq.n	800da2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da06:	88fa      	ldrh	r2, [r7, #6]
 800da08:	2300      	movs	r3, #0
 800da0a:	9303      	str	r3, [sp, #12]
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	9302      	str	r3, [sp, #8]
 800da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 f80e 	bl	800da3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da22:	69f8      	ldr	r0, [r7, #28]
 800da24:	f000 f89c 	bl	800db60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da28:	2301      	movs	r3, #1
 800da2a:	61bb      	str	r3, [r7, #24]
 800da2c:	e002      	b.n	800da34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da2e:	f04f 33ff 	mov.w	r3, #4294967295
 800da32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da34:	69bb      	ldr	r3, [r7, #24]
	}
 800da36:	4618      	mov	r0, r3
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b088      	sub	sp, #32
 800da42:	af00      	add	r7, sp, #0
 800da44:	60f8      	str	r0, [r7, #12]
 800da46:	60b9      	str	r1, [r7, #8]
 800da48:	607a      	str	r2, [r7, #4]
 800da4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	461a      	mov	r2, r3
 800da56:	21a5      	movs	r1, #165	@ 0xa5
 800da58:	f004 fd63 	bl	8012522 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800da66:	440b      	add	r3, r1
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	f023 0307 	bic.w	r3, r3, #7
 800da74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	f003 0307 	and.w	r3, r3, #7
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00b      	beq.n	800da98 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	617b      	str	r3, [r7, #20]
}
 800da92:	bf00      	nop
 800da94:	bf00      	nop
 800da96:	e7fd      	b.n	800da94 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d01f      	beq.n	800dade <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	e012      	b.n	800daca <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	4413      	add	r3, r2
 800daaa:	7819      	ldrb	r1, [r3, #0]
 800daac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	4413      	add	r3, r2
 800dab2:	3334      	adds	r3, #52	@ 0x34
 800dab4:	460a      	mov	r2, r1
 800dab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dab8:	68ba      	ldr	r2, [r7, #8]
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	4413      	add	r3, r2
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d006      	beq.n	800dad2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	3301      	adds	r3, #1
 800dac8:	61fb      	str	r3, [r7, #28]
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	2b0f      	cmp	r3, #15
 800dace:	d9e9      	bls.n	800daa4 <prvInitialiseNewTask+0x66>
 800dad0:	e000      	b.n	800dad4 <prvInitialiseNewTask+0x96>
			{
				break;
 800dad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dadc:	e003      	b.n	800dae6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae8:	2b37      	cmp	r3, #55	@ 0x37
 800daea:	d901      	bls.n	800daf0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800daec:	2337      	movs	r3, #55	@ 0x37
 800daee:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800daf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800daf4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800daf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dafa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafe:	2200      	movs	r2, #0
 800db00:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	3304      	adds	r3, #4
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff f966 	bl	800cdd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0e:	3318      	adds	r3, #24
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff f961 	bl	800cdd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db2a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2e:	2200      	movs	r2, #0
 800db30:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	2200      	movs	r2, #0
 800db36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	68f9      	ldr	r1, [r7, #12]
 800db3e:	69b8      	ldr	r0, [r7, #24]
 800db40:	f001 f976 	bl	800ee30 <pxPortInitialiseStack>
 800db44:	4602      	mov	r2, r0
 800db46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db56:	bf00      	nop
 800db58:	3720      	adds	r7, #32
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
	...

0800db60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db68:	f001 fa96 	bl	800f098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db6c:	4b2d      	ldr	r3, [pc, #180]	@ (800dc24 <prvAddNewTaskToReadyList+0xc4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	3301      	adds	r3, #1
 800db72:	4a2c      	ldr	r2, [pc, #176]	@ (800dc24 <prvAddNewTaskToReadyList+0xc4>)
 800db74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db76:	4b2c      	ldr	r3, [pc, #176]	@ (800dc28 <prvAddNewTaskToReadyList+0xc8>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d109      	bne.n	800db92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db7e:	4a2a      	ldr	r2, [pc, #168]	@ (800dc28 <prvAddNewTaskToReadyList+0xc8>)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db84:	4b27      	ldr	r3, [pc, #156]	@ (800dc24 <prvAddNewTaskToReadyList+0xc4>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d110      	bne.n	800dbae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db8c:	f000 fc1e 	bl	800e3cc <prvInitialiseTaskLists>
 800db90:	e00d      	b.n	800dbae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db92:	4b26      	ldr	r3, [pc, #152]	@ (800dc2c <prvAddNewTaskToReadyList+0xcc>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d109      	bne.n	800dbae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db9a:	4b23      	ldr	r3, [pc, #140]	@ (800dc28 <prvAddNewTaskToReadyList+0xc8>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d802      	bhi.n	800dbae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dba8:	4a1f      	ldr	r2, [pc, #124]	@ (800dc28 <prvAddNewTaskToReadyList+0xc8>)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dbae:	4b20      	ldr	r3, [pc, #128]	@ (800dc30 <prvAddNewTaskToReadyList+0xd0>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	4a1e      	ldr	r2, [pc, #120]	@ (800dc30 <prvAddNewTaskToReadyList+0xd0>)
 800dbb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dbb8:	4b1d      	ldr	r3, [pc, #116]	@ (800dc30 <prvAddNewTaskToReadyList+0xd0>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc4:	4b1b      	ldr	r3, [pc, #108]	@ (800dc34 <prvAddNewTaskToReadyList+0xd4>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d903      	bls.n	800dbd4 <prvAddNewTaskToReadyList+0x74>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd0:	4a18      	ldr	r2, [pc, #96]	@ (800dc34 <prvAddNewTaskToReadyList+0xd4>)
 800dbd2:	6013      	str	r3, [r2, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbd8:	4613      	mov	r3, r2
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	4413      	add	r3, r2
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	4a15      	ldr	r2, [pc, #84]	@ (800dc38 <prvAddNewTaskToReadyList+0xd8>)
 800dbe2:	441a      	add	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4610      	mov	r0, r2
 800dbec:	f7ff f901 	bl	800cdf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dbf0:	f001 fa84 	bl	800f0fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dbf4:	4b0d      	ldr	r3, [pc, #52]	@ (800dc2c <prvAddNewTaskToReadyList+0xcc>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00e      	beq.n	800dc1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	@ (800dc28 <prvAddNewTaskToReadyList+0xc8>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d207      	bcs.n	800dc1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc0a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc3c <prvAddNewTaskToReadyList+0xdc>)
 800dc0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc1a:	bf00      	nop
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	24001178 	.word	0x24001178
 800dc28:	24000ca4 	.word	0x24000ca4
 800dc2c:	24001184 	.word	0x24001184
 800dc30:	24001194 	.word	0x24001194
 800dc34:	24001180 	.word	0x24001180
 800dc38:	24000ca8 	.word	0x24000ca8
 800dc3c:	e000ed04 	.word	0xe000ed04

0800dc40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d018      	beq.n	800dc84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc52:	4b14      	ldr	r3, [pc, #80]	@ (800dca4 <vTaskDelay+0x64>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00b      	beq.n	800dc72 <vTaskDelay+0x32>
	__asm volatile
 800dc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	60bb      	str	r3, [r7, #8]
}
 800dc6c:	bf00      	nop
 800dc6e:	bf00      	nop
 800dc70:	e7fd      	b.n	800dc6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc72:	f000 f883 	bl	800dd7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc76:	2100      	movs	r1, #0
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fd2b 	bl	800e6d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc7e:	f000 f88b 	bl	800dd98 <xTaskResumeAll>
 800dc82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d107      	bne.n	800dc9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dc8a:	4b07      	ldr	r3, [pc, #28]	@ (800dca8 <vTaskDelay+0x68>)
 800dc8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc90:	601a      	str	r2, [r3, #0]
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc9a:	bf00      	nop
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	240011a0 	.word	0x240011a0
 800dca8:	e000ed04 	.word	0xe000ed04

0800dcac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08a      	sub	sp, #40	@ 0x28
 800dcb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcba:	463a      	mov	r2, r7
 800dcbc:	1d39      	adds	r1, r7, #4
 800dcbe:	f107 0308 	add.w	r3, r7, #8
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7ff f834 	bl	800cd30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68ba      	ldr	r2, [r7, #8]
 800dcce:	9202      	str	r2, [sp, #8]
 800dcd0:	9301      	str	r3, [sp, #4]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	460a      	mov	r2, r1
 800dcda:	4922      	ldr	r1, [pc, #136]	@ (800dd64 <vTaskStartScheduler+0xb8>)
 800dcdc:	4822      	ldr	r0, [pc, #136]	@ (800dd68 <vTaskStartScheduler+0xbc>)
 800dcde:	f7ff fe09 	bl	800d8f4 <xTaskCreateStatic>
 800dce2:	4603      	mov	r3, r0
 800dce4:	4a21      	ldr	r2, [pc, #132]	@ (800dd6c <vTaskStartScheduler+0xc0>)
 800dce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dce8:	4b20      	ldr	r3, [pc, #128]	@ (800dd6c <vTaskStartScheduler+0xc0>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	e001      	b.n	800dcfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d102      	bne.n	800dd06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd00:	f000 fd3c 	bl	800e77c <xTimerCreateTimerTask>
 800dd04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d116      	bne.n	800dd3a <vTaskStartScheduler+0x8e>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	613b      	str	r3, [r7, #16]
}
 800dd1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd20:	4b13      	ldr	r3, [pc, #76]	@ (800dd70 <vTaskStartScheduler+0xc4>)
 800dd22:	f04f 32ff 	mov.w	r2, #4294967295
 800dd26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd28:	4b12      	ldr	r3, [pc, #72]	@ (800dd74 <vTaskStartScheduler+0xc8>)
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd2e:	4b12      	ldr	r3, [pc, #72]	@ (800dd78 <vTaskStartScheduler+0xcc>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd34:	f001 f90c 	bl	800ef50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd38:	e00f      	b.n	800dd5a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd40:	d10b      	bne.n	800dd5a <vTaskStartScheduler+0xae>
	__asm volatile
 800dd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	60fb      	str	r3, [r7, #12]
}
 800dd54:	bf00      	nop
 800dd56:	bf00      	nop
 800dd58:	e7fd      	b.n	800dd56 <vTaskStartScheduler+0xaa>
}
 800dd5a:	bf00      	nop
 800dd5c:	3718      	adds	r7, #24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	08014a20 	.word	0x08014a20
 800dd68:	0800e39d 	.word	0x0800e39d
 800dd6c:	2400119c 	.word	0x2400119c
 800dd70:	24001198 	.word	0x24001198
 800dd74:	24001184 	.word	0x24001184
 800dd78:	2400117c 	.word	0x2400117c

0800dd7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd80:	4b04      	ldr	r3, [pc, #16]	@ (800dd94 <vTaskSuspendAll+0x18>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3301      	adds	r3, #1
 800dd86:	4a03      	ldr	r2, [pc, #12]	@ (800dd94 <vTaskSuspendAll+0x18>)
 800dd88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd8a:	bf00      	nop
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	240011a0 	.word	0x240011a0

0800dd98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dda2:	2300      	movs	r3, #0
 800dda4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dda6:	4b42      	ldr	r3, [pc, #264]	@ (800deb0 <xTaskResumeAll+0x118>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d10b      	bne.n	800ddc6 <xTaskResumeAll+0x2e>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	603b      	str	r3, [r7, #0]
}
 800ddc0:	bf00      	nop
 800ddc2:	bf00      	nop
 800ddc4:	e7fd      	b.n	800ddc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddc6:	f001 f967 	bl	800f098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddca:	4b39      	ldr	r3, [pc, #228]	@ (800deb0 <xTaskResumeAll+0x118>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	4a37      	ldr	r2, [pc, #220]	@ (800deb0 <xTaskResumeAll+0x118>)
 800ddd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddd4:	4b36      	ldr	r3, [pc, #216]	@ (800deb0 <xTaskResumeAll+0x118>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d162      	bne.n	800dea2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dddc:	4b35      	ldr	r3, [pc, #212]	@ (800deb4 <xTaskResumeAll+0x11c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d05e      	beq.n	800dea2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dde4:	e02f      	b.n	800de46 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dde6:	4b34      	ldr	r3, [pc, #208]	@ (800deb8 <xTaskResumeAll+0x120>)
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	3318      	adds	r3, #24
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7ff f85a 	bl	800ceac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7ff f855 	bl	800ceac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de06:	4b2d      	ldr	r3, [pc, #180]	@ (800debc <xTaskResumeAll+0x124>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d903      	bls.n	800de16 <xTaskResumeAll+0x7e>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de12:	4a2a      	ldr	r2, [pc, #168]	@ (800debc <xTaskResumeAll+0x124>)
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de1a:	4613      	mov	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4413      	add	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4a27      	ldr	r2, [pc, #156]	@ (800dec0 <xTaskResumeAll+0x128>)
 800de24:	441a      	add	r2, r3
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	3304      	adds	r3, #4
 800de2a:	4619      	mov	r1, r3
 800de2c:	4610      	mov	r0, r2
 800de2e:	f7fe ffe0 	bl	800cdf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de36:	4b23      	ldr	r3, [pc, #140]	@ (800dec4 <xTaskResumeAll+0x12c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d302      	bcc.n	800de46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de40:	4b21      	ldr	r3, [pc, #132]	@ (800dec8 <xTaskResumeAll+0x130>)
 800de42:	2201      	movs	r2, #1
 800de44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de46:	4b1c      	ldr	r3, [pc, #112]	@ (800deb8 <xTaskResumeAll+0x120>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1cb      	bne.n	800dde6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de54:	f000 fb90 	bl	800e578 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de58:	4b1c      	ldr	r3, [pc, #112]	@ (800decc <xTaskResumeAll+0x134>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d010      	beq.n	800de86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de64:	f000 f846 	bl	800def4 <xTaskIncrementTick>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800de6e:	4b16      	ldr	r3, [pc, #88]	@ (800dec8 <xTaskResumeAll+0x130>)
 800de70:	2201      	movs	r2, #1
 800de72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3b01      	subs	r3, #1
 800de78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d1f1      	bne.n	800de64 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800de80:	4b12      	ldr	r3, [pc, #72]	@ (800decc <xTaskResumeAll+0x134>)
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de86:	4b10      	ldr	r3, [pc, #64]	@ (800dec8 <xTaskResumeAll+0x130>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d009      	beq.n	800dea2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de8e:	2301      	movs	r3, #1
 800de90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de92:	4b0f      	ldr	r3, [pc, #60]	@ (800ded0 <xTaskResumeAll+0x138>)
 800de94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dea2:	f001 f92b 	bl	800f0fc <vPortExitCritical>

	return xAlreadyYielded;
 800dea6:	68bb      	ldr	r3, [r7, #8]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	240011a0 	.word	0x240011a0
 800deb4:	24001178 	.word	0x24001178
 800deb8:	24001138 	.word	0x24001138
 800debc:	24001180 	.word	0x24001180
 800dec0:	24000ca8 	.word	0x24000ca8
 800dec4:	24000ca4 	.word	0x24000ca4
 800dec8:	2400118c 	.word	0x2400118c
 800decc:	24001188 	.word	0x24001188
 800ded0:	e000ed04 	.word	0xe000ed04

0800ded4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800deda:	4b05      	ldr	r3, [pc, #20]	@ (800def0 <xTaskGetTickCount+0x1c>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dee0:	687b      	ldr	r3, [r7, #4]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	2400117c 	.word	0x2400117c

0800def4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800defa:	2300      	movs	r3, #0
 800defc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800defe:	4b4f      	ldr	r3, [pc, #316]	@ (800e03c <xTaskIncrementTick+0x148>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	f040 8090 	bne.w	800e028 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df08:	4b4d      	ldr	r3, [pc, #308]	@ (800e040 <xTaskIncrementTick+0x14c>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	3301      	adds	r3, #1
 800df0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df10:	4a4b      	ldr	r2, [pc, #300]	@ (800e040 <xTaskIncrementTick+0x14c>)
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d121      	bne.n	800df60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800df1c:	4b49      	ldr	r3, [pc, #292]	@ (800e044 <xTaskIncrementTick+0x150>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00b      	beq.n	800df3e <xTaskIncrementTick+0x4a>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2a:	f383 8811 	msr	BASEPRI, r3
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	603b      	str	r3, [r7, #0]
}
 800df38:	bf00      	nop
 800df3a:	bf00      	nop
 800df3c:	e7fd      	b.n	800df3a <xTaskIncrementTick+0x46>
 800df3e:	4b41      	ldr	r3, [pc, #260]	@ (800e044 <xTaskIncrementTick+0x150>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	4b40      	ldr	r3, [pc, #256]	@ (800e048 <xTaskIncrementTick+0x154>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a3e      	ldr	r2, [pc, #248]	@ (800e044 <xTaskIncrementTick+0x150>)
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	4a3e      	ldr	r2, [pc, #248]	@ (800e048 <xTaskIncrementTick+0x154>)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6013      	str	r3, [r2, #0]
 800df52:	4b3e      	ldr	r3, [pc, #248]	@ (800e04c <xTaskIncrementTick+0x158>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3301      	adds	r3, #1
 800df58:	4a3c      	ldr	r2, [pc, #240]	@ (800e04c <xTaskIncrementTick+0x158>)
 800df5a:	6013      	str	r3, [r2, #0]
 800df5c:	f000 fb0c 	bl	800e578 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df60:	4b3b      	ldr	r3, [pc, #236]	@ (800e050 <xTaskIncrementTick+0x15c>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	693a      	ldr	r2, [r7, #16]
 800df66:	429a      	cmp	r2, r3
 800df68:	d349      	bcc.n	800dffe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df6a:	4b36      	ldr	r3, [pc, #216]	@ (800e044 <xTaskIncrementTick+0x150>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d104      	bne.n	800df7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df74:	4b36      	ldr	r3, [pc, #216]	@ (800e050 <xTaskIncrementTick+0x15c>)
 800df76:	f04f 32ff 	mov.w	r2, #4294967295
 800df7a:	601a      	str	r2, [r3, #0]
					break;
 800df7c:	e03f      	b.n	800dffe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df7e:	4b31      	ldr	r3, [pc, #196]	@ (800e044 <xTaskIncrementTick+0x150>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	429a      	cmp	r2, r3
 800df94:	d203      	bcs.n	800df9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df96:	4a2e      	ldr	r2, [pc, #184]	@ (800e050 <xTaskIncrementTick+0x15c>)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df9c:	e02f      	b.n	800dffe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe ff82 	bl	800ceac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d004      	beq.n	800dfba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	3318      	adds	r3, #24
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe ff79 	bl	800ceac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfbe:	4b25      	ldr	r3, [pc, #148]	@ (800e054 <xTaskIncrementTick+0x160>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d903      	bls.n	800dfce <xTaskIncrementTick+0xda>
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfca:	4a22      	ldr	r2, [pc, #136]	@ (800e054 <xTaskIncrementTick+0x160>)
 800dfcc:	6013      	str	r3, [r2, #0]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4a1f      	ldr	r2, [pc, #124]	@ (800e058 <xTaskIncrementTick+0x164>)
 800dfdc:	441a      	add	r2, r3
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	4610      	mov	r0, r2
 800dfe6:	f7fe ff04 	bl	800cdf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfee:	4b1b      	ldr	r3, [pc, #108]	@ (800e05c <xTaskIncrementTick+0x168>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d3b8      	bcc.n	800df6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dff8:	2301      	movs	r3, #1
 800dffa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dffc:	e7b5      	b.n	800df6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dffe:	4b17      	ldr	r3, [pc, #92]	@ (800e05c <xTaskIncrementTick+0x168>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e004:	4914      	ldr	r1, [pc, #80]	@ (800e058 <xTaskIncrementTick+0x164>)
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	440b      	add	r3, r1
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d901      	bls.n	800e01a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e016:	2301      	movs	r3, #1
 800e018:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e01a:	4b11      	ldr	r3, [pc, #68]	@ (800e060 <xTaskIncrementTick+0x16c>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d007      	beq.n	800e032 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e022:	2301      	movs	r3, #1
 800e024:	617b      	str	r3, [r7, #20]
 800e026:	e004      	b.n	800e032 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e028:	4b0e      	ldr	r3, [pc, #56]	@ (800e064 <xTaskIncrementTick+0x170>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3301      	adds	r3, #1
 800e02e:	4a0d      	ldr	r2, [pc, #52]	@ (800e064 <xTaskIncrementTick+0x170>)
 800e030:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e032:	697b      	ldr	r3, [r7, #20]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	240011a0 	.word	0x240011a0
 800e040:	2400117c 	.word	0x2400117c
 800e044:	24001130 	.word	0x24001130
 800e048:	24001134 	.word	0x24001134
 800e04c:	24001190 	.word	0x24001190
 800e050:	24001198 	.word	0x24001198
 800e054:	24001180 	.word	0x24001180
 800e058:	24000ca8 	.word	0x24000ca8
 800e05c:	24000ca4 	.word	0x24000ca4
 800e060:	2400118c 	.word	0x2400118c
 800e064:	24001188 	.word	0x24001188

0800e068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e06e:	4b28      	ldr	r3, [pc, #160]	@ (800e110 <vTaskSwitchContext+0xa8>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d003      	beq.n	800e07e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e076:	4b27      	ldr	r3, [pc, #156]	@ (800e114 <vTaskSwitchContext+0xac>)
 800e078:	2201      	movs	r2, #1
 800e07a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e07c:	e042      	b.n	800e104 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e07e:	4b25      	ldr	r3, [pc, #148]	@ (800e114 <vTaskSwitchContext+0xac>)
 800e080:	2200      	movs	r2, #0
 800e082:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e084:	4b24      	ldr	r3, [pc, #144]	@ (800e118 <vTaskSwitchContext+0xb0>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	60fb      	str	r3, [r7, #12]
 800e08a:	e011      	b.n	800e0b0 <vTaskSwitchContext+0x48>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d10b      	bne.n	800e0aa <vTaskSwitchContext+0x42>
	__asm volatile
 800e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	607b      	str	r3, [r7, #4]
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop
 800e0a8:	e7fd      	b.n	800e0a6 <vTaskSwitchContext+0x3e>
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	491a      	ldr	r1, [pc, #104]	@ (800e11c <vTaskSwitchContext+0xb4>)
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4413      	add	r3, r2
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	440b      	add	r3, r1
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d0e3      	beq.n	800e08c <vTaskSwitchContext+0x24>
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4a13      	ldr	r2, [pc, #76]	@ (800e11c <vTaskSwitchContext+0xb4>)
 800e0d0:	4413      	add	r3, r2
 800e0d2:	60bb      	str	r3, [r7, #8]
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	685a      	ldr	r2, [r3, #4]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	605a      	str	r2, [r3, #4]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	685a      	ldr	r2, [r3, #4]
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	3308      	adds	r3, #8
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d104      	bne.n	800e0f4 <vTaskSwitchContext+0x8c>
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	685a      	ldr	r2, [r3, #4]
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	605a      	str	r2, [r3, #4]
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	4a09      	ldr	r2, [pc, #36]	@ (800e120 <vTaskSwitchContext+0xb8>)
 800e0fc:	6013      	str	r3, [r2, #0]
 800e0fe:	4a06      	ldr	r2, [pc, #24]	@ (800e118 <vTaskSwitchContext+0xb0>)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6013      	str	r3, [r2, #0]
}
 800e104:	bf00      	nop
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	240011a0 	.word	0x240011a0
 800e114:	2400118c 	.word	0x2400118c
 800e118:	24001180 	.word	0x24001180
 800e11c:	24000ca8 	.word	0x24000ca8
 800e120:	24000ca4 	.word	0x24000ca4

0800e124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10b      	bne.n	800e14c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e138:	f383 8811 	msr	BASEPRI, r3
 800e13c:	f3bf 8f6f 	isb	sy
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	60fb      	str	r3, [r7, #12]
}
 800e146:	bf00      	nop
 800e148:	bf00      	nop
 800e14a:	e7fd      	b.n	800e148 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e14c:	4b07      	ldr	r3, [pc, #28]	@ (800e16c <vTaskPlaceOnEventList+0x48>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3318      	adds	r3, #24
 800e152:	4619      	mov	r1, r3
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7fe fe70 	bl	800ce3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e15a:	2101      	movs	r1, #1
 800e15c:	6838      	ldr	r0, [r7, #0]
 800e15e:	f000 fab9 	bl	800e6d4 <prvAddCurrentTaskToDelayedList>
}
 800e162:	bf00      	nop
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	24000ca4 	.word	0x24000ca4

0800e170 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10b      	bne.n	800e19a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	617b      	str	r3, [r7, #20]
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop
 800e198:	e7fd      	b.n	800e196 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e19a:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	3318      	adds	r3, #24
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f7fe fe25 	bl	800cdf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e1b4:	6879      	ldr	r1, [r7, #4]
 800e1b6:	68b8      	ldr	r0, [r7, #8]
 800e1b8:	f000 fa8c 	bl	800e6d4 <prvAddCurrentTaskToDelayedList>
	}
 800e1bc:	bf00      	nop
 800e1be:	3718      	adds	r7, #24
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	24000ca4 	.word	0x24000ca4

0800e1c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10b      	bne.n	800e1f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	60fb      	str	r3, [r7, #12]
}
 800e1f0:	bf00      	nop
 800e1f2:	bf00      	nop
 800e1f4:	e7fd      	b.n	800e1f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	3318      	adds	r3, #24
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fe fe56 	bl	800ceac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e200:	4b1d      	ldr	r3, [pc, #116]	@ (800e278 <xTaskRemoveFromEventList+0xb0>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d11d      	bne.n	800e244 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	3304      	adds	r3, #4
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe fe4d 	bl	800ceac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e216:	4b19      	ldr	r3, [pc, #100]	@ (800e27c <xTaskRemoveFromEventList+0xb4>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d903      	bls.n	800e226 <xTaskRemoveFromEventList+0x5e>
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e222:	4a16      	ldr	r2, [pc, #88]	@ (800e27c <xTaskRemoveFromEventList+0xb4>)
 800e224:	6013      	str	r3, [r2, #0]
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e22a:	4613      	mov	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4413      	add	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4a13      	ldr	r2, [pc, #76]	@ (800e280 <xTaskRemoveFromEventList+0xb8>)
 800e234:	441a      	add	r2, r3
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	3304      	adds	r3, #4
 800e23a:	4619      	mov	r1, r3
 800e23c:	4610      	mov	r0, r2
 800e23e:	f7fe fdd8 	bl	800cdf2 <vListInsertEnd>
 800e242:	e005      	b.n	800e250 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	3318      	adds	r3, #24
 800e248:	4619      	mov	r1, r3
 800e24a:	480e      	ldr	r0, [pc, #56]	@ (800e284 <xTaskRemoveFromEventList+0xbc>)
 800e24c:	f7fe fdd1 	bl	800cdf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e254:	4b0c      	ldr	r3, [pc, #48]	@ (800e288 <xTaskRemoveFromEventList+0xc0>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d905      	bls.n	800e26a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e25e:	2301      	movs	r3, #1
 800e260:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e262:	4b0a      	ldr	r3, [pc, #40]	@ (800e28c <xTaskRemoveFromEventList+0xc4>)
 800e264:	2201      	movs	r2, #1
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	e001      	b.n	800e26e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e26a:	2300      	movs	r3, #0
 800e26c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e26e:	697b      	ldr	r3, [r7, #20]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3718      	adds	r7, #24
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	240011a0 	.word	0x240011a0
 800e27c:	24001180 	.word	0x24001180
 800e280:	24000ca8 	.word	0x24000ca8
 800e284:	24001138 	.word	0x24001138
 800e288:	24000ca4 	.word	0x24000ca4
 800e28c:	2400118c 	.word	0x2400118c

0800e290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e298:	4b06      	ldr	r3, [pc, #24]	@ (800e2b4 <vTaskInternalSetTimeOutState+0x24>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2a0:	4b05      	ldr	r3, [pc, #20]	@ (800e2b8 <vTaskInternalSetTimeOutState+0x28>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	605a      	str	r2, [r3, #4]
}
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	24001190 	.word	0x24001190
 800e2b8:	2400117c 	.word	0x2400117c

0800e2bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10b      	bne.n	800e2e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	613b      	str	r3, [r7, #16]
}
 800e2de:	bf00      	nop
 800e2e0:	bf00      	nop
 800e2e2:	e7fd      	b.n	800e2e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10b      	bne.n	800e302 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	60fb      	str	r3, [r7, #12]
}
 800e2fc:	bf00      	nop
 800e2fe:	bf00      	nop
 800e300:	e7fd      	b.n	800e2fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e302:	f000 fec9 	bl	800f098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e306:	4b1d      	ldr	r3, [pc, #116]	@ (800e37c <xTaskCheckForTimeOut+0xc0>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	69ba      	ldr	r2, [r7, #24]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e31e:	d102      	bne.n	800e326 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e320:	2300      	movs	r3, #0
 800e322:	61fb      	str	r3, [r7, #28]
 800e324:	e023      	b.n	800e36e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	4b15      	ldr	r3, [pc, #84]	@ (800e380 <xTaskCheckForTimeOut+0xc4>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d007      	beq.n	800e342 <xTaskCheckForTimeOut+0x86>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	69ba      	ldr	r2, [r7, #24]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d302      	bcc.n	800e342 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e33c:	2301      	movs	r3, #1
 800e33e:	61fb      	str	r3, [r7, #28]
 800e340:	e015      	b.n	800e36e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	697a      	ldr	r2, [r7, #20]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d20b      	bcs.n	800e364 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	1ad2      	subs	r2, r2, r3
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7ff ff99 	bl	800e290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e35e:	2300      	movs	r3, #0
 800e360:	61fb      	str	r3, [r7, #28]
 800e362:	e004      	b.n	800e36e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	2200      	movs	r2, #0
 800e368:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e36a:	2301      	movs	r3, #1
 800e36c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e36e:	f000 fec5 	bl	800f0fc <vPortExitCritical>

	return xReturn;
 800e372:	69fb      	ldr	r3, [r7, #28]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3720      	adds	r7, #32
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	2400117c 	.word	0x2400117c
 800e380:	24001190 	.word	0x24001190

0800e384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e384:	b480      	push	{r7}
 800e386:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e388:	4b03      	ldr	r3, [pc, #12]	@ (800e398 <vTaskMissedYield+0x14>)
 800e38a:	2201      	movs	r2, #1
 800e38c:	601a      	str	r2, [r3, #0]
}
 800e38e:	bf00      	nop
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr
 800e398:	2400118c 	.word	0x2400118c

0800e39c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3a4:	f000 f852 	bl	800e44c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3a8:	4b06      	ldr	r3, [pc, #24]	@ (800e3c4 <prvIdleTask+0x28>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d9f9      	bls.n	800e3a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3b0:	4b05      	ldr	r3, [pc, #20]	@ (800e3c8 <prvIdleTask+0x2c>)
 800e3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3b6:	601a      	str	r2, [r3, #0]
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3c0:	e7f0      	b.n	800e3a4 <prvIdleTask+0x8>
 800e3c2:	bf00      	nop
 800e3c4:	24000ca8 	.word	0x24000ca8
 800e3c8:	e000ed04 	.word	0xe000ed04

0800e3cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	607b      	str	r3, [r7, #4]
 800e3d6:	e00c      	b.n	800e3f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	4a12      	ldr	r2, [pc, #72]	@ (800e42c <prvInitialiseTaskLists+0x60>)
 800e3e4:	4413      	add	r3, r2
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fe fcd6 	bl	800cd98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	607b      	str	r3, [r7, #4]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b37      	cmp	r3, #55	@ 0x37
 800e3f6:	d9ef      	bls.n	800e3d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3f8:	480d      	ldr	r0, [pc, #52]	@ (800e430 <prvInitialiseTaskLists+0x64>)
 800e3fa:	f7fe fccd 	bl	800cd98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3fe:	480d      	ldr	r0, [pc, #52]	@ (800e434 <prvInitialiseTaskLists+0x68>)
 800e400:	f7fe fcca 	bl	800cd98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e404:	480c      	ldr	r0, [pc, #48]	@ (800e438 <prvInitialiseTaskLists+0x6c>)
 800e406:	f7fe fcc7 	bl	800cd98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e40a:	480c      	ldr	r0, [pc, #48]	@ (800e43c <prvInitialiseTaskLists+0x70>)
 800e40c:	f7fe fcc4 	bl	800cd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e410:	480b      	ldr	r0, [pc, #44]	@ (800e440 <prvInitialiseTaskLists+0x74>)
 800e412:	f7fe fcc1 	bl	800cd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e416:	4b0b      	ldr	r3, [pc, #44]	@ (800e444 <prvInitialiseTaskLists+0x78>)
 800e418:	4a05      	ldr	r2, [pc, #20]	@ (800e430 <prvInitialiseTaskLists+0x64>)
 800e41a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e41c:	4b0a      	ldr	r3, [pc, #40]	@ (800e448 <prvInitialiseTaskLists+0x7c>)
 800e41e:	4a05      	ldr	r2, [pc, #20]	@ (800e434 <prvInitialiseTaskLists+0x68>)
 800e420:	601a      	str	r2, [r3, #0]
}
 800e422:	bf00      	nop
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	24000ca8 	.word	0x24000ca8
 800e430:	24001108 	.word	0x24001108
 800e434:	2400111c 	.word	0x2400111c
 800e438:	24001138 	.word	0x24001138
 800e43c:	2400114c 	.word	0x2400114c
 800e440:	24001164 	.word	0x24001164
 800e444:	24001130 	.word	0x24001130
 800e448:	24001134 	.word	0x24001134

0800e44c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e452:	e019      	b.n	800e488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e454:	f000 fe20 	bl	800f098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e458:	4b10      	ldr	r3, [pc, #64]	@ (800e49c <prvCheckTasksWaitingTermination+0x50>)
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3304      	adds	r3, #4
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe fd21 	bl	800ceac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e46a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4a0 <prvCheckTasksWaitingTermination+0x54>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	3b01      	subs	r3, #1
 800e470:	4a0b      	ldr	r2, [pc, #44]	@ (800e4a0 <prvCheckTasksWaitingTermination+0x54>)
 800e472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e474:	4b0b      	ldr	r3, [pc, #44]	@ (800e4a4 <prvCheckTasksWaitingTermination+0x58>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3b01      	subs	r3, #1
 800e47a:	4a0a      	ldr	r2, [pc, #40]	@ (800e4a4 <prvCheckTasksWaitingTermination+0x58>)
 800e47c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e47e:	f000 fe3d 	bl	800f0fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f848 	bl	800e518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e488:	4b06      	ldr	r3, [pc, #24]	@ (800e4a4 <prvCheckTasksWaitingTermination+0x58>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e1      	bne.n	800e454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e490:	bf00      	nop
 800e492:	bf00      	nop
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	2400114c 	.word	0x2400114c
 800e4a0:	24001178 	.word	0x24001178
 800e4a4:	24001160 	.word	0x24001160

0800e4a8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b085      	sub	sp, #20
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e4b4:	e005      	b.n	800e4c2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	2ba5      	cmp	r3, #165	@ 0xa5
 800e4c8:	d0f5      	beq.n	800e4b6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	089b      	lsrs	r3, r3, #2
 800e4ce:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	b29b      	uxth	r3, r3
	}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3714      	adds	r7, #20
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d102      	bne.n	800e4f4 <uxTaskGetStackHighWaterMark+0x14>
 800e4ee:	4b09      	ldr	r3, [pc, #36]	@ (800e514 <uxTaskGetStackHighWaterMark+0x34>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	e000      	b.n	800e4f6 <uxTaskGetStackHighWaterMark+0x16>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4fc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800e4fe:	6938      	ldr	r0, [r7, #16]
 800e500:	f7ff ffd2 	bl	800e4a8 <prvTaskCheckFreeStackSpace>
 800e504:	4603      	mov	r3, r0
 800e506:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800e508:	68fb      	ldr	r3, [r7, #12]
	}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3718      	adds	r7, #24
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	24000ca4 	.word	0x24000ca4

0800e518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e526:	2b00      	cmp	r3, #0
 800e528:	d108      	bne.n	800e53c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 ffa2 	bl	800f478 <vPortFree>
				vPortFree( pxTCB );
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 ff9f 	bl	800f478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e53a:	e019      	b.n	800e570 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e542:	2b01      	cmp	r3, #1
 800e544:	d103      	bne.n	800e54e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 ff96 	bl	800f478 <vPortFree>
	}
 800e54c:	e010      	b.n	800e570 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e554:	2b02      	cmp	r3, #2
 800e556:	d00b      	beq.n	800e570 <prvDeleteTCB+0x58>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	60fb      	str	r3, [r7, #12]
}
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	e7fd      	b.n	800e56c <prvDeleteTCB+0x54>
	}
 800e570:	bf00      	nop
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e57e:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b0 <prvResetNextTaskUnblockTime+0x38>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d104      	bne.n	800e592 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e588:	4b0a      	ldr	r3, [pc, #40]	@ (800e5b4 <prvResetNextTaskUnblockTime+0x3c>)
 800e58a:	f04f 32ff 	mov.w	r2, #4294967295
 800e58e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e590:	e008      	b.n	800e5a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e592:	4b07      	ldr	r3, [pc, #28]	@ (800e5b0 <prvResetNextTaskUnblockTime+0x38>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	4a04      	ldr	r2, [pc, #16]	@ (800e5b4 <prvResetNextTaskUnblockTime+0x3c>)
 800e5a2:	6013      	str	r3, [r2, #0]
}
 800e5a4:	bf00      	nop
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	24001130 	.word	0x24001130
 800e5b4:	24001198 	.word	0x24001198

0800e5b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5be:	4b0b      	ldr	r3, [pc, #44]	@ (800e5ec <xTaskGetSchedulerState+0x34>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d102      	bne.n	800e5cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	607b      	str	r3, [r7, #4]
 800e5ca:	e008      	b.n	800e5de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5cc:	4b08      	ldr	r3, [pc, #32]	@ (800e5f0 <xTaskGetSchedulerState+0x38>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	607b      	str	r3, [r7, #4]
 800e5d8:	e001      	b.n	800e5de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e5de:	687b      	ldr	r3, [r7, #4]
	}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	24001184 	.word	0x24001184
 800e5f0:	240011a0 	.word	0x240011a0

0800e5f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e600:	2300      	movs	r3, #0
 800e602:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d058      	beq.n	800e6bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e60a:	4b2f      	ldr	r3, [pc, #188]	@ (800e6c8 <xTaskPriorityDisinherit+0xd4>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	429a      	cmp	r2, r3
 800e612:	d00b      	beq.n	800e62c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	60fb      	str	r3, [r7, #12]
}
 800e626:	bf00      	nop
 800e628:	bf00      	nop
 800e62a:	e7fd      	b.n	800e628 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10b      	bne.n	800e64c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	60bb      	str	r3, [r7, #8]
}
 800e646:	bf00      	nop
 800e648:	bf00      	nop
 800e64a:	e7fd      	b.n	800e648 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e650:	1e5a      	subs	r2, r3, #1
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e65e:	429a      	cmp	r2, r3
 800e660:	d02c      	beq.n	800e6bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e666:	2b00      	cmp	r3, #0
 800e668:	d128      	bne.n	800e6bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	3304      	adds	r3, #4
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fc1c 	bl	800ceac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e680:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e68c:	4b0f      	ldr	r3, [pc, #60]	@ (800e6cc <xTaskPriorityDisinherit+0xd8>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	429a      	cmp	r2, r3
 800e692:	d903      	bls.n	800e69c <xTaskPriorityDisinherit+0xa8>
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e698:	4a0c      	ldr	r2, [pc, #48]	@ (800e6cc <xTaskPriorityDisinherit+0xd8>)
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4a09      	ldr	r2, [pc, #36]	@ (800e6d0 <xTaskPriorityDisinherit+0xdc>)
 800e6aa:	441a      	add	r2, r3
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	f7fe fb9d 	bl	800cdf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6bc:	697b      	ldr	r3, [r7, #20]
	}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	24000ca4 	.word	0x24000ca4
 800e6cc:	24001180 	.word	0x24001180
 800e6d0:	24000ca8 	.word	0x24000ca8

0800e6d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6de:	4b21      	ldr	r3, [pc, #132]	@ (800e764 <prvAddCurrentTaskToDelayedList+0x90>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6e4:	4b20      	ldr	r3, [pc, #128]	@ (800e768 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3304      	adds	r3, #4
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fe fbde 	bl	800ceac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f6:	d10a      	bne.n	800e70e <prvAddCurrentTaskToDelayedList+0x3a>
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d007      	beq.n	800e70e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800e768 <prvAddCurrentTaskToDelayedList+0x94>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3304      	adds	r3, #4
 800e704:	4619      	mov	r1, r3
 800e706:	4819      	ldr	r0, [pc, #100]	@ (800e76c <prvAddCurrentTaskToDelayedList+0x98>)
 800e708:	f7fe fb73 	bl	800cdf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e70c:	e026      	b.n	800e75c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e70e:	68fa      	ldr	r2, [r7, #12]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4413      	add	r3, r2
 800e714:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e716:	4b14      	ldr	r3, [pc, #80]	@ (800e768 <prvAddCurrentTaskToDelayedList+0x94>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	429a      	cmp	r2, r3
 800e724:	d209      	bcs.n	800e73a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e726:	4b12      	ldr	r3, [pc, #72]	@ (800e770 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	4b0f      	ldr	r3, [pc, #60]	@ (800e768 <prvAddCurrentTaskToDelayedList+0x94>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3304      	adds	r3, #4
 800e730:	4619      	mov	r1, r3
 800e732:	4610      	mov	r0, r2
 800e734:	f7fe fb81 	bl	800ce3a <vListInsert>
}
 800e738:	e010      	b.n	800e75c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e73a:	4b0e      	ldr	r3, [pc, #56]	@ (800e774 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	4b0a      	ldr	r3, [pc, #40]	@ (800e768 <prvAddCurrentTaskToDelayedList+0x94>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3304      	adds	r3, #4
 800e744:	4619      	mov	r1, r3
 800e746:	4610      	mov	r0, r2
 800e748:	f7fe fb77 	bl	800ce3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e74c:	4b0a      	ldr	r3, [pc, #40]	@ (800e778 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68ba      	ldr	r2, [r7, #8]
 800e752:	429a      	cmp	r2, r3
 800e754:	d202      	bcs.n	800e75c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e756:	4a08      	ldr	r2, [pc, #32]	@ (800e778 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	6013      	str	r3, [r2, #0]
}
 800e75c:	bf00      	nop
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	2400117c 	.word	0x2400117c
 800e768:	24000ca4 	.word	0x24000ca4
 800e76c:	24001164 	.word	0x24001164
 800e770:	24001134 	.word	0x24001134
 800e774:	24001130 	.word	0x24001130
 800e778:	24001198 	.word	0x24001198

0800e77c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08a      	sub	sp, #40	@ 0x28
 800e780:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e782:	2300      	movs	r3, #0
 800e784:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e786:	f000 fb13 	bl	800edb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e78a:	4b1d      	ldr	r3, [pc, #116]	@ (800e800 <xTimerCreateTimerTask+0x84>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d021      	beq.n	800e7d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e792:	2300      	movs	r3, #0
 800e794:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e796:	2300      	movs	r3, #0
 800e798:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e79a:	1d3a      	adds	r2, r7, #4
 800e79c:	f107 0108 	add.w	r1, r7, #8
 800e7a0:	f107 030c 	add.w	r3, r7, #12
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fe fadd 	bl	800cd64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	68fa      	ldr	r2, [r7, #12]
 800e7b0:	9202      	str	r2, [sp, #8]
 800e7b2:	9301      	str	r3, [sp, #4]
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	460a      	mov	r2, r1
 800e7bc:	4911      	ldr	r1, [pc, #68]	@ (800e804 <xTimerCreateTimerTask+0x88>)
 800e7be:	4812      	ldr	r0, [pc, #72]	@ (800e808 <xTimerCreateTimerTask+0x8c>)
 800e7c0:	f7ff f898 	bl	800d8f4 <xTaskCreateStatic>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	4a11      	ldr	r2, [pc, #68]	@ (800e80c <xTimerCreateTimerTask+0x90>)
 800e7c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e7ca:	4b10      	ldr	r3, [pc, #64]	@ (800e80c <xTimerCreateTimerTask+0x90>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10b      	bne.n	800e7f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	613b      	str	r3, [r7, #16]
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	e7fd      	b.n	800e7f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e7f4:	697b      	ldr	r3, [r7, #20]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3718      	adds	r7, #24
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	240011d4 	.word	0x240011d4
 800e804:	08014a28 	.word	0x08014a28
 800e808:	0800e949 	.word	0x0800e949
 800e80c:	240011d8 	.word	0x240011d8

0800e810 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b08a      	sub	sp, #40	@ 0x28
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
 800e81c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e81e:	2300      	movs	r3, #0
 800e820:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10b      	bne.n	800e840 <xTimerGenericCommand+0x30>
	__asm volatile
 800e828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	623b      	str	r3, [r7, #32]
}
 800e83a:	bf00      	nop
 800e83c:	bf00      	nop
 800e83e:	e7fd      	b.n	800e83c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e840:	4b19      	ldr	r3, [pc, #100]	@ (800e8a8 <xTimerGenericCommand+0x98>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d02a      	beq.n	800e89e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b05      	cmp	r3, #5
 800e858:	dc18      	bgt.n	800e88c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e85a:	f7ff fead 	bl	800e5b8 <xTaskGetSchedulerState>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b02      	cmp	r3, #2
 800e862:	d109      	bne.n	800e878 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e864:	4b10      	ldr	r3, [pc, #64]	@ (800e8a8 <xTimerGenericCommand+0x98>)
 800e866:	6818      	ldr	r0, [r3, #0]
 800e868:	f107 0110 	add.w	r1, r7, #16
 800e86c:	2300      	movs	r3, #0
 800e86e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e870:	f7fe fc50 	bl	800d114 <xQueueGenericSend>
 800e874:	6278      	str	r0, [r7, #36]	@ 0x24
 800e876:	e012      	b.n	800e89e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e878:	4b0b      	ldr	r3, [pc, #44]	@ (800e8a8 <xTimerGenericCommand+0x98>)
 800e87a:	6818      	ldr	r0, [r3, #0]
 800e87c:	f107 0110 	add.w	r1, r7, #16
 800e880:	2300      	movs	r3, #0
 800e882:	2200      	movs	r2, #0
 800e884:	f7fe fc46 	bl	800d114 <xQueueGenericSend>
 800e888:	6278      	str	r0, [r7, #36]	@ 0x24
 800e88a:	e008      	b.n	800e89e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e88c:	4b06      	ldr	r3, [pc, #24]	@ (800e8a8 <xTimerGenericCommand+0x98>)
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	f107 0110 	add.w	r1, r7, #16
 800e894:	2300      	movs	r3, #0
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	f7fe fd3e 	bl	800d318 <xQueueGenericSendFromISR>
 800e89c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3728      	adds	r7, #40	@ 0x28
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	240011d4 	.word	0x240011d4

0800e8ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b088      	sub	sp, #32
 800e8b0:	af02      	add	r7, sp, #8
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8b6:	4b23      	ldr	r3, [pc, #140]	@ (800e944 <prvProcessExpiredTimer+0x98>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	68db      	ldr	r3, [r3, #12]
 800e8be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fe faf1 	bl	800ceac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d023      	beq.n	800e920 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	699a      	ldr	r2, [r3, #24]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	18d1      	adds	r1, r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	6978      	ldr	r0, [r7, #20]
 800e8e6:	f000 f8d5 	bl	800ea94 <prvInsertTimerInActiveList>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d020      	beq.n	800e932 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	6978      	ldr	r0, [r7, #20]
 800e8fc:	f7ff ff88 	bl	800e810 <xTimerGenericCommand>
 800e900:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d114      	bne.n	800e932 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	60fb      	str	r3, [r7, #12]
}
 800e91a:	bf00      	nop
 800e91c:	bf00      	nop
 800e91e:	e7fd      	b.n	800e91c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e926:	f023 0301 	bic.w	r3, r3, #1
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	6978      	ldr	r0, [r7, #20]
 800e938:	4798      	blx	r3
}
 800e93a:	bf00      	nop
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	240011cc 	.word	0x240011cc

0800e948 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e950:	f107 0308 	add.w	r3, r7, #8
 800e954:	4618      	mov	r0, r3
 800e956:	f000 f859 	bl	800ea0c <prvGetNextExpireTime>
 800e95a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	4619      	mov	r1, r3
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f000 f805 	bl	800e970 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e966:	f000 f8d7 	bl	800eb18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e96a:	bf00      	nop
 800e96c:	e7f0      	b.n	800e950 <prvTimerTask+0x8>
	...

0800e970 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e97a:	f7ff f9ff 	bl	800dd7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e97e:	f107 0308 	add.w	r3, r7, #8
 800e982:	4618      	mov	r0, r3
 800e984:	f000 f866 	bl	800ea54 <prvSampleTimeNow>
 800e988:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d130      	bne.n	800e9f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d10a      	bne.n	800e9ac <prvProcessTimerOrBlockTask+0x3c>
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d806      	bhi.n	800e9ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e99e:	f7ff f9fb 	bl	800dd98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e9a2:	68f9      	ldr	r1, [r7, #12]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ff81 	bl	800e8ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e9aa:	e024      	b.n	800e9f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d008      	beq.n	800e9c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e9b2:	4b13      	ldr	r3, [pc, #76]	@ (800ea00 <prvProcessTimerOrBlockTask+0x90>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <prvProcessTimerOrBlockTask+0x50>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	e000      	b.n	800e9c2 <prvProcessTimerOrBlockTask+0x52>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea04 <prvProcessTimerOrBlockTask+0x94>)
 800e9c6:	6818      	ldr	r0, [r3, #0]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	f7fe ff5b 	bl	800d88c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e9d6:	f7ff f9df 	bl	800dd98 <xTaskResumeAll>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10a      	bne.n	800e9f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e9e0:	4b09      	ldr	r3, [pc, #36]	@ (800ea08 <prvProcessTimerOrBlockTask+0x98>)
 800e9e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9e6:	601a      	str	r2, [r3, #0]
 800e9e8:	f3bf 8f4f 	dsb	sy
 800e9ec:	f3bf 8f6f 	isb	sy
}
 800e9f0:	e001      	b.n	800e9f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e9f2:	f7ff f9d1 	bl	800dd98 <xTaskResumeAll>
}
 800e9f6:	bf00      	nop
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	240011d0 	.word	0x240011d0
 800ea04:	240011d4 	.word	0x240011d4
 800ea08:	e000ed04 	.word	0xe000ed04

0800ea0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea14:	4b0e      	ldr	r3, [pc, #56]	@ (800ea50 <prvGetNextExpireTime+0x44>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d101      	bne.n	800ea22 <prvGetNextExpireTime+0x16>
 800ea1e:	2201      	movs	r2, #1
 800ea20:	e000      	b.n	800ea24 <prvGetNextExpireTime+0x18>
 800ea22:	2200      	movs	r2, #0
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d105      	bne.n	800ea3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea30:	4b07      	ldr	r3, [pc, #28]	@ (800ea50 <prvGetNextExpireTime+0x44>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	60fb      	str	r3, [r7, #12]
 800ea3a:	e001      	b.n	800ea40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea40:	68fb      	ldr	r3, [r7, #12]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	240011cc 	.word	0x240011cc

0800ea54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea5c:	f7ff fa3a 	bl	800ded4 <xTaskGetTickCount>
 800ea60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea62:	4b0b      	ldr	r3, [pc, #44]	@ (800ea90 <prvSampleTimeNow+0x3c>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d205      	bcs.n	800ea78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea6c:	f000 f93a 	bl	800ece4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2201      	movs	r2, #1
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	e002      	b.n	800ea7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea7e:	4a04      	ldr	r2, [pc, #16]	@ (800ea90 <prvSampleTimeNow+0x3c>)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea84:	68fb      	ldr	r3, [r7, #12]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	240011dc 	.word	0x240011dc

0800ea94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
 800eaa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d812      	bhi.n	800eae0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	1ad2      	subs	r2, r2, r3
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	699b      	ldr	r3, [r3, #24]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d302      	bcc.n	800eace <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eac8:	2301      	movs	r3, #1
 800eaca:	617b      	str	r3, [r7, #20]
 800eacc:	e01b      	b.n	800eb06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eace:	4b10      	ldr	r3, [pc, #64]	@ (800eb10 <prvInsertTimerInActiveList+0x7c>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	3304      	adds	r3, #4
 800ead6:	4619      	mov	r1, r3
 800ead8:	4610      	mov	r0, r2
 800eada:	f7fe f9ae 	bl	800ce3a <vListInsert>
 800eade:	e012      	b.n	800eb06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d206      	bcs.n	800eaf6 <prvInsertTimerInActiveList+0x62>
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d302      	bcc.n	800eaf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	617b      	str	r3, [r7, #20]
 800eaf4:	e007      	b.n	800eb06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaf6:	4b07      	ldr	r3, [pc, #28]	@ (800eb14 <prvInsertTimerInActiveList+0x80>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4619      	mov	r1, r3
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7fe f99a 	bl	800ce3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eb06:	697b      	ldr	r3, [r7, #20]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	240011d0 	.word	0x240011d0
 800eb14:	240011cc 	.word	0x240011cc

0800eb18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b08e      	sub	sp, #56	@ 0x38
 800eb1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb1e:	e0ce      	b.n	800ecbe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	da19      	bge.n	800eb5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb26:	1d3b      	adds	r3, r7, #4
 800eb28:	3304      	adds	r3, #4
 800eb2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10b      	bne.n	800eb4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800eb32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb36:	f383 8811 	msr	BASEPRI, r3
 800eb3a:	f3bf 8f6f 	isb	sy
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	61fb      	str	r3, [r7, #28]
}
 800eb44:	bf00      	nop
 800eb46:	bf00      	nop
 800eb48:	e7fd      	b.n	800eb46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb50:	6850      	ldr	r0, [r2, #4]
 800eb52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb54:	6892      	ldr	r2, [r2, #8]
 800eb56:	4611      	mov	r1, r2
 800eb58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f2c0 80ae 	blt.w	800ecbe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb68:	695b      	ldr	r3, [r3, #20]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d004      	beq.n	800eb78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb70:	3304      	adds	r3, #4
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fe f99a 	bl	800ceac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb78:	463b      	mov	r3, r7
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff ff6a 	bl	800ea54 <prvSampleTimeNow>
 800eb80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b09      	cmp	r3, #9
 800eb86:	f200 8097 	bhi.w	800ecb8 <prvProcessReceivedCommands+0x1a0>
 800eb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb90 <prvProcessReceivedCommands+0x78>)
 800eb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb90:	0800ebb9 	.word	0x0800ebb9
 800eb94:	0800ebb9 	.word	0x0800ebb9
 800eb98:	0800ebb9 	.word	0x0800ebb9
 800eb9c:	0800ec2f 	.word	0x0800ec2f
 800eba0:	0800ec43 	.word	0x0800ec43
 800eba4:	0800ec8f 	.word	0x0800ec8f
 800eba8:	0800ebb9 	.word	0x0800ebb9
 800ebac:	0800ebb9 	.word	0x0800ebb9
 800ebb0:	0800ec2f 	.word	0x0800ec2f
 800ebb4:	0800ec43 	.word	0x0800ec43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebbe:	f043 0301 	orr.w	r3, r3, #1
 800ebc2:	b2da      	uxtb	r2, r3
 800ebc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	18d1      	adds	r1, r2, r3
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebd8:	f7ff ff5c 	bl	800ea94 <prvInsertTimerInActiveList>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d06c      	beq.n	800ecbc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebf0:	f003 0304 	and.w	r3, r3, #4
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d061      	beq.n	800ecbc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	441a      	add	r2, r3
 800ec00:	2300      	movs	r3, #0
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	2300      	movs	r3, #0
 800ec06:	2100      	movs	r1, #0
 800ec08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec0a:	f7ff fe01 	bl	800e810 <xTimerGenericCommand>
 800ec0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ec10:	6a3b      	ldr	r3, [r7, #32]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d152      	bne.n	800ecbc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ec16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	61bb      	str	r3, [r7, #24]
}
 800ec28:	bf00      	nop
 800ec2a:	bf00      	nop
 800ec2c:	e7fd      	b.n	800ec2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec34:	f023 0301 	bic.w	r3, r3, #1
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec40:	e03d      	b.n	800ecbe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec48:	f043 0301 	orr.w	r3, r3, #1
 800ec4c:	b2da      	uxtb	r2, r3
 800ec4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10b      	bne.n	800ec7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ec62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	617b      	str	r3, [r7, #20]
}
 800ec74:	bf00      	nop
 800ec76:	bf00      	nop
 800ec78:	e7fd      	b.n	800ec76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec7c:	699a      	ldr	r2, [r3, #24]
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec80:	18d1      	adds	r1, r2, r3
 800ec82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec88:	f7ff ff04 	bl	800ea94 <prvInsertTimerInActiveList>
					break;
 800ec8c:	e017      	b.n	800ecbe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec94:	f003 0302 	and.w	r3, r3, #2
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d103      	bne.n	800eca4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ec9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec9e:	f000 fbeb 	bl	800f478 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eca2:	e00c      	b.n	800ecbe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecaa:	f023 0301 	bic.w	r3, r3, #1
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ecb6:	e002      	b.n	800ecbe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ecb8:	bf00      	nop
 800ecba:	e000      	b.n	800ecbe <prvProcessReceivedCommands+0x1a6>
					break;
 800ecbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecbe:	4b08      	ldr	r3, [pc, #32]	@ (800ece0 <prvProcessReceivedCommands+0x1c8>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	1d39      	adds	r1, r7, #4
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe fbc4 	bl	800d454 <xQueueReceive>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f47f af26 	bne.w	800eb20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop
 800ecd8:	3730      	adds	r7, #48	@ 0x30
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	240011d4 	.word	0x240011d4

0800ece4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ecea:	e049      	b.n	800ed80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecec:	4b2e      	ldr	r3, [pc, #184]	@ (800eda8 <prvSwitchTimerLists+0xc4>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecf6:	4b2c      	ldr	r3, [pc, #176]	@ (800eda8 <prvSwitchTimerLists+0xc4>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3304      	adds	r3, #4
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fe f8d1 	bl	800ceac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6a1b      	ldr	r3, [r3, #32]
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed18:	f003 0304 	and.w	r3, r3, #4
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d02f      	beq.n	800ed80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	699b      	ldr	r3, [r3, #24]
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	4413      	add	r3, r2
 800ed28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ed2a:	68ba      	ldr	r2, [r7, #8]
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d90e      	bls.n	800ed50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eda8 <prvSwitchTimerLists+0xc4>)
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3304      	adds	r3, #4
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7fe f876 	bl	800ce3a <vListInsert>
 800ed4e:	e017      	b.n	800ed80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed50:	2300      	movs	r3, #0
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	2300      	movs	r3, #0
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	2100      	movs	r1, #0
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7ff fd58 	bl	800e810 <xTimerGenericCommand>
 800ed60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10b      	bne.n	800ed80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	603b      	str	r3, [r7, #0]
}
 800ed7a:	bf00      	nop
 800ed7c:	bf00      	nop
 800ed7e:	e7fd      	b.n	800ed7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed80:	4b09      	ldr	r3, [pc, #36]	@ (800eda8 <prvSwitchTimerLists+0xc4>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1b0      	bne.n	800ecec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed8a:	4b07      	ldr	r3, [pc, #28]	@ (800eda8 <prvSwitchTimerLists+0xc4>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed90:	4b06      	ldr	r3, [pc, #24]	@ (800edac <prvSwitchTimerLists+0xc8>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a04      	ldr	r2, [pc, #16]	@ (800eda8 <prvSwitchTimerLists+0xc4>)
 800ed96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed98:	4a04      	ldr	r2, [pc, #16]	@ (800edac <prvSwitchTimerLists+0xc8>)
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	6013      	str	r3, [r2, #0]
}
 800ed9e:	bf00      	nop
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	240011cc 	.word	0x240011cc
 800edac:	240011d0 	.word	0x240011d0

0800edb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800edb6:	f000 f96f 	bl	800f098 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800edba:	4b15      	ldr	r3, [pc, #84]	@ (800ee10 <prvCheckForValidListAndQueue+0x60>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d120      	bne.n	800ee04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800edc2:	4814      	ldr	r0, [pc, #80]	@ (800ee14 <prvCheckForValidListAndQueue+0x64>)
 800edc4:	f7fd ffe8 	bl	800cd98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800edc8:	4813      	ldr	r0, [pc, #76]	@ (800ee18 <prvCheckForValidListAndQueue+0x68>)
 800edca:	f7fd ffe5 	bl	800cd98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800edce:	4b13      	ldr	r3, [pc, #76]	@ (800ee1c <prvCheckForValidListAndQueue+0x6c>)
 800edd0:	4a10      	ldr	r2, [pc, #64]	@ (800ee14 <prvCheckForValidListAndQueue+0x64>)
 800edd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800edd4:	4b12      	ldr	r3, [pc, #72]	@ (800ee20 <prvCheckForValidListAndQueue+0x70>)
 800edd6:	4a10      	ldr	r2, [pc, #64]	@ (800ee18 <prvCheckForValidListAndQueue+0x68>)
 800edd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800edda:	2300      	movs	r3, #0
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	4b11      	ldr	r3, [pc, #68]	@ (800ee24 <prvCheckForValidListAndQueue+0x74>)
 800ede0:	4a11      	ldr	r2, [pc, #68]	@ (800ee28 <prvCheckForValidListAndQueue+0x78>)
 800ede2:	2110      	movs	r1, #16
 800ede4:	200a      	movs	r0, #10
 800ede6:	f7fe f8f5 	bl	800cfd4 <xQueueGenericCreateStatic>
 800edea:	4603      	mov	r3, r0
 800edec:	4a08      	ldr	r2, [pc, #32]	@ (800ee10 <prvCheckForValidListAndQueue+0x60>)
 800edee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800edf0:	4b07      	ldr	r3, [pc, #28]	@ (800ee10 <prvCheckForValidListAndQueue+0x60>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d005      	beq.n	800ee04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800edf8:	4b05      	ldr	r3, [pc, #20]	@ (800ee10 <prvCheckForValidListAndQueue+0x60>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	490b      	ldr	r1, [pc, #44]	@ (800ee2c <prvCheckForValidListAndQueue+0x7c>)
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fe fd1a 	bl	800d838 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee04:	f000 f97a 	bl	800f0fc <vPortExitCritical>
}
 800ee08:	bf00      	nop
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	240011d4 	.word	0x240011d4
 800ee14:	240011a4 	.word	0x240011a4
 800ee18:	240011b8 	.word	0x240011b8
 800ee1c:	240011cc 	.word	0x240011cc
 800ee20:	240011d0 	.word	0x240011d0
 800ee24:	24001280 	.word	0x24001280
 800ee28:	240011e0 	.word	0x240011e0
 800ee2c:	08014a30 	.word	0x08014a30

0800ee30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3b04      	subs	r3, #4
 800ee40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ee48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3b04      	subs	r3, #4
 800ee4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	f023 0201 	bic.w	r2, r3, #1
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3b04      	subs	r3, #4
 800ee5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee60:	4a0c      	ldr	r2, [pc, #48]	@ (800ee94 <pxPortInitialiseStack+0x64>)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3b14      	subs	r3, #20
 800ee6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	3b04      	subs	r3, #4
 800ee76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f06f 0202 	mvn.w	r2, #2
 800ee7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	3b20      	subs	r3, #32
 800ee84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee86:	68fb      	ldr	r3, [r7, #12]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr
 800ee94:	0800ee99 	.word	0x0800ee99

0800ee98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eea2:	4b13      	ldr	r3, [pc, #76]	@ (800eef0 <prvTaskExitError+0x58>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeaa:	d00b      	beq.n	800eec4 <prvTaskExitError+0x2c>
	__asm volatile
 800eeac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	60fb      	str	r3, [r7, #12]
}
 800eebe:	bf00      	nop
 800eec0:	bf00      	nop
 800eec2:	e7fd      	b.n	800eec0 <prvTaskExitError+0x28>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	60bb      	str	r3, [r7, #8]
}
 800eed6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eed8:	bf00      	nop
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0fc      	beq.n	800eeda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eee0:	bf00      	nop
 800eee2:	bf00      	nop
 800eee4:	3714      	adds	r7, #20
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop
 800eef0:	2400009c 	.word	0x2400009c
	...

0800ef00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef00:	4b07      	ldr	r3, [pc, #28]	@ (800ef20 <pxCurrentTCBConst2>)
 800ef02:	6819      	ldr	r1, [r3, #0]
 800ef04:	6808      	ldr	r0, [r1, #0]
 800ef06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0a:	f380 8809 	msr	PSP, r0
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f04f 0000 	mov.w	r0, #0
 800ef16:	f380 8811 	msr	BASEPRI, r0
 800ef1a:	4770      	bx	lr
 800ef1c:	f3af 8000 	nop.w

0800ef20 <pxCurrentTCBConst2>:
 800ef20:	24000ca4 	.word	0x24000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop

0800ef28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef28:	4808      	ldr	r0, [pc, #32]	@ (800ef4c <prvPortStartFirstTask+0x24>)
 800ef2a:	6800      	ldr	r0, [r0, #0]
 800ef2c:	6800      	ldr	r0, [r0, #0]
 800ef2e:	f380 8808 	msr	MSP, r0
 800ef32:	f04f 0000 	mov.w	r0, #0
 800ef36:	f380 8814 	msr	CONTROL, r0
 800ef3a:	b662      	cpsie	i
 800ef3c:	b661      	cpsie	f
 800ef3e:	f3bf 8f4f 	dsb	sy
 800ef42:	f3bf 8f6f 	isb	sy
 800ef46:	df00      	svc	0
 800ef48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef4a:	bf00      	nop
 800ef4c:	e000ed08 	.word	0xe000ed08

0800ef50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b086      	sub	sp, #24
 800ef54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef56:	4b47      	ldr	r3, [pc, #284]	@ (800f074 <xPortStartScheduler+0x124>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a47      	ldr	r2, [pc, #284]	@ (800f078 <xPortStartScheduler+0x128>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d10b      	bne.n	800ef78 <xPortStartScheduler+0x28>
	__asm volatile
 800ef60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	613b      	str	r3, [r7, #16]
}
 800ef72:	bf00      	nop
 800ef74:	bf00      	nop
 800ef76:	e7fd      	b.n	800ef74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef78:	4b3e      	ldr	r3, [pc, #248]	@ (800f074 <xPortStartScheduler+0x124>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a3f      	ldr	r2, [pc, #252]	@ (800f07c <xPortStartScheduler+0x12c>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d10b      	bne.n	800ef9a <xPortStartScheduler+0x4a>
	__asm volatile
 800ef82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	60fb      	str	r3, [r7, #12]
}
 800ef94:	bf00      	nop
 800ef96:	bf00      	nop
 800ef98:	e7fd      	b.n	800ef96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ef9a:	4b39      	ldr	r3, [pc, #228]	@ (800f080 <xPortStartScheduler+0x130>)
 800ef9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	22ff      	movs	r2, #255	@ 0xff
 800efaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800efb4:	78fb      	ldrb	r3, [r7, #3]
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	4b31      	ldr	r3, [pc, #196]	@ (800f084 <xPortStartScheduler+0x134>)
 800efc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800efc2:	4b31      	ldr	r3, [pc, #196]	@ (800f088 <xPortStartScheduler+0x138>)
 800efc4:	2207      	movs	r2, #7
 800efc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efc8:	e009      	b.n	800efde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800efca:	4b2f      	ldr	r3, [pc, #188]	@ (800f088 <xPortStartScheduler+0x138>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	3b01      	subs	r3, #1
 800efd0:	4a2d      	ldr	r2, [pc, #180]	@ (800f088 <xPortStartScheduler+0x138>)
 800efd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	005b      	lsls	r3, r3, #1
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efde:	78fb      	ldrb	r3, [r7, #3]
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efe6:	2b80      	cmp	r3, #128	@ 0x80
 800efe8:	d0ef      	beq.n	800efca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800efea:	4b27      	ldr	r3, [pc, #156]	@ (800f088 <xPortStartScheduler+0x138>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f1c3 0307 	rsb	r3, r3, #7
 800eff2:	2b04      	cmp	r3, #4
 800eff4:	d00b      	beq.n	800f00e <xPortStartScheduler+0xbe>
	__asm volatile
 800eff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effa:	f383 8811 	msr	BASEPRI, r3
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	60bb      	str	r3, [r7, #8]
}
 800f008:	bf00      	nop
 800f00a:	bf00      	nop
 800f00c:	e7fd      	b.n	800f00a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f00e:	4b1e      	ldr	r3, [pc, #120]	@ (800f088 <xPortStartScheduler+0x138>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	021b      	lsls	r3, r3, #8
 800f014:	4a1c      	ldr	r2, [pc, #112]	@ (800f088 <xPortStartScheduler+0x138>)
 800f016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f018:	4b1b      	ldr	r3, [pc, #108]	@ (800f088 <xPortStartScheduler+0x138>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f020:	4a19      	ldr	r2, [pc, #100]	@ (800f088 <xPortStartScheduler+0x138>)
 800f022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	b2da      	uxtb	r2, r3
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f02c:	4b17      	ldr	r3, [pc, #92]	@ (800f08c <xPortStartScheduler+0x13c>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a16      	ldr	r2, [pc, #88]	@ (800f08c <xPortStartScheduler+0x13c>)
 800f032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f038:	4b14      	ldr	r3, [pc, #80]	@ (800f08c <xPortStartScheduler+0x13c>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a13      	ldr	r2, [pc, #76]	@ (800f08c <xPortStartScheduler+0x13c>)
 800f03e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f044:	f000 f8da 	bl	800f1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f048:	4b11      	ldr	r3, [pc, #68]	@ (800f090 <xPortStartScheduler+0x140>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f04e:	f000 f8f9 	bl	800f244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f052:	4b10      	ldr	r3, [pc, #64]	@ (800f094 <xPortStartScheduler+0x144>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4a0f      	ldr	r2, [pc, #60]	@ (800f094 <xPortStartScheduler+0x144>)
 800f058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f05c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f05e:	f7ff ff63 	bl	800ef28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f062:	f7ff f801 	bl	800e068 <vTaskSwitchContext>
	prvTaskExitError();
 800f066:	f7ff ff17 	bl	800ee98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3718      	adds	r7, #24
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	e000ed00 	.word	0xe000ed00
 800f078:	410fc271 	.word	0x410fc271
 800f07c:	410fc270 	.word	0x410fc270
 800f080:	e000e400 	.word	0xe000e400
 800f084:	240012d0 	.word	0x240012d0
 800f088:	240012d4 	.word	0x240012d4
 800f08c:	e000ed20 	.word	0xe000ed20
 800f090:	2400009c 	.word	0x2400009c
 800f094:	e000ef34 	.word	0xe000ef34

0800f098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	607b      	str	r3, [r7, #4]
}
 800f0b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0b2:	4b10      	ldr	r3, [pc, #64]	@ (800f0f4 <vPortEnterCritical+0x5c>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	4a0e      	ldr	r2, [pc, #56]	@ (800f0f4 <vPortEnterCritical+0x5c>)
 800f0ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f0f4 <vPortEnterCritical+0x5c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d110      	bne.n	800f0e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f0f8 <vPortEnterCritical+0x60>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00b      	beq.n	800f0e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d2:	f383 8811 	msr	BASEPRI, r3
 800f0d6:	f3bf 8f6f 	isb	sy
 800f0da:	f3bf 8f4f 	dsb	sy
 800f0de:	603b      	str	r3, [r7, #0]
}
 800f0e0:	bf00      	nop
 800f0e2:	bf00      	nop
 800f0e4:	e7fd      	b.n	800f0e2 <vPortEnterCritical+0x4a>
	}
}
 800f0e6:	bf00      	nop
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	2400009c 	.word	0x2400009c
 800f0f8:	e000ed04 	.word	0xe000ed04

0800f0fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f102:	4b12      	ldr	r3, [pc, #72]	@ (800f14c <vPortExitCritical+0x50>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10b      	bne.n	800f122 <vPortExitCritical+0x26>
	__asm volatile
 800f10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	607b      	str	r3, [r7, #4]
}
 800f11c:	bf00      	nop
 800f11e:	bf00      	nop
 800f120:	e7fd      	b.n	800f11e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f122:	4b0a      	ldr	r3, [pc, #40]	@ (800f14c <vPortExitCritical+0x50>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3b01      	subs	r3, #1
 800f128:	4a08      	ldr	r2, [pc, #32]	@ (800f14c <vPortExitCritical+0x50>)
 800f12a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f12c:	4b07      	ldr	r3, [pc, #28]	@ (800f14c <vPortExitCritical+0x50>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d105      	bne.n	800f140 <vPortExitCritical+0x44>
 800f134:	2300      	movs	r3, #0
 800f136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	f383 8811 	msr	BASEPRI, r3
}
 800f13e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr
 800f14c:	2400009c 	.word	0x2400009c

0800f150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f150:	f3ef 8009 	mrs	r0, PSP
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	4b15      	ldr	r3, [pc, #84]	@ (800f1b0 <pxCurrentTCBConst>)
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	f01e 0f10 	tst.w	lr, #16
 800f160:	bf08      	it	eq
 800f162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16a:	6010      	str	r0, [r2, #0]
 800f16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f174:	f380 8811 	msr	BASEPRI, r0
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	f3bf 8f6f 	isb	sy
 800f180:	f7fe ff72 	bl	800e068 <vTaskSwitchContext>
 800f184:	f04f 0000 	mov.w	r0, #0
 800f188:	f380 8811 	msr	BASEPRI, r0
 800f18c:	bc09      	pop	{r0, r3}
 800f18e:	6819      	ldr	r1, [r3, #0]
 800f190:	6808      	ldr	r0, [r1, #0]
 800f192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f196:	f01e 0f10 	tst.w	lr, #16
 800f19a:	bf08      	it	eq
 800f19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1a0:	f380 8809 	msr	PSP, r0
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	f3af 8000 	nop.w

0800f1b0 <pxCurrentTCBConst>:
 800f1b0:	24000ca4 	.word	0x24000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1b4:	bf00      	nop
 800f1b6:	bf00      	nop

0800f1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	607b      	str	r3, [r7, #4]
}
 800f1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1d2:	f7fe fe8f 	bl	800def4 <xTaskIncrementTick>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d003      	beq.n	800f1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1dc:	4b06      	ldr	r3, [pc, #24]	@ (800f1f8 <xPortSysTickHandler+0x40>)
 800f1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1e2:	601a      	str	r2, [r3, #0]
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	f383 8811 	msr	BASEPRI, r3
}
 800f1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f1f0:	bf00      	nop
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	e000ed04 	.word	0xe000ed04

0800f1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f200:	4b0b      	ldr	r3, [pc, #44]	@ (800f230 <vPortSetupTimerInterrupt+0x34>)
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f206:	4b0b      	ldr	r3, [pc, #44]	@ (800f234 <vPortSetupTimerInterrupt+0x38>)
 800f208:	2200      	movs	r2, #0
 800f20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f20c:	4b0a      	ldr	r3, [pc, #40]	@ (800f238 <vPortSetupTimerInterrupt+0x3c>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a0a      	ldr	r2, [pc, #40]	@ (800f23c <vPortSetupTimerInterrupt+0x40>)
 800f212:	fba2 2303 	umull	r2, r3, r2, r3
 800f216:	099b      	lsrs	r3, r3, #6
 800f218:	4a09      	ldr	r2, [pc, #36]	@ (800f240 <vPortSetupTimerInterrupt+0x44>)
 800f21a:	3b01      	subs	r3, #1
 800f21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f21e:	4b04      	ldr	r3, [pc, #16]	@ (800f230 <vPortSetupTimerInterrupt+0x34>)
 800f220:	2207      	movs	r2, #7
 800f222:	601a      	str	r2, [r3, #0]
}
 800f224:	bf00      	nop
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	e000e010 	.word	0xe000e010
 800f234:	e000e018 	.word	0xe000e018
 800f238:	24000000 	.word	0x24000000
 800f23c:	10624dd3 	.word	0x10624dd3
 800f240:	e000e014 	.word	0xe000e014

0800f244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f254 <vPortEnableVFP+0x10>
 800f248:	6801      	ldr	r1, [r0, #0]
 800f24a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f24e:	6001      	str	r1, [r0, #0]
 800f250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f252:	bf00      	nop
 800f254:	e000ed88 	.word	0xe000ed88

0800f258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f25e:	f3ef 8305 	mrs	r3, IPSR
 800f262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2b0f      	cmp	r3, #15
 800f268:	d915      	bls.n	800f296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f26a:	4a18      	ldr	r2, [pc, #96]	@ (800f2cc <vPortValidateInterruptPriority+0x74>)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	4413      	add	r3, r2
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f274:	4b16      	ldr	r3, [pc, #88]	@ (800f2d0 <vPortValidateInterruptPriority+0x78>)
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	7afa      	ldrb	r2, [r7, #11]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d20b      	bcs.n	800f296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	607b      	str	r3, [r7, #4]
}
 800f290:	bf00      	nop
 800f292:	bf00      	nop
 800f294:	e7fd      	b.n	800f292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f296:	4b0f      	ldr	r3, [pc, #60]	@ (800f2d4 <vPortValidateInterruptPriority+0x7c>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f29e:	4b0e      	ldr	r3, [pc, #56]	@ (800f2d8 <vPortValidateInterruptPriority+0x80>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d90b      	bls.n	800f2be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2aa:	f383 8811 	msr	BASEPRI, r3
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	603b      	str	r3, [r7, #0]
}
 800f2b8:	bf00      	nop
 800f2ba:	bf00      	nop
 800f2bc:	e7fd      	b.n	800f2ba <vPortValidateInterruptPriority+0x62>
	}
 800f2be:	bf00      	nop
 800f2c0:	3714      	adds	r7, #20
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	e000e3f0 	.word	0xe000e3f0
 800f2d0:	240012d0 	.word	0x240012d0
 800f2d4:	e000ed0c 	.word	0xe000ed0c
 800f2d8:	240012d4 	.word	0x240012d4

0800f2dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08a      	sub	sp, #40	@ 0x28
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f2e8:	f7fe fd48 	bl	800dd7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f2ec:	4b5c      	ldr	r3, [pc, #368]	@ (800f460 <pvPortMalloc+0x184>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d101      	bne.n	800f2f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f2f4:	f000 f924 	bl	800f540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f2f8:	4b5a      	ldr	r3, [pc, #360]	@ (800f464 <pvPortMalloc+0x188>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4013      	ands	r3, r2
 800f300:	2b00      	cmp	r3, #0
 800f302:	f040 8095 	bne.w	800f430 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d01e      	beq.n	800f34a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f30c:	2208      	movs	r2, #8
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4413      	add	r3, r2
 800f312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f003 0307 	and.w	r3, r3, #7
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d015      	beq.n	800f34a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f023 0307 	bic.w	r3, r3, #7
 800f324:	3308      	adds	r3, #8
 800f326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f003 0307 	and.w	r3, r3, #7
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00b      	beq.n	800f34a <pvPortMalloc+0x6e>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	617b      	str	r3, [r7, #20]
}
 800f344:	bf00      	nop
 800f346:	bf00      	nop
 800f348:	e7fd      	b.n	800f346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d06f      	beq.n	800f430 <pvPortMalloc+0x154>
 800f350:	4b45      	ldr	r3, [pc, #276]	@ (800f468 <pvPortMalloc+0x18c>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	429a      	cmp	r2, r3
 800f358:	d86a      	bhi.n	800f430 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f35a:	4b44      	ldr	r3, [pc, #272]	@ (800f46c <pvPortMalloc+0x190>)
 800f35c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f35e:	4b43      	ldr	r3, [pc, #268]	@ (800f46c <pvPortMalloc+0x190>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f364:	e004      	b.n	800f370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	429a      	cmp	r2, r3
 800f378:	d903      	bls.n	800f382 <pvPortMalloc+0xa6>
 800f37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d1f1      	bne.n	800f366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f382:	4b37      	ldr	r3, [pc, #220]	@ (800f460 <pvPortMalloc+0x184>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f388:	429a      	cmp	r2, r3
 800f38a:	d051      	beq.n	800f430 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2208      	movs	r2, #8
 800f392:	4413      	add	r3, r2
 800f394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a0:	685a      	ldr	r2, [r3, #4]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	1ad2      	subs	r2, r2, r3
 800f3a6:	2308      	movs	r3, #8
 800f3a8:	005b      	lsls	r3, r3, #1
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d920      	bls.n	800f3f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	f003 0307 	and.w	r3, r3, #7
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00b      	beq.n	800f3d8 <pvPortMalloc+0xfc>
	__asm volatile
 800f3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	613b      	str	r3, [r7, #16]
}
 800f3d2:	bf00      	nop
 800f3d4:	bf00      	nop
 800f3d6:	e7fd      	b.n	800f3d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3da:	685a      	ldr	r2, [r3, #4]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	1ad2      	subs	r2, r2, r3
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f3ea:	69b8      	ldr	r0, [r7, #24]
 800f3ec:	f000 f90a 	bl	800f604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f3f0:	4b1d      	ldr	r3, [pc, #116]	@ (800f468 <pvPortMalloc+0x18c>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	4a1b      	ldr	r2, [pc, #108]	@ (800f468 <pvPortMalloc+0x18c>)
 800f3fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f468 <pvPortMalloc+0x18c>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	4b1b      	ldr	r3, [pc, #108]	@ (800f470 <pvPortMalloc+0x194>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	d203      	bcs.n	800f412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f40a:	4b17      	ldr	r3, [pc, #92]	@ (800f468 <pvPortMalloc+0x18c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	4a18      	ldr	r2, [pc, #96]	@ (800f470 <pvPortMalloc+0x194>)
 800f410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	4b13      	ldr	r3, [pc, #76]	@ (800f464 <pvPortMalloc+0x188>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	431a      	orrs	r2, r3
 800f41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f422:	2200      	movs	r2, #0
 800f424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f426:	4b13      	ldr	r3, [pc, #76]	@ (800f474 <pvPortMalloc+0x198>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3301      	adds	r3, #1
 800f42c:	4a11      	ldr	r2, [pc, #68]	@ (800f474 <pvPortMalloc+0x198>)
 800f42e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f430:	f7fe fcb2 	bl	800dd98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	f003 0307 	and.w	r3, r3, #7
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00b      	beq.n	800f456 <pvPortMalloc+0x17a>
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	60fb      	str	r3, [r7, #12]
}
 800f450:	bf00      	nop
 800f452:	bf00      	nop
 800f454:	e7fd      	b.n	800f452 <pvPortMalloc+0x176>
	return pvReturn;
 800f456:	69fb      	ldr	r3, [r7, #28]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3728      	adds	r7, #40	@ 0x28
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	24004ee0 	.word	0x24004ee0
 800f464:	24004ef4 	.word	0x24004ef4
 800f468:	24004ee4 	.word	0x24004ee4
 800f46c:	24004ed8 	.word	0x24004ed8
 800f470:	24004ee8 	.word	0x24004ee8
 800f474:	24004eec 	.word	0x24004eec

0800f478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d04f      	beq.n	800f52a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f48a:	2308      	movs	r3, #8
 800f48c:	425b      	negs	r3, r3
 800f48e:	697a      	ldr	r2, [r7, #20]
 800f490:	4413      	add	r3, r2
 800f492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	685a      	ldr	r2, [r3, #4]
 800f49c:	4b25      	ldr	r3, [pc, #148]	@ (800f534 <vPortFree+0xbc>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d10b      	bne.n	800f4be <vPortFree+0x46>
	__asm volatile
 800f4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4aa:	f383 8811 	msr	BASEPRI, r3
 800f4ae:	f3bf 8f6f 	isb	sy
 800f4b2:	f3bf 8f4f 	dsb	sy
 800f4b6:	60fb      	str	r3, [r7, #12]
}
 800f4b8:	bf00      	nop
 800f4ba:	bf00      	nop
 800f4bc:	e7fd      	b.n	800f4ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00b      	beq.n	800f4de <vPortFree+0x66>
	__asm volatile
 800f4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ca:	f383 8811 	msr	BASEPRI, r3
 800f4ce:	f3bf 8f6f 	isb	sy
 800f4d2:	f3bf 8f4f 	dsb	sy
 800f4d6:	60bb      	str	r3, [r7, #8]
}
 800f4d8:	bf00      	nop
 800f4da:	bf00      	nop
 800f4dc:	e7fd      	b.n	800f4da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	685a      	ldr	r2, [r3, #4]
 800f4e2:	4b14      	ldr	r3, [pc, #80]	@ (800f534 <vPortFree+0xbc>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d01e      	beq.n	800f52a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d11a      	bne.n	800f52a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	685a      	ldr	r2, [r3, #4]
 800f4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f534 <vPortFree+0xbc>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	43db      	mvns	r3, r3
 800f4fe:	401a      	ands	r2, r3
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f504:	f7fe fc3a 	bl	800dd7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	685a      	ldr	r2, [r3, #4]
 800f50c:	4b0a      	ldr	r3, [pc, #40]	@ (800f538 <vPortFree+0xc0>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4413      	add	r3, r2
 800f512:	4a09      	ldr	r2, [pc, #36]	@ (800f538 <vPortFree+0xc0>)
 800f514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f516:	6938      	ldr	r0, [r7, #16]
 800f518:	f000 f874 	bl	800f604 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f51c:	4b07      	ldr	r3, [pc, #28]	@ (800f53c <vPortFree+0xc4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	3301      	adds	r3, #1
 800f522:	4a06      	ldr	r2, [pc, #24]	@ (800f53c <vPortFree+0xc4>)
 800f524:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f526:	f7fe fc37 	bl	800dd98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f52a:	bf00      	nop
 800f52c:	3718      	adds	r7, #24
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	24004ef4 	.word	0x24004ef4
 800f538:	24004ee4 	.word	0x24004ee4
 800f53c:	24004ef0 	.word	0x24004ef0

0800f540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f546:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f54a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f54c:	4b27      	ldr	r3, [pc, #156]	@ (800f5ec <prvHeapInit+0xac>)
 800f54e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f003 0307 	and.w	r3, r3, #7
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00c      	beq.n	800f574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	3307      	adds	r3, #7
 800f55e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f023 0307 	bic.w	r3, r3, #7
 800f566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	4a1f      	ldr	r2, [pc, #124]	@ (800f5ec <prvHeapInit+0xac>)
 800f570:	4413      	add	r3, r2
 800f572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f578:	4a1d      	ldr	r2, [pc, #116]	@ (800f5f0 <prvHeapInit+0xb0>)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f57e:	4b1c      	ldr	r3, [pc, #112]	@ (800f5f0 <prvHeapInit+0xb0>)
 800f580:	2200      	movs	r2, #0
 800f582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	4413      	add	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f58c:	2208      	movs	r2, #8
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	1a9b      	subs	r3, r3, r2
 800f592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f023 0307 	bic.w	r3, r3, #7
 800f59a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	4a15      	ldr	r2, [pc, #84]	@ (800f5f4 <prvHeapInit+0xb4>)
 800f5a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5a2:	4b14      	ldr	r3, [pc, #80]	@ (800f5f4 <prvHeapInit+0xb4>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5aa:	4b12      	ldr	r3, [pc, #72]	@ (800f5f4 <prvHeapInit+0xb4>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	1ad2      	subs	r2, r2, r3
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f5f4 <prvHeapInit+0xb4>)
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	4a0a      	ldr	r2, [pc, #40]	@ (800f5f8 <prvHeapInit+0xb8>)
 800f5ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	4a09      	ldr	r2, [pc, #36]	@ (800f5fc <prvHeapInit+0xbc>)
 800f5d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5d8:	4b09      	ldr	r3, [pc, #36]	@ (800f600 <prvHeapInit+0xc0>)
 800f5da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f5de:	601a      	str	r2, [r3, #0]
}
 800f5e0:	bf00      	nop
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	240012d8 	.word	0x240012d8
 800f5f0:	24004ed8 	.word	0x24004ed8
 800f5f4:	24004ee0 	.word	0x24004ee0
 800f5f8:	24004ee8 	.word	0x24004ee8
 800f5fc:	24004ee4 	.word	0x24004ee4
 800f600:	24004ef4 	.word	0x24004ef4

0800f604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f60c:	4b28      	ldr	r3, [pc, #160]	@ (800f6b0 <prvInsertBlockIntoFreeList+0xac>)
 800f60e:	60fb      	str	r3, [r7, #12]
 800f610:	e002      	b.n	800f618 <prvInsertBlockIntoFreeList+0x14>
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	60fb      	str	r3, [r7, #12]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d8f7      	bhi.n	800f612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	68ba      	ldr	r2, [r7, #8]
 800f62c:	4413      	add	r3, r2
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	429a      	cmp	r2, r3
 800f632:	d108      	bne.n	800f646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	685a      	ldr	r2, [r3, #4]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	441a      	add	r2, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	441a      	add	r2, r3
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	429a      	cmp	r2, r3
 800f658:	d118      	bne.n	800f68c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	4b15      	ldr	r3, [pc, #84]	@ (800f6b4 <prvInsertBlockIntoFreeList+0xb0>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	429a      	cmp	r2, r3
 800f664:	d00d      	beq.n	800f682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	685a      	ldr	r2, [r3, #4]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	441a      	add	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	681a      	ldr	r2, [r3, #0]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	601a      	str	r2, [r3, #0]
 800f680:	e008      	b.n	800f694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f682:	4b0c      	ldr	r3, [pc, #48]	@ (800f6b4 <prvInsertBlockIntoFreeList+0xb0>)
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	e003      	b.n	800f694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d002      	beq.n	800f6a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6a2:	bf00      	nop
 800f6a4:	3714      	adds	r7, #20
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	24004ed8 	.word	0x24004ed8
 800f6b4:	24004ee0 	.word	0x24004ee0

0800f6b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	4913      	ldr	r1, [pc, #76]	@ (800f70c <MX_USB_DEVICE_Init+0x54>)
 800f6c0:	4813      	ldr	r0, [pc, #76]	@ (800f710 <MX_USB_DEVICE_Init+0x58>)
 800f6c2:	f7fb fecd 	bl	800b460 <USBD_Init>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f6cc:	f7f1 fc59 	bl	8000f82 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f6d0:	4910      	ldr	r1, [pc, #64]	@ (800f714 <MX_USB_DEVICE_Init+0x5c>)
 800f6d2:	480f      	ldr	r0, [pc, #60]	@ (800f710 <MX_USB_DEVICE_Init+0x58>)
 800f6d4:	f7fb fef4 	bl	800b4c0 <USBD_RegisterClass>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f6de:	f7f1 fc50 	bl	8000f82 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f6e2:	490d      	ldr	r1, [pc, #52]	@ (800f718 <MX_USB_DEVICE_Init+0x60>)
 800f6e4:	480a      	ldr	r0, [pc, #40]	@ (800f710 <MX_USB_DEVICE_Init+0x58>)
 800f6e6:	f7fb fdeb 	bl	800b2c0 <USBD_CDC_RegisterInterface>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f6f0:	f7f1 fc47 	bl	8000f82 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f6f4:	4806      	ldr	r0, [pc, #24]	@ (800f710 <MX_USB_DEVICE_Init+0x58>)
 800f6f6:	f7fb ff19 	bl	800b52c <USBD_Start>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f700:	f7f1 fc3f 	bl	8000f82 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f704:	f7f5 f8be 	bl	8004884 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f708:	bf00      	nop
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	240000b4 	.word	0x240000b4
 800f710:	24004ef8 	.word	0x24004ef8
 800f714:	2400001c 	.word	0x2400001c
 800f718:	240000a0 	.word	0x240000a0

0800f71c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f720:	2200      	movs	r2, #0
 800f722:	4905      	ldr	r1, [pc, #20]	@ (800f738 <CDC_Init_FS+0x1c>)
 800f724:	4805      	ldr	r0, [pc, #20]	@ (800f73c <CDC_Init_FS+0x20>)
 800f726:	f7fb fde5 	bl	800b2f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f72a:	4905      	ldr	r1, [pc, #20]	@ (800f740 <CDC_Init_FS+0x24>)
 800f72c:	4803      	ldr	r0, [pc, #12]	@ (800f73c <CDC_Init_FS+0x20>)
 800f72e:	f7fb fe03 	bl	800b338 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f734:	4618      	mov	r0, r3
 800f736:	bd80      	pop	{r7, pc}
 800f738:	240059d4 	.word	0x240059d4
 800f73c:	24004ef8 	.word	0x24004ef8
 800f740:	240051d4 	.word	0x240051d4

0800f744 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f744:	b480      	push	{r7}
 800f746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
 800f75a:	4603      	mov	r3, r0
 800f75c:	6039      	str	r1, [r7, #0]
 800f75e:	71fb      	strb	r3, [r7, #7]
 800f760:	4613      	mov	r3, r2
 800f762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	2b23      	cmp	r3, #35	@ 0x23
 800f768:	d84a      	bhi.n	800f800 <CDC_Control_FS+0xac>
 800f76a:	a201      	add	r2, pc, #4	@ (adr r2, 800f770 <CDC_Control_FS+0x1c>)
 800f76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f770:	0800f801 	.word	0x0800f801
 800f774:	0800f801 	.word	0x0800f801
 800f778:	0800f801 	.word	0x0800f801
 800f77c:	0800f801 	.word	0x0800f801
 800f780:	0800f801 	.word	0x0800f801
 800f784:	0800f801 	.word	0x0800f801
 800f788:	0800f801 	.word	0x0800f801
 800f78c:	0800f801 	.word	0x0800f801
 800f790:	0800f801 	.word	0x0800f801
 800f794:	0800f801 	.word	0x0800f801
 800f798:	0800f801 	.word	0x0800f801
 800f79c:	0800f801 	.word	0x0800f801
 800f7a0:	0800f801 	.word	0x0800f801
 800f7a4:	0800f801 	.word	0x0800f801
 800f7a8:	0800f801 	.word	0x0800f801
 800f7ac:	0800f801 	.word	0x0800f801
 800f7b0:	0800f801 	.word	0x0800f801
 800f7b4:	0800f801 	.word	0x0800f801
 800f7b8:	0800f801 	.word	0x0800f801
 800f7bc:	0800f801 	.word	0x0800f801
 800f7c0:	0800f801 	.word	0x0800f801
 800f7c4:	0800f801 	.word	0x0800f801
 800f7c8:	0800f801 	.word	0x0800f801
 800f7cc:	0800f801 	.word	0x0800f801
 800f7d0:	0800f801 	.word	0x0800f801
 800f7d4:	0800f801 	.word	0x0800f801
 800f7d8:	0800f801 	.word	0x0800f801
 800f7dc:	0800f801 	.word	0x0800f801
 800f7e0:	0800f801 	.word	0x0800f801
 800f7e4:	0800f801 	.word	0x0800f801
 800f7e8:	0800f801 	.word	0x0800f801
 800f7ec:	0800f801 	.word	0x0800f801
 800f7f0:	0800f801 	.word	0x0800f801
 800f7f4:	0800f801 	.word	0x0800f801
 800f7f8:	0800f801 	.word	0x0800f801
 800f7fc:	0800f801 	.word	0x0800f801
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f800:	bf00      	nop
  }

  return (USBD_OK);
 800f802:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f804:	4618      	mov	r0, r3
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f81a:	6879      	ldr	r1, [r7, #4]
 800f81c:	4805      	ldr	r0, [pc, #20]	@ (800f834 <CDC_Receive_FS+0x24>)
 800f81e:	f7fb fd8b 	bl	800b338 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f822:	4804      	ldr	r0, [pc, #16]	@ (800f834 <CDC_Receive_FS+0x24>)
 800f824:	f7fb fde6 	bl	800b3f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f828:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	24004ef8 	.word	0x24004ef8

0800f838 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	460b      	mov	r3, r1
 800f842:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f844:	2300      	movs	r3, #0
 800f846:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f848:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <CDC_Transmit_FS+0x48>)
 800f84a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f84e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f856:	2b00      	cmp	r3, #0
 800f858:	d001      	beq.n	800f85e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f85a:	2301      	movs	r3, #1
 800f85c:	e00b      	b.n	800f876 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f85e:	887b      	ldrh	r3, [r7, #2]
 800f860:	461a      	mov	r2, r3
 800f862:	6879      	ldr	r1, [r7, #4]
 800f864:	4806      	ldr	r0, [pc, #24]	@ (800f880 <CDC_Transmit_FS+0x48>)
 800f866:	f7fb fd45 	bl	800b2f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f86a:	4805      	ldr	r0, [pc, #20]	@ (800f880 <CDC_Transmit_FS+0x48>)
 800f86c:	f7fb fd82 	bl	800b374 <USBD_CDC_TransmitPacket>
 800f870:	4603      	mov	r3, r0
 800f872:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f874:	7bfb      	ldrb	r3, [r7, #15]
}
 800f876:	4618      	mov	r0, r3
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	24004ef8 	.word	0x24004ef8

0800f884 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f884:	b480      	push	{r7}
 800f886:	b087      	sub	sp, #28
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	4613      	mov	r3, r2
 800f890:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	371c      	adds	r7, #28
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
	...

0800f8a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	6039      	str	r1, [r7, #0]
 800f8b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	2212      	movs	r2, #18
 800f8b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f8ba:	4b03      	ldr	r3, [pc, #12]	@ (800f8c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	370c      	adds	r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr
 800f8c8:	240000d4 	.word	0x240000d4

0800f8cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	6039      	str	r1, [r7, #0]
 800f8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	2204      	movs	r2, #4
 800f8dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f8de:	4b03      	ldr	r3, [pc, #12]	@ (800f8ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	240000e8 	.word	0x240000e8

0800f8f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	6039      	str	r1, [r7, #0]
 800f8fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d105      	bne.n	800f90e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	4907      	ldr	r1, [pc, #28]	@ (800f924 <USBD_FS_ProductStrDescriptor+0x34>)
 800f906:	4808      	ldr	r0, [pc, #32]	@ (800f928 <USBD_FS_ProductStrDescriptor+0x38>)
 800f908:	f7fc ffea 	bl	800c8e0 <USBD_GetString>
 800f90c:	e004      	b.n	800f918 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	4904      	ldr	r1, [pc, #16]	@ (800f924 <USBD_FS_ProductStrDescriptor+0x34>)
 800f912:	4805      	ldr	r0, [pc, #20]	@ (800f928 <USBD_FS_ProductStrDescriptor+0x38>)
 800f914:	f7fc ffe4 	bl	800c8e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f918:	4b02      	ldr	r3, [pc, #8]	@ (800f924 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	240061d4 	.word	0x240061d4
 800f928:	08014a38 	.word	0x08014a38

0800f92c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	4603      	mov	r3, r0
 800f934:	6039      	str	r1, [r7, #0]
 800f936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	4904      	ldr	r1, [pc, #16]	@ (800f94c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f93c:	4804      	ldr	r0, [pc, #16]	@ (800f950 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f93e:	f7fc ffcf 	bl	800c8e0 <USBD_GetString>
  return USBD_StrDesc;
 800f942:	4b02      	ldr	r3, [pc, #8]	@ (800f94c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f944:	4618      	mov	r0, r3
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	240061d4 	.word	0x240061d4
 800f950:	08014a50 	.word	0x08014a50

0800f954 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4603      	mov	r3, r0
 800f95c:	6039      	str	r1, [r7, #0]
 800f95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	221a      	movs	r2, #26
 800f964:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f966:	f000 f843 	bl	800f9f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f96a:	4b02      	ldr	r3, [pc, #8]	@ (800f974 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	240000ec 	.word	0x240000ec

0800f978 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b082      	sub	sp, #8
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	4603      	mov	r3, r0
 800f980:	6039      	str	r1, [r7, #0]
 800f982:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f984:	79fb      	ldrb	r3, [r7, #7]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d105      	bne.n	800f996 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f98a:	683a      	ldr	r2, [r7, #0]
 800f98c:	4907      	ldr	r1, [pc, #28]	@ (800f9ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800f98e:	4808      	ldr	r0, [pc, #32]	@ (800f9b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f990:	f7fc ffa6 	bl	800c8e0 <USBD_GetString>
 800f994:	e004      	b.n	800f9a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f996:	683a      	ldr	r2, [r7, #0]
 800f998:	4904      	ldr	r1, [pc, #16]	@ (800f9ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800f99a:	4805      	ldr	r0, [pc, #20]	@ (800f9b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f99c:	f7fc ffa0 	bl	800c8e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9a0:	4b02      	ldr	r3, [pc, #8]	@ (800f9ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	240061d4 	.word	0x240061d4
 800f9b0:	08014a64 	.word	0x08014a64

0800f9b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	6039      	str	r1, [r7, #0]
 800f9be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f9c0:	79fb      	ldrb	r3, [r7, #7]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d105      	bne.n	800f9d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f9c6:	683a      	ldr	r2, [r7, #0]
 800f9c8:	4907      	ldr	r1, [pc, #28]	@ (800f9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f9ca:	4808      	ldr	r0, [pc, #32]	@ (800f9ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f9cc:	f7fc ff88 	bl	800c8e0 <USBD_GetString>
 800f9d0:	e004      	b.n	800f9dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f9d2:	683a      	ldr	r2, [r7, #0]
 800f9d4:	4904      	ldr	r1, [pc, #16]	@ (800f9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f9d6:	4805      	ldr	r0, [pc, #20]	@ (800f9ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f9d8:	f7fc ff82 	bl	800c8e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9dc:	4b02      	ldr	r3, [pc, #8]	@ (800f9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	240061d4 	.word	0x240061d4
 800f9ec:	08014a70 	.word	0x08014a70

0800f9f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800fa34 <Get_SerialNum+0x44>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f9fc:	4b0e      	ldr	r3, [pc, #56]	@ (800fa38 <Get_SerialNum+0x48>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fa02:	4b0e      	ldr	r3, [pc, #56]	@ (800fa3c <Get_SerialNum+0x4c>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d009      	beq.n	800fa2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fa16:	2208      	movs	r2, #8
 800fa18:	4909      	ldr	r1, [pc, #36]	@ (800fa40 <Get_SerialNum+0x50>)
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f000 f814 	bl	800fa48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fa20:	2204      	movs	r2, #4
 800fa22:	4908      	ldr	r1, [pc, #32]	@ (800fa44 <Get_SerialNum+0x54>)
 800fa24:	68b8      	ldr	r0, [r7, #8]
 800fa26:	f000 f80f 	bl	800fa48 <IntToUnicode>
  }
}
 800fa2a:	bf00      	nop
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	1ff1e800 	.word	0x1ff1e800
 800fa38:	1ff1e804 	.word	0x1ff1e804
 800fa3c:	1ff1e808 	.word	0x1ff1e808
 800fa40:	240000ee 	.word	0x240000ee
 800fa44:	240000fe 	.word	0x240000fe

0800fa48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b087      	sub	sp, #28
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	4613      	mov	r3, r2
 800fa54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	75fb      	strb	r3, [r7, #23]
 800fa5e:	e027      	b.n	800fab0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	0f1b      	lsrs	r3, r3, #28
 800fa64:	2b09      	cmp	r3, #9
 800fa66:	d80b      	bhi.n	800fa80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	0f1b      	lsrs	r3, r3, #28
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	7dfb      	ldrb	r3, [r7, #23]
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	4619      	mov	r1, r3
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	440b      	add	r3, r1
 800fa78:	3230      	adds	r2, #48	@ 0x30
 800fa7a:	b2d2      	uxtb	r2, r2
 800fa7c:	701a      	strb	r2, [r3, #0]
 800fa7e:	e00a      	b.n	800fa96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	0f1b      	lsrs	r3, r3, #28
 800fa84:	b2da      	uxtb	r2, r3
 800fa86:	7dfb      	ldrb	r3, [r7, #23]
 800fa88:	005b      	lsls	r3, r3, #1
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	440b      	add	r3, r1
 800fa90:	3237      	adds	r2, #55	@ 0x37
 800fa92:	b2d2      	uxtb	r2, r2
 800fa94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	011b      	lsls	r3, r3, #4
 800fa9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fa9c:	7dfb      	ldrb	r3, [r7, #23]
 800fa9e:	005b      	lsls	r3, r3, #1
 800faa0:	3301      	adds	r3, #1
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	4413      	add	r3, r2
 800faa6:	2200      	movs	r2, #0
 800faa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800faaa:	7dfb      	ldrb	r3, [r7, #23]
 800faac:	3301      	adds	r3, #1
 800faae:	75fb      	strb	r3, [r7, #23]
 800fab0:	7dfa      	ldrb	r2, [r7, #23]
 800fab2:	79fb      	ldrb	r3, [r7, #7]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d3d3      	bcc.n	800fa60 <IntToUnicode+0x18>
  }
}
 800fab8:	bf00      	nop
 800faba:	bf00      	nop
 800fabc:	371c      	adds	r7, #28
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr
	...

0800fac8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b0ba      	sub	sp, #232	@ 0xe8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fad0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fad4:	2200      	movs	r2, #0
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	605a      	str	r2, [r3, #4]
 800fada:	609a      	str	r2, [r3, #8]
 800fadc:	60da      	str	r2, [r3, #12]
 800fade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fae0:	f107 0310 	add.w	r3, r7, #16
 800fae4:	22c0      	movs	r2, #192	@ 0xc0
 800fae6:	2100      	movs	r1, #0
 800fae8:	4618      	mov	r0, r3
 800faea:	f002 fd1a 	bl	8012522 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4a2c      	ldr	r2, [pc, #176]	@ (800fba4 <HAL_PCD_MspInit+0xdc>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d151      	bne.n	800fb9c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800faf8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fafc:	f04f 0300 	mov.w	r3, #0
 800fb00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fb04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fb08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fb0c:	f107 0310 	add.w	r3, r7, #16
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7f5 fed9 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d001      	beq.n	800fb20 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800fb1c:	f7f1 fa31 	bl	8000f82 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fb20:	f7f4 feb0 	bl	8004884 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb24:	4b20      	ldr	r3, [pc, #128]	@ (800fba8 <HAL_PCD_MspInit+0xe0>)
 800fb26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fb2a:	4a1f      	ldr	r2, [pc, #124]	@ (800fba8 <HAL_PCD_MspInit+0xe0>)
 800fb2c:	f043 0301 	orr.w	r3, r3, #1
 800fb30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fb34:	4b1c      	ldr	r3, [pc, #112]	@ (800fba8 <HAL_PCD_MspInit+0xe0>)
 800fb36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fb3a:	f003 0301 	and.w	r3, r3, #1
 800fb3e:	60fb      	str	r3, [r7, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fb42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fb46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb4a:	2302      	movs	r3, #2
 800fb4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb50:	2300      	movs	r3, #0
 800fb52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb56:	2300      	movs	r3, #0
 800fb58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fb5c:	230a      	movs	r3, #10
 800fb5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb62:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fb66:	4619      	mov	r1, r3
 800fb68:	4810      	ldr	r0, [pc, #64]	@ (800fbac <HAL_PCD_MspInit+0xe4>)
 800fb6a:	f7f2 fb91 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fb6e:	4b0e      	ldr	r3, [pc, #56]	@ (800fba8 <HAL_PCD_MspInit+0xe0>)
 800fb70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fb74:	4a0c      	ldr	r2, [pc, #48]	@ (800fba8 <HAL_PCD_MspInit+0xe0>)
 800fb76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fb7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fb7e:	4b0a      	ldr	r3, [pc, #40]	@ (800fba8 <HAL_PCD_MspInit+0xe0>)
 800fb80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fb84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb88:	60bb      	str	r3, [r7, #8]
 800fb8a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	2105      	movs	r1, #5
 800fb90:	2065      	movs	r0, #101	@ 0x65
 800fb92:	f7f2 f88d 	bl	8001cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fb96:	2065      	movs	r0, #101	@ 0x65
 800fb98:	f7f2 f8a4 	bl	8001ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fb9c:	bf00      	nop
 800fb9e:	37e8      	adds	r7, #232	@ 0xe8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	40080000 	.word	0x40080000
 800fba8:	58024400 	.word	0x58024400
 800fbac:	58020000 	.word	0x58020000

0800fbb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	4610      	mov	r0, r2
 800fbc8:	f7fb fcfd 	bl	800b5c6 <USBD_LL_SetupStage>
}
 800fbcc:	bf00      	nop
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	460b      	mov	r3, r1
 800fbde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fbe6:	78fa      	ldrb	r2, [r7, #3]
 800fbe8:	6879      	ldr	r1, [r7, #4]
 800fbea:	4613      	mov	r3, r2
 800fbec:	00db      	lsls	r3, r3, #3
 800fbee:	4413      	add	r3, r2
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	440b      	add	r3, r1
 800fbf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	78fb      	ldrb	r3, [r7, #3]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	f7fb fd37 	bl	800b670 <USBD_LL_DataOutStage>
}
 800fc02:	bf00      	nop
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b082      	sub	sp, #8
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	6078      	str	r0, [r7, #4]
 800fc12:	460b      	mov	r3, r1
 800fc14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fc1c:	78fa      	ldrb	r2, [r7, #3]
 800fc1e:	6879      	ldr	r1, [r7, #4]
 800fc20:	4613      	mov	r3, r2
 800fc22:	00db      	lsls	r3, r3, #3
 800fc24:	4413      	add	r3, r2
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	440b      	add	r3, r1
 800fc2a:	3320      	adds	r3, #32
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	78fb      	ldrb	r3, [r7, #3]
 800fc30:	4619      	mov	r1, r3
 800fc32:	f7fb fdd0 	bl	800b7d6 <USBD_LL_DataInStage>
}
 800fc36:	bf00      	nop
 800fc38:	3708      	adds	r7, #8
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b082      	sub	sp, #8
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fb ff0a 	bl	800ba66 <USBD_LL_SOF>
}
 800fc52:	bf00      	nop
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fc62:	2301      	movs	r3, #1
 800fc64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	79db      	ldrb	r3, [r3, #7]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d102      	bne.n	800fc74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73fb      	strb	r3, [r7, #15]
 800fc72:	e008      	b.n	800fc86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	79db      	ldrb	r3, [r3, #7]
 800fc78:	2b02      	cmp	r3, #2
 800fc7a:	d102      	bne.n	800fc82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	73fb      	strb	r3, [r7, #15]
 800fc80:	e001      	b.n	800fc86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fc82:	f7f1 f97e 	bl	8000f82 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc8c:	7bfa      	ldrb	r2, [r7, #15]
 800fc8e:	4611      	mov	r1, r2
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fb fea4 	bl	800b9de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fb fe4c 	bl	800b93a <USBD_LL_Reset>
}
 800fca2:	bf00      	nop
 800fca4:	3710      	adds	r7, #16
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
	...

0800fcac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fb fe9f 	bl	800b9fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	6812      	ldr	r2, [r2, #0]
 800fcce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fcd2:	f043 0301 	orr.w	r3, r3, #1
 800fcd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	7adb      	ldrb	r3, [r3, #11]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d005      	beq.n	800fcec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fce0:	4b04      	ldr	r3, [pc, #16]	@ (800fcf4 <HAL_PCD_SuspendCallback+0x48>)
 800fce2:	691b      	ldr	r3, [r3, #16]
 800fce4:	4a03      	ldr	r2, [pc, #12]	@ (800fcf4 <HAL_PCD_SuspendCallback+0x48>)
 800fce6:	f043 0306 	orr.w	r3, r3, #6
 800fcea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	e000ed00 	.word	0xe000ed00

0800fcf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fb fe95 	bl	800ba36 <USBD_LL_Resume>
}
 800fd0c:	bf00      	nop
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd26:	78fa      	ldrb	r2, [r7, #3]
 800fd28:	4611      	mov	r1, r2
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fb feed 	bl	800bb0a <USBD_LL_IsoOUTIncomplete>
}
 800fd30:	bf00      	nop
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	460b      	mov	r3, r1
 800fd42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd4a:	78fa      	ldrb	r2, [r7, #3]
 800fd4c:	4611      	mov	r1, r2
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fb fea9 	bl	800baa6 <USBD_LL_IsoINIncomplete>
}
 800fd54:	bf00      	nop
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fb feff 	bl	800bb6e <USBD_LL_DevConnected>
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fb fefc 	bl	800bb84 <USBD_LL_DevDisconnected>
}
 800fd8c:	bf00      	nop
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d13e      	bne.n	800fe22 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fda4:	4a21      	ldr	r2, [pc, #132]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	4a1f      	ldr	r2, [pc, #124]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdb0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fdb4:	4b1d      	ldr	r3, [pc, #116]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdb6:	4a1e      	ldr	r2, [pc, #120]	@ (800fe30 <USBD_LL_Init+0x9c>)
 800fdb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fdba:	4b1c      	ldr	r3, [pc, #112]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdbc:	2209      	movs	r2, #9
 800fdbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fdc0:	4b1a      	ldr	r3, [pc, #104]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fdc6:	4b19      	ldr	r3, [pc, #100]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fdcc:	4b17      	ldr	r3, [pc, #92]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdce:	2202      	movs	r2, #2
 800fdd0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fdd2:	4b16      	ldr	r3, [pc, #88]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fdd8:	4b14      	ldr	r3, [pc, #80]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fdde:	4b13      	ldr	r3, [pc, #76]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fde4:	4b11      	ldr	r3, [pc, #68]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fde6:	2200      	movs	r2, #0
 800fde8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fdea:	4b10      	ldr	r3, [pc, #64]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fdf0:	4b0e      	ldr	r3, [pc, #56]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fdf6:	480d      	ldr	r0, [pc, #52]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fdf8:	f7f3 fa6b 	bl	80032d2 <HAL_PCD_Init>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800fe02:	f7f1 f8be 	bl	8000f82 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fe06:	2180      	movs	r1, #128	@ 0x80
 800fe08:	4808      	ldr	r0, [pc, #32]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fe0a:	f7f4 fcc0 	bl	800478e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fe0e:	2240      	movs	r2, #64	@ 0x40
 800fe10:	2100      	movs	r1, #0
 800fe12:	4806      	ldr	r0, [pc, #24]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fe14:	f7f4 fc74 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fe18:	2280      	movs	r2, #128	@ 0x80
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	4803      	ldr	r0, [pc, #12]	@ (800fe2c <USBD_LL_Init+0x98>)
 800fe1e:	f7f4 fc6f 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	240063d4 	.word	0x240063d4
 800fe30:	40080000 	.word	0x40080000

0800fe34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7f3 fb4d 	bl	80034ea <HAL_PCD_Start>
 800fe50:	4603      	mov	r3, r0
 800fe52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 f942 	bl	80100e0 <USBD_Get_USB_Status>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe60:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b084      	sub	sp, #16
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
 800fe72:	4608      	mov	r0, r1
 800fe74:	4611      	mov	r1, r2
 800fe76:	461a      	mov	r2, r3
 800fe78:	4603      	mov	r3, r0
 800fe7a:	70fb      	strb	r3, [r7, #3]
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	70bb      	strb	r3, [r7, #2]
 800fe80:	4613      	mov	r3, r2
 800fe82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe84:	2300      	movs	r3, #0
 800fe86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fe92:	78bb      	ldrb	r3, [r7, #2]
 800fe94:	883a      	ldrh	r2, [r7, #0]
 800fe96:	78f9      	ldrb	r1, [r7, #3]
 800fe98:	f7f4 f84e 	bl	8003f38 <HAL_PCD_EP_Open>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fea0:	7bfb      	ldrb	r3, [r7, #15]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f000 f91c 	bl	80100e0 <USBD_Get_USB_Status>
 800fea8:	4603      	mov	r3, r0
 800feaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feac:	7bbb      	ldrb	r3, [r7, #14]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3710      	adds	r7, #16
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800feb6:	b580      	push	{r7, lr}
 800feb8:	b084      	sub	sp, #16
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	460b      	mov	r3, r1
 800fec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fec2:	2300      	movs	r3, #0
 800fec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fec6:	2300      	movs	r3, #0
 800fec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fed0:	78fa      	ldrb	r2, [r7, #3]
 800fed2:	4611      	mov	r1, r2
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f4 f897 	bl	8004008 <HAL_PCD_EP_Close>
 800feda:	4603      	mov	r3, r0
 800fedc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fede:	7bfb      	ldrb	r3, [r7, #15]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f000 f8fd 	bl	80100e0 <USBD_Get_USB_Status>
 800fee6:	4603      	mov	r3, r0
 800fee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feea:	7bbb      	ldrb	r3, [r7, #14]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	460b      	mov	r3, r1
 800fefe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff00:	2300      	movs	r3, #0
 800ff02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff04:	2300      	movs	r3, #0
 800ff06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff0e:	78fa      	ldrb	r2, [r7, #3]
 800ff10:	4611      	mov	r1, r2
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7f4 f94f 	bl	80041b6 <HAL_PCD_EP_SetStall>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 f8de 	bl	80100e0 <USBD_Get_USB_Status>
 800ff24:	4603      	mov	r3, r0
 800ff26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b084      	sub	sp, #16
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff42:	2300      	movs	r3, #0
 800ff44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff4c:	78fa      	ldrb	r2, [r7, #3]
 800ff4e:	4611      	mov	r1, r2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7f4 f993 	bl	800427c <HAL_PCD_EP_ClrStall>
 800ff56:	4603      	mov	r3, r0
 800ff58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff5a:	7bfb      	ldrb	r3, [r7, #15]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 f8bf 	bl	80100e0 <USBD_Get_USB_Status>
 800ff62:	4603      	mov	r3, r0
 800ff64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b085      	sub	sp, #20
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	460b      	mov	r3, r1
 800ff7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ff82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ff84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	da0b      	bge.n	800ffa4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ff8c:	78fb      	ldrb	r3, [r7, #3]
 800ff8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff92:	68f9      	ldr	r1, [r7, #12]
 800ff94:	4613      	mov	r3, r2
 800ff96:	00db      	lsls	r3, r3, #3
 800ff98:	4413      	add	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	440b      	add	r3, r1
 800ff9e:	3316      	adds	r3, #22
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	e00b      	b.n	800ffbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ffa4:	78fb      	ldrb	r3, [r7, #3]
 800ffa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ffaa:	68f9      	ldr	r1, [r7, #12]
 800ffac:	4613      	mov	r3, r2
 800ffae:	00db      	lsls	r3, r3, #3
 800ffb0:	4413      	add	r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	440b      	add	r3, r1
 800ffb6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ffba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3714      	adds	r7, #20
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ffe2:	78fa      	ldrb	r2, [r7, #3]
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7f3 ff82 	bl	8003ef0 <HAL_PCD_SetAddress>
 800ffec:	4603      	mov	r3, r0
 800ffee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 f874 	bl	80100e0 <USBD_Get_USB_Status>
 800fff8:	4603      	mov	r3, r0
 800fffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fffc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b086      	sub	sp, #24
 801000a:	af00      	add	r7, sp, #0
 801000c:	60f8      	str	r0, [r7, #12]
 801000e:	607a      	str	r2, [r7, #4]
 8010010:	603b      	str	r3, [r7, #0]
 8010012:	460b      	mov	r3, r1
 8010014:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010016:	2300      	movs	r3, #0
 8010018:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801001a:	2300      	movs	r3, #0
 801001c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010024:	7af9      	ldrb	r1, [r7, #11]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	f7f4 f88a 	bl	8004142 <HAL_PCD_EP_Transmit>
 801002e:	4603      	mov	r3, r0
 8010030:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010032:	7dfb      	ldrb	r3, [r7, #23]
 8010034:	4618      	mov	r0, r3
 8010036:	f000 f853 	bl	80100e0 <USBD_Get_USB_Status>
 801003a:	4603      	mov	r3, r0
 801003c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801003e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3718      	adds	r7, #24
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b086      	sub	sp, #24
 801004c:	af00      	add	r7, sp, #0
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	607a      	str	r2, [r7, #4]
 8010052:	603b      	str	r3, [r7, #0]
 8010054:	460b      	mov	r3, r1
 8010056:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010058:	2300      	movs	r3, #0
 801005a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801005c:	2300      	movs	r3, #0
 801005e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010066:	7af9      	ldrb	r1, [r7, #11]
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	f7f4 f816 	bl	800409c <HAL_PCD_EP_Receive>
 8010070:	4603      	mov	r3, r0
 8010072:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010074:	7dfb      	ldrb	r3, [r7, #23]
 8010076:	4618      	mov	r0, r3
 8010078:	f000 f832 	bl	80100e0 <USBD_Get_USB_Status>
 801007c:	4603      	mov	r3, r0
 801007e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010080:	7dbb      	ldrb	r3, [r7, #22]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}

0801008a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801008a:	b580      	push	{r7, lr}
 801008c:	b082      	sub	sp, #8
 801008e:	af00      	add	r7, sp, #0
 8010090:	6078      	str	r0, [r7, #4]
 8010092:	460b      	mov	r3, r1
 8010094:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801009c:	78fa      	ldrb	r2, [r7, #3]
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7f4 f836 	bl	8004112 <HAL_PCD_EP_GetRxCount>
 80100a6:	4603      	mov	r3, r0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80100b8:	4b03      	ldr	r3, [pc, #12]	@ (80100c8 <USBD_static_malloc+0x18>)
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	370c      	adds	r7, #12
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	240068b8 	.word	0x240068b8

080100cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b085      	sub	sp, #20
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	4603      	mov	r3, r0
 80100e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ea:	2300      	movs	r3, #0
 80100ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	2b03      	cmp	r3, #3
 80100f2:	d817      	bhi.n	8010124 <USBD_Get_USB_Status+0x44>
 80100f4:	a201      	add	r2, pc, #4	@ (adr r2, 80100fc <USBD_Get_USB_Status+0x1c>)
 80100f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fa:	bf00      	nop
 80100fc:	0801010d 	.word	0x0801010d
 8010100:	08010113 	.word	0x08010113
 8010104:	08010119 	.word	0x08010119
 8010108:	0801011f 	.word	0x0801011f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801010c:	2300      	movs	r3, #0
 801010e:	73fb      	strb	r3, [r7, #15]
    break;
 8010110:	e00b      	b.n	801012a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010112:	2303      	movs	r3, #3
 8010114:	73fb      	strb	r3, [r7, #15]
    break;
 8010116:	e008      	b.n	801012a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010118:	2301      	movs	r3, #1
 801011a:	73fb      	strb	r3, [r7, #15]
    break;
 801011c:	e005      	b.n	801012a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801011e:	2303      	movs	r3, #3
 8010120:	73fb      	strb	r3, [r7, #15]
    break;
 8010122:	e002      	b.n	801012a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010124:	2303      	movs	r3, #3
 8010126:	73fb      	strb	r3, [r7, #15]
    break;
 8010128:	bf00      	nop
  }
  return usb_status;
 801012a:	7bfb      	ldrb	r3, [r7, #15]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3714      	adds	r7, #20
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 801013c:	2200      	movs	r2, #0
 801013e:	2108      	movs	r1, #8
 8010140:	480a      	ldr	r0, [pc, #40]	@ (801016c <ad7606_Init+0x34>)
 8010142:	f7f2 fa55 	bl	80025f0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010146:	2001      	movs	r0, #1
 8010148:	f7f1 fcca 	bl	8001ae0 <HAL_Delay>
    AD7606_RST_SET();
 801014c:	2201      	movs	r2, #1
 801014e:	2108      	movs	r1, #8
 8010150:	4806      	ldr	r0, [pc, #24]	@ (801016c <ad7606_Init+0x34>)
 8010152:	f7f2 fa4d 	bl	80025f0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010156:	2001      	movs	r0, #1
 8010158:	f7f1 fcc2 	bl	8001ae0 <HAL_Delay>
    AD7606_RST_RESET();
 801015c:	2200      	movs	r2, #0
 801015e:	2108      	movs	r1, #8
 8010160:	4802      	ldr	r0, [pc, #8]	@ (801016c <ad7606_Init+0x34>)
 8010162:	f7f2 fa45 	bl	80025f0 <HAL_GPIO_WritePin>
}
 8010166:	bf00      	nop
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	58021800 	.word	0x58021800

08010170 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	4613      	mov	r3, r2
 801017c:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 801017e:	2200      	movs	r2, #0
 8010180:	2180      	movs	r1, #128	@ 0x80
 8010182:	4809      	ldr	r0, [pc, #36]	@ (80101a8 <ad7606_Read+0x38>)
 8010184:	f7f2 fa34 	bl	80025f0 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 8010188:	88fa      	ldrh	r2, [r7, #6]
 801018a:	2364      	movs	r3, #100	@ 0x64
 801018c:	68b9      	ldr	r1, [r7, #8]
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f7f7 fa1a 	bl	80075c8 <HAL_SPI_Receive>
    AD7606_CS_SET();
 8010194:	2201      	movs	r2, #1
 8010196:	2180      	movs	r1, #128	@ 0x80
 8010198:	4803      	ldr	r0, [pc, #12]	@ (80101a8 <ad7606_Read+0x38>)
 801019a:	f7f2 fa29 	bl	80025f0 <HAL_GPIO_WritePin>
}
 801019e:	bf00      	nop
 80101a0:	3710      	adds	r7, #16
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	58021800 	.word	0x58021800

080101ac <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 80101b6:	6839      	ldr	r1, [r7, #0]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7f7 fe91 	bl	8007ee0 <HAL_TIM_PWM_Start>
}
 80101be:	bf00      	nop
 80101c0:	3708      	adds	r7, #8
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
	...

080101c8 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b087      	sub	sp, #28
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	460b      	mov	r3, r1
 80101d2:	607a      	str	r2, [r7, #4]
 80101d4:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 80101d6:	2300      	movs	r3, #0
 80101d8:	617b      	str	r3, [r7, #20]
 80101da:	e03d      	b.n	8010258 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	68fa      	ldr	r2, [r7, #12]
 80101e2:	4413      	add	r3, r2
 80101e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	da0f      	bge.n	801020c <ad7606_Convert+0x44>
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	005b      	lsls	r3, r3, #1
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	4413      	add	r3, r2
 80101f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	425b      	negs	r3, r3
 80101fc:	b29b      	uxth	r3, r3
 80101fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010202:	b29b      	uxth	r3, r3
 8010204:	425b      	negs	r3, r3
 8010206:	b29b      	uxth	r3, r3
 8010208:	b21b      	sxth	r3, r3
 801020a:	e005      	b.n	8010218 <ad7606_Convert+0x50>
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	4413      	add	r3, r2
 8010214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010218:	697a      	ldr	r2, [r7, #20]
 801021a:	0052      	lsls	r2, r2, #1
 801021c:	68f9      	ldr	r1, [r7, #12]
 801021e:	440a      	add	r2, r1
 8010220:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	4413      	add	r3, r2
 801022a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801022e:	ee07 3a90 	vmov	s15, r3
 8010232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010236:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801023a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	4413      	add	r3, r2
 8010246:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8010270 <ad7606_Convert+0xa8>
 801024a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801024e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	3301      	adds	r3, #1
 8010256:	617b      	str	r3, [r7, #20]
 8010258:	897b      	ldrh	r3, [r7, #10]
 801025a:	697a      	ldr	r2, [r7, #20]
 801025c:	429a      	cmp	r2, r3
 801025e:	dbbd      	blt.n	80101dc <ad7606_Convert+0x14>
    }
}
 8010260:	bf00      	nop
 8010262:	bf00      	nop
 8010264:	371c      	adds	r7, #28
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	47000000 	.word	0x47000000

08010274 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 8010274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010278:	b087      	sub	sp, #28
 801027a:	af00      	add	r7, sp, #0
 801027c:	60f8      	str	r0, [r7, #12]
 801027e:	460b      	mov	r3, r1
 8010280:	607a      	str	r2, [r7, #4]
 8010282:	817b      	strh	r3, [r7, #10]
 8010284:	466b      	mov	r3, sp
 8010286:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 8010288:	8979      	ldrh	r1, [r7, #10]
 801028a:	460b      	mov	r3, r1
 801028c:	3b01      	subs	r3, #1
 801028e:	617b      	str	r3, [r7, #20]
 8010290:	b28b      	uxth	r3, r1
 8010292:	2200      	movs	r2, #0
 8010294:	4698      	mov	r8, r3
 8010296:	4691      	mov	r9, r2
 8010298:	f04f 0200 	mov.w	r2, #0
 801029c:	f04f 0300 	mov.w	r3, #0
 80102a0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80102a4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80102a8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80102ac:	b28b      	uxth	r3, r1
 80102ae:	2200      	movs	r2, #0
 80102b0:	461c      	mov	r4, r3
 80102b2:	4615      	mov	r5, r2
 80102b4:	f04f 0200 	mov.w	r2, #0
 80102b8:	f04f 0300 	mov.w	r3, #0
 80102bc:	012b      	lsls	r3, r5, #4
 80102be:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80102c2:	0122      	lsls	r2, r4, #4
 80102c4:	460b      	mov	r3, r1
 80102c6:	005b      	lsls	r3, r3, #1
 80102c8:	3307      	adds	r3, #7
 80102ca:	08db      	lsrs	r3, r3, #3
 80102cc:	00db      	lsls	r3, r3, #3
 80102ce:	ebad 0d03 	sub.w	sp, sp, r3
 80102d2:	466b      	mov	r3, sp
 80102d4:	3301      	adds	r3, #1
 80102d6:	085b      	lsrs	r3, r3, #1
 80102d8:	005b      	lsls	r3, r3, #1
 80102da:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 80102dc:	897b      	ldrh	r3, [r7, #10]
 80102de:	461a      	mov	r2, r3
 80102e0:	6939      	ldr	r1, [r7, #16]
 80102e2:	68f8      	ldr	r0, [r7, #12]
 80102e4:	f7ff ff44 	bl	8010170 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 80102e8:	897b      	ldrh	r3, [r7, #10]
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	4619      	mov	r1, r3
 80102ee:	6938      	ldr	r0, [r7, #16]
 80102f0:	f7ff ff6a 	bl	80101c8 <ad7606_Convert>
 80102f4:	46b5      	mov	sp, r6
}
 80102f6:	bf00      	nop
 80102f8:	371c      	adds	r7, #28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010300 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b088      	sub	sp, #32
 8010304:	af04      	add	r7, sp, #16
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	70fb      	strb	r3, [r7, #3]
 801030c:	4613      	mov	r3, r2
 801030e:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8010310:	2300      	movs	r3, #0
 8010312:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8010314:	883b      	ldrh	r3, [r7, #0]
 8010316:	0a1b      	lsrs	r3, r3, #8
 8010318:	b29b      	uxth	r3, r3
 801031a:	b2db      	uxtb	r3, r3
 801031c:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 801031e:	883b      	ldrh	r3, [r7, #0]
 8010320:	b2db      	uxtb	r3, r3
 8010322:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	69d8      	ldr	r0, [r3, #28]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801032e:	4619      	mov	r1, r3
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	b29a      	uxth	r2, r3
 8010334:	2364      	movs	r3, #100	@ 0x64
 8010336:	9302      	str	r3, [sp, #8]
 8010338:	2302      	movs	r3, #2
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	f107 030c 	add.w	r3, r7, #12
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	2301      	movs	r3, #1
 8010344:	f7f2 fa3e 	bl	80027c4 <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 8010348:	78fb      	ldrb	r3, [r7, #3]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d105      	bne.n	801035a <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 801034e:	883b      	ldrh	r3, [r7, #0]
 8010350:	f003 0310 	and.w	r3, r3, #16
 8010354:	b29a      	uxth	r2, r3
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	82da      	strh	r2, [r3, #22]
	}
}
 801035a:	bf00      	nop
 801035c:	3710      	adds	r7, #16
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b082      	sub	sp, #8
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	881b      	ldrh	r3, [r3, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	2100      	movs	r1, #0
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff ffc4 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	885b      	ldrh	r3, [r3, #2]
 801037c:	461a      	mov	r2, r3
 801037e:	2101      	movs	r1, #1
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7ff ffbd 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	889b      	ldrh	r3, [r3, #4]
 801038a:	461a      	mov	r2, r3
 801038c:	2102      	movs	r1, #2
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff ffb6 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	88db      	ldrh	r3, [r3, #6]
 8010398:	461a      	mov	r2, r3
 801039a:	2103      	movs	r1, #3
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff ffaf 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	891b      	ldrh	r3, [r3, #8]
 80103a6:	461a      	mov	r2, r3
 80103a8:	210b      	movs	r1, #11
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7ff ffa8 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	895b      	ldrh	r3, [r3, #10]
 80103b4:	461a      	mov	r2, r3
 80103b6:	210c      	movs	r1, #12
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7ff ffa1 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	899b      	ldrh	r3, [r3, #12]
 80103c2:	461a      	mov	r2, r3
 80103c4:	210d      	movs	r1, #13
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7ff ff9a 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	89db      	ldrh	r3, [r3, #14]
 80103d0:	461a      	mov	r2, r3
 80103d2:	210e      	movs	r1, #14
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7ff ff93 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8a1b      	ldrh	r3, [r3, #16]
 80103de:	461a      	mov	r2, r3
 80103e0:	210f      	movs	r1, #15
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7ff ff8c 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	8a5b      	ldrh	r3, [r3, #18]
 80103ec:	461a      	mov	r2, r3
 80103ee:	2110      	movs	r1, #16
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f7ff ff85 	bl	8010300 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	8a9b      	ldrh	r3, [r3, #20]
 80103fa:	461a      	mov	r2, r3
 80103fc:	2111      	movs	r1, #17
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f7ff ff7e 	bl	8010300 <INA228_writeReg>
}
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 801040c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010410:	b08c      	sub	sp, #48	@ 0x30
 8010412:	af04      	add	r7, sp, #16
 8010414:	6078      	str	r0, [r7, #4]
 8010416:	460b      	mov	r3, r1
 8010418:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 801041a:	2300      	movs	r3, #0
 801041c:	60fb      	str	r3, [r7, #12]
 801041e:	2300      	movs	r3, #0
 8010420:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010428:	4618      	mov	r0, r3
 801042a:	78fb      	ldrb	r3, [r7, #3]
 801042c:	b29a      	uxth	r2, r3
 801042e:	78fb      	ldrb	r3, [r7, #3]
 8010430:	4921      	ldr	r1, [pc, #132]	@ (80104b8 <INA228_readReg+0xac>)
 8010432:	5ccb      	ldrb	r3, [r1, r3]
 8010434:	4619      	mov	r1, r3
 8010436:	2364      	movs	r3, #100	@ 0x64
 8010438:	9302      	str	r3, [sp, #8]
 801043a:	9101      	str	r1, [sp, #4]
 801043c:	f107 030c 	add.w	r3, r7, #12
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	2301      	movs	r3, #1
 8010444:	4601      	mov	r1, r0
 8010446:	481d      	ldr	r0, [pc, #116]	@ (80104bc <INA228_readReg+0xb0>)
 8010448:	f7f2 fad0 	bl	80029ec <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 801044c:	7b3b      	ldrb	r3, [r7, #12]
 801044e:	b2db      	uxtb	r3, r3
 8010450:	2200      	movs	r2, #0
 8010452:	469a      	mov	sl, r3
 8010454:	4693      	mov	fp, r2
 8010456:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 801045a:	2301      	movs	r3, #1
 801045c:	617b      	str	r3, [r7, #20]
 801045e:	e01b      	b.n	8010498 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 8010460:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010464:	f04f 0200 	mov.w	r2, #0
 8010468:	f04f 0300 	mov.w	r3, #0
 801046c:	020b      	lsls	r3, r1, #8
 801046e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010472:	0202      	lsls	r2, r0, #8
 8010474:	f107 000c 	add.w	r0, r7, #12
 8010478:	6979      	ldr	r1, [r7, #20]
 801047a:	4401      	add	r1, r0
 801047c:	7809      	ldrb	r1, [r1, #0]
 801047e:	b2c9      	uxtb	r1, r1
 8010480:	2000      	movs	r0, #0
 8010482:	460c      	mov	r4, r1
 8010484:	4605      	mov	r5, r0
 8010486:	ea42 0804 	orr.w	r8, r2, r4
 801048a:	ea43 0905 	orr.w	r9, r3, r5
 801048e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	3301      	adds	r3, #1
 8010496:	617b      	str	r3, [r7, #20]
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	4a07      	ldr	r2, [pc, #28]	@ (80104b8 <INA228_readReg+0xac>)
 801049c:	5cd3      	ldrb	r3, [r2, r3]
 801049e:	461a      	mov	r2, r3
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	4293      	cmp	r3, r2
 80104a4:	dbdc      	blt.n	8010460 <INA228_readReg+0x54>
	}

	return value;
 80104a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80104aa:	4610      	mov	r0, r2
 80104ac:	4619      	mov	r1, r3
 80104ae:	3720      	adds	r7, #32
 80104b0:	46bd      	mov	sp, r7
 80104b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80104b6:	bf00      	nop
 80104b8:	08014b20 	.word	0x08014b20
 80104bc:	24000354 	.word	0x24000354

080104c0 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b086      	sub	sp, #24
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 80104c8:	2105      	movs	r1, #5
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7ff ff9e 	bl	801040c <INA228_readReg>
 80104d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 80104d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80104d8:	f04f 0200 	mov.w	r2, #0
 80104dc:	f04f 0300 	mov.w	r3, #0
 80104e0:	0902      	lsrs	r2, r0, #4
 80104e2:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80104e6:	090b      	lsrs	r3, r1, #4
 80104e8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 80104ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80104f0:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80104f4:	f173 0300 	sbcs.w	r3, r3, #0
 80104f8:	d30c      	bcc.n	8010514 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 80104fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80104fe:	f7f0 f80f 	bl	8000520 <__aeabi_ul2f>
 8010502:	ee07 0a10 	vmov	s14, r0
 8010506:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010548 <INA228_getVBUS_V+0x88>
 801050a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801050e:	edc7 7a05 	vstr	s15, [r7, #20]
 8010512:	e005      	b.n	8010520 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 8010514:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010518:	f7f0 f802 	bl	8000520 <__aeabi_ul2f>
 801051c:	4603      	mov	r3, r0
 801051e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 8010520:	edd7 7a05 	vldr	s15, [r7, #20]
 8010524:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801054c <INA228_getVBUS_V+0x8c>
 8010528:	ee27 7a87 	vmul.f32	s14, s15, s14
 801052c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8010550 <INA228_getVBUS_V+0x90>
 8010530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010534:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	ee07 3a90 	vmov	s15, r3
}
 801053e:	eeb0 0a67 	vmov.f32	s0, s15
 8010542:	3718      	adds	r7, #24
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	49800000 	.word	0x49800000
 801054c:	43435000 	.word	0x43435000
 8010550:	49742400 	.word	0x49742400

08010554 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b086      	sub	sp, #24
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 801055c:	2107      	movs	r1, #7
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7ff ff54 	bl	801040c <INA228_readReg>
 8010564:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010568:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801056c:	f04f 0200 	mov.w	r2, #0
 8010570:	f04f 0300 	mov.w	r3, #0
 8010574:	0902      	lsrs	r2, r0, #4
 8010576:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801057a:	090b      	lsrs	r3, r1, #4
 801057c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 8010580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010584:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010588:	f173 0300 	sbcs.w	r3, r3, #0
 801058c:	d30c      	bcc.n	80105a8 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 801058e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010592:	f7ef ffc5 	bl	8000520 <__aeabi_ul2f>
 8010596:	ee07 0a10 	vmov	s14, r0
 801059a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80105c4 <INA228_getCURRENT_signedLSB+0x70>
 801059e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105a2:	edc7 7a05 	vstr	s15, [r7, #20]
 80105a6:	e005      	b.n	80105b4 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 80105a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80105ac:	f7ef ffb8 	bl	8000520 <__aeabi_ul2f>
 80105b0:	4603      	mov	r3, r0
 80105b2:	617b      	str	r3, [r7, #20]
	}

	return data;
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	ee07 3a90 	vmov	s15, r3
}
 80105ba:	eeb0 0a67 	vmov.f32	s0, s15
 80105be:	3718      	adds	r7, #24
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	49800000 	.word	0x49800000

080105c8 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f7ff ffbf 	bl	8010554 <INA228_getCURRENT_signedLSB>
 80105d6:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80105e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80105e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105e8:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	ee07 3a90 	vmov	s15, r3
}
 80105f2:	eeb0 0a67 	vmov.f32	s0, s15
 80105f6:	3710      	adds	r7, #16
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	4603      	mov	r3, r0
 8010604:	460a      	mov	r2, r1
 8010606:	71fb      	strb	r3, [r7, #7]
 8010608:	4613      	mov	r3, r2
 801060a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 801060c:	1dfb      	adds	r3, r7, #7
 801060e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 8010610:	79bb      	ldrb	r3, [r7, #6]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d005      	beq.n	8010622 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 8010616:	2201      	movs	r2, #1
 8010618:	2140      	movs	r1, #64	@ 0x40
 801061a:	4811      	ldr	r0, [pc, #68]	@ (8010660 <OLED_WR_Byte+0x64>)
 801061c:	f7f1 ffe8 	bl	80025f0 <HAL_GPIO_WritePin>
 8010620:	e004      	b.n	801062c <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 8010622:	2200      	movs	r2, #0
 8010624:	2140      	movs	r1, #64	@ 0x40
 8010626:	480e      	ldr	r0, [pc, #56]	@ (8010660 <OLED_WR_Byte+0x64>)
 8010628:	f7f1 ffe2 	bl	80025f0 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 801062c:	2200      	movs	r2, #0
 801062e:	2102      	movs	r1, #2
 8010630:	480c      	ldr	r0, [pc, #48]	@ (8010664 <OLED_WR_Byte+0x68>)
 8010632:	f7f1 ffdd 	bl	80025f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 8010636:	23c8      	movs	r3, #200	@ 0xc8
 8010638:	2201      	movs	r2, #1
 801063a:	68f9      	ldr	r1, [r7, #12]
 801063c:	480a      	ldr	r0, [pc, #40]	@ (8010668 <OLED_WR_Byte+0x6c>)
 801063e:	f7f6 fdd5 	bl	80071ec <HAL_SPI_Transmit>

	OLED_CS_Set();
 8010642:	2201      	movs	r2, #1
 8010644:	2102      	movs	r1, #2
 8010646:	4807      	ldr	r0, [pc, #28]	@ (8010664 <OLED_WR_Byte+0x68>)
 8010648:	f7f1 ffd2 	bl	80025f0 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 801064c:	2201      	movs	r2, #1
 801064e:	2140      	movs	r1, #64	@ 0x40
 8010650:	4803      	ldr	r0, [pc, #12]	@ (8010660 <OLED_WR_Byte+0x64>)
 8010652:	f7f1 ffcd 	bl	80025f0 <HAL_GPIO_WritePin>
}
 8010656:	bf00      	nop
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	58022000 	.word	0x58022000
 8010664:	58020400 	.word	0x58020400
 8010668:	240003a8 	.word	0x240003a8

0801066c <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010672:	2300      	movs	r3, #0
 8010674:	71fb      	strb	r3, [r7, #7]
 8010676:	e026      	b.n	80106c6 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 8010678:	79fb      	ldrb	r3, [r7, #7]
 801067a:	3b50      	subs	r3, #80	@ 0x50
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2100      	movs	r1, #0
 8010680:	4618      	mov	r0, r3
 8010682:	f7ff ffbb 	bl	80105fc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 8010686:	2100      	movs	r1, #0
 8010688:	2000      	movs	r0, #0
 801068a:	f7ff ffb7 	bl	80105fc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 801068e:	2100      	movs	r1, #0
 8010690:	2010      	movs	r0, #16
 8010692:	f7ff ffb3 	bl	80105fc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010696:	2300      	movs	r3, #0
 8010698:	71bb      	strb	r3, [r7, #6]
 801069a:	e00d      	b.n	80106b8 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 801069c:	79ba      	ldrb	r2, [r7, #6]
 801069e:	79fb      	ldrb	r3, [r7, #7]
 80106a0:	490d      	ldr	r1, [pc, #52]	@ (80106d8 <OLED_Refresh+0x6c>)
 80106a2:	00d2      	lsls	r2, r2, #3
 80106a4:	440a      	add	r2, r1
 80106a6:	4413      	add	r3, r2
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	2101      	movs	r1, #1
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7ff ffa5 	bl	80105fc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80106b2:	79bb      	ldrb	r3, [r7, #6]
 80106b4:	3301      	adds	r3, #1
 80106b6:	71bb      	strb	r3, [r7, #6]
 80106b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	daed      	bge.n	801069c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 80106c0:	79fb      	ldrb	r3, [r7, #7]
 80106c2:	3301      	adds	r3, #1
 80106c4:	71fb      	strb	r3, [r7, #7]
 80106c6:	79fb      	ldrb	r3, [r7, #7]
 80106c8:	2b07      	cmp	r3, #7
 80106ca:	d9d5      	bls.n	8010678 <OLED_Refresh+0xc>
	}
}
 80106cc:	bf00      	nop
 80106ce:	bf00      	nop
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	24006ad8 	.word	0x24006ad8

080106dc <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 80106e2:	2300      	movs	r3, #0
 80106e4:	71fb      	strb	r3, [r7, #7]
 80106e6:	e014      	b.n	8010712 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 80106e8:	2300      	movs	r3, #0
 80106ea:	71bb      	strb	r3, [r7, #6]
 80106ec:	e00a      	b.n	8010704 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 80106ee:	79ba      	ldrb	r2, [r7, #6]
 80106f0:	79fb      	ldrb	r3, [r7, #7]
 80106f2:	490c      	ldr	r1, [pc, #48]	@ (8010724 <OLED_Clear+0x48>)
 80106f4:	00d2      	lsls	r2, r2, #3
 80106f6:	440a      	add	r2, r1
 80106f8:	4413      	add	r3, r2
 80106fa:	2200      	movs	r2, #0
 80106fc:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 80106fe:	79bb      	ldrb	r3, [r7, #6]
 8010700:	3301      	adds	r3, #1
 8010702:	71bb      	strb	r3, [r7, #6]
 8010704:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010708:	2b00      	cmp	r3, #0
 801070a:	daf0      	bge.n	80106ee <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 801070c:	79fb      	ldrb	r3, [r7, #7]
 801070e:	3301      	adds	r3, #1
 8010710:	71fb      	strb	r3, [r7, #7]
 8010712:	79fb      	ldrb	r3, [r7, #7]
 8010714:	2b07      	cmp	r3, #7
 8010716:	d9e7      	bls.n	80106e8 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8010718:	f7ff ffa8 	bl	801066c <OLED_Refresh>
}
 801071c:	bf00      	nop
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	24006ad8 	.word	0x24006ad8

08010728 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	460a      	mov	r2, r1
 8010732:	71fb      	strb	r3, [r7, #7]
 8010734:	4613      	mov	r3, r2
 8010736:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010738:	79bb      	ldrb	r3, [r7, #6]
 801073a:	08db      	lsrs	r3, r3, #3
 801073c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 801073e:	79bb      	ldrb	r3, [r7, #6]
 8010740:	f003 0307 	and.w	r3, r3, #7
 8010744:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010746:	7bbb      	ldrb	r3, [r7, #14]
 8010748:	2201      	movs	r2, #1
 801074a:	fa02 f303 	lsl.w	r3, r2, r3
 801074e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 8010750:	79fa      	ldrb	r2, [r7, #7]
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	490a      	ldr	r1, [pc, #40]	@ (8010780 <OLED_DrawPoint+0x58>)
 8010756:	00d2      	lsls	r2, r2, #3
 8010758:	440a      	add	r2, r1
 801075a:	4413      	add	r3, r2
 801075c:	7818      	ldrb	r0, [r3, #0]
 801075e:	79fa      	ldrb	r2, [r7, #7]
 8010760:	7bfb      	ldrb	r3, [r7, #15]
 8010762:	7b79      	ldrb	r1, [r7, #13]
 8010764:	4301      	orrs	r1, r0
 8010766:	b2c8      	uxtb	r0, r1
 8010768:	4905      	ldr	r1, [pc, #20]	@ (8010780 <OLED_DrawPoint+0x58>)
 801076a:	00d2      	lsls	r2, r2, #3
 801076c:	440a      	add	r2, r1
 801076e:	4413      	add	r3, r2
 8010770:	4602      	mov	r2, r0
 8010772:	701a      	strb	r2, [r3, #0]
}
 8010774:	bf00      	nop
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr
 8010780:	24006ad8 	.word	0x24006ad8

08010784 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	460a      	mov	r2, r1
 801078e:	71fb      	strb	r3, [r7, #7]
 8010790:	4613      	mov	r3, r2
 8010792:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010794:	79bb      	ldrb	r3, [r7, #6]
 8010796:	08db      	lsrs	r3, r3, #3
 8010798:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 801079a:	79bb      	ldrb	r3, [r7, #6]
 801079c:	f003 0307 	and.w	r3, r3, #7
 80107a0:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 80107a2:	7bbb      	ldrb	r3, [r7, #14]
 80107a4:	2201      	movs	r2, #1
 80107a6:	fa02 f303 	lsl.w	r3, r2, r3
 80107aa:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 80107ac:	79fa      	ldrb	r2, [r7, #7]
 80107ae:	7bfb      	ldrb	r3, [r7, #15]
 80107b0:	491b      	ldr	r1, [pc, #108]	@ (8010820 <OLED_ClearPoint+0x9c>)
 80107b2:	00d2      	lsls	r2, r2, #3
 80107b4:	440a      	add	r2, r1
 80107b6:	4413      	add	r3, r2
 80107b8:	7819      	ldrb	r1, [r3, #0]
 80107ba:	79fa      	ldrb	r2, [r7, #7]
 80107bc:	7bfb      	ldrb	r3, [r7, #15]
 80107be:	43c9      	mvns	r1, r1
 80107c0:	b2c8      	uxtb	r0, r1
 80107c2:	4917      	ldr	r1, [pc, #92]	@ (8010820 <OLED_ClearPoint+0x9c>)
 80107c4:	00d2      	lsls	r2, r2, #3
 80107c6:	440a      	add	r2, r1
 80107c8:	4413      	add	r3, r2
 80107ca:	4602      	mov	r2, r0
 80107cc:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 80107ce:	79fa      	ldrb	r2, [r7, #7]
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
 80107d2:	4913      	ldr	r1, [pc, #76]	@ (8010820 <OLED_ClearPoint+0x9c>)
 80107d4:	00d2      	lsls	r2, r2, #3
 80107d6:	440a      	add	r2, r1
 80107d8:	4413      	add	r3, r2
 80107da:	7818      	ldrb	r0, [r3, #0]
 80107dc:	79fa      	ldrb	r2, [r7, #7]
 80107de:	7bfb      	ldrb	r3, [r7, #15]
 80107e0:	7b79      	ldrb	r1, [r7, #13]
 80107e2:	4301      	orrs	r1, r0
 80107e4:	b2c8      	uxtb	r0, r1
 80107e6:	490e      	ldr	r1, [pc, #56]	@ (8010820 <OLED_ClearPoint+0x9c>)
 80107e8:	00d2      	lsls	r2, r2, #3
 80107ea:	440a      	add	r2, r1
 80107ec:	4413      	add	r3, r2
 80107ee:	4602      	mov	r2, r0
 80107f0:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 80107f2:	79fa      	ldrb	r2, [r7, #7]
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	490a      	ldr	r1, [pc, #40]	@ (8010820 <OLED_ClearPoint+0x9c>)
 80107f8:	00d2      	lsls	r2, r2, #3
 80107fa:	440a      	add	r2, r1
 80107fc:	4413      	add	r3, r2
 80107fe:	7819      	ldrb	r1, [r3, #0]
 8010800:	79fa      	ldrb	r2, [r7, #7]
 8010802:	7bfb      	ldrb	r3, [r7, #15]
 8010804:	43c9      	mvns	r1, r1
 8010806:	b2c8      	uxtb	r0, r1
 8010808:	4905      	ldr	r1, [pc, #20]	@ (8010820 <OLED_ClearPoint+0x9c>)
 801080a:	00d2      	lsls	r2, r2, #3
 801080c:	440a      	add	r2, r1
 801080e:	4413      	add	r3, r2
 8010810:	4602      	mov	r2, r0
 8010812:	701a      	strb	r2, [r3, #0]
}
 8010814:	bf00      	nop
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr
 8010820:	24006ad8 	.word	0x24006ad8

08010824 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8010824:	b590      	push	{r4, r7, lr}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	4604      	mov	r4, r0
 801082c:	4608      	mov	r0, r1
 801082e:	4611      	mov	r1, r2
 8010830:	461a      	mov	r2, r3
 8010832:	4623      	mov	r3, r4
 8010834:	71fb      	strb	r3, [r7, #7]
 8010836:	4603      	mov	r3, r0
 8010838:	71bb      	strb	r3, [r7, #6]
 801083a:	460b      	mov	r3, r1
 801083c:	717b      	strb	r3, [r7, #5]
 801083e:	4613      	mov	r3, r2
 8010840:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 8010842:	79bb      	ldrb	r3, [r7, #6]
 8010844:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 8010846:	793b      	ldrb	r3, [r7, #4]
 8010848:	08db      	lsrs	r3, r3, #3
 801084a:	b2db      	uxtb	r3, r3
 801084c:	461a      	mov	r2, r3
 801084e:	793b      	ldrb	r3, [r7, #4]
 8010850:	f003 0307 	and.w	r3, r3, #7
 8010854:	b2db      	uxtb	r3, r3
 8010856:	2b00      	cmp	r3, #0
 8010858:	bf14      	ite	ne
 801085a:	2301      	movne	r3, #1
 801085c:	2300      	moveq	r3, #0
 801085e:	b2db      	uxtb	r3, r3
 8010860:	4413      	add	r3, r2
 8010862:	b2da      	uxtb	r2, r3
 8010864:	793b      	ldrb	r3, [r7, #4]
 8010866:	085b      	lsrs	r3, r3, #1
 8010868:	b2db      	uxtb	r3, r3
 801086a:	fb12 f303 	smulbb	r3, r2, r3
 801086e:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 8010870:	797b      	ldrb	r3, [r7, #5]
 8010872:	3b20      	subs	r3, #32
 8010874:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 8010876:	2300      	movs	r3, #0
 8010878:	73fb      	strb	r3, [r7, #15]
 801087a:	e057      	b.n	801092c <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 801087c:	793b      	ldrb	r3, [r7, #4]
 801087e:	2b0c      	cmp	r3, #12
 8010880:	d10b      	bne.n	801089a <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 8010882:	7aba      	ldrb	r2, [r7, #10]
 8010884:	7bf9      	ldrb	r1, [r7, #15]
 8010886:	482e      	ldr	r0, [pc, #184]	@ (8010940 <OLED_ShowChar+0x11c>)
 8010888:	4613      	mov	r3, r2
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	4413      	add	r3, r2
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	4403      	add	r3, r0
 8010892:	440b      	add	r3, r1
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	737b      	strb	r3, [r7, #13]
 8010898:	e019      	b.n	80108ce <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 801089a:	793b      	ldrb	r3, [r7, #4]
 801089c:	2b10      	cmp	r3, #16
 801089e:	d108      	bne.n	80108b2 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 80108a0:	7aba      	ldrb	r2, [r7, #10]
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	4927      	ldr	r1, [pc, #156]	@ (8010944 <OLED_ShowChar+0x120>)
 80108a6:	0112      	lsls	r2, r2, #4
 80108a8:	440a      	add	r2, r1
 80108aa:	4413      	add	r3, r2
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	737b      	strb	r3, [r7, #13]
 80108b0:	e00d      	b.n	80108ce <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 80108b2:	793b      	ldrb	r3, [r7, #4]
 80108b4:	2b18      	cmp	r3, #24
 80108b6:	d13e      	bne.n	8010936 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 80108b8:	7aba      	ldrb	r2, [r7, #10]
 80108ba:	7bf9      	ldrb	r1, [r7, #15]
 80108bc:	4822      	ldr	r0, [pc, #136]	@ (8010948 <OLED_ShowChar+0x124>)
 80108be:	4613      	mov	r3, r2
 80108c0:	00db      	lsls	r3, r3, #3
 80108c2:	4413      	add	r3, r2
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	4403      	add	r3, r0
 80108c8:	440b      	add	r3, r1
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 80108ce:	2300      	movs	r3, #0
 80108d0:	73bb      	strb	r3, [r7, #14]
 80108d2:	e025      	b.n	8010920 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 80108d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	da06      	bge.n	80108ea <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 80108dc:	79ba      	ldrb	r2, [r7, #6]
 80108de:	79fb      	ldrb	r3, [r7, #7]
 80108e0:	4611      	mov	r1, r2
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff ff20 	bl	8010728 <OLED_DrawPoint>
 80108e8:	e005      	b.n	80108f6 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 80108ea:	79ba      	ldrb	r2, [r7, #6]
 80108ec:	79fb      	ldrb	r3, [r7, #7]
 80108ee:	4611      	mov	r1, r2
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7ff ff47 	bl	8010784 <OLED_ClearPoint>
			temp <<= 1;
 80108f6:	7b7b      	ldrb	r3, [r7, #13]
 80108f8:	005b      	lsls	r3, r3, #1
 80108fa:	737b      	strb	r3, [r7, #13]
			y++;
 80108fc:	79bb      	ldrb	r3, [r7, #6]
 80108fe:	3301      	adds	r3, #1
 8010900:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010902:	79ba      	ldrb	r2, [r7, #6]
 8010904:	7b3b      	ldrb	r3, [r7, #12]
 8010906:	1ad2      	subs	r2, r2, r3
 8010908:	793b      	ldrb	r3, [r7, #4]
 801090a:	429a      	cmp	r2, r3
 801090c:	d105      	bne.n	801091a <OLED_ShowChar+0xf6>
			{
				y = y0;
 801090e:	7b3b      	ldrb	r3, [r7, #12]
 8010910:	71bb      	strb	r3, [r7, #6]
				x++;
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	3301      	adds	r3, #1
 8010916:	71fb      	strb	r3, [r7, #7]
				break;
 8010918:	e005      	b.n	8010926 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 801091a:	7bbb      	ldrb	r3, [r7, #14]
 801091c:	3301      	adds	r3, #1
 801091e:	73bb      	strb	r3, [r7, #14]
 8010920:	7bbb      	ldrb	r3, [r7, #14]
 8010922:	2b07      	cmp	r3, #7
 8010924:	d9d6      	bls.n	80108d4 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010926:	7bfb      	ldrb	r3, [r7, #15]
 8010928:	3301      	adds	r3, #1
 801092a:	73fb      	strb	r3, [r7, #15]
 801092c:	7bfa      	ldrb	r2, [r7, #15]
 801092e:	7afb      	ldrb	r3, [r7, #11]
 8010930:	429a      	cmp	r2, r3
 8010932:	d3a3      	bcc.n	801087c <OLED_ShowChar+0x58>
 8010934:	e000      	b.n	8010938 <OLED_ShowChar+0x114>
			return;
 8010936:	bf00      	nop
			}
		}
	}
}
 8010938:	3714      	adds	r7, #20
 801093a:	46bd      	mov	sp, r7
 801093c:	bd90      	pop	{r4, r7, pc}
 801093e:	bf00      	nop
 8010940:	08014b60 	.word	0x08014b60
 8010944:	08014fd4 	.word	0x08014fd4
 8010948:	080155c4 	.word	0x080155c4

0801094c <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	603a      	str	r2, [r7, #0]
 8010954:	461a      	mov	r2, r3
 8010956:	4603      	mov	r3, r0
 8010958:	71fb      	strb	r3, [r7, #7]
 801095a:	460b      	mov	r3, r1
 801095c:	71bb      	strb	r3, [r7, #6]
 801095e:	4613      	mov	r3, r2
 8010960:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010962:	e01b      	b.n	801099c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	781a      	ldrb	r2, [r3, #0]
 8010968:	797b      	ldrb	r3, [r7, #5]
 801096a:	79b9      	ldrb	r1, [r7, #6]
 801096c:	79f8      	ldrb	r0, [r7, #7]
 801096e:	f7ff ff59 	bl	8010824 <OLED_ShowChar>
		x += size1 / 2;
 8010972:	797b      	ldrb	r3, [r7, #5]
 8010974:	085b      	lsrs	r3, r3, #1
 8010976:	b2da      	uxtb	r2, r3
 8010978:	79fb      	ldrb	r3, [r7, #7]
 801097a:	4413      	add	r3, r2
 801097c:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 801097e:	79fa      	ldrb	r2, [r7, #7]
 8010980:	797b      	ldrb	r3, [r7, #5]
 8010982:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010986:	429a      	cmp	r2, r3
 8010988:	dd05      	ble.n	8010996 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 801098a:	2302      	movs	r3, #2
 801098c:	71fb      	strb	r3, [r7, #7]
			y += size1;
 801098e:	79ba      	ldrb	r2, [r7, #6]
 8010990:	797b      	ldrb	r3, [r7, #5]
 8010992:	4413      	add	r3, r2
 8010994:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	3301      	adds	r3, #1
 801099a:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	2b1f      	cmp	r3, #31
 80109a2:	d903      	bls.n	80109ac <OLED_ShowString+0x60>
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80109aa:	d9db      	bls.n	8010964 <OLED_ShowString+0x18>
	}
}
 80109ac:	bf00      	nop
 80109ae:	3708      	adds	r7, #8
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 80109b8:	2200      	movs	r2, #0
 80109ba:	2120      	movs	r1, #32
 80109bc:	483f      	ldr	r0, [pc, #252]	@ (8010abc <OLED_Init+0x108>)
 80109be:	f7f1 fe17 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80109c2:	20c8      	movs	r0, #200	@ 0xc8
 80109c4:	f7f1 f88c 	bl	8001ae0 <HAL_Delay>
	OLED_RES_Set();
 80109c8:	2201      	movs	r2, #1
 80109ca:	2120      	movs	r1, #32
 80109cc:	483b      	ldr	r0, [pc, #236]	@ (8010abc <OLED_Init+0x108>)
 80109ce:	f7f1 fe0f 	bl	80025f0 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 80109d2:	2100      	movs	r1, #0
 80109d4:	20ae      	movs	r0, #174	@ 0xae
 80109d6:	f7ff fe11 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 80109da:	2100      	movs	r1, #0
 80109dc:	2000      	movs	r0, #0
 80109de:	f7ff fe0d 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 80109e2:	2100      	movs	r1, #0
 80109e4:	2010      	movs	r0, #16
 80109e6:	f7ff fe09 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80109ea:	2100      	movs	r1, #0
 80109ec:	2040      	movs	r0, #64	@ 0x40
 80109ee:	f7ff fe05 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 80109f2:	2100      	movs	r1, #0
 80109f4:	2081      	movs	r0, #129	@ 0x81
 80109f6:	f7ff fe01 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 80109fa:	2100      	movs	r1, #0
 80109fc:	20cf      	movs	r0, #207	@ 0xcf
 80109fe:	f7ff fdfd 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010a02:	2100      	movs	r1, #0
 8010a04:	20a1      	movs	r0, #161	@ 0xa1
 8010a06:	f7ff fdf9 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	20c8      	movs	r0, #200	@ 0xc8
 8010a0e:	f7ff fdf5 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010a12:	2100      	movs	r1, #0
 8010a14:	20a6      	movs	r0, #166	@ 0xa6
 8010a16:	f7ff fdf1 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	20a8      	movs	r0, #168	@ 0xa8
 8010a1e:	f7ff fded 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010a22:	2100      	movs	r1, #0
 8010a24:	203f      	movs	r0, #63	@ 0x3f
 8010a26:	f7ff fde9 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010a2a:	2100      	movs	r1, #0
 8010a2c:	20d3      	movs	r0, #211	@ 0xd3
 8010a2e:	f7ff fde5 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010a32:	2100      	movs	r1, #0
 8010a34:	2000      	movs	r0, #0
 8010a36:	f7ff fde1 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	20d5      	movs	r0, #213	@ 0xd5
 8010a3e:	f7ff fddd 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8010a42:	2100      	movs	r1, #0
 8010a44:	2080      	movs	r0, #128	@ 0x80
 8010a46:	f7ff fdd9 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	20d9      	movs	r0, #217	@ 0xd9
 8010a4e:	f7ff fdd5 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8010a52:	2100      	movs	r1, #0
 8010a54:	20f1      	movs	r0, #241	@ 0xf1
 8010a56:	f7ff fdd1 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	20da      	movs	r0, #218	@ 0xda
 8010a5e:	f7ff fdcd 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8010a62:	2100      	movs	r1, #0
 8010a64:	2012      	movs	r0, #18
 8010a66:	f7ff fdc9 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	20db      	movs	r0, #219	@ 0xdb
 8010a6e:	f7ff fdc5 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8010a72:	2100      	movs	r1, #0
 8010a74:	2040      	movs	r0, #64	@ 0x40
 8010a76:	f7ff fdc1 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	2020      	movs	r0, #32
 8010a7e:	f7ff fdbd 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8010a82:	2100      	movs	r1, #0
 8010a84:	2002      	movs	r0, #2
 8010a86:	f7ff fdb9 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010a8a:	2100      	movs	r1, #0
 8010a8c:	208d      	movs	r0, #141	@ 0x8d
 8010a8e:	f7ff fdb5 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8010a92:	2100      	movs	r1, #0
 8010a94:	2014      	movs	r0, #20
 8010a96:	f7ff fdb1 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	20a4      	movs	r0, #164	@ 0xa4
 8010a9e:	f7ff fdad 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	20a6      	movs	r0, #166	@ 0xa6
 8010aa6:	f7ff fda9 	bl	80105fc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010aaa:	2100      	movs	r1, #0
 8010aac:	20af      	movs	r0, #175	@ 0xaf
 8010aae:	f7ff fda5 	bl	80105fc <OLED_WR_Byte>
	OLED_Clear();
 8010ab2:	f7ff fe13 	bl	80106dc <OLED_Clear>
}
 8010ab6:	bf00      	nop
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	58020800 	.word	0x58020800

08010ac0 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b087      	sub	sp, #28
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6178      	str	r0, [r7, #20]
 8010ac8:	ed87 0a04 	vstr	s0, [r7, #16]
 8010acc:	edc7 0a03 	vstr	s1, [r7, #12]
 8010ad0:	ed87 1a02 	vstr	s2, [r7, #8]
 8010ad4:	edc7 1a01 	vstr	s3, [r7, #4]
 8010ad8:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	693a      	ldr	r2, [r7, #16]
 8010ae0:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	68ba      	ldr	r2, [r7, #8]
 8010aec:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	683a      	ldr	r2, [r7, #0]
 8010af8:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f04f 0200 	mov.w	r2, #0
 8010b00:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	f04f 0200 	mov.w	r2, #0
 8010b08:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	f04f 0200 	mov.w	r2, #0
 8010b10:	615a      	str	r2, [r3, #20]
}
 8010b12:	bf00      	nop
 8010b14:	371c      	adds	r7, #28
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 8010b1e:	b480      	push	{r7}
 8010b20:	b085      	sub	sp, #20
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	60f8      	str	r0, [r7, #12]
 8010b26:	ed87 0a02 	vstr	s0, [r7, #8]
 8010b2a:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 8010b2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8010b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8010b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	ed93 7a06 	vldr	s14, [r3, #24]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	edd3 6a00 	vldr	s13, [r3]
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	ed93 6a03 	vldr	s12, [r3, #12]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	edd3 7a04 	vldr	s15, [r3, #16]
 8010b58:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010b5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	ed93 6a01 	vldr	s12, [r3, #4]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	edd3 7a03 	vldr	s15, [r3, #12]
 8010b6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010b70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	ed93 6a02 	vldr	s12, [r3, #8]
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	edd3 5a03 	vldr	s11, [r3, #12]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	edd3 7a04 	vldr	s15, [r3, #16]
 8010b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010b8a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	edd3 7a05 	vldr	s15, [r3, #20]
 8010b94:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010b98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	691a      	ldr	r2, [r3, #16]
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	68da      	ldr	r2, [r3, #12]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	ed93 7a06 	vldr	s14, [r3, #24]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8010bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	dd04      	ble.n	8010bda <pid+0xbc>
		pid->out = pid->Max;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	69da      	ldr	r2, [r3, #28]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 8010bd8:	e00f      	b.n	8010bfa <pid+0xdc>
	else if (pid->out < pid->Min)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	ed93 7a06 	vldr	s14, [r3, #24]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	edd3 7a08 	vldr	s15, [r3, #32]
 8010be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bee:	d400      	bmi.n	8010bf2 <pid+0xd4>
}
 8010bf0:	e003      	b.n	8010bfa <pid+0xdc>
		pid->out = pid->Min;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6a1a      	ldr	r2, [r3, #32]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	619a      	str	r2, [r3, #24]
}
 8010bfa:	bf00      	nop
 8010bfc:	3714      	adds	r7, #20
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c04:	4770      	bx	lr
	...

08010c08 <svpwm_Control>:
 * @brief  SVPWM控制
 * @param  signal PLL信号输入结构体指针
 * @param  Udc 直流母线电压
 */
void svpwm_Control(pll_Signal_V *signal, float Udc)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b095      	sub	sp, #84	@ 0x54
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	ed87 0a00 	vstr	s0, [r7]
    // 电压标幺化
    float Ts = signal->basic->Ts;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6a1b      	ldr	r3, [r3, #32]
 8010c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    float Ubase = Udc / 1.7320508f;                     // 基础电压
 8010c1c:	ed97 7a00 	vldr	s14, [r7]
 8010c20:	eddf 6adb 	vldr	s13, [pc, #876]	@ 8010f90 <svpwm_Control+0x388>
 8010c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010c28:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float Ualpha = signal->basic->clarke_alpha / Ubase; // 标幺化Clarke变换后的α轴电压
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	edd3 6a03 	vldr	s13, [r3, #12]
 8010c34:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c3c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float Ubeta = signal->basic->clarke_beta / Ubase;   // 标幺化Clarke变换后的β轴电压
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	edd3 6a04 	vldr	s13, [r3, #16]
 8010c48:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c50:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // 计算中间变量
    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 8010c54:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8010c58:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 8010f90 <svpwm_Control+0x388>
 8010c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c60:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c68:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float Ubeta_ = Ubeta * Ts;
 8010c6c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010c70:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // 计算XYZ
    float X = Ubeta_;
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7e:	623b      	str	r3, [r7, #32]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 8010c80:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010c84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010c88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010c8c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010c90:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010c94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c9c:	edc7 7a07 	vstr	s15, [r7, #28]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 8010ca0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010ca4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010ca8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010cac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010cb0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010cb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cbc:	edc7 7a06 	vstr	s15, [r7, #24]

    // 通过XYZ做扇区判断
    uint8_t sector = 0;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (Y < 0)
 8010cc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8010cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd2:	d517      	bpl.n	8010d04 <svpwm_Control+0xfc>
    {
        if (Z < 0)
 8010cd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8010cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	d503      	bpl.n	8010cea <svpwm_Control+0xe2>
            sector = 5;
 8010ce2:	2305      	movs	r3, #5
 8010ce4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010ce8:	e023      	b.n	8010d32 <svpwm_Control+0x12a>
        else
            sector = (X < 0) ? 4 : 3;
 8010cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8010cee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf6:	d501      	bpl.n	8010cfc <svpwm_Control+0xf4>
 8010cf8:	2304      	movs	r3, #4
 8010cfa:	e000      	b.n	8010cfe <svpwm_Control+0xf6>
 8010cfc:	2303      	movs	r3, #3
 8010cfe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010d02:	e016      	b.n	8010d32 <svpwm_Control+0x12a>
    }
    else
    {
        if (Z > 0)
 8010d04:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d10:	dd03      	ble.n	8010d1a <svpwm_Control+0x112>
            sector = 2;
 8010d12:	2302      	movs	r3, #2
 8010d14:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010d18:	e00b      	b.n	8010d32 <svpwm_Control+0x12a>
        else
            sector = (X < 0) ? 6 : 1;
 8010d1a:	edd7 7a08 	vldr	s15, [r7, #32]
 8010d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d26:	d501      	bpl.n	8010d2c <svpwm_Control+0x124>
 8010d28:	2306      	movs	r3, #6
 8010d2a:	e000      	b.n	8010d2e <svpwm_Control+0x126>
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 8010d32:	f04f 0300 	mov.w	r3, #0
 8010d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d38:	f04f 0300 	mov.w	r3, #0
 8010d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d3e:	f04f 0300 	mov.w	r3, #0
 8010d42:	643b      	str	r3, [r7, #64]	@ 0x40
    switch (sector)
 8010d44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	2b05      	cmp	r3, #5
 8010d4c:	f200 80f0 	bhi.w	8010f30 <svpwm_Control+0x328>
 8010d50:	a201      	add	r2, pc, #4	@ (adr r2, 8010d58 <svpwm_Control+0x150>)
 8010d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d56:	bf00      	nop
 8010d58:	08010d71 	.word	0x08010d71
 8010d5c:	08010dbb 	.word	0x08010dbb
 8010d60:	08010e05 	.word	0x08010e05
 8010d64:	08010e4f 	.word	0x08010e4f
 8010d68:	08010e99 	.word	0x08010e99
 8010d6c:	08010ee7 	.word	0x08010ee7
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 8010d70:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010d74:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010d7c:	edd7 6a08 	vldr	s13, [r7, #32]
 8010d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010d88:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010d8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d94:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8010d98:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010d9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8010da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010da4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010da8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010dac:	edd7 7a08 	vldr	s15, [r7, #32]
 8010db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010db4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010db8:	e0ba      	b.n	8010f30 <svpwm_Control+0x328>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 8010dba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010dbe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010dc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010dc6:	edd7 6a06 	vldr	s13, [r7, #24]
 8010dca:	edd7 7a07 	vldr	s15, [r7, #28]
 8010dce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010dd2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010dd6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dde:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 8010de2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010de6:	edd7 7a06 	vldr	s15, [r7, #24]
 8010dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dee:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 8010df2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010df6:	edd7 7a07 	vldr	s15, [r7, #28]
 8010dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dfe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010e02:	e095      	b.n	8010f30 <svpwm_Control+0x328>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 8010e04:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010e08:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010e0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010e10:	edd7 6a08 	vldr	s13, [r7, #32]
 8010e14:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010e1c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010e20:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e28:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010e2c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010e30:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e38:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8010e3c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010e40:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e48:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 8010e4c:	e070      	b.n	8010f30 <svpwm_Control+0x328>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 8010e4e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010e52:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010e56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010e5a:	edd7 6a06 	vldr	s13, [r7, #24]
 8010e5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010e66:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010e6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e72:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 8010e76:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010e7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8010e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e82:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 8010e86:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010e8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8010e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e92:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 8010e96:	e04b      	b.n	8010f30 <svpwm_Control+0x328>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 8010e98:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010e9c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010ea0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010ea4:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ea8:	eef1 6a67 	vneg.f32	s13, s15
 8010eac:	edd7 7a06 	vldr	s15, [r7, #24]
 8010eb0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010eb4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010eb8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ec0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8010ec4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010ec8:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ed0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8010ed4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010ed8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ee0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 8010ee4:	e024      	b.n	8010f30 <svpwm_Control+0x328>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 8010ee6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010eea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010eee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ef6:	edd7 7a08 	vldr	s15, [r7, #32]
 8010efa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010efe:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010f02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f0a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 8010f0e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f1a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 8010f1e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8010f22:	edd7 7a08 	vldr	s15, [r7, #32]
 8010f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f2a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 8010f2e:	bf00      	nop
    }

    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 8010f30:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8010f34:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f3c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8010f94 <svpwm_Control+0x38c>
 8010f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f48:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8010f4c:	60fb      	str	r3, [r7, #12]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 8010f4e:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8010f52:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f5a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010f94 <svpwm_Control+0x38c>
 8010f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f66:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8010f6a:	613b      	str	r3, [r7, #16]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 8010f6c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8010f70:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f78:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8010f94 <svpwm_Control+0x38c>
 8010f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f84:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8010f88:	617b      	str	r3, [r7, #20]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f8e:	e018      	b.n	8010fc2 <svpwm_Control+0x3ba>
 8010f90:	3fddb3d7 	.word	0x3fddb3d7
 8010f94:	45bb7800 	.word	0x45bb7800
    {
        if (ccr[i] > TIM_PERIOD)
 8010f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	3350      	adds	r3, #80	@ 0x50
 8010f9e:	443b      	add	r3, r7
 8010fa0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010fa4:	f241 726f 	movw	r2, #5999	@ 0x176f
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d907      	bls.n	8010fbc <svpwm_Control+0x3b4>
        {
            ccr[i] = TIM_PERIOD;
 8010fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fae:	009b      	lsls	r3, r3, #2
 8010fb0:	3350      	adds	r3, #80	@ 0x50
 8010fb2:	443b      	add	r3, r7
 8010fb4:	f241 726f 	movw	r2, #5999	@ 0x176f
 8010fb8:	f843 2c44 	str.w	r2, [r3, #-68]
    for (int i = 0; i < 3; ++i)
 8010fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fc4:	2b02      	cmp	r3, #2
 8010fc6:	dde7      	ble.n	8010f98 <svpwm_Control+0x390>
            ccr[i] = 0;
        }
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 8010fc8:	4a07      	ldr	r2, [pc, #28]	@ (8010fe8 <svpwm_Control+0x3e0>)
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 8010fce:	4a06      	ldr	r2, [pc, #24]	@ (8010fe8 <svpwm_Control+0x3e0>)
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 8010fd4:	4a04      	ldr	r2, [pc, #16]	@ (8010fe8 <svpwm_Control+0x3e0>)
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8010fda:	bf00      	nop
 8010fdc:	3754      	adds	r7, #84	@ 0x54
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop
 8010fe8:	40010000 	.word	0x40010000
 8010fec:	00000000 	.word	0x00000000

08010ff0 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F, float Umax)
{
 8010ff0:	b590      	push	{r4, r7, lr}
 8010ff2:	b087      	sub	sp, #28
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	ed87 0a02 	vstr	s0, [r7, #8]
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	edc7 0a00 	vstr	s1, [r7]
 8011002:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 8011004:	200c      	movs	r0, #12
 8011006:	f000 fc79 	bl	80118fc <malloc>
 801100a:	4603      	mov	r3, r0
 801100c:	461a      	mov	r2, r3
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681c      	ldr	r4, [r3, #0]
 8011016:	2044      	movs	r0, #68	@ 0x44
 8011018:	f000 fc70 	bl	80118fc <malloc>
 801101c:	4603      	mov	r3, r0
 801101e:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681c      	ldr	r4, [r3, #0]
 8011024:	2024      	movs	r0, #36	@ 0x24
 8011026:	f000 fc69 	bl	80118fc <malloc>
 801102a:	4603      	mov	r3, r0
 801102c:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f04f 0200 	mov.w	r2, #0
 8011038:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f04f 0200 	mov.w	r2, #0
 8011044:	605a      	str	r2, [r3, #4]

    (*signal)->theta = 0.f;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f04f 0200 	mov.w	r2, #0
 801104e:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	edd7 7a02 	vldr	s15, [r7, #8]
 801105a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8011110 <pll_Init_V+0x120>
 801105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011062:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 8011066:	88fb      	ldrh	r3, [r7, #6]
 8011068:	ee07 3a90 	vmov	s15, r3
 801106c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801107a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801107e:	edc3 7a08 	vstr	s15, [r3, #32]
    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0 / Umax;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	ed93 7a07 	vldr	s14, [r3, #28]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	edd3 7a07 	vldr	s15, [r3, #28]
 8011096:	ee67 6a27 	vmul.f32	s13, s14, s15
 801109a:	ed97 7a00 	vldr	s14, [r7]
 801109e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110a2:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 80110a6:	ed97 7a00 	vldr	s14, [r7]
 80110aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80110ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80110b6:	eeb0 0b47 	vmov.f64	d0, d7
 80110ba:	f003 f9fd 	bl	80144b8 <sqrt>
 80110be:	eeb0 7b40 	vmov.f64	d7, d0
 80110c2:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8011108 <pll_Init_V+0x118>
 80110c6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80110ca:	edd7 7a00 	vldr	s15, [r7]
 80110ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80110d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80110d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80110da:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	689b      	ldr	r3, [r3, #8]
 80110e4:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 8011114 <pll_Init_V+0x124>
 80110e8:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 8011118 <pll_Init_V+0x128>
 80110ec:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 801111c <pll_Init_V+0x12c>
 80110f0:	edd7 0a05 	vldr	s1, [r7, #20]
 80110f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7ff fce1 	bl	8010ac0 <pid_Init>
}
 80110fe:	bf00      	nop
 8011100:	371c      	adds	r7, #28
 8011102:	46bd      	mov	sp, r7
 8011104:	bd90      	pop	{r4, r7, pc}
 8011106:	bf00      	nop
 8011108:	667f3bcd 	.word	0x667f3bcd
 801110c:	3ff6a09e 	.word	0x3ff6a09e
 8011110:	40c90fdb 	.word	0x40c90fdb
 8011114:	c27b53d2 	.word	0xc27b53d2
 8011118:	431d1463 	.word	0x431d1463
 801111c:	00000000 	.word	0x00000000

08011120 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 8011120:	b590      	push	{r4, r7, lr}
 8011122:	b085      	sub	sp, #20
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	ed87 0a02 	vstr	s0, [r7, #8]
 801112c:	460b      	mov	r3, r1
 801112e:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 8011130:	2028      	movs	r0, #40	@ 0x28
 8011132:	f000 fbe3 	bl	80118fc <malloc>
 8011136:	4603      	mov	r3, r0
 8011138:	461a      	mov	r2, r3
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681c      	ldr	r4, [r3, #0]
 8011142:	2044      	movs	r0, #68	@ 0x44
 8011144:	f000 fbda 	bl	80118fc <malloc>
 8011148:	4603      	mov	r3, r0
 801114a:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681c      	ldr	r4, [r3, #0]
 8011150:	2024      	movs	r0, #36	@ 0x24
 8011152:	f000 fbd3 	bl	80118fc <malloc>
 8011156:	4603      	mov	r3, r0
 8011158:	6223      	str	r3, [r4, #32]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681c      	ldr	r4, [r3, #0]
 801115e:	2024      	movs	r0, #36	@ 0x24
 8011160:	f000 fbcc 	bl	80118fc <malloc>
 8011164:	4603      	mov	r3, r0
 8011166:	6263      	str	r3, [r4, #36]	@ 0x24
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f04f 0200 	mov.w	r2, #0
 8011172:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f04f 0200 	mov.w	r2, #0
 801117e:	605a      	str	r2, [r3, #4]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	edd7 7a02 	vldr	s15, [r7, #8]
 801118a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801120c <pll_Init_I+0xec>
 801118e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011192:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 8011196:	88fb      	ldrh	r3, [r7, #6]
 8011198:	ee07 3a90 	vmov	s15, r3
 801119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80111aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111ae:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->CorL = 0;    // 0:感性 1:容性
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2200      	movs	r2, #0
 80111b8:	761a      	strb	r2, [r3, #24]
    (*signal)->L = 0.0043f; // 4.3mH
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	4a14      	ldr	r2, [pc, #80]	@ (8011210 <pll_Init_I+0xf0>)
 80111c0:	61da      	str	r2, [r3, #28]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 0.5f, 0.01f, 0, -80.f, -160.f);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	6a1b      	ldr	r3, [r3, #32]
 80111c8:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8011214 <pll_Init_I+0xf4>
 80111cc:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8011218 <pll_Init_I+0xf8>
 80111d0:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 801121c <pll_Init_I+0xfc>
 80111d4:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8011220 <pll_Init_I+0x100>
 80111d8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff fc6f 	bl	8010ac0 <pid_Init>
    pid_Init((*signal)->pid_q, 0.5f, 0.01f, 0, 20.f, -10.f);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e8:	eeba 2a04 	vmov.f32	s4, #164	@ 0xc1200000 -10.0
 80111ec:	eef3 1a04 	vmov.f32	s3, #52	@ 0x41a00000  20.0
 80111f0:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 801121c <pll_Init_I+0xfc>
 80111f4:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8011220 <pll_Init_I+0x100>
 80111f8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7ff fc5f 	bl	8010ac0 <pid_Init>
}
 8011202:	bf00      	nop
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	bd90      	pop	{r4, r7, pc}
 801120a:	bf00      	nop
 801120c:	40c90fdb 	.word	0x40c90fdb
 8011210:	3b8ce704 	.word	0x3b8ce704
 8011214:	c3200000 	.word	0xc3200000
 8011218:	c2a00000 	.word	0xc2a00000
 801121c:	00000000 	.word	0x00000000
 8011220:	3c23d70a 	.word	0x3c23d70a
 8011224:	00000000 	.word	0x00000000

08011228 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 8011228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122c:	ed2d 8b02 	vpush	{d8}
 8011230:	b08c      	sub	sp, #48	@ 0x30
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_V->basic->input_a, signal_V->basic->input_b, &signal_V->basic->clarke_alpha, &signal_V->basic->clarke_beta);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	6818      	ldr	r0, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6859      	ldr	r1, [r3, #4]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f103 020c 	add.w	r2, r3, #12
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	3310      	adds	r3, #16
 8011250:	6178      	str	r0, [r7, #20]
 8011252:	6139      	str	r1, [r7, #16]
 8011254:	60fa      	str	r2, [r7, #12]
 8011256:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	697a      	ldr	r2, [r7, #20]
 801125c:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 801125e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011262:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80113a8 <pll_Control_V+0x180>
 8011266:	ee27 7a87 	vmul.f32	s14, s15, s14
 801126a:	edd7 7a04 	vldr	s15, [r7, #16]
 801126e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80113ac <pll_Control_V+0x184>
 8011272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011276:	ee77 7a27 	vadd.f32	s15, s14, s15
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	edc3 7a00 	vstr	s15, [r3]
  }
 8011280:	bf00      	nop
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	691e      	ldr	r6, [r3, #16]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f103 0514 	add.w	r5, r3, #20
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f103 0418 	add.w	r4, r3, #24
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80112a6:	eeb0 0a67 	vmov.f32	s0, s15
 80112aa:	f000 fa97 	bl	80117dc <arm_sin_f32>
 80112ae:	eeb0 8a40 	vmov.f32	s16, s0
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80112b8:	eeb0 0a67 	vmov.f32	s0, s15
 80112bc:	f000 fad4 	bl	8011868 <arm_cos_f32>
 80112c0:	eef0 7a40 	vmov.f32	s15, s0
 80112c4:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 80112c8:	62be      	str	r6, [r7, #40]	@ 0x28
 80112ca:	627d      	str	r5, [r7, #36]	@ 0x24
 80112cc:	623c      	str	r4, [r7, #32]
 80112ce:	ed87 8a07 	vstr	s16, [r7, #28]
 80112d2:	edc7 7a06 	vstr	s15, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80112d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80112da:	edd7 7a06 	vldr	s15, [r7, #24]
 80112de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112e2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80112e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80112ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f4:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80112f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80112fc:	eeb1 7a67 	vneg.f32	s14, s15
 8011300:	edd7 7a07 	vldr	s15, [r7, #28]
 8011304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011308:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801130c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	edc3 7a00 	vstr	s15, [r3]
  }
 801131e:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	689a      	ldr	r2, [r3, #8]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	edd3 7a06 	vldr	s15, [r3, #24]
 801132c:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80113b0 <pll_Control_V+0x188>
 8011330:	eeb0 0a67 	vmov.f32	s0, s15
 8011334:	4610      	mov	r0, r2
 8011336:	f7ff fbf2 	bl	8010b1e <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	ed93 7a01 	vldr	s14, [r3, #4]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	edd3 6a06 	vldr	s13, [r3, #24]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	edd3 7a07 	vldr	s15, [r3, #28]
 8011350:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	edd3 7a08 	vldr	s15, [r3, #32]
 801135c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011370:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011374:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 80113a0 <pll_Control_V+0x178>
 8011378:	eeb0 0b47 	vmov.f64	d0, d7
 801137c:	f003 f878 	bl	8014470 <fmod>
 8011380:	eeb0 7b40 	vmov.f64	d7, d0
 8011384:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801138e:	bf00      	nop
 8011390:	3730      	adds	r7, #48	@ 0x30
 8011392:	46bd      	mov	sp, r7
 8011394:	ecbd 8b02 	vpop	{d8}
 8011398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801139c:	f3af 8000 	nop.w
 80113a0:	60000000 	.word	0x60000000
 80113a4:	401921fb 	.word	0x401921fb
 80113a8:	3f13cd3a 	.word	0x3f13cd3a
 80113ac:	3f93cd3a 	.word	0x3f93cd3a
 80113b0:	00000000 	.word	0x00000000

080113b4 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 80113b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b8:	ed2d 8b02 	vpush	{d8}
 80113bc:	b094      	sub	sp, #80	@ 0x50
 80113be:	af00      	add	r7, sp, #0
 80113c0:	60f8      	str	r0, [r7, #12]
 80113c2:	60b9      	str	r1, [r7, #8]
 80113c4:	ed87 0a01 	vstr	s0, [r7, #4]
 80113c8:	edc7 0a00 	vstr	s1, [r7]
    static float Uabd;
    static float Uabq;
    static float PFTheta;
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_I->basic->input_a, signal_I->basic->input_b, &signal_I->basic->clarke_alpha, &signal_I->basic->clarke_beta);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	6818      	ldr	r0, [r3, #0]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	6859      	ldr	r1, [r3, #4]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f103 020c 	add.w	r2, r3, #12
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	3310      	adds	r3, #16
 80113e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80113e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80113ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80113ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pIalpha = Ia;
 80113ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80113f2:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 80113f4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80113f8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80116a0 <pll_Control_I+0x2ec>
 80113fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011400:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011404:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80116a4 <pll_Control_I+0x2f0>
 8011408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801140c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011412:	edc3 7a00 	vstr	s15, [r3]
  }
 8011416:	bf00      	nop
    // 在电压的系上得出电流的dq值
    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	691e      	ldr	r6, [r3, #16]
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f103 0514 	add.w	r5, r3, #20
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f103 0418 	add.w	r4, r3, #24
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	edd3 7a01 	vldr	s15, [r3, #4]
 801143c:	eeb0 0a67 	vmov.f32	s0, s15
 8011440:	f000 f9cc 	bl	80117dc <arm_sin_f32>
 8011444:	eeb0 8a40 	vmov.f32	s16, s0
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	edd3 7a01 	vldr	s15, [r3, #4]
 801144e:	eeb0 0a67 	vmov.f32	s0, s15
 8011452:	f000 fa09 	bl	8011868 <arm_cos_f32>
 8011456:	eef0 7a40 	vmov.f32	s15, s0
 801145a:	f8c7 804c 	str.w	r8, [r7, #76]	@ 0x4c
 801145e:	64be      	str	r6, [r7, #72]	@ 0x48
 8011460:	647d      	str	r5, [r7, #68]	@ 0x44
 8011462:	643c      	str	r4, [r7, #64]	@ 0x40
 8011464:	ed87 8a0f 	vstr	s16, [r7, #60]	@ 0x3c
 8011468:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 801146c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8011470:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8011474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011478:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 801147c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8011480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801148a:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 801148e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8011492:	eeb1 7a67 	vneg.f32	s14, s15
 8011496:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801149a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801149e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80114a2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80114a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114b0:	edc3 7a00 	vstr	s15, [r3]
  }
 80114b4:	bf00      	nop
    // PI控制
    PFTheta = acosf(PF);
 80114b6:	ed97 0a00 	vldr	s0, [r7]
 80114ba:	f003 f81d 	bl	80144f8 <acosf>
 80114be:	eef0 7a40 	vmov.f32	s15, s0
 80114c2:	4b79      	ldr	r3, [pc, #484]	@ (80116a8 <pll_Control_I+0x2f4>)
 80114c4:	edc3 7a00 	vstr	s15, [r3]
    pid(signal_I->pid_d, Iset * 1.414f * arm_cos_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	6a1c      	ldr	r4, [r3, #32]
 80114cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80114d0:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80116ac <pll_Control_I+0x2f8>
 80114d4:	ee27 8a87 	vmul.f32	s16, s15, s14
 80114d8:	4b73      	ldr	r3, [pc, #460]	@ (80116a8 <pll_Control_I+0x2f4>)
 80114da:	edd3 7a00 	vldr	s15, [r3]
 80114de:	eeb0 0a67 	vmov.f32	s0, s15
 80114e2:	f000 f9c1 	bl	8011868 <arm_cos_f32>
 80114e6:	eef0 7a40 	vmov.f32	s15, s0
 80114ea:	ee68 7a27 	vmul.f32	s15, s16, s15
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80114f6:	eef0 0a47 	vmov.f32	s1, s14
 80114fa:	eeb0 0a67 	vmov.f32	s0, s15
 80114fe:	4620      	mov	r0, r4
 8011500:	f7ff fb0d 	bl	8010b1e <pid>
    if (signal_I->CorL == 1)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	7e1b      	ldrb	r3, [r3, #24]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d11e      	bne.n	801154a <pll_Control_I+0x196>
    {
        pid(signal_I->pid_q, Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011510:	edd7 7a01 	vldr	s15, [r7, #4]
 8011514:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80116ac <pll_Control_I+0x2f8>
 8011518:	ee27 8a87 	vmul.f32	s16, s15, s14
 801151c:	4b62      	ldr	r3, [pc, #392]	@ (80116a8 <pll_Control_I+0x2f4>)
 801151e:	edd3 7a00 	vldr	s15, [r3]
 8011522:	eeb0 0a67 	vmov.f32	s0, s15
 8011526:	f000 f959 	bl	80117dc <arm_sin_f32>
 801152a:	eef0 7a40 	vmov.f32	s15, s0
 801152e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	ed93 7a06 	vldr	s14, [r3, #24]
 801153a:	eef0 0a47 	vmov.f32	s1, s14
 801153e:	eeb0 0a67 	vmov.f32	s0, s15
 8011542:	4620      	mov	r0, r4
 8011544:	f7ff faeb 	bl	8010b1e <pid>
 8011548:	e01f      	b.n	801158a <pll_Control_I+0x1d6>
    }
    else
    {
        pid(signal_I->pid_q, -Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801154e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011552:	eef1 7a67 	vneg.f32	s15, s15
 8011556:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80116ac <pll_Control_I+0x2f8>
 801155a:	ee27 8a87 	vmul.f32	s16, s15, s14
 801155e:	4b52      	ldr	r3, [pc, #328]	@ (80116a8 <pll_Control_I+0x2f4>)
 8011560:	edd3 7a00 	vldr	s15, [r3]
 8011564:	eeb0 0a67 	vmov.f32	s0, s15
 8011568:	f000 f938 	bl	80117dc <arm_sin_f32>
 801156c:	eef0 7a40 	vmov.f32	s15, s0
 8011570:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	ed93 7a06 	vldr	s14, [r3, #24]
 801157c:	eef0 0a47 	vmov.f32	s1, s14
 8011580:	eeb0 0a67 	vmov.f32	s0, s15
 8011584:	4620      	mov	r0, r4
 8011586:	f7ff faca 	bl	8010b1e <pid>
    }
    // 解耦调制
    Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	ed93 7a05 	vldr	s14, [r3, #20]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	6a1b      	ldr	r3, [r3, #32]
 8011596:	edd3 7a06 	vldr	s15, [r3, #24]
 801159a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	edd3 6a06 	vldr	s13, [r3, #24]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80115ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80115b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115c0:	4b3b      	ldr	r3, [pc, #236]	@ (80116b0 <pll_Control_I+0x2fc>)
 80115c2:	edc3 7a00 	vstr	s15, [r3]
    Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80115d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	edd3 6a05 	vldr	s13, [r3, #20]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80115ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80115f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115fc:	4b2d      	ldr	r3, [pc, #180]	@ (80116b4 <pll_Control_I+0x300>)
 80115fe:	edc3 7a00 	vstr	s15, [r3]
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011602:	4b2b      	ldr	r3, [pc, #172]	@ (80116b0 <pll_Control_I+0x2fc>)
 8011604:	f8d3 8000 	ldr.w	r8, [r3]
 8011608:	4b2a      	ldr	r3, [pc, #168]	@ (80116b4 <pll_Control_I+0x300>)
 801160a:	681e      	ldr	r6, [r3, #0]
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	1d1d      	adds	r5, r3, #4
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f103 0408 	add.w	r4, r3, #8
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	edd3 7a01 	vldr	s15, [r3, #4]
 801161c:	eeb0 0a67 	vmov.f32	s0, s15
 8011620:	f000 f8dc 	bl	80117dc <arm_sin_f32>
 8011624:	eeb0 8a40 	vmov.f32	s16, s0
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	edd3 7a01 	vldr	s15, [r3, #4]
 801162e:	eeb0 0a67 	vmov.f32	s0, s15
 8011632:	f000 f919 	bl	8011868 <arm_cos_f32>
 8011636:	eef0 7a40 	vmov.f32	s15, s0
 801163a:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 801163e:	623e      	str	r6, [r7, #32]
 8011640:	61fd      	str	r5, [r7, #28]
 8011642:	61bc      	str	r4, [r7, #24]
 8011644:	ed87 8a05 	vstr	s16, [r7, #20]
 8011648:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 801164c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011650:	edd7 7a04 	vldr	s15, [r7, #16]
 8011654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011658:	edd7 6a08 	vldr	s13, [r7, #32]
 801165c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 801166e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011672:	edd7 7a05 	vldr	s15, [r7, #20]
 8011676:	ee27 7a27 	vmul.f32	s14, s14, s15
 801167a:	edd7 6a08 	vldr	s13, [r7, #32]
 801167e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011686:	ee77 7a27 	vadd.f32	s15, s14, s15
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	edc3 7a00 	vstr	s15, [r3]
  }
 8011690:	bf00      	nop
}
 8011692:	bf00      	nop
 8011694:	3750      	adds	r7, #80	@ 0x50
 8011696:	46bd      	mov	sp, r7
 8011698:	ecbd 8b02 	vpop	{d8}
 801169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a0:	3f13cd3a 	.word	0x3f13cd3a
 80116a4:	3f93cd3a 	.word	0x3f93cd3a
 80116a8:	24006f58 	.word	0x24006f58
 80116ac:	3fb4fdf4 	.word	0x3fb4fdf4
 80116b0:	24006f5c 	.word	0x24006f5c
 80116b4:	24006f60 	.word	0x24006f60

080116b8 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	4603      	mov	r3, r0
 80116c0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 80116c2:	88fb      	ldrh	r3, [r7, #6]
 80116c4:	2b40      	cmp	r3, #64	@ 0x40
 80116c6:	d160      	bne.n	801178a <HAL_GPIO_EXTI_Callback+0xd2>
    {
        // 读取AD7606数据
        ad7606_GetValue(&hspi2, 5, adcValue);
 80116c8:	4a32      	ldr	r2, [pc, #200]	@ (8011794 <HAL_GPIO_EXTI_Callback+0xdc>)
 80116ca:	2105      	movs	r1, #5
 80116cc:	4832      	ldr	r0, [pc, #200]	@ (8011798 <HAL_GPIO_EXTI_Callback+0xe0>)
 80116ce:	f7fe fdd1 	bl	8010274 <ad7606_GetValue>
        signal_V->basic->input_a = adcValue[1] * 10.f;
 80116d2:	4b30      	ldr	r3, [pc, #192]	@ (8011794 <HAL_GPIO_EXTI_Callback+0xdc>)
 80116d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80116d8:	4b30      	ldr	r3, [pc, #192]	@ (801179c <HAL_GPIO_EXTI_Callback+0xe4>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80116e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116e6:	edc3 7a00 	vstr	s15, [r3]
        signal_V->basic->input_b = adcValue[2] * 10.f;
 80116ea:	4b2a      	ldr	r3, [pc, #168]	@ (8011794 <HAL_GPIO_EXTI_Callback+0xdc>)
 80116ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80116f0:	4b2a      	ldr	r3, [pc, #168]	@ (801179c <HAL_GPIO_EXTI_Callback+0xe4>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80116fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116fe:	edc3 7a01 	vstr	s15, [r3, #4]
        signal_I->basic->input_a = adcValue[3];
 8011702:	4b27      	ldr	r3, [pc, #156]	@ (80117a0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	4a22      	ldr	r2, [pc, #136]	@ (8011794 <HAL_GPIO_EXTI_Callback+0xdc>)
 801170a:	68d2      	ldr	r2, [r2, #12]
 801170c:	601a      	str	r2, [r3, #0]
        signal_I->basic->input_b = adcValue[4];
 801170e:	4b24      	ldr	r3, [pc, #144]	@ (80117a0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	4a1f      	ldr	r2, [pc, #124]	@ (8011794 <HAL_GPIO_EXTI_Callback+0xdc>)
 8011716:	6912      	ldr	r2, [r2, #16]
 8011718:	605a      	str	r2, [r3, #4]
        // 锁相控制
        pll_Control_V(signal_V);
 801171a:	4b20      	ldr	r3, [pc, #128]	@ (801179c <HAL_GPIO_EXTI_Callback+0xe4>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff fd82 	bl	8011228 <pll_Control_V>
        // 电流内环控制
        pll_Control_I(signal_I, signal_V, 0.5f, 1.f);
 8011724:	4b1e      	ldr	r3, [pc, #120]	@ (80117a0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4a1c      	ldr	r2, [pc, #112]	@ (801179c <HAL_GPIO_EXTI_Callback+0xe4>)
 801172a:	6812      	ldr	r2, [r2, #0]
 801172c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011730:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8011734:	4611      	mov	r1, r2
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff fe3c 	bl	80113b4 <pll_Control_I>
        // svpwm调制
        svpwm_Control(signal_V, 20.f);
 801173c:	4b17      	ldr	r3, [pc, #92]	@ (801179c <HAL_GPIO_EXTI_Callback+0xe4>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8011744:	4618      	mov	r0, r3
 8011746:	f7ff fa5f 	bl	8010c08 <svpwm_Control>
        // DAC输出
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f));
 801174a:	4b16      	ldr	r3, [pc, #88]	@ (80117a4 <HAL_GPIO_EXTI_Callback+0xec>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011750:	ee07 3a90 	vmov	s15, r3
 8011754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011758:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80117a8 <HAL_GPIO_EXTI_Callback+0xf0>
 801175c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011760:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80117a8 <HAL_GPIO_EXTI_Callback+0xf0>
 8011764:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011768:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80117ac <HAL_GPIO_EXTI_Callback+0xf4>
 801176c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011770:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80117b0 <HAL_GPIO_EXTI_Callback+0xf8>
 8011774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801177c:	ee17 3a90 	vmov	r3, s15
 8011780:	2200      	movs	r2, #0
 8011782:	2100      	movs	r1, #0
 8011784:	480b      	ldr	r0, [pc, #44]	@ (80117b4 <HAL_GPIO_EXTI_Callback+0xfc>)
 8011786:	f7f0 fc02 	bl	8001f8e <HAL_DAC_SetValue>
    }
}
 801178a:	bf00      	nop
 801178c:	3708      	adds	r7, #8
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	24006f64 	.word	0x24006f64
 8011798:	24000430 	.word	0x24000430
 801179c:	24006f8c 	.word	0x24006f8c
 80117a0:	24006f90 	.word	0x24006f90
 80117a4:	24000508 	.word	0x24000508
 80117a8:	453b8000 	.word	0x453b8000
 80117ac:	44fa0000 	.word	0x44fa0000
 80117b0:	45000000 	.word	0x45000000
 80117b4:	24000310 	.word	0x24000310

080117b8 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  定时器中断
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a04      	ldr	r2, [pc, #16]	@ (80117d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d101      	bne.n	80117ce <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80117ca:	f7f0 f969 	bl	8001aa0 <HAL_IncTick>
    }
}
 80117ce:	bf00      	nop
 80117d0:	3708      	adds	r7, #8
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	40001000 	.word	0x40001000

080117dc <arm_sin_f32>:
 80117dc:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 801185c <arm_sin_f32+0x80>
 80117e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80117e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80117e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80117ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f0:	d504      	bpl.n	80117fc <arm_sin_f32+0x20>
 80117f2:	ee17 3a90 	vmov	r3, s15
 80117f6:	3b01      	subs	r3, #1
 80117f8:	ee07 3a90 	vmov	s15, r3
 80117fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011800:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8011860 <arm_sin_f32+0x84>
 8011804:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011808:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801180c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011810:	ee17 3a10 	vmov	r3, s14
 8011814:	b29b      	uxth	r3, r3
 8011816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801181a:	d21a      	bcs.n	8011852 <arm_sin_f32+0x76>
 801181c:	ee07 3a10 	vmov	s14, r3
 8011820:	1c59      	adds	r1, r3, #1
 8011822:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011826:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801182a:	4a0e      	ldr	r2, [pc, #56]	@ (8011864 <arm_sin_f32+0x88>)
 801182c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011834:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011838:	ee30 0a67 	vsub.f32	s0, s0, s15
 801183c:	edd3 6a00 	vldr	s13, [r3]
 8011840:	ed92 7a00 	vldr	s14, [r2]
 8011844:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011848:	ee67 7a87 	vmul.f32	s15, s15, s14
 801184c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011850:	4770      	bx	lr
 8011852:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011856:	2101      	movs	r1, #1
 8011858:	2300      	movs	r3, #0
 801185a:	e7e6      	b.n	801182a <arm_sin_f32+0x4e>
 801185c:	3e22f983 	.word	0x3e22f983
 8011860:	44000000 	.word	0x44000000
 8011864:	08016324 	.word	0x08016324

08011868 <arm_cos_f32>:
 8011868:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80118f0 <arm_cos_f32+0x88>
 801186c:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8011870:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011874:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011878:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801187c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011884:	d504      	bpl.n	8011890 <arm_cos_f32+0x28>
 8011886:	ee17 3a90 	vmov	r3, s15
 801188a:	3b01      	subs	r3, #1
 801188c:	ee07 3a90 	vmov	s15, r3
 8011890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011894:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80118f4 <arm_cos_f32+0x8c>
 8011898:	ee70 7a67 	vsub.f32	s15, s0, s15
 801189c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118a0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80118a4:	ee17 3a10 	vmov	r3, s14
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80118ae:	d21a      	bcs.n	80118e6 <arm_cos_f32+0x7e>
 80118b0:	ee07 3a10 	vmov	s14, r3
 80118b4:	1c59      	adds	r1, r3, #1
 80118b6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80118ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80118be:	4a0e      	ldr	r2, [pc, #56]	@ (80118f8 <arm_cos_f32+0x90>)
 80118c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80118c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80118cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80118d0:	edd3 6a00 	vldr	s13, [r3]
 80118d4:	ed92 7a00 	vldr	s14, [r2]
 80118d8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80118dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80118e4:	4770      	bx	lr
 80118e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80118ea:	2101      	movs	r1, #1
 80118ec:	2300      	movs	r3, #0
 80118ee:	e7e6      	b.n	80118be <arm_cos_f32+0x56>
 80118f0:	3e22f983 	.word	0x3e22f983
 80118f4:	44000000 	.word	0x44000000
 80118f8:	08016324 	.word	0x08016324

080118fc <malloc>:
 80118fc:	4b02      	ldr	r3, [pc, #8]	@ (8011908 <malloc+0xc>)
 80118fe:	4601      	mov	r1, r0
 8011900:	6818      	ldr	r0, [r3, #0]
 8011902:	f000 b825 	b.w	8011950 <_malloc_r>
 8011906:	bf00      	nop
 8011908:	24000138 	.word	0x24000138

0801190c <sbrk_aligned>:
 801190c:	b570      	push	{r4, r5, r6, lr}
 801190e:	4e0f      	ldr	r6, [pc, #60]	@ (801194c <sbrk_aligned+0x40>)
 8011910:	460c      	mov	r4, r1
 8011912:	6831      	ldr	r1, [r6, #0]
 8011914:	4605      	mov	r5, r0
 8011916:	b911      	cbnz	r1, 801191e <sbrk_aligned+0x12>
 8011918:	f000 fe44 	bl	80125a4 <_sbrk_r>
 801191c:	6030      	str	r0, [r6, #0]
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	f000 fe3f 	bl	80125a4 <_sbrk_r>
 8011926:	1c43      	adds	r3, r0, #1
 8011928:	d103      	bne.n	8011932 <sbrk_aligned+0x26>
 801192a:	f04f 34ff 	mov.w	r4, #4294967295
 801192e:	4620      	mov	r0, r4
 8011930:	bd70      	pop	{r4, r5, r6, pc}
 8011932:	1cc4      	adds	r4, r0, #3
 8011934:	f024 0403 	bic.w	r4, r4, #3
 8011938:	42a0      	cmp	r0, r4
 801193a:	d0f8      	beq.n	801192e <sbrk_aligned+0x22>
 801193c:	1a21      	subs	r1, r4, r0
 801193e:	4628      	mov	r0, r5
 8011940:	f000 fe30 	bl	80125a4 <_sbrk_r>
 8011944:	3001      	adds	r0, #1
 8011946:	d1f2      	bne.n	801192e <sbrk_aligned+0x22>
 8011948:	e7ef      	b.n	801192a <sbrk_aligned+0x1e>
 801194a:	bf00      	nop
 801194c:	24006f94 	.word	0x24006f94

08011950 <_malloc_r>:
 8011950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011954:	1ccd      	adds	r5, r1, #3
 8011956:	f025 0503 	bic.w	r5, r5, #3
 801195a:	3508      	adds	r5, #8
 801195c:	2d0c      	cmp	r5, #12
 801195e:	bf38      	it	cc
 8011960:	250c      	movcc	r5, #12
 8011962:	2d00      	cmp	r5, #0
 8011964:	4606      	mov	r6, r0
 8011966:	db01      	blt.n	801196c <_malloc_r+0x1c>
 8011968:	42a9      	cmp	r1, r5
 801196a:	d904      	bls.n	8011976 <_malloc_r+0x26>
 801196c:	230c      	movs	r3, #12
 801196e:	6033      	str	r3, [r6, #0]
 8011970:	2000      	movs	r0, #0
 8011972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a4c <_malloc_r+0xfc>
 801197a:	f000 f869 	bl	8011a50 <__malloc_lock>
 801197e:	f8d8 3000 	ldr.w	r3, [r8]
 8011982:	461c      	mov	r4, r3
 8011984:	bb44      	cbnz	r4, 80119d8 <_malloc_r+0x88>
 8011986:	4629      	mov	r1, r5
 8011988:	4630      	mov	r0, r6
 801198a:	f7ff ffbf 	bl	801190c <sbrk_aligned>
 801198e:	1c43      	adds	r3, r0, #1
 8011990:	4604      	mov	r4, r0
 8011992:	d158      	bne.n	8011a46 <_malloc_r+0xf6>
 8011994:	f8d8 4000 	ldr.w	r4, [r8]
 8011998:	4627      	mov	r7, r4
 801199a:	2f00      	cmp	r7, #0
 801199c:	d143      	bne.n	8011a26 <_malloc_r+0xd6>
 801199e:	2c00      	cmp	r4, #0
 80119a0:	d04b      	beq.n	8011a3a <_malloc_r+0xea>
 80119a2:	6823      	ldr	r3, [r4, #0]
 80119a4:	4639      	mov	r1, r7
 80119a6:	4630      	mov	r0, r6
 80119a8:	eb04 0903 	add.w	r9, r4, r3
 80119ac:	f000 fdfa 	bl	80125a4 <_sbrk_r>
 80119b0:	4581      	cmp	r9, r0
 80119b2:	d142      	bne.n	8011a3a <_malloc_r+0xea>
 80119b4:	6821      	ldr	r1, [r4, #0]
 80119b6:	1a6d      	subs	r5, r5, r1
 80119b8:	4629      	mov	r1, r5
 80119ba:	4630      	mov	r0, r6
 80119bc:	f7ff ffa6 	bl	801190c <sbrk_aligned>
 80119c0:	3001      	adds	r0, #1
 80119c2:	d03a      	beq.n	8011a3a <_malloc_r+0xea>
 80119c4:	6823      	ldr	r3, [r4, #0]
 80119c6:	442b      	add	r3, r5
 80119c8:	6023      	str	r3, [r4, #0]
 80119ca:	f8d8 3000 	ldr.w	r3, [r8]
 80119ce:	685a      	ldr	r2, [r3, #4]
 80119d0:	bb62      	cbnz	r2, 8011a2c <_malloc_r+0xdc>
 80119d2:	f8c8 7000 	str.w	r7, [r8]
 80119d6:	e00f      	b.n	80119f8 <_malloc_r+0xa8>
 80119d8:	6822      	ldr	r2, [r4, #0]
 80119da:	1b52      	subs	r2, r2, r5
 80119dc:	d420      	bmi.n	8011a20 <_malloc_r+0xd0>
 80119de:	2a0b      	cmp	r2, #11
 80119e0:	d917      	bls.n	8011a12 <_malloc_r+0xc2>
 80119e2:	1961      	adds	r1, r4, r5
 80119e4:	42a3      	cmp	r3, r4
 80119e6:	6025      	str	r5, [r4, #0]
 80119e8:	bf18      	it	ne
 80119ea:	6059      	strne	r1, [r3, #4]
 80119ec:	6863      	ldr	r3, [r4, #4]
 80119ee:	bf08      	it	eq
 80119f0:	f8c8 1000 	streq.w	r1, [r8]
 80119f4:	5162      	str	r2, [r4, r5]
 80119f6:	604b      	str	r3, [r1, #4]
 80119f8:	4630      	mov	r0, r6
 80119fa:	f000 f82f 	bl	8011a5c <__malloc_unlock>
 80119fe:	f104 000b 	add.w	r0, r4, #11
 8011a02:	1d23      	adds	r3, r4, #4
 8011a04:	f020 0007 	bic.w	r0, r0, #7
 8011a08:	1ac2      	subs	r2, r0, r3
 8011a0a:	bf1c      	itt	ne
 8011a0c:	1a1b      	subne	r3, r3, r0
 8011a0e:	50a3      	strne	r3, [r4, r2]
 8011a10:	e7af      	b.n	8011972 <_malloc_r+0x22>
 8011a12:	6862      	ldr	r2, [r4, #4]
 8011a14:	42a3      	cmp	r3, r4
 8011a16:	bf0c      	ite	eq
 8011a18:	f8c8 2000 	streq.w	r2, [r8]
 8011a1c:	605a      	strne	r2, [r3, #4]
 8011a1e:	e7eb      	b.n	80119f8 <_malloc_r+0xa8>
 8011a20:	4623      	mov	r3, r4
 8011a22:	6864      	ldr	r4, [r4, #4]
 8011a24:	e7ae      	b.n	8011984 <_malloc_r+0x34>
 8011a26:	463c      	mov	r4, r7
 8011a28:	687f      	ldr	r7, [r7, #4]
 8011a2a:	e7b6      	b.n	801199a <_malloc_r+0x4a>
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	42a3      	cmp	r3, r4
 8011a32:	d1fb      	bne.n	8011a2c <_malloc_r+0xdc>
 8011a34:	2300      	movs	r3, #0
 8011a36:	6053      	str	r3, [r2, #4]
 8011a38:	e7de      	b.n	80119f8 <_malloc_r+0xa8>
 8011a3a:	230c      	movs	r3, #12
 8011a3c:	6033      	str	r3, [r6, #0]
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f000 f80c 	bl	8011a5c <__malloc_unlock>
 8011a44:	e794      	b.n	8011970 <_malloc_r+0x20>
 8011a46:	6005      	str	r5, [r0, #0]
 8011a48:	e7d6      	b.n	80119f8 <_malloc_r+0xa8>
 8011a4a:	bf00      	nop
 8011a4c:	24006f98 	.word	0x24006f98

08011a50 <__malloc_lock>:
 8011a50:	4801      	ldr	r0, [pc, #4]	@ (8011a58 <__malloc_lock+0x8>)
 8011a52:	f000 bdf4 	b.w	801263e <__retarget_lock_acquire_recursive>
 8011a56:	bf00      	nop
 8011a58:	240070dc 	.word	0x240070dc

08011a5c <__malloc_unlock>:
 8011a5c:	4801      	ldr	r0, [pc, #4]	@ (8011a64 <__malloc_unlock+0x8>)
 8011a5e:	f000 bdef 	b.w	8012640 <__retarget_lock_release_recursive>
 8011a62:	bf00      	nop
 8011a64:	240070dc 	.word	0x240070dc

08011a68 <__cvt>:
 8011a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6a:	ed2d 8b02 	vpush	{d8}
 8011a6e:	eeb0 8b40 	vmov.f64	d8, d0
 8011a72:	b085      	sub	sp, #20
 8011a74:	4617      	mov	r7, r2
 8011a76:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011a78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011a7a:	ee18 2a90 	vmov	r2, s17
 8011a7e:	f025 0520 	bic.w	r5, r5, #32
 8011a82:	2a00      	cmp	r2, #0
 8011a84:	bfb6      	itet	lt
 8011a86:	222d      	movlt	r2, #45	@ 0x2d
 8011a88:	2200      	movge	r2, #0
 8011a8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8011a8e:	2d46      	cmp	r5, #70	@ 0x46
 8011a90:	460c      	mov	r4, r1
 8011a92:	701a      	strb	r2, [r3, #0]
 8011a94:	d004      	beq.n	8011aa0 <__cvt+0x38>
 8011a96:	2d45      	cmp	r5, #69	@ 0x45
 8011a98:	d100      	bne.n	8011a9c <__cvt+0x34>
 8011a9a:	3401      	adds	r4, #1
 8011a9c:	2102      	movs	r1, #2
 8011a9e:	e000      	b.n	8011aa2 <__cvt+0x3a>
 8011aa0:	2103      	movs	r1, #3
 8011aa2:	ab03      	add	r3, sp, #12
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	ab02      	add	r3, sp, #8
 8011aa8:	9300      	str	r3, [sp, #0]
 8011aaa:	4622      	mov	r2, r4
 8011aac:	4633      	mov	r3, r6
 8011aae:	eeb0 0b48 	vmov.f64	d0, d8
 8011ab2:	f000 fe5d 	bl	8012770 <_dtoa_r>
 8011ab6:	2d47      	cmp	r5, #71	@ 0x47
 8011ab8:	d114      	bne.n	8011ae4 <__cvt+0x7c>
 8011aba:	07fb      	lsls	r3, r7, #31
 8011abc:	d50a      	bpl.n	8011ad4 <__cvt+0x6c>
 8011abe:	1902      	adds	r2, r0, r4
 8011ac0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac8:	bf08      	it	eq
 8011aca:	9203      	streq	r2, [sp, #12]
 8011acc:	2130      	movs	r1, #48	@ 0x30
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d319      	bcc.n	8011b08 <__cvt+0xa0>
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ad8:	1a1b      	subs	r3, r3, r0
 8011ada:	6013      	str	r3, [r2, #0]
 8011adc:	b005      	add	sp, #20
 8011ade:	ecbd 8b02 	vpop	{d8}
 8011ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ae4:	2d46      	cmp	r5, #70	@ 0x46
 8011ae6:	eb00 0204 	add.w	r2, r0, r4
 8011aea:	d1e9      	bne.n	8011ac0 <__cvt+0x58>
 8011aec:	7803      	ldrb	r3, [r0, #0]
 8011aee:	2b30      	cmp	r3, #48	@ 0x30
 8011af0:	d107      	bne.n	8011b02 <__cvt+0x9a>
 8011af2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afa:	bf1c      	itt	ne
 8011afc:	f1c4 0401 	rsbne	r4, r4, #1
 8011b00:	6034      	strne	r4, [r6, #0]
 8011b02:	6833      	ldr	r3, [r6, #0]
 8011b04:	441a      	add	r2, r3
 8011b06:	e7db      	b.n	8011ac0 <__cvt+0x58>
 8011b08:	1c5c      	adds	r4, r3, #1
 8011b0a:	9403      	str	r4, [sp, #12]
 8011b0c:	7019      	strb	r1, [r3, #0]
 8011b0e:	e7de      	b.n	8011ace <__cvt+0x66>

08011b10 <__exponent>:
 8011b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b12:	2900      	cmp	r1, #0
 8011b14:	bfba      	itte	lt
 8011b16:	4249      	neglt	r1, r1
 8011b18:	232d      	movlt	r3, #45	@ 0x2d
 8011b1a:	232b      	movge	r3, #43	@ 0x2b
 8011b1c:	2909      	cmp	r1, #9
 8011b1e:	7002      	strb	r2, [r0, #0]
 8011b20:	7043      	strb	r3, [r0, #1]
 8011b22:	dd29      	ble.n	8011b78 <__exponent+0x68>
 8011b24:	f10d 0307 	add.w	r3, sp, #7
 8011b28:	461d      	mov	r5, r3
 8011b2a:	270a      	movs	r7, #10
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	fbb1 f6f7 	udiv	r6, r1, r7
 8011b32:	fb07 1416 	mls	r4, r7, r6, r1
 8011b36:	3430      	adds	r4, #48	@ 0x30
 8011b38:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011b3c:	460c      	mov	r4, r1
 8011b3e:	2c63      	cmp	r4, #99	@ 0x63
 8011b40:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b44:	4631      	mov	r1, r6
 8011b46:	dcf1      	bgt.n	8011b2c <__exponent+0x1c>
 8011b48:	3130      	adds	r1, #48	@ 0x30
 8011b4a:	1e94      	subs	r4, r2, #2
 8011b4c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011b50:	1c41      	adds	r1, r0, #1
 8011b52:	4623      	mov	r3, r4
 8011b54:	42ab      	cmp	r3, r5
 8011b56:	d30a      	bcc.n	8011b6e <__exponent+0x5e>
 8011b58:	f10d 0309 	add.w	r3, sp, #9
 8011b5c:	1a9b      	subs	r3, r3, r2
 8011b5e:	42ac      	cmp	r4, r5
 8011b60:	bf88      	it	hi
 8011b62:	2300      	movhi	r3, #0
 8011b64:	3302      	adds	r3, #2
 8011b66:	4403      	add	r3, r0
 8011b68:	1a18      	subs	r0, r3, r0
 8011b6a:	b003      	add	sp, #12
 8011b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b6e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011b72:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011b76:	e7ed      	b.n	8011b54 <__exponent+0x44>
 8011b78:	2330      	movs	r3, #48	@ 0x30
 8011b7a:	3130      	adds	r1, #48	@ 0x30
 8011b7c:	7083      	strb	r3, [r0, #2]
 8011b7e:	70c1      	strb	r1, [r0, #3]
 8011b80:	1d03      	adds	r3, r0, #4
 8011b82:	e7f1      	b.n	8011b68 <__exponent+0x58>
 8011b84:	0000      	movs	r0, r0
	...

08011b88 <_printf_float>:
 8011b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b8c:	b08d      	sub	sp, #52	@ 0x34
 8011b8e:	460c      	mov	r4, r1
 8011b90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011b94:	4616      	mov	r6, r2
 8011b96:	461f      	mov	r7, r3
 8011b98:	4605      	mov	r5, r0
 8011b9a:	f000 fccb 	bl	8012534 <_localeconv_r>
 8011b9e:	f8d0 b000 	ldr.w	fp, [r0]
 8011ba2:	4658      	mov	r0, fp
 8011ba4:	f7ee fbec 	bl	8000380 <strlen>
 8011ba8:	2300      	movs	r3, #0
 8011baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bac:	f8d8 3000 	ldr.w	r3, [r8]
 8011bb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011bb4:	6822      	ldr	r2, [r4, #0]
 8011bb6:	9005      	str	r0, [sp, #20]
 8011bb8:	3307      	adds	r3, #7
 8011bba:	f023 0307 	bic.w	r3, r3, #7
 8011bbe:	f103 0108 	add.w	r1, r3, #8
 8011bc2:	f8c8 1000 	str.w	r1, [r8]
 8011bc6:	ed93 0b00 	vldr	d0, [r3]
 8011bca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011e28 <_printf_float+0x2a0>
 8011bce:	eeb0 7bc0 	vabs.f64	d7, d0
 8011bd2:	eeb4 7b46 	vcmp.f64	d7, d6
 8011bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bda:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011bde:	dd24      	ble.n	8011c2a <_printf_float+0xa2>
 8011be0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be8:	d502      	bpl.n	8011bf0 <_printf_float+0x68>
 8011bea:	232d      	movs	r3, #45	@ 0x2d
 8011bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011bf0:	498f      	ldr	r1, [pc, #572]	@ (8011e30 <_printf_float+0x2a8>)
 8011bf2:	4b90      	ldr	r3, [pc, #576]	@ (8011e34 <_printf_float+0x2ac>)
 8011bf4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011bf8:	bf94      	ite	ls
 8011bfa:	4688      	movls	r8, r1
 8011bfc:	4698      	movhi	r8, r3
 8011bfe:	f022 0204 	bic.w	r2, r2, #4
 8011c02:	2303      	movs	r3, #3
 8011c04:	6123      	str	r3, [r4, #16]
 8011c06:	6022      	str	r2, [r4, #0]
 8011c08:	f04f 0a00 	mov.w	sl, #0
 8011c0c:	9700      	str	r7, [sp, #0]
 8011c0e:	4633      	mov	r3, r6
 8011c10:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011c12:	4621      	mov	r1, r4
 8011c14:	4628      	mov	r0, r5
 8011c16:	f000 f9d1 	bl	8011fbc <_printf_common>
 8011c1a:	3001      	adds	r0, #1
 8011c1c:	f040 8089 	bne.w	8011d32 <_printf_float+0x1aa>
 8011c20:	f04f 30ff 	mov.w	r0, #4294967295
 8011c24:	b00d      	add	sp, #52	@ 0x34
 8011c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8011c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c32:	d709      	bvc.n	8011c48 <_printf_float+0xc0>
 8011c34:	ee10 3a90 	vmov	r3, s1
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	bfbc      	itt	lt
 8011c3c:	232d      	movlt	r3, #45	@ 0x2d
 8011c3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011c42:	497d      	ldr	r1, [pc, #500]	@ (8011e38 <_printf_float+0x2b0>)
 8011c44:	4b7d      	ldr	r3, [pc, #500]	@ (8011e3c <_printf_float+0x2b4>)
 8011c46:	e7d5      	b.n	8011bf4 <_printf_float+0x6c>
 8011c48:	6863      	ldr	r3, [r4, #4]
 8011c4a:	1c59      	adds	r1, r3, #1
 8011c4c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011c50:	d139      	bne.n	8011cc6 <_printf_float+0x13e>
 8011c52:	2306      	movs	r3, #6
 8011c54:	6063      	str	r3, [r4, #4]
 8011c56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	6022      	str	r2, [r4, #0]
 8011c5e:	9303      	str	r3, [sp, #12]
 8011c60:	ab0a      	add	r3, sp, #40	@ 0x28
 8011c62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011c66:	ab09      	add	r3, sp, #36	@ 0x24
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	6861      	ldr	r1, [r4, #4]
 8011c6c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011c70:	4628      	mov	r0, r5
 8011c72:	f7ff fef9 	bl	8011a68 <__cvt>
 8011c76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011c7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c7c:	4680      	mov	r8, r0
 8011c7e:	d129      	bne.n	8011cd4 <_printf_float+0x14c>
 8011c80:	1cc8      	adds	r0, r1, #3
 8011c82:	db02      	blt.n	8011c8a <_printf_float+0x102>
 8011c84:	6863      	ldr	r3, [r4, #4]
 8011c86:	4299      	cmp	r1, r3
 8011c88:	dd41      	ble.n	8011d0e <_printf_float+0x186>
 8011c8a:	f1a9 0902 	sub.w	r9, r9, #2
 8011c8e:	fa5f f989 	uxtb.w	r9, r9
 8011c92:	3901      	subs	r1, #1
 8011c94:	464a      	mov	r2, r9
 8011c96:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011c9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011c9c:	f7ff ff38 	bl	8011b10 <__exponent>
 8011ca0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ca2:	1813      	adds	r3, r2, r0
 8011ca4:	2a01      	cmp	r2, #1
 8011ca6:	4682      	mov	sl, r0
 8011ca8:	6123      	str	r3, [r4, #16]
 8011caa:	dc02      	bgt.n	8011cb2 <_printf_float+0x12a>
 8011cac:	6822      	ldr	r2, [r4, #0]
 8011cae:	07d2      	lsls	r2, r2, #31
 8011cb0:	d501      	bpl.n	8011cb6 <_printf_float+0x12e>
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	6123      	str	r3, [r4, #16]
 8011cb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d0a6      	beq.n	8011c0c <_printf_float+0x84>
 8011cbe:	232d      	movs	r3, #45	@ 0x2d
 8011cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cc4:	e7a2      	b.n	8011c0c <_printf_float+0x84>
 8011cc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011cca:	d1c4      	bne.n	8011c56 <_printf_float+0xce>
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d1c2      	bne.n	8011c56 <_printf_float+0xce>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e7bf      	b.n	8011c54 <_printf_float+0xcc>
 8011cd4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011cd8:	d9db      	bls.n	8011c92 <_printf_float+0x10a>
 8011cda:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011cde:	d118      	bne.n	8011d12 <_printf_float+0x18a>
 8011ce0:	2900      	cmp	r1, #0
 8011ce2:	6863      	ldr	r3, [r4, #4]
 8011ce4:	dd0b      	ble.n	8011cfe <_printf_float+0x176>
 8011ce6:	6121      	str	r1, [r4, #16]
 8011ce8:	b913      	cbnz	r3, 8011cf0 <_printf_float+0x168>
 8011cea:	6822      	ldr	r2, [r4, #0]
 8011cec:	07d0      	lsls	r0, r2, #31
 8011cee:	d502      	bpl.n	8011cf6 <_printf_float+0x16e>
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	440b      	add	r3, r1
 8011cf4:	6123      	str	r3, [r4, #16]
 8011cf6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011cf8:	f04f 0a00 	mov.w	sl, #0
 8011cfc:	e7db      	b.n	8011cb6 <_printf_float+0x12e>
 8011cfe:	b913      	cbnz	r3, 8011d06 <_printf_float+0x17e>
 8011d00:	6822      	ldr	r2, [r4, #0]
 8011d02:	07d2      	lsls	r2, r2, #31
 8011d04:	d501      	bpl.n	8011d0a <_printf_float+0x182>
 8011d06:	3302      	adds	r3, #2
 8011d08:	e7f4      	b.n	8011cf4 <_printf_float+0x16c>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	e7f2      	b.n	8011cf4 <_printf_float+0x16c>
 8011d0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d14:	4299      	cmp	r1, r3
 8011d16:	db05      	blt.n	8011d24 <_printf_float+0x19c>
 8011d18:	6823      	ldr	r3, [r4, #0]
 8011d1a:	6121      	str	r1, [r4, #16]
 8011d1c:	07d8      	lsls	r0, r3, #31
 8011d1e:	d5ea      	bpl.n	8011cf6 <_printf_float+0x16e>
 8011d20:	1c4b      	adds	r3, r1, #1
 8011d22:	e7e7      	b.n	8011cf4 <_printf_float+0x16c>
 8011d24:	2900      	cmp	r1, #0
 8011d26:	bfd4      	ite	le
 8011d28:	f1c1 0202 	rsble	r2, r1, #2
 8011d2c:	2201      	movgt	r2, #1
 8011d2e:	4413      	add	r3, r2
 8011d30:	e7e0      	b.n	8011cf4 <_printf_float+0x16c>
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	055a      	lsls	r2, r3, #21
 8011d36:	d407      	bmi.n	8011d48 <_printf_float+0x1c0>
 8011d38:	6923      	ldr	r3, [r4, #16]
 8011d3a:	4642      	mov	r2, r8
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	4628      	mov	r0, r5
 8011d40:	47b8      	blx	r7
 8011d42:	3001      	adds	r0, #1
 8011d44:	d12a      	bne.n	8011d9c <_printf_float+0x214>
 8011d46:	e76b      	b.n	8011c20 <_printf_float+0x98>
 8011d48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011d4c:	f240 80e0 	bls.w	8011f10 <_printf_float+0x388>
 8011d50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011d54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5c:	d133      	bne.n	8011dc6 <_printf_float+0x23e>
 8011d5e:	4a38      	ldr	r2, [pc, #224]	@ (8011e40 <_printf_float+0x2b8>)
 8011d60:	2301      	movs	r3, #1
 8011d62:	4631      	mov	r1, r6
 8011d64:	4628      	mov	r0, r5
 8011d66:	47b8      	blx	r7
 8011d68:	3001      	adds	r0, #1
 8011d6a:	f43f af59 	beq.w	8011c20 <_printf_float+0x98>
 8011d6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011d72:	4543      	cmp	r3, r8
 8011d74:	db02      	blt.n	8011d7c <_printf_float+0x1f4>
 8011d76:	6823      	ldr	r3, [r4, #0]
 8011d78:	07d8      	lsls	r0, r3, #31
 8011d7a:	d50f      	bpl.n	8011d9c <_printf_float+0x214>
 8011d7c:	9b05      	ldr	r3, [sp, #20]
 8011d7e:	465a      	mov	r2, fp
 8011d80:	4631      	mov	r1, r6
 8011d82:	4628      	mov	r0, r5
 8011d84:	47b8      	blx	r7
 8011d86:	3001      	adds	r0, #1
 8011d88:	f43f af4a 	beq.w	8011c20 <_printf_float+0x98>
 8011d8c:	f04f 0900 	mov.w	r9, #0
 8011d90:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d94:	f104 0a1a 	add.w	sl, r4, #26
 8011d98:	45c8      	cmp	r8, r9
 8011d9a:	dc09      	bgt.n	8011db0 <_printf_float+0x228>
 8011d9c:	6823      	ldr	r3, [r4, #0]
 8011d9e:	079b      	lsls	r3, r3, #30
 8011da0:	f100 8107 	bmi.w	8011fb2 <_printf_float+0x42a>
 8011da4:	68e0      	ldr	r0, [r4, #12]
 8011da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011da8:	4298      	cmp	r0, r3
 8011daa:	bfb8      	it	lt
 8011dac:	4618      	movlt	r0, r3
 8011dae:	e739      	b.n	8011c24 <_printf_float+0x9c>
 8011db0:	2301      	movs	r3, #1
 8011db2:	4652      	mov	r2, sl
 8011db4:	4631      	mov	r1, r6
 8011db6:	4628      	mov	r0, r5
 8011db8:	47b8      	blx	r7
 8011dba:	3001      	adds	r0, #1
 8011dbc:	f43f af30 	beq.w	8011c20 <_printf_float+0x98>
 8011dc0:	f109 0901 	add.w	r9, r9, #1
 8011dc4:	e7e8      	b.n	8011d98 <_printf_float+0x210>
 8011dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	dc3b      	bgt.n	8011e44 <_printf_float+0x2bc>
 8011dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8011e40 <_printf_float+0x2b8>)
 8011dce:	2301      	movs	r3, #1
 8011dd0:	4631      	mov	r1, r6
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	47b8      	blx	r7
 8011dd6:	3001      	adds	r0, #1
 8011dd8:	f43f af22 	beq.w	8011c20 <_printf_float+0x98>
 8011ddc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011de0:	ea59 0303 	orrs.w	r3, r9, r3
 8011de4:	d102      	bne.n	8011dec <_printf_float+0x264>
 8011de6:	6823      	ldr	r3, [r4, #0]
 8011de8:	07d9      	lsls	r1, r3, #31
 8011dea:	d5d7      	bpl.n	8011d9c <_printf_float+0x214>
 8011dec:	9b05      	ldr	r3, [sp, #20]
 8011dee:	465a      	mov	r2, fp
 8011df0:	4631      	mov	r1, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	47b8      	blx	r7
 8011df6:	3001      	adds	r0, #1
 8011df8:	f43f af12 	beq.w	8011c20 <_printf_float+0x98>
 8011dfc:	f04f 0a00 	mov.w	sl, #0
 8011e00:	f104 0b1a 	add.w	fp, r4, #26
 8011e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e06:	425b      	negs	r3, r3
 8011e08:	4553      	cmp	r3, sl
 8011e0a:	dc01      	bgt.n	8011e10 <_printf_float+0x288>
 8011e0c:	464b      	mov	r3, r9
 8011e0e:	e794      	b.n	8011d3a <_printf_float+0x1b2>
 8011e10:	2301      	movs	r3, #1
 8011e12:	465a      	mov	r2, fp
 8011e14:	4631      	mov	r1, r6
 8011e16:	4628      	mov	r0, r5
 8011e18:	47b8      	blx	r7
 8011e1a:	3001      	adds	r0, #1
 8011e1c:	f43f af00 	beq.w	8011c20 <_printf_float+0x98>
 8011e20:	f10a 0a01 	add.w	sl, sl, #1
 8011e24:	e7ee      	b.n	8011e04 <_printf_float+0x27c>
 8011e26:	bf00      	nop
 8011e28:	ffffffff 	.word	0xffffffff
 8011e2c:	7fefffff 	.word	0x7fefffff
 8011e30:	08016b28 	.word	0x08016b28
 8011e34:	08016b2c 	.word	0x08016b2c
 8011e38:	08016b30 	.word	0x08016b30
 8011e3c:	08016b34 	.word	0x08016b34
 8011e40:	08016b38 	.word	0x08016b38
 8011e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011e4a:	4553      	cmp	r3, sl
 8011e4c:	bfa8      	it	ge
 8011e4e:	4653      	movge	r3, sl
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	4699      	mov	r9, r3
 8011e54:	dc37      	bgt.n	8011ec6 <_printf_float+0x33e>
 8011e56:	2300      	movs	r3, #0
 8011e58:	9307      	str	r3, [sp, #28]
 8011e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e5e:	f104 021a 	add.w	r2, r4, #26
 8011e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e64:	9907      	ldr	r1, [sp, #28]
 8011e66:	9306      	str	r3, [sp, #24]
 8011e68:	eba3 0309 	sub.w	r3, r3, r9
 8011e6c:	428b      	cmp	r3, r1
 8011e6e:	dc31      	bgt.n	8011ed4 <_printf_float+0x34c>
 8011e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e72:	459a      	cmp	sl, r3
 8011e74:	dc3b      	bgt.n	8011eee <_printf_float+0x366>
 8011e76:	6823      	ldr	r3, [r4, #0]
 8011e78:	07da      	lsls	r2, r3, #31
 8011e7a:	d438      	bmi.n	8011eee <_printf_float+0x366>
 8011e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e7e:	ebaa 0903 	sub.w	r9, sl, r3
 8011e82:	9b06      	ldr	r3, [sp, #24]
 8011e84:	ebaa 0303 	sub.w	r3, sl, r3
 8011e88:	4599      	cmp	r9, r3
 8011e8a:	bfa8      	it	ge
 8011e8c:	4699      	movge	r9, r3
 8011e8e:	f1b9 0f00 	cmp.w	r9, #0
 8011e92:	dc34      	bgt.n	8011efe <_printf_float+0x376>
 8011e94:	f04f 0800 	mov.w	r8, #0
 8011e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e9c:	f104 0b1a 	add.w	fp, r4, #26
 8011ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ea2:	ebaa 0303 	sub.w	r3, sl, r3
 8011ea6:	eba3 0309 	sub.w	r3, r3, r9
 8011eaa:	4543      	cmp	r3, r8
 8011eac:	f77f af76 	ble.w	8011d9c <_printf_float+0x214>
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	465a      	mov	r2, fp
 8011eb4:	4631      	mov	r1, r6
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	47b8      	blx	r7
 8011eba:	3001      	adds	r0, #1
 8011ebc:	f43f aeb0 	beq.w	8011c20 <_printf_float+0x98>
 8011ec0:	f108 0801 	add.w	r8, r8, #1
 8011ec4:	e7ec      	b.n	8011ea0 <_printf_float+0x318>
 8011ec6:	4642      	mov	r2, r8
 8011ec8:	4631      	mov	r1, r6
 8011eca:	4628      	mov	r0, r5
 8011ecc:	47b8      	blx	r7
 8011ece:	3001      	adds	r0, #1
 8011ed0:	d1c1      	bne.n	8011e56 <_printf_float+0x2ce>
 8011ed2:	e6a5      	b.n	8011c20 <_printf_float+0x98>
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	4628      	mov	r0, r5
 8011eda:	9206      	str	r2, [sp, #24]
 8011edc:	47b8      	blx	r7
 8011ede:	3001      	adds	r0, #1
 8011ee0:	f43f ae9e 	beq.w	8011c20 <_printf_float+0x98>
 8011ee4:	9b07      	ldr	r3, [sp, #28]
 8011ee6:	9a06      	ldr	r2, [sp, #24]
 8011ee8:	3301      	adds	r3, #1
 8011eea:	9307      	str	r3, [sp, #28]
 8011eec:	e7b9      	b.n	8011e62 <_printf_float+0x2da>
 8011eee:	9b05      	ldr	r3, [sp, #20]
 8011ef0:	465a      	mov	r2, fp
 8011ef2:	4631      	mov	r1, r6
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	47b8      	blx	r7
 8011ef8:	3001      	adds	r0, #1
 8011efa:	d1bf      	bne.n	8011e7c <_printf_float+0x2f4>
 8011efc:	e690      	b.n	8011c20 <_printf_float+0x98>
 8011efe:	9a06      	ldr	r2, [sp, #24]
 8011f00:	464b      	mov	r3, r9
 8011f02:	4442      	add	r2, r8
 8011f04:	4631      	mov	r1, r6
 8011f06:	4628      	mov	r0, r5
 8011f08:	47b8      	blx	r7
 8011f0a:	3001      	adds	r0, #1
 8011f0c:	d1c2      	bne.n	8011e94 <_printf_float+0x30c>
 8011f0e:	e687      	b.n	8011c20 <_printf_float+0x98>
 8011f10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011f14:	f1b9 0f01 	cmp.w	r9, #1
 8011f18:	dc01      	bgt.n	8011f1e <_printf_float+0x396>
 8011f1a:	07db      	lsls	r3, r3, #31
 8011f1c:	d536      	bpl.n	8011f8c <_printf_float+0x404>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	4642      	mov	r2, r8
 8011f22:	4631      	mov	r1, r6
 8011f24:	4628      	mov	r0, r5
 8011f26:	47b8      	blx	r7
 8011f28:	3001      	adds	r0, #1
 8011f2a:	f43f ae79 	beq.w	8011c20 <_printf_float+0x98>
 8011f2e:	9b05      	ldr	r3, [sp, #20]
 8011f30:	465a      	mov	r2, fp
 8011f32:	4631      	mov	r1, r6
 8011f34:	4628      	mov	r0, r5
 8011f36:	47b8      	blx	r7
 8011f38:	3001      	adds	r0, #1
 8011f3a:	f43f ae71 	beq.w	8011c20 <_printf_float+0x98>
 8011f3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011f42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8011f4e:	d018      	beq.n	8011f82 <_printf_float+0x3fa>
 8011f50:	464b      	mov	r3, r9
 8011f52:	f108 0201 	add.w	r2, r8, #1
 8011f56:	4631      	mov	r1, r6
 8011f58:	4628      	mov	r0, r5
 8011f5a:	47b8      	blx	r7
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	d10c      	bne.n	8011f7a <_printf_float+0x3f2>
 8011f60:	e65e      	b.n	8011c20 <_printf_float+0x98>
 8011f62:	2301      	movs	r3, #1
 8011f64:	465a      	mov	r2, fp
 8011f66:	4631      	mov	r1, r6
 8011f68:	4628      	mov	r0, r5
 8011f6a:	47b8      	blx	r7
 8011f6c:	3001      	adds	r0, #1
 8011f6e:	f43f ae57 	beq.w	8011c20 <_printf_float+0x98>
 8011f72:	f108 0801 	add.w	r8, r8, #1
 8011f76:	45c8      	cmp	r8, r9
 8011f78:	dbf3      	blt.n	8011f62 <_printf_float+0x3da>
 8011f7a:	4653      	mov	r3, sl
 8011f7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011f80:	e6dc      	b.n	8011d3c <_printf_float+0x1b4>
 8011f82:	f04f 0800 	mov.w	r8, #0
 8011f86:	f104 0b1a 	add.w	fp, r4, #26
 8011f8a:	e7f4      	b.n	8011f76 <_printf_float+0x3ee>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	4642      	mov	r2, r8
 8011f90:	e7e1      	b.n	8011f56 <_printf_float+0x3ce>
 8011f92:	2301      	movs	r3, #1
 8011f94:	464a      	mov	r2, r9
 8011f96:	4631      	mov	r1, r6
 8011f98:	4628      	mov	r0, r5
 8011f9a:	47b8      	blx	r7
 8011f9c:	3001      	adds	r0, #1
 8011f9e:	f43f ae3f 	beq.w	8011c20 <_printf_float+0x98>
 8011fa2:	f108 0801 	add.w	r8, r8, #1
 8011fa6:	68e3      	ldr	r3, [r4, #12]
 8011fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011faa:	1a5b      	subs	r3, r3, r1
 8011fac:	4543      	cmp	r3, r8
 8011fae:	dcf0      	bgt.n	8011f92 <_printf_float+0x40a>
 8011fb0:	e6f8      	b.n	8011da4 <_printf_float+0x21c>
 8011fb2:	f04f 0800 	mov.w	r8, #0
 8011fb6:	f104 0919 	add.w	r9, r4, #25
 8011fba:	e7f4      	b.n	8011fa6 <_printf_float+0x41e>

08011fbc <_printf_common>:
 8011fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc0:	4616      	mov	r6, r2
 8011fc2:	4698      	mov	r8, r3
 8011fc4:	688a      	ldr	r2, [r1, #8]
 8011fc6:	690b      	ldr	r3, [r1, #16]
 8011fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	bfb8      	it	lt
 8011fd0:	4613      	movlt	r3, r2
 8011fd2:	6033      	str	r3, [r6, #0]
 8011fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011fd8:	4607      	mov	r7, r0
 8011fda:	460c      	mov	r4, r1
 8011fdc:	b10a      	cbz	r2, 8011fe2 <_printf_common+0x26>
 8011fde:	3301      	adds	r3, #1
 8011fe0:	6033      	str	r3, [r6, #0]
 8011fe2:	6823      	ldr	r3, [r4, #0]
 8011fe4:	0699      	lsls	r1, r3, #26
 8011fe6:	bf42      	ittt	mi
 8011fe8:	6833      	ldrmi	r3, [r6, #0]
 8011fea:	3302      	addmi	r3, #2
 8011fec:	6033      	strmi	r3, [r6, #0]
 8011fee:	6825      	ldr	r5, [r4, #0]
 8011ff0:	f015 0506 	ands.w	r5, r5, #6
 8011ff4:	d106      	bne.n	8012004 <_printf_common+0x48>
 8011ff6:	f104 0a19 	add.w	sl, r4, #25
 8011ffa:	68e3      	ldr	r3, [r4, #12]
 8011ffc:	6832      	ldr	r2, [r6, #0]
 8011ffe:	1a9b      	subs	r3, r3, r2
 8012000:	42ab      	cmp	r3, r5
 8012002:	dc26      	bgt.n	8012052 <_printf_common+0x96>
 8012004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012008:	6822      	ldr	r2, [r4, #0]
 801200a:	3b00      	subs	r3, #0
 801200c:	bf18      	it	ne
 801200e:	2301      	movne	r3, #1
 8012010:	0692      	lsls	r2, r2, #26
 8012012:	d42b      	bmi.n	801206c <_printf_common+0xb0>
 8012014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012018:	4641      	mov	r1, r8
 801201a:	4638      	mov	r0, r7
 801201c:	47c8      	blx	r9
 801201e:	3001      	adds	r0, #1
 8012020:	d01e      	beq.n	8012060 <_printf_common+0xa4>
 8012022:	6823      	ldr	r3, [r4, #0]
 8012024:	6922      	ldr	r2, [r4, #16]
 8012026:	f003 0306 	and.w	r3, r3, #6
 801202a:	2b04      	cmp	r3, #4
 801202c:	bf02      	ittt	eq
 801202e:	68e5      	ldreq	r5, [r4, #12]
 8012030:	6833      	ldreq	r3, [r6, #0]
 8012032:	1aed      	subeq	r5, r5, r3
 8012034:	68a3      	ldr	r3, [r4, #8]
 8012036:	bf0c      	ite	eq
 8012038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801203c:	2500      	movne	r5, #0
 801203e:	4293      	cmp	r3, r2
 8012040:	bfc4      	itt	gt
 8012042:	1a9b      	subgt	r3, r3, r2
 8012044:	18ed      	addgt	r5, r5, r3
 8012046:	2600      	movs	r6, #0
 8012048:	341a      	adds	r4, #26
 801204a:	42b5      	cmp	r5, r6
 801204c:	d11a      	bne.n	8012084 <_printf_common+0xc8>
 801204e:	2000      	movs	r0, #0
 8012050:	e008      	b.n	8012064 <_printf_common+0xa8>
 8012052:	2301      	movs	r3, #1
 8012054:	4652      	mov	r2, sl
 8012056:	4641      	mov	r1, r8
 8012058:	4638      	mov	r0, r7
 801205a:	47c8      	blx	r9
 801205c:	3001      	adds	r0, #1
 801205e:	d103      	bne.n	8012068 <_printf_common+0xac>
 8012060:	f04f 30ff 	mov.w	r0, #4294967295
 8012064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012068:	3501      	adds	r5, #1
 801206a:	e7c6      	b.n	8011ffa <_printf_common+0x3e>
 801206c:	18e1      	adds	r1, r4, r3
 801206e:	1c5a      	adds	r2, r3, #1
 8012070:	2030      	movs	r0, #48	@ 0x30
 8012072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012076:	4422      	add	r2, r4
 8012078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801207c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012080:	3302      	adds	r3, #2
 8012082:	e7c7      	b.n	8012014 <_printf_common+0x58>
 8012084:	2301      	movs	r3, #1
 8012086:	4622      	mov	r2, r4
 8012088:	4641      	mov	r1, r8
 801208a:	4638      	mov	r0, r7
 801208c:	47c8      	blx	r9
 801208e:	3001      	adds	r0, #1
 8012090:	d0e6      	beq.n	8012060 <_printf_common+0xa4>
 8012092:	3601      	adds	r6, #1
 8012094:	e7d9      	b.n	801204a <_printf_common+0x8e>
	...

08012098 <_printf_i>:
 8012098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801209c:	7e0f      	ldrb	r7, [r1, #24]
 801209e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80120a0:	2f78      	cmp	r7, #120	@ 0x78
 80120a2:	4691      	mov	r9, r2
 80120a4:	4680      	mov	r8, r0
 80120a6:	460c      	mov	r4, r1
 80120a8:	469a      	mov	sl, r3
 80120aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80120ae:	d807      	bhi.n	80120c0 <_printf_i+0x28>
 80120b0:	2f62      	cmp	r7, #98	@ 0x62
 80120b2:	d80a      	bhi.n	80120ca <_printf_i+0x32>
 80120b4:	2f00      	cmp	r7, #0
 80120b6:	f000 80d2 	beq.w	801225e <_printf_i+0x1c6>
 80120ba:	2f58      	cmp	r7, #88	@ 0x58
 80120bc:	f000 80b9 	beq.w	8012232 <_printf_i+0x19a>
 80120c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80120c8:	e03a      	b.n	8012140 <_printf_i+0xa8>
 80120ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120ce:	2b15      	cmp	r3, #21
 80120d0:	d8f6      	bhi.n	80120c0 <_printf_i+0x28>
 80120d2:	a101      	add	r1, pc, #4	@ (adr r1, 80120d8 <_printf_i+0x40>)
 80120d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120d8:	08012131 	.word	0x08012131
 80120dc:	08012145 	.word	0x08012145
 80120e0:	080120c1 	.word	0x080120c1
 80120e4:	080120c1 	.word	0x080120c1
 80120e8:	080120c1 	.word	0x080120c1
 80120ec:	080120c1 	.word	0x080120c1
 80120f0:	08012145 	.word	0x08012145
 80120f4:	080120c1 	.word	0x080120c1
 80120f8:	080120c1 	.word	0x080120c1
 80120fc:	080120c1 	.word	0x080120c1
 8012100:	080120c1 	.word	0x080120c1
 8012104:	08012245 	.word	0x08012245
 8012108:	0801216f 	.word	0x0801216f
 801210c:	080121ff 	.word	0x080121ff
 8012110:	080120c1 	.word	0x080120c1
 8012114:	080120c1 	.word	0x080120c1
 8012118:	08012267 	.word	0x08012267
 801211c:	080120c1 	.word	0x080120c1
 8012120:	0801216f 	.word	0x0801216f
 8012124:	080120c1 	.word	0x080120c1
 8012128:	080120c1 	.word	0x080120c1
 801212c:	08012207 	.word	0x08012207
 8012130:	6833      	ldr	r3, [r6, #0]
 8012132:	1d1a      	adds	r2, r3, #4
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	6032      	str	r2, [r6, #0]
 8012138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801213c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012140:	2301      	movs	r3, #1
 8012142:	e09d      	b.n	8012280 <_printf_i+0x1e8>
 8012144:	6833      	ldr	r3, [r6, #0]
 8012146:	6820      	ldr	r0, [r4, #0]
 8012148:	1d19      	adds	r1, r3, #4
 801214a:	6031      	str	r1, [r6, #0]
 801214c:	0606      	lsls	r6, r0, #24
 801214e:	d501      	bpl.n	8012154 <_printf_i+0xbc>
 8012150:	681d      	ldr	r5, [r3, #0]
 8012152:	e003      	b.n	801215c <_printf_i+0xc4>
 8012154:	0645      	lsls	r5, r0, #25
 8012156:	d5fb      	bpl.n	8012150 <_printf_i+0xb8>
 8012158:	f9b3 5000 	ldrsh.w	r5, [r3]
 801215c:	2d00      	cmp	r5, #0
 801215e:	da03      	bge.n	8012168 <_printf_i+0xd0>
 8012160:	232d      	movs	r3, #45	@ 0x2d
 8012162:	426d      	negs	r5, r5
 8012164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012168:	4859      	ldr	r0, [pc, #356]	@ (80122d0 <_printf_i+0x238>)
 801216a:	230a      	movs	r3, #10
 801216c:	e011      	b.n	8012192 <_printf_i+0xfa>
 801216e:	6821      	ldr	r1, [r4, #0]
 8012170:	6833      	ldr	r3, [r6, #0]
 8012172:	0608      	lsls	r0, r1, #24
 8012174:	f853 5b04 	ldr.w	r5, [r3], #4
 8012178:	d402      	bmi.n	8012180 <_printf_i+0xe8>
 801217a:	0649      	lsls	r1, r1, #25
 801217c:	bf48      	it	mi
 801217e:	b2ad      	uxthmi	r5, r5
 8012180:	2f6f      	cmp	r7, #111	@ 0x6f
 8012182:	4853      	ldr	r0, [pc, #332]	@ (80122d0 <_printf_i+0x238>)
 8012184:	6033      	str	r3, [r6, #0]
 8012186:	bf14      	ite	ne
 8012188:	230a      	movne	r3, #10
 801218a:	2308      	moveq	r3, #8
 801218c:	2100      	movs	r1, #0
 801218e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012192:	6866      	ldr	r6, [r4, #4]
 8012194:	60a6      	str	r6, [r4, #8]
 8012196:	2e00      	cmp	r6, #0
 8012198:	bfa2      	ittt	ge
 801219a:	6821      	ldrge	r1, [r4, #0]
 801219c:	f021 0104 	bicge.w	r1, r1, #4
 80121a0:	6021      	strge	r1, [r4, #0]
 80121a2:	b90d      	cbnz	r5, 80121a8 <_printf_i+0x110>
 80121a4:	2e00      	cmp	r6, #0
 80121a6:	d04b      	beq.n	8012240 <_printf_i+0x1a8>
 80121a8:	4616      	mov	r6, r2
 80121aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80121ae:	fb03 5711 	mls	r7, r3, r1, r5
 80121b2:	5dc7      	ldrb	r7, [r0, r7]
 80121b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121b8:	462f      	mov	r7, r5
 80121ba:	42bb      	cmp	r3, r7
 80121bc:	460d      	mov	r5, r1
 80121be:	d9f4      	bls.n	80121aa <_printf_i+0x112>
 80121c0:	2b08      	cmp	r3, #8
 80121c2:	d10b      	bne.n	80121dc <_printf_i+0x144>
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	07df      	lsls	r7, r3, #31
 80121c8:	d508      	bpl.n	80121dc <_printf_i+0x144>
 80121ca:	6923      	ldr	r3, [r4, #16]
 80121cc:	6861      	ldr	r1, [r4, #4]
 80121ce:	4299      	cmp	r1, r3
 80121d0:	bfde      	ittt	le
 80121d2:	2330      	movle	r3, #48	@ 0x30
 80121d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80121dc:	1b92      	subs	r2, r2, r6
 80121de:	6122      	str	r2, [r4, #16]
 80121e0:	f8cd a000 	str.w	sl, [sp]
 80121e4:	464b      	mov	r3, r9
 80121e6:	aa03      	add	r2, sp, #12
 80121e8:	4621      	mov	r1, r4
 80121ea:	4640      	mov	r0, r8
 80121ec:	f7ff fee6 	bl	8011fbc <_printf_common>
 80121f0:	3001      	adds	r0, #1
 80121f2:	d14a      	bne.n	801228a <_printf_i+0x1f2>
 80121f4:	f04f 30ff 	mov.w	r0, #4294967295
 80121f8:	b004      	add	sp, #16
 80121fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121fe:	6823      	ldr	r3, [r4, #0]
 8012200:	f043 0320 	orr.w	r3, r3, #32
 8012204:	6023      	str	r3, [r4, #0]
 8012206:	4833      	ldr	r0, [pc, #204]	@ (80122d4 <_printf_i+0x23c>)
 8012208:	2778      	movs	r7, #120	@ 0x78
 801220a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801220e:	6823      	ldr	r3, [r4, #0]
 8012210:	6831      	ldr	r1, [r6, #0]
 8012212:	061f      	lsls	r7, r3, #24
 8012214:	f851 5b04 	ldr.w	r5, [r1], #4
 8012218:	d402      	bmi.n	8012220 <_printf_i+0x188>
 801221a:	065f      	lsls	r7, r3, #25
 801221c:	bf48      	it	mi
 801221e:	b2ad      	uxthmi	r5, r5
 8012220:	6031      	str	r1, [r6, #0]
 8012222:	07d9      	lsls	r1, r3, #31
 8012224:	bf44      	itt	mi
 8012226:	f043 0320 	orrmi.w	r3, r3, #32
 801222a:	6023      	strmi	r3, [r4, #0]
 801222c:	b11d      	cbz	r5, 8012236 <_printf_i+0x19e>
 801222e:	2310      	movs	r3, #16
 8012230:	e7ac      	b.n	801218c <_printf_i+0xf4>
 8012232:	4827      	ldr	r0, [pc, #156]	@ (80122d0 <_printf_i+0x238>)
 8012234:	e7e9      	b.n	801220a <_printf_i+0x172>
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	f023 0320 	bic.w	r3, r3, #32
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	e7f6      	b.n	801222e <_printf_i+0x196>
 8012240:	4616      	mov	r6, r2
 8012242:	e7bd      	b.n	80121c0 <_printf_i+0x128>
 8012244:	6833      	ldr	r3, [r6, #0]
 8012246:	6825      	ldr	r5, [r4, #0]
 8012248:	6961      	ldr	r1, [r4, #20]
 801224a:	1d18      	adds	r0, r3, #4
 801224c:	6030      	str	r0, [r6, #0]
 801224e:	062e      	lsls	r6, r5, #24
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	d501      	bpl.n	8012258 <_printf_i+0x1c0>
 8012254:	6019      	str	r1, [r3, #0]
 8012256:	e002      	b.n	801225e <_printf_i+0x1c6>
 8012258:	0668      	lsls	r0, r5, #25
 801225a:	d5fb      	bpl.n	8012254 <_printf_i+0x1bc>
 801225c:	8019      	strh	r1, [r3, #0]
 801225e:	2300      	movs	r3, #0
 8012260:	6123      	str	r3, [r4, #16]
 8012262:	4616      	mov	r6, r2
 8012264:	e7bc      	b.n	80121e0 <_printf_i+0x148>
 8012266:	6833      	ldr	r3, [r6, #0]
 8012268:	1d1a      	adds	r2, r3, #4
 801226a:	6032      	str	r2, [r6, #0]
 801226c:	681e      	ldr	r6, [r3, #0]
 801226e:	6862      	ldr	r2, [r4, #4]
 8012270:	2100      	movs	r1, #0
 8012272:	4630      	mov	r0, r6
 8012274:	f7ee f834 	bl	80002e0 <memchr>
 8012278:	b108      	cbz	r0, 801227e <_printf_i+0x1e6>
 801227a:	1b80      	subs	r0, r0, r6
 801227c:	6060      	str	r0, [r4, #4]
 801227e:	6863      	ldr	r3, [r4, #4]
 8012280:	6123      	str	r3, [r4, #16]
 8012282:	2300      	movs	r3, #0
 8012284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012288:	e7aa      	b.n	80121e0 <_printf_i+0x148>
 801228a:	6923      	ldr	r3, [r4, #16]
 801228c:	4632      	mov	r2, r6
 801228e:	4649      	mov	r1, r9
 8012290:	4640      	mov	r0, r8
 8012292:	47d0      	blx	sl
 8012294:	3001      	adds	r0, #1
 8012296:	d0ad      	beq.n	80121f4 <_printf_i+0x15c>
 8012298:	6823      	ldr	r3, [r4, #0]
 801229a:	079b      	lsls	r3, r3, #30
 801229c:	d413      	bmi.n	80122c6 <_printf_i+0x22e>
 801229e:	68e0      	ldr	r0, [r4, #12]
 80122a0:	9b03      	ldr	r3, [sp, #12]
 80122a2:	4298      	cmp	r0, r3
 80122a4:	bfb8      	it	lt
 80122a6:	4618      	movlt	r0, r3
 80122a8:	e7a6      	b.n	80121f8 <_printf_i+0x160>
 80122aa:	2301      	movs	r3, #1
 80122ac:	4632      	mov	r2, r6
 80122ae:	4649      	mov	r1, r9
 80122b0:	4640      	mov	r0, r8
 80122b2:	47d0      	blx	sl
 80122b4:	3001      	adds	r0, #1
 80122b6:	d09d      	beq.n	80121f4 <_printf_i+0x15c>
 80122b8:	3501      	adds	r5, #1
 80122ba:	68e3      	ldr	r3, [r4, #12]
 80122bc:	9903      	ldr	r1, [sp, #12]
 80122be:	1a5b      	subs	r3, r3, r1
 80122c0:	42ab      	cmp	r3, r5
 80122c2:	dcf2      	bgt.n	80122aa <_printf_i+0x212>
 80122c4:	e7eb      	b.n	801229e <_printf_i+0x206>
 80122c6:	2500      	movs	r5, #0
 80122c8:	f104 0619 	add.w	r6, r4, #25
 80122cc:	e7f5      	b.n	80122ba <_printf_i+0x222>
 80122ce:	bf00      	nop
 80122d0:	08016b3a 	.word	0x08016b3a
 80122d4:	08016b4b 	.word	0x08016b4b

080122d8 <std>:
 80122d8:	2300      	movs	r3, #0
 80122da:	b510      	push	{r4, lr}
 80122dc:	4604      	mov	r4, r0
 80122de:	e9c0 3300 	strd	r3, r3, [r0]
 80122e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122e6:	6083      	str	r3, [r0, #8]
 80122e8:	8181      	strh	r1, [r0, #12]
 80122ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80122ec:	81c2      	strh	r2, [r0, #14]
 80122ee:	6183      	str	r3, [r0, #24]
 80122f0:	4619      	mov	r1, r3
 80122f2:	2208      	movs	r2, #8
 80122f4:	305c      	adds	r0, #92	@ 0x5c
 80122f6:	f000 f914 	bl	8012522 <memset>
 80122fa:	4b0d      	ldr	r3, [pc, #52]	@ (8012330 <std+0x58>)
 80122fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80122fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012334 <std+0x5c>)
 8012300:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012302:	4b0d      	ldr	r3, [pc, #52]	@ (8012338 <std+0x60>)
 8012304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012306:	4b0d      	ldr	r3, [pc, #52]	@ (801233c <std+0x64>)
 8012308:	6323      	str	r3, [r4, #48]	@ 0x30
 801230a:	4b0d      	ldr	r3, [pc, #52]	@ (8012340 <std+0x68>)
 801230c:	6224      	str	r4, [r4, #32]
 801230e:	429c      	cmp	r4, r3
 8012310:	d006      	beq.n	8012320 <std+0x48>
 8012312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012316:	4294      	cmp	r4, r2
 8012318:	d002      	beq.n	8012320 <std+0x48>
 801231a:	33d0      	adds	r3, #208	@ 0xd0
 801231c:	429c      	cmp	r4, r3
 801231e:	d105      	bne.n	801232c <std+0x54>
 8012320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012328:	f000 b988 	b.w	801263c <__retarget_lock_init_recursive>
 801232c:	bd10      	pop	{r4, pc}
 801232e:	bf00      	nop
 8012330:	0801249d 	.word	0x0801249d
 8012334:	080124bf 	.word	0x080124bf
 8012338:	080124f7 	.word	0x080124f7
 801233c:	0801251b 	.word	0x0801251b
 8012340:	24006f9c 	.word	0x24006f9c

08012344 <stdio_exit_handler>:
 8012344:	4a02      	ldr	r2, [pc, #8]	@ (8012350 <stdio_exit_handler+0xc>)
 8012346:	4903      	ldr	r1, [pc, #12]	@ (8012354 <stdio_exit_handler+0x10>)
 8012348:	4803      	ldr	r0, [pc, #12]	@ (8012358 <stdio_exit_handler+0x14>)
 801234a:	f000 b869 	b.w	8012420 <_fwalk_sglue>
 801234e:	bf00      	nop
 8012350:	2400012c 	.word	0x2400012c
 8012354:	08013d6d 	.word	0x08013d6d
 8012358:	2400013c 	.word	0x2400013c

0801235c <cleanup_stdio>:
 801235c:	6841      	ldr	r1, [r0, #4]
 801235e:	4b0c      	ldr	r3, [pc, #48]	@ (8012390 <cleanup_stdio+0x34>)
 8012360:	4299      	cmp	r1, r3
 8012362:	b510      	push	{r4, lr}
 8012364:	4604      	mov	r4, r0
 8012366:	d001      	beq.n	801236c <cleanup_stdio+0x10>
 8012368:	f001 fd00 	bl	8013d6c <_fflush_r>
 801236c:	68a1      	ldr	r1, [r4, #8]
 801236e:	4b09      	ldr	r3, [pc, #36]	@ (8012394 <cleanup_stdio+0x38>)
 8012370:	4299      	cmp	r1, r3
 8012372:	d002      	beq.n	801237a <cleanup_stdio+0x1e>
 8012374:	4620      	mov	r0, r4
 8012376:	f001 fcf9 	bl	8013d6c <_fflush_r>
 801237a:	68e1      	ldr	r1, [r4, #12]
 801237c:	4b06      	ldr	r3, [pc, #24]	@ (8012398 <cleanup_stdio+0x3c>)
 801237e:	4299      	cmp	r1, r3
 8012380:	d004      	beq.n	801238c <cleanup_stdio+0x30>
 8012382:	4620      	mov	r0, r4
 8012384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012388:	f001 bcf0 	b.w	8013d6c <_fflush_r>
 801238c:	bd10      	pop	{r4, pc}
 801238e:	bf00      	nop
 8012390:	24006f9c 	.word	0x24006f9c
 8012394:	24007004 	.word	0x24007004
 8012398:	2400706c 	.word	0x2400706c

0801239c <global_stdio_init.part.0>:
 801239c:	b510      	push	{r4, lr}
 801239e:	4b0b      	ldr	r3, [pc, #44]	@ (80123cc <global_stdio_init.part.0+0x30>)
 80123a0:	4c0b      	ldr	r4, [pc, #44]	@ (80123d0 <global_stdio_init.part.0+0x34>)
 80123a2:	4a0c      	ldr	r2, [pc, #48]	@ (80123d4 <global_stdio_init.part.0+0x38>)
 80123a4:	601a      	str	r2, [r3, #0]
 80123a6:	4620      	mov	r0, r4
 80123a8:	2200      	movs	r2, #0
 80123aa:	2104      	movs	r1, #4
 80123ac:	f7ff ff94 	bl	80122d8 <std>
 80123b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80123b4:	2201      	movs	r2, #1
 80123b6:	2109      	movs	r1, #9
 80123b8:	f7ff ff8e 	bl	80122d8 <std>
 80123bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80123c0:	2202      	movs	r2, #2
 80123c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123c6:	2112      	movs	r1, #18
 80123c8:	f7ff bf86 	b.w	80122d8 <std>
 80123cc:	240070d4 	.word	0x240070d4
 80123d0:	24006f9c 	.word	0x24006f9c
 80123d4:	08012345 	.word	0x08012345

080123d8 <__sfp_lock_acquire>:
 80123d8:	4801      	ldr	r0, [pc, #4]	@ (80123e0 <__sfp_lock_acquire+0x8>)
 80123da:	f000 b930 	b.w	801263e <__retarget_lock_acquire_recursive>
 80123de:	bf00      	nop
 80123e0:	240070dd 	.word	0x240070dd

080123e4 <__sfp_lock_release>:
 80123e4:	4801      	ldr	r0, [pc, #4]	@ (80123ec <__sfp_lock_release+0x8>)
 80123e6:	f000 b92b 	b.w	8012640 <__retarget_lock_release_recursive>
 80123ea:	bf00      	nop
 80123ec:	240070dd 	.word	0x240070dd

080123f0 <__sinit>:
 80123f0:	b510      	push	{r4, lr}
 80123f2:	4604      	mov	r4, r0
 80123f4:	f7ff fff0 	bl	80123d8 <__sfp_lock_acquire>
 80123f8:	6a23      	ldr	r3, [r4, #32]
 80123fa:	b11b      	cbz	r3, 8012404 <__sinit+0x14>
 80123fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012400:	f7ff bff0 	b.w	80123e4 <__sfp_lock_release>
 8012404:	4b04      	ldr	r3, [pc, #16]	@ (8012418 <__sinit+0x28>)
 8012406:	6223      	str	r3, [r4, #32]
 8012408:	4b04      	ldr	r3, [pc, #16]	@ (801241c <__sinit+0x2c>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1f5      	bne.n	80123fc <__sinit+0xc>
 8012410:	f7ff ffc4 	bl	801239c <global_stdio_init.part.0>
 8012414:	e7f2      	b.n	80123fc <__sinit+0xc>
 8012416:	bf00      	nop
 8012418:	0801235d 	.word	0x0801235d
 801241c:	240070d4 	.word	0x240070d4

08012420 <_fwalk_sglue>:
 8012420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012424:	4607      	mov	r7, r0
 8012426:	4688      	mov	r8, r1
 8012428:	4614      	mov	r4, r2
 801242a:	2600      	movs	r6, #0
 801242c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012430:	f1b9 0901 	subs.w	r9, r9, #1
 8012434:	d505      	bpl.n	8012442 <_fwalk_sglue+0x22>
 8012436:	6824      	ldr	r4, [r4, #0]
 8012438:	2c00      	cmp	r4, #0
 801243a:	d1f7      	bne.n	801242c <_fwalk_sglue+0xc>
 801243c:	4630      	mov	r0, r6
 801243e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012442:	89ab      	ldrh	r3, [r5, #12]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d907      	bls.n	8012458 <_fwalk_sglue+0x38>
 8012448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801244c:	3301      	adds	r3, #1
 801244e:	d003      	beq.n	8012458 <_fwalk_sglue+0x38>
 8012450:	4629      	mov	r1, r5
 8012452:	4638      	mov	r0, r7
 8012454:	47c0      	blx	r8
 8012456:	4306      	orrs	r6, r0
 8012458:	3568      	adds	r5, #104	@ 0x68
 801245a:	e7e9      	b.n	8012430 <_fwalk_sglue+0x10>

0801245c <siprintf>:
 801245c:	b40e      	push	{r1, r2, r3}
 801245e:	b500      	push	{lr}
 8012460:	b09c      	sub	sp, #112	@ 0x70
 8012462:	ab1d      	add	r3, sp, #116	@ 0x74
 8012464:	9002      	str	r0, [sp, #8]
 8012466:	9006      	str	r0, [sp, #24]
 8012468:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801246c:	4809      	ldr	r0, [pc, #36]	@ (8012494 <siprintf+0x38>)
 801246e:	9107      	str	r1, [sp, #28]
 8012470:	9104      	str	r1, [sp, #16]
 8012472:	4909      	ldr	r1, [pc, #36]	@ (8012498 <siprintf+0x3c>)
 8012474:	f853 2b04 	ldr.w	r2, [r3], #4
 8012478:	9105      	str	r1, [sp, #20]
 801247a:	6800      	ldr	r0, [r0, #0]
 801247c:	9301      	str	r3, [sp, #4]
 801247e:	a902      	add	r1, sp, #8
 8012480:	f001 faf4 	bl	8013a6c <_svfiprintf_r>
 8012484:	9b02      	ldr	r3, [sp, #8]
 8012486:	2200      	movs	r2, #0
 8012488:	701a      	strb	r2, [r3, #0]
 801248a:	b01c      	add	sp, #112	@ 0x70
 801248c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012490:	b003      	add	sp, #12
 8012492:	4770      	bx	lr
 8012494:	24000138 	.word	0x24000138
 8012498:	ffff0208 	.word	0xffff0208

0801249c <__sread>:
 801249c:	b510      	push	{r4, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124a4:	f000 f86c 	bl	8012580 <_read_r>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	bfab      	itete	ge
 80124ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80124ae:	89a3      	ldrhlt	r3, [r4, #12]
 80124b0:	181b      	addge	r3, r3, r0
 80124b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80124b6:	bfac      	ite	ge
 80124b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80124ba:	81a3      	strhlt	r3, [r4, #12]
 80124bc:	bd10      	pop	{r4, pc}

080124be <__swrite>:
 80124be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124c2:	461f      	mov	r7, r3
 80124c4:	898b      	ldrh	r3, [r1, #12]
 80124c6:	05db      	lsls	r3, r3, #23
 80124c8:	4605      	mov	r5, r0
 80124ca:	460c      	mov	r4, r1
 80124cc:	4616      	mov	r6, r2
 80124ce:	d505      	bpl.n	80124dc <__swrite+0x1e>
 80124d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124d4:	2302      	movs	r3, #2
 80124d6:	2200      	movs	r2, #0
 80124d8:	f000 f840 	bl	801255c <_lseek_r>
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	4632      	mov	r2, r6
 80124ea:	463b      	mov	r3, r7
 80124ec:	4628      	mov	r0, r5
 80124ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124f2:	f000 b867 	b.w	80125c4 <_write_r>

080124f6 <__sseek>:
 80124f6:	b510      	push	{r4, lr}
 80124f8:	460c      	mov	r4, r1
 80124fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124fe:	f000 f82d 	bl	801255c <_lseek_r>
 8012502:	1c43      	adds	r3, r0, #1
 8012504:	89a3      	ldrh	r3, [r4, #12]
 8012506:	bf15      	itete	ne
 8012508:	6560      	strne	r0, [r4, #84]	@ 0x54
 801250a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801250e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012512:	81a3      	strheq	r3, [r4, #12]
 8012514:	bf18      	it	ne
 8012516:	81a3      	strhne	r3, [r4, #12]
 8012518:	bd10      	pop	{r4, pc}

0801251a <__sclose>:
 801251a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801251e:	f000 b80d 	b.w	801253c <_close_r>

08012522 <memset>:
 8012522:	4402      	add	r2, r0
 8012524:	4603      	mov	r3, r0
 8012526:	4293      	cmp	r3, r2
 8012528:	d100      	bne.n	801252c <memset+0xa>
 801252a:	4770      	bx	lr
 801252c:	f803 1b01 	strb.w	r1, [r3], #1
 8012530:	e7f9      	b.n	8012526 <memset+0x4>
	...

08012534 <_localeconv_r>:
 8012534:	4800      	ldr	r0, [pc, #0]	@ (8012538 <_localeconv_r+0x4>)
 8012536:	4770      	bx	lr
 8012538:	24000278 	.word	0x24000278

0801253c <_close_r>:
 801253c:	b538      	push	{r3, r4, r5, lr}
 801253e:	4d06      	ldr	r5, [pc, #24]	@ (8012558 <_close_r+0x1c>)
 8012540:	2300      	movs	r3, #0
 8012542:	4604      	mov	r4, r0
 8012544:	4608      	mov	r0, r1
 8012546:	602b      	str	r3, [r5, #0]
 8012548:	f7ee ff78 	bl	800143c <_close>
 801254c:	1c43      	adds	r3, r0, #1
 801254e:	d102      	bne.n	8012556 <_close_r+0x1a>
 8012550:	682b      	ldr	r3, [r5, #0]
 8012552:	b103      	cbz	r3, 8012556 <_close_r+0x1a>
 8012554:	6023      	str	r3, [r4, #0]
 8012556:	bd38      	pop	{r3, r4, r5, pc}
 8012558:	240070d8 	.word	0x240070d8

0801255c <_lseek_r>:
 801255c:	b538      	push	{r3, r4, r5, lr}
 801255e:	4d07      	ldr	r5, [pc, #28]	@ (801257c <_lseek_r+0x20>)
 8012560:	4604      	mov	r4, r0
 8012562:	4608      	mov	r0, r1
 8012564:	4611      	mov	r1, r2
 8012566:	2200      	movs	r2, #0
 8012568:	602a      	str	r2, [r5, #0]
 801256a:	461a      	mov	r2, r3
 801256c:	f7ee ff8d 	bl	800148a <_lseek>
 8012570:	1c43      	adds	r3, r0, #1
 8012572:	d102      	bne.n	801257a <_lseek_r+0x1e>
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	b103      	cbz	r3, 801257a <_lseek_r+0x1e>
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	bd38      	pop	{r3, r4, r5, pc}
 801257c:	240070d8 	.word	0x240070d8

08012580 <_read_r>:
 8012580:	b538      	push	{r3, r4, r5, lr}
 8012582:	4d07      	ldr	r5, [pc, #28]	@ (80125a0 <_read_r+0x20>)
 8012584:	4604      	mov	r4, r0
 8012586:	4608      	mov	r0, r1
 8012588:	4611      	mov	r1, r2
 801258a:	2200      	movs	r2, #0
 801258c:	602a      	str	r2, [r5, #0]
 801258e:	461a      	mov	r2, r3
 8012590:	f7ee ff1b 	bl	80013ca <_read>
 8012594:	1c43      	adds	r3, r0, #1
 8012596:	d102      	bne.n	801259e <_read_r+0x1e>
 8012598:	682b      	ldr	r3, [r5, #0]
 801259a:	b103      	cbz	r3, 801259e <_read_r+0x1e>
 801259c:	6023      	str	r3, [r4, #0]
 801259e:	bd38      	pop	{r3, r4, r5, pc}
 80125a0:	240070d8 	.word	0x240070d8

080125a4 <_sbrk_r>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4d06      	ldr	r5, [pc, #24]	@ (80125c0 <_sbrk_r+0x1c>)
 80125a8:	2300      	movs	r3, #0
 80125aa:	4604      	mov	r4, r0
 80125ac:	4608      	mov	r0, r1
 80125ae:	602b      	str	r3, [r5, #0]
 80125b0:	f7ee ff78 	bl	80014a4 <_sbrk>
 80125b4:	1c43      	adds	r3, r0, #1
 80125b6:	d102      	bne.n	80125be <_sbrk_r+0x1a>
 80125b8:	682b      	ldr	r3, [r5, #0]
 80125ba:	b103      	cbz	r3, 80125be <_sbrk_r+0x1a>
 80125bc:	6023      	str	r3, [r4, #0]
 80125be:	bd38      	pop	{r3, r4, r5, pc}
 80125c0:	240070d8 	.word	0x240070d8

080125c4 <_write_r>:
 80125c4:	b538      	push	{r3, r4, r5, lr}
 80125c6:	4d07      	ldr	r5, [pc, #28]	@ (80125e4 <_write_r+0x20>)
 80125c8:	4604      	mov	r4, r0
 80125ca:	4608      	mov	r0, r1
 80125cc:	4611      	mov	r1, r2
 80125ce:	2200      	movs	r2, #0
 80125d0:	602a      	str	r2, [r5, #0]
 80125d2:	461a      	mov	r2, r3
 80125d4:	f7ee ff16 	bl	8001404 <_write>
 80125d8:	1c43      	adds	r3, r0, #1
 80125da:	d102      	bne.n	80125e2 <_write_r+0x1e>
 80125dc:	682b      	ldr	r3, [r5, #0]
 80125de:	b103      	cbz	r3, 80125e2 <_write_r+0x1e>
 80125e0:	6023      	str	r3, [r4, #0]
 80125e2:	bd38      	pop	{r3, r4, r5, pc}
 80125e4:	240070d8 	.word	0x240070d8

080125e8 <__errno>:
 80125e8:	4b01      	ldr	r3, [pc, #4]	@ (80125f0 <__errno+0x8>)
 80125ea:	6818      	ldr	r0, [r3, #0]
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	24000138 	.word	0x24000138

080125f4 <__libc_init_array>:
 80125f4:	b570      	push	{r4, r5, r6, lr}
 80125f6:	4d0d      	ldr	r5, [pc, #52]	@ (801262c <__libc_init_array+0x38>)
 80125f8:	4c0d      	ldr	r4, [pc, #52]	@ (8012630 <__libc_init_array+0x3c>)
 80125fa:	1b64      	subs	r4, r4, r5
 80125fc:	10a4      	asrs	r4, r4, #2
 80125fe:	2600      	movs	r6, #0
 8012600:	42a6      	cmp	r6, r4
 8012602:	d109      	bne.n	8012618 <__libc_init_array+0x24>
 8012604:	4d0b      	ldr	r5, [pc, #44]	@ (8012634 <__libc_init_array+0x40>)
 8012606:	4c0c      	ldr	r4, [pc, #48]	@ (8012638 <__libc_init_array+0x44>)
 8012608:	f002 f9bc 	bl	8014984 <_init>
 801260c:	1b64      	subs	r4, r4, r5
 801260e:	10a4      	asrs	r4, r4, #2
 8012610:	2600      	movs	r6, #0
 8012612:	42a6      	cmp	r6, r4
 8012614:	d105      	bne.n	8012622 <__libc_init_array+0x2e>
 8012616:	bd70      	pop	{r4, r5, r6, pc}
 8012618:	f855 3b04 	ldr.w	r3, [r5], #4
 801261c:	4798      	blx	r3
 801261e:	3601      	adds	r6, #1
 8012620:	e7ee      	b.n	8012600 <__libc_init_array+0xc>
 8012622:	f855 3b04 	ldr.w	r3, [r5], #4
 8012626:	4798      	blx	r3
 8012628:	3601      	adds	r6, #1
 801262a:	e7f2      	b.n	8012612 <__libc_init_array+0x1e>
 801262c:	08016eb0 	.word	0x08016eb0
 8012630:	08016eb0 	.word	0x08016eb0
 8012634:	08016eb0 	.word	0x08016eb0
 8012638:	08016eb4 	.word	0x08016eb4

0801263c <__retarget_lock_init_recursive>:
 801263c:	4770      	bx	lr

0801263e <__retarget_lock_acquire_recursive>:
 801263e:	4770      	bx	lr

08012640 <__retarget_lock_release_recursive>:
 8012640:	4770      	bx	lr

08012642 <memcpy>:
 8012642:	440a      	add	r2, r1
 8012644:	4291      	cmp	r1, r2
 8012646:	f100 33ff 	add.w	r3, r0, #4294967295
 801264a:	d100      	bne.n	801264e <memcpy+0xc>
 801264c:	4770      	bx	lr
 801264e:	b510      	push	{r4, lr}
 8012650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012658:	4291      	cmp	r1, r2
 801265a:	d1f9      	bne.n	8012650 <memcpy+0xe>
 801265c:	bd10      	pop	{r4, pc}

0801265e <quorem>:
 801265e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012662:	6903      	ldr	r3, [r0, #16]
 8012664:	690c      	ldr	r4, [r1, #16]
 8012666:	42a3      	cmp	r3, r4
 8012668:	4607      	mov	r7, r0
 801266a:	db7e      	blt.n	801276a <quorem+0x10c>
 801266c:	3c01      	subs	r4, #1
 801266e:	f101 0814 	add.w	r8, r1, #20
 8012672:	00a3      	lsls	r3, r4, #2
 8012674:	f100 0514 	add.w	r5, r0, #20
 8012678:	9300      	str	r3, [sp, #0]
 801267a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801267e:	9301      	str	r3, [sp, #4]
 8012680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012688:	3301      	adds	r3, #1
 801268a:	429a      	cmp	r2, r3
 801268c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012690:	fbb2 f6f3 	udiv	r6, r2, r3
 8012694:	d32e      	bcc.n	80126f4 <quorem+0x96>
 8012696:	f04f 0a00 	mov.w	sl, #0
 801269a:	46c4      	mov	ip, r8
 801269c:	46ae      	mov	lr, r5
 801269e:	46d3      	mov	fp, sl
 80126a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80126a4:	b298      	uxth	r0, r3
 80126a6:	fb06 a000 	mla	r0, r6, r0, sl
 80126aa:	0c02      	lsrs	r2, r0, #16
 80126ac:	0c1b      	lsrs	r3, r3, #16
 80126ae:	fb06 2303 	mla	r3, r6, r3, r2
 80126b2:	f8de 2000 	ldr.w	r2, [lr]
 80126b6:	b280      	uxth	r0, r0
 80126b8:	b292      	uxth	r2, r2
 80126ba:	1a12      	subs	r2, r2, r0
 80126bc:	445a      	add	r2, fp
 80126be:	f8de 0000 	ldr.w	r0, [lr]
 80126c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80126cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80126d0:	b292      	uxth	r2, r2
 80126d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80126d6:	45e1      	cmp	r9, ip
 80126d8:	f84e 2b04 	str.w	r2, [lr], #4
 80126dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80126e0:	d2de      	bcs.n	80126a0 <quorem+0x42>
 80126e2:	9b00      	ldr	r3, [sp, #0]
 80126e4:	58eb      	ldr	r3, [r5, r3]
 80126e6:	b92b      	cbnz	r3, 80126f4 <quorem+0x96>
 80126e8:	9b01      	ldr	r3, [sp, #4]
 80126ea:	3b04      	subs	r3, #4
 80126ec:	429d      	cmp	r5, r3
 80126ee:	461a      	mov	r2, r3
 80126f0:	d32f      	bcc.n	8012752 <quorem+0xf4>
 80126f2:	613c      	str	r4, [r7, #16]
 80126f4:	4638      	mov	r0, r7
 80126f6:	f001 f855 	bl	80137a4 <__mcmp>
 80126fa:	2800      	cmp	r0, #0
 80126fc:	db25      	blt.n	801274a <quorem+0xec>
 80126fe:	4629      	mov	r1, r5
 8012700:	2000      	movs	r0, #0
 8012702:	f858 2b04 	ldr.w	r2, [r8], #4
 8012706:	f8d1 c000 	ldr.w	ip, [r1]
 801270a:	fa1f fe82 	uxth.w	lr, r2
 801270e:	fa1f f38c 	uxth.w	r3, ip
 8012712:	eba3 030e 	sub.w	r3, r3, lr
 8012716:	4403      	add	r3, r0
 8012718:	0c12      	lsrs	r2, r2, #16
 801271a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801271e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012722:	b29b      	uxth	r3, r3
 8012724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012728:	45c1      	cmp	r9, r8
 801272a:	f841 3b04 	str.w	r3, [r1], #4
 801272e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012732:	d2e6      	bcs.n	8012702 <quorem+0xa4>
 8012734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801273c:	b922      	cbnz	r2, 8012748 <quorem+0xea>
 801273e:	3b04      	subs	r3, #4
 8012740:	429d      	cmp	r5, r3
 8012742:	461a      	mov	r2, r3
 8012744:	d30b      	bcc.n	801275e <quorem+0x100>
 8012746:	613c      	str	r4, [r7, #16]
 8012748:	3601      	adds	r6, #1
 801274a:	4630      	mov	r0, r6
 801274c:	b003      	add	sp, #12
 801274e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012752:	6812      	ldr	r2, [r2, #0]
 8012754:	3b04      	subs	r3, #4
 8012756:	2a00      	cmp	r2, #0
 8012758:	d1cb      	bne.n	80126f2 <quorem+0x94>
 801275a:	3c01      	subs	r4, #1
 801275c:	e7c6      	b.n	80126ec <quorem+0x8e>
 801275e:	6812      	ldr	r2, [r2, #0]
 8012760:	3b04      	subs	r3, #4
 8012762:	2a00      	cmp	r2, #0
 8012764:	d1ef      	bne.n	8012746 <quorem+0xe8>
 8012766:	3c01      	subs	r4, #1
 8012768:	e7ea      	b.n	8012740 <quorem+0xe2>
 801276a:	2000      	movs	r0, #0
 801276c:	e7ee      	b.n	801274c <quorem+0xee>
	...

08012770 <_dtoa_r>:
 8012770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012774:	ed2d 8b02 	vpush	{d8}
 8012778:	69c7      	ldr	r7, [r0, #28]
 801277a:	b091      	sub	sp, #68	@ 0x44
 801277c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012780:	ec55 4b10 	vmov	r4, r5, d0
 8012784:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012786:	9107      	str	r1, [sp, #28]
 8012788:	4681      	mov	r9, r0
 801278a:	9209      	str	r2, [sp, #36]	@ 0x24
 801278c:	930d      	str	r3, [sp, #52]	@ 0x34
 801278e:	b97f      	cbnz	r7, 80127b0 <_dtoa_r+0x40>
 8012790:	2010      	movs	r0, #16
 8012792:	f7ff f8b3 	bl	80118fc <malloc>
 8012796:	4602      	mov	r2, r0
 8012798:	f8c9 001c 	str.w	r0, [r9, #28]
 801279c:	b920      	cbnz	r0, 80127a8 <_dtoa_r+0x38>
 801279e:	4ba0      	ldr	r3, [pc, #640]	@ (8012a20 <_dtoa_r+0x2b0>)
 80127a0:	21ef      	movs	r1, #239	@ 0xef
 80127a2:	48a0      	ldr	r0, [pc, #640]	@ (8012a24 <_dtoa_r+0x2b4>)
 80127a4:	f001 fb24 	bl	8013df0 <__assert_func>
 80127a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80127ac:	6007      	str	r7, [r0, #0]
 80127ae:	60c7      	str	r7, [r0, #12]
 80127b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80127b4:	6819      	ldr	r1, [r3, #0]
 80127b6:	b159      	cbz	r1, 80127d0 <_dtoa_r+0x60>
 80127b8:	685a      	ldr	r2, [r3, #4]
 80127ba:	604a      	str	r2, [r1, #4]
 80127bc:	2301      	movs	r3, #1
 80127be:	4093      	lsls	r3, r2
 80127c0:	608b      	str	r3, [r1, #8]
 80127c2:	4648      	mov	r0, r9
 80127c4:	f000 fdb4 	bl	8013330 <_Bfree>
 80127c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80127cc:	2200      	movs	r2, #0
 80127ce:	601a      	str	r2, [r3, #0]
 80127d0:	1e2b      	subs	r3, r5, #0
 80127d2:	bfbb      	ittet	lt
 80127d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80127d8:	9303      	strlt	r3, [sp, #12]
 80127da:	2300      	movge	r3, #0
 80127dc:	2201      	movlt	r2, #1
 80127de:	bfac      	ite	ge
 80127e0:	6033      	strge	r3, [r6, #0]
 80127e2:	6032      	strlt	r2, [r6, #0]
 80127e4:	4b90      	ldr	r3, [pc, #576]	@ (8012a28 <_dtoa_r+0x2b8>)
 80127e6:	9e03      	ldr	r6, [sp, #12]
 80127e8:	43b3      	bics	r3, r6
 80127ea:	d110      	bne.n	801280e <_dtoa_r+0x9e>
 80127ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80127ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80127f2:	6013      	str	r3, [r2, #0]
 80127f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80127f8:	4323      	orrs	r3, r4
 80127fa:	f000 84de 	beq.w	80131ba <_dtoa_r+0xa4a>
 80127fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012800:	4f8a      	ldr	r7, [pc, #552]	@ (8012a2c <_dtoa_r+0x2bc>)
 8012802:	2b00      	cmp	r3, #0
 8012804:	f000 84e0 	beq.w	80131c8 <_dtoa_r+0xa58>
 8012808:	1cfb      	adds	r3, r7, #3
 801280a:	f000 bcdb 	b.w	80131c4 <_dtoa_r+0xa54>
 801280e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012812:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801281a:	d10a      	bne.n	8012832 <_dtoa_r+0xc2>
 801281c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801281e:	2301      	movs	r3, #1
 8012820:	6013      	str	r3, [r2, #0]
 8012822:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012824:	b113      	cbz	r3, 801282c <_dtoa_r+0xbc>
 8012826:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012828:	4b81      	ldr	r3, [pc, #516]	@ (8012a30 <_dtoa_r+0x2c0>)
 801282a:	6013      	str	r3, [r2, #0]
 801282c:	4f81      	ldr	r7, [pc, #516]	@ (8012a34 <_dtoa_r+0x2c4>)
 801282e:	f000 bccb 	b.w	80131c8 <_dtoa_r+0xa58>
 8012832:	aa0e      	add	r2, sp, #56	@ 0x38
 8012834:	a90f      	add	r1, sp, #60	@ 0x3c
 8012836:	4648      	mov	r0, r9
 8012838:	eeb0 0b48 	vmov.f64	d0, d8
 801283c:	f001 f862 	bl	8013904 <__d2b>
 8012840:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012846:	9001      	str	r0, [sp, #4]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d045      	beq.n	80128d8 <_dtoa_r+0x168>
 801284c:	eeb0 7b48 	vmov.f64	d7, d8
 8012850:	ee18 1a90 	vmov	r1, s17
 8012854:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012858:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801285c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012860:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012864:	2500      	movs	r5, #0
 8012866:	ee07 1a90 	vmov	s15, r1
 801286a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801286e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012a08 <_dtoa_r+0x298>
 8012872:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012876:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012a10 <_dtoa_r+0x2a0>
 801287a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801287e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012a18 <_dtoa_r+0x2a8>
 8012882:	ee07 3a90 	vmov	s15, r3
 8012886:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801288a:	eeb0 7b46 	vmov.f64	d7, d6
 801288e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012892:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012896:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289e:	ee16 8a90 	vmov	r8, s13
 80128a2:	d508      	bpl.n	80128b6 <_dtoa_r+0x146>
 80128a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80128a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80128ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b0:	bf18      	it	ne
 80128b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80128b6:	f1b8 0f16 	cmp.w	r8, #22
 80128ba:	d82b      	bhi.n	8012914 <_dtoa_r+0x1a4>
 80128bc:	495e      	ldr	r1, [pc, #376]	@ (8012a38 <_dtoa_r+0x2c8>)
 80128be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80128c2:	ed91 7b00 	vldr	d7, [r1]
 80128c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80128ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ce:	d501      	bpl.n	80128d4 <_dtoa_r+0x164>
 80128d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80128d4:	2100      	movs	r1, #0
 80128d6:	e01e      	b.n	8012916 <_dtoa_r+0x1a6>
 80128d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128da:	4413      	add	r3, r2
 80128dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80128e0:	2920      	cmp	r1, #32
 80128e2:	bfc1      	itttt	gt
 80128e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80128e8:	408e      	lslgt	r6, r1
 80128ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80128ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80128f2:	bfd6      	itet	le
 80128f4:	f1c1 0120 	rsble	r1, r1, #32
 80128f8:	4331      	orrgt	r1, r6
 80128fa:	fa04 f101 	lslle.w	r1, r4, r1
 80128fe:	ee07 1a90 	vmov	s15, r1
 8012902:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012906:	3b01      	subs	r3, #1
 8012908:	ee17 1a90 	vmov	r1, s15
 801290c:	2501      	movs	r5, #1
 801290e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012912:	e7a8      	b.n	8012866 <_dtoa_r+0xf6>
 8012914:	2101      	movs	r1, #1
 8012916:	1ad2      	subs	r2, r2, r3
 8012918:	1e53      	subs	r3, r2, #1
 801291a:	9306      	str	r3, [sp, #24]
 801291c:	bf45      	ittet	mi
 801291e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012922:	9305      	strmi	r3, [sp, #20]
 8012924:	2300      	movpl	r3, #0
 8012926:	2300      	movmi	r3, #0
 8012928:	bf4c      	ite	mi
 801292a:	9306      	strmi	r3, [sp, #24]
 801292c:	9305      	strpl	r3, [sp, #20]
 801292e:	f1b8 0f00 	cmp.w	r8, #0
 8012932:	910c      	str	r1, [sp, #48]	@ 0x30
 8012934:	db18      	blt.n	8012968 <_dtoa_r+0x1f8>
 8012936:	9b06      	ldr	r3, [sp, #24]
 8012938:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801293c:	4443      	add	r3, r8
 801293e:	9306      	str	r3, [sp, #24]
 8012940:	2300      	movs	r3, #0
 8012942:	9a07      	ldr	r2, [sp, #28]
 8012944:	2a09      	cmp	r2, #9
 8012946:	d849      	bhi.n	80129dc <_dtoa_r+0x26c>
 8012948:	2a05      	cmp	r2, #5
 801294a:	bfc4      	itt	gt
 801294c:	3a04      	subgt	r2, #4
 801294e:	9207      	strgt	r2, [sp, #28]
 8012950:	9a07      	ldr	r2, [sp, #28]
 8012952:	f1a2 0202 	sub.w	r2, r2, #2
 8012956:	bfcc      	ite	gt
 8012958:	2400      	movgt	r4, #0
 801295a:	2401      	movle	r4, #1
 801295c:	2a03      	cmp	r2, #3
 801295e:	d848      	bhi.n	80129f2 <_dtoa_r+0x282>
 8012960:	e8df f002 	tbb	[pc, r2]
 8012964:	3a2c2e0b 	.word	0x3a2c2e0b
 8012968:	9b05      	ldr	r3, [sp, #20]
 801296a:	2200      	movs	r2, #0
 801296c:	eba3 0308 	sub.w	r3, r3, r8
 8012970:	9305      	str	r3, [sp, #20]
 8012972:	920a      	str	r2, [sp, #40]	@ 0x28
 8012974:	f1c8 0300 	rsb	r3, r8, #0
 8012978:	e7e3      	b.n	8012942 <_dtoa_r+0x1d2>
 801297a:	2200      	movs	r2, #0
 801297c:	9208      	str	r2, [sp, #32]
 801297e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012980:	2a00      	cmp	r2, #0
 8012982:	dc39      	bgt.n	80129f8 <_dtoa_r+0x288>
 8012984:	f04f 0b01 	mov.w	fp, #1
 8012988:	46da      	mov	sl, fp
 801298a:	465a      	mov	r2, fp
 801298c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012990:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012994:	2100      	movs	r1, #0
 8012996:	2004      	movs	r0, #4
 8012998:	f100 0614 	add.w	r6, r0, #20
 801299c:	4296      	cmp	r6, r2
 801299e:	d930      	bls.n	8012a02 <_dtoa_r+0x292>
 80129a0:	6079      	str	r1, [r7, #4]
 80129a2:	4648      	mov	r0, r9
 80129a4:	9304      	str	r3, [sp, #16]
 80129a6:	f000 fc83 	bl	80132b0 <_Balloc>
 80129aa:	9b04      	ldr	r3, [sp, #16]
 80129ac:	4607      	mov	r7, r0
 80129ae:	2800      	cmp	r0, #0
 80129b0:	d146      	bne.n	8012a40 <_dtoa_r+0x2d0>
 80129b2:	4b22      	ldr	r3, [pc, #136]	@ (8012a3c <_dtoa_r+0x2cc>)
 80129b4:	4602      	mov	r2, r0
 80129b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80129ba:	e6f2      	b.n	80127a2 <_dtoa_r+0x32>
 80129bc:	2201      	movs	r2, #1
 80129be:	e7dd      	b.n	801297c <_dtoa_r+0x20c>
 80129c0:	2200      	movs	r2, #0
 80129c2:	9208      	str	r2, [sp, #32]
 80129c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129c6:	eb08 0b02 	add.w	fp, r8, r2
 80129ca:	f10b 0a01 	add.w	sl, fp, #1
 80129ce:	4652      	mov	r2, sl
 80129d0:	2a01      	cmp	r2, #1
 80129d2:	bfb8      	it	lt
 80129d4:	2201      	movlt	r2, #1
 80129d6:	e7db      	b.n	8012990 <_dtoa_r+0x220>
 80129d8:	2201      	movs	r2, #1
 80129da:	e7f2      	b.n	80129c2 <_dtoa_r+0x252>
 80129dc:	2401      	movs	r4, #1
 80129de:	2200      	movs	r2, #0
 80129e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80129e4:	f04f 3bff 	mov.w	fp, #4294967295
 80129e8:	2100      	movs	r1, #0
 80129ea:	46da      	mov	sl, fp
 80129ec:	2212      	movs	r2, #18
 80129ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80129f0:	e7ce      	b.n	8012990 <_dtoa_r+0x220>
 80129f2:	2201      	movs	r2, #1
 80129f4:	9208      	str	r2, [sp, #32]
 80129f6:	e7f5      	b.n	80129e4 <_dtoa_r+0x274>
 80129f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80129fc:	46da      	mov	sl, fp
 80129fe:	465a      	mov	r2, fp
 8012a00:	e7c6      	b.n	8012990 <_dtoa_r+0x220>
 8012a02:	3101      	adds	r1, #1
 8012a04:	0040      	lsls	r0, r0, #1
 8012a06:	e7c7      	b.n	8012998 <_dtoa_r+0x228>
 8012a08:	636f4361 	.word	0x636f4361
 8012a0c:	3fd287a7 	.word	0x3fd287a7
 8012a10:	8b60c8b3 	.word	0x8b60c8b3
 8012a14:	3fc68a28 	.word	0x3fc68a28
 8012a18:	509f79fb 	.word	0x509f79fb
 8012a1c:	3fd34413 	.word	0x3fd34413
 8012a20:	08016b69 	.word	0x08016b69
 8012a24:	08016b80 	.word	0x08016b80
 8012a28:	7ff00000 	.word	0x7ff00000
 8012a2c:	08016b65 	.word	0x08016b65
 8012a30:	08016b39 	.word	0x08016b39
 8012a34:	08016b38 	.word	0x08016b38
 8012a38:	08016c78 	.word	0x08016c78
 8012a3c:	08016bd8 	.word	0x08016bd8
 8012a40:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012a44:	f1ba 0f0e 	cmp.w	sl, #14
 8012a48:	6010      	str	r0, [r2, #0]
 8012a4a:	d86f      	bhi.n	8012b2c <_dtoa_r+0x3bc>
 8012a4c:	2c00      	cmp	r4, #0
 8012a4e:	d06d      	beq.n	8012b2c <_dtoa_r+0x3bc>
 8012a50:	f1b8 0f00 	cmp.w	r8, #0
 8012a54:	f340 80c2 	ble.w	8012bdc <_dtoa_r+0x46c>
 8012a58:	4aca      	ldr	r2, [pc, #808]	@ (8012d84 <_dtoa_r+0x614>)
 8012a5a:	f008 010f 	and.w	r1, r8, #15
 8012a5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012a62:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012a66:	ed92 7b00 	vldr	d7, [r2]
 8012a6a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012a6e:	f000 80a9 	beq.w	8012bc4 <_dtoa_r+0x454>
 8012a72:	4ac5      	ldr	r2, [pc, #788]	@ (8012d88 <_dtoa_r+0x618>)
 8012a74:	ed92 6b08 	vldr	d6, [r2, #32]
 8012a78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012a7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012a80:	f001 010f 	and.w	r1, r1, #15
 8012a84:	2203      	movs	r2, #3
 8012a86:	48c0      	ldr	r0, [pc, #768]	@ (8012d88 <_dtoa_r+0x618>)
 8012a88:	2900      	cmp	r1, #0
 8012a8a:	f040 809d 	bne.w	8012bc8 <_dtoa_r+0x458>
 8012a8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012a92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012aa0:	2900      	cmp	r1, #0
 8012aa2:	f000 80c1 	beq.w	8012c28 <_dtoa_r+0x4b8>
 8012aa6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012aaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab2:	f140 80b9 	bpl.w	8012c28 <_dtoa_r+0x4b8>
 8012ab6:	f1ba 0f00 	cmp.w	sl, #0
 8012aba:	f000 80b5 	beq.w	8012c28 <_dtoa_r+0x4b8>
 8012abe:	f1bb 0f00 	cmp.w	fp, #0
 8012ac2:	dd31      	ble.n	8012b28 <_dtoa_r+0x3b8>
 8012ac4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012ac8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012acc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012ad0:	f108 31ff 	add.w	r1, r8, #4294967295
 8012ad4:	9104      	str	r1, [sp, #16]
 8012ad6:	3201      	adds	r2, #1
 8012ad8:	465c      	mov	r4, fp
 8012ada:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012ade:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012ae2:	ee07 2a90 	vmov	s15, r2
 8012ae6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012aea:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012aee:	ee15 2a90 	vmov	r2, s11
 8012af2:	ec51 0b15 	vmov	r0, r1, d5
 8012af6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012afa:	2c00      	cmp	r4, #0
 8012afc:	f040 8098 	bne.w	8012c30 <_dtoa_r+0x4c0>
 8012b00:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012b04:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012b08:	ec41 0b17 	vmov	d7, r0, r1
 8012b0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b14:	f300 8261 	bgt.w	8012fda <_dtoa_r+0x86a>
 8012b18:	eeb1 7b47 	vneg.f64	d7, d7
 8012b1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b24:	f100 80f5 	bmi.w	8012d12 <_dtoa_r+0x5a2>
 8012b28:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012b2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012b2e:	2a00      	cmp	r2, #0
 8012b30:	f2c0 812c 	blt.w	8012d8c <_dtoa_r+0x61c>
 8012b34:	f1b8 0f0e 	cmp.w	r8, #14
 8012b38:	f300 8128 	bgt.w	8012d8c <_dtoa_r+0x61c>
 8012b3c:	4b91      	ldr	r3, [pc, #580]	@ (8012d84 <_dtoa_r+0x614>)
 8012b3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012b42:	ed93 6b00 	vldr	d6, [r3]
 8012b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	da03      	bge.n	8012b54 <_dtoa_r+0x3e4>
 8012b4c:	f1ba 0f00 	cmp.w	sl, #0
 8012b50:	f340 80d2 	ble.w	8012cf8 <_dtoa_r+0x588>
 8012b54:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b5c:	463e      	mov	r6, r7
 8012b5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012b62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012b66:	ee15 3a10 	vmov	r3, s10
 8012b6a:	3330      	adds	r3, #48	@ 0x30
 8012b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8012b70:	1bf3      	subs	r3, r6, r7
 8012b72:	459a      	cmp	sl, r3
 8012b74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012b78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012b7c:	f040 80f8 	bne.w	8012d70 <_dtoa_r+0x600>
 8012b80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012b84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b8c:	f300 80dd 	bgt.w	8012d4a <_dtoa_r+0x5da>
 8012b90:	eeb4 7b46 	vcmp.f64	d7, d6
 8012b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b98:	d104      	bne.n	8012ba4 <_dtoa_r+0x434>
 8012b9a:	ee15 3a10 	vmov	r3, s10
 8012b9e:	07db      	lsls	r3, r3, #31
 8012ba0:	f100 80d3 	bmi.w	8012d4a <_dtoa_r+0x5da>
 8012ba4:	9901      	ldr	r1, [sp, #4]
 8012ba6:	4648      	mov	r0, r9
 8012ba8:	f000 fbc2 	bl	8013330 <_Bfree>
 8012bac:	2300      	movs	r3, #0
 8012bae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012bb0:	7033      	strb	r3, [r6, #0]
 8012bb2:	f108 0301 	add.w	r3, r8, #1
 8012bb6:	6013      	str	r3, [r2, #0]
 8012bb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	f000 8304 	beq.w	80131c8 <_dtoa_r+0xa58>
 8012bc0:	601e      	str	r6, [r3, #0]
 8012bc2:	e301      	b.n	80131c8 <_dtoa_r+0xa58>
 8012bc4:	2202      	movs	r2, #2
 8012bc6:	e75e      	b.n	8012a86 <_dtoa_r+0x316>
 8012bc8:	07cc      	lsls	r4, r1, #31
 8012bca:	d504      	bpl.n	8012bd6 <_dtoa_r+0x466>
 8012bcc:	ed90 6b00 	vldr	d6, [r0]
 8012bd0:	3201      	adds	r2, #1
 8012bd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012bd6:	1049      	asrs	r1, r1, #1
 8012bd8:	3008      	adds	r0, #8
 8012bda:	e755      	b.n	8012a88 <_dtoa_r+0x318>
 8012bdc:	d022      	beq.n	8012c24 <_dtoa_r+0x4b4>
 8012bde:	f1c8 0100 	rsb	r1, r8, #0
 8012be2:	4a68      	ldr	r2, [pc, #416]	@ (8012d84 <_dtoa_r+0x614>)
 8012be4:	f001 000f 	and.w	r0, r1, #15
 8012be8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012bec:	ed92 7b00 	vldr	d7, [r2]
 8012bf0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012bf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012bf8:	4863      	ldr	r0, [pc, #396]	@ (8012d88 <_dtoa_r+0x618>)
 8012bfa:	1109      	asrs	r1, r1, #4
 8012bfc:	2400      	movs	r4, #0
 8012bfe:	2202      	movs	r2, #2
 8012c00:	b929      	cbnz	r1, 8012c0e <_dtoa_r+0x49e>
 8012c02:	2c00      	cmp	r4, #0
 8012c04:	f43f af49 	beq.w	8012a9a <_dtoa_r+0x32a>
 8012c08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c0c:	e745      	b.n	8012a9a <_dtoa_r+0x32a>
 8012c0e:	07ce      	lsls	r6, r1, #31
 8012c10:	d505      	bpl.n	8012c1e <_dtoa_r+0x4ae>
 8012c12:	ed90 6b00 	vldr	d6, [r0]
 8012c16:	3201      	adds	r2, #1
 8012c18:	2401      	movs	r4, #1
 8012c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c1e:	1049      	asrs	r1, r1, #1
 8012c20:	3008      	adds	r0, #8
 8012c22:	e7ed      	b.n	8012c00 <_dtoa_r+0x490>
 8012c24:	2202      	movs	r2, #2
 8012c26:	e738      	b.n	8012a9a <_dtoa_r+0x32a>
 8012c28:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c2c:	4654      	mov	r4, sl
 8012c2e:	e754      	b.n	8012ada <_dtoa_r+0x36a>
 8012c30:	4a54      	ldr	r2, [pc, #336]	@ (8012d84 <_dtoa_r+0x614>)
 8012c32:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012c36:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012c3a:	9a08      	ldr	r2, [sp, #32]
 8012c3c:	ec41 0b17 	vmov	d7, r0, r1
 8012c40:	443c      	add	r4, r7
 8012c42:	b34a      	cbz	r2, 8012c98 <_dtoa_r+0x528>
 8012c44:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012c48:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012c4c:	463e      	mov	r6, r7
 8012c4e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012c52:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012c56:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012c5a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012c5e:	ee14 2a90 	vmov	r2, s9
 8012c62:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012c66:	3230      	adds	r2, #48	@ 0x30
 8012c68:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012c6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c74:	f806 2b01 	strb.w	r2, [r6], #1
 8012c78:	d438      	bmi.n	8012cec <_dtoa_r+0x57c>
 8012c7a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012c7e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c86:	d462      	bmi.n	8012d4e <_dtoa_r+0x5de>
 8012c88:	42a6      	cmp	r6, r4
 8012c8a:	f43f af4d 	beq.w	8012b28 <_dtoa_r+0x3b8>
 8012c8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012c92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012c96:	e7e0      	b.n	8012c5a <_dtoa_r+0x4ea>
 8012c98:	4621      	mov	r1, r4
 8012c9a:	463e      	mov	r6, r7
 8012c9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012ca0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012ca4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012ca8:	ee14 2a90 	vmov	r2, s9
 8012cac:	3230      	adds	r2, #48	@ 0x30
 8012cae:	f806 2b01 	strb.w	r2, [r6], #1
 8012cb2:	42a6      	cmp	r6, r4
 8012cb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012cb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012cbc:	d119      	bne.n	8012cf2 <_dtoa_r+0x582>
 8012cbe:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012cc2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012cc6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cce:	dc3e      	bgt.n	8012d4e <_dtoa_r+0x5de>
 8012cd0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012cd4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cdc:	f57f af24 	bpl.w	8012b28 <_dtoa_r+0x3b8>
 8012ce0:	460e      	mov	r6, r1
 8012ce2:	3901      	subs	r1, #1
 8012ce4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012ce8:	2b30      	cmp	r3, #48	@ 0x30
 8012cea:	d0f9      	beq.n	8012ce0 <_dtoa_r+0x570>
 8012cec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012cf0:	e758      	b.n	8012ba4 <_dtoa_r+0x434>
 8012cf2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012cf6:	e7d5      	b.n	8012ca4 <_dtoa_r+0x534>
 8012cf8:	d10b      	bne.n	8012d12 <_dtoa_r+0x5a2>
 8012cfa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012cfe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d0e:	f2c0 8161 	blt.w	8012fd4 <_dtoa_r+0x864>
 8012d12:	2400      	movs	r4, #0
 8012d14:	4625      	mov	r5, r4
 8012d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d18:	43db      	mvns	r3, r3
 8012d1a:	9304      	str	r3, [sp, #16]
 8012d1c:	463e      	mov	r6, r7
 8012d1e:	f04f 0800 	mov.w	r8, #0
 8012d22:	4621      	mov	r1, r4
 8012d24:	4648      	mov	r0, r9
 8012d26:	f000 fb03 	bl	8013330 <_Bfree>
 8012d2a:	2d00      	cmp	r5, #0
 8012d2c:	d0de      	beq.n	8012cec <_dtoa_r+0x57c>
 8012d2e:	f1b8 0f00 	cmp.w	r8, #0
 8012d32:	d005      	beq.n	8012d40 <_dtoa_r+0x5d0>
 8012d34:	45a8      	cmp	r8, r5
 8012d36:	d003      	beq.n	8012d40 <_dtoa_r+0x5d0>
 8012d38:	4641      	mov	r1, r8
 8012d3a:	4648      	mov	r0, r9
 8012d3c:	f000 faf8 	bl	8013330 <_Bfree>
 8012d40:	4629      	mov	r1, r5
 8012d42:	4648      	mov	r0, r9
 8012d44:	f000 faf4 	bl	8013330 <_Bfree>
 8012d48:	e7d0      	b.n	8012cec <_dtoa_r+0x57c>
 8012d4a:	f8cd 8010 	str.w	r8, [sp, #16]
 8012d4e:	4633      	mov	r3, r6
 8012d50:	461e      	mov	r6, r3
 8012d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d56:	2a39      	cmp	r2, #57	@ 0x39
 8012d58:	d106      	bne.n	8012d68 <_dtoa_r+0x5f8>
 8012d5a:	429f      	cmp	r7, r3
 8012d5c:	d1f8      	bne.n	8012d50 <_dtoa_r+0x5e0>
 8012d5e:	9a04      	ldr	r2, [sp, #16]
 8012d60:	3201      	adds	r2, #1
 8012d62:	9204      	str	r2, [sp, #16]
 8012d64:	2230      	movs	r2, #48	@ 0x30
 8012d66:	703a      	strb	r2, [r7, #0]
 8012d68:	781a      	ldrb	r2, [r3, #0]
 8012d6a:	3201      	adds	r2, #1
 8012d6c:	701a      	strb	r2, [r3, #0]
 8012d6e:	e7bd      	b.n	8012cec <_dtoa_r+0x57c>
 8012d70:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012d74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7c:	f47f aeef 	bne.w	8012b5e <_dtoa_r+0x3ee>
 8012d80:	e710      	b.n	8012ba4 <_dtoa_r+0x434>
 8012d82:	bf00      	nop
 8012d84:	08016c78 	.word	0x08016c78
 8012d88:	08016c50 	.word	0x08016c50
 8012d8c:	9908      	ldr	r1, [sp, #32]
 8012d8e:	2900      	cmp	r1, #0
 8012d90:	f000 80e3 	beq.w	8012f5a <_dtoa_r+0x7ea>
 8012d94:	9907      	ldr	r1, [sp, #28]
 8012d96:	2901      	cmp	r1, #1
 8012d98:	f300 80c8 	bgt.w	8012f2c <_dtoa_r+0x7bc>
 8012d9c:	2d00      	cmp	r5, #0
 8012d9e:	f000 80c1 	beq.w	8012f24 <_dtoa_r+0x7b4>
 8012da2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012da6:	9e05      	ldr	r6, [sp, #20]
 8012da8:	461c      	mov	r4, r3
 8012daa:	9304      	str	r3, [sp, #16]
 8012dac:	9b05      	ldr	r3, [sp, #20]
 8012dae:	4413      	add	r3, r2
 8012db0:	9305      	str	r3, [sp, #20]
 8012db2:	9b06      	ldr	r3, [sp, #24]
 8012db4:	2101      	movs	r1, #1
 8012db6:	4413      	add	r3, r2
 8012db8:	4648      	mov	r0, r9
 8012dba:	9306      	str	r3, [sp, #24]
 8012dbc:	f000 fb6c 	bl	8013498 <__i2b>
 8012dc0:	9b04      	ldr	r3, [sp, #16]
 8012dc2:	4605      	mov	r5, r0
 8012dc4:	b166      	cbz	r6, 8012de0 <_dtoa_r+0x670>
 8012dc6:	9a06      	ldr	r2, [sp, #24]
 8012dc8:	2a00      	cmp	r2, #0
 8012dca:	dd09      	ble.n	8012de0 <_dtoa_r+0x670>
 8012dcc:	42b2      	cmp	r2, r6
 8012dce:	9905      	ldr	r1, [sp, #20]
 8012dd0:	bfa8      	it	ge
 8012dd2:	4632      	movge	r2, r6
 8012dd4:	1a89      	subs	r1, r1, r2
 8012dd6:	9105      	str	r1, [sp, #20]
 8012dd8:	9906      	ldr	r1, [sp, #24]
 8012dda:	1ab6      	subs	r6, r6, r2
 8012ddc:	1a8a      	subs	r2, r1, r2
 8012dde:	9206      	str	r2, [sp, #24]
 8012de0:	b1fb      	cbz	r3, 8012e22 <_dtoa_r+0x6b2>
 8012de2:	9a08      	ldr	r2, [sp, #32]
 8012de4:	2a00      	cmp	r2, #0
 8012de6:	f000 80bc 	beq.w	8012f62 <_dtoa_r+0x7f2>
 8012dea:	b19c      	cbz	r4, 8012e14 <_dtoa_r+0x6a4>
 8012dec:	4629      	mov	r1, r5
 8012dee:	4622      	mov	r2, r4
 8012df0:	4648      	mov	r0, r9
 8012df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012df4:	f000 fc10 	bl	8013618 <__pow5mult>
 8012df8:	9a01      	ldr	r2, [sp, #4]
 8012dfa:	4601      	mov	r1, r0
 8012dfc:	4605      	mov	r5, r0
 8012dfe:	4648      	mov	r0, r9
 8012e00:	f000 fb60 	bl	80134c4 <__multiply>
 8012e04:	9901      	ldr	r1, [sp, #4]
 8012e06:	9004      	str	r0, [sp, #16]
 8012e08:	4648      	mov	r0, r9
 8012e0a:	f000 fa91 	bl	8013330 <_Bfree>
 8012e0e:	9a04      	ldr	r2, [sp, #16]
 8012e10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012e12:	9201      	str	r2, [sp, #4]
 8012e14:	1b1a      	subs	r2, r3, r4
 8012e16:	d004      	beq.n	8012e22 <_dtoa_r+0x6b2>
 8012e18:	9901      	ldr	r1, [sp, #4]
 8012e1a:	4648      	mov	r0, r9
 8012e1c:	f000 fbfc 	bl	8013618 <__pow5mult>
 8012e20:	9001      	str	r0, [sp, #4]
 8012e22:	2101      	movs	r1, #1
 8012e24:	4648      	mov	r0, r9
 8012e26:	f000 fb37 	bl	8013498 <__i2b>
 8012e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	f000 81d0 	beq.w	80131d4 <_dtoa_r+0xa64>
 8012e34:	461a      	mov	r2, r3
 8012e36:	4601      	mov	r1, r0
 8012e38:	4648      	mov	r0, r9
 8012e3a:	f000 fbed 	bl	8013618 <__pow5mult>
 8012e3e:	9b07      	ldr	r3, [sp, #28]
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	4604      	mov	r4, r0
 8012e44:	f300 8095 	bgt.w	8012f72 <_dtoa_r+0x802>
 8012e48:	9b02      	ldr	r3, [sp, #8]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f040 808b 	bne.w	8012f66 <_dtoa_r+0x7f6>
 8012e50:	9b03      	ldr	r3, [sp, #12]
 8012e52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012e56:	2a00      	cmp	r2, #0
 8012e58:	f040 8087 	bne.w	8012f6a <_dtoa_r+0x7fa>
 8012e5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012e60:	0d12      	lsrs	r2, r2, #20
 8012e62:	0512      	lsls	r2, r2, #20
 8012e64:	2a00      	cmp	r2, #0
 8012e66:	f000 8082 	beq.w	8012f6e <_dtoa_r+0x7fe>
 8012e6a:	9b05      	ldr	r3, [sp, #20]
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	9305      	str	r3, [sp, #20]
 8012e70:	9b06      	ldr	r3, [sp, #24]
 8012e72:	3301      	adds	r3, #1
 8012e74:	9306      	str	r3, [sp, #24]
 8012e76:	2301      	movs	r3, #1
 8012e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f000 81af 	beq.w	80131e0 <_dtoa_r+0xa70>
 8012e82:	6922      	ldr	r2, [r4, #16]
 8012e84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012e88:	6910      	ldr	r0, [r2, #16]
 8012e8a:	f000 fab9 	bl	8013400 <__hi0bits>
 8012e8e:	f1c0 0020 	rsb	r0, r0, #32
 8012e92:	9b06      	ldr	r3, [sp, #24]
 8012e94:	4418      	add	r0, r3
 8012e96:	f010 001f 	ands.w	r0, r0, #31
 8012e9a:	d076      	beq.n	8012f8a <_dtoa_r+0x81a>
 8012e9c:	f1c0 0220 	rsb	r2, r0, #32
 8012ea0:	2a04      	cmp	r2, #4
 8012ea2:	dd69      	ble.n	8012f78 <_dtoa_r+0x808>
 8012ea4:	9b05      	ldr	r3, [sp, #20]
 8012ea6:	f1c0 001c 	rsb	r0, r0, #28
 8012eaa:	4403      	add	r3, r0
 8012eac:	9305      	str	r3, [sp, #20]
 8012eae:	9b06      	ldr	r3, [sp, #24]
 8012eb0:	4406      	add	r6, r0
 8012eb2:	4403      	add	r3, r0
 8012eb4:	9306      	str	r3, [sp, #24]
 8012eb6:	9b05      	ldr	r3, [sp, #20]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	dd05      	ble.n	8012ec8 <_dtoa_r+0x758>
 8012ebc:	9901      	ldr	r1, [sp, #4]
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	4648      	mov	r0, r9
 8012ec2:	f000 fc03 	bl	80136cc <__lshift>
 8012ec6:	9001      	str	r0, [sp, #4]
 8012ec8:	9b06      	ldr	r3, [sp, #24]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	dd05      	ble.n	8012eda <_dtoa_r+0x76a>
 8012ece:	4621      	mov	r1, r4
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	4648      	mov	r0, r9
 8012ed4:	f000 fbfa 	bl	80136cc <__lshift>
 8012ed8:	4604      	mov	r4, r0
 8012eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d056      	beq.n	8012f8e <_dtoa_r+0x81e>
 8012ee0:	9801      	ldr	r0, [sp, #4]
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	f000 fc5e 	bl	80137a4 <__mcmp>
 8012ee8:	2800      	cmp	r0, #0
 8012eea:	da50      	bge.n	8012f8e <_dtoa_r+0x81e>
 8012eec:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ef0:	9304      	str	r3, [sp, #16]
 8012ef2:	9901      	ldr	r1, [sp, #4]
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	220a      	movs	r2, #10
 8012ef8:	4648      	mov	r0, r9
 8012efa:	f000 fa3b 	bl	8013374 <__multadd>
 8012efe:	9b08      	ldr	r3, [sp, #32]
 8012f00:	9001      	str	r0, [sp, #4]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f000 816e 	beq.w	80131e4 <_dtoa_r+0xa74>
 8012f08:	4629      	mov	r1, r5
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	220a      	movs	r2, #10
 8012f0e:	4648      	mov	r0, r9
 8012f10:	f000 fa30 	bl	8013374 <__multadd>
 8012f14:	f1bb 0f00 	cmp.w	fp, #0
 8012f18:	4605      	mov	r5, r0
 8012f1a:	dc64      	bgt.n	8012fe6 <_dtoa_r+0x876>
 8012f1c:	9b07      	ldr	r3, [sp, #28]
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	dc3e      	bgt.n	8012fa0 <_dtoa_r+0x830>
 8012f22:	e060      	b.n	8012fe6 <_dtoa_r+0x876>
 8012f24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012f2a:	e73c      	b.n	8012da6 <_dtoa_r+0x636>
 8012f2c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012f30:	42a3      	cmp	r3, r4
 8012f32:	bfbf      	itttt	lt
 8012f34:	1ae2      	sublt	r2, r4, r3
 8012f36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012f38:	189b      	addlt	r3, r3, r2
 8012f3a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012f3c:	bfae      	itee	ge
 8012f3e:	1b1c      	subge	r4, r3, r4
 8012f40:	4623      	movlt	r3, r4
 8012f42:	2400      	movlt	r4, #0
 8012f44:	f1ba 0f00 	cmp.w	sl, #0
 8012f48:	bfb5      	itete	lt
 8012f4a:	9a05      	ldrlt	r2, [sp, #20]
 8012f4c:	9e05      	ldrge	r6, [sp, #20]
 8012f4e:	eba2 060a 	sublt.w	r6, r2, sl
 8012f52:	4652      	movge	r2, sl
 8012f54:	bfb8      	it	lt
 8012f56:	2200      	movlt	r2, #0
 8012f58:	e727      	b.n	8012daa <_dtoa_r+0x63a>
 8012f5a:	9e05      	ldr	r6, [sp, #20]
 8012f5c:	9d08      	ldr	r5, [sp, #32]
 8012f5e:	461c      	mov	r4, r3
 8012f60:	e730      	b.n	8012dc4 <_dtoa_r+0x654>
 8012f62:	461a      	mov	r2, r3
 8012f64:	e758      	b.n	8012e18 <_dtoa_r+0x6a8>
 8012f66:	2300      	movs	r3, #0
 8012f68:	e786      	b.n	8012e78 <_dtoa_r+0x708>
 8012f6a:	9b02      	ldr	r3, [sp, #8]
 8012f6c:	e784      	b.n	8012e78 <_dtoa_r+0x708>
 8012f6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012f70:	e783      	b.n	8012e7a <_dtoa_r+0x70a>
 8012f72:	2300      	movs	r3, #0
 8012f74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f76:	e784      	b.n	8012e82 <_dtoa_r+0x712>
 8012f78:	d09d      	beq.n	8012eb6 <_dtoa_r+0x746>
 8012f7a:	9b05      	ldr	r3, [sp, #20]
 8012f7c:	321c      	adds	r2, #28
 8012f7e:	4413      	add	r3, r2
 8012f80:	9305      	str	r3, [sp, #20]
 8012f82:	9b06      	ldr	r3, [sp, #24]
 8012f84:	4416      	add	r6, r2
 8012f86:	4413      	add	r3, r2
 8012f88:	e794      	b.n	8012eb4 <_dtoa_r+0x744>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	e7f5      	b.n	8012f7a <_dtoa_r+0x80a>
 8012f8e:	f1ba 0f00 	cmp.w	sl, #0
 8012f92:	f8cd 8010 	str.w	r8, [sp, #16]
 8012f96:	46d3      	mov	fp, sl
 8012f98:	dc21      	bgt.n	8012fde <_dtoa_r+0x86e>
 8012f9a:	9b07      	ldr	r3, [sp, #28]
 8012f9c:	2b02      	cmp	r3, #2
 8012f9e:	dd1e      	ble.n	8012fde <_dtoa_r+0x86e>
 8012fa0:	f1bb 0f00 	cmp.w	fp, #0
 8012fa4:	f47f aeb7 	bne.w	8012d16 <_dtoa_r+0x5a6>
 8012fa8:	4621      	mov	r1, r4
 8012faa:	465b      	mov	r3, fp
 8012fac:	2205      	movs	r2, #5
 8012fae:	4648      	mov	r0, r9
 8012fb0:	f000 f9e0 	bl	8013374 <__multadd>
 8012fb4:	4601      	mov	r1, r0
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	9801      	ldr	r0, [sp, #4]
 8012fba:	f000 fbf3 	bl	80137a4 <__mcmp>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	f77f aea9 	ble.w	8012d16 <_dtoa_r+0x5a6>
 8012fc4:	463e      	mov	r6, r7
 8012fc6:	2331      	movs	r3, #49	@ 0x31
 8012fc8:	f806 3b01 	strb.w	r3, [r6], #1
 8012fcc:	9b04      	ldr	r3, [sp, #16]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	9304      	str	r3, [sp, #16]
 8012fd2:	e6a4      	b.n	8012d1e <_dtoa_r+0x5ae>
 8012fd4:	f8cd 8010 	str.w	r8, [sp, #16]
 8012fd8:	4654      	mov	r4, sl
 8012fda:	4625      	mov	r5, r4
 8012fdc:	e7f2      	b.n	8012fc4 <_dtoa_r+0x854>
 8012fde:	9b08      	ldr	r3, [sp, #32]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	f000 8103 	beq.w	80131ec <_dtoa_r+0xa7c>
 8012fe6:	2e00      	cmp	r6, #0
 8012fe8:	dd05      	ble.n	8012ff6 <_dtoa_r+0x886>
 8012fea:	4629      	mov	r1, r5
 8012fec:	4632      	mov	r2, r6
 8012fee:	4648      	mov	r0, r9
 8012ff0:	f000 fb6c 	bl	80136cc <__lshift>
 8012ff4:	4605      	mov	r5, r0
 8012ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d058      	beq.n	80130ae <_dtoa_r+0x93e>
 8012ffc:	6869      	ldr	r1, [r5, #4]
 8012ffe:	4648      	mov	r0, r9
 8013000:	f000 f956 	bl	80132b0 <_Balloc>
 8013004:	4606      	mov	r6, r0
 8013006:	b928      	cbnz	r0, 8013014 <_dtoa_r+0x8a4>
 8013008:	4b82      	ldr	r3, [pc, #520]	@ (8013214 <_dtoa_r+0xaa4>)
 801300a:	4602      	mov	r2, r0
 801300c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013010:	f7ff bbc7 	b.w	80127a2 <_dtoa_r+0x32>
 8013014:	692a      	ldr	r2, [r5, #16]
 8013016:	3202      	adds	r2, #2
 8013018:	0092      	lsls	r2, r2, #2
 801301a:	f105 010c 	add.w	r1, r5, #12
 801301e:	300c      	adds	r0, #12
 8013020:	f7ff fb0f 	bl	8012642 <memcpy>
 8013024:	2201      	movs	r2, #1
 8013026:	4631      	mov	r1, r6
 8013028:	4648      	mov	r0, r9
 801302a:	f000 fb4f 	bl	80136cc <__lshift>
 801302e:	1c7b      	adds	r3, r7, #1
 8013030:	9305      	str	r3, [sp, #20]
 8013032:	eb07 030b 	add.w	r3, r7, fp
 8013036:	9309      	str	r3, [sp, #36]	@ 0x24
 8013038:	9b02      	ldr	r3, [sp, #8]
 801303a:	f003 0301 	and.w	r3, r3, #1
 801303e:	46a8      	mov	r8, r5
 8013040:	9308      	str	r3, [sp, #32]
 8013042:	4605      	mov	r5, r0
 8013044:	9b05      	ldr	r3, [sp, #20]
 8013046:	9801      	ldr	r0, [sp, #4]
 8013048:	4621      	mov	r1, r4
 801304a:	f103 3bff 	add.w	fp, r3, #4294967295
 801304e:	f7ff fb06 	bl	801265e <quorem>
 8013052:	4641      	mov	r1, r8
 8013054:	9002      	str	r0, [sp, #8]
 8013056:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801305a:	9801      	ldr	r0, [sp, #4]
 801305c:	f000 fba2 	bl	80137a4 <__mcmp>
 8013060:	462a      	mov	r2, r5
 8013062:	9006      	str	r0, [sp, #24]
 8013064:	4621      	mov	r1, r4
 8013066:	4648      	mov	r0, r9
 8013068:	f000 fbb8 	bl	80137dc <__mdiff>
 801306c:	68c2      	ldr	r2, [r0, #12]
 801306e:	4606      	mov	r6, r0
 8013070:	b9fa      	cbnz	r2, 80130b2 <_dtoa_r+0x942>
 8013072:	4601      	mov	r1, r0
 8013074:	9801      	ldr	r0, [sp, #4]
 8013076:	f000 fb95 	bl	80137a4 <__mcmp>
 801307a:	4602      	mov	r2, r0
 801307c:	4631      	mov	r1, r6
 801307e:	4648      	mov	r0, r9
 8013080:	920a      	str	r2, [sp, #40]	@ 0x28
 8013082:	f000 f955 	bl	8013330 <_Bfree>
 8013086:	9b07      	ldr	r3, [sp, #28]
 8013088:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801308a:	9e05      	ldr	r6, [sp, #20]
 801308c:	ea43 0102 	orr.w	r1, r3, r2
 8013090:	9b08      	ldr	r3, [sp, #32]
 8013092:	4319      	orrs	r1, r3
 8013094:	d10f      	bne.n	80130b6 <_dtoa_r+0x946>
 8013096:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801309a:	d028      	beq.n	80130ee <_dtoa_r+0x97e>
 801309c:	9b06      	ldr	r3, [sp, #24]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	dd02      	ble.n	80130a8 <_dtoa_r+0x938>
 80130a2:	9b02      	ldr	r3, [sp, #8]
 80130a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80130a8:	f88b a000 	strb.w	sl, [fp]
 80130ac:	e639      	b.n	8012d22 <_dtoa_r+0x5b2>
 80130ae:	4628      	mov	r0, r5
 80130b0:	e7bd      	b.n	801302e <_dtoa_r+0x8be>
 80130b2:	2201      	movs	r2, #1
 80130b4:	e7e2      	b.n	801307c <_dtoa_r+0x90c>
 80130b6:	9b06      	ldr	r3, [sp, #24]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	db04      	blt.n	80130c6 <_dtoa_r+0x956>
 80130bc:	9907      	ldr	r1, [sp, #28]
 80130be:	430b      	orrs	r3, r1
 80130c0:	9908      	ldr	r1, [sp, #32]
 80130c2:	430b      	orrs	r3, r1
 80130c4:	d120      	bne.n	8013108 <_dtoa_r+0x998>
 80130c6:	2a00      	cmp	r2, #0
 80130c8:	ddee      	ble.n	80130a8 <_dtoa_r+0x938>
 80130ca:	9901      	ldr	r1, [sp, #4]
 80130cc:	2201      	movs	r2, #1
 80130ce:	4648      	mov	r0, r9
 80130d0:	f000 fafc 	bl	80136cc <__lshift>
 80130d4:	4621      	mov	r1, r4
 80130d6:	9001      	str	r0, [sp, #4]
 80130d8:	f000 fb64 	bl	80137a4 <__mcmp>
 80130dc:	2800      	cmp	r0, #0
 80130de:	dc03      	bgt.n	80130e8 <_dtoa_r+0x978>
 80130e0:	d1e2      	bne.n	80130a8 <_dtoa_r+0x938>
 80130e2:	f01a 0f01 	tst.w	sl, #1
 80130e6:	d0df      	beq.n	80130a8 <_dtoa_r+0x938>
 80130e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80130ec:	d1d9      	bne.n	80130a2 <_dtoa_r+0x932>
 80130ee:	2339      	movs	r3, #57	@ 0x39
 80130f0:	f88b 3000 	strb.w	r3, [fp]
 80130f4:	4633      	mov	r3, r6
 80130f6:	461e      	mov	r6, r3
 80130f8:	3b01      	subs	r3, #1
 80130fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80130fe:	2a39      	cmp	r2, #57	@ 0x39
 8013100:	d053      	beq.n	80131aa <_dtoa_r+0xa3a>
 8013102:	3201      	adds	r2, #1
 8013104:	701a      	strb	r2, [r3, #0]
 8013106:	e60c      	b.n	8012d22 <_dtoa_r+0x5b2>
 8013108:	2a00      	cmp	r2, #0
 801310a:	dd07      	ble.n	801311c <_dtoa_r+0x9ac>
 801310c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013110:	d0ed      	beq.n	80130ee <_dtoa_r+0x97e>
 8013112:	f10a 0301 	add.w	r3, sl, #1
 8013116:	f88b 3000 	strb.w	r3, [fp]
 801311a:	e602      	b.n	8012d22 <_dtoa_r+0x5b2>
 801311c:	9b05      	ldr	r3, [sp, #20]
 801311e:	9a05      	ldr	r2, [sp, #20]
 8013120:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013126:	4293      	cmp	r3, r2
 8013128:	d029      	beq.n	801317e <_dtoa_r+0xa0e>
 801312a:	9901      	ldr	r1, [sp, #4]
 801312c:	2300      	movs	r3, #0
 801312e:	220a      	movs	r2, #10
 8013130:	4648      	mov	r0, r9
 8013132:	f000 f91f 	bl	8013374 <__multadd>
 8013136:	45a8      	cmp	r8, r5
 8013138:	9001      	str	r0, [sp, #4]
 801313a:	f04f 0300 	mov.w	r3, #0
 801313e:	f04f 020a 	mov.w	r2, #10
 8013142:	4641      	mov	r1, r8
 8013144:	4648      	mov	r0, r9
 8013146:	d107      	bne.n	8013158 <_dtoa_r+0x9e8>
 8013148:	f000 f914 	bl	8013374 <__multadd>
 801314c:	4680      	mov	r8, r0
 801314e:	4605      	mov	r5, r0
 8013150:	9b05      	ldr	r3, [sp, #20]
 8013152:	3301      	adds	r3, #1
 8013154:	9305      	str	r3, [sp, #20]
 8013156:	e775      	b.n	8013044 <_dtoa_r+0x8d4>
 8013158:	f000 f90c 	bl	8013374 <__multadd>
 801315c:	4629      	mov	r1, r5
 801315e:	4680      	mov	r8, r0
 8013160:	2300      	movs	r3, #0
 8013162:	220a      	movs	r2, #10
 8013164:	4648      	mov	r0, r9
 8013166:	f000 f905 	bl	8013374 <__multadd>
 801316a:	4605      	mov	r5, r0
 801316c:	e7f0      	b.n	8013150 <_dtoa_r+0x9e0>
 801316e:	f1bb 0f00 	cmp.w	fp, #0
 8013172:	bfcc      	ite	gt
 8013174:	465e      	movgt	r6, fp
 8013176:	2601      	movle	r6, #1
 8013178:	443e      	add	r6, r7
 801317a:	f04f 0800 	mov.w	r8, #0
 801317e:	9901      	ldr	r1, [sp, #4]
 8013180:	2201      	movs	r2, #1
 8013182:	4648      	mov	r0, r9
 8013184:	f000 faa2 	bl	80136cc <__lshift>
 8013188:	4621      	mov	r1, r4
 801318a:	9001      	str	r0, [sp, #4]
 801318c:	f000 fb0a 	bl	80137a4 <__mcmp>
 8013190:	2800      	cmp	r0, #0
 8013192:	dcaf      	bgt.n	80130f4 <_dtoa_r+0x984>
 8013194:	d102      	bne.n	801319c <_dtoa_r+0xa2c>
 8013196:	f01a 0f01 	tst.w	sl, #1
 801319a:	d1ab      	bne.n	80130f4 <_dtoa_r+0x984>
 801319c:	4633      	mov	r3, r6
 801319e:	461e      	mov	r6, r3
 80131a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131a4:	2a30      	cmp	r2, #48	@ 0x30
 80131a6:	d0fa      	beq.n	801319e <_dtoa_r+0xa2e>
 80131a8:	e5bb      	b.n	8012d22 <_dtoa_r+0x5b2>
 80131aa:	429f      	cmp	r7, r3
 80131ac:	d1a3      	bne.n	80130f6 <_dtoa_r+0x986>
 80131ae:	9b04      	ldr	r3, [sp, #16]
 80131b0:	3301      	adds	r3, #1
 80131b2:	9304      	str	r3, [sp, #16]
 80131b4:	2331      	movs	r3, #49	@ 0x31
 80131b6:	703b      	strb	r3, [r7, #0]
 80131b8:	e5b3      	b.n	8012d22 <_dtoa_r+0x5b2>
 80131ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80131bc:	4f16      	ldr	r7, [pc, #88]	@ (8013218 <_dtoa_r+0xaa8>)
 80131be:	b11b      	cbz	r3, 80131c8 <_dtoa_r+0xa58>
 80131c0:	f107 0308 	add.w	r3, r7, #8
 80131c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	4638      	mov	r0, r7
 80131ca:	b011      	add	sp, #68	@ 0x44
 80131cc:	ecbd 8b02 	vpop	{d8}
 80131d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d4:	9b07      	ldr	r3, [sp, #28]
 80131d6:	2b01      	cmp	r3, #1
 80131d8:	f77f ae36 	ble.w	8012e48 <_dtoa_r+0x6d8>
 80131dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131e0:	2001      	movs	r0, #1
 80131e2:	e656      	b.n	8012e92 <_dtoa_r+0x722>
 80131e4:	f1bb 0f00 	cmp.w	fp, #0
 80131e8:	f77f aed7 	ble.w	8012f9a <_dtoa_r+0x82a>
 80131ec:	463e      	mov	r6, r7
 80131ee:	9801      	ldr	r0, [sp, #4]
 80131f0:	4621      	mov	r1, r4
 80131f2:	f7ff fa34 	bl	801265e <quorem>
 80131f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80131fa:	f806 ab01 	strb.w	sl, [r6], #1
 80131fe:	1bf2      	subs	r2, r6, r7
 8013200:	4593      	cmp	fp, r2
 8013202:	ddb4      	ble.n	801316e <_dtoa_r+0x9fe>
 8013204:	9901      	ldr	r1, [sp, #4]
 8013206:	2300      	movs	r3, #0
 8013208:	220a      	movs	r2, #10
 801320a:	4648      	mov	r0, r9
 801320c:	f000 f8b2 	bl	8013374 <__multadd>
 8013210:	9001      	str	r0, [sp, #4]
 8013212:	e7ec      	b.n	80131ee <_dtoa_r+0xa7e>
 8013214:	08016bd8 	.word	0x08016bd8
 8013218:	08016b5c 	.word	0x08016b5c

0801321c <_free_r>:
 801321c:	b538      	push	{r3, r4, r5, lr}
 801321e:	4605      	mov	r5, r0
 8013220:	2900      	cmp	r1, #0
 8013222:	d041      	beq.n	80132a8 <_free_r+0x8c>
 8013224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013228:	1f0c      	subs	r4, r1, #4
 801322a:	2b00      	cmp	r3, #0
 801322c:	bfb8      	it	lt
 801322e:	18e4      	addlt	r4, r4, r3
 8013230:	f7fe fc0e 	bl	8011a50 <__malloc_lock>
 8013234:	4a1d      	ldr	r2, [pc, #116]	@ (80132ac <_free_r+0x90>)
 8013236:	6813      	ldr	r3, [r2, #0]
 8013238:	b933      	cbnz	r3, 8013248 <_free_r+0x2c>
 801323a:	6063      	str	r3, [r4, #4]
 801323c:	6014      	str	r4, [r2, #0]
 801323e:	4628      	mov	r0, r5
 8013240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013244:	f7fe bc0a 	b.w	8011a5c <__malloc_unlock>
 8013248:	42a3      	cmp	r3, r4
 801324a:	d908      	bls.n	801325e <_free_r+0x42>
 801324c:	6820      	ldr	r0, [r4, #0]
 801324e:	1821      	adds	r1, r4, r0
 8013250:	428b      	cmp	r3, r1
 8013252:	bf01      	itttt	eq
 8013254:	6819      	ldreq	r1, [r3, #0]
 8013256:	685b      	ldreq	r3, [r3, #4]
 8013258:	1809      	addeq	r1, r1, r0
 801325a:	6021      	streq	r1, [r4, #0]
 801325c:	e7ed      	b.n	801323a <_free_r+0x1e>
 801325e:	461a      	mov	r2, r3
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	b10b      	cbz	r3, 8013268 <_free_r+0x4c>
 8013264:	42a3      	cmp	r3, r4
 8013266:	d9fa      	bls.n	801325e <_free_r+0x42>
 8013268:	6811      	ldr	r1, [r2, #0]
 801326a:	1850      	adds	r0, r2, r1
 801326c:	42a0      	cmp	r0, r4
 801326e:	d10b      	bne.n	8013288 <_free_r+0x6c>
 8013270:	6820      	ldr	r0, [r4, #0]
 8013272:	4401      	add	r1, r0
 8013274:	1850      	adds	r0, r2, r1
 8013276:	4283      	cmp	r3, r0
 8013278:	6011      	str	r1, [r2, #0]
 801327a:	d1e0      	bne.n	801323e <_free_r+0x22>
 801327c:	6818      	ldr	r0, [r3, #0]
 801327e:	685b      	ldr	r3, [r3, #4]
 8013280:	6053      	str	r3, [r2, #4]
 8013282:	4408      	add	r0, r1
 8013284:	6010      	str	r0, [r2, #0]
 8013286:	e7da      	b.n	801323e <_free_r+0x22>
 8013288:	d902      	bls.n	8013290 <_free_r+0x74>
 801328a:	230c      	movs	r3, #12
 801328c:	602b      	str	r3, [r5, #0]
 801328e:	e7d6      	b.n	801323e <_free_r+0x22>
 8013290:	6820      	ldr	r0, [r4, #0]
 8013292:	1821      	adds	r1, r4, r0
 8013294:	428b      	cmp	r3, r1
 8013296:	bf04      	itt	eq
 8013298:	6819      	ldreq	r1, [r3, #0]
 801329a:	685b      	ldreq	r3, [r3, #4]
 801329c:	6063      	str	r3, [r4, #4]
 801329e:	bf04      	itt	eq
 80132a0:	1809      	addeq	r1, r1, r0
 80132a2:	6021      	streq	r1, [r4, #0]
 80132a4:	6054      	str	r4, [r2, #4]
 80132a6:	e7ca      	b.n	801323e <_free_r+0x22>
 80132a8:	bd38      	pop	{r3, r4, r5, pc}
 80132aa:	bf00      	nop
 80132ac:	24006f98 	.word	0x24006f98

080132b0 <_Balloc>:
 80132b0:	b570      	push	{r4, r5, r6, lr}
 80132b2:	69c6      	ldr	r6, [r0, #28]
 80132b4:	4604      	mov	r4, r0
 80132b6:	460d      	mov	r5, r1
 80132b8:	b976      	cbnz	r6, 80132d8 <_Balloc+0x28>
 80132ba:	2010      	movs	r0, #16
 80132bc:	f7fe fb1e 	bl	80118fc <malloc>
 80132c0:	4602      	mov	r2, r0
 80132c2:	61e0      	str	r0, [r4, #28]
 80132c4:	b920      	cbnz	r0, 80132d0 <_Balloc+0x20>
 80132c6:	4b18      	ldr	r3, [pc, #96]	@ (8013328 <_Balloc+0x78>)
 80132c8:	4818      	ldr	r0, [pc, #96]	@ (801332c <_Balloc+0x7c>)
 80132ca:	216b      	movs	r1, #107	@ 0x6b
 80132cc:	f000 fd90 	bl	8013df0 <__assert_func>
 80132d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132d4:	6006      	str	r6, [r0, #0]
 80132d6:	60c6      	str	r6, [r0, #12]
 80132d8:	69e6      	ldr	r6, [r4, #28]
 80132da:	68f3      	ldr	r3, [r6, #12]
 80132dc:	b183      	cbz	r3, 8013300 <_Balloc+0x50>
 80132de:	69e3      	ldr	r3, [r4, #28]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132e6:	b9b8      	cbnz	r0, 8013318 <_Balloc+0x68>
 80132e8:	2101      	movs	r1, #1
 80132ea:	fa01 f605 	lsl.w	r6, r1, r5
 80132ee:	1d72      	adds	r2, r6, #5
 80132f0:	0092      	lsls	r2, r2, #2
 80132f2:	4620      	mov	r0, r4
 80132f4:	f000 fd9a 	bl	8013e2c <_calloc_r>
 80132f8:	b160      	cbz	r0, 8013314 <_Balloc+0x64>
 80132fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132fe:	e00e      	b.n	801331e <_Balloc+0x6e>
 8013300:	2221      	movs	r2, #33	@ 0x21
 8013302:	2104      	movs	r1, #4
 8013304:	4620      	mov	r0, r4
 8013306:	f000 fd91 	bl	8013e2c <_calloc_r>
 801330a:	69e3      	ldr	r3, [r4, #28]
 801330c:	60f0      	str	r0, [r6, #12]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d1e4      	bne.n	80132de <_Balloc+0x2e>
 8013314:	2000      	movs	r0, #0
 8013316:	bd70      	pop	{r4, r5, r6, pc}
 8013318:	6802      	ldr	r2, [r0, #0]
 801331a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801331e:	2300      	movs	r3, #0
 8013320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013324:	e7f7      	b.n	8013316 <_Balloc+0x66>
 8013326:	bf00      	nop
 8013328:	08016b69 	.word	0x08016b69
 801332c:	08016be9 	.word	0x08016be9

08013330 <_Bfree>:
 8013330:	b570      	push	{r4, r5, r6, lr}
 8013332:	69c6      	ldr	r6, [r0, #28]
 8013334:	4605      	mov	r5, r0
 8013336:	460c      	mov	r4, r1
 8013338:	b976      	cbnz	r6, 8013358 <_Bfree+0x28>
 801333a:	2010      	movs	r0, #16
 801333c:	f7fe fade 	bl	80118fc <malloc>
 8013340:	4602      	mov	r2, r0
 8013342:	61e8      	str	r0, [r5, #28]
 8013344:	b920      	cbnz	r0, 8013350 <_Bfree+0x20>
 8013346:	4b09      	ldr	r3, [pc, #36]	@ (801336c <_Bfree+0x3c>)
 8013348:	4809      	ldr	r0, [pc, #36]	@ (8013370 <_Bfree+0x40>)
 801334a:	218f      	movs	r1, #143	@ 0x8f
 801334c:	f000 fd50 	bl	8013df0 <__assert_func>
 8013350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013354:	6006      	str	r6, [r0, #0]
 8013356:	60c6      	str	r6, [r0, #12]
 8013358:	b13c      	cbz	r4, 801336a <_Bfree+0x3a>
 801335a:	69eb      	ldr	r3, [r5, #28]
 801335c:	6862      	ldr	r2, [r4, #4]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013364:	6021      	str	r1, [r4, #0]
 8013366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801336a:	bd70      	pop	{r4, r5, r6, pc}
 801336c:	08016b69 	.word	0x08016b69
 8013370:	08016be9 	.word	0x08016be9

08013374 <__multadd>:
 8013374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013378:	690d      	ldr	r5, [r1, #16]
 801337a:	4607      	mov	r7, r0
 801337c:	460c      	mov	r4, r1
 801337e:	461e      	mov	r6, r3
 8013380:	f101 0c14 	add.w	ip, r1, #20
 8013384:	2000      	movs	r0, #0
 8013386:	f8dc 3000 	ldr.w	r3, [ip]
 801338a:	b299      	uxth	r1, r3
 801338c:	fb02 6101 	mla	r1, r2, r1, r6
 8013390:	0c1e      	lsrs	r6, r3, #16
 8013392:	0c0b      	lsrs	r3, r1, #16
 8013394:	fb02 3306 	mla	r3, r2, r6, r3
 8013398:	b289      	uxth	r1, r1
 801339a:	3001      	adds	r0, #1
 801339c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80133a0:	4285      	cmp	r5, r0
 80133a2:	f84c 1b04 	str.w	r1, [ip], #4
 80133a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80133aa:	dcec      	bgt.n	8013386 <__multadd+0x12>
 80133ac:	b30e      	cbz	r6, 80133f2 <__multadd+0x7e>
 80133ae:	68a3      	ldr	r3, [r4, #8]
 80133b0:	42ab      	cmp	r3, r5
 80133b2:	dc19      	bgt.n	80133e8 <__multadd+0x74>
 80133b4:	6861      	ldr	r1, [r4, #4]
 80133b6:	4638      	mov	r0, r7
 80133b8:	3101      	adds	r1, #1
 80133ba:	f7ff ff79 	bl	80132b0 <_Balloc>
 80133be:	4680      	mov	r8, r0
 80133c0:	b928      	cbnz	r0, 80133ce <__multadd+0x5a>
 80133c2:	4602      	mov	r2, r0
 80133c4:	4b0c      	ldr	r3, [pc, #48]	@ (80133f8 <__multadd+0x84>)
 80133c6:	480d      	ldr	r0, [pc, #52]	@ (80133fc <__multadd+0x88>)
 80133c8:	21ba      	movs	r1, #186	@ 0xba
 80133ca:	f000 fd11 	bl	8013df0 <__assert_func>
 80133ce:	6922      	ldr	r2, [r4, #16]
 80133d0:	3202      	adds	r2, #2
 80133d2:	f104 010c 	add.w	r1, r4, #12
 80133d6:	0092      	lsls	r2, r2, #2
 80133d8:	300c      	adds	r0, #12
 80133da:	f7ff f932 	bl	8012642 <memcpy>
 80133de:	4621      	mov	r1, r4
 80133e0:	4638      	mov	r0, r7
 80133e2:	f7ff ffa5 	bl	8013330 <_Bfree>
 80133e6:	4644      	mov	r4, r8
 80133e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133ec:	3501      	adds	r5, #1
 80133ee:	615e      	str	r6, [r3, #20]
 80133f0:	6125      	str	r5, [r4, #16]
 80133f2:	4620      	mov	r0, r4
 80133f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f8:	08016bd8 	.word	0x08016bd8
 80133fc:	08016be9 	.word	0x08016be9

08013400 <__hi0bits>:
 8013400:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013404:	4603      	mov	r3, r0
 8013406:	bf36      	itet	cc
 8013408:	0403      	lslcc	r3, r0, #16
 801340a:	2000      	movcs	r0, #0
 801340c:	2010      	movcc	r0, #16
 801340e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013412:	bf3c      	itt	cc
 8013414:	021b      	lslcc	r3, r3, #8
 8013416:	3008      	addcc	r0, #8
 8013418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801341c:	bf3c      	itt	cc
 801341e:	011b      	lslcc	r3, r3, #4
 8013420:	3004      	addcc	r0, #4
 8013422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013426:	bf3c      	itt	cc
 8013428:	009b      	lslcc	r3, r3, #2
 801342a:	3002      	addcc	r0, #2
 801342c:	2b00      	cmp	r3, #0
 801342e:	db05      	blt.n	801343c <__hi0bits+0x3c>
 8013430:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013434:	f100 0001 	add.w	r0, r0, #1
 8013438:	bf08      	it	eq
 801343a:	2020      	moveq	r0, #32
 801343c:	4770      	bx	lr

0801343e <__lo0bits>:
 801343e:	6803      	ldr	r3, [r0, #0]
 8013440:	4602      	mov	r2, r0
 8013442:	f013 0007 	ands.w	r0, r3, #7
 8013446:	d00b      	beq.n	8013460 <__lo0bits+0x22>
 8013448:	07d9      	lsls	r1, r3, #31
 801344a:	d421      	bmi.n	8013490 <__lo0bits+0x52>
 801344c:	0798      	lsls	r0, r3, #30
 801344e:	bf49      	itett	mi
 8013450:	085b      	lsrmi	r3, r3, #1
 8013452:	089b      	lsrpl	r3, r3, #2
 8013454:	2001      	movmi	r0, #1
 8013456:	6013      	strmi	r3, [r2, #0]
 8013458:	bf5c      	itt	pl
 801345a:	6013      	strpl	r3, [r2, #0]
 801345c:	2002      	movpl	r0, #2
 801345e:	4770      	bx	lr
 8013460:	b299      	uxth	r1, r3
 8013462:	b909      	cbnz	r1, 8013468 <__lo0bits+0x2a>
 8013464:	0c1b      	lsrs	r3, r3, #16
 8013466:	2010      	movs	r0, #16
 8013468:	b2d9      	uxtb	r1, r3
 801346a:	b909      	cbnz	r1, 8013470 <__lo0bits+0x32>
 801346c:	3008      	adds	r0, #8
 801346e:	0a1b      	lsrs	r3, r3, #8
 8013470:	0719      	lsls	r1, r3, #28
 8013472:	bf04      	itt	eq
 8013474:	091b      	lsreq	r3, r3, #4
 8013476:	3004      	addeq	r0, #4
 8013478:	0799      	lsls	r1, r3, #30
 801347a:	bf04      	itt	eq
 801347c:	089b      	lsreq	r3, r3, #2
 801347e:	3002      	addeq	r0, #2
 8013480:	07d9      	lsls	r1, r3, #31
 8013482:	d403      	bmi.n	801348c <__lo0bits+0x4e>
 8013484:	085b      	lsrs	r3, r3, #1
 8013486:	f100 0001 	add.w	r0, r0, #1
 801348a:	d003      	beq.n	8013494 <__lo0bits+0x56>
 801348c:	6013      	str	r3, [r2, #0]
 801348e:	4770      	bx	lr
 8013490:	2000      	movs	r0, #0
 8013492:	4770      	bx	lr
 8013494:	2020      	movs	r0, #32
 8013496:	4770      	bx	lr

08013498 <__i2b>:
 8013498:	b510      	push	{r4, lr}
 801349a:	460c      	mov	r4, r1
 801349c:	2101      	movs	r1, #1
 801349e:	f7ff ff07 	bl	80132b0 <_Balloc>
 80134a2:	4602      	mov	r2, r0
 80134a4:	b928      	cbnz	r0, 80134b2 <__i2b+0x1a>
 80134a6:	4b05      	ldr	r3, [pc, #20]	@ (80134bc <__i2b+0x24>)
 80134a8:	4805      	ldr	r0, [pc, #20]	@ (80134c0 <__i2b+0x28>)
 80134aa:	f240 1145 	movw	r1, #325	@ 0x145
 80134ae:	f000 fc9f 	bl	8013df0 <__assert_func>
 80134b2:	2301      	movs	r3, #1
 80134b4:	6144      	str	r4, [r0, #20]
 80134b6:	6103      	str	r3, [r0, #16]
 80134b8:	bd10      	pop	{r4, pc}
 80134ba:	bf00      	nop
 80134bc:	08016bd8 	.word	0x08016bd8
 80134c0:	08016be9 	.word	0x08016be9

080134c4 <__multiply>:
 80134c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c8:	4614      	mov	r4, r2
 80134ca:	690a      	ldr	r2, [r1, #16]
 80134cc:	6923      	ldr	r3, [r4, #16]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	bfa8      	it	ge
 80134d2:	4623      	movge	r3, r4
 80134d4:	460f      	mov	r7, r1
 80134d6:	bfa4      	itt	ge
 80134d8:	460c      	movge	r4, r1
 80134da:	461f      	movge	r7, r3
 80134dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80134e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80134e4:	68a3      	ldr	r3, [r4, #8]
 80134e6:	6861      	ldr	r1, [r4, #4]
 80134e8:	eb0a 0609 	add.w	r6, sl, r9
 80134ec:	42b3      	cmp	r3, r6
 80134ee:	b085      	sub	sp, #20
 80134f0:	bfb8      	it	lt
 80134f2:	3101      	addlt	r1, #1
 80134f4:	f7ff fedc 	bl	80132b0 <_Balloc>
 80134f8:	b930      	cbnz	r0, 8013508 <__multiply+0x44>
 80134fa:	4602      	mov	r2, r0
 80134fc:	4b44      	ldr	r3, [pc, #272]	@ (8013610 <__multiply+0x14c>)
 80134fe:	4845      	ldr	r0, [pc, #276]	@ (8013614 <__multiply+0x150>)
 8013500:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013504:	f000 fc74 	bl	8013df0 <__assert_func>
 8013508:	f100 0514 	add.w	r5, r0, #20
 801350c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013510:	462b      	mov	r3, r5
 8013512:	2200      	movs	r2, #0
 8013514:	4543      	cmp	r3, r8
 8013516:	d321      	bcc.n	801355c <__multiply+0x98>
 8013518:	f107 0114 	add.w	r1, r7, #20
 801351c:	f104 0214 	add.w	r2, r4, #20
 8013520:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013524:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013528:	9302      	str	r3, [sp, #8]
 801352a:	1b13      	subs	r3, r2, r4
 801352c:	3b15      	subs	r3, #21
 801352e:	f023 0303 	bic.w	r3, r3, #3
 8013532:	3304      	adds	r3, #4
 8013534:	f104 0715 	add.w	r7, r4, #21
 8013538:	42ba      	cmp	r2, r7
 801353a:	bf38      	it	cc
 801353c:	2304      	movcc	r3, #4
 801353e:	9301      	str	r3, [sp, #4]
 8013540:	9b02      	ldr	r3, [sp, #8]
 8013542:	9103      	str	r1, [sp, #12]
 8013544:	428b      	cmp	r3, r1
 8013546:	d80c      	bhi.n	8013562 <__multiply+0x9e>
 8013548:	2e00      	cmp	r6, #0
 801354a:	dd03      	ble.n	8013554 <__multiply+0x90>
 801354c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013550:	2b00      	cmp	r3, #0
 8013552:	d05b      	beq.n	801360c <__multiply+0x148>
 8013554:	6106      	str	r6, [r0, #16]
 8013556:	b005      	add	sp, #20
 8013558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801355c:	f843 2b04 	str.w	r2, [r3], #4
 8013560:	e7d8      	b.n	8013514 <__multiply+0x50>
 8013562:	f8b1 a000 	ldrh.w	sl, [r1]
 8013566:	f1ba 0f00 	cmp.w	sl, #0
 801356a:	d024      	beq.n	80135b6 <__multiply+0xf2>
 801356c:	f104 0e14 	add.w	lr, r4, #20
 8013570:	46a9      	mov	r9, r5
 8013572:	f04f 0c00 	mov.w	ip, #0
 8013576:	f85e 7b04 	ldr.w	r7, [lr], #4
 801357a:	f8d9 3000 	ldr.w	r3, [r9]
 801357e:	fa1f fb87 	uxth.w	fp, r7
 8013582:	b29b      	uxth	r3, r3
 8013584:	fb0a 330b 	mla	r3, sl, fp, r3
 8013588:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801358c:	f8d9 7000 	ldr.w	r7, [r9]
 8013590:	4463      	add	r3, ip
 8013592:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013596:	fb0a c70b 	mla	r7, sl, fp, ip
 801359a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801359e:	b29b      	uxth	r3, r3
 80135a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80135a4:	4572      	cmp	r2, lr
 80135a6:	f849 3b04 	str.w	r3, [r9], #4
 80135aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80135ae:	d8e2      	bhi.n	8013576 <__multiply+0xb2>
 80135b0:	9b01      	ldr	r3, [sp, #4]
 80135b2:	f845 c003 	str.w	ip, [r5, r3]
 80135b6:	9b03      	ldr	r3, [sp, #12]
 80135b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80135bc:	3104      	adds	r1, #4
 80135be:	f1b9 0f00 	cmp.w	r9, #0
 80135c2:	d021      	beq.n	8013608 <__multiply+0x144>
 80135c4:	682b      	ldr	r3, [r5, #0]
 80135c6:	f104 0c14 	add.w	ip, r4, #20
 80135ca:	46ae      	mov	lr, r5
 80135cc:	f04f 0a00 	mov.w	sl, #0
 80135d0:	f8bc b000 	ldrh.w	fp, [ip]
 80135d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80135d8:	fb09 770b 	mla	r7, r9, fp, r7
 80135dc:	4457      	add	r7, sl
 80135de:	b29b      	uxth	r3, r3
 80135e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80135e4:	f84e 3b04 	str.w	r3, [lr], #4
 80135e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80135ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80135f0:	f8be 3000 	ldrh.w	r3, [lr]
 80135f4:	fb09 330a 	mla	r3, r9, sl, r3
 80135f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80135fc:	4562      	cmp	r2, ip
 80135fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013602:	d8e5      	bhi.n	80135d0 <__multiply+0x10c>
 8013604:	9f01      	ldr	r7, [sp, #4]
 8013606:	51eb      	str	r3, [r5, r7]
 8013608:	3504      	adds	r5, #4
 801360a:	e799      	b.n	8013540 <__multiply+0x7c>
 801360c:	3e01      	subs	r6, #1
 801360e:	e79b      	b.n	8013548 <__multiply+0x84>
 8013610:	08016bd8 	.word	0x08016bd8
 8013614:	08016be9 	.word	0x08016be9

08013618 <__pow5mult>:
 8013618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801361c:	4615      	mov	r5, r2
 801361e:	f012 0203 	ands.w	r2, r2, #3
 8013622:	4607      	mov	r7, r0
 8013624:	460e      	mov	r6, r1
 8013626:	d007      	beq.n	8013638 <__pow5mult+0x20>
 8013628:	4c25      	ldr	r4, [pc, #148]	@ (80136c0 <__pow5mult+0xa8>)
 801362a:	3a01      	subs	r2, #1
 801362c:	2300      	movs	r3, #0
 801362e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013632:	f7ff fe9f 	bl	8013374 <__multadd>
 8013636:	4606      	mov	r6, r0
 8013638:	10ad      	asrs	r5, r5, #2
 801363a:	d03d      	beq.n	80136b8 <__pow5mult+0xa0>
 801363c:	69fc      	ldr	r4, [r7, #28]
 801363e:	b97c      	cbnz	r4, 8013660 <__pow5mult+0x48>
 8013640:	2010      	movs	r0, #16
 8013642:	f7fe f95b 	bl	80118fc <malloc>
 8013646:	4602      	mov	r2, r0
 8013648:	61f8      	str	r0, [r7, #28]
 801364a:	b928      	cbnz	r0, 8013658 <__pow5mult+0x40>
 801364c:	4b1d      	ldr	r3, [pc, #116]	@ (80136c4 <__pow5mult+0xac>)
 801364e:	481e      	ldr	r0, [pc, #120]	@ (80136c8 <__pow5mult+0xb0>)
 8013650:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013654:	f000 fbcc 	bl	8013df0 <__assert_func>
 8013658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801365c:	6004      	str	r4, [r0, #0]
 801365e:	60c4      	str	r4, [r0, #12]
 8013660:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013668:	b94c      	cbnz	r4, 801367e <__pow5mult+0x66>
 801366a:	f240 2171 	movw	r1, #625	@ 0x271
 801366e:	4638      	mov	r0, r7
 8013670:	f7ff ff12 	bl	8013498 <__i2b>
 8013674:	2300      	movs	r3, #0
 8013676:	f8c8 0008 	str.w	r0, [r8, #8]
 801367a:	4604      	mov	r4, r0
 801367c:	6003      	str	r3, [r0, #0]
 801367e:	f04f 0900 	mov.w	r9, #0
 8013682:	07eb      	lsls	r3, r5, #31
 8013684:	d50a      	bpl.n	801369c <__pow5mult+0x84>
 8013686:	4631      	mov	r1, r6
 8013688:	4622      	mov	r2, r4
 801368a:	4638      	mov	r0, r7
 801368c:	f7ff ff1a 	bl	80134c4 <__multiply>
 8013690:	4631      	mov	r1, r6
 8013692:	4680      	mov	r8, r0
 8013694:	4638      	mov	r0, r7
 8013696:	f7ff fe4b 	bl	8013330 <_Bfree>
 801369a:	4646      	mov	r6, r8
 801369c:	106d      	asrs	r5, r5, #1
 801369e:	d00b      	beq.n	80136b8 <__pow5mult+0xa0>
 80136a0:	6820      	ldr	r0, [r4, #0]
 80136a2:	b938      	cbnz	r0, 80136b4 <__pow5mult+0x9c>
 80136a4:	4622      	mov	r2, r4
 80136a6:	4621      	mov	r1, r4
 80136a8:	4638      	mov	r0, r7
 80136aa:	f7ff ff0b 	bl	80134c4 <__multiply>
 80136ae:	6020      	str	r0, [r4, #0]
 80136b0:	f8c0 9000 	str.w	r9, [r0]
 80136b4:	4604      	mov	r4, r0
 80136b6:	e7e4      	b.n	8013682 <__pow5mult+0x6a>
 80136b8:	4630      	mov	r0, r6
 80136ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136be:	bf00      	nop
 80136c0:	08016c44 	.word	0x08016c44
 80136c4:	08016b69 	.word	0x08016b69
 80136c8:	08016be9 	.word	0x08016be9

080136cc <__lshift>:
 80136cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136d0:	460c      	mov	r4, r1
 80136d2:	6849      	ldr	r1, [r1, #4]
 80136d4:	6923      	ldr	r3, [r4, #16]
 80136d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136da:	68a3      	ldr	r3, [r4, #8]
 80136dc:	4607      	mov	r7, r0
 80136de:	4691      	mov	r9, r2
 80136e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136e4:	f108 0601 	add.w	r6, r8, #1
 80136e8:	42b3      	cmp	r3, r6
 80136ea:	db0b      	blt.n	8013704 <__lshift+0x38>
 80136ec:	4638      	mov	r0, r7
 80136ee:	f7ff fddf 	bl	80132b0 <_Balloc>
 80136f2:	4605      	mov	r5, r0
 80136f4:	b948      	cbnz	r0, 801370a <__lshift+0x3e>
 80136f6:	4602      	mov	r2, r0
 80136f8:	4b28      	ldr	r3, [pc, #160]	@ (801379c <__lshift+0xd0>)
 80136fa:	4829      	ldr	r0, [pc, #164]	@ (80137a0 <__lshift+0xd4>)
 80136fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013700:	f000 fb76 	bl	8013df0 <__assert_func>
 8013704:	3101      	adds	r1, #1
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	e7ee      	b.n	80136e8 <__lshift+0x1c>
 801370a:	2300      	movs	r3, #0
 801370c:	f100 0114 	add.w	r1, r0, #20
 8013710:	f100 0210 	add.w	r2, r0, #16
 8013714:	4618      	mov	r0, r3
 8013716:	4553      	cmp	r3, sl
 8013718:	db33      	blt.n	8013782 <__lshift+0xb6>
 801371a:	6920      	ldr	r0, [r4, #16]
 801371c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013720:	f104 0314 	add.w	r3, r4, #20
 8013724:	f019 091f 	ands.w	r9, r9, #31
 8013728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801372c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013730:	d02b      	beq.n	801378a <__lshift+0xbe>
 8013732:	f1c9 0e20 	rsb	lr, r9, #32
 8013736:	468a      	mov	sl, r1
 8013738:	2200      	movs	r2, #0
 801373a:	6818      	ldr	r0, [r3, #0]
 801373c:	fa00 f009 	lsl.w	r0, r0, r9
 8013740:	4310      	orrs	r0, r2
 8013742:	f84a 0b04 	str.w	r0, [sl], #4
 8013746:	f853 2b04 	ldr.w	r2, [r3], #4
 801374a:	459c      	cmp	ip, r3
 801374c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013750:	d8f3      	bhi.n	801373a <__lshift+0x6e>
 8013752:	ebac 0304 	sub.w	r3, ip, r4
 8013756:	3b15      	subs	r3, #21
 8013758:	f023 0303 	bic.w	r3, r3, #3
 801375c:	3304      	adds	r3, #4
 801375e:	f104 0015 	add.w	r0, r4, #21
 8013762:	4584      	cmp	ip, r0
 8013764:	bf38      	it	cc
 8013766:	2304      	movcc	r3, #4
 8013768:	50ca      	str	r2, [r1, r3]
 801376a:	b10a      	cbz	r2, 8013770 <__lshift+0xa4>
 801376c:	f108 0602 	add.w	r6, r8, #2
 8013770:	3e01      	subs	r6, #1
 8013772:	4638      	mov	r0, r7
 8013774:	612e      	str	r6, [r5, #16]
 8013776:	4621      	mov	r1, r4
 8013778:	f7ff fdda 	bl	8013330 <_Bfree>
 801377c:	4628      	mov	r0, r5
 801377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013782:	f842 0f04 	str.w	r0, [r2, #4]!
 8013786:	3301      	adds	r3, #1
 8013788:	e7c5      	b.n	8013716 <__lshift+0x4a>
 801378a:	3904      	subs	r1, #4
 801378c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013790:	f841 2f04 	str.w	r2, [r1, #4]!
 8013794:	459c      	cmp	ip, r3
 8013796:	d8f9      	bhi.n	801378c <__lshift+0xc0>
 8013798:	e7ea      	b.n	8013770 <__lshift+0xa4>
 801379a:	bf00      	nop
 801379c:	08016bd8 	.word	0x08016bd8
 80137a0:	08016be9 	.word	0x08016be9

080137a4 <__mcmp>:
 80137a4:	690a      	ldr	r2, [r1, #16]
 80137a6:	4603      	mov	r3, r0
 80137a8:	6900      	ldr	r0, [r0, #16]
 80137aa:	1a80      	subs	r0, r0, r2
 80137ac:	b530      	push	{r4, r5, lr}
 80137ae:	d10e      	bne.n	80137ce <__mcmp+0x2a>
 80137b0:	3314      	adds	r3, #20
 80137b2:	3114      	adds	r1, #20
 80137b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80137b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80137bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80137c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80137c4:	4295      	cmp	r5, r2
 80137c6:	d003      	beq.n	80137d0 <__mcmp+0x2c>
 80137c8:	d205      	bcs.n	80137d6 <__mcmp+0x32>
 80137ca:	f04f 30ff 	mov.w	r0, #4294967295
 80137ce:	bd30      	pop	{r4, r5, pc}
 80137d0:	42a3      	cmp	r3, r4
 80137d2:	d3f3      	bcc.n	80137bc <__mcmp+0x18>
 80137d4:	e7fb      	b.n	80137ce <__mcmp+0x2a>
 80137d6:	2001      	movs	r0, #1
 80137d8:	e7f9      	b.n	80137ce <__mcmp+0x2a>
	...

080137dc <__mdiff>:
 80137dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e0:	4689      	mov	r9, r1
 80137e2:	4606      	mov	r6, r0
 80137e4:	4611      	mov	r1, r2
 80137e6:	4648      	mov	r0, r9
 80137e8:	4614      	mov	r4, r2
 80137ea:	f7ff ffdb 	bl	80137a4 <__mcmp>
 80137ee:	1e05      	subs	r5, r0, #0
 80137f0:	d112      	bne.n	8013818 <__mdiff+0x3c>
 80137f2:	4629      	mov	r1, r5
 80137f4:	4630      	mov	r0, r6
 80137f6:	f7ff fd5b 	bl	80132b0 <_Balloc>
 80137fa:	4602      	mov	r2, r0
 80137fc:	b928      	cbnz	r0, 801380a <__mdiff+0x2e>
 80137fe:	4b3f      	ldr	r3, [pc, #252]	@ (80138fc <__mdiff+0x120>)
 8013800:	f240 2137 	movw	r1, #567	@ 0x237
 8013804:	483e      	ldr	r0, [pc, #248]	@ (8013900 <__mdiff+0x124>)
 8013806:	f000 faf3 	bl	8013df0 <__assert_func>
 801380a:	2301      	movs	r3, #1
 801380c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013810:	4610      	mov	r0, r2
 8013812:	b003      	add	sp, #12
 8013814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013818:	bfbc      	itt	lt
 801381a:	464b      	movlt	r3, r9
 801381c:	46a1      	movlt	r9, r4
 801381e:	4630      	mov	r0, r6
 8013820:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013824:	bfba      	itte	lt
 8013826:	461c      	movlt	r4, r3
 8013828:	2501      	movlt	r5, #1
 801382a:	2500      	movge	r5, #0
 801382c:	f7ff fd40 	bl	80132b0 <_Balloc>
 8013830:	4602      	mov	r2, r0
 8013832:	b918      	cbnz	r0, 801383c <__mdiff+0x60>
 8013834:	4b31      	ldr	r3, [pc, #196]	@ (80138fc <__mdiff+0x120>)
 8013836:	f240 2145 	movw	r1, #581	@ 0x245
 801383a:	e7e3      	b.n	8013804 <__mdiff+0x28>
 801383c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013840:	6926      	ldr	r6, [r4, #16]
 8013842:	60c5      	str	r5, [r0, #12]
 8013844:	f109 0310 	add.w	r3, r9, #16
 8013848:	f109 0514 	add.w	r5, r9, #20
 801384c:	f104 0e14 	add.w	lr, r4, #20
 8013850:	f100 0b14 	add.w	fp, r0, #20
 8013854:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013858:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	46d9      	mov	r9, fp
 8013860:	f04f 0c00 	mov.w	ip, #0
 8013864:	9b01      	ldr	r3, [sp, #4]
 8013866:	f85e 0b04 	ldr.w	r0, [lr], #4
 801386a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801386e:	9301      	str	r3, [sp, #4]
 8013870:	fa1f f38a 	uxth.w	r3, sl
 8013874:	4619      	mov	r1, r3
 8013876:	b283      	uxth	r3, r0
 8013878:	1acb      	subs	r3, r1, r3
 801387a:	0c00      	lsrs	r0, r0, #16
 801387c:	4463      	add	r3, ip
 801387e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013882:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013886:	b29b      	uxth	r3, r3
 8013888:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801388c:	4576      	cmp	r6, lr
 801388e:	f849 3b04 	str.w	r3, [r9], #4
 8013892:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013896:	d8e5      	bhi.n	8013864 <__mdiff+0x88>
 8013898:	1b33      	subs	r3, r6, r4
 801389a:	3b15      	subs	r3, #21
 801389c:	f023 0303 	bic.w	r3, r3, #3
 80138a0:	3415      	adds	r4, #21
 80138a2:	3304      	adds	r3, #4
 80138a4:	42a6      	cmp	r6, r4
 80138a6:	bf38      	it	cc
 80138a8:	2304      	movcc	r3, #4
 80138aa:	441d      	add	r5, r3
 80138ac:	445b      	add	r3, fp
 80138ae:	461e      	mov	r6, r3
 80138b0:	462c      	mov	r4, r5
 80138b2:	4544      	cmp	r4, r8
 80138b4:	d30e      	bcc.n	80138d4 <__mdiff+0xf8>
 80138b6:	f108 0103 	add.w	r1, r8, #3
 80138ba:	1b49      	subs	r1, r1, r5
 80138bc:	f021 0103 	bic.w	r1, r1, #3
 80138c0:	3d03      	subs	r5, #3
 80138c2:	45a8      	cmp	r8, r5
 80138c4:	bf38      	it	cc
 80138c6:	2100      	movcc	r1, #0
 80138c8:	440b      	add	r3, r1
 80138ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80138ce:	b191      	cbz	r1, 80138f6 <__mdiff+0x11a>
 80138d0:	6117      	str	r7, [r2, #16]
 80138d2:	e79d      	b.n	8013810 <__mdiff+0x34>
 80138d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80138d8:	46e6      	mov	lr, ip
 80138da:	0c08      	lsrs	r0, r1, #16
 80138dc:	fa1c fc81 	uxtah	ip, ip, r1
 80138e0:	4471      	add	r1, lr
 80138e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80138e6:	b289      	uxth	r1, r1
 80138e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80138ec:	f846 1b04 	str.w	r1, [r6], #4
 80138f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80138f4:	e7dd      	b.n	80138b2 <__mdiff+0xd6>
 80138f6:	3f01      	subs	r7, #1
 80138f8:	e7e7      	b.n	80138ca <__mdiff+0xee>
 80138fa:	bf00      	nop
 80138fc:	08016bd8 	.word	0x08016bd8
 8013900:	08016be9 	.word	0x08016be9

08013904 <__d2b>:
 8013904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013908:	460f      	mov	r7, r1
 801390a:	2101      	movs	r1, #1
 801390c:	ec59 8b10 	vmov	r8, r9, d0
 8013910:	4616      	mov	r6, r2
 8013912:	f7ff fccd 	bl	80132b0 <_Balloc>
 8013916:	4604      	mov	r4, r0
 8013918:	b930      	cbnz	r0, 8013928 <__d2b+0x24>
 801391a:	4602      	mov	r2, r0
 801391c:	4b23      	ldr	r3, [pc, #140]	@ (80139ac <__d2b+0xa8>)
 801391e:	4824      	ldr	r0, [pc, #144]	@ (80139b0 <__d2b+0xac>)
 8013920:	f240 310f 	movw	r1, #783	@ 0x30f
 8013924:	f000 fa64 	bl	8013df0 <__assert_func>
 8013928:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801392c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013930:	b10d      	cbz	r5, 8013936 <__d2b+0x32>
 8013932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013936:	9301      	str	r3, [sp, #4]
 8013938:	f1b8 0300 	subs.w	r3, r8, #0
 801393c:	d023      	beq.n	8013986 <__d2b+0x82>
 801393e:	4668      	mov	r0, sp
 8013940:	9300      	str	r3, [sp, #0]
 8013942:	f7ff fd7c 	bl	801343e <__lo0bits>
 8013946:	e9dd 1200 	ldrd	r1, r2, [sp]
 801394a:	b1d0      	cbz	r0, 8013982 <__d2b+0x7e>
 801394c:	f1c0 0320 	rsb	r3, r0, #32
 8013950:	fa02 f303 	lsl.w	r3, r2, r3
 8013954:	430b      	orrs	r3, r1
 8013956:	40c2      	lsrs	r2, r0
 8013958:	6163      	str	r3, [r4, #20]
 801395a:	9201      	str	r2, [sp, #4]
 801395c:	9b01      	ldr	r3, [sp, #4]
 801395e:	61a3      	str	r3, [r4, #24]
 8013960:	2b00      	cmp	r3, #0
 8013962:	bf0c      	ite	eq
 8013964:	2201      	moveq	r2, #1
 8013966:	2202      	movne	r2, #2
 8013968:	6122      	str	r2, [r4, #16]
 801396a:	b1a5      	cbz	r5, 8013996 <__d2b+0x92>
 801396c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013970:	4405      	add	r5, r0
 8013972:	603d      	str	r5, [r7, #0]
 8013974:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013978:	6030      	str	r0, [r6, #0]
 801397a:	4620      	mov	r0, r4
 801397c:	b003      	add	sp, #12
 801397e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013982:	6161      	str	r1, [r4, #20]
 8013984:	e7ea      	b.n	801395c <__d2b+0x58>
 8013986:	a801      	add	r0, sp, #4
 8013988:	f7ff fd59 	bl	801343e <__lo0bits>
 801398c:	9b01      	ldr	r3, [sp, #4]
 801398e:	6163      	str	r3, [r4, #20]
 8013990:	3020      	adds	r0, #32
 8013992:	2201      	movs	r2, #1
 8013994:	e7e8      	b.n	8013968 <__d2b+0x64>
 8013996:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801399a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801399e:	6038      	str	r0, [r7, #0]
 80139a0:	6918      	ldr	r0, [r3, #16]
 80139a2:	f7ff fd2d 	bl	8013400 <__hi0bits>
 80139a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80139aa:	e7e5      	b.n	8013978 <__d2b+0x74>
 80139ac:	08016bd8 	.word	0x08016bd8
 80139b0:	08016be9 	.word	0x08016be9

080139b4 <__ssputs_r>:
 80139b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b8:	688e      	ldr	r6, [r1, #8]
 80139ba:	461f      	mov	r7, r3
 80139bc:	42be      	cmp	r6, r7
 80139be:	680b      	ldr	r3, [r1, #0]
 80139c0:	4682      	mov	sl, r0
 80139c2:	460c      	mov	r4, r1
 80139c4:	4690      	mov	r8, r2
 80139c6:	d82d      	bhi.n	8013a24 <__ssputs_r+0x70>
 80139c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80139cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80139d0:	d026      	beq.n	8013a20 <__ssputs_r+0x6c>
 80139d2:	6965      	ldr	r5, [r4, #20]
 80139d4:	6909      	ldr	r1, [r1, #16]
 80139d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139da:	eba3 0901 	sub.w	r9, r3, r1
 80139de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139e2:	1c7b      	adds	r3, r7, #1
 80139e4:	444b      	add	r3, r9
 80139e6:	106d      	asrs	r5, r5, #1
 80139e8:	429d      	cmp	r5, r3
 80139ea:	bf38      	it	cc
 80139ec:	461d      	movcc	r5, r3
 80139ee:	0553      	lsls	r3, r2, #21
 80139f0:	d527      	bpl.n	8013a42 <__ssputs_r+0x8e>
 80139f2:	4629      	mov	r1, r5
 80139f4:	f7fd ffac 	bl	8011950 <_malloc_r>
 80139f8:	4606      	mov	r6, r0
 80139fa:	b360      	cbz	r0, 8013a56 <__ssputs_r+0xa2>
 80139fc:	6921      	ldr	r1, [r4, #16]
 80139fe:	464a      	mov	r2, r9
 8013a00:	f7fe fe1f 	bl	8012642 <memcpy>
 8013a04:	89a3      	ldrh	r3, [r4, #12]
 8013a06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a0e:	81a3      	strh	r3, [r4, #12]
 8013a10:	6126      	str	r6, [r4, #16]
 8013a12:	6165      	str	r5, [r4, #20]
 8013a14:	444e      	add	r6, r9
 8013a16:	eba5 0509 	sub.w	r5, r5, r9
 8013a1a:	6026      	str	r6, [r4, #0]
 8013a1c:	60a5      	str	r5, [r4, #8]
 8013a1e:	463e      	mov	r6, r7
 8013a20:	42be      	cmp	r6, r7
 8013a22:	d900      	bls.n	8013a26 <__ssputs_r+0x72>
 8013a24:	463e      	mov	r6, r7
 8013a26:	6820      	ldr	r0, [r4, #0]
 8013a28:	4632      	mov	r2, r6
 8013a2a:	4641      	mov	r1, r8
 8013a2c:	f000 f9c6 	bl	8013dbc <memmove>
 8013a30:	68a3      	ldr	r3, [r4, #8]
 8013a32:	1b9b      	subs	r3, r3, r6
 8013a34:	60a3      	str	r3, [r4, #8]
 8013a36:	6823      	ldr	r3, [r4, #0]
 8013a38:	4433      	add	r3, r6
 8013a3a:	6023      	str	r3, [r4, #0]
 8013a3c:	2000      	movs	r0, #0
 8013a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a42:	462a      	mov	r2, r5
 8013a44:	f000 fa18 	bl	8013e78 <_realloc_r>
 8013a48:	4606      	mov	r6, r0
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d1e0      	bne.n	8013a10 <__ssputs_r+0x5c>
 8013a4e:	6921      	ldr	r1, [r4, #16]
 8013a50:	4650      	mov	r0, sl
 8013a52:	f7ff fbe3 	bl	801321c <_free_r>
 8013a56:	230c      	movs	r3, #12
 8013a58:	f8ca 3000 	str.w	r3, [sl]
 8013a5c:	89a3      	ldrh	r3, [r4, #12]
 8013a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a62:	81a3      	strh	r3, [r4, #12]
 8013a64:	f04f 30ff 	mov.w	r0, #4294967295
 8013a68:	e7e9      	b.n	8013a3e <__ssputs_r+0x8a>
	...

08013a6c <_svfiprintf_r>:
 8013a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a70:	4698      	mov	r8, r3
 8013a72:	898b      	ldrh	r3, [r1, #12]
 8013a74:	061b      	lsls	r3, r3, #24
 8013a76:	b09d      	sub	sp, #116	@ 0x74
 8013a78:	4607      	mov	r7, r0
 8013a7a:	460d      	mov	r5, r1
 8013a7c:	4614      	mov	r4, r2
 8013a7e:	d510      	bpl.n	8013aa2 <_svfiprintf_r+0x36>
 8013a80:	690b      	ldr	r3, [r1, #16]
 8013a82:	b973      	cbnz	r3, 8013aa2 <_svfiprintf_r+0x36>
 8013a84:	2140      	movs	r1, #64	@ 0x40
 8013a86:	f7fd ff63 	bl	8011950 <_malloc_r>
 8013a8a:	6028      	str	r0, [r5, #0]
 8013a8c:	6128      	str	r0, [r5, #16]
 8013a8e:	b930      	cbnz	r0, 8013a9e <_svfiprintf_r+0x32>
 8013a90:	230c      	movs	r3, #12
 8013a92:	603b      	str	r3, [r7, #0]
 8013a94:	f04f 30ff 	mov.w	r0, #4294967295
 8013a98:	b01d      	add	sp, #116	@ 0x74
 8013a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a9e:	2340      	movs	r3, #64	@ 0x40
 8013aa0:	616b      	str	r3, [r5, #20]
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013aa6:	2320      	movs	r3, #32
 8013aa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ab0:	2330      	movs	r3, #48	@ 0x30
 8013ab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013c50 <_svfiprintf_r+0x1e4>
 8013ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013aba:	f04f 0901 	mov.w	r9, #1
 8013abe:	4623      	mov	r3, r4
 8013ac0:	469a      	mov	sl, r3
 8013ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ac6:	b10a      	cbz	r2, 8013acc <_svfiprintf_r+0x60>
 8013ac8:	2a25      	cmp	r2, #37	@ 0x25
 8013aca:	d1f9      	bne.n	8013ac0 <_svfiprintf_r+0x54>
 8013acc:	ebba 0b04 	subs.w	fp, sl, r4
 8013ad0:	d00b      	beq.n	8013aea <_svfiprintf_r+0x7e>
 8013ad2:	465b      	mov	r3, fp
 8013ad4:	4622      	mov	r2, r4
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	4638      	mov	r0, r7
 8013ada:	f7ff ff6b 	bl	80139b4 <__ssputs_r>
 8013ade:	3001      	adds	r0, #1
 8013ae0:	f000 80a7 	beq.w	8013c32 <_svfiprintf_r+0x1c6>
 8013ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ae6:	445a      	add	r2, fp
 8013ae8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013aea:	f89a 3000 	ldrb.w	r3, [sl]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	f000 809f 	beq.w	8013c32 <_svfiprintf_r+0x1c6>
 8013af4:	2300      	movs	r3, #0
 8013af6:	f04f 32ff 	mov.w	r2, #4294967295
 8013afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013afe:	f10a 0a01 	add.w	sl, sl, #1
 8013b02:	9304      	str	r3, [sp, #16]
 8013b04:	9307      	str	r3, [sp, #28]
 8013b06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b0c:	4654      	mov	r4, sl
 8013b0e:	2205      	movs	r2, #5
 8013b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b14:	484e      	ldr	r0, [pc, #312]	@ (8013c50 <_svfiprintf_r+0x1e4>)
 8013b16:	f7ec fbe3 	bl	80002e0 <memchr>
 8013b1a:	9a04      	ldr	r2, [sp, #16]
 8013b1c:	b9d8      	cbnz	r0, 8013b56 <_svfiprintf_r+0xea>
 8013b1e:	06d0      	lsls	r0, r2, #27
 8013b20:	bf44      	itt	mi
 8013b22:	2320      	movmi	r3, #32
 8013b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b28:	0711      	lsls	r1, r2, #28
 8013b2a:	bf44      	itt	mi
 8013b2c:	232b      	movmi	r3, #43	@ 0x2b
 8013b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b32:	f89a 3000 	ldrb.w	r3, [sl]
 8013b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b38:	d015      	beq.n	8013b66 <_svfiprintf_r+0xfa>
 8013b3a:	9a07      	ldr	r2, [sp, #28]
 8013b3c:	4654      	mov	r4, sl
 8013b3e:	2000      	movs	r0, #0
 8013b40:	f04f 0c0a 	mov.w	ip, #10
 8013b44:	4621      	mov	r1, r4
 8013b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b4a:	3b30      	subs	r3, #48	@ 0x30
 8013b4c:	2b09      	cmp	r3, #9
 8013b4e:	d94b      	bls.n	8013be8 <_svfiprintf_r+0x17c>
 8013b50:	b1b0      	cbz	r0, 8013b80 <_svfiprintf_r+0x114>
 8013b52:	9207      	str	r2, [sp, #28]
 8013b54:	e014      	b.n	8013b80 <_svfiprintf_r+0x114>
 8013b56:	eba0 0308 	sub.w	r3, r0, r8
 8013b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	9304      	str	r3, [sp, #16]
 8013b62:	46a2      	mov	sl, r4
 8013b64:	e7d2      	b.n	8013b0c <_svfiprintf_r+0xa0>
 8013b66:	9b03      	ldr	r3, [sp, #12]
 8013b68:	1d19      	adds	r1, r3, #4
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	9103      	str	r1, [sp, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	bfbb      	ittet	lt
 8013b72:	425b      	neglt	r3, r3
 8013b74:	f042 0202 	orrlt.w	r2, r2, #2
 8013b78:	9307      	strge	r3, [sp, #28]
 8013b7a:	9307      	strlt	r3, [sp, #28]
 8013b7c:	bfb8      	it	lt
 8013b7e:	9204      	strlt	r2, [sp, #16]
 8013b80:	7823      	ldrb	r3, [r4, #0]
 8013b82:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b84:	d10a      	bne.n	8013b9c <_svfiprintf_r+0x130>
 8013b86:	7863      	ldrb	r3, [r4, #1]
 8013b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b8a:	d132      	bne.n	8013bf2 <_svfiprintf_r+0x186>
 8013b8c:	9b03      	ldr	r3, [sp, #12]
 8013b8e:	1d1a      	adds	r2, r3, #4
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	9203      	str	r2, [sp, #12]
 8013b94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b98:	3402      	adds	r4, #2
 8013b9a:	9305      	str	r3, [sp, #20]
 8013b9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013c60 <_svfiprintf_r+0x1f4>
 8013ba0:	7821      	ldrb	r1, [r4, #0]
 8013ba2:	2203      	movs	r2, #3
 8013ba4:	4650      	mov	r0, sl
 8013ba6:	f7ec fb9b 	bl	80002e0 <memchr>
 8013baa:	b138      	cbz	r0, 8013bbc <_svfiprintf_r+0x150>
 8013bac:	9b04      	ldr	r3, [sp, #16]
 8013bae:	eba0 000a 	sub.w	r0, r0, sl
 8013bb2:	2240      	movs	r2, #64	@ 0x40
 8013bb4:	4082      	lsls	r2, r0
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	3401      	adds	r4, #1
 8013bba:	9304      	str	r3, [sp, #16]
 8013bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bc0:	4824      	ldr	r0, [pc, #144]	@ (8013c54 <_svfiprintf_r+0x1e8>)
 8013bc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013bc6:	2206      	movs	r2, #6
 8013bc8:	f7ec fb8a 	bl	80002e0 <memchr>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	d036      	beq.n	8013c3e <_svfiprintf_r+0x1d2>
 8013bd0:	4b21      	ldr	r3, [pc, #132]	@ (8013c58 <_svfiprintf_r+0x1ec>)
 8013bd2:	bb1b      	cbnz	r3, 8013c1c <_svfiprintf_r+0x1b0>
 8013bd4:	9b03      	ldr	r3, [sp, #12]
 8013bd6:	3307      	adds	r3, #7
 8013bd8:	f023 0307 	bic.w	r3, r3, #7
 8013bdc:	3308      	adds	r3, #8
 8013bde:	9303      	str	r3, [sp, #12]
 8013be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013be2:	4433      	add	r3, r6
 8013be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013be6:	e76a      	b.n	8013abe <_svfiprintf_r+0x52>
 8013be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bec:	460c      	mov	r4, r1
 8013bee:	2001      	movs	r0, #1
 8013bf0:	e7a8      	b.n	8013b44 <_svfiprintf_r+0xd8>
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	3401      	adds	r4, #1
 8013bf6:	9305      	str	r3, [sp, #20]
 8013bf8:	4619      	mov	r1, r3
 8013bfa:	f04f 0c0a 	mov.w	ip, #10
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c04:	3a30      	subs	r2, #48	@ 0x30
 8013c06:	2a09      	cmp	r2, #9
 8013c08:	d903      	bls.n	8013c12 <_svfiprintf_r+0x1a6>
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d0c6      	beq.n	8013b9c <_svfiprintf_r+0x130>
 8013c0e:	9105      	str	r1, [sp, #20]
 8013c10:	e7c4      	b.n	8013b9c <_svfiprintf_r+0x130>
 8013c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c16:	4604      	mov	r4, r0
 8013c18:	2301      	movs	r3, #1
 8013c1a:	e7f0      	b.n	8013bfe <_svfiprintf_r+0x192>
 8013c1c:	ab03      	add	r3, sp, #12
 8013c1e:	9300      	str	r3, [sp, #0]
 8013c20:	462a      	mov	r2, r5
 8013c22:	4b0e      	ldr	r3, [pc, #56]	@ (8013c5c <_svfiprintf_r+0x1f0>)
 8013c24:	a904      	add	r1, sp, #16
 8013c26:	4638      	mov	r0, r7
 8013c28:	f7fd ffae 	bl	8011b88 <_printf_float>
 8013c2c:	1c42      	adds	r2, r0, #1
 8013c2e:	4606      	mov	r6, r0
 8013c30:	d1d6      	bne.n	8013be0 <_svfiprintf_r+0x174>
 8013c32:	89ab      	ldrh	r3, [r5, #12]
 8013c34:	065b      	lsls	r3, r3, #25
 8013c36:	f53f af2d 	bmi.w	8013a94 <_svfiprintf_r+0x28>
 8013c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c3c:	e72c      	b.n	8013a98 <_svfiprintf_r+0x2c>
 8013c3e:	ab03      	add	r3, sp, #12
 8013c40:	9300      	str	r3, [sp, #0]
 8013c42:	462a      	mov	r2, r5
 8013c44:	4b05      	ldr	r3, [pc, #20]	@ (8013c5c <_svfiprintf_r+0x1f0>)
 8013c46:	a904      	add	r1, sp, #16
 8013c48:	4638      	mov	r0, r7
 8013c4a:	f7fe fa25 	bl	8012098 <_printf_i>
 8013c4e:	e7ed      	b.n	8013c2c <_svfiprintf_r+0x1c0>
 8013c50:	08016d40 	.word	0x08016d40
 8013c54:	08016d4a 	.word	0x08016d4a
 8013c58:	08011b89 	.word	0x08011b89
 8013c5c:	080139b5 	.word	0x080139b5
 8013c60:	08016d46 	.word	0x08016d46

08013c64 <__sflush_r>:
 8013c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6c:	0716      	lsls	r6, r2, #28
 8013c6e:	4605      	mov	r5, r0
 8013c70:	460c      	mov	r4, r1
 8013c72:	d454      	bmi.n	8013d1e <__sflush_r+0xba>
 8013c74:	684b      	ldr	r3, [r1, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	dc02      	bgt.n	8013c80 <__sflush_r+0x1c>
 8013c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	dd48      	ble.n	8013d12 <__sflush_r+0xae>
 8013c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c82:	2e00      	cmp	r6, #0
 8013c84:	d045      	beq.n	8013d12 <__sflush_r+0xae>
 8013c86:	2300      	movs	r3, #0
 8013c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013c8c:	682f      	ldr	r7, [r5, #0]
 8013c8e:	6a21      	ldr	r1, [r4, #32]
 8013c90:	602b      	str	r3, [r5, #0]
 8013c92:	d030      	beq.n	8013cf6 <__sflush_r+0x92>
 8013c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013c96:	89a3      	ldrh	r3, [r4, #12]
 8013c98:	0759      	lsls	r1, r3, #29
 8013c9a:	d505      	bpl.n	8013ca8 <__sflush_r+0x44>
 8013c9c:	6863      	ldr	r3, [r4, #4]
 8013c9e:	1ad2      	subs	r2, r2, r3
 8013ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ca2:	b10b      	cbz	r3, 8013ca8 <__sflush_r+0x44>
 8013ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ca6:	1ad2      	subs	r2, r2, r3
 8013ca8:	2300      	movs	r3, #0
 8013caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cac:	6a21      	ldr	r1, [r4, #32]
 8013cae:	4628      	mov	r0, r5
 8013cb0:	47b0      	blx	r6
 8013cb2:	1c43      	adds	r3, r0, #1
 8013cb4:	89a3      	ldrh	r3, [r4, #12]
 8013cb6:	d106      	bne.n	8013cc6 <__sflush_r+0x62>
 8013cb8:	6829      	ldr	r1, [r5, #0]
 8013cba:	291d      	cmp	r1, #29
 8013cbc:	d82b      	bhi.n	8013d16 <__sflush_r+0xb2>
 8013cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8013d68 <__sflush_r+0x104>)
 8013cc0:	410a      	asrs	r2, r1
 8013cc2:	07d6      	lsls	r6, r2, #31
 8013cc4:	d427      	bmi.n	8013d16 <__sflush_r+0xb2>
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	6062      	str	r2, [r4, #4]
 8013cca:	04d9      	lsls	r1, r3, #19
 8013ccc:	6922      	ldr	r2, [r4, #16]
 8013cce:	6022      	str	r2, [r4, #0]
 8013cd0:	d504      	bpl.n	8013cdc <__sflush_r+0x78>
 8013cd2:	1c42      	adds	r2, r0, #1
 8013cd4:	d101      	bne.n	8013cda <__sflush_r+0x76>
 8013cd6:	682b      	ldr	r3, [r5, #0]
 8013cd8:	b903      	cbnz	r3, 8013cdc <__sflush_r+0x78>
 8013cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8013cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cde:	602f      	str	r7, [r5, #0]
 8013ce0:	b1b9      	cbz	r1, 8013d12 <__sflush_r+0xae>
 8013ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ce6:	4299      	cmp	r1, r3
 8013ce8:	d002      	beq.n	8013cf0 <__sflush_r+0x8c>
 8013cea:	4628      	mov	r0, r5
 8013cec:	f7ff fa96 	bl	801321c <_free_r>
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8013cf4:	e00d      	b.n	8013d12 <__sflush_r+0xae>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	47b0      	blx	r6
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	1c50      	adds	r0, r2, #1
 8013d00:	d1c9      	bne.n	8013c96 <__sflush_r+0x32>
 8013d02:	682b      	ldr	r3, [r5, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d0c6      	beq.n	8013c96 <__sflush_r+0x32>
 8013d08:	2b1d      	cmp	r3, #29
 8013d0a:	d001      	beq.n	8013d10 <__sflush_r+0xac>
 8013d0c:	2b16      	cmp	r3, #22
 8013d0e:	d11e      	bne.n	8013d4e <__sflush_r+0xea>
 8013d10:	602f      	str	r7, [r5, #0]
 8013d12:	2000      	movs	r0, #0
 8013d14:	e022      	b.n	8013d5c <__sflush_r+0xf8>
 8013d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d1a:	b21b      	sxth	r3, r3
 8013d1c:	e01b      	b.n	8013d56 <__sflush_r+0xf2>
 8013d1e:	690f      	ldr	r7, [r1, #16]
 8013d20:	2f00      	cmp	r7, #0
 8013d22:	d0f6      	beq.n	8013d12 <__sflush_r+0xae>
 8013d24:	0793      	lsls	r3, r2, #30
 8013d26:	680e      	ldr	r6, [r1, #0]
 8013d28:	bf08      	it	eq
 8013d2a:	694b      	ldreq	r3, [r1, #20]
 8013d2c:	600f      	str	r7, [r1, #0]
 8013d2e:	bf18      	it	ne
 8013d30:	2300      	movne	r3, #0
 8013d32:	eba6 0807 	sub.w	r8, r6, r7
 8013d36:	608b      	str	r3, [r1, #8]
 8013d38:	f1b8 0f00 	cmp.w	r8, #0
 8013d3c:	dde9      	ble.n	8013d12 <__sflush_r+0xae>
 8013d3e:	6a21      	ldr	r1, [r4, #32]
 8013d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d42:	4643      	mov	r3, r8
 8013d44:	463a      	mov	r2, r7
 8013d46:	4628      	mov	r0, r5
 8013d48:	47b0      	blx	r6
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	dc08      	bgt.n	8013d60 <__sflush_r+0xfc>
 8013d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d56:	81a3      	strh	r3, [r4, #12]
 8013d58:	f04f 30ff 	mov.w	r0, #4294967295
 8013d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d60:	4407      	add	r7, r0
 8013d62:	eba8 0800 	sub.w	r8, r8, r0
 8013d66:	e7e7      	b.n	8013d38 <__sflush_r+0xd4>
 8013d68:	dfbffffe 	.word	0xdfbffffe

08013d6c <_fflush_r>:
 8013d6c:	b538      	push	{r3, r4, r5, lr}
 8013d6e:	690b      	ldr	r3, [r1, #16]
 8013d70:	4605      	mov	r5, r0
 8013d72:	460c      	mov	r4, r1
 8013d74:	b913      	cbnz	r3, 8013d7c <_fflush_r+0x10>
 8013d76:	2500      	movs	r5, #0
 8013d78:	4628      	mov	r0, r5
 8013d7a:	bd38      	pop	{r3, r4, r5, pc}
 8013d7c:	b118      	cbz	r0, 8013d86 <_fflush_r+0x1a>
 8013d7e:	6a03      	ldr	r3, [r0, #32]
 8013d80:	b90b      	cbnz	r3, 8013d86 <_fflush_r+0x1a>
 8013d82:	f7fe fb35 	bl	80123f0 <__sinit>
 8013d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d0f3      	beq.n	8013d76 <_fflush_r+0xa>
 8013d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013d90:	07d0      	lsls	r0, r2, #31
 8013d92:	d404      	bmi.n	8013d9e <_fflush_r+0x32>
 8013d94:	0599      	lsls	r1, r3, #22
 8013d96:	d402      	bmi.n	8013d9e <_fflush_r+0x32>
 8013d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d9a:	f7fe fc50 	bl	801263e <__retarget_lock_acquire_recursive>
 8013d9e:	4628      	mov	r0, r5
 8013da0:	4621      	mov	r1, r4
 8013da2:	f7ff ff5f 	bl	8013c64 <__sflush_r>
 8013da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013da8:	07da      	lsls	r2, r3, #31
 8013daa:	4605      	mov	r5, r0
 8013dac:	d4e4      	bmi.n	8013d78 <_fflush_r+0xc>
 8013dae:	89a3      	ldrh	r3, [r4, #12]
 8013db0:	059b      	lsls	r3, r3, #22
 8013db2:	d4e1      	bmi.n	8013d78 <_fflush_r+0xc>
 8013db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013db6:	f7fe fc43 	bl	8012640 <__retarget_lock_release_recursive>
 8013dba:	e7dd      	b.n	8013d78 <_fflush_r+0xc>

08013dbc <memmove>:
 8013dbc:	4288      	cmp	r0, r1
 8013dbe:	b510      	push	{r4, lr}
 8013dc0:	eb01 0402 	add.w	r4, r1, r2
 8013dc4:	d902      	bls.n	8013dcc <memmove+0x10>
 8013dc6:	4284      	cmp	r4, r0
 8013dc8:	4623      	mov	r3, r4
 8013dca:	d807      	bhi.n	8013ddc <memmove+0x20>
 8013dcc:	1e43      	subs	r3, r0, #1
 8013dce:	42a1      	cmp	r1, r4
 8013dd0:	d008      	beq.n	8013de4 <memmove+0x28>
 8013dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013dda:	e7f8      	b.n	8013dce <memmove+0x12>
 8013ddc:	4402      	add	r2, r0
 8013dde:	4601      	mov	r1, r0
 8013de0:	428a      	cmp	r2, r1
 8013de2:	d100      	bne.n	8013de6 <memmove+0x2a>
 8013de4:	bd10      	pop	{r4, pc}
 8013de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013dee:	e7f7      	b.n	8013de0 <memmove+0x24>

08013df0 <__assert_func>:
 8013df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013df2:	4614      	mov	r4, r2
 8013df4:	461a      	mov	r2, r3
 8013df6:	4b09      	ldr	r3, [pc, #36]	@ (8013e1c <__assert_func+0x2c>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4605      	mov	r5, r0
 8013dfc:	68d8      	ldr	r0, [r3, #12]
 8013dfe:	b954      	cbnz	r4, 8013e16 <__assert_func+0x26>
 8013e00:	4b07      	ldr	r3, [pc, #28]	@ (8013e20 <__assert_func+0x30>)
 8013e02:	461c      	mov	r4, r3
 8013e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e08:	9100      	str	r1, [sp, #0]
 8013e0a:	462b      	mov	r3, r5
 8013e0c:	4905      	ldr	r1, [pc, #20]	@ (8013e24 <__assert_func+0x34>)
 8013e0e:	f000 f86f 	bl	8013ef0 <fiprintf>
 8013e12:	f000 f87f 	bl	8013f14 <abort>
 8013e16:	4b04      	ldr	r3, [pc, #16]	@ (8013e28 <__assert_func+0x38>)
 8013e18:	e7f4      	b.n	8013e04 <__assert_func+0x14>
 8013e1a:	bf00      	nop
 8013e1c:	24000138 	.word	0x24000138
 8013e20:	08016d96 	.word	0x08016d96
 8013e24:	08016d68 	.word	0x08016d68
 8013e28:	08016d5b 	.word	0x08016d5b

08013e2c <_calloc_r>:
 8013e2c:	b570      	push	{r4, r5, r6, lr}
 8013e2e:	fba1 5402 	umull	r5, r4, r1, r2
 8013e32:	b93c      	cbnz	r4, 8013e44 <_calloc_r+0x18>
 8013e34:	4629      	mov	r1, r5
 8013e36:	f7fd fd8b 	bl	8011950 <_malloc_r>
 8013e3a:	4606      	mov	r6, r0
 8013e3c:	b928      	cbnz	r0, 8013e4a <_calloc_r+0x1e>
 8013e3e:	2600      	movs	r6, #0
 8013e40:	4630      	mov	r0, r6
 8013e42:	bd70      	pop	{r4, r5, r6, pc}
 8013e44:	220c      	movs	r2, #12
 8013e46:	6002      	str	r2, [r0, #0]
 8013e48:	e7f9      	b.n	8013e3e <_calloc_r+0x12>
 8013e4a:	462a      	mov	r2, r5
 8013e4c:	4621      	mov	r1, r4
 8013e4e:	f7fe fb68 	bl	8012522 <memset>
 8013e52:	e7f5      	b.n	8013e40 <_calloc_r+0x14>

08013e54 <__ascii_mbtowc>:
 8013e54:	b082      	sub	sp, #8
 8013e56:	b901      	cbnz	r1, 8013e5a <__ascii_mbtowc+0x6>
 8013e58:	a901      	add	r1, sp, #4
 8013e5a:	b142      	cbz	r2, 8013e6e <__ascii_mbtowc+0x1a>
 8013e5c:	b14b      	cbz	r3, 8013e72 <__ascii_mbtowc+0x1e>
 8013e5e:	7813      	ldrb	r3, [r2, #0]
 8013e60:	600b      	str	r3, [r1, #0]
 8013e62:	7812      	ldrb	r2, [r2, #0]
 8013e64:	1e10      	subs	r0, r2, #0
 8013e66:	bf18      	it	ne
 8013e68:	2001      	movne	r0, #1
 8013e6a:	b002      	add	sp, #8
 8013e6c:	4770      	bx	lr
 8013e6e:	4610      	mov	r0, r2
 8013e70:	e7fb      	b.n	8013e6a <__ascii_mbtowc+0x16>
 8013e72:	f06f 0001 	mvn.w	r0, #1
 8013e76:	e7f8      	b.n	8013e6a <__ascii_mbtowc+0x16>

08013e78 <_realloc_r>:
 8013e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e7c:	4680      	mov	r8, r0
 8013e7e:	4615      	mov	r5, r2
 8013e80:	460c      	mov	r4, r1
 8013e82:	b921      	cbnz	r1, 8013e8e <_realloc_r+0x16>
 8013e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e88:	4611      	mov	r1, r2
 8013e8a:	f7fd bd61 	b.w	8011950 <_malloc_r>
 8013e8e:	b92a      	cbnz	r2, 8013e9c <_realloc_r+0x24>
 8013e90:	f7ff f9c4 	bl	801321c <_free_r>
 8013e94:	2400      	movs	r4, #0
 8013e96:	4620      	mov	r0, r4
 8013e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e9c:	f000 f841 	bl	8013f22 <_malloc_usable_size_r>
 8013ea0:	4285      	cmp	r5, r0
 8013ea2:	4606      	mov	r6, r0
 8013ea4:	d802      	bhi.n	8013eac <_realloc_r+0x34>
 8013ea6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013eaa:	d8f4      	bhi.n	8013e96 <_realloc_r+0x1e>
 8013eac:	4629      	mov	r1, r5
 8013eae:	4640      	mov	r0, r8
 8013eb0:	f7fd fd4e 	bl	8011950 <_malloc_r>
 8013eb4:	4607      	mov	r7, r0
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d0ec      	beq.n	8013e94 <_realloc_r+0x1c>
 8013eba:	42b5      	cmp	r5, r6
 8013ebc:	462a      	mov	r2, r5
 8013ebe:	4621      	mov	r1, r4
 8013ec0:	bf28      	it	cs
 8013ec2:	4632      	movcs	r2, r6
 8013ec4:	f7fe fbbd 	bl	8012642 <memcpy>
 8013ec8:	4621      	mov	r1, r4
 8013eca:	4640      	mov	r0, r8
 8013ecc:	f7ff f9a6 	bl	801321c <_free_r>
 8013ed0:	463c      	mov	r4, r7
 8013ed2:	e7e0      	b.n	8013e96 <_realloc_r+0x1e>

08013ed4 <__ascii_wctomb>:
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	4608      	mov	r0, r1
 8013ed8:	b141      	cbz	r1, 8013eec <__ascii_wctomb+0x18>
 8013eda:	2aff      	cmp	r2, #255	@ 0xff
 8013edc:	d904      	bls.n	8013ee8 <__ascii_wctomb+0x14>
 8013ede:	228a      	movs	r2, #138	@ 0x8a
 8013ee0:	601a      	str	r2, [r3, #0]
 8013ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee6:	4770      	bx	lr
 8013ee8:	700a      	strb	r2, [r1, #0]
 8013eea:	2001      	movs	r0, #1
 8013eec:	4770      	bx	lr
	...

08013ef0 <fiprintf>:
 8013ef0:	b40e      	push	{r1, r2, r3}
 8013ef2:	b503      	push	{r0, r1, lr}
 8013ef4:	4601      	mov	r1, r0
 8013ef6:	ab03      	add	r3, sp, #12
 8013ef8:	4805      	ldr	r0, [pc, #20]	@ (8013f10 <fiprintf+0x20>)
 8013efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8013efe:	6800      	ldr	r0, [r0, #0]
 8013f00:	9301      	str	r3, [sp, #4]
 8013f02:	f000 f83f 	bl	8013f84 <_vfiprintf_r>
 8013f06:	b002      	add	sp, #8
 8013f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f0c:	b003      	add	sp, #12
 8013f0e:	4770      	bx	lr
 8013f10:	24000138 	.word	0x24000138

08013f14 <abort>:
 8013f14:	b508      	push	{r3, lr}
 8013f16:	2006      	movs	r0, #6
 8013f18:	f000 fa08 	bl	801432c <raise>
 8013f1c:	2001      	movs	r0, #1
 8013f1e:	f7ed fa49 	bl	80013b4 <_exit>

08013f22 <_malloc_usable_size_r>:
 8013f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f26:	1f18      	subs	r0, r3, #4
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	bfbc      	itt	lt
 8013f2c:	580b      	ldrlt	r3, [r1, r0]
 8013f2e:	18c0      	addlt	r0, r0, r3
 8013f30:	4770      	bx	lr

08013f32 <__sfputc_r>:
 8013f32:	6893      	ldr	r3, [r2, #8]
 8013f34:	3b01      	subs	r3, #1
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	b410      	push	{r4}
 8013f3a:	6093      	str	r3, [r2, #8]
 8013f3c:	da08      	bge.n	8013f50 <__sfputc_r+0x1e>
 8013f3e:	6994      	ldr	r4, [r2, #24]
 8013f40:	42a3      	cmp	r3, r4
 8013f42:	db01      	blt.n	8013f48 <__sfputc_r+0x16>
 8013f44:	290a      	cmp	r1, #10
 8013f46:	d103      	bne.n	8013f50 <__sfputc_r+0x1e>
 8013f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f4c:	f000 b932 	b.w	80141b4 <__swbuf_r>
 8013f50:	6813      	ldr	r3, [r2, #0]
 8013f52:	1c58      	adds	r0, r3, #1
 8013f54:	6010      	str	r0, [r2, #0]
 8013f56:	7019      	strb	r1, [r3, #0]
 8013f58:	4608      	mov	r0, r1
 8013f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f5e:	4770      	bx	lr

08013f60 <__sfputs_r>:
 8013f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f62:	4606      	mov	r6, r0
 8013f64:	460f      	mov	r7, r1
 8013f66:	4614      	mov	r4, r2
 8013f68:	18d5      	adds	r5, r2, r3
 8013f6a:	42ac      	cmp	r4, r5
 8013f6c:	d101      	bne.n	8013f72 <__sfputs_r+0x12>
 8013f6e:	2000      	movs	r0, #0
 8013f70:	e007      	b.n	8013f82 <__sfputs_r+0x22>
 8013f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f76:	463a      	mov	r2, r7
 8013f78:	4630      	mov	r0, r6
 8013f7a:	f7ff ffda 	bl	8013f32 <__sfputc_r>
 8013f7e:	1c43      	adds	r3, r0, #1
 8013f80:	d1f3      	bne.n	8013f6a <__sfputs_r+0xa>
 8013f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f84 <_vfiprintf_r>:
 8013f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f88:	460d      	mov	r5, r1
 8013f8a:	b09d      	sub	sp, #116	@ 0x74
 8013f8c:	4614      	mov	r4, r2
 8013f8e:	4698      	mov	r8, r3
 8013f90:	4606      	mov	r6, r0
 8013f92:	b118      	cbz	r0, 8013f9c <_vfiprintf_r+0x18>
 8013f94:	6a03      	ldr	r3, [r0, #32]
 8013f96:	b90b      	cbnz	r3, 8013f9c <_vfiprintf_r+0x18>
 8013f98:	f7fe fa2a 	bl	80123f0 <__sinit>
 8013f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f9e:	07d9      	lsls	r1, r3, #31
 8013fa0:	d405      	bmi.n	8013fae <_vfiprintf_r+0x2a>
 8013fa2:	89ab      	ldrh	r3, [r5, #12]
 8013fa4:	059a      	lsls	r2, r3, #22
 8013fa6:	d402      	bmi.n	8013fae <_vfiprintf_r+0x2a>
 8013fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013faa:	f7fe fb48 	bl	801263e <__retarget_lock_acquire_recursive>
 8013fae:	89ab      	ldrh	r3, [r5, #12]
 8013fb0:	071b      	lsls	r3, r3, #28
 8013fb2:	d501      	bpl.n	8013fb8 <_vfiprintf_r+0x34>
 8013fb4:	692b      	ldr	r3, [r5, #16]
 8013fb6:	b99b      	cbnz	r3, 8013fe0 <_vfiprintf_r+0x5c>
 8013fb8:	4629      	mov	r1, r5
 8013fba:	4630      	mov	r0, r6
 8013fbc:	f000 f938 	bl	8014230 <__swsetup_r>
 8013fc0:	b170      	cbz	r0, 8013fe0 <_vfiprintf_r+0x5c>
 8013fc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013fc4:	07dc      	lsls	r4, r3, #31
 8013fc6:	d504      	bpl.n	8013fd2 <_vfiprintf_r+0x4e>
 8013fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fcc:	b01d      	add	sp, #116	@ 0x74
 8013fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd2:	89ab      	ldrh	r3, [r5, #12]
 8013fd4:	0598      	lsls	r0, r3, #22
 8013fd6:	d4f7      	bmi.n	8013fc8 <_vfiprintf_r+0x44>
 8013fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013fda:	f7fe fb31 	bl	8012640 <__retarget_lock_release_recursive>
 8013fde:	e7f3      	b.n	8013fc8 <_vfiprintf_r+0x44>
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fe4:	2320      	movs	r3, #32
 8013fe6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fee:	2330      	movs	r3, #48	@ 0x30
 8013ff0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80141a0 <_vfiprintf_r+0x21c>
 8013ff4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013ff8:	f04f 0901 	mov.w	r9, #1
 8013ffc:	4623      	mov	r3, r4
 8013ffe:	469a      	mov	sl, r3
 8014000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014004:	b10a      	cbz	r2, 801400a <_vfiprintf_r+0x86>
 8014006:	2a25      	cmp	r2, #37	@ 0x25
 8014008:	d1f9      	bne.n	8013ffe <_vfiprintf_r+0x7a>
 801400a:	ebba 0b04 	subs.w	fp, sl, r4
 801400e:	d00b      	beq.n	8014028 <_vfiprintf_r+0xa4>
 8014010:	465b      	mov	r3, fp
 8014012:	4622      	mov	r2, r4
 8014014:	4629      	mov	r1, r5
 8014016:	4630      	mov	r0, r6
 8014018:	f7ff ffa2 	bl	8013f60 <__sfputs_r>
 801401c:	3001      	adds	r0, #1
 801401e:	f000 80a7 	beq.w	8014170 <_vfiprintf_r+0x1ec>
 8014022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014024:	445a      	add	r2, fp
 8014026:	9209      	str	r2, [sp, #36]	@ 0x24
 8014028:	f89a 3000 	ldrb.w	r3, [sl]
 801402c:	2b00      	cmp	r3, #0
 801402e:	f000 809f 	beq.w	8014170 <_vfiprintf_r+0x1ec>
 8014032:	2300      	movs	r3, #0
 8014034:	f04f 32ff 	mov.w	r2, #4294967295
 8014038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801403c:	f10a 0a01 	add.w	sl, sl, #1
 8014040:	9304      	str	r3, [sp, #16]
 8014042:	9307      	str	r3, [sp, #28]
 8014044:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014048:	931a      	str	r3, [sp, #104]	@ 0x68
 801404a:	4654      	mov	r4, sl
 801404c:	2205      	movs	r2, #5
 801404e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014052:	4853      	ldr	r0, [pc, #332]	@ (80141a0 <_vfiprintf_r+0x21c>)
 8014054:	f7ec f944 	bl	80002e0 <memchr>
 8014058:	9a04      	ldr	r2, [sp, #16]
 801405a:	b9d8      	cbnz	r0, 8014094 <_vfiprintf_r+0x110>
 801405c:	06d1      	lsls	r1, r2, #27
 801405e:	bf44      	itt	mi
 8014060:	2320      	movmi	r3, #32
 8014062:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014066:	0713      	lsls	r3, r2, #28
 8014068:	bf44      	itt	mi
 801406a:	232b      	movmi	r3, #43	@ 0x2b
 801406c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014070:	f89a 3000 	ldrb.w	r3, [sl]
 8014074:	2b2a      	cmp	r3, #42	@ 0x2a
 8014076:	d015      	beq.n	80140a4 <_vfiprintf_r+0x120>
 8014078:	9a07      	ldr	r2, [sp, #28]
 801407a:	4654      	mov	r4, sl
 801407c:	2000      	movs	r0, #0
 801407e:	f04f 0c0a 	mov.w	ip, #10
 8014082:	4621      	mov	r1, r4
 8014084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014088:	3b30      	subs	r3, #48	@ 0x30
 801408a:	2b09      	cmp	r3, #9
 801408c:	d94b      	bls.n	8014126 <_vfiprintf_r+0x1a2>
 801408e:	b1b0      	cbz	r0, 80140be <_vfiprintf_r+0x13a>
 8014090:	9207      	str	r2, [sp, #28]
 8014092:	e014      	b.n	80140be <_vfiprintf_r+0x13a>
 8014094:	eba0 0308 	sub.w	r3, r0, r8
 8014098:	fa09 f303 	lsl.w	r3, r9, r3
 801409c:	4313      	orrs	r3, r2
 801409e:	9304      	str	r3, [sp, #16]
 80140a0:	46a2      	mov	sl, r4
 80140a2:	e7d2      	b.n	801404a <_vfiprintf_r+0xc6>
 80140a4:	9b03      	ldr	r3, [sp, #12]
 80140a6:	1d19      	adds	r1, r3, #4
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	9103      	str	r1, [sp, #12]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	bfbb      	ittet	lt
 80140b0:	425b      	neglt	r3, r3
 80140b2:	f042 0202 	orrlt.w	r2, r2, #2
 80140b6:	9307      	strge	r3, [sp, #28]
 80140b8:	9307      	strlt	r3, [sp, #28]
 80140ba:	bfb8      	it	lt
 80140bc:	9204      	strlt	r2, [sp, #16]
 80140be:	7823      	ldrb	r3, [r4, #0]
 80140c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80140c2:	d10a      	bne.n	80140da <_vfiprintf_r+0x156>
 80140c4:	7863      	ldrb	r3, [r4, #1]
 80140c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80140c8:	d132      	bne.n	8014130 <_vfiprintf_r+0x1ac>
 80140ca:	9b03      	ldr	r3, [sp, #12]
 80140cc:	1d1a      	adds	r2, r3, #4
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	9203      	str	r2, [sp, #12]
 80140d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80140d6:	3402      	adds	r4, #2
 80140d8:	9305      	str	r3, [sp, #20]
 80140da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80141b0 <_vfiprintf_r+0x22c>
 80140de:	7821      	ldrb	r1, [r4, #0]
 80140e0:	2203      	movs	r2, #3
 80140e2:	4650      	mov	r0, sl
 80140e4:	f7ec f8fc 	bl	80002e0 <memchr>
 80140e8:	b138      	cbz	r0, 80140fa <_vfiprintf_r+0x176>
 80140ea:	9b04      	ldr	r3, [sp, #16]
 80140ec:	eba0 000a 	sub.w	r0, r0, sl
 80140f0:	2240      	movs	r2, #64	@ 0x40
 80140f2:	4082      	lsls	r2, r0
 80140f4:	4313      	orrs	r3, r2
 80140f6:	3401      	adds	r4, #1
 80140f8:	9304      	str	r3, [sp, #16]
 80140fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140fe:	4829      	ldr	r0, [pc, #164]	@ (80141a4 <_vfiprintf_r+0x220>)
 8014100:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014104:	2206      	movs	r2, #6
 8014106:	f7ec f8eb 	bl	80002e0 <memchr>
 801410a:	2800      	cmp	r0, #0
 801410c:	d03f      	beq.n	801418e <_vfiprintf_r+0x20a>
 801410e:	4b26      	ldr	r3, [pc, #152]	@ (80141a8 <_vfiprintf_r+0x224>)
 8014110:	bb1b      	cbnz	r3, 801415a <_vfiprintf_r+0x1d6>
 8014112:	9b03      	ldr	r3, [sp, #12]
 8014114:	3307      	adds	r3, #7
 8014116:	f023 0307 	bic.w	r3, r3, #7
 801411a:	3308      	adds	r3, #8
 801411c:	9303      	str	r3, [sp, #12]
 801411e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014120:	443b      	add	r3, r7
 8014122:	9309      	str	r3, [sp, #36]	@ 0x24
 8014124:	e76a      	b.n	8013ffc <_vfiprintf_r+0x78>
 8014126:	fb0c 3202 	mla	r2, ip, r2, r3
 801412a:	460c      	mov	r4, r1
 801412c:	2001      	movs	r0, #1
 801412e:	e7a8      	b.n	8014082 <_vfiprintf_r+0xfe>
 8014130:	2300      	movs	r3, #0
 8014132:	3401      	adds	r4, #1
 8014134:	9305      	str	r3, [sp, #20]
 8014136:	4619      	mov	r1, r3
 8014138:	f04f 0c0a 	mov.w	ip, #10
 801413c:	4620      	mov	r0, r4
 801413e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014142:	3a30      	subs	r2, #48	@ 0x30
 8014144:	2a09      	cmp	r2, #9
 8014146:	d903      	bls.n	8014150 <_vfiprintf_r+0x1cc>
 8014148:	2b00      	cmp	r3, #0
 801414a:	d0c6      	beq.n	80140da <_vfiprintf_r+0x156>
 801414c:	9105      	str	r1, [sp, #20]
 801414e:	e7c4      	b.n	80140da <_vfiprintf_r+0x156>
 8014150:	fb0c 2101 	mla	r1, ip, r1, r2
 8014154:	4604      	mov	r4, r0
 8014156:	2301      	movs	r3, #1
 8014158:	e7f0      	b.n	801413c <_vfiprintf_r+0x1b8>
 801415a:	ab03      	add	r3, sp, #12
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	462a      	mov	r2, r5
 8014160:	4b12      	ldr	r3, [pc, #72]	@ (80141ac <_vfiprintf_r+0x228>)
 8014162:	a904      	add	r1, sp, #16
 8014164:	4630      	mov	r0, r6
 8014166:	f7fd fd0f 	bl	8011b88 <_printf_float>
 801416a:	4607      	mov	r7, r0
 801416c:	1c78      	adds	r0, r7, #1
 801416e:	d1d6      	bne.n	801411e <_vfiprintf_r+0x19a>
 8014170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014172:	07d9      	lsls	r1, r3, #31
 8014174:	d405      	bmi.n	8014182 <_vfiprintf_r+0x1fe>
 8014176:	89ab      	ldrh	r3, [r5, #12]
 8014178:	059a      	lsls	r2, r3, #22
 801417a:	d402      	bmi.n	8014182 <_vfiprintf_r+0x1fe>
 801417c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801417e:	f7fe fa5f 	bl	8012640 <__retarget_lock_release_recursive>
 8014182:	89ab      	ldrh	r3, [r5, #12]
 8014184:	065b      	lsls	r3, r3, #25
 8014186:	f53f af1f 	bmi.w	8013fc8 <_vfiprintf_r+0x44>
 801418a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801418c:	e71e      	b.n	8013fcc <_vfiprintf_r+0x48>
 801418e:	ab03      	add	r3, sp, #12
 8014190:	9300      	str	r3, [sp, #0]
 8014192:	462a      	mov	r2, r5
 8014194:	4b05      	ldr	r3, [pc, #20]	@ (80141ac <_vfiprintf_r+0x228>)
 8014196:	a904      	add	r1, sp, #16
 8014198:	4630      	mov	r0, r6
 801419a:	f7fd ff7d 	bl	8012098 <_printf_i>
 801419e:	e7e4      	b.n	801416a <_vfiprintf_r+0x1e6>
 80141a0:	08016d40 	.word	0x08016d40
 80141a4:	08016d4a 	.word	0x08016d4a
 80141a8:	08011b89 	.word	0x08011b89
 80141ac:	08013f61 	.word	0x08013f61
 80141b0:	08016d46 	.word	0x08016d46

080141b4 <__swbuf_r>:
 80141b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141b6:	460e      	mov	r6, r1
 80141b8:	4614      	mov	r4, r2
 80141ba:	4605      	mov	r5, r0
 80141bc:	b118      	cbz	r0, 80141c6 <__swbuf_r+0x12>
 80141be:	6a03      	ldr	r3, [r0, #32]
 80141c0:	b90b      	cbnz	r3, 80141c6 <__swbuf_r+0x12>
 80141c2:	f7fe f915 	bl	80123f0 <__sinit>
 80141c6:	69a3      	ldr	r3, [r4, #24]
 80141c8:	60a3      	str	r3, [r4, #8]
 80141ca:	89a3      	ldrh	r3, [r4, #12]
 80141cc:	071a      	lsls	r2, r3, #28
 80141ce:	d501      	bpl.n	80141d4 <__swbuf_r+0x20>
 80141d0:	6923      	ldr	r3, [r4, #16]
 80141d2:	b943      	cbnz	r3, 80141e6 <__swbuf_r+0x32>
 80141d4:	4621      	mov	r1, r4
 80141d6:	4628      	mov	r0, r5
 80141d8:	f000 f82a 	bl	8014230 <__swsetup_r>
 80141dc:	b118      	cbz	r0, 80141e6 <__swbuf_r+0x32>
 80141de:	f04f 37ff 	mov.w	r7, #4294967295
 80141e2:	4638      	mov	r0, r7
 80141e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141e6:	6823      	ldr	r3, [r4, #0]
 80141e8:	6922      	ldr	r2, [r4, #16]
 80141ea:	1a98      	subs	r0, r3, r2
 80141ec:	6963      	ldr	r3, [r4, #20]
 80141ee:	b2f6      	uxtb	r6, r6
 80141f0:	4283      	cmp	r3, r0
 80141f2:	4637      	mov	r7, r6
 80141f4:	dc05      	bgt.n	8014202 <__swbuf_r+0x4e>
 80141f6:	4621      	mov	r1, r4
 80141f8:	4628      	mov	r0, r5
 80141fa:	f7ff fdb7 	bl	8013d6c <_fflush_r>
 80141fe:	2800      	cmp	r0, #0
 8014200:	d1ed      	bne.n	80141de <__swbuf_r+0x2a>
 8014202:	68a3      	ldr	r3, [r4, #8]
 8014204:	3b01      	subs	r3, #1
 8014206:	60a3      	str	r3, [r4, #8]
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	1c5a      	adds	r2, r3, #1
 801420c:	6022      	str	r2, [r4, #0]
 801420e:	701e      	strb	r6, [r3, #0]
 8014210:	6962      	ldr	r2, [r4, #20]
 8014212:	1c43      	adds	r3, r0, #1
 8014214:	429a      	cmp	r2, r3
 8014216:	d004      	beq.n	8014222 <__swbuf_r+0x6e>
 8014218:	89a3      	ldrh	r3, [r4, #12]
 801421a:	07db      	lsls	r3, r3, #31
 801421c:	d5e1      	bpl.n	80141e2 <__swbuf_r+0x2e>
 801421e:	2e0a      	cmp	r6, #10
 8014220:	d1df      	bne.n	80141e2 <__swbuf_r+0x2e>
 8014222:	4621      	mov	r1, r4
 8014224:	4628      	mov	r0, r5
 8014226:	f7ff fda1 	bl	8013d6c <_fflush_r>
 801422a:	2800      	cmp	r0, #0
 801422c:	d0d9      	beq.n	80141e2 <__swbuf_r+0x2e>
 801422e:	e7d6      	b.n	80141de <__swbuf_r+0x2a>

08014230 <__swsetup_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4b29      	ldr	r3, [pc, #164]	@ (80142d8 <__swsetup_r+0xa8>)
 8014234:	4605      	mov	r5, r0
 8014236:	6818      	ldr	r0, [r3, #0]
 8014238:	460c      	mov	r4, r1
 801423a:	b118      	cbz	r0, 8014244 <__swsetup_r+0x14>
 801423c:	6a03      	ldr	r3, [r0, #32]
 801423e:	b90b      	cbnz	r3, 8014244 <__swsetup_r+0x14>
 8014240:	f7fe f8d6 	bl	80123f0 <__sinit>
 8014244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014248:	0719      	lsls	r1, r3, #28
 801424a:	d422      	bmi.n	8014292 <__swsetup_r+0x62>
 801424c:	06da      	lsls	r2, r3, #27
 801424e:	d407      	bmi.n	8014260 <__swsetup_r+0x30>
 8014250:	2209      	movs	r2, #9
 8014252:	602a      	str	r2, [r5, #0]
 8014254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014258:	81a3      	strh	r3, [r4, #12]
 801425a:	f04f 30ff 	mov.w	r0, #4294967295
 801425e:	e033      	b.n	80142c8 <__swsetup_r+0x98>
 8014260:	0758      	lsls	r0, r3, #29
 8014262:	d512      	bpl.n	801428a <__swsetup_r+0x5a>
 8014264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014266:	b141      	cbz	r1, 801427a <__swsetup_r+0x4a>
 8014268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801426c:	4299      	cmp	r1, r3
 801426e:	d002      	beq.n	8014276 <__swsetup_r+0x46>
 8014270:	4628      	mov	r0, r5
 8014272:	f7fe ffd3 	bl	801321c <_free_r>
 8014276:	2300      	movs	r3, #0
 8014278:	6363      	str	r3, [r4, #52]	@ 0x34
 801427a:	89a3      	ldrh	r3, [r4, #12]
 801427c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014280:	81a3      	strh	r3, [r4, #12]
 8014282:	2300      	movs	r3, #0
 8014284:	6063      	str	r3, [r4, #4]
 8014286:	6923      	ldr	r3, [r4, #16]
 8014288:	6023      	str	r3, [r4, #0]
 801428a:	89a3      	ldrh	r3, [r4, #12]
 801428c:	f043 0308 	orr.w	r3, r3, #8
 8014290:	81a3      	strh	r3, [r4, #12]
 8014292:	6923      	ldr	r3, [r4, #16]
 8014294:	b94b      	cbnz	r3, 80142aa <__swsetup_r+0x7a>
 8014296:	89a3      	ldrh	r3, [r4, #12]
 8014298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801429c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80142a0:	d003      	beq.n	80142aa <__swsetup_r+0x7a>
 80142a2:	4621      	mov	r1, r4
 80142a4:	4628      	mov	r0, r5
 80142a6:	f000 f883 	bl	80143b0 <__smakebuf_r>
 80142aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142ae:	f013 0201 	ands.w	r2, r3, #1
 80142b2:	d00a      	beq.n	80142ca <__swsetup_r+0x9a>
 80142b4:	2200      	movs	r2, #0
 80142b6:	60a2      	str	r2, [r4, #8]
 80142b8:	6962      	ldr	r2, [r4, #20]
 80142ba:	4252      	negs	r2, r2
 80142bc:	61a2      	str	r2, [r4, #24]
 80142be:	6922      	ldr	r2, [r4, #16]
 80142c0:	b942      	cbnz	r2, 80142d4 <__swsetup_r+0xa4>
 80142c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80142c6:	d1c5      	bne.n	8014254 <__swsetup_r+0x24>
 80142c8:	bd38      	pop	{r3, r4, r5, pc}
 80142ca:	0799      	lsls	r1, r3, #30
 80142cc:	bf58      	it	pl
 80142ce:	6962      	ldrpl	r2, [r4, #20]
 80142d0:	60a2      	str	r2, [r4, #8]
 80142d2:	e7f4      	b.n	80142be <__swsetup_r+0x8e>
 80142d4:	2000      	movs	r0, #0
 80142d6:	e7f7      	b.n	80142c8 <__swsetup_r+0x98>
 80142d8:	24000138 	.word	0x24000138

080142dc <_raise_r>:
 80142dc:	291f      	cmp	r1, #31
 80142de:	b538      	push	{r3, r4, r5, lr}
 80142e0:	4605      	mov	r5, r0
 80142e2:	460c      	mov	r4, r1
 80142e4:	d904      	bls.n	80142f0 <_raise_r+0x14>
 80142e6:	2316      	movs	r3, #22
 80142e8:	6003      	str	r3, [r0, #0]
 80142ea:	f04f 30ff 	mov.w	r0, #4294967295
 80142ee:	bd38      	pop	{r3, r4, r5, pc}
 80142f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80142f2:	b112      	cbz	r2, 80142fa <_raise_r+0x1e>
 80142f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142f8:	b94b      	cbnz	r3, 801430e <_raise_r+0x32>
 80142fa:	4628      	mov	r0, r5
 80142fc:	f000 f830 	bl	8014360 <_getpid_r>
 8014300:	4622      	mov	r2, r4
 8014302:	4601      	mov	r1, r0
 8014304:	4628      	mov	r0, r5
 8014306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801430a:	f000 b817 	b.w	801433c <_kill_r>
 801430e:	2b01      	cmp	r3, #1
 8014310:	d00a      	beq.n	8014328 <_raise_r+0x4c>
 8014312:	1c59      	adds	r1, r3, #1
 8014314:	d103      	bne.n	801431e <_raise_r+0x42>
 8014316:	2316      	movs	r3, #22
 8014318:	6003      	str	r3, [r0, #0]
 801431a:	2001      	movs	r0, #1
 801431c:	e7e7      	b.n	80142ee <_raise_r+0x12>
 801431e:	2100      	movs	r1, #0
 8014320:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014324:	4620      	mov	r0, r4
 8014326:	4798      	blx	r3
 8014328:	2000      	movs	r0, #0
 801432a:	e7e0      	b.n	80142ee <_raise_r+0x12>

0801432c <raise>:
 801432c:	4b02      	ldr	r3, [pc, #8]	@ (8014338 <raise+0xc>)
 801432e:	4601      	mov	r1, r0
 8014330:	6818      	ldr	r0, [r3, #0]
 8014332:	f7ff bfd3 	b.w	80142dc <_raise_r>
 8014336:	bf00      	nop
 8014338:	24000138 	.word	0x24000138

0801433c <_kill_r>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	4d07      	ldr	r5, [pc, #28]	@ (801435c <_kill_r+0x20>)
 8014340:	2300      	movs	r3, #0
 8014342:	4604      	mov	r4, r0
 8014344:	4608      	mov	r0, r1
 8014346:	4611      	mov	r1, r2
 8014348:	602b      	str	r3, [r5, #0]
 801434a:	f7ed f823 	bl	8001394 <_kill>
 801434e:	1c43      	adds	r3, r0, #1
 8014350:	d102      	bne.n	8014358 <_kill_r+0x1c>
 8014352:	682b      	ldr	r3, [r5, #0]
 8014354:	b103      	cbz	r3, 8014358 <_kill_r+0x1c>
 8014356:	6023      	str	r3, [r4, #0]
 8014358:	bd38      	pop	{r3, r4, r5, pc}
 801435a:	bf00      	nop
 801435c:	240070d8 	.word	0x240070d8

08014360 <_getpid_r>:
 8014360:	f7ed b810 	b.w	8001384 <_getpid>

08014364 <__swhatbuf_r>:
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	460c      	mov	r4, r1
 8014368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801436c:	2900      	cmp	r1, #0
 801436e:	b096      	sub	sp, #88	@ 0x58
 8014370:	4615      	mov	r5, r2
 8014372:	461e      	mov	r6, r3
 8014374:	da0d      	bge.n	8014392 <__swhatbuf_r+0x2e>
 8014376:	89a3      	ldrh	r3, [r4, #12]
 8014378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801437c:	f04f 0100 	mov.w	r1, #0
 8014380:	bf14      	ite	ne
 8014382:	2340      	movne	r3, #64	@ 0x40
 8014384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014388:	2000      	movs	r0, #0
 801438a:	6031      	str	r1, [r6, #0]
 801438c:	602b      	str	r3, [r5, #0]
 801438e:	b016      	add	sp, #88	@ 0x58
 8014390:	bd70      	pop	{r4, r5, r6, pc}
 8014392:	466a      	mov	r2, sp
 8014394:	f000 f848 	bl	8014428 <_fstat_r>
 8014398:	2800      	cmp	r0, #0
 801439a:	dbec      	blt.n	8014376 <__swhatbuf_r+0x12>
 801439c:	9901      	ldr	r1, [sp, #4]
 801439e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80143a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80143a6:	4259      	negs	r1, r3
 80143a8:	4159      	adcs	r1, r3
 80143aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80143ae:	e7eb      	b.n	8014388 <__swhatbuf_r+0x24>

080143b0 <__smakebuf_r>:
 80143b0:	898b      	ldrh	r3, [r1, #12]
 80143b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80143b4:	079d      	lsls	r5, r3, #30
 80143b6:	4606      	mov	r6, r0
 80143b8:	460c      	mov	r4, r1
 80143ba:	d507      	bpl.n	80143cc <__smakebuf_r+0x1c>
 80143bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80143c0:	6023      	str	r3, [r4, #0]
 80143c2:	6123      	str	r3, [r4, #16]
 80143c4:	2301      	movs	r3, #1
 80143c6:	6163      	str	r3, [r4, #20]
 80143c8:	b003      	add	sp, #12
 80143ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143cc:	ab01      	add	r3, sp, #4
 80143ce:	466a      	mov	r2, sp
 80143d0:	f7ff ffc8 	bl	8014364 <__swhatbuf_r>
 80143d4:	9f00      	ldr	r7, [sp, #0]
 80143d6:	4605      	mov	r5, r0
 80143d8:	4639      	mov	r1, r7
 80143da:	4630      	mov	r0, r6
 80143dc:	f7fd fab8 	bl	8011950 <_malloc_r>
 80143e0:	b948      	cbnz	r0, 80143f6 <__smakebuf_r+0x46>
 80143e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143e6:	059a      	lsls	r2, r3, #22
 80143e8:	d4ee      	bmi.n	80143c8 <__smakebuf_r+0x18>
 80143ea:	f023 0303 	bic.w	r3, r3, #3
 80143ee:	f043 0302 	orr.w	r3, r3, #2
 80143f2:	81a3      	strh	r3, [r4, #12]
 80143f4:	e7e2      	b.n	80143bc <__smakebuf_r+0xc>
 80143f6:	89a3      	ldrh	r3, [r4, #12]
 80143f8:	6020      	str	r0, [r4, #0]
 80143fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143fe:	81a3      	strh	r3, [r4, #12]
 8014400:	9b01      	ldr	r3, [sp, #4]
 8014402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014406:	b15b      	cbz	r3, 8014420 <__smakebuf_r+0x70>
 8014408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801440c:	4630      	mov	r0, r6
 801440e:	f000 f81d 	bl	801444c <_isatty_r>
 8014412:	b128      	cbz	r0, 8014420 <__smakebuf_r+0x70>
 8014414:	89a3      	ldrh	r3, [r4, #12]
 8014416:	f023 0303 	bic.w	r3, r3, #3
 801441a:	f043 0301 	orr.w	r3, r3, #1
 801441e:	81a3      	strh	r3, [r4, #12]
 8014420:	89a3      	ldrh	r3, [r4, #12]
 8014422:	431d      	orrs	r5, r3
 8014424:	81a5      	strh	r5, [r4, #12]
 8014426:	e7cf      	b.n	80143c8 <__smakebuf_r+0x18>

08014428 <_fstat_r>:
 8014428:	b538      	push	{r3, r4, r5, lr}
 801442a:	4d07      	ldr	r5, [pc, #28]	@ (8014448 <_fstat_r+0x20>)
 801442c:	2300      	movs	r3, #0
 801442e:	4604      	mov	r4, r0
 8014430:	4608      	mov	r0, r1
 8014432:	4611      	mov	r1, r2
 8014434:	602b      	str	r3, [r5, #0]
 8014436:	f7ed f80d 	bl	8001454 <_fstat>
 801443a:	1c43      	adds	r3, r0, #1
 801443c:	d102      	bne.n	8014444 <_fstat_r+0x1c>
 801443e:	682b      	ldr	r3, [r5, #0]
 8014440:	b103      	cbz	r3, 8014444 <_fstat_r+0x1c>
 8014442:	6023      	str	r3, [r4, #0]
 8014444:	bd38      	pop	{r3, r4, r5, pc}
 8014446:	bf00      	nop
 8014448:	240070d8 	.word	0x240070d8

0801444c <_isatty_r>:
 801444c:	b538      	push	{r3, r4, r5, lr}
 801444e:	4d06      	ldr	r5, [pc, #24]	@ (8014468 <_isatty_r+0x1c>)
 8014450:	2300      	movs	r3, #0
 8014452:	4604      	mov	r4, r0
 8014454:	4608      	mov	r0, r1
 8014456:	602b      	str	r3, [r5, #0]
 8014458:	f7ed f80c 	bl	8001474 <_isatty>
 801445c:	1c43      	adds	r3, r0, #1
 801445e:	d102      	bne.n	8014466 <_isatty_r+0x1a>
 8014460:	682b      	ldr	r3, [r5, #0]
 8014462:	b103      	cbz	r3, 8014466 <_isatty_r+0x1a>
 8014464:	6023      	str	r3, [r4, #0]
 8014466:	bd38      	pop	{r3, r4, r5, pc}
 8014468:	240070d8 	.word	0x240070d8
 801446c:	00000000 	.word	0x00000000

08014470 <fmod>:
 8014470:	b508      	push	{r3, lr}
 8014472:	ed2d 8b04 	vpush	{d8-d9}
 8014476:	eeb0 9b40 	vmov.f64	d9, d0
 801447a:	eeb0 8b41 	vmov.f64	d8, d1
 801447e:	f000 f879 	bl	8014574 <__ieee754_fmod>
 8014482:	eeb4 9b48 	vcmp.f64	d9, d8
 8014486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801448a:	d60c      	bvs.n	80144a6 <fmod+0x36>
 801448c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 80144b0 <fmod+0x40>
 8014490:	eeb4 8b49 	vcmp.f64	d8, d9
 8014494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014498:	d105      	bne.n	80144a6 <fmod+0x36>
 801449a:	f7fe f8a5 	bl	80125e8 <__errno>
 801449e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80144a2:	2321      	movs	r3, #33	@ 0x21
 80144a4:	6003      	str	r3, [r0, #0]
 80144a6:	ecbd 8b04 	vpop	{d8-d9}
 80144aa:	bd08      	pop	{r3, pc}
 80144ac:	f3af 8000 	nop.w
	...

080144b8 <sqrt>:
 80144b8:	b508      	push	{r3, lr}
 80144ba:	ed2d 8b04 	vpush	{d8-d9}
 80144be:	eeb0 8b40 	vmov.f64	d8, d0
 80144c2:	f000 f853 	bl	801456c <__ieee754_sqrt>
 80144c6:	eeb4 8b48 	vcmp.f64	d8, d8
 80144ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ce:	d60c      	bvs.n	80144ea <sqrt+0x32>
 80144d0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 80144f0 <sqrt+0x38>
 80144d4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80144d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144dc:	d505      	bpl.n	80144ea <sqrt+0x32>
 80144de:	f7fe f883 	bl	80125e8 <__errno>
 80144e2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80144e6:	2321      	movs	r3, #33	@ 0x21
 80144e8:	6003      	str	r3, [r0, #0]
 80144ea:	ecbd 8b04 	vpop	{d8-d9}
 80144ee:	bd08      	pop	{r3, pc}
	...

080144f8 <acosf>:
 80144f8:	b508      	push	{r3, lr}
 80144fa:	ed2d 8b02 	vpush	{d8}
 80144fe:	eeb0 8a40 	vmov.f32	s16, s0
 8014502:	f000 f943 	bl	801478c <__ieee754_acosf>
 8014506:	eeb4 8a48 	vcmp.f32	s16, s16
 801450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801450e:	eef0 8a40 	vmov.f32	s17, s0
 8014512:	d615      	bvs.n	8014540 <acosf+0x48>
 8014514:	eeb0 0a48 	vmov.f32	s0, s16
 8014518:	f000 f81a 	bl	8014550 <fabsf>
 801451c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014520:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014528:	dd0a      	ble.n	8014540 <acosf+0x48>
 801452a:	f7fe f85d 	bl	80125e8 <__errno>
 801452e:	ecbd 8b02 	vpop	{d8}
 8014532:	2321      	movs	r3, #33	@ 0x21
 8014534:	6003      	str	r3, [r0, #0]
 8014536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801453a:	4804      	ldr	r0, [pc, #16]	@ (801454c <acosf+0x54>)
 801453c:	f000 b810 	b.w	8014560 <nanf>
 8014540:	eeb0 0a68 	vmov.f32	s0, s17
 8014544:	ecbd 8b02 	vpop	{d8}
 8014548:	bd08      	pop	{r3, pc}
 801454a:	bf00      	nop
 801454c:	08016d96 	.word	0x08016d96

08014550 <fabsf>:
 8014550:	ee10 3a10 	vmov	r3, s0
 8014554:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014558:	ee00 3a10 	vmov	s0, r3
 801455c:	4770      	bx	lr
	...

08014560 <nanf>:
 8014560:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014568 <nanf+0x8>
 8014564:	4770      	bx	lr
 8014566:	bf00      	nop
 8014568:	7fc00000 	.word	0x7fc00000

0801456c <__ieee754_sqrt>:
 801456c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014570:	4770      	bx	lr
	...

08014574 <__ieee754_fmod>:
 8014574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014578:	ed8d 1b00 	vstr	d1, [sp]
 801457c:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014580:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014584:	ea56 0307 	orrs.w	r3, r6, r7
 8014588:	46b6      	mov	lr, r6
 801458a:	d00d      	beq.n	80145a8 <__ieee754_fmod+0x34>
 801458c:	ee10 ca90 	vmov	ip, s1
 8014590:	4b78      	ldr	r3, [pc, #480]	@ (8014774 <__ieee754_fmod+0x200>)
 8014592:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014596:	4598      	cmp	r8, r3
 8014598:	d806      	bhi.n	80145a8 <__ieee754_fmod+0x34>
 801459a:	4273      	negs	r3, r6
 801459c:	4a76      	ldr	r2, [pc, #472]	@ (8014778 <__ieee754_fmod+0x204>)
 801459e:	4333      	orrs	r3, r6
 80145a0:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d908      	bls.n	80145ba <__ieee754_fmod+0x46>
 80145a8:	ed9d 7b00 	vldr	d7, [sp]
 80145ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80145b0:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80145b4:	b003      	add	sp, #12
 80145b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145ba:	ee10 9a10 	vmov	r9, s0
 80145be:	45b8      	cmp	r8, r7
 80145c0:	4649      	mov	r1, r9
 80145c2:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 80145c6:	dc09      	bgt.n	80145dc <__ieee754_fmod+0x68>
 80145c8:	dbf4      	blt.n	80145b4 <__ieee754_fmod+0x40>
 80145ca:	454e      	cmp	r6, r9
 80145cc:	d8f2      	bhi.n	80145b4 <__ieee754_fmod+0x40>
 80145ce:	d105      	bne.n	80145dc <__ieee754_fmod+0x68>
 80145d0:	4b6a      	ldr	r3, [pc, #424]	@ (801477c <__ieee754_fmod+0x208>)
 80145d2:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 80145d6:	ed93 0b00 	vldr	d0, [r3]
 80145da:	e7eb      	b.n	80145b4 <__ieee754_fmod+0x40>
 80145dc:	4a66      	ldr	r2, [pc, #408]	@ (8014778 <__ieee754_fmod+0x204>)
 80145de:	ea1c 0f02 	tst.w	ip, r2
 80145e2:	d14a      	bne.n	801467a <__ieee754_fmod+0x106>
 80145e4:	f1b8 0f00 	cmp.w	r8, #0
 80145e8:	d13f      	bne.n	801466a <__ieee754_fmod+0xf6>
 80145ea:	4865      	ldr	r0, [pc, #404]	@ (8014780 <__ieee754_fmod+0x20c>)
 80145ec:	464b      	mov	r3, r9
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	dc38      	bgt.n	8014664 <__ieee754_fmod+0xf0>
 80145f2:	4215      	tst	r5, r2
 80145f4:	d150      	bne.n	8014698 <__ieee754_fmod+0x124>
 80145f6:	2f00      	cmp	r7, #0
 80145f8:	d147      	bne.n	801468a <__ieee754_fmod+0x116>
 80145fa:	4a61      	ldr	r2, [pc, #388]	@ (8014780 <__ieee754_fmod+0x20c>)
 80145fc:	4633      	mov	r3, r6
 80145fe:	2b00      	cmp	r3, #0
 8014600:	dc40      	bgt.n	8014684 <__ieee754_fmod+0x110>
 8014602:	4b60      	ldr	r3, [pc, #384]	@ (8014784 <__ieee754_fmod+0x210>)
 8014604:	4298      	cmp	r0, r3
 8014606:	db4b      	blt.n	80146a0 <__ieee754_fmod+0x12c>
 8014608:	f3cc 0313 	ubfx	r3, ip, #0, #20
 801460c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014610:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8014784 <__ieee754_fmod+0x210>
 8014614:	4562      	cmp	r2, ip
 8014616:	db58      	blt.n	80146ca <__ieee754_fmod+0x156>
 8014618:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801461c:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014620:	1a80      	subs	r0, r0, r2
 8014622:	1b5e      	subs	r6, r3, r5
 8014624:	eba1 070e 	sub.w	r7, r1, lr
 8014628:	2800      	cmp	r0, #0
 801462a:	d164      	bne.n	80146f6 <__ieee754_fmod+0x182>
 801462c:	4571      	cmp	r1, lr
 801462e:	bf38      	it	cc
 8014630:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014634:	2e00      	cmp	r6, #0
 8014636:	bfa4      	itt	ge
 8014638:	4639      	movge	r1, r7
 801463a:	4633      	movge	r3, r6
 801463c:	ea53 0001 	orrs.w	r0, r3, r1
 8014640:	d0c6      	beq.n	80145d0 <__ieee754_fmod+0x5c>
 8014642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014646:	db6b      	blt.n	8014720 <__ieee754_fmod+0x1ac>
 8014648:	484e      	ldr	r0, [pc, #312]	@ (8014784 <__ieee754_fmod+0x210>)
 801464a:	4282      	cmp	r2, r0
 801464c:	db6e      	blt.n	801472c <__ieee754_fmod+0x1b8>
 801464e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014652:	4323      	orrs	r3, r4
 8014654:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014658:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801465c:	460c      	mov	r4, r1
 801465e:	ec45 4b10 	vmov	d0, r4, r5
 8014662:	e7a7      	b.n	80145b4 <__ieee754_fmod+0x40>
 8014664:	3801      	subs	r0, #1
 8014666:	005b      	lsls	r3, r3, #1
 8014668:	e7c1      	b.n	80145ee <__ieee754_fmod+0x7a>
 801466a:	4846      	ldr	r0, [pc, #280]	@ (8014784 <__ieee754_fmod+0x210>)
 801466c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014670:	2b00      	cmp	r3, #0
 8014672:	ddbe      	ble.n	80145f2 <__ieee754_fmod+0x7e>
 8014674:	3801      	subs	r0, #1
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	e7fa      	b.n	8014670 <__ieee754_fmod+0xfc>
 801467a:	ea4f 5028 	mov.w	r0, r8, asr #20
 801467e:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014682:	e7b6      	b.n	80145f2 <__ieee754_fmod+0x7e>
 8014684:	3a01      	subs	r2, #1
 8014686:	005b      	lsls	r3, r3, #1
 8014688:	e7b9      	b.n	80145fe <__ieee754_fmod+0x8a>
 801468a:	4a3e      	ldr	r2, [pc, #248]	@ (8014784 <__ieee754_fmod+0x210>)
 801468c:	02fb      	lsls	r3, r7, #11
 801468e:	2b00      	cmp	r3, #0
 8014690:	ddb7      	ble.n	8014602 <__ieee754_fmod+0x8e>
 8014692:	3a01      	subs	r2, #1
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	e7fa      	b.n	801468e <__ieee754_fmod+0x11a>
 8014698:	153a      	asrs	r2, r7, #20
 801469a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801469e:	e7b0      	b.n	8014602 <__ieee754_fmod+0x8e>
 80146a0:	eba3 0c00 	sub.w	ip, r3, r0
 80146a4:	f1bc 0f1f 	cmp.w	ip, #31
 80146a8:	dc09      	bgt.n	80146be <__ieee754_fmod+0x14a>
 80146aa:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 80146ae:	fa08 f10c 	lsl.w	r1, r8, ip
 80146b2:	fa29 f303 	lsr.w	r3, r9, r3
 80146b6:	430b      	orrs	r3, r1
 80146b8:	fa09 f10c 	lsl.w	r1, r9, ip
 80146bc:	e7a8      	b.n	8014610 <__ieee754_fmod+0x9c>
 80146be:	4b32      	ldr	r3, [pc, #200]	@ (8014788 <__ieee754_fmod+0x214>)
 80146c0:	1a1b      	subs	r3, r3, r0
 80146c2:	fa09 f303 	lsl.w	r3, r9, r3
 80146c6:	2100      	movs	r1, #0
 80146c8:	e7a2      	b.n	8014610 <__ieee754_fmod+0x9c>
 80146ca:	ebac 0c02 	sub.w	ip, ip, r2
 80146ce:	f1bc 0f1f 	cmp.w	ip, #31
 80146d2:	dc09      	bgt.n	80146e8 <__ieee754_fmod+0x174>
 80146d4:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 80146d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80146dc:	fa26 f505 	lsr.w	r5, r6, r5
 80146e0:	433d      	orrs	r5, r7
 80146e2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80146e6:	e79b      	b.n	8014620 <__ieee754_fmod+0xac>
 80146e8:	4d27      	ldr	r5, [pc, #156]	@ (8014788 <__ieee754_fmod+0x214>)
 80146ea:	1aad      	subs	r5, r5, r2
 80146ec:	fa06 f505 	lsl.w	r5, r6, r5
 80146f0:	f04f 0e00 	mov.w	lr, #0
 80146f4:	e794      	b.n	8014620 <__ieee754_fmod+0xac>
 80146f6:	4571      	cmp	r1, lr
 80146f8:	bf38      	it	cc
 80146fa:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80146fe:	2e00      	cmp	r6, #0
 8014700:	da05      	bge.n	801470e <__ieee754_fmod+0x19a>
 8014702:	0fce      	lsrs	r6, r1, #31
 8014704:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014708:	0049      	lsls	r1, r1, #1
 801470a:	3801      	subs	r0, #1
 801470c:	e789      	b.n	8014622 <__ieee754_fmod+0xae>
 801470e:	ea56 0307 	orrs.w	r3, r6, r7
 8014712:	f43f af5d 	beq.w	80145d0 <__ieee754_fmod+0x5c>
 8014716:	0ffb      	lsrs	r3, r7, #31
 8014718:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801471c:	0079      	lsls	r1, r7, #1
 801471e:	e7f4      	b.n	801470a <__ieee754_fmod+0x196>
 8014720:	0fc8      	lsrs	r0, r1, #31
 8014722:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014726:	0049      	lsls	r1, r1, #1
 8014728:	3a01      	subs	r2, #1
 801472a:	e78a      	b.n	8014642 <__ieee754_fmod+0xce>
 801472c:	1a80      	subs	r0, r0, r2
 801472e:	2814      	cmp	r0, #20
 8014730:	dc0c      	bgt.n	801474c <__ieee754_fmod+0x1d8>
 8014732:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014736:	fa03 f202 	lsl.w	r2, r3, r2
 801473a:	40c1      	lsrs	r1, r0
 801473c:	430a      	orrs	r2, r1
 801473e:	4103      	asrs	r3, r0
 8014740:	ea43 0104 	orr.w	r1, r3, r4
 8014744:	4610      	mov	r0, r2
 8014746:	ec41 0b10 	vmov	d0, r0, r1
 801474a:	e733      	b.n	80145b4 <__ieee754_fmod+0x40>
 801474c:	281f      	cmp	r0, #31
 801474e:	dc07      	bgt.n	8014760 <__ieee754_fmod+0x1ec>
 8014750:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014754:	40c1      	lsrs	r1, r0
 8014756:	fa03 f202 	lsl.w	r2, r3, r2
 801475a:	430a      	orrs	r2, r1
 801475c:	4623      	mov	r3, r4
 801475e:	e7ef      	b.n	8014740 <__ieee754_fmod+0x1cc>
 8014760:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8014764:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8014768:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 801476c:	32e2      	adds	r2, #226	@ 0xe2
 801476e:	fa43 f202 	asr.w	r2, r3, r2
 8014772:	e7f3      	b.n	801475c <__ieee754_fmod+0x1e8>
 8014774:	7fefffff 	.word	0x7fefffff
 8014778:	7ff00000 	.word	0x7ff00000
 801477c:	08016e98 	.word	0x08016e98
 8014780:	fffffbed 	.word	0xfffffbed
 8014784:	fffffc02 	.word	0xfffffc02
 8014788:	fffffbe2 	.word	0xfffffbe2

0801478c <__ieee754_acosf>:
 801478c:	b508      	push	{r3, lr}
 801478e:	ee10 3a10 	vmov	r3, s0
 8014792:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014796:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801479a:	ed2d 8b0c 	vpush	{d8-d13}
 801479e:	d109      	bne.n	80147b4 <__ieee754_acosf+0x28>
 80147a0:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8014938 <__ieee754_acosf+0x1ac>
 80147a4:	eddf 7a65 	vldr	s15, [pc, #404]	@ 801493c <__ieee754_acosf+0x1b0>
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	fe37 0a80 	vselgt.f32	s0, s15, s0
 80147ae:	ecbd 8b0c 	vpop	{d8-d13}
 80147b2:	bd08      	pop	{r3, pc}
 80147b4:	d904      	bls.n	80147c0 <__ieee754_acosf+0x34>
 80147b6:	ee30 8a40 	vsub.f32	s16, s0, s0
 80147ba:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80147be:	e7f6      	b.n	80147ae <__ieee754_acosf+0x22>
 80147c0:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80147c4:	d23c      	bcs.n	8014840 <__ieee754_acosf+0xb4>
 80147c6:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80147ca:	f240 80b1 	bls.w	8014930 <__ieee754_acosf+0x1a4>
 80147ce:	ee60 7a00 	vmul.f32	s15, s0, s0
 80147d2:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8014940 <__ieee754_acosf+0x1b4>
 80147d6:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8014944 <__ieee754_acosf+0x1b8>
 80147da:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 8014948 <__ieee754_acosf+0x1bc>
 80147de:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80147e2:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801494c <__ieee754_acosf+0x1c0>
 80147e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147ea:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8014950 <__ieee754_acosf+0x1c4>
 80147ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80147f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8014954 <__ieee754_acosf+0x1c8>
 80147f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147fa:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8014958 <__ieee754_acosf+0x1cc>
 80147fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014802:	eddf 6a56 	vldr	s13, [pc, #344]	@ 801495c <__ieee754_acosf+0x1d0>
 8014806:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801480a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8014960 <__ieee754_acosf+0x1d4>
 801480e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014812:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8014964 <__ieee754_acosf+0x1d8>
 8014816:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801481a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801481e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014826:	eddf 7a50 	vldr	s15, [pc, #320]	@ 8014968 <__ieee754_acosf+0x1dc>
 801482a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801482e:	eee0 7a46 	vfms.f32	s15, s0, s12
 8014832:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014836:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 801496c <__ieee754_acosf+0x1e0>
 801483a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801483e:	e7b6      	b.n	80147ae <__ieee754_acosf+0x22>
 8014840:	2b00      	cmp	r3, #0
 8014842:	eddf da3f 	vldr	s27, [pc, #252]	@ 8014940 <__ieee754_acosf+0x1b4>
 8014846:	eddf ca3f 	vldr	s25, [pc, #252]	@ 8014944 <__ieee754_acosf+0x1b8>
 801484a:	ed9f ca40 	vldr	s24, [pc, #256]	@ 801494c <__ieee754_acosf+0x1c0>
 801484e:	eddf ba40 	vldr	s23, [pc, #256]	@ 8014950 <__ieee754_acosf+0x1c4>
 8014852:	ed9f ba40 	vldr	s22, [pc, #256]	@ 8014954 <__ieee754_acosf+0x1c8>
 8014856:	eddf 8a40 	vldr	s17, [pc, #256]	@ 8014958 <__ieee754_acosf+0x1cc>
 801485a:	ed9f da40 	vldr	s26, [pc, #256]	@ 801495c <__ieee754_acosf+0x1d0>
 801485e:	eddf aa3a 	vldr	s21, [pc, #232]	@ 8014948 <__ieee754_acosf+0x1bc>
 8014862:	ed9f aa3f 	vldr	s20, [pc, #252]	@ 8014960 <__ieee754_acosf+0x1d4>
 8014866:	eddf 9a3f 	vldr	s19, [pc, #252]	@ 8014964 <__ieee754_acosf+0x1d8>
 801486a:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801486e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014872:	da28      	bge.n	80148c6 <__ieee754_acosf+0x13a>
 8014874:	ee30 8a09 	vadd.f32	s16, s0, s18
 8014878:	ee28 0a27 	vmul.f32	s0, s16, s15
 801487c:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8014880:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8014884:	eeac ca80 	vfma.f32	s24, s25, s0
 8014888:	eeaa aa80 	vfma.f32	s20, s21, s0
 801488c:	eeec ba00 	vfma.f32	s23, s24, s0
 8014890:	eeea 9a00 	vfma.f32	s19, s20, s0
 8014894:	eeab ba80 	vfma.f32	s22, s23, s0
 8014898:	eea9 9a80 	vfma.f32	s18, s19, s0
 801489c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80148a0:	ee68 8a80 	vmul.f32	s17, s17, s0
 80148a4:	f000 f86a 	bl	801497c <__ieee754_sqrtf>
 80148a8:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80148ac:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8014970 <__ieee754_acosf+0x1e4>
 80148b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80148b4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80148b8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80148bc:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8014974 <__ieee754_acosf+0x1e8>
 80148c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80148c4:	e773      	b.n	80147ae <__ieee754_acosf+0x22>
 80148c6:	ee39 8a40 	vsub.f32	s16, s18, s0
 80148ca:	ee28 8a27 	vmul.f32	s16, s16, s15
 80148ce:	eeb0 0a48 	vmov.f32	s0, s16
 80148d2:	f000 f853 	bl	801497c <__ieee754_sqrtf>
 80148d6:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80148da:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80148de:	eeac ca88 	vfma.f32	s24, s25, s16
 80148e2:	eeaa aa88 	vfma.f32	s20, s21, s16
 80148e6:	eeec ba08 	vfma.f32	s23, s24, s16
 80148ea:	ee10 3a10 	vmov	r3, s0
 80148ee:	eeab ba88 	vfma.f32	s22, s23, s16
 80148f2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80148f6:	f023 030f 	bic.w	r3, r3, #15
 80148fa:	eeea 9a08 	vfma.f32	s19, s20, s16
 80148fe:	ee07 3a90 	vmov	s15, r3
 8014902:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8014906:	eeb0 6a48 	vmov.f32	s12, s16
 801490a:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801490e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8014912:	ee70 6a27 	vadd.f32	s13, s0, s15
 8014916:	ee68 8a88 	vmul.f32	s17, s17, s16
 801491a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801491e:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8014922:	eea0 7a26 	vfma.f32	s14, s0, s13
 8014926:	ee37 0a87 	vadd.f32	s0, s15, s14
 801492a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801492e:	e73e      	b.n	80147ae <__ieee754_acosf+0x22>
 8014930:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8014978 <__ieee754_acosf+0x1ec>
 8014934:	e73b      	b.n	80147ae <__ieee754_acosf+0x22>
 8014936:	bf00      	nop
 8014938:	40490fdb 	.word	0x40490fdb
 801493c:	00000000 	.word	0x00000000
 8014940:	3811ef08 	.word	0x3811ef08
 8014944:	3a4f7f04 	.word	0x3a4f7f04
 8014948:	bf303361 	.word	0xbf303361
 801494c:	bd241146 	.word	0xbd241146
 8014950:	3e4e0aa8 	.word	0x3e4e0aa8
 8014954:	bea6b090 	.word	0xbea6b090
 8014958:	3e2aaaab 	.word	0x3e2aaaab
 801495c:	3d9dc62e 	.word	0x3d9dc62e
 8014960:	4001572d 	.word	0x4001572d
 8014964:	c019d139 	.word	0xc019d139
 8014968:	33a22168 	.word	0x33a22168
 801496c:	3fc90fda 	.word	0x3fc90fda
 8014970:	b3a22168 	.word	0xb3a22168
 8014974:	40490fda 	.word	0x40490fda
 8014978:	3fc90fdb 	.word	0x3fc90fdb

0801497c <__ieee754_sqrtf>:
 801497c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014980:	4770      	bx	lr
	...

08014984 <_init>:
 8014984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014986:	bf00      	nop
 8014988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801498a:	bc08      	pop	{r3}
 801498c:	469e      	mov	lr, r3
 801498e:	4770      	bx	lr

08014990 <_fini>:
 8014990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014992:	bf00      	nop
 8014994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014996:	bc08      	pop	{r3}
 8014998:	469e      	mov	lr, r3
 801499a:	4770      	bx	lr
