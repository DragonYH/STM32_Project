
EX_Three_Phase_Inverter_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f05c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002488  0800f300  0800f300  00010300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011788  08011788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011790  08011790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011794  08011794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000200  24000000  08011798  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005204  24000200  08011998  00013200  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24005404  08011998  00013404  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013200  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e2dc  00000000  00000000  0001322e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000621e  00000000  00000000  0004150a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f78  00000000  00000000  00047728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017c6  00000000  00000000  000496a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dbde  00000000  00000000  0004ae66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b47e  00000000  00000000  00088a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172a30  00000000  00000000  000b3ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  002268f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009244  00000000  00000000  002269ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  0022fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000001f4  00000000  00000000  0022fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  0022fe5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000200 	.word	0x24000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f2e4 	.word	0x0800f2e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000204 	.word	0x24000204
 80002dc:	0800f2e4 	.word	0x0800f2e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f00c fc62 	bl	800ce82 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fbff 	bl	8001dc8 <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 fccd 	bl	8000f6e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 fcee 	bl	8001fd0 <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 fcb8 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2400021c 	.word	0x2400021c
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f001 fdf1 	bl	8002268 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fafc 	bl	8001c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fb13 	bl	8001cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 80006b0:	f00a fe30 	bl	800b314 <OLED_Init>
  ad7606_Init();
 80006b4:	f00a f9e8 	bl	800aa88 <ad7606_Init>
  INA228_config(INA228_0);
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_FREERTOS_Init+0x94>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f00a faf8 	bl	800acb2 <INA228_config>
  pll_Init_V(&signal_V, 50, 20000, 10.f);
 80006c2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80006c6:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006ca:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000744 <MX_FREERTOS_Init+0x98>
 80006ce:	481e      	ldr	r0, [pc, #120]	@ (8000748 <MX_FREERTOS_Init+0x9c>)
 80006d0:	f00b f93e 	bl	800b950 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006d4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006d8:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8000744 <MX_FREERTOS_Init+0x98>
 80006dc:	481b      	ldr	r0, [pc, #108]	@ (800074c <MX_FREERTOS_Init+0xa0>)
 80006de:	f00b f9cf 	bl	800ba80 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	481a      	ldr	r0, [pc, #104]	@ (8000750 <MX_FREERTOS_Init+0xa4>)
 80006e6:	f007 f9c3 	bl	8007a70 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	4818      	ldr	r0, [pc, #96]	@ (8000750 <MX_FREERTOS_Init+0xa4>)
 80006ee:	f007 f9bf 	bl	8007a70 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006f2:	2108      	movs	r1, #8
 80006f4:	4816      	ldr	r0, [pc, #88]	@ (8000750 <MX_FREERTOS_Init+0xa4>)
 80006f6:	f007 f9bb 	bl	8007a70 <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4815      	ldr	r0, [pc, #84]	@ (8000754 <MX_FREERTOS_Init+0xa8>)
 80006fe:	f001 fb85 	bl	8001e0c <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	4814      	ldr	r0, [pc, #80]	@ (8000758 <MX_FREERTOS_Init+0xac>)
 8000706:	f00a f9f9 	bl	800aafc <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 800070a:	4a14      	ldr	r2, [pc, #80]	@ (800075c <MX_FREERTOS_Init+0xb0>)
 800070c:	2100      	movs	r1, #0
 800070e:	4814      	ldr	r0, [pc, #80]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 8000710:	f007 fc4e 	bl	8007fb0 <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <MX_FREERTOS_Init+0xb8>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 800071a:	4a13      	ldr	r2, [pc, #76]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 800071c:	2100      	movs	r1, #0
 800071e:	4813      	ldr	r0, [pc, #76]	@ (800076c <MX_FREERTOS_Init+0xc0>)
 8000720:	f007 fc46 	bl	8007fb0 <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 800072a:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 800072c:	2100      	movs	r1, #0
 800072e:	4812      	ldr	r0, [pc, #72]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 8000730:	f007 fc3e 	bl	8007fb0 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a11      	ldr	r2, [pc, #68]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 8000738:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	08010bfc 	.word	0x08010bfc
 8000744:	42480000 	.word	0x42480000
 8000748:	240052b0 	.word	0x240052b0
 800074c:	240052b4 	.word	0x240052b4
 8000750:	24000410 	.word	0x24000410
 8000754:	2400021c 	.word	0x2400021c
 8000758:	2400045c 	.word	0x2400045c
 800075c:	0800f380 	.word	0x0800f380
 8000760:	08000781 	.word	0x08000781
 8000764:	24000250 	.word	0x24000250
 8000768:	0800f3a4 	.word	0x0800f3a4
 800076c:	080007dd 	.word	0x080007dd
 8000770:	24000254 	.word	0x24000254
 8000774:	0800f3c8 	.word	0x0800f3c8
 8000778:	080008e5 	.word	0x080008e5
 800077c:	24000258 	.word	0x24000258

08000780 <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2102      	movs	r1, #2
 800078c:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <StartStateLED+0x58>)
 800078e:	f001 ff1b 	bl	80025c8 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000796:	f007 fc9d 	bl	80080d4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800079a:	2101      	movs	r1, #1
 800079c:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <StartStateLED+0x58>)
 800079e:	f001 ff2c 	bl	80025fa <HAL_GPIO_TogglePin>
    osDelay(100);
 80007a2:	2064      	movs	r0, #100	@ 0x64
 80007a4:	f007 fc96 	bl	80080d4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007a8:	2101      	movs	r1, #1
 80007aa:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <StartStateLED+0x58>)
 80007ac:	f001 ff25 	bl	80025fa <HAL_GPIO_TogglePin>
    osDelay(200);
 80007b0:	20c8      	movs	r0, #200	@ 0xc8
 80007b2:	f007 fc8f 	bl	80080d4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007b6:	2101      	movs	r1, #1
 80007b8:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <StartStateLED+0x58>)
 80007ba:	f001 ff1e 	bl	80025fa <HAL_GPIO_TogglePin>
    osDelay(100);
 80007be:	2064      	movs	r0, #100	@ 0x64
 80007c0:	f007 fc88 	bl	80080d4 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007c4:	2101      	movs	r1, #1
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <StartStateLED+0x58>)
 80007c8:	f001 ff17 	bl	80025fa <HAL_GPIO_TogglePin>
    osDelay(200);
 80007cc:	20c8      	movs	r0, #200	@ 0xc8
 80007ce:	f007 fc81 	bl	80080d4 <osDelay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007d2:	bf00      	nop
 80007d4:	e7d8      	b.n	8000788 <StartStateLED+0x8>
 80007d6:	bf00      	nop
 80007d8:	58022000 	.word	0x58022000

080007dc <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for (;;)
  {
    // sprintf((char *)text, "0: %6.3f", adcValue[0]);
    // OLED_ShowString(0, 0, text, 12);
    sprintf((char *)text, "1: %6.3f", signal_V->basic->input_a);
 80007e4:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <StartOledShow+0xe0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007f2:	ec53 2b17 	vmov	r2, r3, d7
 80007f6:	4932      	ldr	r1, [pc, #200]	@ (80008c0 <StartOledShow+0xe4>)
 80007f8:	4832      	ldr	r0, [pc, #200]	@ (80008c4 <StartOledShow+0xe8>)
 80007fa:	f00c fadf 	bl	800cdbc <siprintf>
    OLED_ShowString(64, 0, text, 12);
 80007fe:	230c      	movs	r3, #12
 8000800:	4a30      	ldr	r2, [pc, #192]	@ (80008c4 <StartOledShow+0xe8>)
 8000802:	2100      	movs	r1, #0
 8000804:	2040      	movs	r0, #64	@ 0x40
 8000806:	f00a fd51 	bl	800b2ac <OLED_ShowString>
    sprintf((char *)text, "2: %6.3f", signal_V->basic->input_b);
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <StartOledShow+0xe0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	edd3 7a01 	vldr	s15, [r3, #4]
 8000814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000818:	ec53 2b17 	vmov	r2, r3, d7
 800081c:	492a      	ldr	r1, [pc, #168]	@ (80008c8 <StartOledShow+0xec>)
 800081e:	4829      	ldr	r0, [pc, #164]	@ (80008c4 <StartOledShow+0xe8>)
 8000820:	f00c facc 	bl	800cdbc <siprintf>
    OLED_ShowString(0, 12, text, 12);
 8000824:	230c      	movs	r3, #12
 8000826:	4a27      	ldr	r2, [pc, #156]	@ (80008c4 <StartOledShow+0xe8>)
 8000828:	210c      	movs	r1, #12
 800082a:	2000      	movs	r0, #0
 800082c:	f00a fd3e 	bl	800b2ac <OLED_ShowString>
    sprintf((char *)text, "3: %6.3f", adcValue[3]);
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <StartOledShow+0xf0>)
 8000832:	edd3 7a03 	vldr	s15, [r3, #12]
 8000836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800083a:	ec53 2b17 	vmov	r2, r3, d7
 800083e:	4924      	ldr	r1, [pc, #144]	@ (80008d0 <StartOledShow+0xf4>)
 8000840:	4820      	ldr	r0, [pc, #128]	@ (80008c4 <StartOledShow+0xe8>)
 8000842:	f00c fabb 	bl	800cdbc <siprintf>
    OLED_ShowString(64, 12, text, 12);
 8000846:	230c      	movs	r3, #12
 8000848:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <StartOledShow+0xe8>)
 800084a:	210c      	movs	r1, #12
 800084c:	2040      	movs	r0, #64	@ 0x40
 800084e:	f00a fd2d 	bl	800b2ac <OLED_ShowString>
    sprintf((char *)text, "4: %6.3f", adcValue[4]);
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <StartOledShow+0xf0>)
 8000854:	edd3 7a04 	vldr	s15, [r3, #16]
 8000858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085c:	ec53 2b17 	vmov	r2, r3, d7
 8000860:	491c      	ldr	r1, [pc, #112]	@ (80008d4 <StartOledShow+0xf8>)
 8000862:	4818      	ldr	r0, [pc, #96]	@ (80008c4 <StartOledShow+0xe8>)
 8000864:	f00c faaa 	bl	800cdbc <siprintf>
    OLED_ShowString(0, 24, text, 12);
 8000868:	230c      	movs	r3, #12
 800086a:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <StartOledShow+0xe8>)
 800086c:	2118      	movs	r1, #24
 800086e:	2000      	movs	r0, #0
 8000870:	f00a fd1c 	bl	800b2ac <OLED_ShowString>
    sprintf((char *)text, "5: %ld", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1));
 8000874:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <StartOledShow+0xfc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087a:	461a      	mov	r2, r3
 800087c:	4917      	ldr	r1, [pc, #92]	@ (80008dc <StartOledShow+0x100>)
 800087e:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <StartOledShow+0xe8>)
 8000880:	f00c fa9c 	bl	800cdbc <siprintf>
    OLED_ShowString(64, 24, text, 12);
 8000884:	230c      	movs	r3, #12
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <StartOledShow+0xe8>)
 8000888:	2118      	movs	r1, #24
 800088a:	2040      	movs	r0, #64	@ 0x40
 800088c:	f00a fd0e 	bl	800b2ac <OLED_ShowString>
    // sprintf((char *)text, "6: %6.3f", U);
    // OLED_ShowString(0, 36, text, 12);
    // sprintf((char *)text, "7: %6.3f", I);
    // OLED_ShowString(64, 36, text, 12);
    // 获取当前堆栈剩余空间
    sprintf((char *)text, "stack free: %ld", uxTaskGetStackHighWaterMark(NULL));
 8000890:	2000      	movs	r0, #0
 8000892:	f009 f813 	bl	80098bc <uxTaskGetStackHighWaterMark>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4911      	ldr	r1, [pc, #68]	@ (80008e0 <StartOledShow+0x104>)
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <StartOledShow+0xe8>)
 800089e:	f00c fa8d 	bl	800cdbc <siprintf>
    OLED_ShowString(0, 48, text, 12);
 80008a2:	230c      	movs	r3, #12
 80008a4:	4a07      	ldr	r2, [pc, #28]	@ (80008c4 <StartOledShow+0xe8>)
 80008a6:	2130      	movs	r1, #48	@ 0x30
 80008a8:	2000      	movs	r0, #0
 80008aa:	f00a fcff 	bl	800b2ac <OLED_ShowString>
    OLED_Refresh();
 80008ae:	f00a fb8d 	bl	800afcc <OLED_Refresh>
    osDelay(100);
 80008b2:	2064      	movs	r0, #100	@ 0x64
 80008b4:	f007 fc0e 	bl	80080d4 <osDelay>
    sprintf((char *)text, "1: %6.3f", signal_V->basic->input_a);
 80008b8:	bf00      	nop
 80008ba:	e793      	b.n	80007e4 <StartOledShow+0x8>
 80008bc:	240052b0 	.word	0x240052b0
 80008c0:	0800f320 	.word	0x0800f320
 80008c4:	24000230 	.word	0x24000230
 80008c8:	0800f32c 	.word	0x0800f32c
 80008cc:	24005288 	.word	0x24005288
 80008d0:	0800f338 	.word	0x0800f338
 80008d4:	0800f344 	.word	0x0800f344
 80008d8:	24000410 	.word	0x24000410
 80008dc:	0800f350 	.word	0x0800f350
 80008e0:	0800f358 	.word	0x0800f358

080008e4 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <StartDcSamp+0x3c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00a fa8d 	bl	800ae10 <INA228_getVBUS_V>
 80008f6:	eef0 7a40 	vmov.f32	s15, s0
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <StartDcSamp+0x40>)
 80008fc:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <StartDcSamp+0x3c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f00a fb0f 	bl	800af28 <INA228_getCURRENT_A>
 800090a:	eef0 7a40 	vmov.f32	s15, s0
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <StartDcSamp+0x44>)
 8000910:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 8000914:	200a      	movs	r0, #10
 8000916:	f007 fbdd 	bl	80080d4 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 800091a:	bf00      	nop
 800091c:	e7e6      	b.n	80008ec <StartDcSamp+0x8>
 800091e:	bf00      	nop
 8000920:	08010bfc 	.word	0x08010bfc
 8000924:	240052a8 	.word	0x240052a8
 8000928:	240052ac 	.word	0x240052ac

0800092c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b69      	ldr	r3, [pc, #420]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a67      	ldr	r2, [pc, #412]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b65      	ldr	r3, [pc, #404]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000960:	4b61      	ldr	r3, [pc, #388]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a60      	ldr	r2, [pc, #384]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b5d      	ldr	r3, [pc, #372]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a58      	ldr	r2, [pc, #352]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b56      	ldr	r3, [pc, #344]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b52      	ldr	r3, [pc, #328]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a51      	ldr	r2, [pc, #324]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b4e      	ldr	r3, [pc, #312]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ba:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	4a49      	ldr	r2, [pc, #292]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ca:	4b47      	ldr	r3, [pc, #284]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009d8:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	4a42      	ldr	r2, [pc, #264]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <MX_GPIO_Init+0x1bc>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	483c      	ldr	r0, [pc, #240]	@ (8000aec <MX_GPIO_Init+0x1c0>)
 80009fc:	f001 fde4 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	483a      	ldr	r0, [pc, #232]	@ (8000af0 <MX_GPIO_Init+0x1c4>)
 8000a06:	f001 fddf 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2188      	movs	r1, #136	@ 0x88
 8000a0e:	4839      	ldr	r0, [pc, #228]	@ (8000af4 <MX_GPIO_Init+0x1c8>)
 8000a10:	f001 fdda 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2101      	movs	r1, #1
 8000a18:	4837      	ldr	r0, [pc, #220]	@ (8000af8 <MX_GPIO_Init+0x1cc>)
 8000a1a:	f001 fdd5 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	@ 0x40
 8000a22:	4835      	ldr	r0, [pc, #212]	@ (8000af8 <MX_GPIO_Init+0x1cc>)
 8000a24:	f001 fdd0 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000a28:	2320      	movs	r3, #32
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	482b      	ldr	r0, [pc, #172]	@ (8000aec <MX_GPIO_Init+0x1c0>)
 8000a40:	f001 fc12 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4825      	ldr	r0, [pc, #148]	@ (8000af0 <MX_GPIO_Init+0x1c4>)
 8000a5c:	f001 fc04 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000a60:	2388      	movs	r3, #136	@ 0x88
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	481f      	ldr	r0, [pc, #124]	@ (8000af4 <MX_GPIO_Init+0x1c8>)
 8000a78:	f001 fbf6 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000a7c:	2340      	movs	r3, #64	@ 0x40
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4818      	ldr	r0, [pc, #96]	@ (8000af4 <MX_GPIO_Init+0x1c8>)
 8000a92:	f001 fbe9 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4812      	ldr	r0, [pc, #72]	@ (8000af8 <MX_GPIO_Init+0x1cc>)
 8000aae:	f001 fbdb 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000ab2:	2340      	movs	r3, #64	@ 0x40
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <MX_GPIO_Init+0x1cc>)
 8000aca:	f001 fbcd 	bl	8002268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2105      	movs	r1, #5
 8000ad2:	2017      	movs	r0, #23
 8000ad4:	f001 f8d8 	bl	8001c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ad8:	2017      	movs	r0, #23
 8000ada:	f001 f8ef 	bl	8001cbc <HAL_NVIC_EnableIRQ>

}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	@ 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58020800 	.word	0x58020800
 8000af0:	58020400 	.word	0x58020400
 8000af4:	58021800 	.word	0x58021800
 8000af8:	58022000 	.word	0x58022000

08000afc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <MX_I2C1_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b08:	4a1b      	ldr	r2, [pc, #108]	@ (8000b78 <MX_I2C1_Init+0x7c>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b36:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b38:	f001 fd94 	bl	8002664 <HAL_I2C_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b42:	f000 fa14 	bl	8000f6e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b4a:	f002 fb17 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f000 fa0b 	bl	8000f6e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_I2C1_Init+0x74>)
 8000b5c:	f002 fb59 	bl	8003212 <HAL_I2CEx_ConfigDigitalFilter>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 fa02 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2400025c 	.word	0x2400025c
 8000b74:	40005400 	.word	0x40005400
 8000b78:	307075b1 	.word	0x307075b1

08000b7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0ba      	sub	sp, #232	@ 0xe8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	22c0      	movs	r2, #192	@ 0xc0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00c f970 	bl	800ce82 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a26      	ldr	r2, [pc, #152]	@ (8000c40 <HAL_I2C_MspInit+0xc4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d145      	bne.n	8000c38 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bac:	f04f 0208 	mov.w	r2, #8
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fbbe 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bce:	f000 f9ce 	bl	8000f6e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_I2C_MspInit+0xc8>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <HAL_I2C_MspInit+0xc8>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <HAL_I2C_MspInit+0xc8>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf0:	23c0      	movs	r3, #192	@ 0xc0
 8000bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <HAL_I2C_MspInit+0xcc>)
 8000c16:	f001 fb27 	bl	8002268 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_I2C_MspInit+0xc8>)
 8000c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c20:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <HAL_I2C_MspInit+0xc8>)
 8000c22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_I2C_MspInit+0xc8>)
 8000c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c38:	bf00      	nop
 8000c3a:	37e8      	adds	r7, #232	@ 0xe8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40005400 	.word	0x40005400
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58020400 	.word	0x58020400

08000c4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c52:	f000 f95f 	bl	8000f14 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c56:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <main+0x108>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d11b      	bne.n	8000c9a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c62:	f3bf 8f4f 	dsb	sy
}
 8000c66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c68:	f3bf 8f6f 	isb	sy
}
 8000c6c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c6e:	4b39      	ldr	r3, [pc, #228]	@ (8000d54 <main+0x108>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c76:	f3bf 8f4f 	dsb	sy
}
 8000c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c7c:	f3bf 8f6f 	isb	sy
}
 8000c80:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c82:	4b34      	ldr	r3, [pc, #208]	@ (8000d54 <main+0x108>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4a33      	ldr	r2, [pc, #204]	@ (8000d54 <main+0x108>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c8e:	f3bf 8f4f 	dsb	sy
}
 8000c92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c94:	f3bf 8f6f 	isb	sy
}
 8000c98:	e000      	b.n	8000c9c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c9a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <main+0x108>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d138      	bne.n	8000d1a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <main+0x108>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb0:	f3bf 8f4f 	dsb	sy
}
 8000cb4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cb6:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <main+0x108>)
 8000cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cbc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	0b5b      	lsrs	r3, r3, #13
 8000cc2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cc6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cd0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	015a      	lsls	r2, r3, #5
 8000cd6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000cda:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce0:	491c      	ldr	r1, [pc, #112]	@ (8000d54 <main+0x108>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	1e5a      	subs	r2, r3, #1
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1ef      	bne.n	8000cd2 <main+0x86>
    } while(sets-- != 0U);
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	60ba      	str	r2, [r7, #8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1e5      	bne.n	8000cc8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cfc:	f3bf 8f4f 	dsb	sy
}
 8000d00:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <main+0x108>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <main+0x108>)
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0e:	f3bf 8f4f 	dsb	sy
}
 8000d12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d14:	f3bf 8f6f 	isb	sy
}
 8000d18:	e000      	b.n	8000d1c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d1a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 fe70 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f81a 	bl	8000d58 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d24:	f000 f8c6 	bl	8000eb4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f7ff fe00 	bl	800092c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d2c:	f000 f926 	bl	8000f7c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d30:	f000 f97a 	bl	8001028 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000d34:	f000 fd28 	bl	8001788 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000d38:	f7ff fee0 	bl	8000afc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d3c:	f000 fc5c 	bl	80015f8 <MX_TIM1_Init>
  MX_DAC1_Init();
 8000d40:	f7ff fc34 	bl	80005ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d44:	f007 f8ea 	bl	8007f1c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d48:	f7ff fcb0 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d4c:	f007 f90a 	bl	8007f64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <main+0x104>
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b09e      	sub	sp, #120	@ 0x78
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d62:	224c      	movs	r2, #76	@ 0x4c
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00c f88b 	bl	800ce82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2220      	movs	r2, #32
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00c f884 	bl	800ce82 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f002 fa96 	bl	80032ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b48      	ldr	r3, [pc, #288]	@ (8000ea8 <SystemClock_Config+0x150>)
 8000d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d88:	4a47      	ldr	r2, [pc, #284]	@ (8000ea8 <SystemClock_Config+0x150>)
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d90:	4b45      	ldr	r3, [pc, #276]	@ (8000ea8 <SystemClock_Config+0x150>)
 8000d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b44      	ldr	r3, [pc, #272]	@ (8000eac <SystemClock_Config+0x154>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a43      	ldr	r2, [pc, #268]	@ (8000eac <SystemClock_Config+0x154>)
 8000da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <SystemClock_Config+0x154>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000db2:	bf00      	nop
 8000db4:	4b3d      	ldr	r3, [pc, #244]	@ (8000eac <SystemClock_Config+0x154>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dc0:	d1f8      	bne.n	8000db4 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb0 <SystemClock_Config+0x158>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc8:	4a39      	ldr	r2, [pc, #228]	@ (8000eb0 <SystemClock_Config+0x158>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dd2:	4b37      	ldr	r3, [pc, #220]	@ (8000eb0 <SystemClock_Config+0x158>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <SystemClock_Config+0x154>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a30      	ldr	r2, [pc, #192]	@ (8000eac <SystemClock_Config+0x154>)
 8000dea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <SystemClock_Config+0x154>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <SystemClock_Config+0x150>)
 8000dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8000ea8 <SystemClock_Config+0x150>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e06:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <SystemClock_Config+0x150>)
 8000e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000e12:	bf00      	nop
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <SystemClock_Config+0x154>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e20:	d1f8      	bne.n	8000e14 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e30:	2302      	movs	r3, #2
 8000e32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e34:	2305      	movs	r3, #5
 8000e36:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e38:	23c0      	movs	r3, #192	@ 0xc0
 8000e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e40:	2314      	movs	r3, #20
 8000e42:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fa61 	bl	8003320 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e64:	f000 f883 	bl	8000f6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000e68:	233f      	movs	r3, #63	@ 0x3f
 8000e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e74:	2308      	movs	r3, #8
 8000e76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e78:	2340      	movs	r3, #64	@ 0x40
 8000e7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e7c:	2340      	movs	r3, #64	@ 0x40
 8000e7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e86:	2340      	movs	r3, #64	@ 0x40
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 fe9f 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000e9c:	f000 f867 	bl	8000f6e <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3778      	adds	r7, #120	@ 0x78
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	58000400 	.word	0x58000400
 8000eac:	58024800 	.word	0x58024800
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b0      	sub	sp, #192	@ 0xc0
 8000eb8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	22c0      	movs	r2, #192	@ 0xc0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f00b ffde 	bl	800ce82 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
 8000ec6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000ed2:	2319      	movs	r3, #25
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 8000ed6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000ef4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 fa21 	bl	8004344 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000f08:	f000 f831 	bl	8000f6e <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	37c0      	adds	r7, #192	@ 0xc0
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f26:	f000 fed7 	bl	8001cd8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f32:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000f36:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f44:	2303      	movs	r3, #3
 8000f46:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fef4 	bl	8001d48 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f60:	2004      	movs	r0, #4
 8000f62:	f000 fed1 	bl	8001d08 <HAL_MPU_Enable>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f72:	b672      	cpsid	i
}
 8000f74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f76:	bf00      	nop
 8000f78:	e7fd      	b.n	8000f76 <Error_Handler+0x8>
	...

08000f7c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f80:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000f82:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <MX_SPI1_Init+0xa8>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000f88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000f8e:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000f90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f94:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000faa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_SPI1_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <MX_SPI1_Init+0xa4>)
 800100e:	f004 fd07 	bl	8005a20 <HAL_SPI_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001018:	f7ff ffa9 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	240002b0 	.word	0x240002b0
 8001024:	40013000 	.word	0x40013000

08001028 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 800102e:	4a29      	ldr	r2, [pc, #164]	@ (80010d4 <MX_SPI2_Init+0xac>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b27      	ldr	r3, [pc, #156]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001034:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001038:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 800103c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001040:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001042:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001044:	220f      	movs	r2, #15
 8001046:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001048:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 800104a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800104e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001058:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800105c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001060:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001064:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001080:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001084:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 8001094:	2200      	movs	r2, #0
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_SPI2_Init+0xa8>)
 80010be:	f004 fcaf 	bl	8005a20 <HAL_SPI_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80010c8:	f7ff ff51 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000338 	.word	0x24000338
 80010d4:	40003800 	.word	0x40003800

080010d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	@ 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a34      	ldr	r2, [pc, #208]	@ (80011c8 <HAL_SPI_MspInit+0xf0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12e      	bne.n	8001158 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fa:	4b34      	ldr	r3, [pc, #208]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 80010fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001100:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 8001102:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001106:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 800110c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111e:	4a2b      	ldr	r2, [pc, #172]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001128:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8001136:	23a0      	movs	r3, #160	@ 0xa0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001146:	2305      	movs	r3, #5
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	481f      	ldr	r0, [pc, #124]	@ (80011d0 <HAL_SPI_MspInit+0xf8>)
 8001152:	f001 f889 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001156:	e032      	b.n	80011be <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1d      	ldr	r2, [pc, #116]	@ (80011d4 <HAL_SPI_MspInit+0xfc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d12d      	bne.n	80011be <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 8001164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001168:	4a18      	ldr	r2, [pc, #96]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 8001174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_SPI_MspInit+0xf4>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800119e:	2306      	movs	r3, #6
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ae:	2305      	movs	r3, #5
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <HAL_SPI_MspInit+0x100>)
 80011ba:	f001 f855 	bl	8002268 <HAL_GPIO_Init>
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40013000 	.word	0x40013000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020000 	.word	0x58020000
 80011d4:	40003800 	.word	0x40003800
 80011d8:	58022000 	.word	0x58022000

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_MspInit+0x38>)
 80011e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_MspInit+0x38>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_MspInit+0x38>)
 80011f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	210f      	movs	r1, #15
 8001204:	f06f 0001 	mvn.w	r0, #1
 8001208:	f000 fd3e 	bl	8001c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	@ 0x40
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	d827      	bhi.n	8001276 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001226:	2200      	movs	r2, #0
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	2036      	movs	r0, #54	@ 0x36
 800122c:	f000 fd2c 	bl	8001c88 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001230:	2036      	movs	r0, #54	@ 0x36
 8001232:	f000 fd43 	bl	8001cbc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001236:	4a29      	ldr	r2, [pc, #164]	@ (80012dc <HAL_InitTick+0xc4>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800123c:	4b28      	ldr	r3, [pc, #160]	@ (80012e0 <HAL_InitTick+0xc8>)
 800123e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001242:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <HAL_InitTick+0xc8>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_InitTick+0xc8>)
 800124e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800125a:	f107 0210 	add.w	r2, r7, #16
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f003 f82b 	bl	80042c0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800126a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800126e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <HAL_InitTick+0x6a>
 8001274:	e001      	b.n	800127a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e02b      	b.n	80012d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800127a:	f003 f80b 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 800127e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001280:	e004      	b.n	800128c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001282:	f003 f807 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8001286:	4603      	mov	r3, r0
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800128c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800128e:	4a15      	ldr	r2, [pc, #84]	@ (80012e4 <HAL_InitTick+0xcc>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	3b01      	subs	r3, #1
 8001298:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <HAL_InitTick+0xd0>)
 800129c:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <HAL_InitTick+0xd4>)
 800129e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_InitTick+0xd0>)
 80012a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012a8:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <HAL_InitTick+0xd0>)
 80012aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <HAL_InitTick+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <HAL_InitTick+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ba:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <HAL_InitTick+0xd0>)
 80012bc:	f005 fa1d 	bl	80066fa <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d104      	bne.n	80012d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012c6:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <HAL_InitTick+0xd0>)
 80012c8:	f005 fa6e 	bl	80067a8 <HAL_TIM_Base_Start_IT>
 80012cc:	4603      	mov	r3, r0
 80012ce:	e000      	b.n	80012d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3740      	adds	r7, #64	@ 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24000008 	.word	0x24000008
 80012e0:	58024400 	.word	0x58024400
 80012e4:	431bde83 	.word	0x431bde83
 80012e8:	240003c0 	.word	0x240003c0
 80012ec:	40001000 	.word	0x40001000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800132a:	2040      	movs	r0, #64	@ 0x40
 800132c:	f001 f97f 	bl	800262e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <TIM6_DAC_IRQHandler+0x20>)
 800133a:	791b      	ldrb	r3, [r3, #4]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001342:	4804      	ldr	r0, [pc, #16]	@ (8001354 <TIM6_DAC_IRQHandler+0x20>)
 8001344:	f000 fdb9 	bl	8001eba <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <TIM6_DAC_IRQHandler+0x24>)
 800134a:	f005 fc15 	bl	8006b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2400021c 	.word	0x2400021c
 8001358:	240003c0 	.word	0x240003c0

0800135c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return 1;
 8001360:	2301      	movs	r3, #1
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_kill>:

int _kill(int pid, int sig)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001376:	f00b fde7 	bl	800cf48 <__errno>
 800137a:	4603      	mov	r3, r0
 800137c:	2216      	movs	r2, #22
 800137e:	601a      	str	r2, [r3, #0]
  return -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_exit>:

void _exit (int status)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffe7 	bl	800136c <_kill>
  while (1) {}    /* Make sure we hang here */
 800139e:	bf00      	nop
 80013a0:	e7fd      	b.n	800139e <_exit+0x12>

080013a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e00a      	b.n	80013ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b4:	f3af 8000 	nop.w
 80013b8:	4601      	mov	r1, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	60ba      	str	r2, [r7, #8]
 80013c0:	b2ca      	uxtb	r2, r1
 80013c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbf0      	blt.n	80013b4 <_read+0x12>
  }

  return len;
 80013d2:	687b      	ldr	r3, [r7, #4]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e009      	b.n	8001402 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	60ba      	str	r2, [r7, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf1      	blt.n	80013ee <_write+0x12>
  }
  return len;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_close>:

int _close(int file)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800143c:	605a      	str	r2, [r3, #4]
  return 0;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_isatty>:

int _isatty(int file)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	@ (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f00b fd4c 	bl	800cf48 <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	@ (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	24080000 	.word	0x24080000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	2400040c 	.word	0x2400040c
 80014e4:	24005408 	.word	0x24005408

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014ec:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <SystemInit+0xe4>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f2:	4a36      	ldr	r2, [pc, #216]	@ (80015cc <SystemInit+0xe4>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <SystemInit+0xe8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	2b06      	cmp	r3, #6
 8001506:	d807      	bhi.n	8001518 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001508:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <SystemInit+0xe8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 030f 	bic.w	r3, r3, #15
 8001510:	4a2f      	ldr	r2, [pc, #188]	@ (80015d0 <SystemInit+0xe8>)
 8001512:	f043 0307 	orr.w	r3, r3, #7
 8001516:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001518:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <SystemInit+0xec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <SystemInit+0xec>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <SystemInit+0xec>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <SystemInit+0xec>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4929      	ldr	r1, [pc, #164]	@ (80015d4 <SystemInit+0xec>)
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <SystemInit+0xf0>)
 8001532:	4013      	ands	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <SystemInit+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <SystemInit+0xe8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 030f 	bic.w	r3, r3, #15
 800154a:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <SystemInit+0xe8>)
 800154c:	f043 0307 	orr.w	r3, r3, #7
 8001550:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <SystemInit+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001558:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <SystemInit+0xec>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800155e:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <SystemInit+0xec>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <SystemInit+0xec>)
 8001566:	4a1d      	ldr	r2, [pc, #116]	@ (80015dc <SystemInit+0xf4>)
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <SystemInit+0xec>)
 800156c:	4a1c      	ldr	r2, [pc, #112]	@ (80015e0 <SystemInit+0xf8>)
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <SystemInit+0xec>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	@ (80015e4 <SystemInit+0xfc>)
 8001574:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <SystemInit+0xec>)
 8001578:	2200      	movs	r2, #0
 800157a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <SystemInit+0xec>)
 800157e:	4a19      	ldr	r2, [pc, #100]	@ (80015e4 <SystemInit+0xfc>)
 8001580:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <SystemInit+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <SystemInit+0xec>)
 800158a:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <SystemInit+0xfc>)
 800158c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <SystemInit+0xec>)
 8001590:	2200      	movs	r2, #0
 8001592:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <SystemInit+0xec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <SystemInit+0xec>)
 800159a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <SystemInit+0xec>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <SystemInit+0x100>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <SystemInit+0x104>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015b2:	d202      	bcs.n	80015ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <SystemInit+0x108>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <SystemInit+0x10c>)
 80015bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	52002000 	.word	0x52002000
 80015d4:	58024400 	.word	0x58024400
 80015d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015dc:	02020200 	.word	0x02020200
 80015e0:	01ff0000 	.word	0x01ff0000
 80015e4:	01010280 	.word	0x01010280
 80015e8:	5c001000 	.word	0x5c001000
 80015ec:	ffff0000 	.word	0xffff0000
 80015f0:	51008108 	.word	0x51008108
 80015f4:	52004000 	.word	0x52004000

080015f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b09a      	sub	sp, #104	@ 0x68
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	222c      	movs	r2, #44	@ 0x2c
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f00b fc25 	bl	800ce82 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001638:	4b51      	ldr	r3, [pc, #324]	@ (8001780 <MX_TIM1_Init+0x188>)
 800163a:	4a52      	ldr	r2, [pc, #328]	@ (8001784 <MX_TIM1_Init+0x18c>)
 800163c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800163e:	4b50      	ldr	r3, [pc, #320]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001644:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001646:	2220      	movs	r2, #32
 8001648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 800164a:	4b4d      	ldr	r3, [pc, #308]	@ (8001780 <MX_TIM1_Init+0x188>)
 800164c:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001650:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001658:	4b49      	ldr	r3, [pc, #292]	@ (8001780 <MX_TIM1_Init+0x188>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b48      	ldr	r3, [pc, #288]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001664:	4846      	ldr	r0, [pc, #280]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001666:	f005 f848 	bl	80066fa <HAL_TIM_Base_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001670:	f7ff fc7d 	bl	8000f6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001678:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800167a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800167e:	4619      	mov	r1, r3
 8001680:	483f      	ldr	r0, [pc, #252]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001682:	f005 fc95 	bl	8006fb0 <HAL_TIM_ConfigClockSource>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800168c:	f7ff fc6f 	bl	8000f6e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001690:	483b      	ldr	r0, [pc, #236]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001692:	f005 f901 	bl	8006898 <HAL_TIM_PWM_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800169c:	f7ff fc67 	bl	8000f6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016b0:	4619      	mov	r1, r3
 80016b2:	4833      	ldr	r0, [pc, #204]	@ (8001780 <MX_TIM1_Init+0x188>)
 80016b4:	f006 fa9e 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016be:	f7ff fc56 	bl	8000f6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c2:	2360      	movs	r3, #96	@ 0x60
 80016c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 80016c6:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 80016ca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016d4:	2304      	movs	r3, #4
 80016d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4825      	ldr	r0, [pc, #148]	@ (8001780 <MX_TIM1_Init+0x188>)
 80016ea:	f005 fb4d 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80016f4:	f7ff fc3b 	bl	8000f6e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016fc:	2204      	movs	r2, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	481f      	ldr	r0, [pc, #124]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001702:	f005 fb41 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800170c:	f7ff fc2f 	bl	8000f6e <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001714:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001718:	2208      	movs	r2, #8
 800171a:	4619      	mov	r1, r3
 800171c:	4818      	ldr	r0, [pc, #96]	@ (8001780 <MX_TIM1_Init+0x188>)
 800171e:	f005 fb33 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001728:	f7ff fc21 	bl	8000f6e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001740:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800174e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4807      	ldr	r0, [pc, #28]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001762:	f006 fad5 	bl	8007d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 800176c:	f7ff fbff 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <MX_TIM1_Init+0x188>)
 8001772:	f000 f8b9 	bl	80018e8 <HAL_TIM_MspPostInit>

}
 8001776:	bf00      	nop
 8001778:	3768      	adds	r7, #104	@ 0x68
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	24000410 	.word	0x24000410
 8001784:	40010000 	.word	0x40010000

08001788 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	@ 0x38
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001874 <MX_TIM2_Init+0xec>)
 80017bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <MX_TIM2_Init+0xec>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <MX_TIM2_Init+0xec>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 80017ce:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <MX_TIM2_Init+0xec>)
 80017d0:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80017d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <MX_TIM2_Init+0xec>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <MX_TIM2_Init+0xec>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e2:	4824      	ldr	r0, [pc, #144]	@ (8001874 <MX_TIM2_Init+0xec>)
 80017e4:	f004 ff89 	bl	80066fa <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017ee:	f7ff fbbe 	bl	8000f6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fc:	4619      	mov	r1, r3
 80017fe:	481d      	ldr	r0, [pc, #116]	@ (8001874 <MX_TIM2_Init+0xec>)
 8001800:	f005 fbd6 	bl	8006fb0 <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800180a:	f7ff fbb0 	bl	8000f6e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800180e:	4819      	ldr	r0, [pc, #100]	@ (8001874 <MX_TIM2_Init+0xec>)
 8001810:	f005 f842 	bl	8006898 <HAL_TIM_PWM_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800181a:	f7ff fba8 	bl	8000f6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4811      	ldr	r0, [pc, #68]	@ (8001874 <MX_TIM2_Init+0xec>)
 800182e:	f006 f9e1 	bl	8007bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001838:	f7ff fb99 	bl	8000f6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183c:	2360      	movs	r3, #96	@ 0x60
 800183e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001840:	f242 3327 	movw	r3, #8999	@ 0x2327
 8001844:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	4807      	ldr	r0, [pc, #28]	@ (8001874 <MX_TIM2_Init+0xec>)
 8001856:	f005 fa97 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001860:	f7ff fb85 	bl	8000f6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001864:	4803      	ldr	r0, [pc, #12]	@ (8001874 <MX_TIM2_Init+0xec>)
 8001866:	f000 f83f 	bl	80018e8 <HAL_TIM_MspPostInit>

}
 800186a:	bf00      	nop
 800186c:	3738      	adds	r7, #56	@ 0x38
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2400045c 	.word	0x2400045c

08001878 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a16      	ldr	r2, [pc, #88]	@ (80018e0 <HAL_TIM_Base_MspInit+0x68>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10f      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_TIM_Base_MspInit+0x6c>)
 800188c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <HAL_TIM_Base_MspInit+0x6c>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_TIM_Base_MspInit+0x6c>)
 800189c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018a8:	e013      	b.n	80018d2 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b2:	d10e      	bne.n	80018d2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_TIM_Base_MspInit+0x6c>)
 80018b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_TIM_Base_MspInit+0x6c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018c4:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <HAL_TIM_Base_MspInit+0x6c>)
 80018c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40010000 	.word	0x40010000
 80018e4:	58024400 	.word	0x58024400

080018e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a25      	ldr	r2, [pc, #148]	@ (800199c <HAL_TIM_MspPostInit+0xb4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d120      	bne.n	800194c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_TIM_MspPostInit+0xb8>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <HAL_TIM_MspPostInit+0xb8>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <HAL_TIM_MspPostInit+0xb8>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001928:	f24a 0301 	movw	r3, #40961	@ 0xa001
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4817      	ldr	r0, [pc, #92]	@ (80019a4 <HAL_TIM_MspPostInit+0xbc>)
 8001946:	f000 fc8f 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800194a:	e023      	b.n	8001994 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001954:	d11e      	bne.n	8001994 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_TIM_MspPostInit+0xb8>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195c:	4a10      	ldr	r2, [pc, #64]	@ (80019a0 <HAL_TIM_MspPostInit+0xb8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_TIM_MspPostInit+0xb8>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001974:	2301      	movs	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001984:	2301      	movs	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <HAL_TIM_MspPostInit+0xc0>)
 8001990:	f000 fc6a 	bl	8002268 <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	@ 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010000 	.word	0x40010000
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020400 	.word	0x58020400
 80019a8:	58020000 	.word	0x58020000

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b0:	f7ff fd9a 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b6:	490d      	ldr	r1, [pc, #52]	@ (80019ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019cc:	4c0a      	ldr	r4, [pc, #40]	@ (80019f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f00b fabb 	bl	800cf54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7ff f935 	bl	8000c4c <main>
  bx  lr
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019ec:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 80019f0:	08011798 	.word	0x08011798
  ldr r2, =_sbss
 80019f4:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 80019f8:	24005404 	.word	0x24005404

080019fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC3_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 f933 	bl	8001c72 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a0c:	f002 fa98 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_Init+0x68>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4913      	ldr	r1, [pc, #76]	@ (8001a6c <HAL_Init+0x6c>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_Init+0x68>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_Init+0x6c>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_Init+0x70>)
 8001a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a44:	4a0b      	ldr	r2, [pc, #44]	@ (8001a74 <HAL_Init+0x74>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4a:	2005      	movs	r0, #5
 8001a4c:	f7ff fbe4 	bl	8001218 <HAL_InitTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e002      	b.n	8001a60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5a:	f7ff fbbf 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	0800f3ec 	.word	0x0800f3ec
 8001a70:	24000004 	.word	0x24000004
 8001a74:	24000000 	.word	0x24000000

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2400000c 	.word	0x2400000c
 8001a9c:	240004a8 	.word	0x240004a8

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	@ (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	240004a8 	.word	0x240004a8

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2400000c 	.word	0x2400000c

08001b00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_GetREVID+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0c1b      	lsrs	r3, r3, #16
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	5c001000 	.word	0x5c001000

08001b18 <__NVIC_SetPriorityGrouping>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x40>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <__NVIC_SetPriorityGrouping+0x40>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00
 8001b5c:	05fa0000 	.word	0x05fa0000

08001b60 <__NVIC_GetPriorityGrouping>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	@ (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	@ (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	@ 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ff4c 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c96:	f7ff ff63 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001c9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	6978      	ldr	r0, [r7, #20]
 8001ca2:	f7ff ffb3 	bl	8001c0c <NVIC_EncodePriority>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff82 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff56 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cdc:	f3bf 8f5f 	dmb	sy
}
 8001ce0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <HAL_MPU_Disable+0x28>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	4a06      	ldr	r2, [pc, #24]	@ (8001d00 <HAL_MPU_Disable+0x28>)
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_MPU_Disable+0x2c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	e000ed90 	.word	0xe000ed90

08001d08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d10:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <HAL_MPU_Enable+0x38>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_MPU_Enable+0x3c>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	4a09      	ldr	r2, [pc, #36]	@ (8001d44 <HAL_MPU_Enable+0x3c>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d26:	f3bf 8f4f 	dsb	sy
}
 8001d2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d2c:	f3bf 8f6f 	isb	sy
}
 8001d30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed90 	.word	0xe000ed90
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	785a      	ldrb	r2, [r3, #1]
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d56:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d58:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	@ (8001dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d64:	4a17      	ldr	r2, [pc, #92]	@ (8001dc4 <HAL_MPU_ConfigRegion+0x7c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7b1b      	ldrb	r3, [r3, #12]
 8001d70:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7adb      	ldrb	r3, [r3, #11]
 8001d76:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7a9b      	ldrb	r3, [r3, #10]
 8001d7e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7b5b      	ldrb	r3, [r3, #13]
 8001d86:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7b9b      	ldrb	r3, [r3, #14]
 8001d8e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7bdb      	ldrb	r3, [r3, #15]
 8001d96:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7a5b      	ldrb	r3, [r3, #9]
 8001d9e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7a1b      	ldrb	r3, [r3, #8]
 8001da6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001da8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001db2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db4:	6113      	str	r3, [r2, #16]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed90 	.word	0xe000ed90

08001dc8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e014      	b.n	8001e04 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fc10 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e046      	b.n	8001eae <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	795b      	ldrb	r3, [r3, #5]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_DAC_Start+0x20>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e040      	b.n	8001eae <HAL_DAC_Start+0xa2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d11d      	bne.n	8001ea0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	e014      	b.n	8001ea0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2102      	movs	r1, #2
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0202 	orr.w	r2, r2, #2
 8001e9e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01d      	beq.n	8001f18 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d018      	beq.n	8001f18 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f10:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f851 	bl	8001fba <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01d      	beq.n	8001f5e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d018      	beq.n	8001f5e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001f56:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f97b 	bl	8002254 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b087      	sub	sp, #28
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e015      	b.n	8001fae <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3308      	adds	r3, #8
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e004      	b.n	8001fa4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_DAC_ConfigChannel+0x1e>
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e12a      	b.n	8002248 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	795b      	ldrb	r3, [r3, #5]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_DAC_ConfigChannel+0x2e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e124      	b.n	8002248 <HAL_DAC_ConfigChannel+0x278>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2202      	movs	r2, #2
 8002008:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b04      	cmp	r3, #4
 8002010:	d17a      	bne.n	8002108 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002012:	f7ff fd45 	bl	8001aa0 <HAL_GetTick>
 8002016:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d13d      	bne.n	800209a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800201e:	e018      	b.n	8002052 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002020:	f7ff fd3e 	bl	8001aa0 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d911      	bls.n	8002052 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002034:	4b86      	ldr	r3, [pc, #536]	@ (8002250 <HAL_DAC_ConfigChannel+0x280>)
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f043 0208 	orr.w	r2, r3, #8
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2203      	movs	r2, #3
 800204c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0fa      	b.n	8002248 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002058:	4b7d      	ldr	r3, [pc, #500]	@ (8002250 <HAL_DAC_ConfigChannel+0x280>)
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1df      	bne.n	8002020 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	6992      	ldr	r2, [r2, #24]
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40
 800206a:	e020      	b.n	80020ae <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800206c:	f7ff fd18 	bl	8001aa0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d90f      	bls.n	800209a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	2b00      	cmp	r3, #0
 8002082:	da0a      	bge.n	800209a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f043 0208 	orr.w	r2, r3, #8
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2203      	movs	r2, #3
 8002094:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0d6      	b.n	8002248 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	dbe3      	blt.n	800206c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	6992      	ldr	r2, [r2, #24]
 80020ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	ea02 0103 	and.w	r1, r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	21ff      	movs	r1, #255	@ 0xff
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	ea02 0103 	and.w	r1, r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d11d      	bne.n	800214c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002116:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	221f      	movs	r2, #31
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2207      	movs	r2, #7
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d102      	bne.n	8002176 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24
 8002174:	e00f      	b.n	8002196 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d102      	bne.n	8002184 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800217e:	2301      	movs	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
 8002182:	e008      	b.n	8002196 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800218c:	2301      	movs	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002190:	e001      	b.n	8002196 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4313      	orrs	r3, r2
 80021a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43da      	mvns	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	400a      	ands	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	22c0      	movs	r2, #192	@ 0xc0
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002244:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002248:	4618      	mov	r0, r3
 800224a:	3728      	adds	r7, #40	@ 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20008000 	.word	0x20008000

08002254 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002276:	4b89      	ldr	r3, [pc, #548]	@ (800249c <HAL_GPIO_Init+0x234>)
 8002278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227a:	e194      	b.n	80025a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8186 	beq.w	80025a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x44>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e2:	2201      	movs	r2, #1
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	69b9      	ldr	r1, [r7, #24]
 800239a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0203 	and.w	r2, r3, #3
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80e0 	beq.w	80025a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e0:	4b2f      	ldr	r3, [pc, #188]	@ (80024a0 <HAL_GPIO_Init+0x238>)
 80023e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023e6:	4a2e      	ldr	r2, [pc, #184]	@ (80024a0 <HAL_GPIO_Init+0x238>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023f0:	4b2b      	ldr	r3, [pc, #172]	@ (80024a0 <HAL_GPIO_Init+0x238>)
 80023f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fe:	4a29      	ldr	r2, [pc, #164]	@ (80024a4 <HAL_GPIO_Init+0x23c>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a20      	ldr	r2, [pc, #128]	@ (80024a8 <HAL_GPIO_Init+0x240>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d052      	beq.n	80024d0 <HAL_GPIO_Init+0x268>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1f      	ldr	r2, [pc, #124]	@ (80024ac <HAL_GPIO_Init+0x244>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d031      	beq.n	8002496 <HAL_GPIO_Init+0x22e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1e      	ldr	r2, [pc, #120]	@ (80024b0 <HAL_GPIO_Init+0x248>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02b      	beq.n	8002492 <HAL_GPIO_Init+0x22a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_GPIO_Init+0x24c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d025      	beq.n	800248e <HAL_GPIO_Init+0x226>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_GPIO_Init+0x250>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01f      	beq.n	800248a <HAL_GPIO_Init+0x222>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1b      	ldr	r2, [pc, #108]	@ (80024bc <HAL_GPIO_Init+0x254>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d019      	beq.n	8002486 <HAL_GPIO_Init+0x21e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1a      	ldr	r2, [pc, #104]	@ (80024c0 <HAL_GPIO_Init+0x258>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0x21a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a19      	ldr	r2, [pc, #100]	@ (80024c4 <HAL_GPIO_Init+0x25c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00d      	beq.n	800247e <HAL_GPIO_Init+0x216>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_GPIO_Init+0x260>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <HAL_GPIO_Init+0x212>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <HAL_GPIO_Init+0x264>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_GPIO_Init+0x20e>
 8002472:	2309      	movs	r3, #9
 8002474:	e02d      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 8002476:	230a      	movs	r3, #10
 8002478:	e02b      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 800247a:	2308      	movs	r3, #8
 800247c:	e029      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 800247e:	2307      	movs	r3, #7
 8002480:	e027      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 8002482:	2306      	movs	r3, #6
 8002484:	e025      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 8002486:	2305      	movs	r3, #5
 8002488:	e023      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 800248a:	2304      	movs	r3, #4
 800248c:	e021      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 800248e:	2303      	movs	r3, #3
 8002490:	e01f      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 8002492:	2302      	movs	r3, #2
 8002494:	e01d      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 8002496:	2301      	movs	r3, #1
 8002498:	e01b      	b.n	80024d2 <HAL_GPIO_Init+0x26a>
 800249a:	bf00      	nop
 800249c:	58000080 	.word	0x58000080
 80024a0:	58024400 	.word	0x58024400
 80024a4:	58000400 	.word	0x58000400
 80024a8:	58020000 	.word	0x58020000
 80024ac:	58020400 	.word	0x58020400
 80024b0:	58020800 	.word	0x58020800
 80024b4:	58020c00 	.word	0x58020c00
 80024b8:	58021000 	.word	0x58021000
 80024bc:	58021400 	.word	0x58021400
 80024c0:	58021800 	.word	0x58021800
 80024c4:	58021c00 	.word	0x58021c00
 80024c8:	58022000 	.word	0x58022000
 80024cc:	58022400 	.word	0x58022400
 80024d0:	2300      	movs	r3, #0
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e2:	4938      	ldr	r1, [pc, #224]	@ (80025c4 <HAL_GPIO_Init+0x35c>)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002516:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002544:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f ae63 	bne.w	800227c <HAL_GPIO_Init+0x14>
  }
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	3724      	adds	r7, #36	@ 0x24
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	58000400 	.word	0x58000400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4013      	ands	r3, r2
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43d9      	mvns	r1, r3
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	400b      	ands	r3, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	619a      	str	r2, [r3, #24]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002648:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	4618      	mov	r0, r3
 8002656:	f009 fcdf 	bl	800c018 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e08b      	b.n	800278e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fa76 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	@ 0x24
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	e006      	b.n	80026ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d108      	bne.n	8002706 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	e007      	b.n	8002716 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_I2C_Init+0x134>)
 8002722:	430b      	orrs	r3, r1
 8002724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	02008000 	.word	0x02008000

0800279c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	817b      	strh	r3, [r7, #10]
 80027ae:	460b      	mov	r3, r1
 80027b0:	813b      	strh	r3, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	f040 80f9 	bne.w	80029b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x34>
 80027ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0ed      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Mem_Write+0x4e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0e6      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027f2:	f7ff f955 	bl	8001aa0 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fac3 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0d1      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2221      	movs	r2, #33	@ 0x21
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800283c:	88f8      	ldrh	r0, [r7, #6]
 800283e:	893a      	ldrh	r2, [r7, #8]
 8002840:	8979      	ldrh	r1, [r7, #10]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4603      	mov	r3, r0
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f9d3 	bl	8002bf8 <I2C_RequestMemoryWrite>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0a9      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2bff      	cmp	r3, #255	@ 0xff
 800286c:	d90e      	bls.n	800288c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	22ff      	movs	r2, #255	@ 0xff
 8002872:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002878:	b2da      	uxtb	r2, r3
 800287a:	8979      	ldrh	r1, [r7, #10]
 800287c:	2300      	movs	r3, #0
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fc47 	bl	8003118 <I2C_TransferConfig>
 800288a:	e00f      	b.n	80028ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289a:	b2da      	uxtb	r2, r3
 800289c:	8979      	ldrh	r1, [r7, #10]
 800289e:	2300      	movs	r3, #0
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fc36 	bl	8003118 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fac6 	bl	8002e42 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e07b      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d034      	beq.n	8002964 <HAL_I2C_Mem_Write+0x1c8>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d130      	bne.n	8002964 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	2200      	movs	r2, #0
 800290a:	2180      	movs	r1, #128	@ 0x80
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fa3f 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e04d      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2bff      	cmp	r3, #255	@ 0xff
 8002924:	d90e      	bls.n	8002944 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	22ff      	movs	r2, #255	@ 0xff
 800292a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002930:	b2da      	uxtb	r2, r3
 8002932:	8979      	ldrh	r1, [r7, #10]
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fbeb 	bl	8003118 <I2C_TransferConfig>
 8002942:	e00f      	b.n	8002964 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	b2da      	uxtb	r2, r3
 8002954:	8979      	ldrh	r1, [r7, #10]
 8002956:	2300      	movs	r3, #0
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fbda 	bl	8003118 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d19e      	bne.n	80028ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 faac 	bl	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e01a      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2220      	movs	r2, #32
 8002988:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_I2C_Mem_Write+0x224>)
 8002996:	400b      	ands	r3, r1
 8002998:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	fe00e800 	.word	0xfe00e800

080029c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	f040 80fd 	bne.w	8002be6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_I2C_Mem_Read+0x34>
 80029f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0f1      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Mem_Read+0x4e>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0ea      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a1a:	f7ff f841 	bl	8001aa0 <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2319      	movs	r3, #25
 8002a26:	2201      	movs	r2, #1
 8002a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f9af 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0d5      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2222      	movs	r2, #34	@ 0x22
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2240      	movs	r2, #64	@ 0x40
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a64:	88f8      	ldrh	r0, [r7, #6]
 8002a66:	893a      	ldrh	r2, [r7, #8]
 8002a68:	8979      	ldrh	r1, [r7, #10]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4603      	mov	r3, r0
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f913 	bl	8002ca0 <I2C_RequestMemoryRead>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0ad      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2bff      	cmp	r3, #255	@ 0xff
 8002a94:	d90e      	bls.n	8002ab4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	22ff      	movs	r2, #255	@ 0xff
 8002a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	8979      	ldrh	r1, [r7, #10]
 8002aa4:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <HAL_I2C_Mem_Read+0x22c>)
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fb33 	bl	8003118 <I2C_TransferConfig>
 8002ab2:	e00f      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	8979      	ldrh	r1, [r7, #10]
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf0 <HAL_I2C_Mem_Read+0x22c>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fb22 	bl	8003118 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ada:	2200      	movs	r2, #0
 8002adc:	2104      	movs	r1, #4
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f956 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07c      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d034      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x1d0>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d130      	bne.n	8002b94 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2180      	movs	r1, #128	@ 0x80
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f927 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e04d      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2bff      	cmp	r3, #255	@ 0xff
 8002b54:	d90e      	bls.n	8002b74 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	22ff      	movs	r2, #255	@ 0xff
 8002b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	8979      	ldrh	r1, [r7, #10]
 8002b64:	2300      	movs	r3, #0
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fad3 	bl	8003118 <I2C_TransferConfig>
 8002b72:	e00f      	b.n	8002b94 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fac2 	bl	8003118 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d19a      	bne.n	8002ad4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f994 	bl	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e01a      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_I2C_Mem_Read+0x230>)
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	80002400 	.word	0x80002400
 8002bf4:	fe00e800 	.word	0xfe00e800

08002bf8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	8979      	ldrh	r1, [r7, #10]
 8002c18:	4b20      	ldr	r3, [pc, #128]	@ (8002c9c <I2C_RequestMemoryWrite+0xa4>)
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fa79 	bl	8003118 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	69b9      	ldr	r1, [r7, #24]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f909 	bl	8002e42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e02c      	b.n	8002c94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c40:	893b      	ldrh	r3, [r7, #8]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c4a:	e015      	b.n	8002c78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c4c:	893b      	ldrh	r3, [r7, #8]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	69b9      	ldr	r1, [r7, #24]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f8ef 	bl	8002e42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e012      	b.n	8002c94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6e:	893b      	ldrh	r3, [r7, #8]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2180      	movs	r1, #128	@ 0x80
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f884 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	80002000 	.word	0x80002000

08002ca0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	4608      	mov	r0, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	461a      	mov	r2, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	813b      	strh	r3, [r7, #8]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	8979      	ldrh	r1, [r7, #10]
 8002cc0:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <I2C_RequestMemoryRead+0xa4>)
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fa26 	bl	8003118 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f8b6 	bl	8002e42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e02c      	b.n	8002d3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce6:	893b      	ldrh	r3, [r7, #8]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cf0:	e015      	b.n	8002d1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf2:	893b      	ldrh	r3, [r7, #8]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	69b9      	ldr	r1, [r7, #24]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f89c 	bl	8002e42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e012      	b.n	8002d3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d14:	893b      	ldrh	r3, [r7, #8]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2140      	movs	r1, #64	@ 0x40
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f831 	bl	8002d90 <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	80002000 	.word	0x80002000

08002d48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d103      	bne.n	8002d66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d007      	beq.n	8002d84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	619a      	str	r2, [r3, #24]
  }
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da0:	e03b      	b.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	6839      	ldr	r1, [r7, #0]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8d6 	bl	8002f58 <I2C_IsErrorOccurred>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e041      	b.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d02d      	beq.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7fe fe6f 	bl	8001aa0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d122      	bne.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d113      	bne.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d0b4      	beq.n	8002da2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e4e:	e033      	b.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f87f 	bl	8002f58 <I2C_IsErrorOccurred>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e031      	b.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d025      	beq.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6c:	f7fe fe18 	bl	8001aa0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d302      	bcc.n	8002e82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11a      	bne.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d013      	beq.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e007      	b.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d1c4      	bne.n	8002e50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002edc:	e02f      	b.n	8002f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f838 	bl	8002f58 <I2C_IsErrorOccurred>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e02d      	b.n	8002f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fdd5 	bl	8001aa0 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11a      	bne.n	8002f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d013      	beq.n	8002f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e007      	b.n	8002f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d1c8      	bne.n	8002ede <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	@ 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d068      	beq.n	8003056 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f8c:	e049      	b.n	8003022 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d045      	beq.n	8003022 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fd83 	bl	8001aa0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_IsErrorOccurred+0x54>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d13a      	bne.n	8003022 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fce:	d121      	bne.n	8003014 <I2C_IsErrorOccurred+0xbc>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fd6:	d01d      	beq.n	8003014 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d01a      	beq.n	8003014 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fee:	f7fe fd57 	bl	8001aa0 <HAL_GetTick>
 8002ff2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ff4:	e00e      	b.n	8003014 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ff6:	f7fe fd53 	bl	8001aa0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b19      	cmp	r3, #25
 8003002:	d907      	bls.n	8003014 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f043 0320 	orr.w	r3, r3, #32
 800300a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003012:	e006      	b.n	8003022 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b20      	cmp	r3, #32
 8003020:	d1e9      	bne.n	8002ff6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b20      	cmp	r3, #32
 800302e:	d003      	beq.n	8003038 <I2C_IsErrorOccurred+0xe0>
 8003030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0aa      	beq.n	8002f8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2220      	movs	r2, #32
 8003046:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003078:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f043 0308 	orr.w	r3, r3, #8
 8003090:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800309a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01c      	beq.n	8003106 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fe3b 	bl	8002d48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <I2C_IsErrorOccurred+0x1bc>)
 80030de:	400b      	ands	r3, r1
 80030e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800310a:	4618      	mov	r0, r3
 800310c:	3728      	adds	r7, #40	@ 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	fe00e800 	.word	0xfe00e800

08003118 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	4613      	mov	r3, r2
 8003128:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003130:	7a7b      	ldrb	r3, [r7, #9]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003138:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4313      	orrs	r3, r2
 8003142:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003146:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	0d5b      	lsrs	r3, r3, #21
 8003152:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <I2C_TransferConfig+0x60>)
 8003158:	430b      	orrs	r3, r1
 800315a:	43db      	mvns	r3, r3
 800315c:	ea02 0103 	and.w	r1, r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	03ff63ff 	.word	0x03ff63ff

0800317c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	d138      	bne.n	8003204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800319c:	2302      	movs	r3, #2
 800319e:	e032      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	@ 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b20      	cmp	r3, #32
 8003226:	d139      	bne.n	800329c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003232:	2302      	movs	r3, #2
 8003234:	e033      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	@ 0x24
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003264:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_PWREx_ConfigSupply+0x70>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d00a      	beq.n	80032d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_PWREx_ConfigSupply+0x70>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e01f      	b.n	8003312 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e01d      	b.n	8003312 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032d6:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_PWREx_ConfigSupply+0x70>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f023 0207 	bic.w	r2, r3, #7
 80032de:	490f      	ldr	r1, [pc, #60]	@ (800331c <HAL_PWREx_ConfigSupply+0x70>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032e6:	f7fe fbdb 	bl	8001aa0 <HAL_GetTick>
 80032ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032ec:	e009      	b.n	8003302 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032ee:	f7fe fbd7 	bl	8001aa0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032fc:	d901      	bls.n	8003302 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e007      	b.n	8003312 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_PWREx_ConfigSupply+0x70>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330e:	d1ee      	bne.n	80032ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	58024800 	.word	0x58024800

08003320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	@ 0x30
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f000 bc48 	b.w	8003bc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8088 	beq.w	8003452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4b99      	ldr	r3, [pc, #612]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800334c:	4b96      	ldr	r3, [pc, #600]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003354:	2b10      	cmp	r3, #16
 8003356:	d007      	beq.n	8003368 <HAL_RCC_OscConfig+0x48>
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	2b18      	cmp	r3, #24
 800335c:	d111      	bne.n	8003382 <HAL_RCC_OscConfig+0x62>
 800335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d10c      	bne.n	8003382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	4b8f      	ldr	r3, [pc, #572]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d06d      	beq.n	8003450 <HAL_RCC_OscConfig+0x130>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d169      	bne.n	8003450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f000 bc21 	b.w	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x7a>
 800338c:	4b86      	ldr	r3, [pc, #536]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a85      	ldr	r2, [pc, #532]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	e02e      	b.n	80033f8 <HAL_RCC_OscConfig+0xd8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x9c>
 80033a2:	4b81      	ldr	r3, [pc, #516]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a80      	ldr	r2, [pc, #512]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b7e      	ldr	r3, [pc, #504]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7d      	ldr	r2, [pc, #500]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xd8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0xc0>
 80033c6:	4b78      	ldr	r3, [pc, #480]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a77      	ldr	r2, [pc, #476]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b75      	ldr	r3, [pc, #468]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a74      	ldr	r2, [pc, #464]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xd8>
 80033e0:	4b71      	ldr	r3, [pc, #452]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a70      	ldr	r2, [pc, #448]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b6e      	ldr	r3, [pc, #440]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6d      	ldr	r2, [pc, #436]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe fb4e 	bl	8001aa0 <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fb4a 	bl	8001aa0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e3d4      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800341a:	4b63      	ldr	r3, [pc, #396]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xe8>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fb3a 	bl	8001aa0 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fb36 	bl	8001aa0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e3c0      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003442:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x110>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80ca 	beq.w	80035f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003460:	4b51      	ldr	r3, [pc, #324]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003468:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800346a:	4b4f      	ldr	r3, [pc, #316]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <HAL_RCC_OscConfig+0x166>
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	2b18      	cmp	r3, #24
 800347a:	d156      	bne.n	800352a <HAL_RCC_OscConfig+0x20a>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d151      	bne.n	800352a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003486:	4b48      	ldr	r3, [pc, #288]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x17e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e392      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800349e:	4b42      	ldr	r3, [pc, #264]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0219 	bic.w	r2, r3, #25
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	493f      	ldr	r1, [pc, #252]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe faf6 	bl	8001aa0 <HAL_GetTick>
 80034b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe faf2 	bl	8001aa0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e37c      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ca:	4b37      	ldr	r3, [pc, #220]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	f7fe fb13 	bl	8001b00 <HAL_GetREVID>
 80034da:	4603      	mov	r3, r0
 80034dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d817      	bhi.n	8003514 <HAL_RCC_OscConfig+0x1f4>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b40      	cmp	r3, #64	@ 0x40
 80034ea:	d108      	bne.n	80034fe <HAL_RCC_OscConfig+0x1de>
 80034ec:	4b2e      	ldr	r3, [pc, #184]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034f4:	4a2c      	ldr	r2, [pc, #176]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fc:	e07a      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b2a      	ldr	r3, [pc, #168]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	031b      	lsls	r3, r3, #12
 800350c:	4926      	ldr	r1, [pc, #152]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003512:	e06f      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b24      	ldr	r3, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	4921      	ldr	r1, [pc, #132]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003528:	e064      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d047      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003532:	4b1d      	ldr	r3, [pc, #116]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0219 	bic.w	r2, r3, #25
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	491a      	ldr	r1, [pc, #104]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe faac 	bl	8001aa0 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe faa8 	bl	8001aa0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e332      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800355e:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	f7fe fac9 	bl	8001b00 <HAL_GetREVID>
 800356e:	4603      	mov	r3, r0
 8003570:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003574:	4293      	cmp	r3, r2
 8003576:	d819      	bhi.n	80035ac <HAL_RCC_OscConfig+0x28c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d108      	bne.n	8003592 <HAL_RCC_OscConfig+0x272>
 8003580:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003588:	4a07      	ldr	r2, [pc, #28]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358e:	6053      	str	r3, [r2, #4]
 8003590:	e030      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
 8003592:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	031b      	lsls	r3, r3, #12
 80035a0:	4901      	ldr	r1, [pc, #4]	@ (80035a8 <HAL_RCC_OscConfig+0x288>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
 80035a6:	e025      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
 80035a8:	58024400 	.word	0x58024400
 80035ac:	4b9a      	ldr	r3, [pc, #616]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	4997      	ldr	r1, [pc, #604]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	e018      	b.n	80035f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b95      	ldr	r3, [pc, #596]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a94      	ldr	r2, [pc, #592]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe fa67 	bl	8001aa0 <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fe fa63 	bl	8001aa0 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e2ed      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035e8:	4b8b      	ldr	r3, [pc, #556]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a9 	beq.w	8003754 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003602:	4b85      	ldr	r3, [pc, #532]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800360a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800360c:	4b82      	ldr	r3, [pc, #520]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d007      	beq.n	8003628 <HAL_RCC_OscConfig+0x308>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b18      	cmp	r3, #24
 800361c:	d13a      	bne.n	8003694 <HAL_RCC_OscConfig+0x374>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d135      	bne.n	8003694 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003628:	4b7b      	ldr	r3, [pc, #492]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_OscConfig+0x320>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b80      	cmp	r3, #128	@ 0x80
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e2c1      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003640:	f7fe fa5e 	bl	8001b00 <HAL_GetREVID>
 8003644:	4603      	mov	r3, r0
 8003646:	f241 0203 	movw	r2, #4099	@ 0x1003
 800364a:	4293      	cmp	r3, r2
 800364c:	d817      	bhi.n	800367e <HAL_RCC_OscConfig+0x35e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	2b20      	cmp	r3, #32
 8003654:	d108      	bne.n	8003668 <HAL_RCC_OscConfig+0x348>
 8003656:	4b70      	ldr	r3, [pc, #448]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800365e:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003664:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003666:	e075      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003668:	4b6b      	ldr	r3, [pc, #428]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	069b      	lsls	r3, r3, #26
 8003676:	4968      	ldr	r1, [pc, #416]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800367c:	e06a      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800367e:	4b66      	ldr	r3, [pc, #408]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	061b      	lsls	r3, r3, #24
 800368c:	4962      	ldr	r1, [pc, #392]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003692:	e05f      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d042      	beq.n	8003722 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800369c:	4b5e      	ldr	r3, [pc, #376]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe f9fa 	bl	8001aa0 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036b0:	f7fe f9f6 	bl	8001aa0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e280      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036c2:	4b55      	ldr	r3, [pc, #340]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ce:	f7fe fa17 	bl	8001b00 <HAL_GetREVID>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036d8:	4293      	cmp	r3, r2
 80036da:	d817      	bhi.n	800370c <HAL_RCC_OscConfig+0x3ec>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d108      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3d6>
 80036e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80036ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036f2:	6053      	str	r3, [r2, #4]
 80036f4:	e02e      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
 80036f6:	4b48      	ldr	r3, [pc, #288]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	069b      	lsls	r3, r3, #26
 8003704:	4944      	ldr	r1, [pc, #272]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
 800370a:	e023      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
 800370c:	4b42      	ldr	r3, [pc, #264]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	493f      	ldr	r1, [pc, #252]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	60cb      	str	r3, [r1, #12]
 8003720:	e018      	b.n	8003754 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003722:	4b3d      	ldr	r3, [pc, #244]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3c      	ldr	r2, [pc, #240]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fe f9b7 	bl	8001aa0 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003736:	f7fe f9b3 	bl	8001aa0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e23d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003748:	4b33      	ldr	r3, [pc, #204]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d036      	beq.n	80037ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d019      	beq.n	800379c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376c:	4a2a      	ldr	r2, [pc, #168]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe f994 	bl	8001aa0 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fe f990 	bl	8001aa0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e21a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800378e:	4b22      	ldr	r3, [pc, #136]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x45c>
 800379a:	e018      	b.n	80037ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800379e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fe f97a 	bl	8001aa0 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fe f976 	bl	8001aa0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e200      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037c2:	4b15      	ldr	r3, [pc, #84]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d039      	beq.n	800384e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01c      	beq.n	800381c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037ee:	f7fe f957 	bl	8001aa0 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037f6:	f7fe f953 	bl	8001aa0 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1dd      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003808:	4b03      	ldr	r3, [pc, #12]	@ (8003818 <HAL_RCC_OscConfig+0x4f8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4d6>
 8003814:	e01b      	b.n	800384e <HAL_RCC_OscConfig+0x52e>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800381c:	4b9b      	ldr	r3, [pc, #620]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a9a      	ldr	r2, [pc, #616]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003828:	f7fe f93a 	bl	8001aa0 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003830:	f7fe f936 	bl	8001aa0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e1c0      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003842:	4b92      	ldr	r3, [pc, #584]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8081 	beq.w	800395e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800385c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a90 <HAL_RCC_OscConfig+0x770>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a8b      	ldr	r2, [pc, #556]	@ (8003a90 <HAL_RCC_OscConfig+0x770>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003868:	f7fe f91a 	bl	8001aa0 <HAL_GetTick>
 800386c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fe f916 	bl	8001aa0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1a0      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003882:	4b83      	ldr	r3, [pc, #524]	@ (8003a90 <HAL_RCC_OscConfig+0x770>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x584>
 8003896:	4b7d      	ldr	r3, [pc, #500]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a2:	e02d      	b.n	8003900 <HAL_RCC_OscConfig+0x5e0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5a6>
 80038ac:	4b77      	ldr	r3, [pc, #476]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a76      	ldr	r2, [pc, #472]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	4b74      	ldr	r3, [pc, #464]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a73      	ldr	r2, [pc, #460]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x5e0>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x5c8>
 80038ce:	4b6f      	ldr	r3, [pc, #444]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038da:	4b6c      	ldr	r3, [pc, #432]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	4a6b      	ldr	r2, [pc, #428]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0x5e0>
 80038e8:	4b68      	ldr	r3, [pc, #416]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	4a67      	ldr	r2, [pc, #412]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f4:	4b65      	ldr	r3, [pc, #404]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	4a64      	ldr	r2, [pc, #400]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80038fa:	f023 0304 	bic.w	r3, r3, #4
 80038fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe f8ca 	bl	8001aa0 <HAL_GetTick>
 800390c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390e:	e00a      	b.n	8003926 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fe f8c6 	bl	8001aa0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e14e      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003926:	4b59      	ldr	r3, [pc, #356]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ee      	beq.n	8003910 <HAL_RCC_OscConfig+0x5f0>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fe f8b4 	bl	8001aa0 <HAL_GetTick>
 8003938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7fe f8b0 	bl	8001aa0 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e138      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003952:	4b4e      	ldr	r3, [pc, #312]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ee      	bne.n	800393c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 812d 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003968:	4b48      	ldr	r3, [pc, #288]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003970:	2b18      	cmp	r3, #24
 8003972:	f000 80bd 	beq.w	8003af0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	2b02      	cmp	r3, #2
 800397c:	f040 809e 	bne.w	8003abc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003980:	4b42      	ldr	r3, [pc, #264]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a41      	ldr	r2, [pc, #260]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800398a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe f888 	bl	8001aa0 <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003994:	f7fe f884 	bl	8001aa0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e10e      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039a6:	4b39      	ldr	r3, [pc, #228]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b2:	4b36      	ldr	r3, [pc, #216]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039b6:	4b37      	ldr	r3, [pc, #220]	@ (8003a94 <HAL_RCC_OscConfig+0x774>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4931      	ldr	r1, [pc, #196]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	3b01      	subs	r3, #1
 80039d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039da:	3b01      	subs	r3, #1
 80039dc:	025b      	lsls	r3, r3, #9
 80039de:	b29b      	uxth	r3, r3
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	3b01      	subs	r3, #1
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f4:	3b01      	subs	r3, #1
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80039fc:	4923      	ldr	r1, [pc, #140]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a02:	4b22      	ldr	r3, [pc, #136]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	4a21      	ldr	r2, [pc, #132]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a12:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a1a:	00d2      	lsls	r2, r2, #3
 8003a1c:	491b      	ldr	r1, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	f023 020c 	bic.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	4917      	ldr	r1, [pc, #92]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a34:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	f023 0202 	bic.w	r2, r3, #2
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	4912      	ldr	r1, [pc, #72]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a46:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	4a0d      	ldr	r2, [pc, #52]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	4a07      	ldr	r2, [pc, #28]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a04      	ldr	r2, [pc, #16]	@ (8003a8c <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe f80d 	bl	8001aa0 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a88:	e011      	b.n	8003aae <HAL_RCC_OscConfig+0x78e>
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	58024800 	.word	0x58024800
 8003a94:	fffffc0c 	.word	0xfffffc0c
 8003a98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe f800 	bl	8001aa0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e08a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aae:	4b47      	ldr	r3, [pc, #284]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x77c>
 8003aba:	e082      	b.n	8003bc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abc:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a42      	ldr	r2, [pc, #264]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fd ffea 	bl	8001aa0 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fd ffe6 	bl	8001aa0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e070      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x7b0>
 8003aee:	e068      	b.n	8003bc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003af0:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003af6:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d031      	beq.n	8003b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0203 	and.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d12a      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d122      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d11a      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0a5b      	lsrs	r3, r3, #9
 8003b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d111      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	0e1b      	lsrs	r3, r3, #24
 8003b5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e02b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b6c:	4b17      	ldr	r3, [pc, #92]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d01f      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b86:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b8e:	f7fd ff87 	bl	8001aa0 <HAL_GetTick>
 8003b92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b94:	bf00      	nop
 8003b96:	f7fd ff83 	bl	8001aa0 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d0f9      	beq.n	8003b96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <HAL_RCC_OscConfig+0x8b0>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	4906      	ldr	r1, [pc, #24]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	4a04      	ldr	r2, [pc, #16]	@ (8003bcc <HAL_RCC_OscConfig+0x8ac>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3730      	adds	r7, #48	@ 0x30
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	ffff0007 	.word	0xffff0007

08003bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e19c      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b8a      	ldr	r3, [pc, #552]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d910      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b87      	ldr	r3, [pc, #540]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 020f 	bic.w	r2, r3, #15
 8003bfe:	4985      	ldr	r1, [pc, #532]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b83      	ldr	r3, [pc, #524]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e184      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	4b7b      	ldr	r3, [pc, #492]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d908      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c34:	4b78      	ldr	r3, [pc, #480]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	4975      	ldr	r1, [pc, #468]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	4b70      	ldr	r3, [pc, #448]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d908      	bls.n	8003c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c62:	4b6d      	ldr	r3, [pc, #436]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	496a      	ldr	r1, [pc, #424]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d010      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	4b64      	ldr	r3, [pc, #400]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d908      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c90:	4b61      	ldr	r3, [pc, #388]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	495e      	ldr	r1, [pc, #376]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	4b59      	ldr	r3, [pc, #356]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d908      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003cbe:	4b56      	ldr	r3, [pc, #344]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4953      	ldr	r1, [pc, #332]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d908      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b4a      	ldr	r3, [pc, #296]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f023 020f 	bic.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4947      	ldr	r1, [pc, #284]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d055      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d0a:	4b43      	ldr	r3, [pc, #268]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4940      	ldr	r1, [pc, #256]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d24:	4b3c      	ldr	r3, [pc, #240]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d121      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0f6      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d3c:	4b36      	ldr	r3, [pc, #216]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0ea      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d54:	4b30      	ldr	r3, [pc, #192]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0de      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d64:	4b2c      	ldr	r3, [pc, #176]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d6      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d74:	4b28      	ldr	r3, [pc, #160]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f023 0207 	bic.w	r2, r3, #7
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4925      	ldr	r1, [pc, #148]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fd fe8b 	bl	8001aa0 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8e:	f7fd fe87 	bl	8001aa0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0be      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d1eb      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d208      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd2:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	490e      	ldr	r1, [pc, #56]	@ (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d214      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 020f 	bic.w	r2, r3, #15
 8003dfa:	4906      	ldr	r1, [pc, #24]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b04      	ldr	r3, [pc, #16]	@ (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e086      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
 8003e14:	52002000 	.word	0x52002000
 8003e18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d208      	bcs.n	8003e4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e38:	4b3c      	ldr	r3, [pc, #240]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4939      	ldr	r1, [pc, #228]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d010      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	4b34      	ldr	r3, [pc, #208]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d208      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e66:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	492e      	ldr	r1, [pc, #184]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d010      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	4b28      	ldr	r3, [pc, #160]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d208      	bcs.n	8003ea6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e94:	4b25      	ldr	r3, [pc, #148]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	4922      	ldr	r1, [pc, #136]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d010      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d208      	bcs.n	8003ed4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4917      	ldr	r1, [pc, #92]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ed4:	f000 f834 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b14      	ldr	r3, [pc, #80]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	4912      	ldr	r1, [pc, #72]	@ (8003f30 <HAL_RCC_ClockConfig+0x35c>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	4a0d      	ldr	r2, [pc, #52]	@ (8003f30 <HAL_RCC_ClockConfig+0x35c>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <HAL_RCC_ClockConfig+0x360>)
 8003f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <HAL_RCC_ClockConfig+0x364>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f12:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <HAL_RCC_ClockConfig+0x368>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd f97e 	bl	8001218 <HAL_InitTick>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	0800f3ec 	.word	0x0800f3ec
 8003f34:	24000004 	.word	0x24000004
 8003f38:	24000000 	.word	0x24000000
 8003f3c:	24000008 	.word	0x24000008

08003f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	@ 0x24
 8003f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f46:	4bb3      	ldr	r3, [pc, #716]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f4e:	2b18      	cmp	r3, #24
 8003f50:	f200 8155 	bhi.w	80041fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003f54:	a201      	add	r2, pc, #4	@ (adr r2, 8003f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	080041ff 	.word	0x080041ff
 8003f64:	080041ff 	.word	0x080041ff
 8003f68:	080041ff 	.word	0x080041ff
 8003f6c:	080041ff 	.word	0x080041ff
 8003f70:	080041ff 	.word	0x080041ff
 8003f74:	080041ff 	.word	0x080041ff
 8003f78:	080041ff 	.word	0x080041ff
 8003f7c:	08003fe7 	.word	0x08003fe7
 8003f80:	080041ff 	.word	0x080041ff
 8003f84:	080041ff 	.word	0x080041ff
 8003f88:	080041ff 	.word	0x080041ff
 8003f8c:	080041ff 	.word	0x080041ff
 8003f90:	080041ff 	.word	0x080041ff
 8003f94:	080041ff 	.word	0x080041ff
 8003f98:	080041ff 	.word	0x080041ff
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	080041ff 	.word	0x080041ff
 8003fa4:	080041ff 	.word	0x080041ff
 8003fa8:	080041ff 	.word	0x080041ff
 8003fac:	080041ff 	.word	0x080041ff
 8003fb0:	080041ff 	.word	0x080041ff
 8003fb4:	080041ff 	.word	0x080041ff
 8003fb8:	080041ff 	.word	0x080041ff
 8003fbc:	08003ff3 	.word	0x08003ff3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc0:	4b94      	ldr	r3, [pc, #592]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fcc:	4b91      	ldr	r3, [pc, #580]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	4a90      	ldr	r2, [pc, #576]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003fde:	e111      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fe2:	61bb      	str	r3, [r7, #24]
      break;
 8003fe4:	e10e      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800421c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fe8:	61bb      	str	r3, [r7, #24]
      break;
 8003fea:	e10b      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003fec:	4b8c      	ldr	r3, [pc, #560]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fee:	61bb      	str	r3, [r7, #24]
      break;
 8003ff0:	e108      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff2:	4b88      	ldr	r3, [pc, #544]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ffc:	4b85      	ldr	r3, [pc, #532]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004006:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004008:	4b82      	ldr	r3, [pc, #520]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004012:	4b80      	ldr	r3, [pc, #512]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80e1 	beq.w	80041f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f000 8083 	beq.w	8004144 <HAL_RCC_GetSysClockFreq+0x204>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b02      	cmp	r3, #2
 8004042:	f200 80a1 	bhi.w	8004188 <HAL_RCC_GetSysClockFreq+0x248>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x114>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d056      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004052:	e099      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004054:	4b6f      	ldr	r3, [pc, #444]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02d      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004060:	4b6c      	ldr	r3, [pc, #432]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	4a6b      	ldr	r2, [pc, #428]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b62      	ldr	r3, [pc, #392]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a02 	vldr	s12, [r7, #8]
 800409e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80040ba:	e087      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004228 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ce:	4b51      	ldr	r3, [pc, #324]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040de:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040fe:	e065      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800422c <HAL_RCC_GetSysClockFreq+0x2ec>
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	4b40      	ldr	r3, [pc, #256]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004122:	ed97 6a02 	vldr	s12, [r7, #8]
 8004126:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004142:	e043      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004230 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004156:	4b2f      	ldr	r3, [pc, #188]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004166:	ed97 6a02 	vldr	s12, [r7, #8]
 800416a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004186:	e021      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800422c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419a:	4b1e      	ldr	r3, [pc, #120]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041cc:	4b11      	ldr	r3, [pc, #68]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	0a5b      	lsrs	r3, r3, #9
 80041d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d6:	3301      	adds	r3, #1
 80041d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f0:	ee17 3a90 	vmov	r3, s15
 80041f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80041f6:	e005      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
      break;
 80041fc:	e002      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80041fe:	4b07      	ldr	r3, [pc, #28]	@ (800421c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004200:	61bb      	str	r3, [r7, #24]
      break;
 8004202:	bf00      	nop
  }

  return sysclockfreq;
 8004204:	69bb      	ldr	r3, [r7, #24]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	@ 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
 8004218:	03d09000 	.word	0x03d09000
 800421c:	003d0900 	.word	0x003d0900
 8004220:	017d7840 	.word	0x017d7840
 8004224:	46000000 	.word	0x46000000
 8004228:	4c742400 	.word	0x4c742400
 800422c:	4a742400 	.word	0x4a742400
 8004230:	4bbebc20 	.word	0x4bbebc20

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800423a:	f7ff fe81 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 800423e:	4602      	mov	r2, r0
 8004240:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <HAL_RCC_GetHCLKFreq+0x50>)
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	0a1b      	lsrs	r3, r3, #8
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	490f      	ldr	r1, [pc, #60]	@ (8004288 <HAL_RCC_GetHCLKFreq+0x54>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004258:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <HAL_RCC_GetHCLKFreq+0x50>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <HAL_RCC_GetHCLKFreq+0x54>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a07      	ldr	r2, [pc, #28]	@ (800428c <HAL_RCC_GetHCLKFreq+0x58>)
 8004270:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004272:	4a07      	ldr	r2, [pc, #28]	@ (8004290 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004278:	4b04      	ldr	r3, [pc, #16]	@ (800428c <HAL_RCC_GetHCLKFreq+0x58>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	58024400 	.word	0x58024400
 8004288:	0800f3ec 	.word	0x0800f3ec
 800428c:	24000004 	.word	0x24000004
 8004290:	24000000 	.word	0x24000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004298:	f7ff ffcc 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4904      	ldr	r1, [pc, #16]	@ (80042bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	58024400 	.word	0x58024400
 80042bc:	0800f3ec 	.word	0x0800f3ec

080042c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223f      	movs	r2, #63	@ 0x3f
 80042ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042d0:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0207 	and.w	r2, r3, #7
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042dc:	4b17      	ldr	r3, [pc, #92]	@ (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042e8:	4b14      	ldr	r3, [pc, #80]	@ (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042f4:	4b11      	ldr	r3, [pc, #68]	@ (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004300:	4b0e      	ldr	r3, [pc, #56]	@ (800433c <HAL_RCC_GetClockConfig+0x7c>)
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_RCC_GetClockConfig+0x7c>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004318:	4b08      	ldr	r3, [pc, #32]	@ (800433c <HAL_RCC_GetClockConfig+0x7c>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_GetClockConfig+0x80>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	601a      	str	r2, [r3, #0]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	58024400 	.word	0x58024400
 8004340:	52002000 	.word	0x52002000

08004344 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b0ca      	sub	sp, #296	@ 0x128
 800434a:	af00      	add	r7, sp, #0
 800434c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004368:	2500      	movs	r5, #0
 800436a:	ea54 0305 	orrs.w	r3, r4, r5
 800436e:	d049      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004376:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800437a:	d02f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800437c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004380:	d828      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004386:	d01a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800438c:	d822      	bhi.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004396:	d007      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004398:	e01c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439a:	4bb8      	ldr	r3, [pc, #736]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	4ab7      	ldr	r2, [pc, #732]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043a6:	e01a      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	3308      	adds	r3, #8
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 f9d1 	bl	8005758 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	3328      	adds	r3, #40	@ 0x28
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fa78 	bl	80058bc <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80043d2:	e004      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043e6:	4ba5      	ldr	r3, [pc, #660]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f4:	4aa1      	ldr	r2, [pc, #644]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043f6:	430b      	orrs	r3, r1
 80043f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80043fa:	e003      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004410:	f04f 0900 	mov.w	r9, #0
 8004414:	ea58 0309 	orrs.w	r3, r8, r9
 8004418:	d047      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	2b04      	cmp	r3, #4
 8004422:	d82a      	bhi.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004424:	a201      	add	r2, pc, #4	@ (adr r2, 800442c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004441 	.word	0x08004441
 8004430:	0800444f 	.word	0x0800444f
 8004434:	08004465 	.word	0x08004465
 8004438:	08004483 	.word	0x08004483
 800443c:	08004483 	.word	0x08004483
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004440:	4b8e      	ldr	r3, [pc, #568]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	4a8d      	ldr	r2, [pc, #564]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800444c:	e01a      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	3308      	adds	r3, #8
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f97e 	bl	8005758 <RCCEx_PLL2_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004462:	e00f      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	3328      	adds	r3, #40	@ 0x28
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f001 fa25 	bl	80058bc <RCCEx_PLL3_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004478:	e004      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004480:	e000      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800448c:	4b7b      	ldr	r3, [pc, #492]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	f023 0107 	bic.w	r1, r3, #7
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	4a78      	ldr	r2, [pc, #480]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800449c:	430b      	orrs	r3, r1
 800449e:	6513      	str	r3, [r2, #80]	@ 0x50
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80044b6:	f04f 0b00 	mov.w	fp, #0
 80044ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80044be:	d04c      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ca:	d030      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d0:	d829      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d4:	d02d      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80044d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044d8:	d825      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044da:	2b80      	cmp	r3, #128	@ 0x80
 80044dc:	d018      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80044de:	2b80      	cmp	r3, #128	@ 0x80
 80044e0:	d821      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d007      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80044ea:	e01c      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ec:	4b63      	ldr	r3, [pc, #396]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	4a62      	ldr	r2, [pc, #392]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80044f8:	e01c      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	3308      	adds	r3, #8
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f001 f928 	bl	8005758 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800450e:	e011      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	3328      	adds	r3, #40	@ 0x28
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f001 f9cf 	bl	80058bc <RCCEx_PLL3_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800453c:	4b4f      	ldr	r3, [pc, #316]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800453e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004540:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	4a4c      	ldr	r2, [pc, #304]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800454c:	430b      	orrs	r3, r1
 800454e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004566:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800456a:	2300      	movs	r3, #0
 800456c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004570:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d053      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004582:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004586:	d035      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800458c:	d82e      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800458e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004592:	d031      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004594:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004598:	d828      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800459e:	d01a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80045a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a4:	d822      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80045aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ae:	d007      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80045b0:	e01c      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b2:	4b32      	ldr	r3, [pc, #200]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	4a31      	ldr	r2, [pc, #196]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80045b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045be:	e01c      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	3308      	adds	r3, #8
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f8c5 	bl	8005758 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045d4:	e011      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	3328      	adds	r3, #40	@ 0x28
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f96c 	bl	80058bc <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045ea:	e006      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f2:	e002      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80045f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004602:	4b1e      	ldr	r3, [pc, #120]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004614:	430b      	orrs	r3, r1
 8004616:	6593      	str	r3, [r2, #88]	@ 0x58
 8004618:	e003      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800462e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004638:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800463c:	460b      	mov	r3, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	d056      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800464a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800464e:	d038      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004654:	d831      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004656:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800465a:	d034      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800465c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004660:	d82b      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004662:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004666:	d01d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004668:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800466c:	d825      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004678:	e01f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004680:	4ba2      	ldr	r3, [pc, #648]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	4aa1      	ldr	r2, [pc, #644]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800468a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800468c:	e01c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	3308      	adds	r3, #8
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f85e 	bl	8005758 <RCCEx_PLL2_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046a2:	e011      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	3328      	adds	r3, #40	@ 0x28
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 f905 	bl	80058bc <RCCEx_PLL3_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046c0:	e002      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80046c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046d0:	4b8e      	ldr	r3, [pc, #568]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80046d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046e0:	4a8a      	ldr	r2, [pc, #552]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046e2:	430b      	orrs	r3, r1
 80046e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046e6:	e003      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80046fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004706:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800470a:	460b      	mov	r3, r1
 800470c:	4313      	orrs	r3, r2
 800470e:	d03a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004716:	2b30      	cmp	r3, #48	@ 0x30
 8004718:	d01f      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800471a:	2b30      	cmp	r3, #48	@ 0x30
 800471c:	d819      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800471e:	2b20      	cmp	r3, #32
 8004720:	d00c      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004722:	2b20      	cmp	r3, #32
 8004724:	d815      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d019      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800472a:	2b10      	cmp	r3, #16
 800472c:	d111      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472e:	4b77      	ldr	r3, [pc, #476]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4a76      	ldr	r2, [pc, #472]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800473a:	e011      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800473c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004740:	3308      	adds	r3, #8
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f001 f807 	bl	8005758 <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004758:	e002      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800475e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004768:	4b68      	ldr	r3, [pc, #416]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800476a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004776:	4a65      	ldr	r2, [pc, #404]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004778:	430b      	orrs	r3, r1
 800477a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004792:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800479c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d051      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b0:	d035      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b6:	d82e      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047bc:	d031      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80047be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047c2:	d828      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c8:	d01a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ce:	d822      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d8:	d007      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80047da:	e01c      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a4a      	ldr	r2, [pc, #296]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047e8:	e01c      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	3308      	adds	r3, #8
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 ffb0 	bl	8005758 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047fe:	e011      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f001 f857 	bl	80058bc <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481c:	e002      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800482c:	4b37      	ldr	r3, [pc, #220]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800482e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004830:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483a:	4a34      	ldr	r2, [pc, #208]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004860:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d056      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004874:	d033      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004876:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800487a:	d82c      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800487c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004880:	d02f      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004886:	d826      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800488c:	d02b      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800488e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004892:	d820      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004898:	d012      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800489a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800489e:	d81a      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d022      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80048a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a8:	d115      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	3308      	adds	r3, #8
 80048b0:	2101      	movs	r1, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ff50 	bl	8005758 <RCCEx_PLL2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048be:	e015      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c4:	3328      	adds	r3, #40	@ 0x28
 80048c6:	2101      	movs	r1, #1
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fff7 	bl	80058bc <RCCEx_PLL3_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048d4:	e00a      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048de:	bf00      	nop
 80048e0:	e004      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048e2:	bf00      	nop
 80048e4:	e002      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80048ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10d      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004902:	4a02      	ldr	r2, [pc, #8]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004904:	430b      	orrs	r3, r1
 8004906:	6513      	str	r3, [r2, #80]	@ 0x50
 8004908:	e006      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004928:	2300      	movs	r3, #0
 800492a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800492e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004932:	460b      	mov	r3, r1
 8004934:	4313      	orrs	r3, r2
 8004936:	d055      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004944:	d033      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800494a:	d82c      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d02f      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004956:	d826      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800495c:	d02b      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800495e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004962:	d820      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004968:	d012      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800496a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800496e:	d81a      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d022      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004978:	d115      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	3308      	adds	r3, #8
 8004980:	2101      	movs	r1, #1
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fee8 	bl	8005758 <RCCEx_PLL2_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800498e:	e015      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004994:	3328      	adds	r3, #40	@ 0x28
 8004996:	2101      	movs	r1, #1
 8004998:	4618      	mov	r0, r3
 800499a:	f000 ff8f 	bl	80058bc <RCCEx_PLL3_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80049a4:	e00a      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ac:	e006      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ae:	bf00      	nop
 80049b0:	e004      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80049ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049c4:	4ba3      	ldr	r3, [pc, #652]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049d4:	4a9f      	ldr	r2, [pc, #636]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049da:	e003      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80049f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80049fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d037      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0e:	d00e      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a14:	d816      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d018      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4b8c      	ldr	r3, [pc, #560]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	4a8b      	ldr	r2, [pc, #556]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a2c:	e00f      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	3308      	adds	r3, #8
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe8e 	bl	8005758 <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a42:	e004      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a56:	4b7f      	ldr	r3, [pc, #508]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a64:	4a7b      	ldr	r2, [pc, #492]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d039      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d81c      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ae1 	.word	0x08004ae1
 8004aa8:	08004ab5 	.word	0x08004ab5
 8004aac:	08004ac3 	.word	0x08004ac3
 8004ab0:	08004ae1 	.word	0x08004ae1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab4:	4b67      	ldr	r3, [pc, #412]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	4a66      	ldr	r2, [pc, #408]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ac0:	e00f      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fe44 	bl	8005758 <RCCEx_PLL2_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ad6:	e004      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ade:	e000      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004aea:	4b5a      	ldr	r3, [pc, #360]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	f023 0103 	bic.w	r1, r3, #3
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af8:	4a56      	ldr	r2, [pc, #344]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f000 809f 	beq.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b36:	f7fc ffb3 	bl	8001aa0 <HAL_GetTick>
 8004b3a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b3e:	e00b      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b40:	f7fc ffae 	bl	8001aa0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	@ 0x64
 8004b4e:	d903      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b56:	e005      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b58:	4b3f      	ldr	r3, [pc, #252]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ed      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d179      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004b78:	4053      	eors	r3, r2
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d015      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b82:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b8e:	4b31      	ldr	r3, [pc, #196]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a30      	ldr	r2, [pc, #192]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bba:	d118      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc ff70 	bl	8001aa0 <HAL_GetTick>
 8004bc0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc4:	e00d      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc ff6b 	bl	8001aa0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d903      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004be0:	e005      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0eb      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d129      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c06:	d10e      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004c08:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c18:	091a      	lsrs	r2, r3, #4
 8004c1a:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6113      	str	r3, [r2, #16]
 8004c24:	e005      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c30:	6113      	str	r3, [r2, #16]
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c42:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c48:	e00e      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58024800 	.word	0x58024800
 8004c5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f002 0301 	and.w	r3, r2, #1
 8004c74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f000 8089 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c90:	2b28      	cmp	r3, #40	@ 0x28
 8004c92:	d86b      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004c94:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004d75 	.word	0x08004d75
 8004ca0:	08004d6d 	.word	0x08004d6d
 8004ca4:	08004d6d 	.word	0x08004d6d
 8004ca8:	08004d6d 	.word	0x08004d6d
 8004cac:	08004d6d 	.word	0x08004d6d
 8004cb0:	08004d6d 	.word	0x08004d6d
 8004cb4:	08004d6d 	.word	0x08004d6d
 8004cb8:	08004d6d 	.word	0x08004d6d
 8004cbc:	08004d41 	.word	0x08004d41
 8004cc0:	08004d6d 	.word	0x08004d6d
 8004cc4:	08004d6d 	.word	0x08004d6d
 8004cc8:	08004d6d 	.word	0x08004d6d
 8004ccc:	08004d6d 	.word	0x08004d6d
 8004cd0:	08004d6d 	.word	0x08004d6d
 8004cd4:	08004d6d 	.word	0x08004d6d
 8004cd8:	08004d6d 	.word	0x08004d6d
 8004cdc:	08004d57 	.word	0x08004d57
 8004ce0:	08004d6d 	.word	0x08004d6d
 8004ce4:	08004d6d 	.word	0x08004d6d
 8004ce8:	08004d6d 	.word	0x08004d6d
 8004cec:	08004d6d 	.word	0x08004d6d
 8004cf0:	08004d6d 	.word	0x08004d6d
 8004cf4:	08004d6d 	.word	0x08004d6d
 8004cf8:	08004d6d 	.word	0x08004d6d
 8004cfc:	08004d75 	.word	0x08004d75
 8004d00:	08004d6d 	.word	0x08004d6d
 8004d04:	08004d6d 	.word	0x08004d6d
 8004d08:	08004d6d 	.word	0x08004d6d
 8004d0c:	08004d6d 	.word	0x08004d6d
 8004d10:	08004d6d 	.word	0x08004d6d
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004d75 	.word	0x08004d75
 8004d20:	08004d6d 	.word	0x08004d6d
 8004d24:	08004d6d 	.word	0x08004d6d
 8004d28:	08004d6d 	.word	0x08004d6d
 8004d2c:	08004d6d 	.word	0x08004d6d
 8004d30:	08004d6d 	.word	0x08004d6d
 8004d34:	08004d6d 	.word	0x08004d6d
 8004d38:	08004d6d 	.word	0x08004d6d
 8004d3c:	08004d75 	.word	0x08004d75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	3308      	adds	r3, #8
 8004d46:	2101      	movs	r1, #1
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fd05 	bl	8005758 <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d54:	e00f      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	3328      	adds	r3, #40	@ 0x28
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fdac 	bl	80058bc <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d7e:	4bbf      	ldr	r3, [pc, #764]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d8c:	4abb      	ldr	r2, [pc, #748]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0302 	and.w	r3, r2, #2
 8004da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004db2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d041      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d824      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004de5 	.word	0x08004de5
 8004dd4:	08004dfb 	.word	0x08004dfb
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	3308      	adds	r3, #8
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fcb3 	bl	8005758 <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004df8:	e00f      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fd5a 	bl	80058bc <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e0e:	e004      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e22:	4b96      	ldr	r3, [pc, #600]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	f023 0107 	bic.w	r1, r3, #7
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e30:	4a92      	ldr	r2, [pc, #584]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004e32:	430b      	orrs	r3, r1
 8004e34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f002 0304 	and.w	r3, r2, #4
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d044      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d825      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004e8d 	.word	0x08004e8d
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec1 	.word	0x08004ec1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	3308      	adds	r3, #8
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fc5f 	bl	8005758 <RCCEx_PLL2_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	3328      	adds	r3, #40	@ 0x28
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fd06 	bl	80058bc <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eca:	4b6c      	ldr	r3, [pc, #432]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	f023 0107 	bic.w	r1, r3, #7
 8004ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eda:	4a68      	ldr	r2, [pc, #416]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f002 0320 	and.w	r3, r2, #32
 8004ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d055      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f16:	d033      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1c:	d82c      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f22:	d02f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d826      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f2e:	d02b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004f30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f34:	d820      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3a:	d012      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f40:	d81a      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d022      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4a:	d115      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	3308      	adds	r3, #8
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fbff 	bl	8005758 <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f60:	e015      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f66:	3328      	adds	r3, #40	@ 0x28
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fca6 	bl	80058bc <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f76:	e00a      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f7e:	e006      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f80:	bf00      	nop
 8004f82:	e004      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f84:	bf00      	nop
 8004f86:	e002      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f96:	4b39      	ldr	r3, [pc, #228]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	4a35      	ldr	r2, [pc, #212]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	d058      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fe2:	d033      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004fe4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fe8:	d82c      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	d02f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff4:	d826      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ffa:	d02b      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004ffc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005000:	d820      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005006:	d012      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500c:	d81a      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d022      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005016:	d115      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	3308      	adds	r3, #8
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fb99 	bl	8005758 <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800502c:	e015      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005032:	3328      	adds	r3, #40	@ 0x28
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fc40 	bl	80058bc <RCCEx_PLL3_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005042:	e00a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800504a:	e006      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800504c:	bf00      	nop
 800504e:	e004      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005050:	bf00      	nop
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10e      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005066:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005072:	4a02      	ldr	r2, [pc, #8]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005074:	430b      	orrs	r3, r1
 8005076:	6593      	str	r3, [r2, #88]	@ 0x58
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800509e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050a2:	460b      	mov	r3, r1
 80050a4:	4313      	orrs	r3, r2
 80050a6:	d055      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050b4:	d033      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80050b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050ba:	d82c      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c0:	d02f      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c6:	d826      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050cc:	d02b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80050ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050d2:	d820      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d8:	d012      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80050da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050de:	d81a      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d022      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80050e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e8:	d115      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ee:	3308      	adds	r3, #8
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fb30 	bl	8005758 <RCCEx_PLL2_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050fe:	e015      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005104:	3328      	adds	r3, #40	@ 0x28
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fbd7 	bl	80058bc <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005114:	e00a      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800512a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005134:	4ba1      	ldr	r3, [pc, #644]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005138:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005144:	4a9d      	ldr	r2, [pc, #628]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6593      	str	r3, [r2, #88]	@ 0x58
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 0308 	and.w	r3, r2, #8
 8005160:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800516a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d01e      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d10c      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	3328      	adds	r3, #40	@ 0x28
 8005188:	2102      	movs	r1, #2
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fb96 	bl	80058bc <RCCEx_PLL3_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800519c:	4b87      	ldr	r3, [pc, #540]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800519e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ac:	4a83      	ldr	r2, [pc, #524]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051ae:	430b      	orrs	r3, r1
 80051b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f002 0310 	and.w	r3, r2, #16
 80051be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051cc:	460b      	mov	r3, r1
 80051ce:	4313      	orrs	r3, r2
 80051d0:	d01e      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80051d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051de:	d10c      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	3328      	adds	r3, #40	@ 0x28
 80051e6:	2102      	movs	r1, #2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fb67 	bl	80058bc <RCCEx_PLL3_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051fa:	4b70      	ldr	r3, [pc, #448]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800520a:	4a6c      	ldr	r2, [pc, #432]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800520c:	430b      	orrs	r3, r1
 800520e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800521c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005226:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800522a:	460b      	mov	r3, r1
 800522c:	4313      	orrs	r3, r2
 800522e:	d03e      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800523c:	d022      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800523e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005242:	d81b      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524c:	d00b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800524e:	e015      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	3308      	adds	r3, #8
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fa7d 	bl	8005758 <RCCEx_PLL2_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005264:	e00f      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526a:	3328      	adds	r3, #40	@ 0x28
 800526c:	2102      	movs	r1, #2
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fb24 	bl	80058bc <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800527a:	e004      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005282:	e000      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800528e:	4b4b      	ldr	r3, [pc, #300]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800529e:	4a47      	ldr	r2, [pc, #284]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052bc:	2300      	movs	r3, #0
 80052be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d03b      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052d6:	d01f      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80052d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052dc:	d818      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e2:	d003      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80052e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052e8:	d007      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80052ea:	e011      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ec:	4b33      	ldr	r3, [pc, #204]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	4a32      	ldr	r2, [pc, #200]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80052f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80052f8:	e00f      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	3328      	adds	r3, #40	@ 0x28
 8005300:	2101      	movs	r1, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fada 	bl	80058bc <RCCEx_PLL3_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005322:	4b26      	ldr	r3, [pc, #152]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005326:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005332:	4a22      	ldr	r2, [pc, #136]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6553      	str	r3, [r2, #84]	@ 0x54
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800533e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800534e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005350:	2300      	movs	r3, #0
 8005352:	677b      	str	r3, [r7, #116]	@ 0x74
 8005354:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005358:	460b      	mov	r3, r1
 800535a:	4313      	orrs	r3, r2
 800535c:	d034      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d007      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800536e:	e011      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005370:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	4a11      	ldr	r2, [pc, #68]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800537c:	e00e      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	3308      	adds	r3, #8
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f9e6 	bl	8005758 <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005392:	e003      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800539a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053a4:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b2:	4a02      	ldr	r2, [pc, #8]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80053ba:	bf00      	nop
 80053bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053d6:	2300      	movs	r3, #0
 80053d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d00c      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e8:	3328      	adds	r3, #40	@ 0x28
 80053ea:	2102      	movs	r1, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fa65 	bl	80058bc <RCCEx_PLL3_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800540a:	663b      	str	r3, [r7, #96]	@ 0x60
 800540c:	2300      	movs	r3, #0
 800540e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005410:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005414:	460b      	mov	r3, r1
 8005416:	4313      	orrs	r3, r2
 8005418:	d038      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005426:	d018      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800542c:	d811      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800542e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005432:	d014      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005438:	d80b      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d011      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800543e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005442:	d106      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005444:	4bc3      	ldr	r3, [pc, #780]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	4ac2      	ldr	r2, [pc, #776]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800544a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800544e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005450:	e008      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005458:	e004      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800546c:	4bb9      	ldr	r3, [pc, #740]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800547c:	4ab5      	ldr	r2, [pc, #724]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800547e:	430b      	orrs	r3, r1
 8005480:	6553      	str	r3, [r2, #84]	@ 0x54
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005498:	65bb      	str	r3, [r7, #88]	@ 0x58
 800549a:	2300      	movs	r3, #0
 800549c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800549e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054a8:	4baa      	ldr	r3, [pc, #680]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b6:	4aa7      	ldr	r2, [pc, #668]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80054c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ca:	2300      	movs	r3, #0
 80054cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054d2:	460b      	mov	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054d8:	4b9e      	ldr	r3, [pc, #632]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054e8:	4a9a      	ldr	r2, [pc, #616]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80054ea:	430b      	orrs	r3, r1
 80054ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054fc:	2300      	movs	r3, #0
 80054fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005500:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800550a:	4b92      	ldr	r3, [pc, #584]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800550c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	4a8e      	ldr	r2, [pc, #568]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800551a:	430b      	orrs	r3, r1
 800551c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800552a:	643b      	str	r3, [r7, #64]	@ 0x40
 800552c:	2300      	movs	r3, #0
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005530:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005534:	460b      	mov	r3, r1
 8005536:	4313      	orrs	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800553a:	4b86      	ldr	r3, [pc, #536]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4a85      	ldr	r2, [pc, #532]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005540:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005544:	6113      	str	r3, [r2, #16]
 8005546:	4b83      	ldr	r3, [pc, #524]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005548:	6919      	ldr	r1, [r3, #16]
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005552:	4a80      	ldr	r2, [pc, #512]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005554:	430b      	orrs	r3, r1
 8005556:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005566:	2300      	movs	r3, #0
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005574:	4b77      	ldr	r3, [pc, #476]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005578:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	4a74      	ldr	r2, [pc, #464]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005584:	430b      	orrs	r3, r1
 8005586:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005594:	633b      	str	r3, [r7, #48]	@ 0x30
 8005596:	2300      	movs	r3, #0
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
 800559a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b4:	4a67      	ldr	r2, [pc, #412]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	2100      	movs	r1, #0
 80055c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055d0:	460b      	mov	r3, r1
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d011      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	3308      	adds	r3, #8
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f8ba 	bl	8005758 <RCCEx_PLL2_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80055ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	2100      	movs	r1, #0
 8005604:	6239      	str	r1, [r7, #32]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
 800560c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561a:	3308      	adds	r3, #8
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f89a 	bl	8005758 <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800562a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	2100      	movs	r1, #0
 8005644:	61b9      	str	r1, [r7, #24]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d011      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3308      	adds	r3, #8
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f87a 	bl	8005758 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800566a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	2100      	movs	r1, #0
 8005684:	6139      	str	r1, [r7, #16]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d011      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	3328      	adds	r3, #40	@ 0x28
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f90c 	bl	80058bc <RCCEx_PLL3_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80056aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	2100      	movs	r1, #0
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d011      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	3328      	adds	r3, #40	@ 0x28
 80056dc:	2101      	movs	r1, #1
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f8ec 	bl	80058bc <RCCEx_PLL3_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80056ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	2100      	movs	r1, #0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d011      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	3328      	adds	r3, #40	@ 0x28
 800571c:	2102      	movs	r1, #2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f8cc 	bl	80058bc <RCCEx_PLL3_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800573a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
}
 8005748:	4618      	mov	r0, r3
 800574a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800574e:	46bd      	mov	sp, r7
 8005750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005754:	58024400 	.word	0x58024400

08005758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005766:	4b53      	ldr	r3, [pc, #332]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576a:	f003 0303 	and.w	r3, r3, #3
 800576e:	2b03      	cmp	r3, #3
 8005770:	d101      	bne.n	8005776 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e099      	b.n	80058aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005776:	4b4f      	ldr	r3, [pc, #316]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a4e      	ldr	r2, [pc, #312]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800577c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005782:	f7fc f98d 	bl	8001aa0 <HAL_GetTick>
 8005786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005788:	e008      	b.n	800579c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800578a:	f7fc f989 	bl	8001aa0 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e086      	b.n	80058aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800579c:	4b45      	ldr	r3, [pc, #276]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f0      	bne.n	800578a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80057a8:	4b42      	ldr	r3, [pc, #264]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 80057aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	031b      	lsls	r3, r3, #12
 80057b6:	493f      	ldr	r1, [pc, #252]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	025b      	lsls	r3, r3, #9
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	061b      	lsls	r3, r3, #24
 80057e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80057ec:	4931      	ldr	r1, [pc, #196]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80057f2:	4b30      	ldr	r3, [pc, #192]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	492d      	ldr	r1, [pc, #180]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005800:	4313      	orrs	r3, r2
 8005802:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005804:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	f023 0220 	bic.w	r2, r3, #32
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	4928      	ldr	r1, [pc, #160]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005812:	4313      	orrs	r3, r2
 8005814:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005816:	4b27      	ldr	r3, [pc, #156]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	4a26      	ldr	r2, [pc, #152]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800581c:	f023 0310 	bic.w	r3, r3, #16
 8005820:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005822:	4b24      	ldr	r3, [pc, #144]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005826:	4b24      	ldr	r3, [pc, #144]	@ (80058b8 <RCCEx_PLL2_Config+0x160>)
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	69d2      	ldr	r2, [r2, #28]
 800582e:	00d2      	lsls	r2, r2, #3
 8005830:	4920      	ldr	r1, [pc, #128]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005836:	4b1f      	ldr	r3, [pc, #124]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583a:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800583c:	f043 0310 	orr.w	r3, r3, #16
 8005840:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005848:	4b1a      	ldr	r3, [pc, #104]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800584a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584c:	4a19      	ldr	r2, [pc, #100]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800584e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005852:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005854:	e00f      	b.n	8005876 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d106      	bne.n	800586a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800585c:	4b15      	ldr	r3, [pc, #84]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	4a14      	ldr	r2, [pc, #80]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005866:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005868:	e005      	b.n	8005876 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800586a:	4b12      	ldr	r3, [pc, #72]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800586c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586e:	4a11      	ldr	r2, [pc, #68]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005874:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005876:	4b0f      	ldr	r3, [pc, #60]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a0e      	ldr	r2, [pc, #56]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800587c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005882:	f7fc f90d 	bl	8001aa0 <HAL_GetTick>
 8005886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005888:	e008      	b.n	800589c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800588a:	f7fc f909 	bl	8001aa0 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e006      	b.n	80058aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800589c:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <RCCEx_PLL2_Config+0x15c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	58024400 	.word	0x58024400
 80058b8:	ffff0007 	.word	0xffff0007

080058bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058ca:	4b53      	ldr	r3, [pc, #332]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d101      	bne.n	80058da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e099      	b.n	8005a0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80058da:	4b4f      	ldr	r3, [pc, #316]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a4e      	ldr	r2, [pc, #312]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e6:	f7fc f8db 	bl	8001aa0 <HAL_GetTick>
 80058ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058ec:	e008      	b.n	8005900 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80058ee:	f7fc f8d7 	bl	8001aa0 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e086      	b.n	8005a0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005900:	4b45      	ldr	r3, [pc, #276]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f0      	bne.n	80058ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800590c:	4b42      	ldr	r3, [pc, #264]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005910:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	051b      	lsls	r3, r3, #20
 800591a:	493f      	ldr	r1, [pc, #252]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 800591c:	4313      	orrs	r3, r2
 800591e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	3b01      	subs	r3, #1
 8005926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	3b01      	subs	r3, #1
 8005930:	025b      	lsls	r3, r3, #9
 8005932:	b29b      	uxth	r3, r3
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	041b      	lsls	r3, r3, #16
 800593e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	3b01      	subs	r3, #1
 800594a:	061b      	lsls	r3, r3, #24
 800594c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005950:	4931      	ldr	r1, [pc, #196]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005956:	4b30      	ldr	r3, [pc, #192]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	492d      	ldr	r1, [pc, #180]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005964:	4313      	orrs	r3, r2
 8005966:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005968:	4b2b      	ldr	r3, [pc, #172]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	4928      	ldr	r1, [pc, #160]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005976:	4313      	orrs	r3, r2
 8005978:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800597a:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005986:	4b24      	ldr	r3, [pc, #144]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800598a:	4b24      	ldr	r3, [pc, #144]	@ (8005a1c <RCCEx_PLL3_Config+0x160>)
 800598c:	4013      	ands	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	69d2      	ldr	r2, [r2, #28]
 8005992:	00d2      	lsls	r2, r2, #3
 8005994:	4920      	ldr	r1, [pc, #128]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800599a:	4b1f      	ldr	r3, [pc, #124]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80059ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	4a19      	ldr	r2, [pc, #100]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80059b8:	e00f      	b.n	80059da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d106      	bne.n	80059ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80059c0:	4b15      	ldr	r3, [pc, #84]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c4:	4a14      	ldr	r2, [pc, #80]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80059cc:	e005      	b.n	80059da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80059ce:	4b12      	ldr	r3, [pc, #72]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	4a11      	ldr	r2, [pc, #68]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80059da:	4b0f      	ldr	r3, [pc, #60]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a0e      	ldr	r2, [pc, #56]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 80059e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e6:	f7fc f85b 	bl	8001aa0 <HAL_GetTick>
 80059ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059ec:	e008      	b.n	8005a00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059ee:	f7fc f857 	bl	8001aa0 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e006      	b.n	8005a0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a00:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <RCCEx_PLL3_Config+0x15c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	58024400 	.word	0x58024400
 8005a1c:	ffff0007 	.word	0xffff0007

08005a20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e10f      	b.n	8005c52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a87      	ldr	r2, [pc, #540]	@ (8005c5c <HAL_SPI_Init+0x23c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <HAL_SPI_Init+0x42>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a86      	ldr	r2, [pc, #536]	@ (8005c60 <HAL_SPI_Init+0x240>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00a      	beq.n	8005a62 <HAL_SPI_Init+0x42>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a84      	ldr	r2, [pc, #528]	@ (8005c64 <HAL_SPI_Init+0x244>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d005      	beq.n	8005a62 <HAL_SPI_Init+0x42>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	d901      	bls.n	8005a62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0f7      	b.n	8005c52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fe2e 	bl	80066c4 <SPI_GetPacketSize>
 8005a68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a7b      	ldr	r2, [pc, #492]	@ (8005c5c <HAL_SPI_Init+0x23c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00c      	beq.n	8005a8e <HAL_SPI_Init+0x6e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a79      	ldr	r2, [pc, #484]	@ (8005c60 <HAL_SPI_Init+0x240>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <HAL_SPI_Init+0x6e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a78      	ldr	r2, [pc, #480]	@ (8005c64 <HAL_SPI_Init+0x244>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_Init+0x6e>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d811      	bhi.n	8005ab2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a92:	4a72      	ldr	r2, [pc, #456]	@ (8005c5c <HAL_SPI_Init+0x23c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a70      	ldr	r2, [pc, #448]	@ (8005c60 <HAL_SPI_Init+0x240>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_SPI_Init+0x8c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8005c64 <HAL_SPI_Init+0x244>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d104      	bne.n	8005ab6 <HAL_SPI_Init+0x96>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b10      	cmp	r3, #16
 8005ab0:	d901      	bls.n	8005ab6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e0cd      	b.n	8005c52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb fb04 	bl	80010d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005af2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005afc:	d119      	bne.n	8005b32 <HAL_SPI_Init+0x112>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b06:	d103      	bne.n	8005b10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10c      	bne.n	8005b32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b20:	d107      	bne.n	8005b32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00f      	beq.n	8005b5e <HAL_SPI_Init+0x13e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d90b      	bls.n	8005b5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e007      	b.n	8005b6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	431a      	orrs	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	ea42 0103 	orr.w	r1, r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	ea42 0103 	orr.w	r1, r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d113      	bne.n	8005c0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bf8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40013000 	.word	0x40013000
 8005c60:	40003800 	.word	0x40003800
 8005c64:	40003c00 	.word	0x40003c00

08005c68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3320      	adds	r3, #32
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c80:	f7fb ff0e 	bl	8001aa0 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
 8005c94:	e1d1      	b.n	800603a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Transmit+0x3a>
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e1c9      	b.n	800603a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_SPI_Transmit+0x4c>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e1c2      	b.n	800603a <HAL_SPI_Transmit+0x3d2>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	88fa      	ldrh	r2, [r7, #6]
 8005cd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005d0c:	d108      	bne.n	8005d20 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e009      	b.n	8005d34 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005d32:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	4b96      	ldr	r3, [pc, #600]	@ (8005f94 <HAL_SPI_Transmit+0x32c>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	88f9      	ldrh	r1, [r7, #6]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d60:	d107      	bne.n	8005d72 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d947      	bls.n	8005e0a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005d7a:	e03f      	b.n	8005dfc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d114      	bne.n	8005db4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005db2:	e023      	b.n	8005dfc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db4:	f7fb fe74 	bl	8001aa0 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d803      	bhi.n	8005dcc <HAL_SPI_Transmit+0x164>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Transmit+0x16a>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d114      	bne.n	8005dfc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fba8 	bl	8006528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e11e      	b.n	800603a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1b9      	bne.n	8005d7c <HAL_SPI_Transmit+0x114>
 8005e08:	e0f1      	b.n	8005fee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b07      	cmp	r3, #7
 8005e10:	f240 80e6 	bls.w	8005fe0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005e14:	e05d      	b.n	8005ed2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d132      	bne.n	8005e8a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d918      	bls.n	8005e62 <HAL_SPI_Transmit+0x1fa>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d014      	beq.n	8005e62 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	1d1a      	adds	r2, r3, #4
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b02      	subs	r3, #2
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e60:	e037      	b.n	8005ed2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e66:	881a      	ldrh	r2, [r3, #0]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e88:	e023      	b.n	8005ed2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8a:	f7fb fe09 	bl	8001aa0 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d803      	bhi.n	8005ea2 <HAL_SPI_Transmit+0x23a>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_Transmit+0x240>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d114      	bne.n	8005ed2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 fb3d 	bl	8006528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e0b3      	b.n	800603a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d19b      	bne.n	8005e16 <HAL_SPI_Transmit+0x1ae>
 8005ede:	e086      	b.n	8005fee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d154      	bne.n	8005f98 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d918      	bls.n	8005f2c <HAL_SPI_Transmit+0x2c4>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d914      	bls.n	8005f2c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f12:	1d1a      	adds	r2, r3, #4
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b04      	subs	r3, #4
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005f2a:	e059      	b.n	8005fe0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d917      	bls.n	8005f68 <HAL_SPI_Transmit+0x300>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d013      	beq.n	8005f68 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f44:	881a      	ldrh	r2, [r3, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4e:	1c9a      	adds	r2, r3, #2
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b02      	subs	r3, #2
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005f66:	e03b      	b.n	8005fe0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3320      	adds	r3, #32
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005f92:	e025      	b.n	8005fe0 <HAL_SPI_Transmit+0x378>
 8005f94:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f98:	f7fb fd82 	bl	8001aa0 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d803      	bhi.n	8005fb0 <HAL_SPI_Transmit+0x348>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d102      	bne.n	8005fb6 <HAL_SPI_Transmit+0x34e>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d114      	bne.n	8005fe0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fab6 	bl	8006528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e02c      	b.n	800603a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f47f af79 	bne.w	8005ee0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2108      	movs	r1, #8
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fb35 	bl	8006668 <SPI_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fa87 	bl	8006528 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006038:	2300      	movs	r3, #0
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop

08006044 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	b29b      	uxth	r3, r3
 800605c:	3301      	adds	r3, #1
 800605e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3330      	adds	r3, #48	@ 0x30
 8006066:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006068:	f7fb fd1a 	bl	8001aa0 <HAL_GetTick>
 800606c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d001      	beq.n	800607e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800607a:	2302      	movs	r3, #2
 800607c:	e250      	b.n	8006520 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_SPI_Receive+0x46>
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e248      	b.n	8006520 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_SPI_Receive+0x58>
 8006098:	2302      	movs	r3, #2
 800609a:	e241      	b.n	8006520 <HAL_SPI_Receive+0x4dc>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2204      	movs	r2, #4
 80060a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	88fa      	ldrh	r2, [r7, #6]
 80060c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80060f4:	d108      	bne.n	8006108 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	e009      	b.n	800611c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800611a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	4b95      	ldr	r3, [pc, #596]	@ (8006378 <HAL_SPI_Receive+0x334>)
 8006124:	4013      	ands	r3, r2
 8006126:	88f9      	ldrh	r1, [r7, #6]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	430b      	orrs	r3, r1
 800612e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006148:	d107      	bne.n	800615a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d96c      	bls.n	800623c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006162:	e064      	b.n	800622e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b01      	cmp	r3, #1
 8006178:	d114      	bne.n	80061a4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006182:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006184:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800618a:	1d1a      	adds	r2, r3, #4
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061a2:	e044      	b.n	800622e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8bfa      	ldrh	r2, [r7, #30]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d919      	bls.n	80061e6 <HAL_SPI_Receive+0x1a2>
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d014      	beq.n	80061e6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061c6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061cc:	1d1a      	adds	r2, r3, #4
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061e4:	e023      	b.n	800622e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e6:	f7fb fc5b 	bl	8001aa0 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d803      	bhi.n	80061fe <HAL_SPI_Receive+0x1ba>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d102      	bne.n	8006204 <HAL_SPI_Receive+0x1c0>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d114      	bne.n	800622e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f98f 	bl	8006528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006210:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e178      	b.n	8006520 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d194      	bne.n	8006164 <HAL_SPI_Receive+0x120>
 800623a:	e15e      	b.n	80064fa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	2b07      	cmp	r3, #7
 8006242:	f240 8153 	bls.w	80064ec <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006246:	e08f      	b.n	8006368 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d114      	bne.n	8006288 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	8812      	ldrh	r2, [r2, #0]
 8006266:	b292      	uxth	r2, r2
 8006268:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006286:	e06f      	b.n	8006368 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800628e:	b29b      	uxth	r3, r3
 8006290:	8bfa      	ldrh	r2, [r7, #30]
 8006292:	429a      	cmp	r2, r3
 8006294:	d924      	bls.n	80062e0 <HAL_SPI_Receive+0x29c>
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01f      	beq.n	80062e0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	8812      	ldrh	r2, [r2, #0]
 80062a8:	b292      	uxth	r2, r2
 80062aa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b0:	1c9a      	adds	r2, r3, #2
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	8812      	ldrh	r2, [r2, #0]
 80062be:	b292      	uxth	r2, r2
 80062c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062c6:	1c9a      	adds	r2, r3, #2
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b02      	subs	r3, #2
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80062de:	e043      	b.n	8006368 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d119      	bne.n	8006320 <HAL_SPI_Receive+0x2dc>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d014      	beq.n	8006320 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	8812      	ldrh	r2, [r2, #0]
 80062fe:	b292      	uxth	r2, r2
 8006300:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006306:	1c9a      	adds	r2, r3, #2
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800631e:	e023      	b.n	8006368 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006320:	f7fb fbbe 	bl	8001aa0 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d803      	bhi.n	8006338 <HAL_SPI_Receive+0x2f4>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d102      	bne.n	800633e <HAL_SPI_Receive+0x2fa>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d114      	bne.n	8006368 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f8f2 	bl	8006528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800634a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e0db      	b.n	8006520 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	f47f af69 	bne.w	8006248 <HAL_SPI_Receive+0x204>
 8006376:	e0c0      	b.n	80064fa <HAL_SPI_Receive+0x4b6>
 8006378:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b01      	cmp	r3, #1
 8006390:	d117      	bne.n	80063c2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80063c0:	e094      	b.n	80064ec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	8bfa      	ldrh	r2, [r7, #30]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d946      	bls.n	800645e <HAL_SPI_Receive+0x41a>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d041      	beq.n	800645e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800643a:	7812      	ldrb	r2, [r2, #0]
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b04      	subs	r3, #4
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800645c:	e046      	b.n	80064ec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d81c      	bhi.n	80064a4 <HAL_SPI_Receive+0x460>
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064a2:	e023      	b.n	80064ec <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a4:	f7fb fafc 	bl	8001aa0 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d803      	bhi.n	80064bc <HAL_SPI_Receive+0x478>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d102      	bne.n	80064c2 <HAL_SPI_Receive+0x47e>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d114      	bne.n	80064ec <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f830 	bl	8006528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e019      	b.n	8006520 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f47f af41 	bne.w	800637c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f814 	bl	8006528 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800651e:	2300      	movs	r3, #0
  }
}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0208 	orr.w	r2, r2, #8
 8006546:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0210 	orr.w	r2, r2, #16
 8006556:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6919      	ldr	r1, [r3, #16]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4b3c      	ldr	r3, [pc, #240]	@ (8006664 <SPI_CloseTransfer+0x13c>)
 8006574:	400b      	ands	r3, r1
 8006576:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006586:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b04      	cmp	r3, #4
 8006592:	d014      	beq.n	80065be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00f      	beq.n	80065be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699a      	ldr	r2, [r3, #24]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0220 	orr.w	r2, r2, #32
 80065bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d014      	beq.n	80065f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00f      	beq.n	80065f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065da:	f043 0204 	orr.w	r2, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00f      	beq.n	800661e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800661c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00f      	beq.n	8006648 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800662e:	f043 0208 	orr.w	r2, r3, #8
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006646:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	fffffc90 	.word	0xfffffc90

08006668 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006678:	e010      	b.n	800669c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667a:	f7fb fa11 	bl	8001aa0 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d803      	bhi.n	8006692 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d102      	bne.n	8006698 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e00f      	b.n	80066bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d0df      	beq.n	800667a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	3307      	adds	r3, #7
 80066e2:	08db      	lsrs	r3, r3, #3
 80066e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e049      	b.n	80067a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fb f8a9 	bl	8001878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3304      	adds	r3, #4
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 fd59 	bl	80071f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d001      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e054      	b.n	800686a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a26      	ldr	r2, [pc, #152]	@ (8006878 <HAL_TIM_Base_Start_IT+0xd0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d022      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x80>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ea:	d01d      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a22      	ldr	r2, [pc, #136]	@ (800687c <HAL_TIM_Base_Start_IT+0xd4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d018      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x80>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a21      	ldr	r2, [pc, #132]	@ (8006880 <HAL_TIM_Base_Start_IT+0xd8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d013      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x80>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1f      	ldr	r2, [pc, #124]	@ (8006884 <HAL_TIM_Base_Start_IT+0xdc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00e      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x80>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1e      	ldr	r2, [pc, #120]	@ (8006888 <HAL_TIM_Base_Start_IT+0xe0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x80>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1c      	ldr	r2, [pc, #112]	@ (800688c <HAL_TIM_Base_Start_IT+0xe4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x80>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1b      	ldr	r2, [pc, #108]	@ (8006890 <HAL_TIM_Base_Start_IT+0xe8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d115      	bne.n	8006854 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	4b19      	ldr	r3, [pc, #100]	@ (8006894 <HAL_TIM_Base_Start_IT+0xec>)
 8006830:	4013      	ands	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b06      	cmp	r3, #6
 8006838:	d015      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0xbe>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006840:	d011      	beq.n	8006866 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0201 	orr.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006852:	e008      	b.n	8006866 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e000      	b.n	8006868 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000
 800687c:	40000400 	.word	0x40000400
 8006880:	40000800 	.word	0x40000800
 8006884:	40000c00 	.word	0x40000c00
 8006888:	40010400 	.word	0x40010400
 800688c:	40001800 	.word	0x40001800
 8006890:	40014000 	.word	0x40014000
 8006894:	00010007 	.word	0x00010007

08006898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e049      	b.n	800693e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f841 	bl	8006946 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 fc8a 	bl	80071f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d109      	bne.n	8006980 <HAL_TIM_PWM_Start+0x24>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	bf14      	ite	ne
 8006978:	2301      	movne	r3, #1
 800697a:	2300      	moveq	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	e03c      	b.n	80069fa <HAL_TIM_PWM_Start+0x9e>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b04      	cmp	r3, #4
 8006984:	d109      	bne.n	800699a <HAL_TIM_PWM_Start+0x3e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b01      	cmp	r3, #1
 8006990:	bf14      	ite	ne
 8006992:	2301      	movne	r3, #1
 8006994:	2300      	moveq	r3, #0
 8006996:	b2db      	uxtb	r3, r3
 8006998:	e02f      	b.n	80069fa <HAL_TIM_PWM_Start+0x9e>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d109      	bne.n	80069b4 <HAL_TIM_PWM_Start+0x58>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	bf14      	ite	ne
 80069ac:	2301      	movne	r3, #1
 80069ae:	2300      	moveq	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	e022      	b.n	80069fa <HAL_TIM_PWM_Start+0x9e>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b0c      	cmp	r3, #12
 80069b8:	d109      	bne.n	80069ce <HAL_TIM_PWM_Start+0x72>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	bf14      	ite	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	2300      	moveq	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	e015      	b.n	80069fa <HAL_TIM_PWM_Start+0x9e>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d109      	bne.n	80069e8 <HAL_TIM_PWM_Start+0x8c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	bf14      	ite	ne
 80069e0:	2301      	movne	r3, #1
 80069e2:	2300      	moveq	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	e008      	b.n	80069fa <HAL_TIM_PWM_Start+0x9e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e0a1      	b.n	8006b46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start+0xb6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a10:	e023      	b.n	8006a5a <HAL_TIM_PWM_Start+0xfe>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d104      	bne.n	8006a22 <HAL_TIM_PWM_Start+0xc6>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a20:	e01b      	b.n	8006a5a <HAL_TIM_PWM_Start+0xfe>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d104      	bne.n	8006a32 <HAL_TIM_PWM_Start+0xd6>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a30:	e013      	b.n	8006a5a <HAL_TIM_PWM_Start+0xfe>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	d104      	bne.n	8006a42 <HAL_TIM_PWM_Start+0xe6>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a40:	e00b      	b.n	8006a5a <HAL_TIM_PWM_Start+0xfe>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d104      	bne.n	8006a52 <HAL_TIM_PWM_Start+0xf6>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a50:	e003      	b.n	8006a5a <HAL_TIM_PWM_Start+0xfe>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 ffde 	bl	8007a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a38      	ldr	r2, [pc, #224]	@ (8006b50 <HAL_TIM_PWM_Start+0x1f4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <HAL_TIM_PWM_Start+0x13e>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a37      	ldr	r2, [pc, #220]	@ (8006b54 <HAL_TIM_PWM_Start+0x1f8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00e      	beq.n	8006a9a <HAL_TIM_PWM_Start+0x13e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a35      	ldr	r2, [pc, #212]	@ (8006b58 <HAL_TIM_PWM_Start+0x1fc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d009      	beq.n	8006a9a <HAL_TIM_PWM_Start+0x13e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a34      	ldr	r2, [pc, #208]	@ (8006b5c <HAL_TIM_PWM_Start+0x200>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <HAL_TIM_PWM_Start+0x13e>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a32      	ldr	r2, [pc, #200]	@ (8006b60 <HAL_TIM_PWM_Start+0x204>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_PWM_Start+0x142>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <HAL_TIM_PWM_Start+0x144>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a25      	ldr	r2, [pc, #148]	@ (8006b50 <HAL_TIM_PWM_Start+0x1f4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d022      	beq.n	8006b04 <HAL_TIM_PWM_Start+0x1a8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac6:	d01d      	beq.n	8006b04 <HAL_TIM_PWM_Start+0x1a8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a25      	ldr	r2, [pc, #148]	@ (8006b64 <HAL_TIM_PWM_Start+0x208>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d018      	beq.n	8006b04 <HAL_TIM_PWM_Start+0x1a8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a24      	ldr	r2, [pc, #144]	@ (8006b68 <HAL_TIM_PWM_Start+0x20c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d013      	beq.n	8006b04 <HAL_TIM_PWM_Start+0x1a8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a22      	ldr	r2, [pc, #136]	@ (8006b6c <HAL_TIM_PWM_Start+0x210>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00e      	beq.n	8006b04 <HAL_TIM_PWM_Start+0x1a8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1a      	ldr	r2, [pc, #104]	@ (8006b54 <HAL_TIM_PWM_Start+0x1f8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_TIM_PWM_Start+0x1a8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a1e      	ldr	r2, [pc, #120]	@ (8006b70 <HAL_TIM_PWM_Start+0x214>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_TIM_PWM_Start+0x1a8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a16      	ldr	r2, [pc, #88]	@ (8006b58 <HAL_TIM_PWM_Start+0x1fc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d115      	bne.n	8006b30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006b74 <HAL_TIM_PWM_Start+0x218>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b06      	cmp	r3, #6
 8006b14:	d015      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x1e6>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1c:	d011      	beq.n	8006b42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0201 	orr.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2e:	e008      	b.n	8006b42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e000      	b.n	8006b44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40010400 	.word	0x40010400
 8006b58:	40014000 	.word	0x40014000
 8006b5c:	40014400 	.word	0x40014400
 8006b60:	40014800 	.word	0x40014800
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40001800 	.word	0x40001800
 8006b74:	00010007 	.word	0x00010007

08006b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d020      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01b      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0202 	mvn.w	r2, #2
 8006bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 faf6 	bl	80071b4 <HAL_TIM_IC_CaptureCallback>
 8006bc8:	e005      	b.n	8006bd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fae8 	bl	80071a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 faf9 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d020      	beq.n	8006c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0204 	mvn.w	r2, #4
 8006bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fad0 	bl	80071b4 <HAL_TIM_IC_CaptureCallback>
 8006c14:	e005      	b.n	8006c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fac2 	bl	80071a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fad3 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d020      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01b      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0208 	mvn.w	r2, #8
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2204      	movs	r2, #4
 8006c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 faaa 	bl	80071b4 <HAL_TIM_IC_CaptureCallback>
 8006c60:	e005      	b.n	8006c6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa9c 	bl	80071a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 faad 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d020      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01b      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0210 	mvn.w	r2, #16
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2208      	movs	r2, #8
 8006c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa84 	bl	80071b4 <HAL_TIM_IC_CaptureCallback>
 8006cac:	e005      	b.n	8006cba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa76 	bl	80071a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fa87 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0201 	mvn.w	r2, #1
 8006cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f005 fa1a 	bl	800c118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00c      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f887 	bl	8007e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00c      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 f87f 	bl	8007e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00c      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fa41 	bl	80071dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00c      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f06f 0220 	mvn.w	r2, #32
 8006d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 f847 	bl	8007e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e0ff      	b.n	8006fa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b14      	cmp	r3, #20
 8006db2:	f200 80f0 	bhi.w	8006f96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006db6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006f97 	.word	0x08006f97
 8006dc4:	08006f97 	.word	0x08006f97
 8006dc8:	08006f97 	.word	0x08006f97
 8006dcc:	08006e51 	.word	0x08006e51
 8006dd0:	08006f97 	.word	0x08006f97
 8006dd4:	08006f97 	.word	0x08006f97
 8006dd8:	08006f97 	.word	0x08006f97
 8006ddc:	08006e93 	.word	0x08006e93
 8006de0:	08006f97 	.word	0x08006f97
 8006de4:	08006f97 	.word	0x08006f97
 8006de8:	08006f97 	.word	0x08006f97
 8006dec:	08006ed3 	.word	0x08006ed3
 8006df0:	08006f97 	.word	0x08006f97
 8006df4:	08006f97 	.word	0x08006f97
 8006df8:	08006f97 	.word	0x08006f97
 8006dfc:	08006f15 	.word	0x08006f15
 8006e00:	08006f97 	.word	0x08006f97
 8006e04:	08006f97 	.word	0x08006f97
 8006e08:	08006f97 	.word	0x08006f97
 8006e0c:	08006f55 	.word	0x08006f55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fa90 	bl	800733c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0208 	orr.w	r2, r2, #8
 8006e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0204 	bic.w	r2, r2, #4
 8006e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6999      	ldr	r1, [r3, #24]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	619a      	str	r2, [r3, #24]
      break;
 8006e4e:	e0a5      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fb00 	bl	800745c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6999      	ldr	r1, [r3, #24]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	021a      	lsls	r2, r3, #8
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	619a      	str	r2, [r3, #24]
      break;
 8006e90:	e084      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fb69 	bl	8007570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0208 	orr.w	r2, r2, #8
 8006eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0204 	bic.w	r2, r2, #4
 8006ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69d9      	ldr	r1, [r3, #28]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	61da      	str	r2, [r3, #28]
      break;
 8006ed0:	e064      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fbd1 	bl	8007680 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69d9      	ldr	r1, [r3, #28]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	021a      	lsls	r2, r3, #8
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	61da      	str	r2, [r3, #28]
      break;
 8006f12:	e043      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fc1a 	bl	8007754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0208 	orr.w	r2, r2, #8
 8006f2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0204 	bic.w	r2, r2, #4
 8006f3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f52:	e023      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fc5e 	bl	800781c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	021a      	lsls	r2, r3, #8
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f94:	e002      	b.n	8006f9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e0dc      	b.n	8007186 <HAL_TIM_ConfigClockSource+0x1d6>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8007190 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a64      	ldr	r2, [pc, #400]	@ (8007194 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	f000 80a9 	beq.w	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 8007008:	4a62      	ldr	r2, [pc, #392]	@ (8007194 <HAL_TIM_ConfigClockSource+0x1e4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	f200 80ae 	bhi.w	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007010:	4a61      	ldr	r2, [pc, #388]	@ (8007198 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	f000 80a1 	beq.w	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 8007018:	4a5f      	ldr	r2, [pc, #380]	@ (8007198 <HAL_TIM_ConfigClockSource+0x1e8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	f200 80a6 	bhi.w	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007020:	4a5e      	ldr	r2, [pc, #376]	@ (800719c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007022:	4293      	cmp	r3, r2
 8007024:	f000 8099 	beq.w	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 8007028:	4a5c      	ldr	r2, [pc, #368]	@ (800719c <HAL_TIM_ConfigClockSource+0x1ec>)
 800702a:	4293      	cmp	r3, r2
 800702c:	f200 809e 	bhi.w	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007030:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007034:	f000 8091 	beq.w	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 8007038:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800703c:	f200 8096 	bhi.w	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007044:	f000 8089 	beq.w	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 8007048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800704c:	f200 808e 	bhi.w	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007054:	d03e      	beq.n	80070d4 <HAL_TIM_ConfigClockSource+0x124>
 8007056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800705a:	f200 8087 	bhi.w	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 800705e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007062:	f000 8086 	beq.w	8007172 <HAL_TIM_ConfigClockSource+0x1c2>
 8007066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800706a:	d87f      	bhi.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 800706c:	2b70      	cmp	r3, #112	@ 0x70
 800706e:	d01a      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0xf6>
 8007070:	2b70      	cmp	r3, #112	@ 0x70
 8007072:	d87b      	bhi.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007074:	2b60      	cmp	r3, #96	@ 0x60
 8007076:	d050      	beq.n	800711a <HAL_TIM_ConfigClockSource+0x16a>
 8007078:	2b60      	cmp	r3, #96	@ 0x60
 800707a:	d877      	bhi.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 800707c:	2b50      	cmp	r3, #80	@ 0x50
 800707e:	d03c      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x14a>
 8007080:	2b50      	cmp	r3, #80	@ 0x50
 8007082:	d873      	bhi.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007084:	2b40      	cmp	r3, #64	@ 0x40
 8007086:	d058      	beq.n	800713a <HAL_TIM_ConfigClockSource+0x18a>
 8007088:	2b40      	cmp	r3, #64	@ 0x40
 800708a:	d86f      	bhi.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 800708c:	2b30      	cmp	r3, #48	@ 0x30
 800708e:	d064      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 8007090:	2b30      	cmp	r3, #48	@ 0x30
 8007092:	d86b      	bhi.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 8007094:	2b20      	cmp	r3, #32
 8007096:	d060      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 8007098:	2b20      	cmp	r3, #32
 800709a:	d867      	bhi.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d05c      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d05a      	beq.n	800715a <HAL_TIM_ConfigClockSource+0x1aa>
 80070a4:	e062      	b.n	800716c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070b6:	f000 fc95 	bl	80079e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	609a      	str	r2, [r3, #8]
      break;
 80070d2:	e04f      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070e4:	f000 fc7e 	bl	80079e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070f6:	609a      	str	r2, [r3, #8]
      break;
 80070f8:	e03c      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007106:	461a      	mov	r2, r3
 8007108:	f000 fbee 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2150      	movs	r1, #80	@ 0x50
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fc48 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 8007118:	e02c      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007126:	461a      	mov	r2, r3
 8007128:	f000 fc0d 	bl	8007946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2160      	movs	r1, #96	@ 0x60
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fc38 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 8007138:	e01c      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007146:	461a      	mov	r2, r3
 8007148:	f000 fbce 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2140      	movs	r1, #64	@ 0x40
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fc28 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 8007158:	e00c      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f000 fc1f 	bl	80079a8 <TIM_ITRx_SetConfig>
      break;
 800716a:	e003      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
      break;
 8007170:	e000      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	ffceff88 	.word	0xffceff88
 8007194:	00100040 	.word	0x00100040
 8007198:	00100030 	.word	0x00100030
 800719c:	00100020 	.word	0x00100020

080071a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a46      	ldr	r2, [pc, #280]	@ (800731c <TIM_Base_SetConfig+0x12c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720e:	d00f      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a43      	ldr	r2, [pc, #268]	@ (8007320 <TIM_Base_SetConfig+0x130>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00b      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a42      	ldr	r2, [pc, #264]	@ (8007324 <TIM_Base_SetConfig+0x134>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d007      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a41      	ldr	r2, [pc, #260]	@ (8007328 <TIM_Base_SetConfig+0x138>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a40      	ldr	r2, [pc, #256]	@ (800732c <TIM_Base_SetConfig+0x13c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d108      	bne.n	8007242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a35      	ldr	r2, [pc, #212]	@ (800731c <TIM_Base_SetConfig+0x12c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01f      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007250:	d01b      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a32      	ldr	r2, [pc, #200]	@ (8007320 <TIM_Base_SetConfig+0x130>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d017      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a31      	ldr	r2, [pc, #196]	@ (8007324 <TIM_Base_SetConfig+0x134>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a30      	ldr	r2, [pc, #192]	@ (8007328 <TIM_Base_SetConfig+0x138>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00f      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a2f      	ldr	r2, [pc, #188]	@ (800732c <TIM_Base_SetConfig+0x13c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00b      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a2e      	ldr	r2, [pc, #184]	@ (8007330 <TIM_Base_SetConfig+0x140>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a2d      	ldr	r2, [pc, #180]	@ (8007334 <TIM_Base_SetConfig+0x144>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_Base_SetConfig+0x9a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2c      	ldr	r2, [pc, #176]	@ (8007338 <TIM_Base_SetConfig+0x148>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d108      	bne.n	800729c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a16      	ldr	r2, [pc, #88]	@ (800731c <TIM_Base_SetConfig+0x12c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00f      	beq.n	80072e8 <TIM_Base_SetConfig+0xf8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a18      	ldr	r2, [pc, #96]	@ (800732c <TIM_Base_SetConfig+0x13c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00b      	beq.n	80072e8 <TIM_Base_SetConfig+0xf8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a17      	ldr	r2, [pc, #92]	@ (8007330 <TIM_Base_SetConfig+0x140>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d007      	beq.n	80072e8 <TIM_Base_SetConfig+0xf8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a16      	ldr	r2, [pc, #88]	@ (8007334 <TIM_Base_SetConfig+0x144>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_Base_SetConfig+0xf8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <TIM_Base_SetConfig+0x148>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d103      	bne.n	80072f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d105      	bne.n	800730e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f023 0201 	bic.w	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	611a      	str	r2, [r3, #16]
  }
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40010000 	.word	0x40010000
 8007320:	40000400 	.word	0x40000400
 8007324:	40000800 	.word	0x40000800
 8007328:	40000c00 	.word	0x40000c00
 800732c:	40010400 	.word	0x40010400
 8007330:	40014000 	.word	0x40014000
 8007334:	40014400 	.word	0x40014400
 8007338:	40014800 	.word	0x40014800

0800733c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	f023 0201 	bic.w	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4b37      	ldr	r3, [pc, #220]	@ (8007444 <TIM_OC1_SetConfig+0x108>)
 8007368:	4013      	ands	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f023 0302 	bic.w	r3, r3, #2
 8007384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	4313      	orrs	r3, r2
 800738e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a2d      	ldr	r2, [pc, #180]	@ (8007448 <TIM_OC1_SetConfig+0x10c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00f      	beq.n	80073b8 <TIM_OC1_SetConfig+0x7c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a2c      	ldr	r2, [pc, #176]	@ (800744c <TIM_OC1_SetConfig+0x110>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00b      	beq.n	80073b8 <TIM_OC1_SetConfig+0x7c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007450 <TIM_OC1_SetConfig+0x114>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_OC1_SetConfig+0x7c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007454 <TIM_OC1_SetConfig+0x118>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC1_SetConfig+0x7c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a29      	ldr	r2, [pc, #164]	@ (8007458 <TIM_OC1_SetConfig+0x11c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d10c      	bne.n	80073d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f023 0308 	bic.w	r3, r3, #8
 80073be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f023 0304 	bic.w	r3, r3, #4
 80073d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007448 <TIM_OC1_SetConfig+0x10c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00f      	beq.n	80073fa <TIM_OC1_SetConfig+0xbe>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a1b      	ldr	r2, [pc, #108]	@ (800744c <TIM_OC1_SetConfig+0x110>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <TIM_OC1_SetConfig+0xbe>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007450 <TIM_OC1_SetConfig+0x114>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_OC1_SetConfig+0xbe>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a19      	ldr	r2, [pc, #100]	@ (8007454 <TIM_OC1_SetConfig+0x118>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_OC1_SetConfig+0xbe>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a18      	ldr	r2, [pc, #96]	@ (8007458 <TIM_OC1_SetConfig+0x11c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d111      	bne.n	800741e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4313      	orrs	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	621a      	str	r2, [r3, #32]
}
 8007438:	bf00      	nop
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	fffeff8f 	.word	0xfffeff8f
 8007448:	40010000 	.word	0x40010000
 800744c:	40010400 	.word	0x40010400
 8007450:	40014000 	.word	0x40014000
 8007454:	40014400 	.word	0x40014400
 8007458:	40014800 	.word	0x40014800

0800745c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	f023 0210 	bic.w	r2, r3, #16
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4b34      	ldr	r3, [pc, #208]	@ (8007558 <TIM_OC2_SetConfig+0xfc>)
 8007488:	4013      	ands	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f023 0320 	bic.w	r3, r3, #32
 80074a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a29      	ldr	r2, [pc, #164]	@ (800755c <TIM_OC2_SetConfig+0x100>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_OC2_SetConfig+0x68>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a28      	ldr	r2, [pc, #160]	@ (8007560 <TIM_OC2_SetConfig+0x104>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d10d      	bne.n	80074e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a1e      	ldr	r2, [pc, #120]	@ (800755c <TIM_OC2_SetConfig+0x100>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00f      	beq.n	8007508 <TIM_OC2_SetConfig+0xac>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007560 <TIM_OC2_SetConfig+0x104>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_OC2_SetConfig+0xac>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007564 <TIM_OC2_SetConfig+0x108>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_OC2_SetConfig+0xac>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007568 <TIM_OC2_SetConfig+0x10c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_OC2_SetConfig+0xac>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a1a      	ldr	r2, [pc, #104]	@ (800756c <TIM_OC2_SetConfig+0x110>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d113      	bne.n	8007530 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800750e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	feff8fff 	.word	0xfeff8fff
 800755c:	40010000 	.word	0x40010000
 8007560:	40010400 	.word	0x40010400
 8007564:	40014000 	.word	0x40014000
 8007568:	40014400 	.word	0x40014400
 800756c:	40014800 	.word	0x40014800

08007570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4b33      	ldr	r3, [pc, #204]	@ (8007668 <TIM_OC3_SetConfig+0xf8>)
 800759c:	4013      	ands	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a28      	ldr	r2, [pc, #160]	@ (800766c <TIM_OC3_SetConfig+0xfc>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d003      	beq.n	80075d6 <TIM_OC3_SetConfig+0x66>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a27      	ldr	r2, [pc, #156]	@ (8007670 <TIM_OC3_SetConfig+0x100>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d10d      	bne.n	80075f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1d      	ldr	r2, [pc, #116]	@ (800766c <TIM_OC3_SetConfig+0xfc>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00f      	beq.n	800761a <TIM_OC3_SetConfig+0xaa>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007670 <TIM_OC3_SetConfig+0x100>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00b      	beq.n	800761a <TIM_OC3_SetConfig+0xaa>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1b      	ldr	r2, [pc, #108]	@ (8007674 <TIM_OC3_SetConfig+0x104>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d007      	beq.n	800761a <TIM_OC3_SetConfig+0xaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1a      	ldr	r2, [pc, #104]	@ (8007678 <TIM_OC3_SetConfig+0x108>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_OC3_SetConfig+0xaa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a19      	ldr	r2, [pc, #100]	@ (800767c <TIM_OC3_SetConfig+0x10c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d113      	bne.n	8007642 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	621a      	str	r2, [r3, #32]
}
 800765c:	bf00      	nop
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	fffeff8f 	.word	0xfffeff8f
 800766c:	40010000 	.word	0x40010000
 8007670:	40010400 	.word	0x40010400
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4b24      	ldr	r3, [pc, #144]	@ (800773c <TIM_OC4_SetConfig+0xbc>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	031b      	lsls	r3, r3, #12
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a19      	ldr	r2, [pc, #100]	@ (8007740 <TIM_OC4_SetConfig+0xc0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00f      	beq.n	8007700 <TIM_OC4_SetConfig+0x80>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a18      	ldr	r2, [pc, #96]	@ (8007744 <TIM_OC4_SetConfig+0xc4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00b      	beq.n	8007700 <TIM_OC4_SetConfig+0x80>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a17      	ldr	r2, [pc, #92]	@ (8007748 <TIM_OC4_SetConfig+0xc8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d007      	beq.n	8007700 <TIM_OC4_SetConfig+0x80>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a16      	ldr	r2, [pc, #88]	@ (800774c <TIM_OC4_SetConfig+0xcc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_OC4_SetConfig+0x80>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a15      	ldr	r2, [pc, #84]	@ (8007750 <TIM_OC4_SetConfig+0xd0>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d109      	bne.n	8007714 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	019b      	lsls	r3, r3, #6
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	feff8fff 	.word	0xfeff8fff
 8007740:	40010000 	.word	0x40010000
 8007744:	40010400 	.word	0x40010400
 8007748:	40014000 	.word	0x40014000
 800774c:	40014400 	.word	0x40014400
 8007750:	40014800 	.word	0x40014800

08007754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4b21      	ldr	r3, [pc, #132]	@ (8007804 <TIM_OC5_SetConfig+0xb0>)
 8007780:	4013      	ands	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007794:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a18      	ldr	r2, [pc, #96]	@ (8007808 <TIM_OC5_SetConfig+0xb4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00f      	beq.n	80077ca <TIM_OC5_SetConfig+0x76>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a17      	ldr	r2, [pc, #92]	@ (800780c <TIM_OC5_SetConfig+0xb8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00b      	beq.n	80077ca <TIM_OC5_SetConfig+0x76>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a16      	ldr	r2, [pc, #88]	@ (8007810 <TIM_OC5_SetConfig+0xbc>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d007      	beq.n	80077ca <TIM_OC5_SetConfig+0x76>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a15      	ldr	r2, [pc, #84]	@ (8007814 <TIM_OC5_SetConfig+0xc0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d003      	beq.n	80077ca <TIM_OC5_SetConfig+0x76>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a14      	ldr	r2, [pc, #80]	@ (8007818 <TIM_OC5_SetConfig+0xc4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d109      	bne.n	80077de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	621a      	str	r2, [r3, #32]
}
 80077f8:	bf00      	nop
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	fffeff8f 	.word	0xfffeff8f
 8007808:	40010000 	.word	0x40010000
 800780c:	40010400 	.word	0x40010400
 8007810:	40014000 	.word	0x40014000
 8007814:	40014400 	.word	0x40014400
 8007818:	40014800 	.word	0x40014800

0800781c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4b22      	ldr	r3, [pc, #136]	@ (80078d0 <TIM_OC6_SetConfig+0xb4>)
 8007848:	4013      	ands	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800785e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	051b      	lsls	r3, r3, #20
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a19      	ldr	r2, [pc, #100]	@ (80078d4 <TIM_OC6_SetConfig+0xb8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00f      	beq.n	8007894 <TIM_OC6_SetConfig+0x78>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a18      	ldr	r2, [pc, #96]	@ (80078d8 <TIM_OC6_SetConfig+0xbc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00b      	beq.n	8007894 <TIM_OC6_SetConfig+0x78>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a17      	ldr	r2, [pc, #92]	@ (80078dc <TIM_OC6_SetConfig+0xc0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d007      	beq.n	8007894 <TIM_OC6_SetConfig+0x78>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a16      	ldr	r2, [pc, #88]	@ (80078e0 <TIM_OC6_SetConfig+0xc4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_OC6_SetConfig+0x78>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a15      	ldr	r2, [pc, #84]	@ (80078e4 <TIM_OC6_SetConfig+0xc8>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d109      	bne.n	80078a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800789a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	feff8fff 	.word	0xfeff8fff
 80078d4:	40010000 	.word	0x40010000
 80078d8:	40010400 	.word	0x40010400
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40014400 	.word	0x40014400
 80078e4:	40014800 	.word	0x40014800

080078e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f023 030a 	bic.w	r3, r3, #10
 8007924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007946:	b480      	push	{r7}
 8007948:	b087      	sub	sp, #28
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	f023 0210 	bic.w	r2, r3, #16
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	031b      	lsls	r3, r3, #12
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007982:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	621a      	str	r2, [r3, #32]
}
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4b09      	ldr	r3, [pc, #36]	@ (80079e0 <TIM_ITRx_SetConfig+0x38>)
 80079bc:	4013      	ands	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	f043 0307 	orr.w	r3, r3, #7
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	609a      	str	r2, [r3, #8]
}
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	ffcfff8f 	.word	0xffcfff8f

080079e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	021a      	lsls	r2, r3, #8
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	431a      	orrs	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	609a      	str	r2, [r3, #8]
}
 8007a18:	bf00      	nop
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	2201      	movs	r2, #1
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1a      	ldr	r2, [r3, #32]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	43db      	mvns	r3, r3
 8007a46:	401a      	ands	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	fa01 f303 	lsl.w	r3, r1, r3
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	621a      	str	r2, [r3, #32]
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <HAL_TIMEx_PWMN_Start+0x24>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e022      	b.n	8007ada <HAL_TIMEx_PWMN_Start+0x6a>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d109      	bne.n	8007aae <HAL_TIMEx_PWMN_Start+0x3e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	e015      	b.n	8007ada <HAL_TIMEx_PWMN_Start+0x6a>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d109      	bne.n	8007ac8 <HAL_TIMEx_PWMN_Start+0x58>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	e008      	b.n	8007ada <HAL_TIMEx_PWMN_Start+0x6a>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bf14      	ite	ne
 8007ad4:	2301      	movne	r3, #1
 8007ad6:	2300      	moveq	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e073      	b.n	8007bca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <HAL_TIMEx_PWMN_Start+0x82>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007af0:	e013      	b.n	8007b1a <HAL_TIMEx_PWMN_Start+0xaa>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d104      	bne.n	8007b02 <HAL_TIMEx_PWMN_Start+0x92>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b00:	e00b      	b.n	8007b1a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d104      	bne.n	8007b12 <HAL_TIMEx_PWMN_Start+0xa2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b10:	e003      	b.n	8007b1a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f990 	bl	8007e48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a25      	ldr	r2, [pc, #148]	@ (8007bd4 <HAL_TIMEx_PWMN_Start+0x164>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d022      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4a:	d01d      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a21      	ldr	r2, [pc, #132]	@ (8007bd8 <HAL_TIMEx_PWMN_Start+0x168>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d018      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a20      	ldr	r2, [pc, #128]	@ (8007bdc <HAL_TIMEx_PWMN_Start+0x16c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1e      	ldr	r2, [pc, #120]	@ (8007be0 <HAL_TIMEx_PWMN_Start+0x170>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00e      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8007be4 <HAL_TIMEx_PWMN_Start+0x174>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d009      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	@ (8007be8 <HAL_TIMEx_PWMN_Start+0x178>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <HAL_TIMEx_PWMN_Start+0x118>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1a      	ldr	r2, [pc, #104]	@ (8007bec <HAL_TIMEx_PWMN_Start+0x17c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d115      	bne.n	8007bb4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	4b18      	ldr	r3, [pc, #96]	@ (8007bf0 <HAL_TIMEx_PWMN_Start+0x180>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b06      	cmp	r3, #6
 8007b98:	d015      	beq.n	8007bc6 <HAL_TIMEx_PWMN_Start+0x156>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba0:	d011      	beq.n	8007bc6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb2:	e008      	b.n	8007bc6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40010000 	.word	0x40010000
 8007bd8:	40000400 	.word	0x40000400
 8007bdc:	40000800 	.word	0x40000800
 8007be0:	40000c00 	.word	0x40000c00
 8007be4:	40010400 	.word	0x40010400
 8007be8:	40001800 	.word	0x40001800
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	00010007 	.word	0x00010007

08007bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e06d      	b.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a30      	ldr	r2, [pc, #192]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d108      	bne.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a20      	ldr	r2, [pc, #128]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d022      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c7e:	d01d      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1d      	ldr	r2, [pc, #116]	@ (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d018      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d013      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1a      	ldr	r2, [pc, #104]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00e      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d009      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a16      	ldr	r2, [pc, #88]	@ (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a15      	ldr	r2, [pc, #84]	@ (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d10c      	bne.n	8007cd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40010400 	.word	0x40010400
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800
 8007d04:	40000c00 	.word	0x40000c00
 8007d08:	40001800 	.word	0x40001800
 8007d0c:	40014000 	.word	0x40014000

08007d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e065      	b.n	8007df8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a16      	ldr	r2, [pc, #88]	@ (8007e04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d004      	beq.n	8007dba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a14      	ldr	r2, [pc, #80]	@ (8007e08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d115      	bne.n	8007de6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc4:	051b      	lsls	r3, r3, #20
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40010400 	.word	0x40010400

08007e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	43db      	mvns	r3, r3
 8007e6a:	401a      	ands	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a1a      	ldr	r2, [r3, #32]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e80:	431a      	orrs	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
	...

08007e94 <__NVIC_SetPriority>:
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	db0a      	blt.n	8007ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	490c      	ldr	r1, [pc, #48]	@ (8007ee0 <__NVIC_SetPriority+0x4c>)
 8007eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007eb2:	0112      	lsls	r2, r2, #4
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ebc:	e00a      	b.n	8007ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	4908      	ldr	r1, [pc, #32]	@ (8007ee4 <__NVIC_SetPriority+0x50>)
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	3b04      	subs	r3, #4
 8007ecc:	0112      	lsls	r2, r2, #4
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	761a      	strb	r2, [r3, #24]
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	e000e100 	.word	0xe000e100
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007eec:	4b05      	ldr	r3, [pc, #20]	@ (8007f04 <SysTick_Handler+0x1c>)
 8007eee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ef0:	f001 fd50 	bl	8009994 <xTaskGetSchedulerState>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d001      	beq.n	8007efe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007efa:	f002 fb45 	bl	800a588 <xPortSysTickHandler>
  }
}
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	e000e010 	.word	0xe000e010

08007f08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	f06f 0004 	mvn.w	r0, #4
 8007f12:	f7ff ffbf 	bl	8007e94 <__NVIC_SetPriority>
#endif
}
 8007f16:	bf00      	nop
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f22:	f3ef 8305 	mrs	r3, IPSR
 8007f26:	603b      	str	r3, [r7, #0]
  return(result);
 8007f28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f2e:	f06f 0305 	mvn.w	r3, #5
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	e00c      	b.n	8007f50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f36:	4b0a      	ldr	r3, [pc, #40]	@ (8007f60 <osKernelInitialize+0x44>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d105      	bne.n	8007f4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f3e:	4b08      	ldr	r3, [pc, #32]	@ (8007f60 <osKernelInitialize+0x44>)
 8007f40:	2201      	movs	r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	607b      	str	r3, [r7, #4]
 8007f48:	e002      	b.n	8007f50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f50:	687b      	ldr	r3, [r7, #4]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	240004ac 	.word	0x240004ac

08007f64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f6a:	f3ef 8305 	mrs	r3, IPSR
 8007f6e:	603b      	str	r3, [r7, #0]
  return(result);
 8007f70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f76:	f06f 0305 	mvn.w	r3, #5
 8007f7a:	607b      	str	r3, [r7, #4]
 8007f7c:	e010      	b.n	8007fa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fac <osKernelStart+0x48>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d109      	bne.n	8007f9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f86:	f7ff ffbf 	bl	8007f08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f8a:	4b08      	ldr	r3, [pc, #32]	@ (8007fac <osKernelStart+0x48>)
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f90:	f001 f87a 	bl	8009088 <vTaskStartScheduler>
      stat = osOK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	e002      	b.n	8007fa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fa0:	687b      	ldr	r3, [r7, #4]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	240004ac 	.word	0x240004ac

08007fb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08e      	sub	sp, #56	@ 0x38
 8007fb4:	af04      	add	r7, sp, #16
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc0:	f3ef 8305 	mrs	r3, IPSR
 8007fc4:	617b      	str	r3, [r7, #20]
  return(result);
 8007fc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d17e      	bne.n	80080ca <osThreadNew+0x11a>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d07b      	beq.n	80080ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fd2:	2380      	movs	r3, #128	@ 0x80
 8007fd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fd6:	2318      	movs	r3, #24
 8007fd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d045      	beq.n	8008076 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <osThreadNew+0x48>
        name = attr->name;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d008      	beq.n	800801e <osThreadNew+0x6e>
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	2b38      	cmp	r3, #56	@ 0x38
 8008010:	d805      	bhi.n	800801e <osThreadNew+0x6e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <osThreadNew+0x72>
        return (NULL);
 800801e:	2300      	movs	r3, #0
 8008020:	e054      	b.n	80080cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	089b      	lsrs	r3, r3, #2
 8008030:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00e      	beq.n	8008058 <osThreadNew+0xa8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008040:	d90a      	bls.n	8008058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008046:	2b00      	cmp	r3, #0
 8008048:	d006      	beq.n	8008058 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <osThreadNew+0xa8>
        mem = 1;
 8008052:	2301      	movs	r3, #1
 8008054:	61bb      	str	r3, [r7, #24]
 8008056:	e010      	b.n	800807a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10c      	bne.n	800807a <osThreadNew+0xca>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d108      	bne.n	800807a <osThreadNew+0xca>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <osThreadNew+0xca>
          mem = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	e001      	b.n	800807a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d110      	bne.n	80080a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008088:	9202      	str	r2, [sp, #8]
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6a3a      	ldr	r2, [r7, #32]
 8008094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fe1a 	bl	8008cd0 <xTaskCreateStatic>
 800809c:	4603      	mov	r3, r0
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	e013      	b.n	80080ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d110      	bne.n	80080ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	f107 0310 	add.w	r3, r7, #16
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fe68 	bl	8008d90 <xTaskCreate>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d001      	beq.n	80080ca <osThreadNew+0x11a>
            hTask = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080ca:	693b      	ldr	r3, [r7, #16]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3728      	adds	r7, #40	@ 0x28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080dc:	f3ef 8305 	mrs	r3, IPSR
 80080e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80080e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <osDelay+0x1c>
    stat = osErrorISR;
 80080e8:	f06f 0305 	mvn.w	r3, #5
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e007      	b.n	8008100 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <osDelay+0x2c>
      vTaskDelay(ticks);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 ff8e 	bl	800901c <vTaskDelay>
    }
  }

  return (stat);
 8008100:	68fb      	ldr	r3, [r7, #12]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4a07      	ldr	r2, [pc, #28]	@ (8008138 <vApplicationGetIdleTaskMemory+0x2c>)
 800811c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	4a06      	ldr	r2, [pc, #24]	@ (800813c <vApplicationGetIdleTaskMemory+0x30>)
 8008122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2280      	movs	r2, #128	@ 0x80
 8008128:	601a      	str	r2, [r3, #0]
}
 800812a:	bf00      	nop
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	240004b0 	.word	0x240004b0
 800813c:	2400050c 	.word	0x2400050c

08008140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4a07      	ldr	r2, [pc, #28]	@ (800816c <vApplicationGetTimerTaskMemory+0x2c>)
 8008150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4a06      	ldr	r2, [pc, #24]	@ (8008170 <vApplicationGetTimerTaskMemory+0x30>)
 8008156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800815e:	601a      	str	r2, [r3, #0]
}
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	2400070c 	.word	0x2400070c
 8008170:	24000768 	.word	0x24000768

08008174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f103 0208 	add.w	r2, r3, #8
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f04f 32ff 	mov.w	r2, #4294967295
 800818c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f103 0208 	add.w	r2, r3, #8
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f103 0208 	add.w	r2, r3, #8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d103      	bne.n	8008236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e00c      	b.n	8008250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3308      	adds	r3, #8
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e002      	b.n	8008244 <vListInsert+0x2e>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	429a      	cmp	r2, r3
 800824e:	d2f6      	bcs.n	800823e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
}
 800827c:	bf00      	nop
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6892      	ldr	r2, [r2, #8]
 800829e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6852      	ldr	r2, [r2, #4]
 80082a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d103      	bne.n	80082bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	1e5a      	subs	r2, r3, #1
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008308:	f002 f8ae 	bl	800a468 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	441a      	add	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008338:	3b01      	subs	r3, #1
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800833e:	fb01 f303 	mul.w	r3, r1, r3
 8008342:	441a      	add	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	22ff      	movs	r2, #255	@ 0xff
 800834c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	22ff      	movs	r2, #255	@ 0xff
 8008354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d114      	bne.n	8008388 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01a      	beq.n	800839c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3310      	adds	r3, #16
 800836a:	4618      	mov	r0, r3
 800836c:	f001 f91a 	bl	80095a4 <xTaskRemoveFromEventList>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d012      	beq.n	800839c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008376:	4b0d      	ldr	r3, [pc, #52]	@ (80083ac <xQueueGenericReset+0xd0>)
 8008378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	e009      	b.n	800839c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3310      	adds	r3, #16
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff fef1 	bl	8008174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3324      	adds	r3, #36	@ 0x24
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff feec 	bl	8008174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800839c:	f002 f896 	bl	800a4cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083a0:	2301      	movs	r3, #1
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08e      	sub	sp, #56	@ 0x38
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10b      	bne.n	80083dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	e7fd      	b.n	80083d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10b      	bne.n	80083fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop
 80083f8:	e7fd      	b.n	80083f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <xQueueGenericCreateStatic+0x56>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <xQueueGenericCreateStatic+0x5a>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <xQueueGenericCreateStatic+0x5c>
 800840a:	2300      	movs	r3, #0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	623b      	str	r3, [r7, #32]
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d102      	bne.n	8008434 <xQueueGenericCreateStatic+0x84>
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <xQueueGenericCreateStatic+0x88>
 8008434:	2301      	movs	r3, #1
 8008436:	e000      	b.n	800843a <xQueueGenericCreateStatic+0x8a>
 8008438:	2300      	movs	r3, #0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10b      	bne.n	8008456 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	61fb      	str	r3, [r7, #28]
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	e7fd      	b.n	8008452 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008456:	2350      	movs	r3, #80	@ 0x50
 8008458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b50      	cmp	r3, #80	@ 0x50
 800845e:	d00b      	beq.n	8008478 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	61bb      	str	r3, [r7, #24]
}
 8008472:	bf00      	nop
 8008474:	bf00      	nop
 8008476:	e7fd      	b.n	8008474 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008478:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00d      	beq.n	80084a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800848c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	4613      	mov	r3, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 f805 	bl	80084aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3730      	adds	r7, #48	@ 0x30
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d103      	bne.n	80084c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e002      	b.n	80084cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084d8:	2101      	movs	r1, #1
 80084da:	69b8      	ldr	r0, [r7, #24]
 80084dc:	f7ff fefe 	bl	80082dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08e      	sub	sp, #56	@ 0x38
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084fe:	2300      	movs	r3, #0
 8008500:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10b      	bne.n	8008524 <xQueueGenericSend+0x34>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800851e:	bf00      	nop
 8008520:	bf00      	nop
 8008522:	e7fd      	b.n	8008520 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <xQueueGenericSend+0x42>
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <xQueueGenericSend+0x46>
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <xQueueGenericSend+0x48>
 8008536:	2300      	movs	r3, #0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <xQueueGenericSend+0x64>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d103      	bne.n	8008562 <xQueueGenericSend+0x72>
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855e:	2b01      	cmp	r3, #1
 8008560:	d101      	bne.n	8008566 <xQueueGenericSend+0x76>
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <xQueueGenericSend+0x78>
 8008566:	2300      	movs	r3, #0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10b      	bne.n	8008584 <xQueueGenericSend+0x94>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	623b      	str	r3, [r7, #32]
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	e7fd      	b.n	8008580 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008584:	f001 fa06 	bl	8009994 <xTaskGetSchedulerState>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <xQueueGenericSend+0xa4>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <xQueueGenericSend+0xa8>
 8008594:	2301      	movs	r3, #1
 8008596:	e000      	b.n	800859a <xQueueGenericSend+0xaa>
 8008598:	2300      	movs	r3, #0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10b      	bne.n	80085b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	61fb      	str	r3, [r7, #28]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085b6:	f001 ff57 	bl	800a468 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d302      	bcc.n	80085cc <xQueueGenericSend+0xdc>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d129      	bne.n	8008620 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085d2:	f000 fa0f 	bl	80089f4 <prvCopyDataToQueue>
 80085d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e2:	3324      	adds	r3, #36	@ 0x24
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 ffdd 	bl	80095a4 <xTaskRemoveFromEventList>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d013      	beq.n	8008618 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085f0:	4b3f      	ldr	r3, [pc, #252]	@ (80086f0 <xQueueGenericSend+0x200>)
 80085f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	e00a      	b.n	8008618 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008608:	4b39      	ldr	r3, [pc, #228]	@ (80086f0 <xQueueGenericSend+0x200>)
 800860a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008618:	f001 ff58 	bl	800a4cc <vPortExitCritical>
				return pdPASS;
 800861c:	2301      	movs	r3, #1
 800861e:	e063      	b.n	80086e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d103      	bne.n	800862e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008626:	f001 ff51 	bl	800a4cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800862a:	2300      	movs	r3, #0
 800862c:	e05c      	b.n	80086e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	4618      	mov	r0, r3
 800863a:	f001 f817 	bl	800966c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800863e:	2301      	movs	r3, #1
 8008640:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008642:	f001 ff43 	bl	800a4cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008646:	f000 fd87 	bl	8009158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800864a:	f001 ff0d 	bl	800a468 <vPortEnterCritical>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008654:	b25b      	sxtb	r3, r3
 8008656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865a:	d103      	bne.n	8008664 <xQueueGenericSend+0x174>
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800866a:	b25b      	sxtb	r3, r3
 800866c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008670:	d103      	bne.n	800867a <xQueueGenericSend+0x18a>
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800867a:	f001 ff27 	bl	800a4cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800867e:	1d3a      	adds	r2, r7, #4
 8008680:	f107 0314 	add.w	r3, r7, #20
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f001 f806 	bl	8009698 <xTaskCheckForTimeOut>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d124      	bne.n	80086dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008692:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008694:	f000 faa6 	bl	8008be4 <prvIsQueueFull>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d018      	beq.n	80086d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	3310      	adds	r3, #16
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 ff2a 	bl	8009500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ae:	f000 fa31 	bl	8008b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086b2:	f000 fd5f 	bl	8009174 <xTaskResumeAll>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f47f af7c 	bne.w	80085b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80086be:	4b0c      	ldr	r3, [pc, #48]	@ (80086f0 <xQueueGenericSend+0x200>)
 80086c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	e772      	b.n	80085b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086d2:	f000 fa1f 	bl	8008b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086d6:	f000 fd4d 	bl	8009174 <xTaskResumeAll>
 80086da:	e76c      	b.n	80085b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086de:	f000 fa19 	bl	8008b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086e2:	f000 fd47 	bl	8009174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3738      	adds	r7, #56	@ 0x38
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b090      	sub	sp, #64	@ 0x40
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10b      	bne.n	8008724 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800871e:	bf00      	nop
 8008720:	bf00      	nop
 8008722:	e7fd      	b.n	8008720 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <xQueueGenericSendFromISR+0x3e>
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <xQueueGenericSendFromISR+0x42>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <xQueueGenericSendFromISR+0x44>
 8008736:	2300      	movs	r3, #0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10b      	bne.n	8008754 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	e7fd      	b.n	8008750 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d103      	bne.n	8008762 <xQueueGenericSendFromISR+0x6e>
 800875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <xQueueGenericSendFromISR+0x72>
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <xQueueGenericSendFromISR+0x74>
 8008766:	2300      	movs	r3, #0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	623b      	str	r3, [r7, #32]
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	e7fd      	b.n	8008780 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008784:	f001 ff50 	bl	800a628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008788:	f3ef 8211 	mrs	r2, BASEPRI
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61fa      	str	r2, [r7, #28]
 800879e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d302      	bcc.n	80087b6 <xQueueGenericSendFromISR+0xc2>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d12f      	bne.n	8008816 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087cc:	f000 f912 	bl	80089f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d112      	bne.n	8008800 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e4:	3324      	adds	r3, #36	@ 0x24
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fedc 	bl	80095a4 <xTaskRemoveFromEventList>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e007      	b.n	8008810 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008800:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008804:	3301      	adds	r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	b25a      	sxtb	r2, r3
 800880a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008810:	2301      	movs	r3, #1
 8008812:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008814:	e001      	b.n	800881a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800881a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008828:	4618      	mov	r0, r3
 800882a:	3740      	adds	r7, #64	@ 0x40
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08c      	sub	sp, #48	@ 0x30
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800883c:	2300      	movs	r3, #0
 800883e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10b      	bne.n	8008862 <xQueueReceive+0x32>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	623b      	str	r3, [r7, #32]
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	e7fd      	b.n	800885e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d103      	bne.n	8008870 <xQueueReceive+0x40>
 8008868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <xQueueReceive+0x44>
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <xQueueReceive+0x46>
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <xQueueReceive+0x62>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fb      	str	r3, [r7, #28]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008892:	f001 f87f 	bl	8009994 <xTaskGetSchedulerState>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <xQueueReceive+0x72>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <xQueueReceive+0x76>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueReceive+0x78>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10b      	bne.n	80088c4 <xQueueReceive+0x94>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	61bb      	str	r3, [r7, #24]
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	e7fd      	b.n	80088c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088c4:	f001 fdd0 	bl	800a468 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01f      	beq.n	8008914 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088d8:	f000 f8f6 	bl	8008ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088de:	1e5a      	subs	r2, r3, #1
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00f      	beq.n	800890c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ee:	3310      	adds	r3, #16
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fe57 	bl	80095a4 <xTaskRemoveFromEventList>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088fc:	4b3c      	ldr	r3, [pc, #240]	@ (80089f0 <xQueueReceive+0x1c0>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800890c:	f001 fdde 	bl	800a4cc <vPortExitCritical>
				return pdPASS;
 8008910:	2301      	movs	r3, #1
 8008912:	e069      	b.n	80089e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800891a:	f001 fdd7 	bl	800a4cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800891e:	2300      	movs	r3, #0
 8008920:	e062      	b.n	80089e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008928:	f107 0310 	add.w	r3, r7, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fe9d 	bl	800966c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008932:	2301      	movs	r3, #1
 8008934:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008936:	f001 fdc9 	bl	800a4cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800893a:	f000 fc0d 	bl	8009158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800893e:	f001 fd93 	bl	800a468 <vPortEnterCritical>
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008948:	b25b      	sxtb	r3, r3
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d103      	bne.n	8008958 <xQueueReceive+0x128>
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800895e:	b25b      	sxtb	r3, r3
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d103      	bne.n	800896e <xQueueReceive+0x13e>
 8008966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800896e:	f001 fdad 	bl	800a4cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008972:	1d3a      	adds	r2, r7, #4
 8008974:	f107 0310 	add.w	r3, r7, #16
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fe8c 	bl	8009698 <xTaskCheckForTimeOut>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d123      	bne.n	80089ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008988:	f000 f916 	bl	8008bb8 <prvIsQueueEmpty>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d017      	beq.n	80089c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008994:	3324      	adds	r3, #36	@ 0x24
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fdb0 	bl	8009500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a2:	f000 f8b7 	bl	8008b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089a6:	f000 fbe5 	bl	8009174 <xTaskResumeAll>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d189      	bne.n	80088c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80089b0:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <xQueueReceive+0x1c0>)
 80089b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	e780      	b.n	80088c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c4:	f000 f8a6 	bl	8008b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089c8:	f000 fbd4 	bl	8009174 <xTaskResumeAll>
 80089cc:	e77a      	b.n	80088c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089d0:	f000 f8a0 	bl	8008b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089d4:	f000 fbce 	bl	8009174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089da:	f000 f8ed 	bl	8008bb8 <prvIsQueueEmpty>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f43f af6f 	beq.w	80088c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3730      	adds	r7, #48	@ 0x30
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10d      	bne.n	8008a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d14d      	bne.n	8008ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 ffd6 	bl	80099d0 <xTaskPriorityDisinherit>
 8008a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	e043      	b.n	8008ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d119      	bne.n	8008a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6858      	ldr	r0, [r3, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	f004 faaf 	bl	800cfa2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	441a      	add	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d32b      	bcc.n	8008ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	e026      	b.n	8008ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68d8      	ldr	r0, [r3, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a70:	461a      	mov	r2, r3
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	f004 fa95 	bl	800cfa2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	425b      	negs	r3, r3
 8008a82:	441a      	add	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d207      	bcs.n	8008aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9c:	425b      	negs	r3, r3
 8008a9e:	441a      	add	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d105      	bne.n	8008ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008abe:	697b      	ldr	r3, [r7, #20]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d018      	beq.n	8008b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae2:	441a      	add	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d303      	bcc.n	8008afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68d9      	ldr	r1, [r3, #12]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b04:	461a      	mov	r2, r3
 8008b06:	6838      	ldr	r0, [r7, #0]
 8008b08:	f004 fa4b 	bl	800cfa2 <memcpy>
	}
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b1c:	f001 fca4 	bl	800a468 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b28:	e011      	b.n	8008b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d012      	beq.n	8008b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3324      	adds	r3, #36	@ 0x24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fd34 	bl	80095a4 <xTaskRemoveFromEventList>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b42:	f000 fe0d 	bl	8009760 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dce9      	bgt.n	8008b2a <prvUnlockQueue+0x16>
 8008b56:	e000      	b.n	8008b5a <prvUnlockQueue+0x46>
					break;
 8008b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	22ff      	movs	r2, #255	@ 0xff
 8008b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008b62:	f001 fcb3 	bl	800a4cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b66:	f001 fc7f 	bl	800a468 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b72:	e011      	b.n	8008b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d012      	beq.n	8008ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3310      	adds	r3, #16
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fd0f 	bl	80095a4 <xTaskRemoveFromEventList>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b8c:	f000 fde8 	bl	8009760 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dce9      	bgt.n	8008b74 <prvUnlockQueue+0x60>
 8008ba0:	e000      	b.n	8008ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	22ff      	movs	r2, #255	@ 0xff
 8008ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008bac:	f001 fc8e 	bl	800a4cc <vPortExitCritical>
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bc0:	f001 fc52 	bl	800a468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	e001      	b.n	8008bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bd6:	f001 fc79 	bl	800a4cc <vPortExitCritical>

	return xReturn;
 8008bda:	68fb      	ldr	r3, [r7, #12]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bec:	f001 fc3c 	bl	800a468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d102      	bne.n	8008c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	e001      	b.n	8008c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c06:	f001 fc61 	bl	800a4cc <vPortExitCritical>

	return xReturn;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e014      	b.n	8008c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c24:	4a0f      	ldr	r2, [pc, #60]	@ (8008c64 <vQueueAddToRegistry+0x50>)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10b      	bne.n	8008c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c30:	490c      	ldr	r1, [pc, #48]	@ (8008c64 <vQueueAddToRegistry+0x50>)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008c64 <vQueueAddToRegistry+0x50>)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4413      	add	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c46:	e006      	b.n	8008c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b07      	cmp	r3, #7
 8008c52:	d9e7      	bls.n	8008c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	24000b68 	.word	0x24000b68

08008c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c78:	f001 fbf6 	bl	800a468 <vPortEnterCritical>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c88:	d103      	bne.n	8008c92 <vQueueWaitForMessageRestricted+0x2a>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c98:	b25b      	sxtb	r3, r3
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d103      	bne.n	8008ca8 <vQueueWaitForMessageRestricted+0x40>
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ca8:	f001 fc10 	bl	800a4cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	3324      	adds	r3, #36	@ 0x24
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fc45 	bl	800954c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	f7ff ff26 	bl	8008b14 <prvUnlockQueue>
	}
 8008cc8:	bf00      	nop
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08e      	sub	sp, #56	@ 0x38
 8008cd4:	af04      	add	r7, sp, #16
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	623b      	str	r3, [r7, #32]
}
 8008cf6:	bf00      	nop
 8008cf8:	bf00      	nop
 8008cfa:	e7fd      	b.n	8008cf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10b      	bne.n	8008d1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	61fb      	str	r3, [r7, #28]
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	e7fd      	b.n	8008d16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d1a:	235c      	movs	r3, #92	@ 0x5c
 8008d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d22:	d00b      	beq.n	8008d3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	61bb      	str	r3, [r7, #24]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d01e      	beq.n	8008d82 <xTaskCreateStatic+0xb2>
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01b      	beq.n	8008d82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9303      	str	r3, [sp, #12]
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	f107 0314 	add.w	r3, r7, #20
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 f850 	bl	8008e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d7c:	f000 f8de 	bl	8008f3c <prvAddNewTaskToReadyList>
 8008d80:	e001      	b.n	8008d86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d86:	697b      	ldr	r3, [r7, #20]
	}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3728      	adds	r7, #40	@ 0x28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08c      	sub	sp, #48	@ 0x30
 8008d94:	af04      	add	r7, sp, #16
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 fc81 	bl	800a6ac <pvPortMalloc>
 8008daa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00e      	beq.n	8008dd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008db2:	205c      	movs	r0, #92	@ 0x5c
 8008db4:	f001 fc7a 	bl	800a6ac <pvPortMalloc>
 8008db8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008dc6:	e005      	b.n	8008dd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dc8:	6978      	ldr	r0, [r7, #20]
 8008dca:	f001 fd3d 	bl	800a848 <vPortFree>
 8008dce:	e001      	b.n	8008dd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d017      	beq.n	8008e0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008de2:	88fa      	ldrh	r2, [r7, #6]
 8008de4:	2300      	movs	r3, #0
 8008de6:	9303      	str	r3, [sp, #12]
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 f80e 	bl	8008e1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dfe:	69f8      	ldr	r0, [r7, #28]
 8008e00:	f000 f89c 	bl	8008f3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e04:	2301      	movs	r3, #1
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	e002      	b.n	8008e10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e10:	69bb      	ldr	r3, [r7, #24]
	}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3720      	adds	r7, #32
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b088      	sub	sp, #32
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
 8008e26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	461a      	mov	r2, r3
 8008e32:	21a5      	movs	r1, #165	@ 0xa5
 8008e34:	f004 f825 	bl	800ce82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008e42:	440b      	add	r3, r1
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	f003 0307 	and.w	r3, r3, #7
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	617b      	str	r3, [r7, #20]
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	e7fd      	b.n	8008e70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01f      	beq.n	8008eba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	61fb      	str	r3, [r7, #28]
 8008e7e:	e012      	b.n	8008ea6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	7819      	ldrb	r1, [r3, #0]
 8008e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3334      	adds	r3, #52	@ 0x34
 8008e90:	460a      	mov	r2, r1
 8008e92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d006      	beq.n	8008eae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	2b0f      	cmp	r3, #15
 8008eaa:	d9e9      	bls.n	8008e80 <prvInitialiseNewTask+0x66>
 8008eac:	e000      	b.n	8008eb0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008eae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008eb8:	e003      	b.n	8008ec2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	2b37      	cmp	r3, #55	@ 0x37
 8008ec6:	d901      	bls.n	8008ecc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ec8:	2337      	movs	r3, #55	@ 0x37
 8008eca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	2200      	movs	r2, #0
 8008edc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff f966 	bl	80081b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eea:	3318      	adds	r3, #24
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff f961 	bl	80081b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ef6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	68f9      	ldr	r1, [r7, #12]
 8008f1a:	69b8      	ldr	r0, [r7, #24]
 8008f1c:	f001 f976 	bl	800a20c <pxPortInitialiseStack>
 8008f20:	4602      	mov	r2, r0
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f32:	bf00      	nop
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f44:	f001 fa90 	bl	800a468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f48:	4b2d      	ldr	r3, [pc, #180]	@ (8009000 <prvAddNewTaskToReadyList+0xc4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8009000 <prvAddNewTaskToReadyList+0xc4>)
 8008f50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f52:	4b2c      	ldr	r3, [pc, #176]	@ (8009004 <prvAddNewTaskToReadyList+0xc8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d109      	bne.n	8008f6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8009004 <prvAddNewTaskToReadyList+0xc8>)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f60:	4b27      	ldr	r3, [pc, #156]	@ (8009000 <prvAddNewTaskToReadyList+0xc4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d110      	bne.n	8008f8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f68:	f000 fc1e 	bl	80097a8 <prvInitialiseTaskLists>
 8008f6c:	e00d      	b.n	8008f8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f6e:	4b26      	ldr	r3, [pc, #152]	@ (8009008 <prvAddNewTaskToReadyList+0xcc>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f76:	4b23      	ldr	r3, [pc, #140]	@ (8009004 <prvAddNewTaskToReadyList+0xc8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d802      	bhi.n	8008f8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f84:	4a1f      	ldr	r2, [pc, #124]	@ (8009004 <prvAddNewTaskToReadyList+0xc8>)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f8a:	4b20      	ldr	r3, [pc, #128]	@ (800900c <prvAddNewTaskToReadyList+0xd0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	4a1e      	ldr	r2, [pc, #120]	@ (800900c <prvAddNewTaskToReadyList+0xd0>)
 8008f92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f94:	4b1d      	ldr	r3, [pc, #116]	@ (800900c <prvAddNewTaskToReadyList+0xd0>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8009010 <prvAddNewTaskToReadyList+0xd4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d903      	bls.n	8008fb0 <prvAddNewTaskToReadyList+0x74>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fac:	4a18      	ldr	r2, [pc, #96]	@ (8009010 <prvAddNewTaskToReadyList+0xd4>)
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4a15      	ldr	r2, [pc, #84]	@ (8009014 <prvAddNewTaskToReadyList+0xd8>)
 8008fbe:	441a      	add	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	f7ff f901 	bl	80081ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fcc:	f001 fa7e 	bl	800a4cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8009008 <prvAddNewTaskToReadyList+0xcc>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00e      	beq.n	8008ff6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009004 <prvAddNewTaskToReadyList+0xc8>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d207      	bcs.n	8008ff6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8009018 <prvAddNewTaskToReadyList+0xdc>)
 8008fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	2400107c 	.word	0x2400107c
 8009004:	24000ba8 	.word	0x24000ba8
 8009008:	24001088 	.word	0x24001088
 800900c:	24001098 	.word	0x24001098
 8009010:	24001084 	.word	0x24001084
 8009014:	24000bac 	.word	0x24000bac
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d018      	beq.n	8009060 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800902e:	4b14      	ldr	r3, [pc, #80]	@ (8009080 <vTaskDelay+0x64>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <vTaskDelay+0x32>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	60bb      	str	r3, [r7, #8]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800904e:	f000 f883 	bl	8009158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009052:	2100      	movs	r1, #0
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fd2b 	bl	8009ab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800905a:	f000 f88b 	bl	8009174 <xTaskResumeAll>
 800905e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d107      	bne.n	8009076 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009066:	4b07      	ldr	r3, [pc, #28]	@ (8009084 <vTaskDelay+0x68>)
 8009068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	240010a4 	.word	0x240010a4
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08a      	sub	sp, #40	@ 0x28
 800908c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009096:	463a      	mov	r2, r7
 8009098:	1d39      	adds	r1, r7, #4
 800909a:	f107 0308 	add.w	r3, r7, #8
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff f834 	bl	800810c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	9202      	str	r2, [sp, #8]
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	2300      	movs	r3, #0
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	2300      	movs	r3, #0
 80090b4:	460a      	mov	r2, r1
 80090b6:	4922      	ldr	r1, [pc, #136]	@ (8009140 <vTaskStartScheduler+0xb8>)
 80090b8:	4822      	ldr	r0, [pc, #136]	@ (8009144 <vTaskStartScheduler+0xbc>)
 80090ba:	f7ff fe09 	bl	8008cd0 <xTaskCreateStatic>
 80090be:	4603      	mov	r3, r0
 80090c0:	4a21      	ldr	r2, [pc, #132]	@ (8009148 <vTaskStartScheduler+0xc0>)
 80090c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090c4:	4b20      	ldr	r3, [pc, #128]	@ (8009148 <vTaskStartScheduler+0xc0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090cc:	2301      	movs	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e001      	b.n	80090d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d102      	bne.n	80090e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090dc:	f000 fd3c 	bl	8009b58 <xTimerCreateTimerTask>
 80090e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d116      	bne.n	8009116 <vTaskStartScheduler+0x8e>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	613b      	str	r3, [r7, #16]
}
 80090fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090fc:	4b13      	ldr	r3, [pc, #76]	@ (800914c <vTaskStartScheduler+0xc4>)
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009102:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009104:	4b12      	ldr	r3, [pc, #72]	@ (8009150 <vTaskStartScheduler+0xc8>)
 8009106:	2201      	movs	r2, #1
 8009108:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800910a:	4b12      	ldr	r3, [pc, #72]	@ (8009154 <vTaskStartScheduler+0xcc>)
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009110:	f001 f906 	bl	800a320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009114:	e00f      	b.n	8009136 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911c:	d10b      	bne.n	8009136 <vTaskStartScheduler+0xae>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60fb      	str	r3, [r7, #12]
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	e7fd      	b.n	8009132 <vTaskStartScheduler+0xaa>
}
 8009136:	bf00      	nop
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	0800f368 	.word	0x0800f368
 8009144:	08009779 	.word	0x08009779
 8009148:	240010a0 	.word	0x240010a0
 800914c:	2400109c 	.word	0x2400109c
 8009150:	24001088 	.word	0x24001088
 8009154:	24001080 	.word	0x24001080

08009158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800915c:	4b04      	ldr	r3, [pc, #16]	@ (8009170 <vTaskSuspendAll+0x18>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	4a03      	ldr	r2, [pc, #12]	@ (8009170 <vTaskSuspendAll+0x18>)
 8009164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009166:	bf00      	nop
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	240010a4 	.word	0x240010a4

08009174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009182:	4b42      	ldr	r3, [pc, #264]	@ (800928c <xTaskResumeAll+0x118>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10b      	bne.n	80091a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	603b      	str	r3, [r7, #0]
}
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	e7fd      	b.n	800919e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091a2:	f001 f961 	bl	800a468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091a6:	4b39      	ldr	r3, [pc, #228]	@ (800928c <xTaskResumeAll+0x118>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	4a37      	ldr	r2, [pc, #220]	@ (800928c <xTaskResumeAll+0x118>)
 80091ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b0:	4b36      	ldr	r3, [pc, #216]	@ (800928c <xTaskResumeAll+0x118>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d162      	bne.n	800927e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091b8:	4b35      	ldr	r3, [pc, #212]	@ (8009290 <xTaskResumeAll+0x11c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d05e      	beq.n	800927e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091c0:	e02f      	b.n	8009222 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c2:	4b34      	ldr	r3, [pc, #208]	@ (8009294 <xTaskResumeAll+0x120>)
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3318      	adds	r3, #24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff f85a 	bl	8008288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3304      	adds	r3, #4
 80091d8:	4618      	mov	r0, r3
 80091da:	f7ff f855 	bl	8008288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e2:	4b2d      	ldr	r3, [pc, #180]	@ (8009298 <xTaskResumeAll+0x124>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d903      	bls.n	80091f2 <xTaskResumeAll+0x7e>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009298 <xTaskResumeAll+0x124>)
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4a27      	ldr	r2, [pc, #156]	@ (800929c <xTaskResumeAll+0x128>)
 8009200:	441a      	add	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3304      	adds	r3, #4
 8009206:	4619      	mov	r1, r3
 8009208:	4610      	mov	r0, r2
 800920a:	f7fe ffe0 	bl	80081ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009212:	4b23      	ldr	r3, [pc, #140]	@ (80092a0 <xTaskResumeAll+0x12c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009218:	429a      	cmp	r2, r3
 800921a:	d302      	bcc.n	8009222 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800921c:	4b21      	ldr	r3, [pc, #132]	@ (80092a4 <xTaskResumeAll+0x130>)
 800921e:	2201      	movs	r2, #1
 8009220:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009222:	4b1c      	ldr	r3, [pc, #112]	@ (8009294 <xTaskResumeAll+0x120>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1cb      	bne.n	80091c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009230:	f000 fb90 	bl	8009954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009234:	4b1c      	ldr	r3, [pc, #112]	@ (80092a8 <xTaskResumeAll+0x134>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d010      	beq.n	8009262 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009240:	f000 f846 	bl	80092d0 <xTaskIncrementTick>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800924a:	4b16      	ldr	r3, [pc, #88]	@ (80092a4 <xTaskResumeAll+0x130>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3b01      	subs	r3, #1
 8009254:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f1      	bne.n	8009240 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800925c:	4b12      	ldr	r3, [pc, #72]	@ (80092a8 <xTaskResumeAll+0x134>)
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009262:	4b10      	ldr	r3, [pc, #64]	@ (80092a4 <xTaskResumeAll+0x130>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800926a:	2301      	movs	r3, #1
 800926c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800926e:	4b0f      	ldr	r3, [pc, #60]	@ (80092ac <xTaskResumeAll+0x138>)
 8009270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800927e:	f001 f925 	bl	800a4cc <vPortExitCritical>

	return xAlreadyYielded;
 8009282:	68bb      	ldr	r3, [r7, #8]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	240010a4 	.word	0x240010a4
 8009290:	2400107c 	.word	0x2400107c
 8009294:	2400103c 	.word	0x2400103c
 8009298:	24001084 	.word	0x24001084
 800929c:	24000bac 	.word	0x24000bac
 80092a0:	24000ba8 	.word	0x24000ba8
 80092a4:	24001090 	.word	0x24001090
 80092a8:	2400108c 	.word	0x2400108c
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092b6:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <xTaskGetTickCount+0x1c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092bc:	687b      	ldr	r3, [r7, #4]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	24001080 	.word	0x24001080

080092d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092da:	4b4f      	ldr	r3, [pc, #316]	@ (8009418 <xTaskIncrementTick+0x148>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f040 8090 	bne.w	8009404 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092e4:	4b4d      	ldr	r3, [pc, #308]	@ (800941c <xTaskIncrementTick+0x14c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092ec:	4a4b      	ldr	r2, [pc, #300]	@ (800941c <xTaskIncrementTick+0x14c>)
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d121      	bne.n	800933c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80092f8:	4b49      	ldr	r3, [pc, #292]	@ (8009420 <xTaskIncrementTick+0x150>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00b      	beq.n	800931a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	603b      	str	r3, [r7, #0]
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	e7fd      	b.n	8009316 <xTaskIncrementTick+0x46>
 800931a:	4b41      	ldr	r3, [pc, #260]	@ (8009420 <xTaskIncrementTick+0x150>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	4b40      	ldr	r3, [pc, #256]	@ (8009424 <xTaskIncrementTick+0x154>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a3e      	ldr	r2, [pc, #248]	@ (8009420 <xTaskIncrementTick+0x150>)
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	4a3e      	ldr	r2, [pc, #248]	@ (8009424 <xTaskIncrementTick+0x154>)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	4b3e      	ldr	r3, [pc, #248]	@ (8009428 <xTaskIncrementTick+0x158>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3301      	adds	r3, #1
 8009334:	4a3c      	ldr	r2, [pc, #240]	@ (8009428 <xTaskIncrementTick+0x158>)
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	f000 fb0c 	bl	8009954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800933c:	4b3b      	ldr	r3, [pc, #236]	@ (800942c <xTaskIncrementTick+0x15c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	429a      	cmp	r2, r3
 8009344:	d349      	bcc.n	80093da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009346:	4b36      	ldr	r3, [pc, #216]	@ (8009420 <xTaskIncrementTick+0x150>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009350:	4b36      	ldr	r3, [pc, #216]	@ (800942c <xTaskIncrementTick+0x15c>)
 8009352:	f04f 32ff 	mov.w	r2, #4294967295
 8009356:	601a      	str	r2, [r3, #0]
					break;
 8009358:	e03f      	b.n	80093da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935a:	4b31      	ldr	r3, [pc, #196]	@ (8009420 <xTaskIncrementTick+0x150>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	429a      	cmp	r2, r3
 8009370:	d203      	bcs.n	800937a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009372:	4a2e      	ldr	r2, [pc, #184]	@ (800942c <xTaskIncrementTick+0x15c>)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009378:	e02f      	b.n	80093da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3304      	adds	r3, #4
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe ff82 	bl	8008288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	3318      	adds	r3, #24
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe ff79 	bl	8008288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800939a:	4b25      	ldr	r3, [pc, #148]	@ (8009430 <xTaskIncrementTick+0x160>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d903      	bls.n	80093aa <xTaskIncrementTick+0xda>
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a6:	4a22      	ldr	r2, [pc, #136]	@ (8009430 <xTaskIncrementTick+0x160>)
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009434 <xTaskIncrementTick+0x164>)
 80093b8:	441a      	add	r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	3304      	adds	r3, #4
 80093be:	4619      	mov	r1, r3
 80093c0:	4610      	mov	r0, r2
 80093c2:	f7fe ff04 	bl	80081ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009438 <xTaskIncrementTick+0x168>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d3b8      	bcc.n	8009346 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80093d4:	2301      	movs	r3, #1
 80093d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093d8:	e7b5      	b.n	8009346 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093da:	4b17      	ldr	r3, [pc, #92]	@ (8009438 <xTaskIncrementTick+0x168>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e0:	4914      	ldr	r1, [pc, #80]	@ (8009434 <xTaskIncrementTick+0x164>)
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d901      	bls.n	80093f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80093f2:	2301      	movs	r3, #1
 80093f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093f6:	4b11      	ldr	r3, [pc, #68]	@ (800943c <xTaskIncrementTick+0x16c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d007      	beq.n	800940e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80093fe:	2301      	movs	r3, #1
 8009400:	617b      	str	r3, [r7, #20]
 8009402:	e004      	b.n	800940e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009404:	4b0e      	ldr	r3, [pc, #56]	@ (8009440 <xTaskIncrementTick+0x170>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3301      	adds	r3, #1
 800940a:	4a0d      	ldr	r2, [pc, #52]	@ (8009440 <xTaskIncrementTick+0x170>)
 800940c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800940e:	697b      	ldr	r3, [r7, #20]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	240010a4 	.word	0x240010a4
 800941c:	24001080 	.word	0x24001080
 8009420:	24001034 	.word	0x24001034
 8009424:	24001038 	.word	0x24001038
 8009428:	24001094 	.word	0x24001094
 800942c:	2400109c 	.word	0x2400109c
 8009430:	24001084 	.word	0x24001084
 8009434:	24000bac 	.word	0x24000bac
 8009438:	24000ba8 	.word	0x24000ba8
 800943c:	24001090 	.word	0x24001090
 8009440:	2400108c 	.word	0x2400108c

08009444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800944a:	4b28      	ldr	r3, [pc, #160]	@ (80094ec <vTaskSwitchContext+0xa8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009452:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <vTaskSwitchContext+0xac>)
 8009454:	2201      	movs	r2, #1
 8009456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009458:	e042      	b.n	80094e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800945a:	4b25      	ldr	r3, [pc, #148]	@ (80094f0 <vTaskSwitchContext+0xac>)
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009460:	4b24      	ldr	r3, [pc, #144]	@ (80094f4 <vTaskSwitchContext+0xb0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e011      	b.n	800948c <vTaskSwitchContext+0x48>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10b      	bne.n	8009486 <vTaskSwitchContext+0x42>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <vTaskSwitchContext+0x3e>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3b01      	subs	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	491a      	ldr	r1, [pc, #104]	@ (80094f8 <vTaskSwitchContext+0xb4>)
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0e3      	beq.n	8009468 <vTaskSwitchContext+0x24>
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4a13      	ldr	r2, [pc, #76]	@ (80094f8 <vTaskSwitchContext+0xb4>)
 80094ac:	4413      	add	r3, r2
 80094ae:	60bb      	str	r3, [r7, #8]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	605a      	str	r2, [r3, #4]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3308      	adds	r3, #8
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d104      	bne.n	80094d0 <vTaskSwitchContext+0x8c>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	605a      	str	r2, [r3, #4]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	4a09      	ldr	r2, [pc, #36]	@ (80094fc <vTaskSwitchContext+0xb8>)
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	4a06      	ldr	r2, [pc, #24]	@ (80094f4 <vTaskSwitchContext+0xb0>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6013      	str	r3, [r2, #0]
}
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	240010a4 	.word	0x240010a4
 80094f0:	24001090 	.word	0x24001090
 80094f4:	24001084 	.word	0x24001084
 80094f8:	24000bac 	.word	0x24000bac
 80094fc:	24000ba8 	.word	0x24000ba8

08009500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10b      	bne.n	8009528 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	60fb      	str	r3, [r7, #12]
}
 8009522:	bf00      	nop
 8009524:	bf00      	nop
 8009526:	e7fd      	b.n	8009524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009528:	4b07      	ldr	r3, [pc, #28]	@ (8009548 <vTaskPlaceOnEventList+0x48>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3318      	adds	r3, #24
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7fe fe70 	bl	8008216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009536:	2101      	movs	r1, #1
 8009538:	6838      	ldr	r0, [r7, #0]
 800953a:	f000 fab9 	bl	8009ab0 <prvAddCurrentTaskToDelayedList>
}
 800953e:	bf00      	nop
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	24000ba8 	.word	0x24000ba8

0800954c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10b      	bne.n	8009576 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	617b      	str	r3, [r7, #20]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009576:	4b0a      	ldr	r3, [pc, #40]	@ (80095a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3318      	adds	r3, #24
 800957c:	4619      	mov	r1, r3
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f7fe fe25 	bl	80081ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800958a:	f04f 33ff 	mov.w	r3, #4294967295
 800958e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	68b8      	ldr	r0, [r7, #8]
 8009594:	f000 fa8c 	bl	8009ab0 <prvAddCurrentTaskToDelayedList>
	}
 8009598:	bf00      	nop
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	24000ba8 	.word	0x24000ba8

080095a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10b      	bne.n	80095d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	60fb      	str	r3, [r7, #12]
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	e7fd      	b.n	80095ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	3318      	adds	r3, #24
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe fe56 	bl	8008288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009654 <xTaskRemoveFromEventList+0xb0>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d11d      	bne.n	8009620 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe fe4d 	bl	8008288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f2:	4b19      	ldr	r3, [pc, #100]	@ (8009658 <xTaskRemoveFromEventList+0xb4>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d903      	bls.n	8009602 <xTaskRemoveFromEventList+0x5e>
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	4a16      	ldr	r2, [pc, #88]	@ (8009658 <xTaskRemoveFromEventList+0xb4>)
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4a13      	ldr	r2, [pc, #76]	@ (800965c <xTaskRemoveFromEventList+0xb8>)
 8009610:	441a      	add	r2, r3
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	3304      	adds	r3, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fe fdd8 	bl	80081ce <vListInsertEnd>
 800961e:	e005      	b.n	800962c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3318      	adds	r3, #24
 8009624:	4619      	mov	r1, r3
 8009626:	480e      	ldr	r0, [pc, #56]	@ (8009660 <xTaskRemoveFromEventList+0xbc>)
 8009628:	f7fe fdd1 	bl	80081ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009630:	4b0c      	ldr	r3, [pc, #48]	@ (8009664 <xTaskRemoveFromEventList+0xc0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009636:	429a      	cmp	r2, r3
 8009638:	d905      	bls.n	8009646 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800963a:	2301      	movs	r3, #1
 800963c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800963e:	4b0a      	ldr	r3, [pc, #40]	@ (8009668 <xTaskRemoveFromEventList+0xc4>)
 8009640:	2201      	movs	r2, #1
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	e001      	b.n	800964a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009646:	2300      	movs	r3, #0
 8009648:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800964a:	697b      	ldr	r3, [r7, #20]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	240010a4 	.word	0x240010a4
 8009658:	24001084 	.word	0x24001084
 800965c:	24000bac 	.word	0x24000bac
 8009660:	2400103c 	.word	0x2400103c
 8009664:	24000ba8 	.word	0x24000ba8
 8009668:	24001090 	.word	0x24001090

0800966c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009674:	4b06      	ldr	r3, [pc, #24]	@ (8009690 <vTaskInternalSetTimeOutState+0x24>)
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <vTaskInternalSetTimeOutState+0x28>)
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	605a      	str	r2, [r3, #4]
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	24001094 	.word	0x24001094
 8009694:	24001080 	.word	0x24001080

08009698 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10b      	bne.n	80096c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	613b      	str	r3, [r7, #16]
}
 80096ba:	bf00      	nop
 80096bc:	bf00      	nop
 80096be:	e7fd      	b.n	80096bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	60fb      	str	r3, [r7, #12]
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	e7fd      	b.n	80096da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80096de:	f000 fec3 	bl	800a468 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009758 <xTaskCheckForTimeOut+0xc0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fa:	d102      	bne.n	8009702 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61fb      	str	r3, [r7, #28]
 8009700:	e023      	b.n	800974a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	4b15      	ldr	r3, [pc, #84]	@ (800975c <xTaskCheckForTimeOut+0xc4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d007      	beq.n	800971e <xTaskCheckForTimeOut+0x86>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	429a      	cmp	r2, r3
 8009716:	d302      	bcc.n	800971e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009718:	2301      	movs	r3, #1
 800971a:	61fb      	str	r3, [r7, #28]
 800971c:	e015      	b.n	800974a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	429a      	cmp	r2, r3
 8009726:	d20b      	bcs.n	8009740 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ff99 	bl	800966c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800973a:	2300      	movs	r3, #0
 800973c:	61fb      	str	r3, [r7, #28]
 800973e:	e004      	b.n	800974a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009746:	2301      	movs	r3, #1
 8009748:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800974a:	f000 febf 	bl	800a4cc <vPortExitCritical>

	return xReturn;
 800974e:	69fb      	ldr	r3, [r7, #28]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3720      	adds	r7, #32
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	24001080 	.word	0x24001080
 800975c:	24001094 	.word	0x24001094

08009760 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009764:	4b03      	ldr	r3, [pc, #12]	@ (8009774 <vTaskMissedYield+0x14>)
 8009766:	2201      	movs	r2, #1
 8009768:	601a      	str	r2, [r3, #0]
}
 800976a:	bf00      	nop
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	24001090 	.word	0x24001090

08009778 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009780:	f000 f852 	bl	8009828 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009784:	4b06      	ldr	r3, [pc, #24]	@ (80097a0 <prvIdleTask+0x28>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d9f9      	bls.n	8009780 <prvIdleTask+0x8>
			{
				taskYIELD();
 800978c:	4b05      	ldr	r3, [pc, #20]	@ (80097a4 <prvIdleTask+0x2c>)
 800978e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800979c:	e7f0      	b.n	8009780 <prvIdleTask+0x8>
 800979e:	bf00      	nop
 80097a0:	24000bac 	.word	0x24000bac
 80097a4:	e000ed04 	.word	0xe000ed04

080097a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097ae:	2300      	movs	r3, #0
 80097b0:	607b      	str	r3, [r7, #4]
 80097b2:	e00c      	b.n	80097ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4a12      	ldr	r2, [pc, #72]	@ (8009808 <prvInitialiseTaskLists+0x60>)
 80097c0:	4413      	add	r3, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fe fcd6 	bl	8008174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3301      	adds	r3, #1
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b37      	cmp	r3, #55	@ 0x37
 80097d2:	d9ef      	bls.n	80097b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097d4:	480d      	ldr	r0, [pc, #52]	@ (800980c <prvInitialiseTaskLists+0x64>)
 80097d6:	f7fe fccd 	bl	8008174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097da:	480d      	ldr	r0, [pc, #52]	@ (8009810 <prvInitialiseTaskLists+0x68>)
 80097dc:	f7fe fcca 	bl	8008174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097e0:	480c      	ldr	r0, [pc, #48]	@ (8009814 <prvInitialiseTaskLists+0x6c>)
 80097e2:	f7fe fcc7 	bl	8008174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097e6:	480c      	ldr	r0, [pc, #48]	@ (8009818 <prvInitialiseTaskLists+0x70>)
 80097e8:	f7fe fcc4 	bl	8008174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097ec:	480b      	ldr	r0, [pc, #44]	@ (800981c <prvInitialiseTaskLists+0x74>)
 80097ee:	f7fe fcc1 	bl	8008174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <prvInitialiseTaskLists+0x78>)
 80097f4:	4a05      	ldr	r2, [pc, #20]	@ (800980c <prvInitialiseTaskLists+0x64>)
 80097f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009824 <prvInitialiseTaskLists+0x7c>)
 80097fa:	4a05      	ldr	r2, [pc, #20]	@ (8009810 <prvInitialiseTaskLists+0x68>)
 80097fc:	601a      	str	r2, [r3, #0]
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	24000bac 	.word	0x24000bac
 800980c:	2400100c 	.word	0x2400100c
 8009810:	24001020 	.word	0x24001020
 8009814:	2400103c 	.word	0x2400103c
 8009818:	24001050 	.word	0x24001050
 800981c:	24001068 	.word	0x24001068
 8009820:	24001034 	.word	0x24001034
 8009824:	24001038 	.word	0x24001038

08009828 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800982e:	e019      	b.n	8009864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009830:	f000 fe1a 	bl	800a468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009834:	4b10      	ldr	r3, [pc, #64]	@ (8009878 <prvCheckTasksWaitingTermination+0x50>)
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3304      	adds	r3, #4
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe fd21 	bl	8008288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009846:	4b0d      	ldr	r3, [pc, #52]	@ (800987c <prvCheckTasksWaitingTermination+0x54>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3b01      	subs	r3, #1
 800984c:	4a0b      	ldr	r2, [pc, #44]	@ (800987c <prvCheckTasksWaitingTermination+0x54>)
 800984e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009850:	4b0b      	ldr	r3, [pc, #44]	@ (8009880 <prvCheckTasksWaitingTermination+0x58>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3b01      	subs	r3, #1
 8009856:	4a0a      	ldr	r2, [pc, #40]	@ (8009880 <prvCheckTasksWaitingTermination+0x58>)
 8009858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800985a:	f000 fe37 	bl	800a4cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f848 	bl	80098f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009864:	4b06      	ldr	r3, [pc, #24]	@ (8009880 <prvCheckTasksWaitingTermination+0x58>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e1      	bne.n	8009830 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800986c:	bf00      	nop
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	24001050 	.word	0x24001050
 800987c:	2400107c 	.word	0x2400107c
 8009880:	24001064 	.word	0x24001064

08009884 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009890:	e005      	b.n	800989e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3301      	adds	r3, #1
 8009896:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3301      	adds	r3, #1
 800989c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2ba5      	cmp	r3, #165	@ 0xa5
 80098a4:	d0f5      	beq.n	8009892 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	089b      	lsrs	r3, r3, #2
 80098aa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	b29b      	uxth	r3, r3
	}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <uxTaskGetStackHighWaterMark+0x14>
 80098ca:	4b09      	ldr	r3, [pc, #36]	@ (80098f0 <uxTaskGetStackHighWaterMark+0x34>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	e000      	b.n	80098d2 <uxTaskGetStackHighWaterMark+0x16>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80098da:	6938      	ldr	r0, [r7, #16]
 80098dc:	f7ff ffd2 	bl	8009884 <prvTaskCheckFreeStackSpace>
 80098e0:	4603      	mov	r3, r0
 80098e2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80098e4:	68fb      	ldr	r3, [r7, #12]
	}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	24000ba8 	.word	0x24000ba8

080098f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009902:	2b00      	cmp	r3, #0
 8009904:	d108      	bne.n	8009918 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800990a:	4618      	mov	r0, r3
 800990c:	f000 ff9c 	bl	800a848 <vPortFree>
				vPortFree( pxTCB );
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 ff99 	bl	800a848 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009916:	e019      	b.n	800994c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800991e:	2b01      	cmp	r3, #1
 8009920:	d103      	bne.n	800992a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 ff90 	bl	800a848 <vPortFree>
	}
 8009928:	e010      	b.n	800994c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009930:	2b02      	cmp	r3, #2
 8009932:	d00b      	beq.n	800994c <prvDeleteTCB+0x58>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	60fb      	str	r3, [r7, #12]
}
 8009946:	bf00      	nop
 8009948:	bf00      	nop
 800994a:	e7fd      	b.n	8009948 <prvDeleteTCB+0x54>
	}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800995a:	4b0c      	ldr	r3, [pc, #48]	@ (800998c <prvResetNextTaskUnblockTime+0x38>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d104      	bne.n	800996e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009964:	4b0a      	ldr	r3, [pc, #40]	@ (8009990 <prvResetNextTaskUnblockTime+0x3c>)
 8009966:	f04f 32ff 	mov.w	r2, #4294967295
 800996a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800996c:	e008      	b.n	8009980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996e:	4b07      	ldr	r3, [pc, #28]	@ (800998c <prvResetNextTaskUnblockTime+0x38>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	4a04      	ldr	r2, [pc, #16]	@ (8009990 <prvResetNextTaskUnblockTime+0x3c>)
 800997e:	6013      	str	r3, [r2, #0]
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	24001034 	.word	0x24001034
 8009990:	2400109c 	.word	0x2400109c

08009994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800999a:	4b0b      	ldr	r3, [pc, #44]	@ (80099c8 <xTaskGetSchedulerState+0x34>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099a2:	2301      	movs	r3, #1
 80099a4:	607b      	str	r3, [r7, #4]
 80099a6:	e008      	b.n	80099ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099a8:	4b08      	ldr	r3, [pc, #32]	@ (80099cc <xTaskGetSchedulerState+0x38>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d102      	bne.n	80099b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099b0:	2302      	movs	r3, #2
 80099b2:	607b      	str	r3, [r7, #4]
 80099b4:	e001      	b.n	80099ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099ba:	687b      	ldr	r3, [r7, #4]
	}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	24001088 	.word	0x24001088
 80099cc:	240010a4 	.word	0x240010a4

080099d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d058      	beq.n	8009a98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099e6:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa4 <xTaskPriorityDisinherit+0xd4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d00b      	beq.n	8009a08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	e7fd      	b.n	8009a04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	60bb      	str	r3, [r7, #8]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a2c:	1e5a      	subs	r2, r3, #1
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d02c      	beq.n	8009a98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d128      	bne.n	8009a98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fc1c 	bl	8008288 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a68:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa8 <xTaskPriorityDisinherit+0xd8>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d903      	bls.n	8009a78 <xTaskPriorityDisinherit+0xa8>
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a74:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa8 <xTaskPriorityDisinherit+0xd8>)
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4a09      	ldr	r2, [pc, #36]	@ (8009aac <xTaskPriorityDisinherit+0xdc>)
 8009a86:	441a      	add	r2, r3
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7fe fb9d 	bl	80081ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a98:	697b      	ldr	r3, [r7, #20]
	}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	24000ba8 	.word	0x24000ba8
 8009aa8:	24001084 	.word	0x24001084
 8009aac:	24000bac 	.word	0x24000bac

08009ab0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009aba:	4b21      	ldr	r3, [pc, #132]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0x90>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ac0:	4b20      	ldr	r3, [pc, #128]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fbde 	bl	8008288 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad2:	d10a      	bne.n	8009aea <prvAddCurrentTaskToDelayedList+0x3a>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d007      	beq.n	8009aea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ada:	4b1a      	ldr	r3, [pc, #104]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4819      	ldr	r0, [pc, #100]	@ (8009b48 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ae4:	f7fe fb73 	bl	80081ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ae8:	e026      	b.n	8009b38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4413      	add	r3, r2
 8009af0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009af2:	4b14      	ldr	r3, [pc, #80]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d209      	bcs.n	8009b16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b02:	4b12      	ldr	r3, [pc, #72]	@ (8009b4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	4b0f      	ldr	r3, [pc, #60]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	f7fe fb81 	bl	8008216 <vListInsert>
}
 8009b14:	e010      	b.n	8009b38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b16:	4b0e      	ldr	r3, [pc, #56]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	4619      	mov	r1, r3
 8009b22:	4610      	mov	r0, r2
 8009b24:	f7fe fb77 	bl	8008216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b28:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d202      	bcs.n	8009b38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b32:	4a08      	ldr	r2, [pc, #32]	@ (8009b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	6013      	str	r3, [r2, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	24001080 	.word	0x24001080
 8009b44:	24000ba8 	.word	0x24000ba8
 8009b48:	24001068 	.word	0x24001068
 8009b4c:	24001038 	.word	0x24001038
 8009b50:	24001034 	.word	0x24001034
 8009b54:	2400109c 	.word	0x2400109c

08009b58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	@ 0x28
 8009b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b62:	f000 fb13 	bl	800a18c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b66:	4b1d      	ldr	r3, [pc, #116]	@ (8009bdc <xTimerCreateTimerTask+0x84>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d021      	beq.n	8009bb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b76:	1d3a      	adds	r2, r7, #4
 8009b78:	f107 0108 	add.w	r1, r7, #8
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fadd 	bl	8008140 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b86:	6879      	ldr	r1, [r7, #4]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	9202      	str	r2, [sp, #8]
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	2302      	movs	r3, #2
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	2300      	movs	r3, #0
 8009b96:	460a      	mov	r2, r1
 8009b98:	4911      	ldr	r1, [pc, #68]	@ (8009be0 <xTimerCreateTimerTask+0x88>)
 8009b9a:	4812      	ldr	r0, [pc, #72]	@ (8009be4 <xTimerCreateTimerTask+0x8c>)
 8009b9c:	f7ff f898 	bl	8008cd0 <xTaskCreateStatic>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4a11      	ldr	r2, [pc, #68]	@ (8009be8 <xTimerCreateTimerTask+0x90>)
 8009ba4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ba6:	4b10      	ldr	r3, [pc, #64]	@ (8009be8 <xTimerCreateTimerTask+0x90>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10b      	bne.n	8009bd0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	613b      	str	r3, [r7, #16]
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	e7fd      	b.n	8009bcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009bd0:	697b      	ldr	r3, [r7, #20]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	240010d8 	.word	0x240010d8
 8009be0:	0800f370 	.word	0x0800f370
 8009be4:	08009d25 	.word	0x08009d25
 8009be8:	240010dc 	.word	0x240010dc

08009bec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	@ 0x28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10b      	bne.n	8009c1c <xTimerGenericCommand+0x30>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	623b      	str	r3, [r7, #32]
}
 8009c16:	bf00      	nop
 8009c18:	bf00      	nop
 8009c1a:	e7fd      	b.n	8009c18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c1c:	4b19      	ldr	r3, [pc, #100]	@ (8009c84 <xTimerGenericCommand+0x98>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d02a      	beq.n	8009c7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b05      	cmp	r3, #5
 8009c34:	dc18      	bgt.n	8009c68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c36:	f7ff fead 	bl	8009994 <xTaskGetSchedulerState>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d109      	bne.n	8009c54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c40:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <xTimerGenericCommand+0x98>)
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	f107 0110 	add.w	r1, r7, #16
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c4c:	f7fe fc50 	bl	80084f0 <xQueueGenericSend>
 8009c50:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c52:	e012      	b.n	8009c7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c54:	4b0b      	ldr	r3, [pc, #44]	@ (8009c84 <xTimerGenericCommand+0x98>)
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	f107 0110 	add.w	r1, r7, #16
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f7fe fc46 	bl	80084f0 <xQueueGenericSend>
 8009c64:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c66:	e008      	b.n	8009c7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c68:	4b06      	ldr	r3, [pc, #24]	@ (8009c84 <xTimerGenericCommand+0x98>)
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	f107 0110 	add.w	r1, r7, #16
 8009c70:	2300      	movs	r3, #0
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	f7fe fd3e 	bl	80086f4 <xQueueGenericSendFromISR>
 8009c78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3728      	adds	r7, #40	@ 0x28
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	240010d8 	.word	0x240010d8

08009c88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c92:	4b23      	ldr	r3, [pc, #140]	@ (8009d20 <prvProcessExpiredTimer+0x98>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe faf1 	bl	8008288 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d023      	beq.n	8009cfc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	18d1      	adds	r1, r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	6978      	ldr	r0, [r7, #20]
 8009cc2:	f000 f8d5 	bl	8009e70 <prvInsertTimerInActiveList>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d020      	beq.n	8009d0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	6978      	ldr	r0, [r7, #20]
 8009cd8:	f7ff ff88 	bl	8009bec <xTimerGenericCommand>
 8009cdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d114      	bne.n	8009d0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	60fb      	str	r3, [r7, #12]
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d02:	f023 0301 	bic.w	r3, r3, #1
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	4798      	blx	r3
}
 8009d16:	bf00      	nop
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	240010d0 	.word	0x240010d0

08009d24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d2c:	f107 0308 	add.w	r3, r7, #8
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 f859 	bl	8009de8 <prvGetNextExpireTime>
 8009d36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 f805 	bl	8009d4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d42:	f000 f8d7 	bl	8009ef4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d46:	bf00      	nop
 8009d48:	e7f0      	b.n	8009d2c <prvTimerTask+0x8>
	...

08009d4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d56:	f7ff f9ff 	bl	8009158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 f866 	bl	8009e30 <prvSampleTimeNow>
 8009d64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d130      	bne.n	8009dce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <prvProcessTimerOrBlockTask+0x3c>
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d806      	bhi.n	8009d88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d7a:	f7ff f9fb 	bl	8009174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff ff81 	bl	8009c88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d86:	e024      	b.n	8009dd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d008      	beq.n	8009da0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d8e:	4b13      	ldr	r3, [pc, #76]	@ (8009ddc <prvProcessTimerOrBlockTask+0x90>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <prvProcessTimerOrBlockTask+0x50>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e000      	b.n	8009d9e <prvProcessTimerOrBlockTask+0x52>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009da0:	4b0f      	ldr	r3, [pc, #60]	@ (8009de0 <prvProcessTimerOrBlockTask+0x94>)
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	4619      	mov	r1, r3
 8009dae:	f7fe ff5b 	bl	8008c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009db2:	f7ff f9df 	bl	8009174 <xTaskResumeAll>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009dbc:	4b09      	ldr	r3, [pc, #36]	@ (8009de4 <prvProcessTimerOrBlockTask+0x98>)
 8009dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	f3bf 8f6f 	isb	sy
}
 8009dcc:	e001      	b.n	8009dd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009dce:	f7ff f9d1 	bl	8009174 <xTaskResumeAll>
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	240010d4 	.word	0x240010d4
 8009de0:	240010d8 	.word	0x240010d8
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009df0:	4b0e      	ldr	r3, [pc, #56]	@ (8009e2c <prvGetNextExpireTime+0x44>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <prvGetNextExpireTime+0x16>
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	e000      	b.n	8009e00 <prvGetNextExpireTime+0x18>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d105      	bne.n	8009e18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <prvGetNextExpireTime+0x44>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	e001      	b.n	8009e1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	240010d0 	.word	0x240010d0

08009e30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e38:	f7ff fa3a 	bl	80092b0 <xTaskGetTickCount>
 8009e3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e6c <prvSampleTimeNow+0x3c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d205      	bcs.n	8009e54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e48:	f000 f93a 	bl	800a0c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	e002      	b.n	8009e5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e5a:	4a04      	ldr	r2, [pc, #16]	@ (8009e6c <prvSampleTimeNow+0x3c>)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e60:	68fb      	ldr	r3, [r7, #12]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	240010e0 	.word	0x240010e0

08009e70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d812      	bhi.n	8009ebc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	1ad2      	subs	r2, r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d302      	bcc.n	8009eaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	e01b      	b.n	8009ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009eaa:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <prvInsertTimerInActiveList+0x7c>)
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	f7fe f9ae 	bl	8008216 <vListInsert>
 8009eba:	e012      	b.n	8009ee2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d206      	bcs.n	8009ed2 <prvInsertTimerInActiveList+0x62>
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d302      	bcc.n	8009ed2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	e007      	b.n	8009ee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ed2:	4b07      	ldr	r3, [pc, #28]	@ (8009ef0 <prvInsertTimerInActiveList+0x80>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4619      	mov	r1, r3
 8009edc:	4610      	mov	r0, r2
 8009ede:	f7fe f99a 	bl	8008216 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ee2:	697b      	ldr	r3, [r7, #20]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	240010d4 	.word	0x240010d4
 8009ef0:	240010d0 	.word	0x240010d0

08009ef4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b08e      	sub	sp, #56	@ 0x38
 8009ef8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009efa:	e0ce      	b.n	800a09a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	da19      	bge.n	8009f36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f02:	1d3b      	adds	r3, r7, #4
 8009f04:	3304      	adds	r3, #4
 8009f06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10b      	bne.n	8009f26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	61fb      	str	r3, [r7, #28]
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	e7fd      	b.n	8009f22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f2c:	6850      	ldr	r0, [r2, #4]
 8009f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f30:	6892      	ldr	r2, [r2, #8]
 8009f32:	4611      	mov	r1, r2
 8009f34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f2c0 80ae 	blt.w	800a09a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d004      	beq.n	8009f54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe f99a 	bl	8008288 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f54:	463b      	mov	r3, r7
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff ff6a 	bl	8009e30 <prvSampleTimeNow>
 8009f5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b09      	cmp	r3, #9
 8009f62:	f200 8097 	bhi.w	800a094 <prvProcessReceivedCommands+0x1a0>
 8009f66:	a201      	add	r2, pc, #4	@ (adr r2, 8009f6c <prvProcessReceivedCommands+0x78>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009f95 	.word	0x08009f95
 8009f74:	08009f95 	.word	0x08009f95
 8009f78:	0800a00b 	.word	0x0800a00b
 8009f7c:	0800a01f 	.word	0x0800a01f
 8009f80:	0800a06b 	.word	0x0800a06b
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	08009f95 	.word	0x08009f95
 8009f8c:	0800a00b 	.word	0x0800a00b
 8009f90:	0800a01f 	.word	0x0800a01f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	18d1      	adds	r1, r2, r3
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fb4:	f7ff ff5c 	bl	8009e70 <prvInsertTimerInActiveList>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d06c      	beq.n	800a098 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d061      	beq.n	800a098 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	441a      	add	r2, r3
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fe6:	f7ff fe01 	bl	8009bec <xTimerGenericCommand>
 8009fea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d152      	bne.n	800a098 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	61bb      	str	r3, [r7, #24]
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	b2da      	uxtb	r2, r3
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a01c:	e03d      	b.n	800a09a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a020:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a024:	f043 0301 	orr.w	r3, r3, #1
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a034:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10b      	bne.n	800a056 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	617b      	str	r3, [r7, #20]
}
 800a050:	bf00      	nop
 800a052:	bf00      	nop
 800a054:	e7fd      	b.n	800a052 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	18d1      	adds	r1, r2, r3
 800a05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a064:	f7ff ff04 	bl	8009e70 <prvInsertTimerInActiveList>
					break;
 800a068:	e017      	b.n	800a09a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d103      	bne.n	800a080 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a078:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a07a:	f000 fbe5 	bl	800a848 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a07e:	e00c      	b.n	800a09a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a092:	e002      	b.n	800a09a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a094:	bf00      	nop
 800a096:	e000      	b.n	800a09a <prvProcessReceivedCommands+0x1a6>
					break;
 800a098:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a09a:	4b08      	ldr	r3, [pc, #32]	@ (800a0bc <prvProcessReceivedCommands+0x1c8>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	1d39      	adds	r1, r7, #4
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fbc4 	bl	8008830 <xQueueReceive>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f47f af26 	bne.w	8009efc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a0b0:	bf00      	nop
 800a0b2:	bf00      	nop
 800a0b4:	3730      	adds	r7, #48	@ 0x30
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	240010d8 	.word	0x240010d8

0800a0c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0c6:	e049      	b.n	800a15c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0c8:	4b2e      	ldr	r3, [pc, #184]	@ (800a184 <prvSwitchTimerLists+0xc4>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a184 <prvSwitchTimerLists+0xc4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe f8d1 	bl	8008288 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d02f      	beq.n	800a15c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	4413      	add	r3, r2
 800a104:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d90e      	bls.n	800a12c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a11a:	4b1a      	ldr	r3, [pc, #104]	@ (800a184 <prvSwitchTimerLists+0xc4>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	3304      	adds	r3, #4
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f7fe f876 	bl	8008216 <vListInsert>
 800a12a:	e017      	b.n	800a15c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a12c:	2300      	movs	r3, #0
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	2300      	movs	r3, #0
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	2100      	movs	r1, #0
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7ff fd58 	bl	8009bec <xTimerGenericCommand>
 800a13c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10b      	bne.n	800a15c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	603b      	str	r3, [r7, #0]
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	e7fd      	b.n	800a158 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a15c:	4b09      	ldr	r3, [pc, #36]	@ (800a184 <prvSwitchTimerLists+0xc4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1b0      	bne.n	800a0c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a166:	4b07      	ldr	r3, [pc, #28]	@ (800a184 <prvSwitchTimerLists+0xc4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a16c:	4b06      	ldr	r3, [pc, #24]	@ (800a188 <prvSwitchTimerLists+0xc8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a04      	ldr	r2, [pc, #16]	@ (800a184 <prvSwitchTimerLists+0xc4>)
 800a172:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a174:	4a04      	ldr	r2, [pc, #16]	@ (800a188 <prvSwitchTimerLists+0xc8>)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	6013      	str	r3, [r2, #0]
}
 800a17a:	bf00      	nop
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	240010d0 	.word	0x240010d0
 800a188:	240010d4 	.word	0x240010d4

0800a18c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a192:	f000 f969 	bl	800a468 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a196:	4b15      	ldr	r3, [pc, #84]	@ (800a1ec <prvCheckForValidListAndQueue+0x60>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d120      	bne.n	800a1e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a19e:	4814      	ldr	r0, [pc, #80]	@ (800a1f0 <prvCheckForValidListAndQueue+0x64>)
 800a1a0:	f7fd ffe8 	bl	8008174 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1a4:	4813      	ldr	r0, [pc, #76]	@ (800a1f4 <prvCheckForValidListAndQueue+0x68>)
 800a1a6:	f7fd ffe5 	bl	8008174 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1aa:	4b13      	ldr	r3, [pc, #76]	@ (800a1f8 <prvCheckForValidListAndQueue+0x6c>)
 800a1ac:	4a10      	ldr	r2, [pc, #64]	@ (800a1f0 <prvCheckForValidListAndQueue+0x64>)
 800a1ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1b0:	4b12      	ldr	r3, [pc, #72]	@ (800a1fc <prvCheckForValidListAndQueue+0x70>)
 800a1b2:	4a10      	ldr	r2, [pc, #64]	@ (800a1f4 <prvCheckForValidListAndQueue+0x68>)
 800a1b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	4b11      	ldr	r3, [pc, #68]	@ (800a200 <prvCheckForValidListAndQueue+0x74>)
 800a1bc:	4a11      	ldr	r2, [pc, #68]	@ (800a204 <prvCheckForValidListAndQueue+0x78>)
 800a1be:	2110      	movs	r1, #16
 800a1c0:	200a      	movs	r0, #10
 800a1c2:	f7fe f8f5 	bl	80083b0 <xQueueGenericCreateStatic>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	4a08      	ldr	r2, [pc, #32]	@ (800a1ec <prvCheckForValidListAndQueue+0x60>)
 800a1ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1cc:	4b07      	ldr	r3, [pc, #28]	@ (800a1ec <prvCheckForValidListAndQueue+0x60>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1d4:	4b05      	ldr	r3, [pc, #20]	@ (800a1ec <prvCheckForValidListAndQueue+0x60>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	490b      	ldr	r1, [pc, #44]	@ (800a208 <prvCheckForValidListAndQueue+0x7c>)
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe fd1a 	bl	8008c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1e0:	f000 f974 	bl	800a4cc <vPortExitCritical>
}
 800a1e4:	bf00      	nop
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	240010d8 	.word	0x240010d8
 800a1f0:	240010a8 	.word	0x240010a8
 800a1f4:	240010bc 	.word	0x240010bc
 800a1f8:	240010d0 	.word	0x240010d0
 800a1fc:	240010d4 	.word	0x240010d4
 800a200:	24001184 	.word	0x24001184
 800a204:	240010e4 	.word	0x240010e4
 800a208:	0800f378 	.word	0x0800f378

0800a20c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3b04      	subs	r3, #4
 800a21c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b04      	subs	r3, #4
 800a22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f023 0201 	bic.w	r2, r3, #1
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3b04      	subs	r3, #4
 800a23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a23c:	4a0c      	ldr	r2, [pc, #48]	@ (800a270 <pxPortInitialiseStack+0x64>)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3b14      	subs	r3, #20
 800a246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3b04      	subs	r3, #4
 800a252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f06f 0202 	mvn.w	r2, #2
 800a25a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3b20      	subs	r3, #32
 800a260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a262:	68fb      	ldr	r3, [r7, #12]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	0800a275 	.word	0x0800a275

0800a274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a27e:	4b13      	ldr	r3, [pc, #76]	@ (800a2cc <prvTaskExitError+0x58>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d00b      	beq.n	800a2a0 <prvTaskExitError+0x2c>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28c:	f383 8811 	msr	BASEPRI, r3
 800a290:	f3bf 8f6f 	isb	sy
 800a294:	f3bf 8f4f 	dsb	sy
 800a298:	60fb      	str	r3, [r7, #12]
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	e7fd      	b.n	800a29c <prvTaskExitError+0x28>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60bb      	str	r3, [r7, #8]
}
 800a2b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2b4:	bf00      	nop
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0fc      	beq.n	800a2b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	24000010 	.word	0x24000010

0800a2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2d0:	4b07      	ldr	r3, [pc, #28]	@ (800a2f0 <pxCurrentTCBConst2>)
 800a2d2:	6819      	ldr	r1, [r3, #0]
 800a2d4:	6808      	ldr	r0, [r1, #0]
 800a2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	f380 8809 	msr	PSP, r0
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8811 	msr	BASEPRI, r0
 800a2ea:	4770      	bx	lr
 800a2ec:	f3af 8000 	nop.w

0800a2f0 <pxCurrentTCBConst2>:
 800a2f0:	24000ba8 	.word	0x24000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop

0800a2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2f8:	4808      	ldr	r0, [pc, #32]	@ (800a31c <prvPortStartFirstTask+0x24>)
 800a2fa:	6800      	ldr	r0, [r0, #0]
 800a2fc:	6800      	ldr	r0, [r0, #0]
 800a2fe:	f380 8808 	msr	MSP, r0
 800a302:	f04f 0000 	mov.w	r0, #0
 800a306:	f380 8814 	msr	CONTROL, r0
 800a30a:	b662      	cpsie	i
 800a30c:	b661      	cpsie	f
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	df00      	svc	0
 800a318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a31a:	bf00      	nop
 800a31c:	e000ed08 	.word	0xe000ed08

0800a320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a326:	4b47      	ldr	r3, [pc, #284]	@ (800a444 <xPortStartScheduler+0x124>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a47      	ldr	r2, [pc, #284]	@ (800a448 <xPortStartScheduler+0x128>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d10b      	bne.n	800a348 <xPortStartScheduler+0x28>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	613b      	str	r3, [r7, #16]
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a348:	4b3e      	ldr	r3, [pc, #248]	@ (800a444 <xPortStartScheduler+0x124>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a3f      	ldr	r2, [pc, #252]	@ (800a44c <xPortStartScheduler+0x12c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d10b      	bne.n	800a36a <xPortStartScheduler+0x4a>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	60fb      	str	r3, [r7, #12]
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop
 800a368:	e7fd      	b.n	800a366 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a36a:	4b39      	ldr	r3, [pc, #228]	@ (800a450 <xPortStartScheduler+0x130>)
 800a36c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	22ff      	movs	r2, #255	@ 0xff
 800a37a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	b2db      	uxtb	r3, r3
 800a382:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	4b31      	ldr	r3, [pc, #196]	@ (800a454 <xPortStartScheduler+0x134>)
 800a390:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a392:	4b31      	ldr	r3, [pc, #196]	@ (800a458 <xPortStartScheduler+0x138>)
 800a394:	2207      	movs	r2, #7
 800a396:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a398:	e009      	b.n	800a3ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a39a:	4b2f      	ldr	r3, [pc, #188]	@ (800a458 <xPortStartScheduler+0x138>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	4a2d      	ldr	r2, [pc, #180]	@ (800a458 <xPortStartScheduler+0x138>)
 800a3a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3a4:	78fb      	ldrb	r3, [r7, #3]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b6:	2b80      	cmp	r3, #128	@ 0x80
 800a3b8:	d0ef      	beq.n	800a39a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3ba:	4b27      	ldr	r3, [pc, #156]	@ (800a458 <xPortStartScheduler+0x138>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f1c3 0307 	rsb	r3, r3, #7
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d00b      	beq.n	800a3de <xPortStartScheduler+0xbe>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60bb      	str	r3, [r7, #8]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3de:	4b1e      	ldr	r3, [pc, #120]	@ (800a458 <xPortStartScheduler+0x138>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	021b      	lsls	r3, r3, #8
 800a3e4:	4a1c      	ldr	r2, [pc, #112]	@ (800a458 <xPortStartScheduler+0x138>)
 800a3e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a458 <xPortStartScheduler+0x138>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3f0:	4a19      	ldr	r2, [pc, #100]	@ (800a458 <xPortStartScheduler+0x138>)
 800a3f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3fc:	4b17      	ldr	r3, [pc, #92]	@ (800a45c <xPortStartScheduler+0x13c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a16      	ldr	r2, [pc, #88]	@ (800a45c <xPortStartScheduler+0x13c>)
 800a402:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a406:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a408:	4b14      	ldr	r3, [pc, #80]	@ (800a45c <xPortStartScheduler+0x13c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a13      	ldr	r2, [pc, #76]	@ (800a45c <xPortStartScheduler+0x13c>)
 800a40e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a412:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a414:	f000 f8da 	bl	800a5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a418:	4b11      	ldr	r3, [pc, #68]	@ (800a460 <xPortStartScheduler+0x140>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a41e:	f000 f8f9 	bl	800a614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a422:	4b10      	ldr	r3, [pc, #64]	@ (800a464 <xPortStartScheduler+0x144>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a0f      	ldr	r2, [pc, #60]	@ (800a464 <xPortStartScheduler+0x144>)
 800a428:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a42c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a42e:	f7ff ff63 	bl	800a2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a432:	f7ff f807 	bl	8009444 <vTaskSwitchContext>
	prvTaskExitError();
 800a436:	f7ff ff1d 	bl	800a274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	e000ed00 	.word	0xe000ed00
 800a448:	410fc271 	.word	0x410fc271
 800a44c:	410fc270 	.word	0x410fc270
 800a450:	e000e400 	.word	0xe000e400
 800a454:	240011d4 	.word	0x240011d4
 800a458:	240011d8 	.word	0x240011d8
 800a45c:	e000ed20 	.word	0xe000ed20
 800a460:	24000010 	.word	0x24000010
 800a464:	e000ef34 	.word	0xe000ef34

0800a468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	607b      	str	r3, [r7, #4]
}
 800a480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a482:	4b10      	ldr	r3, [pc, #64]	@ (800a4c4 <vPortEnterCritical+0x5c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3301      	adds	r3, #1
 800a488:	4a0e      	ldr	r2, [pc, #56]	@ (800a4c4 <vPortEnterCritical+0x5c>)
 800a48a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a48c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c4 <vPortEnterCritical+0x5c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d110      	bne.n	800a4b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a494:	4b0c      	ldr	r3, [pc, #48]	@ (800a4c8 <vPortEnterCritical+0x60>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00b      	beq.n	800a4b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	603b      	str	r3, [r7, #0]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <vPortEnterCritical+0x4a>
	}
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	24000010 	.word	0x24000010
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4d2:	4b12      	ldr	r3, [pc, #72]	@ (800a51c <vPortExitCritical+0x50>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10b      	bne.n	800a4f2 <vPortExitCritical+0x26>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	607b      	str	r3, [r7, #4]
}
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
 800a4f0:	e7fd      	b.n	800a4ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <vPortExitCritical+0x50>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	4a08      	ldr	r2, [pc, #32]	@ (800a51c <vPortExitCritical+0x50>)
 800a4fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <vPortExitCritical+0x50>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d105      	bne.n	800a510 <vPortExitCritical+0x44>
 800a504:	2300      	movs	r3, #0
 800a506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f383 8811 	msr	BASEPRI, r3
}
 800a50e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	24000010 	.word	0x24000010

0800a520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a520:	f3ef 8009 	mrs	r0, PSP
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4b15      	ldr	r3, [pc, #84]	@ (800a580 <pxCurrentTCBConst>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	f01e 0f10 	tst.w	lr, #16
 800a530:	bf08      	it	eq
 800a532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	6010      	str	r0, [r2, #0]
 800a53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a540:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a544:	f380 8811 	msr	BASEPRI, r0
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f7fe ff78 	bl	8009444 <vTaskSwitchContext>
 800a554:	f04f 0000 	mov.w	r0, #0
 800a558:	f380 8811 	msr	BASEPRI, r0
 800a55c:	bc09      	pop	{r0, r3}
 800a55e:	6819      	ldr	r1, [r3, #0]
 800a560:	6808      	ldr	r0, [r1, #0]
 800a562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a566:	f01e 0f10 	tst.w	lr, #16
 800a56a:	bf08      	it	eq
 800a56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a570:	f380 8809 	msr	PSP, r0
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	f3af 8000 	nop.w

0800a580 <pxCurrentTCBConst>:
 800a580:	24000ba8 	.word	0x24000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop

0800a588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	607b      	str	r3, [r7, #4]
}
 800a5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5a2:	f7fe fe95 	bl	80092d0 <xTaskIncrementTick>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d003      	beq.n	800a5b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5ac:	4b06      	ldr	r3, [pc, #24]	@ (800a5c8 <xPortSysTickHandler+0x40>)
 800a5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	f383 8811 	msr	BASEPRI, r3
}
 800a5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a600 <vPortSetupTimerInterrupt+0x34>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a604 <vPortSetupTimerInterrupt+0x38>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a608 <vPortSetupTimerInterrupt+0x3c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a0a      	ldr	r2, [pc, #40]	@ (800a60c <vPortSetupTimerInterrupt+0x40>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	099b      	lsrs	r3, r3, #6
 800a5e8:	4a09      	ldr	r2, [pc, #36]	@ (800a610 <vPortSetupTimerInterrupt+0x44>)
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ee:	4b04      	ldr	r3, [pc, #16]	@ (800a600 <vPortSetupTimerInterrupt+0x34>)
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	601a      	str	r2, [r3, #0]
}
 800a5f4:	bf00      	nop
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	e000e010 	.word	0xe000e010
 800a604:	e000e018 	.word	0xe000e018
 800a608:	24000000 	.word	0x24000000
 800a60c:	10624dd3 	.word	0x10624dd3
 800a610:	e000e014 	.word	0xe000e014

0800a614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a614:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a624 <vPortEnableVFP+0x10>
 800a618:	6801      	ldr	r1, [r0, #0]
 800a61a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a61e:	6001      	str	r1, [r0, #0]
 800a620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a622:	bf00      	nop
 800a624:	e000ed88 	.word	0xe000ed88

0800a628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a62e:	f3ef 8305 	mrs	r3, IPSR
 800a632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b0f      	cmp	r3, #15
 800a638:	d915      	bls.n	800a666 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a63a:	4a18      	ldr	r2, [pc, #96]	@ (800a69c <vPortValidateInterruptPriority+0x74>)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a644:	4b16      	ldr	r3, [pc, #88]	@ (800a6a0 <vPortValidateInterruptPriority+0x78>)
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	7afa      	ldrb	r2, [r7, #11]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d20b      	bcs.n	800a666 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	607b      	str	r3, [r7, #4]
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	e7fd      	b.n	800a662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a666:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a4 <vPortValidateInterruptPriority+0x7c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a66e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a8 <vPortValidateInterruptPriority+0x80>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d90b      	bls.n	800a68e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	603b      	str	r3, [r7, #0]
}
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
 800a68c:	e7fd      	b.n	800a68a <vPortValidateInterruptPriority+0x62>
	}
 800a68e:	bf00      	nop
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	e000e3f0 	.word	0xe000e3f0
 800a6a0:	240011d4 	.word	0x240011d4
 800a6a4:	e000ed0c 	.word	0xe000ed0c
 800a6a8:	240011d8 	.word	0x240011d8

0800a6ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08a      	sub	sp, #40	@ 0x28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6b8:	f7fe fd4e 	bl	8009158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6bc:	4b5c      	ldr	r3, [pc, #368]	@ (800a830 <pvPortMalloc+0x184>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6c4:	f000 f924 	bl	800a910 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6c8:	4b5a      	ldr	r3, [pc, #360]	@ (800a834 <pvPortMalloc+0x188>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f040 8095 	bne.w	800a800 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d01e      	beq.n	800a71a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6dc:	2208      	movs	r2, #8
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d015      	beq.n	800a71a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00b      	beq.n	800a71a <pvPortMalloc+0x6e>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	617b      	str	r3, [r7, #20]
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop
 800a718:	e7fd      	b.n	800a716 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d06f      	beq.n	800a800 <pvPortMalloc+0x154>
 800a720:	4b45      	ldr	r3, [pc, #276]	@ (800a838 <pvPortMalloc+0x18c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	429a      	cmp	r2, r3
 800a728:	d86a      	bhi.n	800a800 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a72a:	4b44      	ldr	r3, [pc, #272]	@ (800a83c <pvPortMalloc+0x190>)
 800a72c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a72e:	4b43      	ldr	r3, [pc, #268]	@ (800a83c <pvPortMalloc+0x190>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a734:	e004      	b.n	800a740 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d903      	bls.n	800a752 <pvPortMalloc+0xa6>
 800a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1f1      	bne.n	800a736 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a752:	4b37      	ldr	r3, [pc, #220]	@ (800a830 <pvPortMalloc+0x184>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a758:	429a      	cmp	r2, r3
 800a75a:	d051      	beq.n	800a800 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2208      	movs	r2, #8
 800a762:	4413      	add	r3, r2
 800a764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1ad2      	subs	r2, r2, r3
 800a776:	2308      	movs	r3, #8
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d920      	bls.n	800a7c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a77e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4413      	add	r3, r2
 800a784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <pvPortMalloc+0xfc>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	613b      	str	r3, [r7, #16]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7ba:	69b8      	ldr	r0, [r7, #24]
 800a7bc:	f000 f90a 	bl	800a9d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a838 <pvPortMalloc+0x18c>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a838 <pvPortMalloc+0x18c>)
 800a7cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a838 <pvPortMalloc+0x18c>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a840 <pvPortMalloc+0x194>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d203      	bcs.n	800a7e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7da:	4b17      	ldr	r3, [pc, #92]	@ (800a838 <pvPortMalloc+0x18c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a18      	ldr	r2, [pc, #96]	@ (800a840 <pvPortMalloc+0x194>)
 800a7e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	4b13      	ldr	r3, [pc, #76]	@ (800a834 <pvPortMalloc+0x188>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	@ (800a844 <pvPortMalloc+0x198>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	4a11      	ldr	r2, [pc, #68]	@ (800a844 <pvPortMalloc+0x198>)
 800a7fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a800:	f7fe fcb8 	bl	8009174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f003 0307 	and.w	r3, r3, #7
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00b      	beq.n	800a826 <pvPortMalloc+0x17a>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60fb      	str	r3, [r7, #12]
}
 800a820:	bf00      	nop
 800a822:	bf00      	nop
 800a824:	e7fd      	b.n	800a822 <pvPortMalloc+0x176>
	return pvReturn;
 800a826:	69fb      	ldr	r3, [r7, #28]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3728      	adds	r7, #40	@ 0x28
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	24004de4 	.word	0x24004de4
 800a834:	24004df8 	.word	0x24004df8
 800a838:	24004de8 	.word	0x24004de8
 800a83c:	24004ddc 	.word	0x24004ddc
 800a840:	24004dec 	.word	0x24004dec
 800a844:	24004df0 	.word	0x24004df0

0800a848 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d04f      	beq.n	800a8fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a85a:	2308      	movs	r3, #8
 800a85c:	425b      	negs	r3, r3
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	4413      	add	r3, r2
 800a862:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	4b25      	ldr	r3, [pc, #148]	@ (800a904 <vPortFree+0xbc>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4013      	ands	r3, r2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10b      	bne.n	800a88e <vPortFree+0x46>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	60fb      	str	r3, [r7, #12]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <vPortFree+0x66>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	60bb      	str	r3, [r7, #8]
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	e7fd      	b.n	800a8aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	4b14      	ldr	r3, [pc, #80]	@ (800a904 <vPortFree+0xbc>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d01e      	beq.n	800a8fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d11a      	bne.n	800a8fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a904 <vPortFree+0xbc>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	43db      	mvns	r3, r3
 800a8ce:	401a      	ands	r2, r3
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8d4:	f7fe fc40 	bl	8009158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a908 <vPortFree+0xc0>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	4a09      	ldr	r2, [pc, #36]	@ (800a908 <vPortFree+0xc0>)
 800a8e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8e6:	6938      	ldr	r0, [r7, #16]
 800a8e8:	f000 f874 	bl	800a9d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8ec:	4b07      	ldr	r3, [pc, #28]	@ (800a90c <vPortFree+0xc4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	4a06      	ldr	r2, [pc, #24]	@ (800a90c <vPortFree+0xc4>)
 800a8f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8f6:	f7fe fc3d 	bl	8009174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8fa:	bf00      	nop
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	24004df8 	.word	0x24004df8
 800a908:	24004de8 	.word	0x24004de8
 800a90c:	24004df4 	.word	0x24004df4

0800a910 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a916:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a91a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a91c:	4b27      	ldr	r3, [pc, #156]	@ (800a9bc <prvHeapInit+0xac>)
 800a91e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00c      	beq.n	800a944 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3307      	adds	r3, #7
 800a92e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f023 0307 	bic.w	r3, r3, #7
 800a936:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9bc <prvHeapInit+0xac>)
 800a940:	4413      	add	r3, r2
 800a942:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a948:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c0 <prvHeapInit+0xb0>)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a94e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9c0 <prvHeapInit+0xb0>)
 800a950:	2200      	movs	r2, #0
 800a952:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	4413      	add	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a95c:	2208      	movs	r2, #8
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	1a9b      	subs	r3, r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0307 	bic.w	r3, r3, #7
 800a96a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a15      	ldr	r2, [pc, #84]	@ (800a9c4 <prvHeapInit+0xb4>)
 800a970:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a972:	4b14      	ldr	r3, [pc, #80]	@ (800a9c4 <prvHeapInit+0xb4>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2200      	movs	r2, #0
 800a978:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a97a:	4b12      	ldr	r3, [pc, #72]	@ (800a9c4 <prvHeapInit+0xb4>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2200      	movs	r2, #0
 800a980:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	1ad2      	subs	r2, r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a990:	4b0c      	ldr	r3, [pc, #48]	@ (800a9c4 <prvHeapInit+0xb4>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	4a0a      	ldr	r2, [pc, #40]	@ (800a9c8 <prvHeapInit+0xb8>)
 800a99e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	4a09      	ldr	r2, [pc, #36]	@ (800a9cc <prvHeapInit+0xbc>)
 800a9a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9a8:	4b09      	ldr	r3, [pc, #36]	@ (800a9d0 <prvHeapInit+0xc0>)
 800a9aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a9ae:	601a      	str	r2, [r3, #0]
}
 800a9b0:	bf00      	nop
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	240011dc 	.word	0x240011dc
 800a9c0:	24004ddc 	.word	0x24004ddc
 800a9c4:	24004de4 	.word	0x24004de4
 800a9c8:	24004dec 	.word	0x24004dec
 800a9cc:	24004de8 	.word	0x24004de8
 800a9d0:	24004df8 	.word	0x24004df8

0800a9d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9dc:	4b28      	ldr	r3, [pc, #160]	@ (800aa80 <prvInsertBlockIntoFreeList+0xac>)
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	e002      	b.n	800a9e8 <prvInsertBlockIntoFreeList+0x14>
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d8f7      	bhi.n	800a9e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d108      	bne.n	800aa16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	685a      	ldr	r2, [r3, #4]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	441a      	add	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	441a      	add	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d118      	bne.n	800aa5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	4b15      	ldr	r3, [pc, #84]	@ (800aa84 <prvInsertBlockIntoFreeList+0xb0>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d00d      	beq.n	800aa52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	441a      	add	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	e008      	b.n	800aa64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa52:	4b0c      	ldr	r3, [pc, #48]	@ (800aa84 <prvInsertBlockIntoFreeList+0xb0>)
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	e003      	b.n	800aa64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d002      	beq.n	800aa72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa72:	bf00      	nop
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	24004ddc 	.word	0x24004ddc
 800aa84:	24004de4 	.word	0x24004de4

0800aa88 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2108      	movs	r1, #8
 800aa90:	480a      	ldr	r0, [pc, #40]	@ (800aabc <ad7606_Init+0x34>)
 800aa92:	f7f7 fd99 	bl	80025c8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800aa96:	2001      	movs	r0, #1
 800aa98:	f7f7 f80e 	bl	8001ab8 <HAL_Delay>
    AD7606_RST_SET();
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	2108      	movs	r1, #8
 800aaa0:	4806      	ldr	r0, [pc, #24]	@ (800aabc <ad7606_Init+0x34>)
 800aaa2:	f7f7 fd91 	bl	80025c8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	f7f7 f806 	bl	8001ab8 <HAL_Delay>
    AD7606_RST_RESET();
 800aaac:	2200      	movs	r2, #0
 800aaae:	2108      	movs	r1, #8
 800aab0:	4802      	ldr	r0, [pc, #8]	@ (800aabc <ad7606_Init+0x34>)
 800aab2:	f7f7 fd89 	bl	80025c8 <HAL_GPIO_WritePin>
}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	58021800 	.word	0x58021800

0800aac0 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	4613      	mov	r3, r2
 800aacc:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 800aace:	2200      	movs	r2, #0
 800aad0:	2180      	movs	r1, #128	@ 0x80
 800aad2:	4809      	ldr	r0, [pc, #36]	@ (800aaf8 <ad7606_Read+0x38>)
 800aad4:	f7f7 fd78 	bl	80025c8 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 800aad8:	88fa      	ldrh	r2, [r7, #6]
 800aada:	2364      	movs	r3, #100	@ 0x64
 800aadc:	68b9      	ldr	r1, [r7, #8]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7fb fab0 	bl	8006044 <HAL_SPI_Receive>
    AD7606_CS_SET();
 800aae4:	2201      	movs	r2, #1
 800aae6:	2180      	movs	r1, #128	@ 0x80
 800aae8:	4803      	ldr	r0, [pc, #12]	@ (800aaf8 <ad7606_Read+0x38>)
 800aaea:	f7f7 fd6d 	bl	80025c8 <HAL_GPIO_WritePin>
}
 800aaee:	bf00      	nop
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	58021800 	.word	0x58021800

0800aafc <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800ab06:	6839      	ldr	r1, [r7, #0]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7fb ff27 	bl	800695c <HAL_TIM_PWM_Start>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	460b      	mov	r3, r1
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
 800ab2a:	e03d      	b.n	800aba8 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4413      	add	r3, r2
 800ab34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da0f      	bge.n	800ab5c <ad7606_Convert+0x44>
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4413      	add	r3, r2
 800ab44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	425b      	negs	r3, r3
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	425b      	negs	r3, r3
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	b21b      	sxth	r3, r3
 800ab5a:	e005      	b.n	800ab68 <ad7606_Convert+0x50>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	005b      	lsls	r3, r3, #1
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	0052      	lsls	r2, r2, #1
 800ab6c:	68f9      	ldr	r1, [r7, #12]
 800ab6e:	440a      	add	r2, r1
 800ab70:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab86:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800ab8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	4413      	add	r3, r2
 800ab96:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800abc0 <ad7606_Convert+0xa8>
 800ab9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab9e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	3301      	adds	r3, #1
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	897b      	ldrh	r3, [r7, #10]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	429a      	cmp	r2, r3
 800abae:	dbbd      	blt.n	800ab2c <ad7606_Convert+0x14>
    }
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	371c      	adds	r7, #28
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	47000000 	.word	0x47000000

0800abc4 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 800abc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abc8:	b087      	sub	sp, #28
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	460b      	mov	r3, r1
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	817b      	strh	r3, [r7, #10]
 800abd4:	466b      	mov	r3, sp
 800abd6:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 800abd8:	8979      	ldrh	r1, [r7, #10]
 800abda:	460b      	mov	r3, r1
 800abdc:	3b01      	subs	r3, #1
 800abde:	617b      	str	r3, [r7, #20]
 800abe0:	b28b      	uxth	r3, r1
 800abe2:	2200      	movs	r2, #0
 800abe4:	4698      	mov	r8, r3
 800abe6:	4691      	mov	r9, r2
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800abf4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800abf8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800abfc:	b28b      	uxth	r3, r1
 800abfe:	2200      	movs	r2, #0
 800ac00:	461c      	mov	r4, r3
 800ac02:	4615      	mov	r5, r2
 800ac04:	f04f 0200 	mov.w	r2, #0
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	012b      	lsls	r3, r5, #4
 800ac0e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800ac12:	0122      	lsls	r2, r4, #4
 800ac14:	460b      	mov	r3, r1
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	3307      	adds	r3, #7
 800ac1a:	08db      	lsrs	r3, r3, #3
 800ac1c:	00db      	lsls	r3, r3, #3
 800ac1e:	ebad 0d03 	sub.w	sp, sp, r3
 800ac22:	466b      	mov	r3, sp
 800ac24:	3301      	adds	r3, #1
 800ac26:	085b      	lsrs	r3, r3, #1
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 800ac2c:	897b      	ldrh	r3, [r7, #10]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6939      	ldr	r1, [r7, #16]
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f7ff ff44 	bl	800aac0 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 800ac38:	897b      	ldrh	r3, [r7, #10]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6938      	ldr	r0, [r7, #16]
 800ac40:	f7ff ff6a 	bl	800ab18 <ad7606_Convert>
 800ac44:	46b5      	mov	sp, r6
}
 800ac46:	bf00      	nop
 800ac48:	371c      	adds	r7, #28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ac50 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af04      	add	r7, sp, #16
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 800ac60:	2300      	movs	r3, #0
 800ac62:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 800ac64:	883b      	ldrh	r3, [r7, #0]
 800ac66:	0a1b      	lsrs	r3, r3, #8
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 800ac6e:	883b      	ldrh	r3, [r7, #0]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	69d8      	ldr	r0, [r3, #28]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	2364      	movs	r3, #100	@ 0x64
 800ac86:	9302      	str	r3, [sp, #8]
 800ac88:	2302      	movs	r3, #2
 800ac8a:	9301      	str	r3, [sp, #4]
 800ac8c:	f107 030c 	add.w	r3, r7, #12
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	2301      	movs	r3, #1
 800ac94:	f7f7 fd82 	bl	800279c <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d105      	bne.n	800acaa <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 800ac9e:	883b      	ldrh	r3, [r7, #0]
 800aca0:	f003 0310 	and.w	r3, r3, #16
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	82da      	strh	r2, [r3, #22]
	}
}
 800acaa:	bf00      	nop
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff ffc4 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	885b      	ldrh	r3, [r3, #2]
 800accc:	461a      	mov	r2, r3
 800acce:	2101      	movs	r1, #1
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ffbd 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	889b      	ldrh	r3, [r3, #4]
 800acda:	461a      	mov	r2, r3
 800acdc:	2102      	movs	r1, #2
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff ffb6 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	88db      	ldrh	r3, [r3, #6]
 800ace8:	461a      	mov	r2, r3
 800acea:	2103      	movs	r1, #3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ffaf 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	891b      	ldrh	r3, [r3, #8]
 800acf6:	461a      	mov	r2, r3
 800acf8:	210b      	movs	r1, #11
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff ffa8 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	895b      	ldrh	r3, [r3, #10]
 800ad04:	461a      	mov	r2, r3
 800ad06:	210c      	movs	r1, #12
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff ffa1 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	899b      	ldrh	r3, [r3, #12]
 800ad12:	461a      	mov	r2, r3
 800ad14:	210d      	movs	r1, #13
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff ff9a 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	89db      	ldrh	r3, [r3, #14]
 800ad20:	461a      	mov	r2, r3
 800ad22:	210e      	movs	r1, #14
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff ff93 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	8a1b      	ldrh	r3, [r3, #16]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	210f      	movs	r1, #15
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff ff8c 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	8a5b      	ldrh	r3, [r3, #18]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	2110      	movs	r1, #16
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff ff85 	bl	800ac50 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8a9b      	ldrh	r3, [r3, #20]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	2111      	movs	r1, #17
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff ff7e 	bl	800ac50 <INA228_writeReg>
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 800ad5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad60:	b08c      	sub	sp, #48	@ 0x30
 800ad62:	af04      	add	r7, sp, #16
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	78fb      	ldrb	r3, [r7, #3]
 800ad80:	4921      	ldr	r1, [pc, #132]	@ (800ae08 <INA228_readReg+0xac>)
 800ad82:	5ccb      	ldrb	r3, [r1, r3]
 800ad84:	4619      	mov	r1, r3
 800ad86:	2364      	movs	r3, #100	@ 0x64
 800ad88:	9302      	str	r3, [sp, #8]
 800ad8a:	9101      	str	r1, [sp, #4]
 800ad8c:	f107 030c 	add.w	r3, r7, #12
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	2301      	movs	r3, #1
 800ad94:	4601      	mov	r1, r0
 800ad96:	481d      	ldr	r0, [pc, #116]	@ (800ae0c <INA228_readReg+0xb0>)
 800ad98:	f7f7 fe14 	bl	80029c4 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 800ad9c:	7b3b      	ldrb	r3, [r7, #12]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2200      	movs	r2, #0
 800ada2:	469a      	mov	sl, r3
 800ada4:	4693      	mov	fp, r2
 800ada6:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800adaa:	2301      	movs	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
 800adae:	e01b      	b.n	800ade8 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 800adb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800adb4:	f04f 0200 	mov.w	r2, #0
 800adb8:	f04f 0300 	mov.w	r3, #0
 800adbc:	020b      	lsls	r3, r1, #8
 800adbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800adc2:	0202      	lsls	r2, r0, #8
 800adc4:	f107 000c 	add.w	r0, r7, #12
 800adc8:	6979      	ldr	r1, [r7, #20]
 800adca:	4401      	add	r1, r0
 800adcc:	7809      	ldrb	r1, [r1, #0]
 800adce:	b2c9      	uxtb	r1, r1
 800add0:	2000      	movs	r0, #0
 800add2:	460c      	mov	r4, r1
 800add4:	4605      	mov	r5, r0
 800add6:	ea42 0804 	orr.w	r8, r2, r4
 800adda:	ea43 0905 	orr.w	r9, r3, r5
 800adde:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	3301      	adds	r3, #1
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	4a07      	ldr	r2, [pc, #28]	@ (800ae08 <INA228_readReg+0xac>)
 800adec:	5cd3      	ldrb	r3, [r2, r3]
 800adee:	461a      	mov	r2, r3
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	4293      	cmp	r3, r2
 800adf4:	dbdc      	blt.n	800adb0 <INA228_readReg+0x54>
	}

	return value;
 800adf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800adfa:	4610      	mov	r0, r2
 800adfc:	4619      	mov	r1, r3
 800adfe:	3720      	adds	r7, #32
 800ae00:	46bd      	mov	sp, r7
 800ae02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae06:	bf00      	nop
 800ae08:	0800f3fc 	.word	0x0800f3fc
 800ae0c:	2400025c 	.word	0x2400025c

0800ae10 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 800ae18:	2105      	movs	r1, #5
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff ff9e 	bl	800ad5c <INA228_readReg>
 800ae20:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800ae24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae28:	f04f 0200 	mov.w	r2, #0
 800ae2c:	f04f 0300 	mov.w	r3, #0
 800ae30:	0902      	lsrs	r2, r0, #4
 800ae32:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800ae36:	090b      	lsrs	r3, r1, #4
 800ae38:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 800ae3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae40:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800ae44:	f173 0300 	sbcs.w	r3, r3, #0
 800ae48:	d30c      	bcc.n	800ae64 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 800ae4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae4e:	f7f5 fb67 	bl	8000520 <__aeabi_ul2f>
 800ae52:	ee07 0a10 	vmov	s14, r0
 800ae56:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800aeb0 <INA228_getVBUS_V+0xa0>
 800ae5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae5e:	edc7 7a05 	vstr	s15, [r7, #20]
 800ae62:	e005      	b.n	800ae70 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 800ae64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae68:	f7f5 fb5a 	bl	8000520 <__aeabi_ul2f>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125) / 1000000;
 800ae70:	edd7 7a05 	vldr	s15, [r7, #20]
 800ae74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ae78:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 800aea0 <INA228_getVBUS_V+0x90>
 800ae7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ae80:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 800aea8 <INA228_getVBUS_V+0x98>
 800ae84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ae8c:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	ee07 3a90 	vmov	s15, r3
}
 800ae96:	eeb0 0a67 	vmov.f32	s0, s15
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	00000000 	.word	0x00000000
 800aea4:	40686a00 	.word	0x40686a00
 800aea8:	00000000 	.word	0x00000000
 800aeac:	412e8480 	.word	0x412e8480
 800aeb0:	49800000 	.word	0x49800000

0800aeb4 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 800aebc:	2107      	movs	r1, #7
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff ff4c 	bl	800ad5c <INA228_readReg>
 800aec4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 800aec8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aecc:	f04f 0200 	mov.w	r2, #0
 800aed0:	f04f 0300 	mov.w	r3, #0
 800aed4:	0902      	lsrs	r2, r0, #4
 800aed6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800aeda:	090b      	lsrs	r3, r1, #4
 800aedc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 800aee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aee4:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800aee8:	f173 0300 	sbcs.w	r3, r3, #0
 800aeec:	d30c      	bcc.n	800af08 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 800aeee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aef2:	f7f5 fb15 	bl	8000520 <__aeabi_ul2f>
 800aef6:	ee07 0a10 	vmov	s14, r0
 800aefa:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800af24 <INA228_getCURRENT_signedLSB+0x70>
 800aefe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af02:	edc7 7a05 	vstr	s15, [r7, #20]
 800af06:	e005      	b.n	800af14 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 800af08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af0c:	f7f5 fb08 	bl	8000520 <__aeabi_ul2f>
 800af10:	4603      	mov	r3, r0
 800af12:	617b      	str	r3, [r7, #20]
	}

	return data;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	ee07 3a90 	vmov	s15, r3
}
 800af1a:	eeb0 0a67 	vmov.f32	s0, s15
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	49800000 	.word	0x49800000

0800af28 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff ffbf 	bl	800aeb4 <INA228_getCURRENT_signedLSB>
 800af36:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	edd3 7a06 	vldr	s15, [r3, #24]
 800af40:	ed97 7a03 	vldr	s14, [r7, #12]
 800af44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af48:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	ee07 3a90 	vmov	s15, r3
}
 800af52:	eeb0 0a67 	vmov.f32	s0, s15
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	4603      	mov	r3, r0
 800af64:	460a      	mov	r2, r1
 800af66:	71fb      	strb	r3, [r7, #7]
 800af68:	4613      	mov	r3, r2
 800af6a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 800af6c:	1dfb      	adds	r3, r7, #7
 800af6e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 800af70:	79bb      	ldrb	r3, [r7, #6]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 800af76:	2201      	movs	r2, #1
 800af78:	2140      	movs	r1, #64	@ 0x40
 800af7a:	4811      	ldr	r0, [pc, #68]	@ (800afc0 <OLED_WR_Byte+0x64>)
 800af7c:	f7f7 fb24 	bl	80025c8 <HAL_GPIO_WritePin>
 800af80:	e004      	b.n	800af8c <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 800af82:	2200      	movs	r2, #0
 800af84:	2140      	movs	r1, #64	@ 0x40
 800af86:	480e      	ldr	r0, [pc, #56]	@ (800afc0 <OLED_WR_Byte+0x64>)
 800af88:	f7f7 fb1e 	bl	80025c8 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 800af8c:	2200      	movs	r2, #0
 800af8e:	2102      	movs	r1, #2
 800af90:	480c      	ldr	r0, [pc, #48]	@ (800afc4 <OLED_WR_Byte+0x68>)
 800af92:	f7f7 fb19 	bl	80025c8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 800af96:	23c8      	movs	r3, #200	@ 0xc8
 800af98:	2201      	movs	r2, #1
 800af9a:	68f9      	ldr	r1, [r7, #12]
 800af9c:	480a      	ldr	r0, [pc, #40]	@ (800afc8 <OLED_WR_Byte+0x6c>)
 800af9e:	f7fa fe63 	bl	8005c68 <HAL_SPI_Transmit>

	OLED_CS_Set();
 800afa2:	2201      	movs	r2, #1
 800afa4:	2102      	movs	r1, #2
 800afa6:	4807      	ldr	r0, [pc, #28]	@ (800afc4 <OLED_WR_Byte+0x68>)
 800afa8:	f7f7 fb0e 	bl	80025c8 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 800afac:	2201      	movs	r2, #1
 800afae:	2140      	movs	r1, #64	@ 0x40
 800afb0:	4803      	ldr	r0, [pc, #12]	@ (800afc0 <OLED_WR_Byte+0x64>)
 800afb2:	f7f7 fb09 	bl	80025c8 <HAL_GPIO_WritePin>
}
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	58022000 	.word	0x58022000
 800afc4:	58020400 	.word	0x58020400
 800afc8:	240002b0 	.word	0x240002b0

0800afcc <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800afd2:	2300      	movs	r3, #0
 800afd4:	71fb      	strb	r3, [r7, #7]
 800afd6:	e026      	b.n	800b026 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 800afd8:	79fb      	ldrb	r3, [r7, #7]
 800afda:	3b50      	subs	r3, #80	@ 0x50
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2100      	movs	r1, #0
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7ff ffbb 	bl	800af5c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 800afe6:	2100      	movs	r1, #0
 800afe8:	2000      	movs	r0, #0
 800afea:	f7ff ffb7 	bl	800af5c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 800afee:	2100      	movs	r1, #0
 800aff0:	2010      	movs	r0, #16
 800aff2:	f7ff ffb3 	bl	800af5c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800aff6:	2300      	movs	r3, #0
 800aff8:	71bb      	strb	r3, [r7, #6]
 800affa:	e00d      	b.n	800b018 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800affc:	79ba      	ldrb	r2, [r7, #6]
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	490d      	ldr	r1, [pc, #52]	@ (800b038 <OLED_Refresh+0x6c>)
 800b002:	00d2      	lsls	r2, r2, #3
 800b004:	440a      	add	r2, r1
 800b006:	4413      	add	r3, r2
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2101      	movs	r1, #1
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff ffa5 	bl	800af5c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800b012:	79bb      	ldrb	r3, [r7, #6]
 800b014:	3301      	adds	r3, #1
 800b016:	71bb      	strb	r3, [r7, #6]
 800b018:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	daed      	bge.n	800affc <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 800b020:	79fb      	ldrb	r3, [r7, #7]
 800b022:	3301      	adds	r3, #1
 800b024:	71fb      	strb	r3, [r7, #7]
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	2b07      	cmp	r3, #7
 800b02a:	d9d5      	bls.n	800afd8 <OLED_Refresh+0xc>
	}
}
 800b02c:	bf00      	nop
 800b02e:	bf00      	nop
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	24004dfc 	.word	0x24004dfc

0800b03c <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800b042:	2300      	movs	r3, #0
 800b044:	71fb      	strb	r3, [r7, #7]
 800b046:	e014      	b.n	800b072 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 800b048:	2300      	movs	r3, #0
 800b04a:	71bb      	strb	r3, [r7, #6]
 800b04c:	e00a      	b.n	800b064 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 800b04e:	79ba      	ldrb	r2, [r7, #6]
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	490c      	ldr	r1, [pc, #48]	@ (800b084 <OLED_Clear+0x48>)
 800b054:	00d2      	lsls	r2, r2, #3
 800b056:	440a      	add	r2, r1
 800b058:	4413      	add	r3, r2
 800b05a:	2200      	movs	r2, #0
 800b05c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800b05e:	79bb      	ldrb	r3, [r7, #6]
 800b060:	3301      	adds	r3, #1
 800b062:	71bb      	strb	r3, [r7, #6]
 800b064:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	daf0      	bge.n	800b04e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	3301      	adds	r3, #1
 800b070:	71fb      	strb	r3, [r7, #7]
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	2b07      	cmp	r3, #7
 800b076:	d9e7      	bls.n	800b048 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 800b078:	f7ff ffa8 	bl	800afcc <OLED_Refresh>
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	24004dfc 	.word	0x24004dfc

0800b088 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	460a      	mov	r2, r1
 800b092:	71fb      	strb	r3, [r7, #7]
 800b094:	4613      	mov	r3, r2
 800b096:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800b098:	79bb      	ldrb	r3, [r7, #6]
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800b09e:	79bb      	ldrb	r3, [r7, #6]
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800b0a6:	7bbb      	ldrb	r3, [r7, #14]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ae:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 800b0b0:	79fa      	ldrb	r2, [r7, #7]
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	490a      	ldr	r1, [pc, #40]	@ (800b0e0 <OLED_DrawPoint+0x58>)
 800b0b6:	00d2      	lsls	r2, r2, #3
 800b0b8:	440a      	add	r2, r1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	7818      	ldrb	r0, [r3, #0]
 800b0be:	79fa      	ldrb	r2, [r7, #7]
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	7b79      	ldrb	r1, [r7, #13]
 800b0c4:	4301      	orrs	r1, r0
 800b0c6:	b2c8      	uxtb	r0, r1
 800b0c8:	4905      	ldr	r1, [pc, #20]	@ (800b0e0 <OLED_DrawPoint+0x58>)
 800b0ca:	00d2      	lsls	r2, r2, #3
 800b0cc:	440a      	add	r2, r1
 800b0ce:	4413      	add	r3, r2
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	701a      	strb	r2, [r3, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	24004dfc 	.word	0x24004dfc

0800b0e4 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	460a      	mov	r2, r1
 800b0ee:	71fb      	strb	r3, [r7, #7]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 800b0f4:	79bb      	ldrb	r3, [r7, #6]
 800b0f6:	08db      	lsrs	r3, r3, #3
 800b0f8:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 800b0fa:	79bb      	ldrb	r3, [r7, #6]
 800b0fc:	f003 0307 	and.w	r3, r3, #7
 800b100:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	2201      	movs	r2, #1
 800b106:	fa02 f303 	lsl.w	r3, r2, r3
 800b10a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800b10c:	79fa      	ldrb	r2, [r7, #7]
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	491b      	ldr	r1, [pc, #108]	@ (800b180 <OLED_ClearPoint+0x9c>)
 800b112:	00d2      	lsls	r2, r2, #3
 800b114:	440a      	add	r2, r1
 800b116:	4413      	add	r3, r2
 800b118:	7819      	ldrb	r1, [r3, #0]
 800b11a:	79fa      	ldrb	r2, [r7, #7]
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	43c9      	mvns	r1, r1
 800b120:	b2c8      	uxtb	r0, r1
 800b122:	4917      	ldr	r1, [pc, #92]	@ (800b180 <OLED_ClearPoint+0x9c>)
 800b124:	00d2      	lsls	r2, r2, #3
 800b126:	440a      	add	r2, r1
 800b128:	4413      	add	r3, r2
 800b12a:	4602      	mov	r2, r0
 800b12c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 800b12e:	79fa      	ldrb	r2, [r7, #7]
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	4913      	ldr	r1, [pc, #76]	@ (800b180 <OLED_ClearPoint+0x9c>)
 800b134:	00d2      	lsls	r2, r2, #3
 800b136:	440a      	add	r2, r1
 800b138:	4413      	add	r3, r2
 800b13a:	7818      	ldrb	r0, [r3, #0]
 800b13c:	79fa      	ldrb	r2, [r7, #7]
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	7b79      	ldrb	r1, [r7, #13]
 800b142:	4301      	orrs	r1, r0
 800b144:	b2c8      	uxtb	r0, r1
 800b146:	490e      	ldr	r1, [pc, #56]	@ (800b180 <OLED_ClearPoint+0x9c>)
 800b148:	00d2      	lsls	r2, r2, #3
 800b14a:	440a      	add	r2, r1
 800b14c:	4413      	add	r3, r2
 800b14e:	4602      	mov	r2, r0
 800b150:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 800b152:	79fa      	ldrb	r2, [r7, #7]
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	490a      	ldr	r1, [pc, #40]	@ (800b180 <OLED_ClearPoint+0x9c>)
 800b158:	00d2      	lsls	r2, r2, #3
 800b15a:	440a      	add	r2, r1
 800b15c:	4413      	add	r3, r2
 800b15e:	7819      	ldrb	r1, [r3, #0]
 800b160:	79fa      	ldrb	r2, [r7, #7]
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	43c9      	mvns	r1, r1
 800b166:	b2c8      	uxtb	r0, r1
 800b168:	4905      	ldr	r1, [pc, #20]	@ (800b180 <OLED_ClearPoint+0x9c>)
 800b16a:	00d2      	lsls	r2, r2, #3
 800b16c:	440a      	add	r2, r1
 800b16e:	4413      	add	r3, r2
 800b170:	4602      	mov	r2, r0
 800b172:	701a      	strb	r2, [r3, #0]
}
 800b174:	bf00      	nop
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	24004dfc 	.word	0x24004dfc

0800b184 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 800b184:	b590      	push	{r4, r7, lr}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	461a      	mov	r2, r3
 800b192:	4623      	mov	r3, r4
 800b194:	71fb      	strb	r3, [r7, #7]
 800b196:	4603      	mov	r3, r0
 800b198:	71bb      	strb	r3, [r7, #6]
 800b19a:	460b      	mov	r3, r1
 800b19c:	717b      	strb	r3, [r7, #5]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 800b1a2:	79bb      	ldrb	r3, [r7, #6]
 800b1a4:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 800b1a6:	793b      	ldrb	r3, [r7, #4]
 800b1a8:	08db      	lsrs	r3, r3, #3
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	793b      	ldrb	r3, [r7, #4]
 800b1b0:	f003 0307 	and.w	r3, r3, #7
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bf14      	ite	ne
 800b1ba:	2301      	movne	r3, #1
 800b1bc:	2300      	moveq	r3, #0
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	793b      	ldrb	r3, [r7, #4]
 800b1c6:	085b      	lsrs	r3, r3, #1
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	fb12 f303 	smulbb	r3, r2, r3
 800b1ce:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 800b1d0:	797b      	ldrb	r3, [r7, #5]
 800b1d2:	3b20      	subs	r3, #32
 800b1d4:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
 800b1da:	e057      	b.n	800b28c <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 800b1dc:	793b      	ldrb	r3, [r7, #4]
 800b1de:	2b0c      	cmp	r3, #12
 800b1e0:	d10b      	bne.n	800b1fa <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 800b1e2:	7aba      	ldrb	r2, [r7, #10]
 800b1e4:	7bf9      	ldrb	r1, [r7, #15]
 800b1e6:	482e      	ldr	r0, [pc, #184]	@ (800b2a0 <OLED_ShowChar+0x11c>)
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	005b      	lsls	r3, r3, #1
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4403      	add	r3, r0
 800b1f2:	440b      	add	r3, r1
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	737b      	strb	r3, [r7, #13]
 800b1f8:	e019      	b.n	800b22e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 800b1fa:	793b      	ldrb	r3, [r7, #4]
 800b1fc:	2b10      	cmp	r3, #16
 800b1fe:	d108      	bne.n	800b212 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 800b200:	7aba      	ldrb	r2, [r7, #10]
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	4927      	ldr	r1, [pc, #156]	@ (800b2a4 <OLED_ShowChar+0x120>)
 800b206:	0112      	lsls	r2, r2, #4
 800b208:	440a      	add	r2, r1
 800b20a:	4413      	add	r3, r2
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	737b      	strb	r3, [r7, #13]
 800b210:	e00d      	b.n	800b22e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 800b212:	793b      	ldrb	r3, [r7, #4]
 800b214:	2b18      	cmp	r3, #24
 800b216:	d13e      	bne.n	800b296 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 800b218:	7aba      	ldrb	r2, [r7, #10]
 800b21a:	7bf9      	ldrb	r1, [r7, #15]
 800b21c:	4822      	ldr	r0, [pc, #136]	@ (800b2a8 <OLED_ShowChar+0x124>)
 800b21e:	4613      	mov	r3, r2
 800b220:	00db      	lsls	r3, r3, #3
 800b222:	4413      	add	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4403      	add	r3, r0
 800b228:	440b      	add	r3, r1
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 800b22e:	2300      	movs	r3, #0
 800b230:	73bb      	strb	r3, [r7, #14]
 800b232:	e025      	b.n	800b280 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 800b234:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	da06      	bge.n	800b24a <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 800b23c:	79ba      	ldrb	r2, [r7, #6]
 800b23e:	79fb      	ldrb	r3, [r7, #7]
 800b240:	4611      	mov	r1, r2
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff ff20 	bl	800b088 <OLED_DrawPoint>
 800b248:	e005      	b.n	800b256 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 800b24a:	79ba      	ldrb	r2, [r7, #6]
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f7ff ff47 	bl	800b0e4 <OLED_ClearPoint>
			temp <<= 1;
 800b256:	7b7b      	ldrb	r3, [r7, #13]
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	737b      	strb	r3, [r7, #13]
			y++;
 800b25c:	79bb      	ldrb	r3, [r7, #6]
 800b25e:	3301      	adds	r3, #1
 800b260:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 800b262:	79ba      	ldrb	r2, [r7, #6]
 800b264:	7b3b      	ldrb	r3, [r7, #12]
 800b266:	1ad2      	subs	r2, r2, r3
 800b268:	793b      	ldrb	r3, [r7, #4]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d105      	bne.n	800b27a <OLED_ShowChar+0xf6>
			{
				y = y0;
 800b26e:	7b3b      	ldrb	r3, [r7, #12]
 800b270:	71bb      	strb	r3, [r7, #6]
				x++;
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	3301      	adds	r3, #1
 800b276:	71fb      	strb	r3, [r7, #7]
				break;
 800b278:	e005      	b.n	800b286 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 800b27a:	7bbb      	ldrb	r3, [r7, #14]
 800b27c:	3301      	adds	r3, #1
 800b27e:	73bb      	strb	r3, [r7, #14]
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	2b07      	cmp	r3, #7
 800b284:	d9d6      	bls.n	800b234 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 800b286:	7bfb      	ldrb	r3, [r7, #15]
 800b288:	3301      	adds	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
 800b28c:	7bfa      	ldrb	r2, [r7, #15]
 800b28e:	7afb      	ldrb	r3, [r7, #11]
 800b290:	429a      	cmp	r2, r3
 800b292:	d3a3      	bcc.n	800b1dc <OLED_ShowChar+0x58>
 800b294:	e000      	b.n	800b298 <OLED_ShowChar+0x114>
			return;
 800b296:	bf00      	nop
			}
		}
	}
}
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd90      	pop	{r4, r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	0800f43c 	.word	0x0800f43c
 800b2a4:	0800f8b0 	.word	0x0800f8b0
 800b2a8:	0800fea0 	.word	0x0800fea0

0800b2ac <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	603a      	str	r2, [r7, #0]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	71bb      	strb	r3, [r7, #6]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800b2c2:	e01b      	b.n	800b2fc <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	781a      	ldrb	r2, [r3, #0]
 800b2c8:	797b      	ldrb	r3, [r7, #5]
 800b2ca:	79b9      	ldrb	r1, [r7, #6]
 800b2cc:	79f8      	ldrb	r0, [r7, #7]
 800b2ce:	f7ff ff59 	bl	800b184 <OLED_ShowChar>
		x += size1 / 2;
 800b2d2:	797b      	ldrb	r3, [r7, #5]
 800b2d4:	085b      	lsrs	r3, r3, #1
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	4413      	add	r3, r2
 800b2dc:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 800b2de:	79fa      	ldrb	r2, [r7, #7]
 800b2e0:	797b      	ldrb	r3, [r7, #5]
 800b2e2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	dd05      	ble.n	800b2f6 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	71fb      	strb	r3, [r7, #7]
			y += size1;
 800b2ee:	79ba      	ldrb	r2, [r7, #6]
 800b2f0:	797b      	ldrb	r3, [r7, #5]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b1f      	cmp	r3, #31
 800b302:	d903      	bls.n	800b30c <OLED_ShowString+0x60>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b7e      	cmp	r3, #126	@ 0x7e
 800b30a:	d9db      	bls.n	800b2c4 <OLED_ShowString+0x18>
	}
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 800b318:	2200      	movs	r2, #0
 800b31a:	2120      	movs	r1, #32
 800b31c:	483f      	ldr	r0, [pc, #252]	@ (800b41c <OLED_Init+0x108>)
 800b31e:	f7f7 f953 	bl	80025c8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800b322:	20c8      	movs	r0, #200	@ 0xc8
 800b324:	f7f6 fbc8 	bl	8001ab8 <HAL_Delay>
	OLED_RES_Set();
 800b328:	2201      	movs	r2, #1
 800b32a:	2120      	movs	r1, #32
 800b32c:	483b      	ldr	r0, [pc, #236]	@ (800b41c <OLED_Init+0x108>)
 800b32e:	f7f7 f94b 	bl	80025c8 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 800b332:	2100      	movs	r1, #0
 800b334:	20ae      	movs	r0, #174	@ 0xae
 800b336:	f7ff fe11 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 800b33a:	2100      	movs	r1, #0
 800b33c:	2000      	movs	r0, #0
 800b33e:	f7ff fe0d 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 800b342:	2100      	movs	r1, #0
 800b344:	2010      	movs	r0, #16
 800b346:	f7ff fe09 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800b34a:	2100      	movs	r1, #0
 800b34c:	2040      	movs	r0, #64	@ 0x40
 800b34e:	f7ff fe05 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 800b352:	2100      	movs	r1, #0
 800b354:	2081      	movs	r0, #129	@ 0x81
 800b356:	f7ff fe01 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 800b35a:	2100      	movs	r1, #0
 800b35c:	20cf      	movs	r0, #207	@ 0xcf
 800b35e:	f7ff fdfd 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 800b362:	2100      	movs	r1, #0
 800b364:	20a1      	movs	r0, #161	@ 0xa1
 800b366:	f7ff fdf9 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 800b36a:	2100      	movs	r1, #0
 800b36c:	20c8      	movs	r0, #200	@ 0xc8
 800b36e:	f7ff fdf5 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 800b372:	2100      	movs	r1, #0
 800b374:	20a6      	movs	r0, #166	@ 0xa6
 800b376:	f7ff fdf1 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 800b37a:	2100      	movs	r1, #0
 800b37c:	20a8      	movs	r0, #168	@ 0xa8
 800b37e:	f7ff fded 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 800b382:	2100      	movs	r1, #0
 800b384:	203f      	movs	r0, #63	@ 0x3f
 800b386:	f7ff fde9 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800b38a:	2100      	movs	r1, #0
 800b38c:	20d3      	movs	r0, #211	@ 0xd3
 800b38e:	f7ff fde5 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 800b392:	2100      	movs	r1, #0
 800b394:	2000      	movs	r0, #0
 800b396:	f7ff fde1 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 800b39a:	2100      	movs	r1, #0
 800b39c:	20d5      	movs	r0, #213	@ 0xd5
 800b39e:	f7ff fddd 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	2080      	movs	r0, #128	@ 0x80
 800b3a6:	f7ff fdd9 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	20d9      	movs	r0, #217	@ 0xd9
 800b3ae:	f7ff fdd5 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	20f1      	movs	r0, #241	@ 0xf1
 800b3b6:	f7ff fdd1 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	20da      	movs	r0, #218	@ 0xda
 800b3be:	f7ff fdcd 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	2012      	movs	r0, #18
 800b3c6:	f7ff fdc9 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	20db      	movs	r0, #219	@ 0xdb
 800b3ce:	f7ff fdc5 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	2040      	movs	r0, #64	@ 0x40
 800b3d6:	f7ff fdc1 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800b3da:	2100      	movs	r1, #0
 800b3dc:	2020      	movs	r0, #32
 800b3de:	f7ff fdbd 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	2002      	movs	r0, #2
 800b3e6:	f7ff fdb9 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	208d      	movs	r0, #141	@ 0x8d
 800b3ee:	f7ff fdb5 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	2014      	movs	r0, #20
 800b3f6:	f7ff fdb1 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	20a4      	movs	r0, #164	@ 0xa4
 800b3fe:	f7ff fdad 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 800b402:	2100      	movs	r1, #0
 800b404:	20a6      	movs	r0, #166	@ 0xa6
 800b406:	f7ff fda9 	bl	800af5c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 800b40a:	2100      	movs	r1, #0
 800b40c:	20af      	movs	r0, #175	@ 0xaf
 800b40e:	f7ff fda5 	bl	800af5c <OLED_WR_Byte>
	OLED_Clear();
 800b412:	f7ff fe13 	bl	800b03c <OLED_Clear>
}
 800b416:	bf00      	nop
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	58020800 	.word	0x58020800

0800b420 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6178      	str	r0, [r7, #20]
 800b428:	ed87 0a04 	vstr	s0, [r7, #16]
 800b42c:	edc7 0a03 	vstr	s1, [r7, #12]
 800b430:	ed87 1a02 	vstr	s2, [r7, #8]
 800b434:	edc7 1a01 	vstr	s3, [r7, #4]
 800b438:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f04f 0200 	mov.w	r2, #0
 800b460:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f04f 0200 	mov.w	r2, #0
 800b468:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f04f 0200 	mov.w	r2, #0
 800b470:	615a      	str	r2, [r3, #20]
}
 800b472:	bf00      	nop
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 800b47e:	b480      	push	{r7}
 800b480:	b085      	sub	sp, #20
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	ed87 0a02 	vstr	s0, [r7, #8]
 800b48a:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 800b48e:	ed97 7a02 	vldr	s14, [r7, #8]
 800b492:	edd7 7a01 	vldr	s15, [r7, #4]
 800b496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	ed93 7a06 	vldr	s14, [r3, #24]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	edd3 6a00 	vldr	s13, [r3]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	ed93 6a03 	vldr	s12, [r3, #12]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b4bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	ed93 6a01 	vldr	s12, [r3, #4]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800b4cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b4d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	ed93 6a02 	vldr	s12, [r3, #8]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	edd3 5a03 	vldr	s11, [r3, #12]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	edd3 7a04 	vldr	s15, [r3, #16]
 800b4e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b4ea:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	edd3 7a05 	vldr	s15, [r3, #20]
 800b4f4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800b4f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b4fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b500:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	691a      	ldr	r2, [r3, #16]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	68da      	ldr	r2, [r3, #12]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	edd3 7a07 	vldr	s15, [r3, #28]
 800b526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52e:	dd04      	ble.n	800b53a <pid+0xbc>
		pid->out = pid->Max;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	69da      	ldr	r2, [r3, #28]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 800b538:	e00f      	b.n	800b55a <pid+0xdc>
	else if (pid->out < pid->Min)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	ed93 7a06 	vldr	s14, [r3, #24]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	edd3 7a08 	vldr	s15, [r3, #32]
 800b546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b54e:	d400      	bmi.n	800b552 <pid+0xd4>
}
 800b550:	e003      	b.n	800b55a <pid+0xdc>
		pid->out = pid->Min;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6a1a      	ldr	r2, [r3, #32]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	619a      	str	r2, [r3, #24]
}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <svpwm_Control>:
 * @brief  SVPWM控制
 * @param  signal PLL信号输入结构体指针
 * @param  Udc 直流母线电压
 */
void svpwm_Control(pll_Signal_V *signal, float Udc)
{
 800b568:	b480      	push	{r7}
 800b56a:	b093      	sub	sp, #76	@ 0x4c
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	ed87 0a00 	vstr	s0, [r7]
    // 电压标幺化
    float Ts = signal->basic->Ts;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float Ubase = Udc / 1.7320508f;
 800b57c:	ed97 7a00 	vldr	s14, [r7]
 800b580:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 800b850 <svpwm_Control+0x2e8>
 800b584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b588:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Ualpha = signal->basic->clarke_alpha / Ubase;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	edd3 6a03 	vldr	s13, [r3, #12]
 800b594:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59c:	edc7 7a08 	vstr	s15, [r7, #32]
    float Ubeta = signal->basic->clarke_beta / Ubase;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	edd3 6a04 	vldr	s13, [r3, #16]
 800b5a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800b5ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b0:	edc7 7a07 	vstr	s15, [r7, #28]
    // 计算中间变量
    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 800b5b4:	edd7 7a08 	vldr	s15, [r7, #32]
 800b5b8:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800b850 <svpwm_Control+0x2e8>
 800b5bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5c0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b5c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c8:	edc7 7a06 	vstr	s15, [r7, #24]
    float Ubeta_ = Ubeta * Ts;
 800b5cc:	ed97 7a07 	vldr	s14, [r7, #28]
 800b5d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b5d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d8:	edc7 7a05 	vstr	s15, [r7, #20]
    // 计算XYZ
    float X = Ubeta_;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	613b      	str	r3, [r7, #16]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 800b5e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800b5e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b5e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b5ec:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5f0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b5f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5fc:	edc7 7a03 	vstr	s15, [r7, #12]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 800b600:	edd7 7a05 	vldr	s15, [r7, #20]
 800b604:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b60c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b610:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800b614:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b61c:	edc7 7a02 	vstr	s15, [r7, #8]
    // 通过XYZ做扇区判断
    uint8_t sector = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (Y < 0)
 800b626:	edd7 7a03 	vldr	s15, [r7, #12]
 800b62a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b632:	d519      	bpl.n	800b668 <svpwm_Control+0x100>
    {
        if (Z < 0)
 800b634:	edd7 7a02 	vldr	s15, [r7, #8]
 800b638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	d503      	bpl.n	800b64a <svpwm_Control+0xe2>
        {
            sector = 5;
 800b642:	2305      	movs	r3, #5
 800b644:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b648:	e027      	b.n	800b69a <svpwm_Control+0x132>
        }
        else
        {
            if (X < 0)
 800b64a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b64e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b656:	d503      	bpl.n	800b660 <svpwm_Control+0xf8>
            {
                sector = 4;
 800b658:	2304      	movs	r3, #4
 800b65a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b65e:	e01c      	b.n	800b69a <svpwm_Control+0x132>
            }
            else
            {
                sector = 3;
 800b660:	2303      	movs	r3, #3
 800b662:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b666:	e018      	b.n	800b69a <svpwm_Control+0x132>
            }
        }
    }
    else
    {
        if (Z > 0)
 800b668:	edd7 7a02 	vldr	s15, [r7, #8]
 800b66c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b674:	dd03      	ble.n	800b67e <svpwm_Control+0x116>
        {
            sector = 2;
 800b676:	2302      	movs	r3, #2
 800b678:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b67c:	e00d      	b.n	800b69a <svpwm_Control+0x132>
        }
        else
        {
            if (X < 0)
 800b67e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b68a:	d503      	bpl.n	800b694 <svpwm_Control+0x12c>
            {
                sector = 6;
 800b68c:	2306      	movs	r3, #6
 800b68e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b692:	e002      	b.n	800b69a <svpwm_Control+0x132>
            }
            else
            {
                sector = 1;
 800b694:	2301      	movs	r3, #1
 800b696:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }
        }
    }
    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 800b69a:	f04f 0300 	mov.w	r3, #0
 800b69e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6a0:	f04f 0300 	mov.w	r3, #0
 800b6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6a6:	f04f 0300 	mov.w	r3, #0
 800b6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (sector)
 800b6ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	2b05      	cmp	r3, #5
 800b6b4:	f200 80f5 	bhi.w	800b8a2 <svpwm_Control+0x33a>
 800b6b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c0 <svpwm_Control+0x158>)
 800b6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6be:	bf00      	nop
 800b6c0:	0800b6d9 	.word	0x0800b6d9
 800b6c4:	0800b723 	.word	0x0800b723
 800b6c8:	0800b76d 	.word	0x0800b76d
 800b6cc:	0800b7b7 	.word	0x0800b7b7
 800b6d0:	0800b801 	.word	0x0800b801
 800b6d4:	0800b859 	.word	0x0800b859
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 800b6d8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b6dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b6e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6e4:	edd7 6a04 	vldr	s13, [r7, #16]
 800b6e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b6f0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b6f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b6f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6fc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Ta + Z;
 800b700:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800b704:	edd7 7a02 	vldr	s15, [r7, #8]
 800b708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b70c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Tc = Tb - X;
 800b710:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800b714:	edd7 7a04 	vldr	s15, [r7, #16]
 800b718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b71c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        break;
 800b720:	e0bf      	b.n	800b8a2 <svpwm_Control+0x33a>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 800b722:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b726:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b72a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b72e:	edd7 6a02 	vldr	s13, [r7, #8]
 800b732:	edd7 7a03 	vldr	s15, [r7, #12]
 800b736:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b73a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b73e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b742:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b746:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Ta = Tb - Z;
 800b74a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800b74e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b752:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b756:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tc = Ta - Y;
 800b75a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800b75e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b762:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b766:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        break;
 800b76a:	e09a      	b.n	800b8a2 <svpwm_Control+0x33a>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 800b76c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b770:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b774:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b778:	edd7 6a04 	vldr	s13, [r7, #16]
 800b77c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b780:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b784:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b788:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b78c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b790:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Tc = Tb - X;
 800b794:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800b798:	edd7 7a04 	vldr	s15, [r7, #16]
 800b79c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7a0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Ta = Tc + Y;
 800b7a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800b7a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b7ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7b0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 800b7b4:	e075      	b.n	800b8a2 <svpwm_Control+0x33a>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 800b7b6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b7ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b7be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b7c2:	edd7 6a02 	vldr	s13, [r7, #8]
 800b7c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b7ce:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b7d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b7d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7da:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Tb = Tc + X;
 800b7de:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800b7e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ea:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Ta = Tb - Z;
 800b7ee:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800b7f2:	edd7 7a02 	vldr	s15, [r7, #8]
 800b7f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7fa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 800b7fe:	e050      	b.n	800b8a2 <svpwm_Control+0x33a>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 800b800:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b804:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b808:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b80c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b810:	eef1 6a67 	vneg.f32	s13, s15
 800b814:	edd7 7a02 	vldr	s15, [r7, #8]
 800b818:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b81c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b820:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b828:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Ta = Tc + Y;
 800b82c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800b830:	edd7 7a03 	vldr	s15, [r7, #12]
 800b834:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b838:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Ta + Z;
 800b83c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800b840:	edd7 7a02 	vldr	s15, [r7, #8]
 800b844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b848:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        break;
 800b84c:	e029      	b.n	800b8a2 <svpwm_Control+0x33a>
 800b84e:	bf00      	nop
 800b850:	3fddb3d7 	.word	0x3fddb3d7
 800b854:	45bb7800 	.word	0x45bb7800
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 800b858:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800b85c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b860:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b864:	edd7 6a03 	vldr	s13, [r7, #12]
 800b868:	edd7 7a04 	vldr	s15, [r7, #16]
 800b86c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b870:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b874:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b87c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tc = Ta - Y;
 800b880:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800b884:	edd7 7a03 	vldr	s15, [r7, #12]
 800b888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b88c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Tb = Tc + X;
 800b890:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800b894:	edd7 7a04 	vldr	s15, [r7, #16]
 800b898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b89c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        break;
 800b8a0:	bf00      	nop
    }
    // 计算占空比并更新TIM寄存器
    uint32_t ccr_a = (uint32_t)(Ta / Ts * 5999);
 800b8a2:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800b8a6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ae:	ed1f 7a17 	vldr	s14, [pc, #-92]	@ 800b854 <svpwm_Control+0x2ec>
 800b8b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ba:	ee17 3a90 	vmov	r3, s15
 800b8be:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t ccr_b = (uint32_t)(Tb / Ts * 5999);
 800b8c0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800b8c4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8cc:	ed1f 7a1f 	vldr	s14, [pc, #-124]	@ 800b854 <svpwm_Control+0x2ec>
 800b8d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8d8:	ee17 3a90 	vmov	r3, s15
 800b8dc:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t ccr_c = (uint32_t)(Tc / Ts * 5999);
 800b8de:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800b8e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800b8e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ea:	ed1f 7a26 	vldr	s14, [pc, #-152]	@ 800b854 <svpwm_Control+0x2ec>
 800b8ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f6:	ee17 3a90 	vmov	r3, s15
 800b8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (ccr_a > 5999)
 800b8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8fe:	f241 726f 	movw	r2, #5999	@ 0x176f
 800b902:	4293      	cmp	r3, r2
 800b904:	d902      	bls.n	800b90c <svpwm_Control+0x3a4>
        ccr_a = 5999;
 800b906:	f241 736f 	movw	r3, #5999	@ 0x176f
 800b90a:	637b      	str	r3, [r7, #52]	@ 0x34
    else if (ccr_a < 0)
        ccr_a = 0;
    if (ccr_b > 5999)
 800b90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90e:	f241 726f 	movw	r2, #5999	@ 0x176f
 800b912:	4293      	cmp	r3, r2
 800b914:	d902      	bls.n	800b91c <svpwm_Control+0x3b4>
        ccr_b = 5999;
 800b916:	f241 736f 	movw	r3, #5999	@ 0x176f
 800b91a:	633b      	str	r3, [r7, #48]	@ 0x30
    else if (ccr_b < 0)
        ccr_b = 0;
    if (ccr_c > 5999)
 800b91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b91e:	f241 726f 	movw	r2, #5999	@ 0x176f
 800b922:	4293      	cmp	r3, r2
 800b924:	d902      	bls.n	800b92c <svpwm_Control+0x3c4>
        ccr_c = 5999;
 800b926:	f241 736f 	movw	r3, #5999	@ 0x176f
 800b92a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    else if (ccr_c < 0)
        ccr_c = 0;

    TIM1->CCR1 = ccr_a;
 800b92c:	4a07      	ldr	r2, [pc, #28]	@ (800b94c <svpwm_Control+0x3e4>)
 800b92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b930:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr_b;
 800b932:	4a06      	ldr	r2, [pc, #24]	@ (800b94c <svpwm_Control+0x3e4>)
 800b934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b936:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr_c;
 800b938:	4a04      	ldr	r2, [pc, #16]	@ (800b94c <svpwm_Control+0x3e4>)
 800b93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800b93e:	bf00      	nop
 800b940:	374c      	adds	r7, #76	@ 0x4c
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	40010000 	.word	0x40010000

0800b950 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F, float Umax)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	ed87 0a02 	vstr	s0, [r7, #8]
 800b95c:	460b      	mov	r3, r1
 800b95e:	edc7 0a00 	vstr	s1, [r7]
 800b962:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 800b964:	200c      	movs	r0, #12
 800b966:	f000 fc79 	bl	800c25c <malloc>
 800b96a:	4603      	mov	r3, r0
 800b96c:	461a      	mov	r2, r3
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681c      	ldr	r4, [r3, #0]
 800b976:	2044      	movs	r0, #68	@ 0x44
 800b978:	f000 fc70 	bl	800c25c <malloc>
 800b97c:	4603      	mov	r3, r0
 800b97e:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681c      	ldr	r4, [r3, #0]
 800b984:	2024      	movs	r0, #36	@ 0x24
 800b986:	f000 fc69 	bl	800c25c <malloc>
 800b98a:	4603      	mov	r3, r0
 800b98c:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f04f 0200 	mov.w	r2, #0
 800b998:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f04f 0200 	mov.w	r2, #0
 800b9a4:	605a      	str	r2, [r3, #4]

    (*signal)->theta = 0.f;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f04f 0200 	mov.w	r2, #0
 800b9ae:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800b9ba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800ba70 <pll_Init_V+0x120>
 800b9be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9c2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 800b9c6:	88fb      	ldrh	r3, [r7, #6]
 800b9c8:	ee07 3a90 	vmov	s15, r3
 800b9cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9de:	edc3 7a08 	vstr	s15, [r3, #32]
    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0 / Umax;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	ed93 7a07 	vldr	s14, [r3, #28]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	edd3 7a07 	vldr	s15, [r3, #28]
 800b9f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b9fa:	ed97 7a00 	vldr	s14, [r7]
 800b9fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba02:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 800ba06:	ed97 7a00 	vldr	s14, [r7]
 800ba0a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba16:	eeb0 0b47 	vmov.f64	d0, d7
 800ba1a:	f003 f9fd 	bl	800ee18 <sqrt>
 800ba1e:	eeb0 7b40 	vmov.f64	d7, d0
 800ba22:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 800ba68 <pll_Init_V+0x118>
 800ba26:	ee27 5b06 	vmul.f64	d5, d7, d6
 800ba2a:	edd7 7a00 	vldr	s15, [r7]
 800ba2e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ba32:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ba36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba3a:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 800ba74 <pll_Init_V+0x124>
 800ba48:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 800ba78 <pll_Init_V+0x128>
 800ba4c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 800ba7c <pll_Init_V+0x12c>
 800ba50:	edd7 0a05 	vldr	s1, [r7, #20]
 800ba54:	ed97 0a04 	vldr	s0, [r7, #16]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff fce1 	bl	800b420 <pid_Init>
}
 800ba5e:	bf00      	nop
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd90      	pop	{r4, r7, pc}
 800ba66:	bf00      	nop
 800ba68:	667f3bcd 	.word	0x667f3bcd
 800ba6c:	3ff6a09e 	.word	0x3ff6a09e
 800ba70:	40c90fdb 	.word	0x40c90fdb
 800ba74:	c27b53d2 	.word	0xc27b53d2
 800ba78:	431d1463 	.word	0x431d1463
 800ba7c:	00000000 	.word	0x00000000

0800ba80 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 800ba80:	b590      	push	{r4, r7, lr}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	ed87 0a02 	vstr	s0, [r7, #8]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 800ba90:	2028      	movs	r0, #40	@ 0x28
 800ba92:	f000 fbe3 	bl	800c25c <malloc>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681c      	ldr	r4, [r3, #0]
 800baa2:	2044      	movs	r0, #68	@ 0x44
 800baa4:	f000 fbda 	bl	800c25c <malloc>
 800baa8:	4603      	mov	r3, r0
 800baaa:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681c      	ldr	r4, [r3, #0]
 800bab0:	2024      	movs	r0, #36	@ 0x24
 800bab2:	f000 fbd3 	bl	800c25c <malloc>
 800bab6:	4603      	mov	r3, r0
 800bab8:	6223      	str	r3, [r4, #32]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681c      	ldr	r4, [r3, #0]
 800babe:	2024      	movs	r0, #36	@ 0x24
 800bac0:	f000 fbcc 	bl	800c25c <malloc>
 800bac4:	4603      	mov	r3, r0
 800bac6:	6263      	str	r3, [r4, #36]	@ 0x24
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f04f 0200 	mov.w	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f04f 0200 	mov.w	r2, #0
 800bade:	605a      	str	r2, [r3, #4]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	edd7 7a02 	vldr	s15, [r7, #8]
 800baea:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800bb6c <pll_Init_I+0xec>
 800baee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800baf2:	edc3 7a07 	vstr	s15, [r3, #28]
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	ee07 3a90 	vmov	s15, r3
 800bafc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb0e:	edc3 7a08 	vstr	s15, [r3, #32]

    (*signal)->CorL = 0;    // 0:感性 1:容性
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2200      	movs	r2, #0
 800bb18:	761a      	strb	r2, [r3, #24]
    (*signal)->L = 0.0043f; // 4.3mH
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a14      	ldr	r2, [pc, #80]	@ (800bb70 <pll_Init_I+0xf0>)
 800bb20:	61da      	str	r2, [r3, #28]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 0.5f, 0.01f, 0, -80.f, -160.f);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6a1b      	ldr	r3, [r3, #32]
 800bb28:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 800bb74 <pll_Init_I+0xf4>
 800bb2c:	eddf 1a12 	vldr	s3, [pc, #72]	@ 800bb78 <pll_Init_I+0xf8>
 800bb30:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800bb7c <pll_Init_I+0xfc>
 800bb34:	eddf 0a12 	vldr	s1, [pc, #72]	@ 800bb80 <pll_Init_I+0x100>
 800bb38:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff fc6f 	bl	800b420 <pid_Init>
    pid_Init((*signal)->pid_q, 0.5f, 0.01f, 0, 20.f, -10.f);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb48:	eeba 2a04 	vmov.f32	s4, #164	@ 0xc1200000 -10.0
 800bb4c:	eef3 1a04 	vmov.f32	s3, #52	@ 0x41a00000  20.0
 800bb50:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800bb7c <pll_Init_I+0xfc>
 800bb54:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 800bb80 <pll_Init_I+0x100>
 800bb58:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff fc5f 	bl	800b420 <pid_Init>
}
 800bb62:	bf00      	nop
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd90      	pop	{r4, r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	40c90fdb 	.word	0x40c90fdb
 800bb70:	3b8ce704 	.word	0x3b8ce704
 800bb74:	c3200000 	.word	0xc3200000
 800bb78:	c2a00000 	.word	0xc2a00000
 800bb7c:	00000000 	.word	0x00000000
 800bb80:	3c23d70a 	.word	0x3c23d70a
 800bb84:	00000000 	.word	0x00000000

0800bb88 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 800bb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8c:	ed2d 8b02 	vpush	{d8}
 800bb90:	b08c      	sub	sp, #48	@ 0x30
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_V->basic->input_a, signal_V->basic->input_b, &signal_V->basic->clarke_alpha, &signal_V->basic->clarke_beta);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6818      	ldr	r0, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6859      	ldr	r1, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f103 020c 	add.w	r2, r3, #12
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3310      	adds	r3, #16
 800bbb0:	6178      	str	r0, [r7, #20]
 800bbb2:	6139      	str	r1, [r7, #16]
 800bbb4:	60fa      	str	r2, [r7, #12]
 800bbb6:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 800bbbe:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbc2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800bd08 <pll_Control_V+0x180>
 800bbc6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbca:	edd7 7a04 	vldr	s15, [r7, #16]
 800bbce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bd0c <pll_Control_V+0x184>
 800bbd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	edc3 7a00 	vstr	s15, [r3]
  }
 800bbe0:	bf00      	nop
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	691e      	ldr	r6, [r3, #16]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f103 0514 	add.w	r5, r3, #20
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f103 0418 	add.w	r4, r3, #24
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc06:	eeb0 0a67 	vmov.f32	s0, s15
 800bc0a:	f000 fa97 	bl	800c13c <arm_sin_f32>
 800bc0e:	eeb0 8a40 	vmov.f32	s16, s0
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc18:	eeb0 0a67 	vmov.f32	s0, s15
 800bc1c:	f000 fad4 	bl	800c1c8 <arm_cos_f32>
 800bc20:	eef0 7a40 	vmov.f32	s15, s0
 800bc24:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 800bc28:	62be      	str	r6, [r7, #40]	@ 0x28
 800bc2a:	627d      	str	r5, [r7, #36]	@ 0x24
 800bc2c:	623c      	str	r4, [r7, #32]
 800bc2e:	ed87 8a07 	vstr	s16, [r7, #28]
 800bc32:	edc7 7a06 	vstr	s15, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800bc36:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800bc3a:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc42:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800bc46:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc54:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800bc58:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800bc5c:	eeb1 7a67 	vneg.f32	s14, s15
 800bc60:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc68:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800bc6c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	edc3 7a00 	vstr	s15, [r3]
  }
 800bc7e:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	689a      	ldr	r2, [r3, #8]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	edd3 7a06 	vldr	s15, [r3, #24]
 800bc8c:	eddf 0a20 	vldr	s1, [pc, #128]	@ 800bd10 <pll_Control_V+0x188>
 800bc90:	eeb0 0a67 	vmov.f32	s0, s15
 800bc94:	4610      	mov	r0, r2
 800bc96:	f7ff fbf2 	bl	800b47e <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	ed93 7a01 	vldr	s14, [r3, #4]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	edd3 6a06 	vldr	s13, [r3, #24]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	edd3 7a07 	vldr	s15, [r3, #28]
 800bcb0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	edd3 7a08 	vldr	s15, [r3, #32]
 800bcbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bcc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	edd3 7a01 	vldr	s15, [r3, #4]
 800bcd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bcd4:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 800bd00 <pll_Control_V+0x178>
 800bcd8:	eeb0 0b47 	vmov.f64	d0, d7
 800bcdc:	f003 f878 	bl	800edd0 <fmod>
 800bce0:	eeb0 7b40 	vmov.f64	d7, d0
 800bce4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800bcee:	bf00      	nop
 800bcf0:	3730      	adds	r7, #48	@ 0x30
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	ecbd 8b02 	vpop	{d8}
 800bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfc:	f3af 8000 	nop.w
 800bd00:	60000000 	.word	0x60000000
 800bd04:	401921fb 	.word	0x401921fb
 800bd08:	3f13cd3a 	.word	0x3f13cd3a
 800bd0c:	3f93cd3a 	.word	0x3f93cd3a
 800bd10:	00000000 	.word	0x00000000

0800bd14 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 800bd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd18:	ed2d 8b02 	vpush	{d8}
 800bd1c:	b094      	sub	sp, #80	@ 0x50
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	ed87 0a01 	vstr	s0, [r7, #4]
 800bd28:	edc7 0a00 	vstr	s1, [r7]
    static float Uabd;
    static float Uabq;
    static float PFTheta;
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_I->basic->input_a, signal_I->basic->input_b, &signal_I->basic->clarke_alpha, &signal_I->basic->clarke_beta);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6859      	ldr	r1, [r3, #4]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f103 020c 	add.w	r2, r3, #12
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3310      	adds	r3, #16
 800bd46:	6378      	str	r0, [r7, #52]	@ 0x34
 800bd48:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pIalpha = Ia;
 800bd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd52:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 800bd54:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800bd58:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800c000 <pll_Control_I+0x2ec>
 800bd5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bd60:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800bd64:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800c004 <pll_Control_I+0x2f0>
 800bd68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd72:	edc3 7a00 	vstr	s15, [r3]
  }
 800bd76:	bf00      	nop
    // 在电压的系上得出电流的dq值
    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	691e      	ldr	r6, [r3, #16]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f103 0514 	add.w	r5, r3, #20
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f103 0418 	add.w	r4, r3, #24
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd9c:	eeb0 0a67 	vmov.f32	s0, s15
 800bda0:	f000 f9cc 	bl	800c13c <arm_sin_f32>
 800bda4:	eeb0 8a40 	vmov.f32	s16, s0
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	edd3 7a01 	vldr	s15, [r3, #4]
 800bdae:	eeb0 0a67 	vmov.f32	s0, s15
 800bdb2:	f000 fa09 	bl	800c1c8 <arm_cos_f32>
 800bdb6:	eef0 7a40 	vmov.f32	s15, s0
 800bdba:	f8c7 804c 	str.w	r8, [r7, #76]	@ 0x4c
 800bdbe:	64be      	str	r6, [r7, #72]	@ 0x48
 800bdc0:	647d      	str	r5, [r7, #68]	@ 0x44
 800bdc2:	643c      	str	r4, [r7, #64]	@ 0x40
 800bdc4:	ed87 8a0f 	vstr	s16, [r7, #60]	@ 0x3c
 800bdc8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 800bdcc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800bdd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800bdd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdd8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800bddc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800bde0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bde4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bde8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdea:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 800bdee:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800bdf2:	eeb1 7a67 	vneg.f32	s14, s15
 800bdf6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800bdfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdfe:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800be02:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800be06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be10:	edc3 7a00 	vstr	s15, [r3]
  }
 800be14:	bf00      	nop
    // PI控制
    PFTheta = acosf(PF);
 800be16:	ed97 0a00 	vldr	s0, [r7]
 800be1a:	f003 f81d 	bl	800ee58 <acosf>
 800be1e:	eef0 7a40 	vmov.f32	s15, s0
 800be22:	4b79      	ldr	r3, [pc, #484]	@ (800c008 <pll_Control_I+0x2f4>)
 800be24:	edc3 7a00 	vstr	s15, [r3]
    pid(signal_I->pid_d, Iset * 1.414f * arm_cos_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6a1c      	ldr	r4, [r3, #32]
 800be2c:	edd7 7a01 	vldr	s15, [r7, #4]
 800be30:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800c00c <pll_Control_I+0x2f8>
 800be34:	ee27 8a87 	vmul.f32	s16, s15, s14
 800be38:	4b73      	ldr	r3, [pc, #460]	@ (800c008 <pll_Control_I+0x2f4>)
 800be3a:	edd3 7a00 	vldr	s15, [r3]
 800be3e:	eeb0 0a67 	vmov.f32	s0, s15
 800be42:	f000 f9c1 	bl	800c1c8 <arm_cos_f32>
 800be46:	eef0 7a40 	vmov.f32	s15, s0
 800be4a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	ed93 7a05 	vldr	s14, [r3, #20]
 800be56:	eef0 0a47 	vmov.f32	s1, s14
 800be5a:	eeb0 0a67 	vmov.f32	s0, s15
 800be5e:	4620      	mov	r0, r4
 800be60:	f7ff fb0d 	bl	800b47e <pid>
    if (signal_I->CorL == 1)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	7e1b      	ldrb	r3, [r3, #24]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d11e      	bne.n	800beaa <pll_Control_I+0x196>
    {
        pid(signal_I->pid_q, Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800be70:	edd7 7a01 	vldr	s15, [r7, #4]
 800be74:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800c00c <pll_Control_I+0x2f8>
 800be78:	ee27 8a87 	vmul.f32	s16, s15, s14
 800be7c:	4b62      	ldr	r3, [pc, #392]	@ (800c008 <pll_Control_I+0x2f4>)
 800be7e:	edd3 7a00 	vldr	s15, [r3]
 800be82:	eeb0 0a67 	vmov.f32	s0, s15
 800be86:	f000 f959 	bl	800c13c <arm_sin_f32>
 800be8a:	eef0 7a40 	vmov.f32	s15, s0
 800be8e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	ed93 7a06 	vldr	s14, [r3, #24]
 800be9a:	eef0 0a47 	vmov.f32	s1, s14
 800be9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bea2:	4620      	mov	r0, r4
 800bea4:	f7ff faeb 	bl	800b47e <pid>
 800bea8:	e01f      	b.n	800beea <pll_Control_I+0x1d6>
    }
    else
    {
        pid(signal_I->pid_q, -Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800beae:	edd7 7a01 	vldr	s15, [r7, #4]
 800beb2:	eef1 7a67 	vneg.f32	s15, s15
 800beb6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c00c <pll_Control_I+0x2f8>
 800beba:	ee27 8a87 	vmul.f32	s16, s15, s14
 800bebe:	4b52      	ldr	r3, [pc, #328]	@ (800c008 <pll_Control_I+0x2f4>)
 800bec0:	edd3 7a00 	vldr	s15, [r3]
 800bec4:	eeb0 0a67 	vmov.f32	s0, s15
 800bec8:	f000 f938 	bl	800c13c <arm_sin_f32>
 800becc:	eef0 7a40 	vmov.f32	s15, s0
 800bed0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	ed93 7a06 	vldr	s14, [r3, #24]
 800bedc:	eef0 0a47 	vmov.f32	s1, s14
 800bee0:	eeb0 0a67 	vmov.f32	s0, s15
 800bee4:	4620      	mov	r0, r4
 800bee6:	f7ff faca 	bl	800b47e <pid>
    }
    // 解耦调制
    Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	ed93 7a05 	vldr	s14, [r3, #20]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	edd3 7a06 	vldr	s15, [r3, #24]
 800befa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	edd3 6a06 	vldr	s13, [r3, #24]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	edd3 7a07 	vldr	s15, [r3, #28]
 800bf0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	edd3 7a07 	vldr	s15, [r3, #28]
 800bf18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf20:	4b3b      	ldr	r3, [pc, #236]	@ (800c010 <pll_Control_I+0x2fc>)
 800bf22:	edc3 7a00 	vstr	s15, [r3]
    Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	ed93 7a06 	vldr	s14, [r3, #24]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf32:	edd3 7a06 	vldr	s15, [r3, #24]
 800bf36:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	edd3 6a05 	vldr	s13, [r3, #20]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	edd3 7a07 	vldr	s15, [r3, #28]
 800bf4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	edd3 7a07 	vldr	s15, [r3, #28]
 800bf54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bf58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf5c:	4b2d      	ldr	r3, [pc, #180]	@ (800c014 <pll_Control_I+0x300>)
 800bf5e:	edc3 7a00 	vstr	s15, [r3]
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 800bf62:	4b2b      	ldr	r3, [pc, #172]	@ (800c010 <pll_Control_I+0x2fc>)
 800bf64:	f8d3 8000 	ldr.w	r8, [r3]
 800bf68:	4b2a      	ldr	r3, [pc, #168]	@ (800c014 <pll_Control_I+0x300>)
 800bf6a:	681e      	ldr	r6, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	1d1d      	adds	r5, r3, #4
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f103 0408 	add.w	r4, r3, #8
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf7c:	eeb0 0a67 	vmov.f32	s0, s15
 800bf80:	f000 f8dc 	bl	800c13c <arm_sin_f32>
 800bf84:	eeb0 8a40 	vmov.f32	s16, s0
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf8e:	eeb0 0a67 	vmov.f32	s0, s15
 800bf92:	f000 f919 	bl	800c1c8 <arm_cos_f32>
 800bf96:	eef0 7a40 	vmov.f32	s15, s0
 800bf9a:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 800bf9e:	623e      	str	r6, [r7, #32]
 800bfa0:	61fd      	str	r5, [r7, #28]
 800bfa2:	61bc      	str	r4, [r7, #24]
 800bfa4:	ed87 8a05 	vstr	s16, [r7, #20]
 800bfa8:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 800bfac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800bfb0:	edd7 7a04 	vldr	s15, [r7, #16]
 800bfb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfb8:	edd7 6a08 	vldr	s13, [r7, #32]
 800bfbc:	edd7 7a05 	vldr	s15, [r7, #20]
 800bfc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 800bfce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800bfd2:	edd7 7a05 	vldr	s15, [r7, #20]
 800bfd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfda:	edd7 6a08 	vldr	s13, [r7, #32]
 800bfde:	edd7 7a04 	vldr	s15, [r7, #16]
 800bfe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	edc3 7a00 	vstr	s15, [r3]
  }
 800bff0:	bf00      	nop
    // // clarke逆变换
    // arm_inv_clarke_f32(signal_I->park_inv_alpha, signal_I->park_inv_beta, &signal_I->output_a, &signal_I->output_b);
    // // 根据a+b+c=0得出c相
    // signal_I->output_c = -signal_I->output_a - signal_I->output_b;
}
 800bff2:	bf00      	nop
 800bff4:	3750      	adds	r7, #80	@ 0x50
 800bff6:	46bd      	mov	sp, r7
 800bff8:	ecbd 8b02 	vpop	{d8}
 800bffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c000:	3f13cd3a 	.word	0x3f13cd3a
 800c004:	3f93cd3a 	.word	0x3f93cd3a
 800c008:	2400527c 	.word	0x2400527c
 800c00c:	3fb4fdf4 	.word	0x3fb4fdf4
 800c010:	24005280 	.word	0x24005280
 800c014:	24005284 	.word	0x24005284

0800c018 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 800c022:	88fb      	ldrh	r3, [r7, #6]
 800c024:	2b40      	cmp	r3, #64	@ 0x40
 800c026:	d160      	bne.n	800c0ea <HAL_GPIO_EXTI_Callback+0xd2>
    {
        // 读取AD7606数据
        ad7606_GetValue(&hspi2, 5, adcValue);
 800c028:	4a32      	ldr	r2, [pc, #200]	@ (800c0f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800c02a:	2105      	movs	r1, #5
 800c02c:	4832      	ldr	r0, [pc, #200]	@ (800c0f8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800c02e:	f7fe fdc9 	bl	800abc4 <ad7606_GetValue>
        signal_V->basic->input_a = adcValue[1] * 10.f;
 800c032:	4b30      	ldr	r3, [pc, #192]	@ (800c0f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800c034:	edd3 7a01 	vldr	s15, [r3, #4]
 800c038:	4b30      	ldr	r3, [pc, #192]	@ (800c0fc <HAL_GPIO_EXTI_Callback+0xe4>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800c042:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c046:	edc3 7a00 	vstr	s15, [r3]
        signal_V->basic->input_b = adcValue[2] * 10.f;
 800c04a:	4b2a      	ldr	r3, [pc, #168]	@ (800c0f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800c04c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c050:	4b2a      	ldr	r3, [pc, #168]	@ (800c0fc <HAL_GPIO_EXTI_Callback+0xe4>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800c05a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c05e:	edc3 7a01 	vstr	s15, [r3, #4]
        signal_I->basic->input_a = adcValue[3];
 800c062:	4b27      	ldr	r3, [pc, #156]	@ (800c100 <HAL_GPIO_EXTI_Callback+0xe8>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a22      	ldr	r2, [pc, #136]	@ (800c0f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800c06a:	68d2      	ldr	r2, [r2, #12]
 800c06c:	601a      	str	r2, [r3, #0]
        signal_I->basic->input_b = adcValue[4];
 800c06e:	4b24      	ldr	r3, [pc, #144]	@ (800c100 <HAL_GPIO_EXTI_Callback+0xe8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a1f      	ldr	r2, [pc, #124]	@ (800c0f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800c076:	6912      	ldr	r2, [r2, #16]
 800c078:	605a      	str	r2, [r3, #4]
        // 锁相控制
        pll_Control_V(signal_V);
 800c07a:	4b20      	ldr	r3, [pc, #128]	@ (800c0fc <HAL_GPIO_EXTI_Callback+0xe4>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff fd82 	bl	800bb88 <pll_Control_V>
        // 电流内环控制
        pll_Control_I(signal_I, signal_V, 0.5f, 1.f);
 800c084:	4b1e      	ldr	r3, [pc, #120]	@ (800c100 <HAL_GPIO_EXTI_Callback+0xe8>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a1c      	ldr	r2, [pc, #112]	@ (800c0fc <HAL_GPIO_EXTI_Callback+0xe4>)
 800c08a:	6812      	ldr	r2, [r2, #0]
 800c08c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800c090:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff fe3c 	bl	800bd14 <pll_Control_I>
        // svpwm调制
        svpwm_Control(signal_V, 20.f);
 800c09c:	4b17      	ldr	r3, [pc, #92]	@ (800c0fc <HAL_GPIO_EXTI_Callback+0xe4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7ff fa5f 	bl	800b568 <svpwm_Control>
        // DAC输出
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f));
 800c0aa:	4b16      	ldr	r3, [pc, #88]	@ (800c104 <HAL_GPIO_EXTI_Callback+0xec>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0b0:	ee07 3a90 	vmov	s15, r3
 800c0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800c108 <HAL_GPIO_EXTI_Callback+0xf0>
 800c0bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c0c0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800c108 <HAL_GPIO_EXTI_Callback+0xf0>
 800c0c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c0c8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800c10c <HAL_GPIO_EXTI_Callback+0xf4>
 800c0cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800c110 <HAL_GPIO_EXTI_Callback+0xf8>
 800c0d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0dc:	ee17 3a90 	vmov	r3, s15
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	480b      	ldr	r0, [pc, #44]	@ (800c114 <HAL_GPIO_EXTI_Callback+0xfc>)
 800c0e6:	f7f5 ff3e 	bl	8001f66 <HAL_DAC_SetValue>
    }
}
 800c0ea:	bf00      	nop
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	24005288 	.word	0x24005288
 800c0f8:	24000338 	.word	0x24000338
 800c0fc:	240052b0 	.word	0x240052b0
 800c100:	240052b4 	.word	0x240052b4
 800c104:	24000410 	.word	0x24000410
 800c108:	453b8000 	.word	0x453b8000
 800c10c:	44fa0000 	.word	0x44fa0000
 800c110:	45000000 	.word	0x45000000
 800c114:	2400021c 	.word	0x2400021c

0800c118 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  定时器中断
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a04      	ldr	r2, [pc, #16]	@ (800c138 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d101      	bne.n	800c12e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 800c12a:	f7f5 fca5 	bl	8001a78 <HAL_IncTick>
    }
}
 800c12e:	bf00      	nop
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	40001000 	.word	0x40001000

0800c13c <arm_sin_f32>:
 800c13c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800c1bc <arm_sin_f32+0x80>
 800c140:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c144:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c148:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c150:	d504      	bpl.n	800c15c <arm_sin_f32+0x20>
 800c152:	ee17 3a90 	vmov	r3, s15
 800c156:	3b01      	subs	r3, #1
 800c158:	ee07 3a90 	vmov	s15, r3
 800c15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c160:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800c1c0 <arm_sin_f32+0x84>
 800c164:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c16c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c170:	ee17 3a10 	vmov	r3, s14
 800c174:	b29b      	uxth	r3, r3
 800c176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c17a:	d21a      	bcs.n	800c1b2 <arm_sin_f32+0x76>
 800c17c:	ee07 3a10 	vmov	s14, r3
 800c180:	1c59      	adds	r1, r3, #1
 800c182:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800c186:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c18a:	4a0e      	ldr	r2, [pc, #56]	@ (800c1c4 <arm_sin_f32+0x88>)
 800c18c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c190:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c194:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c198:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c19c:	edd3 6a00 	vldr	s13, [r3]
 800c1a0:	ed92 7a00 	vldr	s14, [r2]
 800c1a4:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c1a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1b0:	4770      	bx	lr
 800c1b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e7e6      	b.n	800c18a <arm_sin_f32+0x4e>
 800c1bc:	3e22f983 	.word	0x3e22f983
 800c1c0:	44000000 	.word	0x44000000
 800c1c4:	08010c00 	.word	0x08010c00

0800c1c8 <arm_cos_f32>:
 800c1c8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800c250 <arm_cos_f32+0x88>
 800c1cc:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800c1d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1d4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c1d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e4:	d504      	bpl.n	800c1f0 <arm_cos_f32+0x28>
 800c1e6:	ee17 3a90 	vmov	r3, s15
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	ee07 3a90 	vmov	s15, r3
 800c1f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1f4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800c254 <arm_cos_f32+0x8c>
 800c1f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c1fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c200:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c204:	ee17 3a10 	vmov	r3, s14
 800c208:	b29b      	uxth	r3, r3
 800c20a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c20e:	d21a      	bcs.n	800c246 <arm_cos_f32+0x7e>
 800c210:	ee07 3a10 	vmov	s14, r3
 800c214:	1c59      	adds	r1, r3, #1
 800c216:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 800c21a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c21e:	4a0e      	ldr	r2, [pc, #56]	@ (800c258 <arm_cos_f32+0x90>)
 800c220:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c224:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c228:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c22c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c230:	edd3 6a00 	vldr	s13, [r3]
 800c234:	ed92 7a00 	vldr	s14, [r2]
 800c238:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c23c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c240:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c244:	4770      	bx	lr
 800c246:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c24a:	2101      	movs	r1, #1
 800c24c:	2300      	movs	r3, #0
 800c24e:	e7e6      	b.n	800c21e <arm_cos_f32+0x56>
 800c250:	3e22f983 	.word	0x3e22f983
 800c254:	44000000 	.word	0x44000000
 800c258:	08010c00 	.word	0x08010c00

0800c25c <malloc>:
 800c25c:	4b02      	ldr	r3, [pc, #8]	@ (800c268 <malloc+0xc>)
 800c25e:	4601      	mov	r1, r0
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	f000 b825 	b.w	800c2b0 <_malloc_r>
 800c266:	bf00      	nop
 800c268:	24000044 	.word	0x24000044

0800c26c <sbrk_aligned>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	4e0f      	ldr	r6, [pc, #60]	@ (800c2ac <sbrk_aligned+0x40>)
 800c270:	460c      	mov	r4, r1
 800c272:	6831      	ldr	r1, [r6, #0]
 800c274:	4605      	mov	r5, r0
 800c276:	b911      	cbnz	r1, 800c27e <sbrk_aligned+0x12>
 800c278:	f000 fe44 	bl	800cf04 <_sbrk_r>
 800c27c:	6030      	str	r0, [r6, #0]
 800c27e:	4621      	mov	r1, r4
 800c280:	4628      	mov	r0, r5
 800c282:	f000 fe3f 	bl	800cf04 <_sbrk_r>
 800c286:	1c43      	adds	r3, r0, #1
 800c288:	d103      	bne.n	800c292 <sbrk_aligned+0x26>
 800c28a:	f04f 34ff 	mov.w	r4, #4294967295
 800c28e:	4620      	mov	r0, r4
 800c290:	bd70      	pop	{r4, r5, r6, pc}
 800c292:	1cc4      	adds	r4, r0, #3
 800c294:	f024 0403 	bic.w	r4, r4, #3
 800c298:	42a0      	cmp	r0, r4
 800c29a:	d0f8      	beq.n	800c28e <sbrk_aligned+0x22>
 800c29c:	1a21      	subs	r1, r4, r0
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f000 fe30 	bl	800cf04 <_sbrk_r>
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d1f2      	bne.n	800c28e <sbrk_aligned+0x22>
 800c2a8:	e7ef      	b.n	800c28a <sbrk_aligned+0x1e>
 800c2aa:	bf00      	nop
 800c2ac:	240052b8 	.word	0x240052b8

0800c2b0 <_malloc_r>:
 800c2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	1ccd      	adds	r5, r1, #3
 800c2b6:	f025 0503 	bic.w	r5, r5, #3
 800c2ba:	3508      	adds	r5, #8
 800c2bc:	2d0c      	cmp	r5, #12
 800c2be:	bf38      	it	cc
 800c2c0:	250c      	movcc	r5, #12
 800c2c2:	2d00      	cmp	r5, #0
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	db01      	blt.n	800c2cc <_malloc_r+0x1c>
 800c2c8:	42a9      	cmp	r1, r5
 800c2ca:	d904      	bls.n	800c2d6 <_malloc_r+0x26>
 800c2cc:	230c      	movs	r3, #12
 800c2ce:	6033      	str	r3, [r6, #0]
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3ac <_malloc_r+0xfc>
 800c2da:	f000 f869 	bl	800c3b0 <__malloc_lock>
 800c2de:	f8d8 3000 	ldr.w	r3, [r8]
 800c2e2:	461c      	mov	r4, r3
 800c2e4:	bb44      	cbnz	r4, 800c338 <_malloc_r+0x88>
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	f7ff ffbf 	bl	800c26c <sbrk_aligned>
 800c2ee:	1c43      	adds	r3, r0, #1
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	d158      	bne.n	800c3a6 <_malloc_r+0xf6>
 800c2f4:	f8d8 4000 	ldr.w	r4, [r8]
 800c2f8:	4627      	mov	r7, r4
 800c2fa:	2f00      	cmp	r7, #0
 800c2fc:	d143      	bne.n	800c386 <_malloc_r+0xd6>
 800c2fe:	2c00      	cmp	r4, #0
 800c300:	d04b      	beq.n	800c39a <_malloc_r+0xea>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	4639      	mov	r1, r7
 800c306:	4630      	mov	r0, r6
 800c308:	eb04 0903 	add.w	r9, r4, r3
 800c30c:	f000 fdfa 	bl	800cf04 <_sbrk_r>
 800c310:	4581      	cmp	r9, r0
 800c312:	d142      	bne.n	800c39a <_malloc_r+0xea>
 800c314:	6821      	ldr	r1, [r4, #0]
 800c316:	1a6d      	subs	r5, r5, r1
 800c318:	4629      	mov	r1, r5
 800c31a:	4630      	mov	r0, r6
 800c31c:	f7ff ffa6 	bl	800c26c <sbrk_aligned>
 800c320:	3001      	adds	r0, #1
 800c322:	d03a      	beq.n	800c39a <_malloc_r+0xea>
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	442b      	add	r3, r5
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	f8d8 3000 	ldr.w	r3, [r8]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	bb62      	cbnz	r2, 800c38c <_malloc_r+0xdc>
 800c332:	f8c8 7000 	str.w	r7, [r8]
 800c336:	e00f      	b.n	800c358 <_malloc_r+0xa8>
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	1b52      	subs	r2, r2, r5
 800c33c:	d420      	bmi.n	800c380 <_malloc_r+0xd0>
 800c33e:	2a0b      	cmp	r2, #11
 800c340:	d917      	bls.n	800c372 <_malloc_r+0xc2>
 800c342:	1961      	adds	r1, r4, r5
 800c344:	42a3      	cmp	r3, r4
 800c346:	6025      	str	r5, [r4, #0]
 800c348:	bf18      	it	ne
 800c34a:	6059      	strne	r1, [r3, #4]
 800c34c:	6863      	ldr	r3, [r4, #4]
 800c34e:	bf08      	it	eq
 800c350:	f8c8 1000 	streq.w	r1, [r8]
 800c354:	5162      	str	r2, [r4, r5]
 800c356:	604b      	str	r3, [r1, #4]
 800c358:	4630      	mov	r0, r6
 800c35a:	f000 f82f 	bl	800c3bc <__malloc_unlock>
 800c35e:	f104 000b 	add.w	r0, r4, #11
 800c362:	1d23      	adds	r3, r4, #4
 800c364:	f020 0007 	bic.w	r0, r0, #7
 800c368:	1ac2      	subs	r2, r0, r3
 800c36a:	bf1c      	itt	ne
 800c36c:	1a1b      	subne	r3, r3, r0
 800c36e:	50a3      	strne	r3, [r4, r2]
 800c370:	e7af      	b.n	800c2d2 <_malloc_r+0x22>
 800c372:	6862      	ldr	r2, [r4, #4]
 800c374:	42a3      	cmp	r3, r4
 800c376:	bf0c      	ite	eq
 800c378:	f8c8 2000 	streq.w	r2, [r8]
 800c37c:	605a      	strne	r2, [r3, #4]
 800c37e:	e7eb      	b.n	800c358 <_malloc_r+0xa8>
 800c380:	4623      	mov	r3, r4
 800c382:	6864      	ldr	r4, [r4, #4]
 800c384:	e7ae      	b.n	800c2e4 <_malloc_r+0x34>
 800c386:	463c      	mov	r4, r7
 800c388:	687f      	ldr	r7, [r7, #4]
 800c38a:	e7b6      	b.n	800c2fa <_malloc_r+0x4a>
 800c38c:	461a      	mov	r2, r3
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	42a3      	cmp	r3, r4
 800c392:	d1fb      	bne.n	800c38c <_malloc_r+0xdc>
 800c394:	2300      	movs	r3, #0
 800c396:	6053      	str	r3, [r2, #4]
 800c398:	e7de      	b.n	800c358 <_malloc_r+0xa8>
 800c39a:	230c      	movs	r3, #12
 800c39c:	6033      	str	r3, [r6, #0]
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f000 f80c 	bl	800c3bc <__malloc_unlock>
 800c3a4:	e794      	b.n	800c2d0 <_malloc_r+0x20>
 800c3a6:	6005      	str	r5, [r0, #0]
 800c3a8:	e7d6      	b.n	800c358 <_malloc_r+0xa8>
 800c3aa:	bf00      	nop
 800c3ac:	240052bc 	.word	0x240052bc

0800c3b0 <__malloc_lock>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	@ (800c3b8 <__malloc_lock+0x8>)
 800c3b2:	f000 bdf4 	b.w	800cf9e <__retarget_lock_acquire_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	24005400 	.word	0x24005400

0800c3bc <__malloc_unlock>:
 800c3bc:	4801      	ldr	r0, [pc, #4]	@ (800c3c4 <__malloc_unlock+0x8>)
 800c3be:	f000 bdef 	b.w	800cfa0 <__retarget_lock_release_recursive>
 800c3c2:	bf00      	nop
 800c3c4:	24005400 	.word	0x24005400

0800c3c8 <__cvt>:
 800c3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ca:	ed2d 8b02 	vpush	{d8}
 800c3ce:	eeb0 8b40 	vmov.f64	d8, d0
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	4617      	mov	r7, r2
 800c3d6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c3d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3da:	ee18 2a90 	vmov	r2, s17
 800c3de:	f025 0520 	bic.w	r5, r5, #32
 800c3e2:	2a00      	cmp	r2, #0
 800c3e4:	bfb6      	itet	lt
 800c3e6:	222d      	movlt	r2, #45	@ 0x2d
 800c3e8:	2200      	movge	r2, #0
 800c3ea:	eeb1 8b40 	vneglt.f64	d8, d0
 800c3ee:	2d46      	cmp	r5, #70	@ 0x46
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	701a      	strb	r2, [r3, #0]
 800c3f4:	d004      	beq.n	800c400 <__cvt+0x38>
 800c3f6:	2d45      	cmp	r5, #69	@ 0x45
 800c3f8:	d100      	bne.n	800c3fc <__cvt+0x34>
 800c3fa:	3401      	adds	r4, #1
 800c3fc:	2102      	movs	r1, #2
 800c3fe:	e000      	b.n	800c402 <__cvt+0x3a>
 800c400:	2103      	movs	r1, #3
 800c402:	ab03      	add	r3, sp, #12
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	ab02      	add	r3, sp, #8
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	4622      	mov	r2, r4
 800c40c:	4633      	mov	r3, r6
 800c40e:	eeb0 0b48 	vmov.f64	d0, d8
 800c412:	f000 fe5d 	bl	800d0d0 <_dtoa_r>
 800c416:	2d47      	cmp	r5, #71	@ 0x47
 800c418:	d114      	bne.n	800c444 <__cvt+0x7c>
 800c41a:	07fb      	lsls	r3, r7, #31
 800c41c:	d50a      	bpl.n	800c434 <__cvt+0x6c>
 800c41e:	1902      	adds	r2, r0, r4
 800c420:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c428:	bf08      	it	eq
 800c42a:	9203      	streq	r2, [sp, #12]
 800c42c:	2130      	movs	r1, #48	@ 0x30
 800c42e:	9b03      	ldr	r3, [sp, #12]
 800c430:	4293      	cmp	r3, r2
 800c432:	d319      	bcc.n	800c468 <__cvt+0xa0>
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c438:	1a1b      	subs	r3, r3, r0
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	b005      	add	sp, #20
 800c43e:	ecbd 8b02 	vpop	{d8}
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c444:	2d46      	cmp	r5, #70	@ 0x46
 800c446:	eb00 0204 	add.w	r2, r0, r4
 800c44a:	d1e9      	bne.n	800c420 <__cvt+0x58>
 800c44c:	7803      	ldrb	r3, [r0, #0]
 800c44e:	2b30      	cmp	r3, #48	@ 0x30
 800c450:	d107      	bne.n	800c462 <__cvt+0x9a>
 800c452:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	bf1c      	itt	ne
 800c45c:	f1c4 0401 	rsbne	r4, r4, #1
 800c460:	6034      	strne	r4, [r6, #0]
 800c462:	6833      	ldr	r3, [r6, #0]
 800c464:	441a      	add	r2, r3
 800c466:	e7db      	b.n	800c420 <__cvt+0x58>
 800c468:	1c5c      	adds	r4, r3, #1
 800c46a:	9403      	str	r4, [sp, #12]
 800c46c:	7019      	strb	r1, [r3, #0]
 800c46e:	e7de      	b.n	800c42e <__cvt+0x66>

0800c470 <__exponent>:
 800c470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c472:	2900      	cmp	r1, #0
 800c474:	bfba      	itte	lt
 800c476:	4249      	neglt	r1, r1
 800c478:	232d      	movlt	r3, #45	@ 0x2d
 800c47a:	232b      	movge	r3, #43	@ 0x2b
 800c47c:	2909      	cmp	r1, #9
 800c47e:	7002      	strb	r2, [r0, #0]
 800c480:	7043      	strb	r3, [r0, #1]
 800c482:	dd29      	ble.n	800c4d8 <__exponent+0x68>
 800c484:	f10d 0307 	add.w	r3, sp, #7
 800c488:	461d      	mov	r5, r3
 800c48a:	270a      	movs	r7, #10
 800c48c:	461a      	mov	r2, r3
 800c48e:	fbb1 f6f7 	udiv	r6, r1, r7
 800c492:	fb07 1416 	mls	r4, r7, r6, r1
 800c496:	3430      	adds	r4, #48	@ 0x30
 800c498:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c49c:	460c      	mov	r4, r1
 800c49e:	2c63      	cmp	r4, #99	@ 0x63
 800c4a0:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4a4:	4631      	mov	r1, r6
 800c4a6:	dcf1      	bgt.n	800c48c <__exponent+0x1c>
 800c4a8:	3130      	adds	r1, #48	@ 0x30
 800c4aa:	1e94      	subs	r4, r2, #2
 800c4ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c4b0:	1c41      	adds	r1, r0, #1
 800c4b2:	4623      	mov	r3, r4
 800c4b4:	42ab      	cmp	r3, r5
 800c4b6:	d30a      	bcc.n	800c4ce <__exponent+0x5e>
 800c4b8:	f10d 0309 	add.w	r3, sp, #9
 800c4bc:	1a9b      	subs	r3, r3, r2
 800c4be:	42ac      	cmp	r4, r5
 800c4c0:	bf88      	it	hi
 800c4c2:	2300      	movhi	r3, #0
 800c4c4:	3302      	adds	r3, #2
 800c4c6:	4403      	add	r3, r0
 800c4c8:	1a18      	subs	r0, r3, r0
 800c4ca:	b003      	add	sp, #12
 800c4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c4d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c4d6:	e7ed      	b.n	800c4b4 <__exponent+0x44>
 800c4d8:	2330      	movs	r3, #48	@ 0x30
 800c4da:	3130      	adds	r1, #48	@ 0x30
 800c4dc:	7083      	strb	r3, [r0, #2]
 800c4de:	70c1      	strb	r1, [r0, #3]
 800c4e0:	1d03      	adds	r3, r0, #4
 800c4e2:	e7f1      	b.n	800c4c8 <__exponent+0x58>
 800c4e4:	0000      	movs	r0, r0
	...

0800c4e8 <_printf_float>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	b08d      	sub	sp, #52	@ 0x34
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c4f4:	4616      	mov	r6, r2
 800c4f6:	461f      	mov	r7, r3
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	f000 fccb 	bl	800ce94 <_localeconv_r>
 800c4fe:	f8d0 b000 	ldr.w	fp, [r0]
 800c502:	4658      	mov	r0, fp
 800c504:	f7f3 ff3c 	bl	8000380 <strlen>
 800c508:	2300      	movs	r3, #0
 800c50a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c50c:	f8d8 3000 	ldr.w	r3, [r8]
 800c510:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c514:	6822      	ldr	r2, [r4, #0]
 800c516:	9005      	str	r0, [sp, #20]
 800c518:	3307      	adds	r3, #7
 800c51a:	f023 0307 	bic.w	r3, r3, #7
 800c51e:	f103 0108 	add.w	r1, r3, #8
 800c522:	f8c8 1000 	str.w	r1, [r8]
 800c526:	ed93 0b00 	vldr	d0, [r3]
 800c52a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c788 <_printf_float+0x2a0>
 800c52e:	eeb0 7bc0 	vabs.f64	d7, d0
 800c532:	eeb4 7b46 	vcmp.f64	d7, d6
 800c536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c53e:	dd24      	ble.n	800c58a <_printf_float+0xa2>
 800c540:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c548:	d502      	bpl.n	800c550 <_printf_float+0x68>
 800c54a:	232d      	movs	r3, #45	@ 0x2d
 800c54c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c550:	498f      	ldr	r1, [pc, #572]	@ (800c790 <_printf_float+0x2a8>)
 800c552:	4b90      	ldr	r3, [pc, #576]	@ (800c794 <_printf_float+0x2ac>)
 800c554:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c558:	bf94      	ite	ls
 800c55a:	4688      	movls	r8, r1
 800c55c:	4698      	movhi	r8, r3
 800c55e:	f022 0204 	bic.w	r2, r2, #4
 800c562:	2303      	movs	r3, #3
 800c564:	6123      	str	r3, [r4, #16]
 800c566:	6022      	str	r2, [r4, #0]
 800c568:	f04f 0a00 	mov.w	sl, #0
 800c56c:	9700      	str	r7, [sp, #0]
 800c56e:	4633      	mov	r3, r6
 800c570:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c572:	4621      	mov	r1, r4
 800c574:	4628      	mov	r0, r5
 800c576:	f000 f9d1 	bl	800c91c <_printf_common>
 800c57a:	3001      	adds	r0, #1
 800c57c:	f040 8089 	bne.w	800c692 <_printf_float+0x1aa>
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	b00d      	add	sp, #52	@ 0x34
 800c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c592:	d709      	bvc.n	800c5a8 <_printf_float+0xc0>
 800c594:	ee10 3a90 	vmov	r3, s1
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bfbc      	itt	lt
 800c59c:	232d      	movlt	r3, #45	@ 0x2d
 800c59e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c5a2:	497d      	ldr	r1, [pc, #500]	@ (800c798 <_printf_float+0x2b0>)
 800c5a4:	4b7d      	ldr	r3, [pc, #500]	@ (800c79c <_printf_float+0x2b4>)
 800c5a6:	e7d5      	b.n	800c554 <_printf_float+0x6c>
 800c5a8:	6863      	ldr	r3, [r4, #4]
 800c5aa:	1c59      	adds	r1, r3, #1
 800c5ac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c5b0:	d139      	bne.n	800c626 <_printf_float+0x13e>
 800c5b2:	2306      	movs	r3, #6
 800c5b4:	6063      	str	r3, [r4, #4]
 800c5b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	6022      	str	r2, [r4, #0]
 800c5be:	9303      	str	r3, [sp, #12]
 800c5c0:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c5c6:	ab09      	add	r3, sp, #36	@ 0x24
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	6861      	ldr	r1, [r4, #4]
 800c5cc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f7ff fef9 	bl	800c3c8 <__cvt>
 800c5d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c5da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5dc:	4680      	mov	r8, r0
 800c5de:	d129      	bne.n	800c634 <_printf_float+0x14c>
 800c5e0:	1cc8      	adds	r0, r1, #3
 800c5e2:	db02      	blt.n	800c5ea <_printf_float+0x102>
 800c5e4:	6863      	ldr	r3, [r4, #4]
 800c5e6:	4299      	cmp	r1, r3
 800c5e8:	dd41      	ble.n	800c66e <_printf_float+0x186>
 800c5ea:	f1a9 0902 	sub.w	r9, r9, #2
 800c5ee:	fa5f f989 	uxtb.w	r9, r9
 800c5f2:	3901      	subs	r1, #1
 800c5f4:	464a      	mov	r2, r9
 800c5f6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c5fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800c5fc:	f7ff ff38 	bl	800c470 <__exponent>
 800c600:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c602:	1813      	adds	r3, r2, r0
 800c604:	2a01      	cmp	r2, #1
 800c606:	4682      	mov	sl, r0
 800c608:	6123      	str	r3, [r4, #16]
 800c60a:	dc02      	bgt.n	800c612 <_printf_float+0x12a>
 800c60c:	6822      	ldr	r2, [r4, #0]
 800c60e:	07d2      	lsls	r2, r2, #31
 800c610:	d501      	bpl.n	800c616 <_printf_float+0x12e>
 800c612:	3301      	adds	r3, #1
 800c614:	6123      	str	r3, [r4, #16]
 800c616:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0a6      	beq.n	800c56c <_printf_float+0x84>
 800c61e:	232d      	movs	r3, #45	@ 0x2d
 800c620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c624:	e7a2      	b.n	800c56c <_printf_float+0x84>
 800c626:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c62a:	d1c4      	bne.n	800c5b6 <_printf_float+0xce>
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1c2      	bne.n	800c5b6 <_printf_float+0xce>
 800c630:	2301      	movs	r3, #1
 800c632:	e7bf      	b.n	800c5b4 <_printf_float+0xcc>
 800c634:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c638:	d9db      	bls.n	800c5f2 <_printf_float+0x10a>
 800c63a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c63e:	d118      	bne.n	800c672 <_printf_float+0x18a>
 800c640:	2900      	cmp	r1, #0
 800c642:	6863      	ldr	r3, [r4, #4]
 800c644:	dd0b      	ble.n	800c65e <_printf_float+0x176>
 800c646:	6121      	str	r1, [r4, #16]
 800c648:	b913      	cbnz	r3, 800c650 <_printf_float+0x168>
 800c64a:	6822      	ldr	r2, [r4, #0]
 800c64c:	07d0      	lsls	r0, r2, #31
 800c64e:	d502      	bpl.n	800c656 <_printf_float+0x16e>
 800c650:	3301      	adds	r3, #1
 800c652:	440b      	add	r3, r1
 800c654:	6123      	str	r3, [r4, #16]
 800c656:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c658:	f04f 0a00 	mov.w	sl, #0
 800c65c:	e7db      	b.n	800c616 <_printf_float+0x12e>
 800c65e:	b913      	cbnz	r3, 800c666 <_printf_float+0x17e>
 800c660:	6822      	ldr	r2, [r4, #0]
 800c662:	07d2      	lsls	r2, r2, #31
 800c664:	d501      	bpl.n	800c66a <_printf_float+0x182>
 800c666:	3302      	adds	r3, #2
 800c668:	e7f4      	b.n	800c654 <_printf_float+0x16c>
 800c66a:	2301      	movs	r3, #1
 800c66c:	e7f2      	b.n	800c654 <_printf_float+0x16c>
 800c66e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c674:	4299      	cmp	r1, r3
 800c676:	db05      	blt.n	800c684 <_printf_float+0x19c>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	6121      	str	r1, [r4, #16]
 800c67c:	07d8      	lsls	r0, r3, #31
 800c67e:	d5ea      	bpl.n	800c656 <_printf_float+0x16e>
 800c680:	1c4b      	adds	r3, r1, #1
 800c682:	e7e7      	b.n	800c654 <_printf_float+0x16c>
 800c684:	2900      	cmp	r1, #0
 800c686:	bfd4      	ite	le
 800c688:	f1c1 0202 	rsble	r2, r1, #2
 800c68c:	2201      	movgt	r2, #1
 800c68e:	4413      	add	r3, r2
 800c690:	e7e0      	b.n	800c654 <_printf_float+0x16c>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	055a      	lsls	r2, r3, #21
 800c696:	d407      	bmi.n	800c6a8 <_printf_float+0x1c0>
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	4642      	mov	r2, r8
 800c69c:	4631      	mov	r1, r6
 800c69e:	4628      	mov	r0, r5
 800c6a0:	47b8      	blx	r7
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d12a      	bne.n	800c6fc <_printf_float+0x214>
 800c6a6:	e76b      	b.n	800c580 <_printf_float+0x98>
 800c6a8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c6ac:	f240 80e0 	bls.w	800c870 <_printf_float+0x388>
 800c6b0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c6b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6bc:	d133      	bne.n	800c726 <_printf_float+0x23e>
 800c6be:	4a38      	ldr	r2, [pc, #224]	@ (800c7a0 <_printf_float+0x2b8>)
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	47b8      	blx	r7
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	f43f af59 	beq.w	800c580 <_printf_float+0x98>
 800c6ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c6d2:	4543      	cmp	r3, r8
 800c6d4:	db02      	blt.n	800c6dc <_printf_float+0x1f4>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	07d8      	lsls	r0, r3, #31
 800c6da:	d50f      	bpl.n	800c6fc <_printf_float+0x214>
 800c6dc:	9b05      	ldr	r3, [sp, #20]
 800c6de:	465a      	mov	r2, fp
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	47b8      	blx	r7
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	f43f af4a 	beq.w	800c580 <_printf_float+0x98>
 800c6ec:	f04f 0900 	mov.w	r9, #0
 800c6f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6f4:	f104 0a1a 	add.w	sl, r4, #26
 800c6f8:	45c8      	cmp	r8, r9
 800c6fa:	dc09      	bgt.n	800c710 <_printf_float+0x228>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	079b      	lsls	r3, r3, #30
 800c700:	f100 8107 	bmi.w	800c912 <_printf_float+0x42a>
 800c704:	68e0      	ldr	r0, [r4, #12]
 800c706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c708:	4298      	cmp	r0, r3
 800c70a:	bfb8      	it	lt
 800c70c:	4618      	movlt	r0, r3
 800c70e:	e739      	b.n	800c584 <_printf_float+0x9c>
 800c710:	2301      	movs	r3, #1
 800c712:	4652      	mov	r2, sl
 800c714:	4631      	mov	r1, r6
 800c716:	4628      	mov	r0, r5
 800c718:	47b8      	blx	r7
 800c71a:	3001      	adds	r0, #1
 800c71c:	f43f af30 	beq.w	800c580 <_printf_float+0x98>
 800c720:	f109 0901 	add.w	r9, r9, #1
 800c724:	e7e8      	b.n	800c6f8 <_printf_float+0x210>
 800c726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c728:	2b00      	cmp	r3, #0
 800c72a:	dc3b      	bgt.n	800c7a4 <_printf_float+0x2bc>
 800c72c:	4a1c      	ldr	r2, [pc, #112]	@ (800c7a0 <_printf_float+0x2b8>)
 800c72e:	2301      	movs	r3, #1
 800c730:	4631      	mov	r1, r6
 800c732:	4628      	mov	r0, r5
 800c734:	47b8      	blx	r7
 800c736:	3001      	adds	r0, #1
 800c738:	f43f af22 	beq.w	800c580 <_printf_float+0x98>
 800c73c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c740:	ea59 0303 	orrs.w	r3, r9, r3
 800c744:	d102      	bne.n	800c74c <_printf_float+0x264>
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	07d9      	lsls	r1, r3, #31
 800c74a:	d5d7      	bpl.n	800c6fc <_printf_float+0x214>
 800c74c:	9b05      	ldr	r3, [sp, #20]
 800c74e:	465a      	mov	r2, fp
 800c750:	4631      	mov	r1, r6
 800c752:	4628      	mov	r0, r5
 800c754:	47b8      	blx	r7
 800c756:	3001      	adds	r0, #1
 800c758:	f43f af12 	beq.w	800c580 <_printf_float+0x98>
 800c75c:	f04f 0a00 	mov.w	sl, #0
 800c760:	f104 0b1a 	add.w	fp, r4, #26
 800c764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c766:	425b      	negs	r3, r3
 800c768:	4553      	cmp	r3, sl
 800c76a:	dc01      	bgt.n	800c770 <_printf_float+0x288>
 800c76c:	464b      	mov	r3, r9
 800c76e:	e794      	b.n	800c69a <_printf_float+0x1b2>
 800c770:	2301      	movs	r3, #1
 800c772:	465a      	mov	r2, fp
 800c774:	4631      	mov	r1, r6
 800c776:	4628      	mov	r0, r5
 800c778:	47b8      	blx	r7
 800c77a:	3001      	adds	r0, #1
 800c77c:	f43f af00 	beq.w	800c580 <_printf_float+0x98>
 800c780:	f10a 0a01 	add.w	sl, sl, #1
 800c784:	e7ee      	b.n	800c764 <_printf_float+0x27c>
 800c786:	bf00      	nop
 800c788:	ffffffff 	.word	0xffffffff
 800c78c:	7fefffff 	.word	0x7fefffff
 800c790:	08011404 	.word	0x08011404
 800c794:	08011408 	.word	0x08011408
 800c798:	0801140c 	.word	0x0801140c
 800c79c:	08011410 	.word	0x08011410
 800c7a0:	08011414 	.word	0x08011414
 800c7a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c7aa:	4553      	cmp	r3, sl
 800c7ac:	bfa8      	it	ge
 800c7ae:	4653      	movge	r3, sl
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	4699      	mov	r9, r3
 800c7b4:	dc37      	bgt.n	800c826 <_printf_float+0x33e>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	9307      	str	r3, [sp, #28]
 800c7ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7be:	f104 021a 	add.w	r2, r4, #26
 800c7c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7c4:	9907      	ldr	r1, [sp, #28]
 800c7c6:	9306      	str	r3, [sp, #24]
 800c7c8:	eba3 0309 	sub.w	r3, r3, r9
 800c7cc:	428b      	cmp	r3, r1
 800c7ce:	dc31      	bgt.n	800c834 <_printf_float+0x34c>
 800c7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d2:	459a      	cmp	sl, r3
 800c7d4:	dc3b      	bgt.n	800c84e <_printf_float+0x366>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	07da      	lsls	r2, r3, #31
 800c7da:	d438      	bmi.n	800c84e <_printf_float+0x366>
 800c7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7de:	ebaa 0903 	sub.w	r9, sl, r3
 800c7e2:	9b06      	ldr	r3, [sp, #24]
 800c7e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c7e8:	4599      	cmp	r9, r3
 800c7ea:	bfa8      	it	ge
 800c7ec:	4699      	movge	r9, r3
 800c7ee:	f1b9 0f00 	cmp.w	r9, #0
 800c7f2:	dc34      	bgt.n	800c85e <_printf_float+0x376>
 800c7f4:	f04f 0800 	mov.w	r8, #0
 800c7f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7fc:	f104 0b1a 	add.w	fp, r4, #26
 800c800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c802:	ebaa 0303 	sub.w	r3, sl, r3
 800c806:	eba3 0309 	sub.w	r3, r3, r9
 800c80a:	4543      	cmp	r3, r8
 800c80c:	f77f af76 	ble.w	800c6fc <_printf_float+0x214>
 800c810:	2301      	movs	r3, #1
 800c812:	465a      	mov	r2, fp
 800c814:	4631      	mov	r1, r6
 800c816:	4628      	mov	r0, r5
 800c818:	47b8      	blx	r7
 800c81a:	3001      	adds	r0, #1
 800c81c:	f43f aeb0 	beq.w	800c580 <_printf_float+0x98>
 800c820:	f108 0801 	add.w	r8, r8, #1
 800c824:	e7ec      	b.n	800c800 <_printf_float+0x318>
 800c826:	4642      	mov	r2, r8
 800c828:	4631      	mov	r1, r6
 800c82a:	4628      	mov	r0, r5
 800c82c:	47b8      	blx	r7
 800c82e:	3001      	adds	r0, #1
 800c830:	d1c1      	bne.n	800c7b6 <_printf_float+0x2ce>
 800c832:	e6a5      	b.n	800c580 <_printf_float+0x98>
 800c834:	2301      	movs	r3, #1
 800c836:	4631      	mov	r1, r6
 800c838:	4628      	mov	r0, r5
 800c83a:	9206      	str	r2, [sp, #24]
 800c83c:	47b8      	blx	r7
 800c83e:	3001      	adds	r0, #1
 800c840:	f43f ae9e 	beq.w	800c580 <_printf_float+0x98>
 800c844:	9b07      	ldr	r3, [sp, #28]
 800c846:	9a06      	ldr	r2, [sp, #24]
 800c848:	3301      	adds	r3, #1
 800c84a:	9307      	str	r3, [sp, #28]
 800c84c:	e7b9      	b.n	800c7c2 <_printf_float+0x2da>
 800c84e:	9b05      	ldr	r3, [sp, #20]
 800c850:	465a      	mov	r2, fp
 800c852:	4631      	mov	r1, r6
 800c854:	4628      	mov	r0, r5
 800c856:	47b8      	blx	r7
 800c858:	3001      	adds	r0, #1
 800c85a:	d1bf      	bne.n	800c7dc <_printf_float+0x2f4>
 800c85c:	e690      	b.n	800c580 <_printf_float+0x98>
 800c85e:	9a06      	ldr	r2, [sp, #24]
 800c860:	464b      	mov	r3, r9
 800c862:	4442      	add	r2, r8
 800c864:	4631      	mov	r1, r6
 800c866:	4628      	mov	r0, r5
 800c868:	47b8      	blx	r7
 800c86a:	3001      	adds	r0, #1
 800c86c:	d1c2      	bne.n	800c7f4 <_printf_float+0x30c>
 800c86e:	e687      	b.n	800c580 <_printf_float+0x98>
 800c870:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c874:	f1b9 0f01 	cmp.w	r9, #1
 800c878:	dc01      	bgt.n	800c87e <_printf_float+0x396>
 800c87a:	07db      	lsls	r3, r3, #31
 800c87c:	d536      	bpl.n	800c8ec <_printf_float+0x404>
 800c87e:	2301      	movs	r3, #1
 800c880:	4642      	mov	r2, r8
 800c882:	4631      	mov	r1, r6
 800c884:	4628      	mov	r0, r5
 800c886:	47b8      	blx	r7
 800c888:	3001      	adds	r0, #1
 800c88a:	f43f ae79 	beq.w	800c580 <_printf_float+0x98>
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	465a      	mov	r2, fp
 800c892:	4631      	mov	r1, r6
 800c894:	4628      	mov	r0, r5
 800c896:	47b8      	blx	r7
 800c898:	3001      	adds	r0, #1
 800c89a:	f43f ae71 	beq.w	800c580 <_printf_float+0x98>
 800c89e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c8a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8aa:	f109 39ff 	add.w	r9, r9, #4294967295
 800c8ae:	d018      	beq.n	800c8e2 <_printf_float+0x3fa>
 800c8b0:	464b      	mov	r3, r9
 800c8b2:	f108 0201 	add.w	r2, r8, #1
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	47b8      	blx	r7
 800c8bc:	3001      	adds	r0, #1
 800c8be:	d10c      	bne.n	800c8da <_printf_float+0x3f2>
 800c8c0:	e65e      	b.n	800c580 <_printf_float+0x98>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	465a      	mov	r2, fp
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	47b8      	blx	r7
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	f43f ae57 	beq.w	800c580 <_printf_float+0x98>
 800c8d2:	f108 0801 	add.w	r8, r8, #1
 800c8d6:	45c8      	cmp	r8, r9
 800c8d8:	dbf3      	blt.n	800c8c2 <_printf_float+0x3da>
 800c8da:	4653      	mov	r3, sl
 800c8dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c8e0:	e6dc      	b.n	800c69c <_printf_float+0x1b4>
 800c8e2:	f04f 0800 	mov.w	r8, #0
 800c8e6:	f104 0b1a 	add.w	fp, r4, #26
 800c8ea:	e7f4      	b.n	800c8d6 <_printf_float+0x3ee>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	4642      	mov	r2, r8
 800c8f0:	e7e1      	b.n	800c8b6 <_printf_float+0x3ce>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	464a      	mov	r2, r9
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b8      	blx	r7
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	f43f ae3f 	beq.w	800c580 <_printf_float+0x98>
 800c902:	f108 0801 	add.w	r8, r8, #1
 800c906:	68e3      	ldr	r3, [r4, #12]
 800c908:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c90a:	1a5b      	subs	r3, r3, r1
 800c90c:	4543      	cmp	r3, r8
 800c90e:	dcf0      	bgt.n	800c8f2 <_printf_float+0x40a>
 800c910:	e6f8      	b.n	800c704 <_printf_float+0x21c>
 800c912:	f04f 0800 	mov.w	r8, #0
 800c916:	f104 0919 	add.w	r9, r4, #25
 800c91a:	e7f4      	b.n	800c906 <_printf_float+0x41e>

0800c91c <_printf_common>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	4616      	mov	r6, r2
 800c922:	4698      	mov	r8, r3
 800c924:	688a      	ldr	r2, [r1, #8]
 800c926:	690b      	ldr	r3, [r1, #16]
 800c928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c92c:	4293      	cmp	r3, r2
 800c92e:	bfb8      	it	lt
 800c930:	4613      	movlt	r3, r2
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c938:	4607      	mov	r7, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	b10a      	cbz	r2, 800c942 <_printf_common+0x26>
 800c93e:	3301      	adds	r3, #1
 800c940:	6033      	str	r3, [r6, #0]
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	0699      	lsls	r1, r3, #26
 800c946:	bf42      	ittt	mi
 800c948:	6833      	ldrmi	r3, [r6, #0]
 800c94a:	3302      	addmi	r3, #2
 800c94c:	6033      	strmi	r3, [r6, #0]
 800c94e:	6825      	ldr	r5, [r4, #0]
 800c950:	f015 0506 	ands.w	r5, r5, #6
 800c954:	d106      	bne.n	800c964 <_printf_common+0x48>
 800c956:	f104 0a19 	add.w	sl, r4, #25
 800c95a:	68e3      	ldr	r3, [r4, #12]
 800c95c:	6832      	ldr	r2, [r6, #0]
 800c95e:	1a9b      	subs	r3, r3, r2
 800c960:	42ab      	cmp	r3, r5
 800c962:	dc26      	bgt.n	800c9b2 <_printf_common+0x96>
 800c964:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c968:	6822      	ldr	r2, [r4, #0]
 800c96a:	3b00      	subs	r3, #0
 800c96c:	bf18      	it	ne
 800c96e:	2301      	movne	r3, #1
 800c970:	0692      	lsls	r2, r2, #26
 800c972:	d42b      	bmi.n	800c9cc <_printf_common+0xb0>
 800c974:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c978:	4641      	mov	r1, r8
 800c97a:	4638      	mov	r0, r7
 800c97c:	47c8      	blx	r9
 800c97e:	3001      	adds	r0, #1
 800c980:	d01e      	beq.n	800c9c0 <_printf_common+0xa4>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	6922      	ldr	r2, [r4, #16]
 800c986:	f003 0306 	and.w	r3, r3, #6
 800c98a:	2b04      	cmp	r3, #4
 800c98c:	bf02      	ittt	eq
 800c98e:	68e5      	ldreq	r5, [r4, #12]
 800c990:	6833      	ldreq	r3, [r6, #0]
 800c992:	1aed      	subeq	r5, r5, r3
 800c994:	68a3      	ldr	r3, [r4, #8]
 800c996:	bf0c      	ite	eq
 800c998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c99c:	2500      	movne	r5, #0
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	bfc4      	itt	gt
 800c9a2:	1a9b      	subgt	r3, r3, r2
 800c9a4:	18ed      	addgt	r5, r5, r3
 800c9a6:	2600      	movs	r6, #0
 800c9a8:	341a      	adds	r4, #26
 800c9aa:	42b5      	cmp	r5, r6
 800c9ac:	d11a      	bne.n	800c9e4 <_printf_common+0xc8>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	e008      	b.n	800c9c4 <_printf_common+0xa8>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4652      	mov	r2, sl
 800c9b6:	4641      	mov	r1, r8
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	47c8      	blx	r9
 800c9bc:	3001      	adds	r0, #1
 800c9be:	d103      	bne.n	800c9c8 <_printf_common+0xac>
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	e7c6      	b.n	800c95a <_printf_common+0x3e>
 800c9cc:	18e1      	adds	r1, r4, r3
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	2030      	movs	r0, #48	@ 0x30
 800c9d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9d6:	4422      	add	r2, r4
 800c9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9e0:	3302      	adds	r3, #2
 800c9e2:	e7c7      	b.n	800c974 <_printf_common+0x58>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	4641      	mov	r1, r8
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	47c8      	blx	r9
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	d0e6      	beq.n	800c9c0 <_printf_common+0xa4>
 800c9f2:	3601      	adds	r6, #1
 800c9f4:	e7d9      	b.n	800c9aa <_printf_common+0x8e>
	...

0800c9f8 <_printf_i>:
 800c9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	7e0f      	ldrb	r7, [r1, #24]
 800c9fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca00:	2f78      	cmp	r7, #120	@ 0x78
 800ca02:	4691      	mov	r9, r2
 800ca04:	4680      	mov	r8, r0
 800ca06:	460c      	mov	r4, r1
 800ca08:	469a      	mov	sl, r3
 800ca0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca0e:	d807      	bhi.n	800ca20 <_printf_i+0x28>
 800ca10:	2f62      	cmp	r7, #98	@ 0x62
 800ca12:	d80a      	bhi.n	800ca2a <_printf_i+0x32>
 800ca14:	2f00      	cmp	r7, #0
 800ca16:	f000 80d2 	beq.w	800cbbe <_printf_i+0x1c6>
 800ca1a:	2f58      	cmp	r7, #88	@ 0x58
 800ca1c:	f000 80b9 	beq.w	800cb92 <_printf_i+0x19a>
 800ca20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca28:	e03a      	b.n	800caa0 <_printf_i+0xa8>
 800ca2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca2e:	2b15      	cmp	r3, #21
 800ca30:	d8f6      	bhi.n	800ca20 <_printf_i+0x28>
 800ca32:	a101      	add	r1, pc, #4	@ (adr r1, 800ca38 <_printf_i+0x40>)
 800ca34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca38:	0800ca91 	.word	0x0800ca91
 800ca3c:	0800caa5 	.word	0x0800caa5
 800ca40:	0800ca21 	.word	0x0800ca21
 800ca44:	0800ca21 	.word	0x0800ca21
 800ca48:	0800ca21 	.word	0x0800ca21
 800ca4c:	0800ca21 	.word	0x0800ca21
 800ca50:	0800caa5 	.word	0x0800caa5
 800ca54:	0800ca21 	.word	0x0800ca21
 800ca58:	0800ca21 	.word	0x0800ca21
 800ca5c:	0800ca21 	.word	0x0800ca21
 800ca60:	0800ca21 	.word	0x0800ca21
 800ca64:	0800cba5 	.word	0x0800cba5
 800ca68:	0800cacf 	.word	0x0800cacf
 800ca6c:	0800cb5f 	.word	0x0800cb5f
 800ca70:	0800ca21 	.word	0x0800ca21
 800ca74:	0800ca21 	.word	0x0800ca21
 800ca78:	0800cbc7 	.word	0x0800cbc7
 800ca7c:	0800ca21 	.word	0x0800ca21
 800ca80:	0800cacf 	.word	0x0800cacf
 800ca84:	0800ca21 	.word	0x0800ca21
 800ca88:	0800ca21 	.word	0x0800ca21
 800ca8c:	0800cb67 	.word	0x0800cb67
 800ca90:	6833      	ldr	r3, [r6, #0]
 800ca92:	1d1a      	adds	r2, r3, #4
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6032      	str	r2, [r6, #0]
 800ca98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800caa0:	2301      	movs	r3, #1
 800caa2:	e09d      	b.n	800cbe0 <_printf_i+0x1e8>
 800caa4:	6833      	ldr	r3, [r6, #0]
 800caa6:	6820      	ldr	r0, [r4, #0]
 800caa8:	1d19      	adds	r1, r3, #4
 800caaa:	6031      	str	r1, [r6, #0]
 800caac:	0606      	lsls	r6, r0, #24
 800caae:	d501      	bpl.n	800cab4 <_printf_i+0xbc>
 800cab0:	681d      	ldr	r5, [r3, #0]
 800cab2:	e003      	b.n	800cabc <_printf_i+0xc4>
 800cab4:	0645      	lsls	r5, r0, #25
 800cab6:	d5fb      	bpl.n	800cab0 <_printf_i+0xb8>
 800cab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	da03      	bge.n	800cac8 <_printf_i+0xd0>
 800cac0:	232d      	movs	r3, #45	@ 0x2d
 800cac2:	426d      	negs	r5, r5
 800cac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cac8:	4859      	ldr	r0, [pc, #356]	@ (800cc30 <_printf_i+0x238>)
 800caca:	230a      	movs	r3, #10
 800cacc:	e011      	b.n	800caf2 <_printf_i+0xfa>
 800cace:	6821      	ldr	r1, [r4, #0]
 800cad0:	6833      	ldr	r3, [r6, #0]
 800cad2:	0608      	lsls	r0, r1, #24
 800cad4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cad8:	d402      	bmi.n	800cae0 <_printf_i+0xe8>
 800cada:	0649      	lsls	r1, r1, #25
 800cadc:	bf48      	it	mi
 800cade:	b2ad      	uxthmi	r5, r5
 800cae0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cae2:	4853      	ldr	r0, [pc, #332]	@ (800cc30 <_printf_i+0x238>)
 800cae4:	6033      	str	r3, [r6, #0]
 800cae6:	bf14      	ite	ne
 800cae8:	230a      	movne	r3, #10
 800caea:	2308      	moveq	r3, #8
 800caec:	2100      	movs	r1, #0
 800caee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800caf2:	6866      	ldr	r6, [r4, #4]
 800caf4:	60a6      	str	r6, [r4, #8]
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	bfa2      	ittt	ge
 800cafa:	6821      	ldrge	r1, [r4, #0]
 800cafc:	f021 0104 	bicge.w	r1, r1, #4
 800cb00:	6021      	strge	r1, [r4, #0]
 800cb02:	b90d      	cbnz	r5, 800cb08 <_printf_i+0x110>
 800cb04:	2e00      	cmp	r6, #0
 800cb06:	d04b      	beq.n	800cba0 <_printf_i+0x1a8>
 800cb08:	4616      	mov	r6, r2
 800cb0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb0e:	fb03 5711 	mls	r7, r3, r1, r5
 800cb12:	5dc7      	ldrb	r7, [r0, r7]
 800cb14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb18:	462f      	mov	r7, r5
 800cb1a:	42bb      	cmp	r3, r7
 800cb1c:	460d      	mov	r5, r1
 800cb1e:	d9f4      	bls.n	800cb0a <_printf_i+0x112>
 800cb20:	2b08      	cmp	r3, #8
 800cb22:	d10b      	bne.n	800cb3c <_printf_i+0x144>
 800cb24:	6823      	ldr	r3, [r4, #0]
 800cb26:	07df      	lsls	r7, r3, #31
 800cb28:	d508      	bpl.n	800cb3c <_printf_i+0x144>
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	6861      	ldr	r1, [r4, #4]
 800cb2e:	4299      	cmp	r1, r3
 800cb30:	bfde      	ittt	le
 800cb32:	2330      	movle	r3, #48	@ 0x30
 800cb34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb3c:	1b92      	subs	r2, r2, r6
 800cb3e:	6122      	str	r2, [r4, #16]
 800cb40:	f8cd a000 	str.w	sl, [sp]
 800cb44:	464b      	mov	r3, r9
 800cb46:	aa03      	add	r2, sp, #12
 800cb48:	4621      	mov	r1, r4
 800cb4a:	4640      	mov	r0, r8
 800cb4c:	f7ff fee6 	bl	800c91c <_printf_common>
 800cb50:	3001      	adds	r0, #1
 800cb52:	d14a      	bne.n	800cbea <_printf_i+0x1f2>
 800cb54:	f04f 30ff 	mov.w	r0, #4294967295
 800cb58:	b004      	add	sp, #16
 800cb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	f043 0320 	orr.w	r3, r3, #32
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	4833      	ldr	r0, [pc, #204]	@ (800cc34 <_printf_i+0x23c>)
 800cb68:	2778      	movs	r7, #120	@ 0x78
 800cb6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	6831      	ldr	r1, [r6, #0]
 800cb72:	061f      	lsls	r7, r3, #24
 800cb74:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb78:	d402      	bmi.n	800cb80 <_printf_i+0x188>
 800cb7a:	065f      	lsls	r7, r3, #25
 800cb7c:	bf48      	it	mi
 800cb7e:	b2ad      	uxthmi	r5, r5
 800cb80:	6031      	str	r1, [r6, #0]
 800cb82:	07d9      	lsls	r1, r3, #31
 800cb84:	bf44      	itt	mi
 800cb86:	f043 0320 	orrmi.w	r3, r3, #32
 800cb8a:	6023      	strmi	r3, [r4, #0]
 800cb8c:	b11d      	cbz	r5, 800cb96 <_printf_i+0x19e>
 800cb8e:	2310      	movs	r3, #16
 800cb90:	e7ac      	b.n	800caec <_printf_i+0xf4>
 800cb92:	4827      	ldr	r0, [pc, #156]	@ (800cc30 <_printf_i+0x238>)
 800cb94:	e7e9      	b.n	800cb6a <_printf_i+0x172>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	f023 0320 	bic.w	r3, r3, #32
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	e7f6      	b.n	800cb8e <_printf_i+0x196>
 800cba0:	4616      	mov	r6, r2
 800cba2:	e7bd      	b.n	800cb20 <_printf_i+0x128>
 800cba4:	6833      	ldr	r3, [r6, #0]
 800cba6:	6825      	ldr	r5, [r4, #0]
 800cba8:	6961      	ldr	r1, [r4, #20]
 800cbaa:	1d18      	adds	r0, r3, #4
 800cbac:	6030      	str	r0, [r6, #0]
 800cbae:	062e      	lsls	r6, r5, #24
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	d501      	bpl.n	800cbb8 <_printf_i+0x1c0>
 800cbb4:	6019      	str	r1, [r3, #0]
 800cbb6:	e002      	b.n	800cbbe <_printf_i+0x1c6>
 800cbb8:	0668      	lsls	r0, r5, #25
 800cbba:	d5fb      	bpl.n	800cbb4 <_printf_i+0x1bc>
 800cbbc:	8019      	strh	r1, [r3, #0]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	6123      	str	r3, [r4, #16]
 800cbc2:	4616      	mov	r6, r2
 800cbc4:	e7bc      	b.n	800cb40 <_printf_i+0x148>
 800cbc6:	6833      	ldr	r3, [r6, #0]
 800cbc8:	1d1a      	adds	r2, r3, #4
 800cbca:	6032      	str	r2, [r6, #0]
 800cbcc:	681e      	ldr	r6, [r3, #0]
 800cbce:	6862      	ldr	r2, [r4, #4]
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f7f3 fb84 	bl	80002e0 <memchr>
 800cbd8:	b108      	cbz	r0, 800cbde <_printf_i+0x1e6>
 800cbda:	1b80      	subs	r0, r0, r6
 800cbdc:	6060      	str	r0, [r4, #4]
 800cbde:	6863      	ldr	r3, [r4, #4]
 800cbe0:	6123      	str	r3, [r4, #16]
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbe8:	e7aa      	b.n	800cb40 <_printf_i+0x148>
 800cbea:	6923      	ldr	r3, [r4, #16]
 800cbec:	4632      	mov	r2, r6
 800cbee:	4649      	mov	r1, r9
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	47d0      	blx	sl
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d0ad      	beq.n	800cb54 <_printf_i+0x15c>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	079b      	lsls	r3, r3, #30
 800cbfc:	d413      	bmi.n	800cc26 <_printf_i+0x22e>
 800cbfe:	68e0      	ldr	r0, [r4, #12]
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	4298      	cmp	r0, r3
 800cc04:	bfb8      	it	lt
 800cc06:	4618      	movlt	r0, r3
 800cc08:	e7a6      	b.n	800cb58 <_printf_i+0x160>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	4649      	mov	r1, r9
 800cc10:	4640      	mov	r0, r8
 800cc12:	47d0      	blx	sl
 800cc14:	3001      	adds	r0, #1
 800cc16:	d09d      	beq.n	800cb54 <_printf_i+0x15c>
 800cc18:	3501      	adds	r5, #1
 800cc1a:	68e3      	ldr	r3, [r4, #12]
 800cc1c:	9903      	ldr	r1, [sp, #12]
 800cc1e:	1a5b      	subs	r3, r3, r1
 800cc20:	42ab      	cmp	r3, r5
 800cc22:	dcf2      	bgt.n	800cc0a <_printf_i+0x212>
 800cc24:	e7eb      	b.n	800cbfe <_printf_i+0x206>
 800cc26:	2500      	movs	r5, #0
 800cc28:	f104 0619 	add.w	r6, r4, #25
 800cc2c:	e7f5      	b.n	800cc1a <_printf_i+0x222>
 800cc2e:	bf00      	nop
 800cc30:	08011416 	.word	0x08011416
 800cc34:	08011427 	.word	0x08011427

0800cc38 <std>:
 800cc38:	2300      	movs	r3, #0
 800cc3a:	b510      	push	{r4, lr}
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc46:	6083      	str	r3, [r0, #8]
 800cc48:	8181      	strh	r1, [r0, #12]
 800cc4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc4c:	81c2      	strh	r2, [r0, #14]
 800cc4e:	6183      	str	r3, [r0, #24]
 800cc50:	4619      	mov	r1, r3
 800cc52:	2208      	movs	r2, #8
 800cc54:	305c      	adds	r0, #92	@ 0x5c
 800cc56:	f000 f914 	bl	800ce82 <memset>
 800cc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc90 <std+0x58>)
 800cc5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc94 <std+0x5c>)
 800cc60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc62:	4b0d      	ldr	r3, [pc, #52]	@ (800cc98 <std+0x60>)
 800cc64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc66:	4b0d      	ldr	r3, [pc, #52]	@ (800cc9c <std+0x64>)
 800cc68:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cca0 <std+0x68>)
 800cc6c:	6224      	str	r4, [r4, #32]
 800cc6e:	429c      	cmp	r4, r3
 800cc70:	d006      	beq.n	800cc80 <std+0x48>
 800cc72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc76:	4294      	cmp	r4, r2
 800cc78:	d002      	beq.n	800cc80 <std+0x48>
 800cc7a:	33d0      	adds	r3, #208	@ 0xd0
 800cc7c:	429c      	cmp	r4, r3
 800cc7e:	d105      	bne.n	800cc8c <std+0x54>
 800cc80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc88:	f000 b988 	b.w	800cf9c <__retarget_lock_init_recursive>
 800cc8c:	bd10      	pop	{r4, pc}
 800cc8e:	bf00      	nop
 800cc90:	0800cdfd 	.word	0x0800cdfd
 800cc94:	0800ce1f 	.word	0x0800ce1f
 800cc98:	0800ce57 	.word	0x0800ce57
 800cc9c:	0800ce7b 	.word	0x0800ce7b
 800cca0:	240052c0 	.word	0x240052c0

0800cca4 <stdio_exit_handler>:
 800cca4:	4a02      	ldr	r2, [pc, #8]	@ (800ccb0 <stdio_exit_handler+0xc>)
 800cca6:	4903      	ldr	r1, [pc, #12]	@ (800ccb4 <stdio_exit_handler+0x10>)
 800cca8:	4803      	ldr	r0, [pc, #12]	@ (800ccb8 <stdio_exit_handler+0x14>)
 800ccaa:	f000 b869 	b.w	800cd80 <_fwalk_sglue>
 800ccae:	bf00      	nop
 800ccb0:	24000038 	.word	0x24000038
 800ccb4:	0800e6cd 	.word	0x0800e6cd
 800ccb8:	24000048 	.word	0x24000048

0800ccbc <cleanup_stdio>:
 800ccbc:	6841      	ldr	r1, [r0, #4]
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <cleanup_stdio+0x34>)
 800ccc0:	4299      	cmp	r1, r3
 800ccc2:	b510      	push	{r4, lr}
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	d001      	beq.n	800cccc <cleanup_stdio+0x10>
 800ccc8:	f001 fd00 	bl	800e6cc <_fflush_r>
 800cccc:	68a1      	ldr	r1, [r4, #8]
 800ccce:	4b09      	ldr	r3, [pc, #36]	@ (800ccf4 <cleanup_stdio+0x38>)
 800ccd0:	4299      	cmp	r1, r3
 800ccd2:	d002      	beq.n	800ccda <cleanup_stdio+0x1e>
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f001 fcf9 	bl	800e6cc <_fflush_r>
 800ccda:	68e1      	ldr	r1, [r4, #12]
 800ccdc:	4b06      	ldr	r3, [pc, #24]	@ (800ccf8 <cleanup_stdio+0x3c>)
 800ccde:	4299      	cmp	r1, r3
 800cce0:	d004      	beq.n	800ccec <cleanup_stdio+0x30>
 800cce2:	4620      	mov	r0, r4
 800cce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce8:	f001 bcf0 	b.w	800e6cc <_fflush_r>
 800ccec:	bd10      	pop	{r4, pc}
 800ccee:	bf00      	nop
 800ccf0:	240052c0 	.word	0x240052c0
 800ccf4:	24005328 	.word	0x24005328
 800ccf8:	24005390 	.word	0x24005390

0800ccfc <global_stdio_init.part.0>:
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	4b0b      	ldr	r3, [pc, #44]	@ (800cd2c <global_stdio_init.part.0+0x30>)
 800cd00:	4c0b      	ldr	r4, [pc, #44]	@ (800cd30 <global_stdio_init.part.0+0x34>)
 800cd02:	4a0c      	ldr	r2, [pc, #48]	@ (800cd34 <global_stdio_init.part.0+0x38>)
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	4620      	mov	r0, r4
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2104      	movs	r1, #4
 800cd0c:	f7ff ff94 	bl	800cc38 <std>
 800cd10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd14:	2201      	movs	r2, #1
 800cd16:	2109      	movs	r1, #9
 800cd18:	f7ff ff8e 	bl	800cc38 <std>
 800cd1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd20:	2202      	movs	r2, #2
 800cd22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd26:	2112      	movs	r1, #18
 800cd28:	f7ff bf86 	b.w	800cc38 <std>
 800cd2c:	240053f8 	.word	0x240053f8
 800cd30:	240052c0 	.word	0x240052c0
 800cd34:	0800cca5 	.word	0x0800cca5

0800cd38 <__sfp_lock_acquire>:
 800cd38:	4801      	ldr	r0, [pc, #4]	@ (800cd40 <__sfp_lock_acquire+0x8>)
 800cd3a:	f000 b930 	b.w	800cf9e <__retarget_lock_acquire_recursive>
 800cd3e:	bf00      	nop
 800cd40:	24005401 	.word	0x24005401

0800cd44 <__sfp_lock_release>:
 800cd44:	4801      	ldr	r0, [pc, #4]	@ (800cd4c <__sfp_lock_release+0x8>)
 800cd46:	f000 b92b 	b.w	800cfa0 <__retarget_lock_release_recursive>
 800cd4a:	bf00      	nop
 800cd4c:	24005401 	.word	0x24005401

0800cd50 <__sinit>:
 800cd50:	b510      	push	{r4, lr}
 800cd52:	4604      	mov	r4, r0
 800cd54:	f7ff fff0 	bl	800cd38 <__sfp_lock_acquire>
 800cd58:	6a23      	ldr	r3, [r4, #32]
 800cd5a:	b11b      	cbz	r3, 800cd64 <__sinit+0x14>
 800cd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd60:	f7ff bff0 	b.w	800cd44 <__sfp_lock_release>
 800cd64:	4b04      	ldr	r3, [pc, #16]	@ (800cd78 <__sinit+0x28>)
 800cd66:	6223      	str	r3, [r4, #32]
 800cd68:	4b04      	ldr	r3, [pc, #16]	@ (800cd7c <__sinit+0x2c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1f5      	bne.n	800cd5c <__sinit+0xc>
 800cd70:	f7ff ffc4 	bl	800ccfc <global_stdio_init.part.0>
 800cd74:	e7f2      	b.n	800cd5c <__sinit+0xc>
 800cd76:	bf00      	nop
 800cd78:	0800ccbd 	.word	0x0800ccbd
 800cd7c:	240053f8 	.word	0x240053f8

0800cd80 <_fwalk_sglue>:
 800cd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd84:	4607      	mov	r7, r0
 800cd86:	4688      	mov	r8, r1
 800cd88:	4614      	mov	r4, r2
 800cd8a:	2600      	movs	r6, #0
 800cd8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd90:	f1b9 0901 	subs.w	r9, r9, #1
 800cd94:	d505      	bpl.n	800cda2 <_fwalk_sglue+0x22>
 800cd96:	6824      	ldr	r4, [r4, #0]
 800cd98:	2c00      	cmp	r4, #0
 800cd9a:	d1f7      	bne.n	800cd8c <_fwalk_sglue+0xc>
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda2:	89ab      	ldrh	r3, [r5, #12]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d907      	bls.n	800cdb8 <_fwalk_sglue+0x38>
 800cda8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdac:	3301      	adds	r3, #1
 800cdae:	d003      	beq.n	800cdb8 <_fwalk_sglue+0x38>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	47c0      	blx	r8
 800cdb6:	4306      	orrs	r6, r0
 800cdb8:	3568      	adds	r5, #104	@ 0x68
 800cdba:	e7e9      	b.n	800cd90 <_fwalk_sglue+0x10>

0800cdbc <siprintf>:
 800cdbc:	b40e      	push	{r1, r2, r3}
 800cdbe:	b500      	push	{lr}
 800cdc0:	b09c      	sub	sp, #112	@ 0x70
 800cdc2:	ab1d      	add	r3, sp, #116	@ 0x74
 800cdc4:	9002      	str	r0, [sp, #8]
 800cdc6:	9006      	str	r0, [sp, #24]
 800cdc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cdcc:	4809      	ldr	r0, [pc, #36]	@ (800cdf4 <siprintf+0x38>)
 800cdce:	9107      	str	r1, [sp, #28]
 800cdd0:	9104      	str	r1, [sp, #16]
 800cdd2:	4909      	ldr	r1, [pc, #36]	@ (800cdf8 <siprintf+0x3c>)
 800cdd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd8:	9105      	str	r1, [sp, #20]
 800cdda:	6800      	ldr	r0, [r0, #0]
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	a902      	add	r1, sp, #8
 800cde0:	f001 faf4 	bl	800e3cc <_svfiprintf_r>
 800cde4:	9b02      	ldr	r3, [sp, #8]
 800cde6:	2200      	movs	r2, #0
 800cde8:	701a      	strb	r2, [r3, #0]
 800cdea:	b01c      	add	sp, #112	@ 0x70
 800cdec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdf0:	b003      	add	sp, #12
 800cdf2:	4770      	bx	lr
 800cdf4:	24000044 	.word	0x24000044
 800cdf8:	ffff0208 	.word	0xffff0208

0800cdfc <__sread>:
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	460c      	mov	r4, r1
 800ce00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce04:	f000 f86c 	bl	800cee0 <_read_r>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	bfab      	itete	ge
 800ce0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce10:	181b      	addge	r3, r3, r0
 800ce12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce16:	bfac      	ite	ge
 800ce18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce1a:	81a3      	strhlt	r3, [r4, #12]
 800ce1c:	bd10      	pop	{r4, pc}

0800ce1e <__swrite>:
 800ce1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce22:	461f      	mov	r7, r3
 800ce24:	898b      	ldrh	r3, [r1, #12]
 800ce26:	05db      	lsls	r3, r3, #23
 800ce28:	4605      	mov	r5, r0
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	4616      	mov	r6, r2
 800ce2e:	d505      	bpl.n	800ce3c <__swrite+0x1e>
 800ce30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce34:	2302      	movs	r3, #2
 800ce36:	2200      	movs	r2, #0
 800ce38:	f000 f840 	bl	800cebc <_lseek_r>
 800ce3c:	89a3      	ldrh	r3, [r4, #12]
 800ce3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce46:	81a3      	strh	r3, [r4, #12]
 800ce48:	4632      	mov	r2, r6
 800ce4a:	463b      	mov	r3, r7
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce52:	f000 b867 	b.w	800cf24 <_write_r>

0800ce56 <__sseek>:
 800ce56:	b510      	push	{r4, lr}
 800ce58:	460c      	mov	r4, r1
 800ce5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce5e:	f000 f82d 	bl	800cebc <_lseek_r>
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	bf15      	itete	ne
 800ce68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ce6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ce6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ce72:	81a3      	strheq	r3, [r4, #12]
 800ce74:	bf18      	it	ne
 800ce76:	81a3      	strhne	r3, [r4, #12]
 800ce78:	bd10      	pop	{r4, pc}

0800ce7a <__sclose>:
 800ce7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7e:	f000 b80d 	b.w	800ce9c <_close_r>

0800ce82 <memset>:
 800ce82:	4402      	add	r2, r0
 800ce84:	4603      	mov	r3, r0
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d100      	bne.n	800ce8c <memset+0xa>
 800ce8a:	4770      	bx	lr
 800ce8c:	f803 1b01 	strb.w	r1, [r3], #1
 800ce90:	e7f9      	b.n	800ce86 <memset+0x4>
	...

0800ce94 <_localeconv_r>:
 800ce94:	4800      	ldr	r0, [pc, #0]	@ (800ce98 <_localeconv_r+0x4>)
 800ce96:	4770      	bx	lr
 800ce98:	24000184 	.word	0x24000184

0800ce9c <_close_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d06      	ldr	r5, [pc, #24]	@ (800ceb8 <_close_r+0x1c>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	f7f4 fab4 	bl	8001414 <_close>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_close_r+0x1a>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_close_r+0x1a>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	240053fc 	.word	0x240053fc

0800cebc <_lseek_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	@ (800cedc <_lseek_r+0x20>)
 800cec0:	4604      	mov	r4, r0
 800cec2:	4608      	mov	r0, r1
 800cec4:	4611      	mov	r1, r2
 800cec6:	2200      	movs	r2, #0
 800cec8:	602a      	str	r2, [r5, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7f4 fac9 	bl	8001462 <_lseek>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_lseek_r+0x1e>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_lseek_r+0x1e>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	240053fc 	.word	0x240053fc

0800cee0 <_read_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d07      	ldr	r5, [pc, #28]	@ (800cf00 <_read_r+0x20>)
 800cee4:	4604      	mov	r4, r0
 800cee6:	4608      	mov	r0, r1
 800cee8:	4611      	mov	r1, r2
 800ceea:	2200      	movs	r2, #0
 800ceec:	602a      	str	r2, [r5, #0]
 800ceee:	461a      	mov	r2, r3
 800cef0:	f7f4 fa57 	bl	80013a2 <_read>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_read_r+0x1e>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_read_r+0x1e>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	240053fc 	.word	0x240053fc

0800cf04 <_sbrk_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4d06      	ldr	r5, [pc, #24]	@ (800cf20 <_sbrk_r+0x1c>)
 800cf08:	2300      	movs	r3, #0
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	4608      	mov	r0, r1
 800cf0e:	602b      	str	r3, [r5, #0]
 800cf10:	f7f4 fab4 	bl	800147c <_sbrk>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_sbrk_r+0x1a>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_sbrk_r+0x1a>
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	240053fc 	.word	0x240053fc

0800cf24 <_write_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4d07      	ldr	r5, [pc, #28]	@ (800cf44 <_write_r+0x20>)
 800cf28:	4604      	mov	r4, r0
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	4611      	mov	r1, r2
 800cf2e:	2200      	movs	r2, #0
 800cf30:	602a      	str	r2, [r5, #0]
 800cf32:	461a      	mov	r2, r3
 800cf34:	f7f4 fa52 	bl	80013dc <_write>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_write_r+0x1e>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_write_r+0x1e>
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	240053fc 	.word	0x240053fc

0800cf48 <__errno>:
 800cf48:	4b01      	ldr	r3, [pc, #4]	@ (800cf50 <__errno+0x8>)
 800cf4a:	6818      	ldr	r0, [r3, #0]
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	24000044 	.word	0x24000044

0800cf54 <__libc_init_array>:
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	4d0d      	ldr	r5, [pc, #52]	@ (800cf8c <__libc_init_array+0x38>)
 800cf58:	4c0d      	ldr	r4, [pc, #52]	@ (800cf90 <__libc_init_array+0x3c>)
 800cf5a:	1b64      	subs	r4, r4, r5
 800cf5c:	10a4      	asrs	r4, r4, #2
 800cf5e:	2600      	movs	r6, #0
 800cf60:	42a6      	cmp	r6, r4
 800cf62:	d109      	bne.n	800cf78 <__libc_init_array+0x24>
 800cf64:	4d0b      	ldr	r5, [pc, #44]	@ (800cf94 <__libc_init_array+0x40>)
 800cf66:	4c0c      	ldr	r4, [pc, #48]	@ (800cf98 <__libc_init_array+0x44>)
 800cf68:	f002 f9bc 	bl	800f2e4 <_init>
 800cf6c:	1b64      	subs	r4, r4, r5
 800cf6e:	10a4      	asrs	r4, r4, #2
 800cf70:	2600      	movs	r6, #0
 800cf72:	42a6      	cmp	r6, r4
 800cf74:	d105      	bne.n	800cf82 <__libc_init_array+0x2e>
 800cf76:	bd70      	pop	{r4, r5, r6, pc}
 800cf78:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf7c:	4798      	blx	r3
 800cf7e:	3601      	adds	r6, #1
 800cf80:	e7ee      	b.n	800cf60 <__libc_init_array+0xc>
 800cf82:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf86:	4798      	blx	r3
 800cf88:	3601      	adds	r6, #1
 800cf8a:	e7f2      	b.n	800cf72 <__libc_init_array+0x1e>
 800cf8c:	08011790 	.word	0x08011790
 800cf90:	08011790 	.word	0x08011790
 800cf94:	08011790 	.word	0x08011790
 800cf98:	08011794 	.word	0x08011794

0800cf9c <__retarget_lock_init_recursive>:
 800cf9c:	4770      	bx	lr

0800cf9e <__retarget_lock_acquire_recursive>:
 800cf9e:	4770      	bx	lr

0800cfa0 <__retarget_lock_release_recursive>:
 800cfa0:	4770      	bx	lr

0800cfa2 <memcpy>:
 800cfa2:	440a      	add	r2, r1
 800cfa4:	4291      	cmp	r1, r2
 800cfa6:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfaa:	d100      	bne.n	800cfae <memcpy+0xc>
 800cfac:	4770      	bx	lr
 800cfae:	b510      	push	{r4, lr}
 800cfb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfb8:	4291      	cmp	r1, r2
 800cfba:	d1f9      	bne.n	800cfb0 <memcpy+0xe>
 800cfbc:	bd10      	pop	{r4, pc}

0800cfbe <quorem>:
 800cfbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc2:	6903      	ldr	r3, [r0, #16]
 800cfc4:	690c      	ldr	r4, [r1, #16]
 800cfc6:	42a3      	cmp	r3, r4
 800cfc8:	4607      	mov	r7, r0
 800cfca:	db7e      	blt.n	800d0ca <quorem+0x10c>
 800cfcc:	3c01      	subs	r4, #1
 800cfce:	f101 0814 	add.w	r8, r1, #20
 800cfd2:	00a3      	lsls	r3, r4, #2
 800cfd4:	f100 0514 	add.w	r5, r0, #20
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	429a      	cmp	r2, r3
 800cfec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cff0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cff4:	d32e      	bcc.n	800d054 <quorem+0x96>
 800cff6:	f04f 0a00 	mov.w	sl, #0
 800cffa:	46c4      	mov	ip, r8
 800cffc:	46ae      	mov	lr, r5
 800cffe:	46d3      	mov	fp, sl
 800d000:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d004:	b298      	uxth	r0, r3
 800d006:	fb06 a000 	mla	r0, r6, r0, sl
 800d00a:	0c02      	lsrs	r2, r0, #16
 800d00c:	0c1b      	lsrs	r3, r3, #16
 800d00e:	fb06 2303 	mla	r3, r6, r3, r2
 800d012:	f8de 2000 	ldr.w	r2, [lr]
 800d016:	b280      	uxth	r0, r0
 800d018:	b292      	uxth	r2, r2
 800d01a:	1a12      	subs	r2, r2, r0
 800d01c:	445a      	add	r2, fp
 800d01e:	f8de 0000 	ldr.w	r0, [lr]
 800d022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d026:	b29b      	uxth	r3, r3
 800d028:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d02c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d030:	b292      	uxth	r2, r2
 800d032:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d036:	45e1      	cmp	r9, ip
 800d038:	f84e 2b04 	str.w	r2, [lr], #4
 800d03c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d040:	d2de      	bcs.n	800d000 <quorem+0x42>
 800d042:	9b00      	ldr	r3, [sp, #0]
 800d044:	58eb      	ldr	r3, [r5, r3]
 800d046:	b92b      	cbnz	r3, 800d054 <quorem+0x96>
 800d048:	9b01      	ldr	r3, [sp, #4]
 800d04a:	3b04      	subs	r3, #4
 800d04c:	429d      	cmp	r5, r3
 800d04e:	461a      	mov	r2, r3
 800d050:	d32f      	bcc.n	800d0b2 <quorem+0xf4>
 800d052:	613c      	str	r4, [r7, #16]
 800d054:	4638      	mov	r0, r7
 800d056:	f001 f855 	bl	800e104 <__mcmp>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	db25      	blt.n	800d0aa <quorem+0xec>
 800d05e:	4629      	mov	r1, r5
 800d060:	2000      	movs	r0, #0
 800d062:	f858 2b04 	ldr.w	r2, [r8], #4
 800d066:	f8d1 c000 	ldr.w	ip, [r1]
 800d06a:	fa1f fe82 	uxth.w	lr, r2
 800d06e:	fa1f f38c 	uxth.w	r3, ip
 800d072:	eba3 030e 	sub.w	r3, r3, lr
 800d076:	4403      	add	r3, r0
 800d078:	0c12      	lsrs	r2, r2, #16
 800d07a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d07e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d082:	b29b      	uxth	r3, r3
 800d084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d088:	45c1      	cmp	r9, r8
 800d08a:	f841 3b04 	str.w	r3, [r1], #4
 800d08e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d092:	d2e6      	bcs.n	800d062 <quorem+0xa4>
 800d094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d09c:	b922      	cbnz	r2, 800d0a8 <quorem+0xea>
 800d09e:	3b04      	subs	r3, #4
 800d0a0:	429d      	cmp	r5, r3
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	d30b      	bcc.n	800d0be <quorem+0x100>
 800d0a6:	613c      	str	r4, [r7, #16]
 800d0a8:	3601      	adds	r6, #1
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	b003      	add	sp, #12
 800d0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b2:	6812      	ldr	r2, [r2, #0]
 800d0b4:	3b04      	subs	r3, #4
 800d0b6:	2a00      	cmp	r2, #0
 800d0b8:	d1cb      	bne.n	800d052 <quorem+0x94>
 800d0ba:	3c01      	subs	r4, #1
 800d0bc:	e7c6      	b.n	800d04c <quorem+0x8e>
 800d0be:	6812      	ldr	r2, [r2, #0]
 800d0c0:	3b04      	subs	r3, #4
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	d1ef      	bne.n	800d0a6 <quorem+0xe8>
 800d0c6:	3c01      	subs	r4, #1
 800d0c8:	e7ea      	b.n	800d0a0 <quorem+0xe2>
 800d0ca:	2000      	movs	r0, #0
 800d0cc:	e7ee      	b.n	800d0ac <quorem+0xee>
	...

0800d0d0 <_dtoa_r>:
 800d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d4:	ed2d 8b02 	vpush	{d8}
 800d0d8:	69c7      	ldr	r7, [r0, #28]
 800d0da:	b091      	sub	sp, #68	@ 0x44
 800d0dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d0e0:	ec55 4b10 	vmov	r4, r5, d0
 800d0e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d0e6:	9107      	str	r1, [sp, #28]
 800d0e8:	4681      	mov	r9, r0
 800d0ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0ec:	930d      	str	r3, [sp, #52]	@ 0x34
 800d0ee:	b97f      	cbnz	r7, 800d110 <_dtoa_r+0x40>
 800d0f0:	2010      	movs	r0, #16
 800d0f2:	f7ff f8b3 	bl	800c25c <malloc>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	f8c9 001c 	str.w	r0, [r9, #28]
 800d0fc:	b920      	cbnz	r0, 800d108 <_dtoa_r+0x38>
 800d0fe:	4ba0      	ldr	r3, [pc, #640]	@ (800d380 <_dtoa_r+0x2b0>)
 800d100:	21ef      	movs	r1, #239	@ 0xef
 800d102:	48a0      	ldr	r0, [pc, #640]	@ (800d384 <_dtoa_r+0x2b4>)
 800d104:	f001 fb24 	bl	800e750 <__assert_func>
 800d108:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d10c:	6007      	str	r7, [r0, #0]
 800d10e:	60c7      	str	r7, [r0, #12]
 800d110:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d114:	6819      	ldr	r1, [r3, #0]
 800d116:	b159      	cbz	r1, 800d130 <_dtoa_r+0x60>
 800d118:	685a      	ldr	r2, [r3, #4]
 800d11a:	604a      	str	r2, [r1, #4]
 800d11c:	2301      	movs	r3, #1
 800d11e:	4093      	lsls	r3, r2
 800d120:	608b      	str	r3, [r1, #8]
 800d122:	4648      	mov	r0, r9
 800d124:	f000 fdb4 	bl	800dc90 <_Bfree>
 800d128:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]
 800d130:	1e2b      	subs	r3, r5, #0
 800d132:	bfbb      	ittet	lt
 800d134:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d138:	9303      	strlt	r3, [sp, #12]
 800d13a:	2300      	movge	r3, #0
 800d13c:	2201      	movlt	r2, #1
 800d13e:	bfac      	ite	ge
 800d140:	6033      	strge	r3, [r6, #0]
 800d142:	6032      	strlt	r2, [r6, #0]
 800d144:	4b90      	ldr	r3, [pc, #576]	@ (800d388 <_dtoa_r+0x2b8>)
 800d146:	9e03      	ldr	r6, [sp, #12]
 800d148:	43b3      	bics	r3, r6
 800d14a:	d110      	bne.n	800d16e <_dtoa_r+0x9e>
 800d14c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d14e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d152:	6013      	str	r3, [r2, #0]
 800d154:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d158:	4323      	orrs	r3, r4
 800d15a:	f000 84de 	beq.w	800db1a <_dtoa_r+0xa4a>
 800d15e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d160:	4f8a      	ldr	r7, [pc, #552]	@ (800d38c <_dtoa_r+0x2bc>)
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 84e0 	beq.w	800db28 <_dtoa_r+0xa58>
 800d168:	1cfb      	adds	r3, r7, #3
 800d16a:	f000 bcdb 	b.w	800db24 <_dtoa_r+0xa54>
 800d16e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d172:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17a:	d10a      	bne.n	800d192 <_dtoa_r+0xc2>
 800d17c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d17e:	2301      	movs	r3, #1
 800d180:	6013      	str	r3, [r2, #0]
 800d182:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d184:	b113      	cbz	r3, 800d18c <_dtoa_r+0xbc>
 800d186:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d188:	4b81      	ldr	r3, [pc, #516]	@ (800d390 <_dtoa_r+0x2c0>)
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	4f81      	ldr	r7, [pc, #516]	@ (800d394 <_dtoa_r+0x2c4>)
 800d18e:	f000 bccb 	b.w	800db28 <_dtoa_r+0xa58>
 800d192:	aa0e      	add	r2, sp, #56	@ 0x38
 800d194:	a90f      	add	r1, sp, #60	@ 0x3c
 800d196:	4648      	mov	r0, r9
 800d198:	eeb0 0b48 	vmov.f64	d0, d8
 800d19c:	f001 f862 	bl	800e264 <__d2b>
 800d1a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d1a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1a6:	9001      	str	r0, [sp, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d045      	beq.n	800d238 <_dtoa_r+0x168>
 800d1ac:	eeb0 7b48 	vmov.f64	d7, d8
 800d1b0:	ee18 1a90 	vmov	r1, s17
 800d1b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d1b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d1bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d1c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d1c4:	2500      	movs	r5, #0
 800d1c6:	ee07 1a90 	vmov	s15, r1
 800d1ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d1ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d368 <_dtoa_r+0x298>
 800d1d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d370 <_dtoa_r+0x2a0>
 800d1da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d1de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d378 <_dtoa_r+0x2a8>
 800d1e2:	ee07 3a90 	vmov	s15, r3
 800d1e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d1ea:	eeb0 7b46 	vmov.f64	d7, d6
 800d1ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d1f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d1f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fe:	ee16 8a90 	vmov	r8, s13
 800d202:	d508      	bpl.n	800d216 <_dtoa_r+0x146>
 800d204:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d208:	eeb4 6b47 	vcmp.f64	d6, d7
 800d20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d210:	bf18      	it	ne
 800d212:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d216:	f1b8 0f16 	cmp.w	r8, #22
 800d21a:	d82b      	bhi.n	800d274 <_dtoa_r+0x1a4>
 800d21c:	495e      	ldr	r1, [pc, #376]	@ (800d398 <_dtoa_r+0x2c8>)
 800d21e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d222:	ed91 7b00 	vldr	d7, [r1]
 800d226:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	d501      	bpl.n	800d234 <_dtoa_r+0x164>
 800d230:	f108 38ff 	add.w	r8, r8, #4294967295
 800d234:	2100      	movs	r1, #0
 800d236:	e01e      	b.n	800d276 <_dtoa_r+0x1a6>
 800d238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d23a:	4413      	add	r3, r2
 800d23c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d240:	2920      	cmp	r1, #32
 800d242:	bfc1      	itttt	gt
 800d244:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d248:	408e      	lslgt	r6, r1
 800d24a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d24e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d252:	bfd6      	itet	le
 800d254:	f1c1 0120 	rsble	r1, r1, #32
 800d258:	4331      	orrgt	r1, r6
 800d25a:	fa04 f101 	lslle.w	r1, r4, r1
 800d25e:	ee07 1a90 	vmov	s15, r1
 800d262:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d266:	3b01      	subs	r3, #1
 800d268:	ee17 1a90 	vmov	r1, s15
 800d26c:	2501      	movs	r5, #1
 800d26e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d272:	e7a8      	b.n	800d1c6 <_dtoa_r+0xf6>
 800d274:	2101      	movs	r1, #1
 800d276:	1ad2      	subs	r2, r2, r3
 800d278:	1e53      	subs	r3, r2, #1
 800d27a:	9306      	str	r3, [sp, #24]
 800d27c:	bf45      	ittet	mi
 800d27e:	f1c2 0301 	rsbmi	r3, r2, #1
 800d282:	9305      	strmi	r3, [sp, #20]
 800d284:	2300      	movpl	r3, #0
 800d286:	2300      	movmi	r3, #0
 800d288:	bf4c      	ite	mi
 800d28a:	9306      	strmi	r3, [sp, #24]
 800d28c:	9305      	strpl	r3, [sp, #20]
 800d28e:	f1b8 0f00 	cmp.w	r8, #0
 800d292:	910c      	str	r1, [sp, #48]	@ 0x30
 800d294:	db18      	blt.n	800d2c8 <_dtoa_r+0x1f8>
 800d296:	9b06      	ldr	r3, [sp, #24]
 800d298:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d29c:	4443      	add	r3, r8
 800d29e:	9306      	str	r3, [sp, #24]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	9a07      	ldr	r2, [sp, #28]
 800d2a4:	2a09      	cmp	r2, #9
 800d2a6:	d849      	bhi.n	800d33c <_dtoa_r+0x26c>
 800d2a8:	2a05      	cmp	r2, #5
 800d2aa:	bfc4      	itt	gt
 800d2ac:	3a04      	subgt	r2, #4
 800d2ae:	9207      	strgt	r2, [sp, #28]
 800d2b0:	9a07      	ldr	r2, [sp, #28]
 800d2b2:	f1a2 0202 	sub.w	r2, r2, #2
 800d2b6:	bfcc      	ite	gt
 800d2b8:	2400      	movgt	r4, #0
 800d2ba:	2401      	movle	r4, #1
 800d2bc:	2a03      	cmp	r2, #3
 800d2be:	d848      	bhi.n	800d352 <_dtoa_r+0x282>
 800d2c0:	e8df f002 	tbb	[pc, r2]
 800d2c4:	3a2c2e0b 	.word	0x3a2c2e0b
 800d2c8:	9b05      	ldr	r3, [sp, #20]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	eba3 0308 	sub.w	r3, r3, r8
 800d2d0:	9305      	str	r3, [sp, #20]
 800d2d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800d2d4:	f1c8 0300 	rsb	r3, r8, #0
 800d2d8:	e7e3      	b.n	800d2a2 <_dtoa_r+0x1d2>
 800d2da:	2200      	movs	r2, #0
 800d2dc:	9208      	str	r2, [sp, #32]
 800d2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2e0:	2a00      	cmp	r2, #0
 800d2e2:	dc39      	bgt.n	800d358 <_dtoa_r+0x288>
 800d2e4:	f04f 0b01 	mov.w	fp, #1
 800d2e8:	46da      	mov	sl, fp
 800d2ea:	465a      	mov	r2, fp
 800d2ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d2f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	2004      	movs	r0, #4
 800d2f8:	f100 0614 	add.w	r6, r0, #20
 800d2fc:	4296      	cmp	r6, r2
 800d2fe:	d930      	bls.n	800d362 <_dtoa_r+0x292>
 800d300:	6079      	str	r1, [r7, #4]
 800d302:	4648      	mov	r0, r9
 800d304:	9304      	str	r3, [sp, #16]
 800d306:	f000 fc83 	bl	800dc10 <_Balloc>
 800d30a:	9b04      	ldr	r3, [sp, #16]
 800d30c:	4607      	mov	r7, r0
 800d30e:	2800      	cmp	r0, #0
 800d310:	d146      	bne.n	800d3a0 <_dtoa_r+0x2d0>
 800d312:	4b22      	ldr	r3, [pc, #136]	@ (800d39c <_dtoa_r+0x2cc>)
 800d314:	4602      	mov	r2, r0
 800d316:	f240 11af 	movw	r1, #431	@ 0x1af
 800d31a:	e6f2      	b.n	800d102 <_dtoa_r+0x32>
 800d31c:	2201      	movs	r2, #1
 800d31e:	e7dd      	b.n	800d2dc <_dtoa_r+0x20c>
 800d320:	2200      	movs	r2, #0
 800d322:	9208      	str	r2, [sp, #32]
 800d324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d326:	eb08 0b02 	add.w	fp, r8, r2
 800d32a:	f10b 0a01 	add.w	sl, fp, #1
 800d32e:	4652      	mov	r2, sl
 800d330:	2a01      	cmp	r2, #1
 800d332:	bfb8      	it	lt
 800d334:	2201      	movlt	r2, #1
 800d336:	e7db      	b.n	800d2f0 <_dtoa_r+0x220>
 800d338:	2201      	movs	r2, #1
 800d33a:	e7f2      	b.n	800d322 <_dtoa_r+0x252>
 800d33c:	2401      	movs	r4, #1
 800d33e:	2200      	movs	r2, #0
 800d340:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d344:	f04f 3bff 	mov.w	fp, #4294967295
 800d348:	2100      	movs	r1, #0
 800d34a:	46da      	mov	sl, fp
 800d34c:	2212      	movs	r2, #18
 800d34e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d350:	e7ce      	b.n	800d2f0 <_dtoa_r+0x220>
 800d352:	2201      	movs	r2, #1
 800d354:	9208      	str	r2, [sp, #32]
 800d356:	e7f5      	b.n	800d344 <_dtoa_r+0x274>
 800d358:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800d35c:	46da      	mov	sl, fp
 800d35e:	465a      	mov	r2, fp
 800d360:	e7c6      	b.n	800d2f0 <_dtoa_r+0x220>
 800d362:	3101      	adds	r1, #1
 800d364:	0040      	lsls	r0, r0, #1
 800d366:	e7c7      	b.n	800d2f8 <_dtoa_r+0x228>
 800d368:	636f4361 	.word	0x636f4361
 800d36c:	3fd287a7 	.word	0x3fd287a7
 800d370:	8b60c8b3 	.word	0x8b60c8b3
 800d374:	3fc68a28 	.word	0x3fc68a28
 800d378:	509f79fb 	.word	0x509f79fb
 800d37c:	3fd34413 	.word	0x3fd34413
 800d380:	08011445 	.word	0x08011445
 800d384:	0801145c 	.word	0x0801145c
 800d388:	7ff00000 	.word	0x7ff00000
 800d38c:	08011441 	.word	0x08011441
 800d390:	08011415 	.word	0x08011415
 800d394:	08011414 	.word	0x08011414
 800d398:	08011558 	.word	0x08011558
 800d39c:	080114b4 	.word	0x080114b4
 800d3a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d3a4:	f1ba 0f0e 	cmp.w	sl, #14
 800d3a8:	6010      	str	r0, [r2, #0]
 800d3aa:	d86f      	bhi.n	800d48c <_dtoa_r+0x3bc>
 800d3ac:	2c00      	cmp	r4, #0
 800d3ae:	d06d      	beq.n	800d48c <_dtoa_r+0x3bc>
 800d3b0:	f1b8 0f00 	cmp.w	r8, #0
 800d3b4:	f340 80c2 	ble.w	800d53c <_dtoa_r+0x46c>
 800d3b8:	4aca      	ldr	r2, [pc, #808]	@ (800d6e4 <_dtoa_r+0x614>)
 800d3ba:	f008 010f 	and.w	r1, r8, #15
 800d3be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d3c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d3c6:	ed92 7b00 	vldr	d7, [r2]
 800d3ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d3ce:	f000 80a9 	beq.w	800d524 <_dtoa_r+0x454>
 800d3d2:	4ac5      	ldr	r2, [pc, #788]	@ (800d6e8 <_dtoa_r+0x618>)
 800d3d4:	ed92 6b08 	vldr	d6, [r2, #32]
 800d3d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d3dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d3e0:	f001 010f 	and.w	r1, r1, #15
 800d3e4:	2203      	movs	r2, #3
 800d3e6:	48c0      	ldr	r0, [pc, #768]	@ (800d6e8 <_dtoa_r+0x618>)
 800d3e8:	2900      	cmp	r1, #0
 800d3ea:	f040 809d 	bne.w	800d528 <_dtoa_r+0x458>
 800d3ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d3f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d3f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d3fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d400:	2900      	cmp	r1, #0
 800d402:	f000 80c1 	beq.w	800d588 <_dtoa_r+0x4b8>
 800d406:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d40a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d412:	f140 80b9 	bpl.w	800d588 <_dtoa_r+0x4b8>
 800d416:	f1ba 0f00 	cmp.w	sl, #0
 800d41a:	f000 80b5 	beq.w	800d588 <_dtoa_r+0x4b8>
 800d41e:	f1bb 0f00 	cmp.w	fp, #0
 800d422:	dd31      	ble.n	800d488 <_dtoa_r+0x3b8>
 800d424:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d428:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d42c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d430:	f108 31ff 	add.w	r1, r8, #4294967295
 800d434:	9104      	str	r1, [sp, #16]
 800d436:	3201      	adds	r2, #1
 800d438:	465c      	mov	r4, fp
 800d43a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d43e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d442:	ee07 2a90 	vmov	s15, r2
 800d446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d44a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d44e:	ee15 2a90 	vmov	r2, s11
 800d452:	ec51 0b15 	vmov	r0, r1, d5
 800d456:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d45a:	2c00      	cmp	r4, #0
 800d45c:	f040 8098 	bne.w	800d590 <_dtoa_r+0x4c0>
 800d460:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d464:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d468:	ec41 0b17 	vmov	d7, r0, r1
 800d46c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d474:	f300 8261 	bgt.w	800d93a <_dtoa_r+0x86a>
 800d478:	eeb1 7b47 	vneg.f64	d7, d7
 800d47c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d484:	f100 80f5 	bmi.w	800d672 <_dtoa_r+0x5a2>
 800d488:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d48c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d48e:	2a00      	cmp	r2, #0
 800d490:	f2c0 812c 	blt.w	800d6ec <_dtoa_r+0x61c>
 800d494:	f1b8 0f0e 	cmp.w	r8, #14
 800d498:	f300 8128 	bgt.w	800d6ec <_dtoa_r+0x61c>
 800d49c:	4b91      	ldr	r3, [pc, #580]	@ (800d6e4 <_dtoa_r+0x614>)
 800d49e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d4a2:	ed93 6b00 	vldr	d6, [r3]
 800d4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	da03      	bge.n	800d4b4 <_dtoa_r+0x3e4>
 800d4ac:	f1ba 0f00 	cmp.w	sl, #0
 800d4b0:	f340 80d2 	ble.w	800d658 <_dtoa_r+0x588>
 800d4b4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d4b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4bc:	463e      	mov	r6, r7
 800d4be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d4c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d4c6:	ee15 3a10 	vmov	r3, s10
 800d4ca:	3330      	adds	r3, #48	@ 0x30
 800d4cc:	f806 3b01 	strb.w	r3, [r6], #1
 800d4d0:	1bf3      	subs	r3, r6, r7
 800d4d2:	459a      	cmp	sl, r3
 800d4d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d4d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d4dc:	f040 80f8 	bne.w	800d6d0 <_dtoa_r+0x600>
 800d4e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d4e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ec:	f300 80dd 	bgt.w	800d6aa <_dtoa_r+0x5da>
 800d4f0:	eeb4 7b46 	vcmp.f64	d7, d6
 800d4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f8:	d104      	bne.n	800d504 <_dtoa_r+0x434>
 800d4fa:	ee15 3a10 	vmov	r3, s10
 800d4fe:	07db      	lsls	r3, r3, #31
 800d500:	f100 80d3 	bmi.w	800d6aa <_dtoa_r+0x5da>
 800d504:	9901      	ldr	r1, [sp, #4]
 800d506:	4648      	mov	r0, r9
 800d508:	f000 fbc2 	bl	800dc90 <_Bfree>
 800d50c:	2300      	movs	r3, #0
 800d50e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d510:	7033      	strb	r3, [r6, #0]
 800d512:	f108 0301 	add.w	r3, r8, #1
 800d516:	6013      	str	r3, [r2, #0]
 800d518:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 8304 	beq.w	800db28 <_dtoa_r+0xa58>
 800d520:	601e      	str	r6, [r3, #0]
 800d522:	e301      	b.n	800db28 <_dtoa_r+0xa58>
 800d524:	2202      	movs	r2, #2
 800d526:	e75e      	b.n	800d3e6 <_dtoa_r+0x316>
 800d528:	07cc      	lsls	r4, r1, #31
 800d52a:	d504      	bpl.n	800d536 <_dtoa_r+0x466>
 800d52c:	ed90 6b00 	vldr	d6, [r0]
 800d530:	3201      	adds	r2, #1
 800d532:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d536:	1049      	asrs	r1, r1, #1
 800d538:	3008      	adds	r0, #8
 800d53a:	e755      	b.n	800d3e8 <_dtoa_r+0x318>
 800d53c:	d022      	beq.n	800d584 <_dtoa_r+0x4b4>
 800d53e:	f1c8 0100 	rsb	r1, r8, #0
 800d542:	4a68      	ldr	r2, [pc, #416]	@ (800d6e4 <_dtoa_r+0x614>)
 800d544:	f001 000f 	and.w	r0, r1, #15
 800d548:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d54c:	ed92 7b00 	vldr	d7, [r2]
 800d550:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d554:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d558:	4863      	ldr	r0, [pc, #396]	@ (800d6e8 <_dtoa_r+0x618>)
 800d55a:	1109      	asrs	r1, r1, #4
 800d55c:	2400      	movs	r4, #0
 800d55e:	2202      	movs	r2, #2
 800d560:	b929      	cbnz	r1, 800d56e <_dtoa_r+0x49e>
 800d562:	2c00      	cmp	r4, #0
 800d564:	f43f af49 	beq.w	800d3fa <_dtoa_r+0x32a>
 800d568:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d56c:	e745      	b.n	800d3fa <_dtoa_r+0x32a>
 800d56e:	07ce      	lsls	r6, r1, #31
 800d570:	d505      	bpl.n	800d57e <_dtoa_r+0x4ae>
 800d572:	ed90 6b00 	vldr	d6, [r0]
 800d576:	3201      	adds	r2, #1
 800d578:	2401      	movs	r4, #1
 800d57a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d57e:	1049      	asrs	r1, r1, #1
 800d580:	3008      	adds	r0, #8
 800d582:	e7ed      	b.n	800d560 <_dtoa_r+0x490>
 800d584:	2202      	movs	r2, #2
 800d586:	e738      	b.n	800d3fa <_dtoa_r+0x32a>
 800d588:	f8cd 8010 	str.w	r8, [sp, #16]
 800d58c:	4654      	mov	r4, sl
 800d58e:	e754      	b.n	800d43a <_dtoa_r+0x36a>
 800d590:	4a54      	ldr	r2, [pc, #336]	@ (800d6e4 <_dtoa_r+0x614>)
 800d592:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d596:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d59a:	9a08      	ldr	r2, [sp, #32]
 800d59c:	ec41 0b17 	vmov	d7, r0, r1
 800d5a0:	443c      	add	r4, r7
 800d5a2:	b34a      	cbz	r2, 800d5f8 <_dtoa_r+0x528>
 800d5a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d5a8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d5ac:	463e      	mov	r6, r7
 800d5ae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d5b2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d5b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5ba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d5be:	ee14 2a90 	vmov	r2, s9
 800d5c2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d5c6:	3230      	adds	r2, #48	@ 0x30
 800d5c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d5cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d4:	f806 2b01 	strb.w	r2, [r6], #1
 800d5d8:	d438      	bmi.n	800d64c <_dtoa_r+0x57c>
 800d5da:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d5de:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e6:	d462      	bmi.n	800d6ae <_dtoa_r+0x5de>
 800d5e8:	42a6      	cmp	r6, r4
 800d5ea:	f43f af4d 	beq.w	800d488 <_dtoa_r+0x3b8>
 800d5ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d5f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d5f6:	e7e0      	b.n	800d5ba <_dtoa_r+0x4ea>
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	463e      	mov	r6, r7
 800d5fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d600:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d604:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d608:	ee14 2a90 	vmov	r2, s9
 800d60c:	3230      	adds	r2, #48	@ 0x30
 800d60e:	f806 2b01 	strb.w	r2, [r6], #1
 800d612:	42a6      	cmp	r6, r4
 800d614:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d618:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d61c:	d119      	bne.n	800d652 <_dtoa_r+0x582>
 800d61e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d622:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d626:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62e:	dc3e      	bgt.n	800d6ae <_dtoa_r+0x5de>
 800d630:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d634:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d63c:	f57f af24 	bpl.w	800d488 <_dtoa_r+0x3b8>
 800d640:	460e      	mov	r6, r1
 800d642:	3901      	subs	r1, #1
 800d644:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d648:	2b30      	cmp	r3, #48	@ 0x30
 800d64a:	d0f9      	beq.n	800d640 <_dtoa_r+0x570>
 800d64c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d650:	e758      	b.n	800d504 <_dtoa_r+0x434>
 800d652:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d656:	e7d5      	b.n	800d604 <_dtoa_r+0x534>
 800d658:	d10b      	bne.n	800d672 <_dtoa_r+0x5a2>
 800d65a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d65e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d662:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d666:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66e:	f2c0 8161 	blt.w	800d934 <_dtoa_r+0x864>
 800d672:	2400      	movs	r4, #0
 800d674:	4625      	mov	r5, r4
 800d676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d678:	43db      	mvns	r3, r3
 800d67a:	9304      	str	r3, [sp, #16]
 800d67c:	463e      	mov	r6, r7
 800d67e:	f04f 0800 	mov.w	r8, #0
 800d682:	4621      	mov	r1, r4
 800d684:	4648      	mov	r0, r9
 800d686:	f000 fb03 	bl	800dc90 <_Bfree>
 800d68a:	2d00      	cmp	r5, #0
 800d68c:	d0de      	beq.n	800d64c <_dtoa_r+0x57c>
 800d68e:	f1b8 0f00 	cmp.w	r8, #0
 800d692:	d005      	beq.n	800d6a0 <_dtoa_r+0x5d0>
 800d694:	45a8      	cmp	r8, r5
 800d696:	d003      	beq.n	800d6a0 <_dtoa_r+0x5d0>
 800d698:	4641      	mov	r1, r8
 800d69a:	4648      	mov	r0, r9
 800d69c:	f000 faf8 	bl	800dc90 <_Bfree>
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	4648      	mov	r0, r9
 800d6a4:	f000 faf4 	bl	800dc90 <_Bfree>
 800d6a8:	e7d0      	b.n	800d64c <_dtoa_r+0x57c>
 800d6aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800d6ae:	4633      	mov	r3, r6
 800d6b0:	461e      	mov	r6, r3
 800d6b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6b6:	2a39      	cmp	r2, #57	@ 0x39
 800d6b8:	d106      	bne.n	800d6c8 <_dtoa_r+0x5f8>
 800d6ba:	429f      	cmp	r7, r3
 800d6bc:	d1f8      	bne.n	800d6b0 <_dtoa_r+0x5e0>
 800d6be:	9a04      	ldr	r2, [sp, #16]
 800d6c0:	3201      	adds	r2, #1
 800d6c2:	9204      	str	r2, [sp, #16]
 800d6c4:	2230      	movs	r2, #48	@ 0x30
 800d6c6:	703a      	strb	r2, [r7, #0]
 800d6c8:	781a      	ldrb	r2, [r3, #0]
 800d6ca:	3201      	adds	r2, #1
 800d6cc:	701a      	strb	r2, [r3, #0]
 800d6ce:	e7bd      	b.n	800d64c <_dtoa_r+0x57c>
 800d6d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d6d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6dc:	f47f aeef 	bne.w	800d4be <_dtoa_r+0x3ee>
 800d6e0:	e710      	b.n	800d504 <_dtoa_r+0x434>
 800d6e2:	bf00      	nop
 800d6e4:	08011558 	.word	0x08011558
 800d6e8:	08011530 	.word	0x08011530
 800d6ec:	9908      	ldr	r1, [sp, #32]
 800d6ee:	2900      	cmp	r1, #0
 800d6f0:	f000 80e3 	beq.w	800d8ba <_dtoa_r+0x7ea>
 800d6f4:	9907      	ldr	r1, [sp, #28]
 800d6f6:	2901      	cmp	r1, #1
 800d6f8:	f300 80c8 	bgt.w	800d88c <_dtoa_r+0x7bc>
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	f000 80c1 	beq.w	800d884 <_dtoa_r+0x7b4>
 800d702:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d706:	9e05      	ldr	r6, [sp, #20]
 800d708:	461c      	mov	r4, r3
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	9b05      	ldr	r3, [sp, #20]
 800d70e:	4413      	add	r3, r2
 800d710:	9305      	str	r3, [sp, #20]
 800d712:	9b06      	ldr	r3, [sp, #24]
 800d714:	2101      	movs	r1, #1
 800d716:	4413      	add	r3, r2
 800d718:	4648      	mov	r0, r9
 800d71a:	9306      	str	r3, [sp, #24]
 800d71c:	f000 fb6c 	bl	800ddf8 <__i2b>
 800d720:	9b04      	ldr	r3, [sp, #16]
 800d722:	4605      	mov	r5, r0
 800d724:	b166      	cbz	r6, 800d740 <_dtoa_r+0x670>
 800d726:	9a06      	ldr	r2, [sp, #24]
 800d728:	2a00      	cmp	r2, #0
 800d72a:	dd09      	ble.n	800d740 <_dtoa_r+0x670>
 800d72c:	42b2      	cmp	r2, r6
 800d72e:	9905      	ldr	r1, [sp, #20]
 800d730:	bfa8      	it	ge
 800d732:	4632      	movge	r2, r6
 800d734:	1a89      	subs	r1, r1, r2
 800d736:	9105      	str	r1, [sp, #20]
 800d738:	9906      	ldr	r1, [sp, #24]
 800d73a:	1ab6      	subs	r6, r6, r2
 800d73c:	1a8a      	subs	r2, r1, r2
 800d73e:	9206      	str	r2, [sp, #24]
 800d740:	b1fb      	cbz	r3, 800d782 <_dtoa_r+0x6b2>
 800d742:	9a08      	ldr	r2, [sp, #32]
 800d744:	2a00      	cmp	r2, #0
 800d746:	f000 80bc 	beq.w	800d8c2 <_dtoa_r+0x7f2>
 800d74a:	b19c      	cbz	r4, 800d774 <_dtoa_r+0x6a4>
 800d74c:	4629      	mov	r1, r5
 800d74e:	4622      	mov	r2, r4
 800d750:	4648      	mov	r0, r9
 800d752:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d754:	f000 fc10 	bl	800df78 <__pow5mult>
 800d758:	9a01      	ldr	r2, [sp, #4]
 800d75a:	4601      	mov	r1, r0
 800d75c:	4605      	mov	r5, r0
 800d75e:	4648      	mov	r0, r9
 800d760:	f000 fb60 	bl	800de24 <__multiply>
 800d764:	9901      	ldr	r1, [sp, #4]
 800d766:	9004      	str	r0, [sp, #16]
 800d768:	4648      	mov	r0, r9
 800d76a:	f000 fa91 	bl	800dc90 <_Bfree>
 800d76e:	9a04      	ldr	r2, [sp, #16]
 800d770:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d772:	9201      	str	r2, [sp, #4]
 800d774:	1b1a      	subs	r2, r3, r4
 800d776:	d004      	beq.n	800d782 <_dtoa_r+0x6b2>
 800d778:	9901      	ldr	r1, [sp, #4]
 800d77a:	4648      	mov	r0, r9
 800d77c:	f000 fbfc 	bl	800df78 <__pow5mult>
 800d780:	9001      	str	r0, [sp, #4]
 800d782:	2101      	movs	r1, #1
 800d784:	4648      	mov	r0, r9
 800d786:	f000 fb37 	bl	800ddf8 <__i2b>
 800d78a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d78c:	4604      	mov	r4, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 81d0 	beq.w	800db34 <_dtoa_r+0xa64>
 800d794:	461a      	mov	r2, r3
 800d796:	4601      	mov	r1, r0
 800d798:	4648      	mov	r0, r9
 800d79a:	f000 fbed 	bl	800df78 <__pow5mult>
 800d79e:	9b07      	ldr	r3, [sp, #28]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	f300 8095 	bgt.w	800d8d2 <_dtoa_r+0x802>
 800d7a8:	9b02      	ldr	r3, [sp, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f040 808b 	bne.w	800d8c6 <_dtoa_r+0x7f6>
 800d7b0:	9b03      	ldr	r3, [sp, #12]
 800d7b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d7b6:	2a00      	cmp	r2, #0
 800d7b8:	f040 8087 	bne.w	800d8ca <_dtoa_r+0x7fa>
 800d7bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d7c0:	0d12      	lsrs	r2, r2, #20
 800d7c2:	0512      	lsls	r2, r2, #20
 800d7c4:	2a00      	cmp	r2, #0
 800d7c6:	f000 8082 	beq.w	800d8ce <_dtoa_r+0x7fe>
 800d7ca:	9b05      	ldr	r3, [sp, #20]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	9305      	str	r3, [sp, #20]
 800d7d0:	9b06      	ldr	r3, [sp, #24]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	9306      	str	r3, [sp, #24]
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 81af 	beq.w	800db40 <_dtoa_r+0xa70>
 800d7e2:	6922      	ldr	r2, [r4, #16]
 800d7e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d7e8:	6910      	ldr	r0, [r2, #16]
 800d7ea:	f000 fab9 	bl	800dd60 <__hi0bits>
 800d7ee:	f1c0 0020 	rsb	r0, r0, #32
 800d7f2:	9b06      	ldr	r3, [sp, #24]
 800d7f4:	4418      	add	r0, r3
 800d7f6:	f010 001f 	ands.w	r0, r0, #31
 800d7fa:	d076      	beq.n	800d8ea <_dtoa_r+0x81a>
 800d7fc:	f1c0 0220 	rsb	r2, r0, #32
 800d800:	2a04      	cmp	r2, #4
 800d802:	dd69      	ble.n	800d8d8 <_dtoa_r+0x808>
 800d804:	9b05      	ldr	r3, [sp, #20]
 800d806:	f1c0 001c 	rsb	r0, r0, #28
 800d80a:	4403      	add	r3, r0
 800d80c:	9305      	str	r3, [sp, #20]
 800d80e:	9b06      	ldr	r3, [sp, #24]
 800d810:	4406      	add	r6, r0
 800d812:	4403      	add	r3, r0
 800d814:	9306      	str	r3, [sp, #24]
 800d816:	9b05      	ldr	r3, [sp, #20]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	dd05      	ble.n	800d828 <_dtoa_r+0x758>
 800d81c:	9901      	ldr	r1, [sp, #4]
 800d81e:	461a      	mov	r2, r3
 800d820:	4648      	mov	r0, r9
 800d822:	f000 fc03 	bl	800e02c <__lshift>
 800d826:	9001      	str	r0, [sp, #4]
 800d828:	9b06      	ldr	r3, [sp, #24]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dd05      	ble.n	800d83a <_dtoa_r+0x76a>
 800d82e:	4621      	mov	r1, r4
 800d830:	461a      	mov	r2, r3
 800d832:	4648      	mov	r0, r9
 800d834:	f000 fbfa 	bl	800e02c <__lshift>
 800d838:	4604      	mov	r4, r0
 800d83a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d056      	beq.n	800d8ee <_dtoa_r+0x81e>
 800d840:	9801      	ldr	r0, [sp, #4]
 800d842:	4621      	mov	r1, r4
 800d844:	f000 fc5e 	bl	800e104 <__mcmp>
 800d848:	2800      	cmp	r0, #0
 800d84a:	da50      	bge.n	800d8ee <_dtoa_r+0x81e>
 800d84c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d850:	9304      	str	r3, [sp, #16]
 800d852:	9901      	ldr	r1, [sp, #4]
 800d854:	2300      	movs	r3, #0
 800d856:	220a      	movs	r2, #10
 800d858:	4648      	mov	r0, r9
 800d85a:	f000 fa3b 	bl	800dcd4 <__multadd>
 800d85e:	9b08      	ldr	r3, [sp, #32]
 800d860:	9001      	str	r0, [sp, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	f000 816e 	beq.w	800db44 <_dtoa_r+0xa74>
 800d868:	4629      	mov	r1, r5
 800d86a:	2300      	movs	r3, #0
 800d86c:	220a      	movs	r2, #10
 800d86e:	4648      	mov	r0, r9
 800d870:	f000 fa30 	bl	800dcd4 <__multadd>
 800d874:	f1bb 0f00 	cmp.w	fp, #0
 800d878:	4605      	mov	r5, r0
 800d87a:	dc64      	bgt.n	800d946 <_dtoa_r+0x876>
 800d87c:	9b07      	ldr	r3, [sp, #28]
 800d87e:	2b02      	cmp	r3, #2
 800d880:	dc3e      	bgt.n	800d900 <_dtoa_r+0x830>
 800d882:	e060      	b.n	800d946 <_dtoa_r+0x876>
 800d884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d886:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d88a:	e73c      	b.n	800d706 <_dtoa_r+0x636>
 800d88c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d890:	42a3      	cmp	r3, r4
 800d892:	bfbf      	itttt	lt
 800d894:	1ae2      	sublt	r2, r4, r3
 800d896:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d898:	189b      	addlt	r3, r3, r2
 800d89a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d89c:	bfae      	itee	ge
 800d89e:	1b1c      	subge	r4, r3, r4
 800d8a0:	4623      	movlt	r3, r4
 800d8a2:	2400      	movlt	r4, #0
 800d8a4:	f1ba 0f00 	cmp.w	sl, #0
 800d8a8:	bfb5      	itete	lt
 800d8aa:	9a05      	ldrlt	r2, [sp, #20]
 800d8ac:	9e05      	ldrge	r6, [sp, #20]
 800d8ae:	eba2 060a 	sublt.w	r6, r2, sl
 800d8b2:	4652      	movge	r2, sl
 800d8b4:	bfb8      	it	lt
 800d8b6:	2200      	movlt	r2, #0
 800d8b8:	e727      	b.n	800d70a <_dtoa_r+0x63a>
 800d8ba:	9e05      	ldr	r6, [sp, #20]
 800d8bc:	9d08      	ldr	r5, [sp, #32]
 800d8be:	461c      	mov	r4, r3
 800d8c0:	e730      	b.n	800d724 <_dtoa_r+0x654>
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	e758      	b.n	800d778 <_dtoa_r+0x6a8>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e786      	b.n	800d7d8 <_dtoa_r+0x708>
 800d8ca:	9b02      	ldr	r3, [sp, #8]
 800d8cc:	e784      	b.n	800d7d8 <_dtoa_r+0x708>
 800d8ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d8d0:	e783      	b.n	800d7da <_dtoa_r+0x70a>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8d6:	e784      	b.n	800d7e2 <_dtoa_r+0x712>
 800d8d8:	d09d      	beq.n	800d816 <_dtoa_r+0x746>
 800d8da:	9b05      	ldr	r3, [sp, #20]
 800d8dc:	321c      	adds	r2, #28
 800d8de:	4413      	add	r3, r2
 800d8e0:	9305      	str	r3, [sp, #20]
 800d8e2:	9b06      	ldr	r3, [sp, #24]
 800d8e4:	4416      	add	r6, r2
 800d8e6:	4413      	add	r3, r2
 800d8e8:	e794      	b.n	800d814 <_dtoa_r+0x744>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	e7f5      	b.n	800d8da <_dtoa_r+0x80a>
 800d8ee:	f1ba 0f00 	cmp.w	sl, #0
 800d8f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800d8f6:	46d3      	mov	fp, sl
 800d8f8:	dc21      	bgt.n	800d93e <_dtoa_r+0x86e>
 800d8fa:	9b07      	ldr	r3, [sp, #28]
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	dd1e      	ble.n	800d93e <_dtoa_r+0x86e>
 800d900:	f1bb 0f00 	cmp.w	fp, #0
 800d904:	f47f aeb7 	bne.w	800d676 <_dtoa_r+0x5a6>
 800d908:	4621      	mov	r1, r4
 800d90a:	465b      	mov	r3, fp
 800d90c:	2205      	movs	r2, #5
 800d90e:	4648      	mov	r0, r9
 800d910:	f000 f9e0 	bl	800dcd4 <__multadd>
 800d914:	4601      	mov	r1, r0
 800d916:	4604      	mov	r4, r0
 800d918:	9801      	ldr	r0, [sp, #4]
 800d91a:	f000 fbf3 	bl	800e104 <__mcmp>
 800d91e:	2800      	cmp	r0, #0
 800d920:	f77f aea9 	ble.w	800d676 <_dtoa_r+0x5a6>
 800d924:	463e      	mov	r6, r7
 800d926:	2331      	movs	r3, #49	@ 0x31
 800d928:	f806 3b01 	strb.w	r3, [r6], #1
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	3301      	adds	r3, #1
 800d930:	9304      	str	r3, [sp, #16]
 800d932:	e6a4      	b.n	800d67e <_dtoa_r+0x5ae>
 800d934:	f8cd 8010 	str.w	r8, [sp, #16]
 800d938:	4654      	mov	r4, sl
 800d93a:	4625      	mov	r5, r4
 800d93c:	e7f2      	b.n	800d924 <_dtoa_r+0x854>
 800d93e:	9b08      	ldr	r3, [sp, #32]
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 8103 	beq.w	800db4c <_dtoa_r+0xa7c>
 800d946:	2e00      	cmp	r6, #0
 800d948:	dd05      	ble.n	800d956 <_dtoa_r+0x886>
 800d94a:	4629      	mov	r1, r5
 800d94c:	4632      	mov	r2, r6
 800d94e:	4648      	mov	r0, r9
 800d950:	f000 fb6c 	bl	800e02c <__lshift>
 800d954:	4605      	mov	r5, r0
 800d956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d058      	beq.n	800da0e <_dtoa_r+0x93e>
 800d95c:	6869      	ldr	r1, [r5, #4]
 800d95e:	4648      	mov	r0, r9
 800d960:	f000 f956 	bl	800dc10 <_Balloc>
 800d964:	4606      	mov	r6, r0
 800d966:	b928      	cbnz	r0, 800d974 <_dtoa_r+0x8a4>
 800d968:	4b82      	ldr	r3, [pc, #520]	@ (800db74 <_dtoa_r+0xaa4>)
 800d96a:	4602      	mov	r2, r0
 800d96c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d970:	f7ff bbc7 	b.w	800d102 <_dtoa_r+0x32>
 800d974:	692a      	ldr	r2, [r5, #16]
 800d976:	3202      	adds	r2, #2
 800d978:	0092      	lsls	r2, r2, #2
 800d97a:	f105 010c 	add.w	r1, r5, #12
 800d97e:	300c      	adds	r0, #12
 800d980:	f7ff fb0f 	bl	800cfa2 <memcpy>
 800d984:	2201      	movs	r2, #1
 800d986:	4631      	mov	r1, r6
 800d988:	4648      	mov	r0, r9
 800d98a:	f000 fb4f 	bl	800e02c <__lshift>
 800d98e:	1c7b      	adds	r3, r7, #1
 800d990:	9305      	str	r3, [sp, #20]
 800d992:	eb07 030b 	add.w	r3, r7, fp
 800d996:	9309      	str	r3, [sp, #36]	@ 0x24
 800d998:	9b02      	ldr	r3, [sp, #8]
 800d99a:	f003 0301 	and.w	r3, r3, #1
 800d99e:	46a8      	mov	r8, r5
 800d9a0:	9308      	str	r3, [sp, #32]
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	9b05      	ldr	r3, [sp, #20]
 800d9a6:	9801      	ldr	r0, [sp, #4]
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800d9ae:	f7ff fb06 	bl	800cfbe <quorem>
 800d9b2:	4641      	mov	r1, r8
 800d9b4:	9002      	str	r0, [sp, #8]
 800d9b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d9ba:	9801      	ldr	r0, [sp, #4]
 800d9bc:	f000 fba2 	bl	800e104 <__mcmp>
 800d9c0:	462a      	mov	r2, r5
 800d9c2:	9006      	str	r0, [sp, #24]
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4648      	mov	r0, r9
 800d9c8:	f000 fbb8 	bl	800e13c <__mdiff>
 800d9cc:	68c2      	ldr	r2, [r0, #12]
 800d9ce:	4606      	mov	r6, r0
 800d9d0:	b9fa      	cbnz	r2, 800da12 <_dtoa_r+0x942>
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	9801      	ldr	r0, [sp, #4]
 800d9d6:	f000 fb95 	bl	800e104 <__mcmp>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	4631      	mov	r1, r6
 800d9de:	4648      	mov	r0, r9
 800d9e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d9e2:	f000 f955 	bl	800dc90 <_Bfree>
 800d9e6:	9b07      	ldr	r3, [sp, #28]
 800d9e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9ea:	9e05      	ldr	r6, [sp, #20]
 800d9ec:	ea43 0102 	orr.w	r1, r3, r2
 800d9f0:	9b08      	ldr	r3, [sp, #32]
 800d9f2:	4319      	orrs	r1, r3
 800d9f4:	d10f      	bne.n	800da16 <_dtoa_r+0x946>
 800d9f6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d9fa:	d028      	beq.n	800da4e <_dtoa_r+0x97e>
 800d9fc:	9b06      	ldr	r3, [sp, #24]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	dd02      	ble.n	800da08 <_dtoa_r+0x938>
 800da02:	9b02      	ldr	r3, [sp, #8]
 800da04:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800da08:	f88b a000 	strb.w	sl, [fp]
 800da0c:	e639      	b.n	800d682 <_dtoa_r+0x5b2>
 800da0e:	4628      	mov	r0, r5
 800da10:	e7bd      	b.n	800d98e <_dtoa_r+0x8be>
 800da12:	2201      	movs	r2, #1
 800da14:	e7e2      	b.n	800d9dc <_dtoa_r+0x90c>
 800da16:	9b06      	ldr	r3, [sp, #24]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	db04      	blt.n	800da26 <_dtoa_r+0x956>
 800da1c:	9907      	ldr	r1, [sp, #28]
 800da1e:	430b      	orrs	r3, r1
 800da20:	9908      	ldr	r1, [sp, #32]
 800da22:	430b      	orrs	r3, r1
 800da24:	d120      	bne.n	800da68 <_dtoa_r+0x998>
 800da26:	2a00      	cmp	r2, #0
 800da28:	ddee      	ble.n	800da08 <_dtoa_r+0x938>
 800da2a:	9901      	ldr	r1, [sp, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	4648      	mov	r0, r9
 800da30:	f000 fafc 	bl	800e02c <__lshift>
 800da34:	4621      	mov	r1, r4
 800da36:	9001      	str	r0, [sp, #4]
 800da38:	f000 fb64 	bl	800e104 <__mcmp>
 800da3c:	2800      	cmp	r0, #0
 800da3e:	dc03      	bgt.n	800da48 <_dtoa_r+0x978>
 800da40:	d1e2      	bne.n	800da08 <_dtoa_r+0x938>
 800da42:	f01a 0f01 	tst.w	sl, #1
 800da46:	d0df      	beq.n	800da08 <_dtoa_r+0x938>
 800da48:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800da4c:	d1d9      	bne.n	800da02 <_dtoa_r+0x932>
 800da4e:	2339      	movs	r3, #57	@ 0x39
 800da50:	f88b 3000 	strb.w	r3, [fp]
 800da54:	4633      	mov	r3, r6
 800da56:	461e      	mov	r6, r3
 800da58:	3b01      	subs	r3, #1
 800da5a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da5e:	2a39      	cmp	r2, #57	@ 0x39
 800da60:	d053      	beq.n	800db0a <_dtoa_r+0xa3a>
 800da62:	3201      	adds	r2, #1
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	e60c      	b.n	800d682 <_dtoa_r+0x5b2>
 800da68:	2a00      	cmp	r2, #0
 800da6a:	dd07      	ble.n	800da7c <_dtoa_r+0x9ac>
 800da6c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800da70:	d0ed      	beq.n	800da4e <_dtoa_r+0x97e>
 800da72:	f10a 0301 	add.w	r3, sl, #1
 800da76:	f88b 3000 	strb.w	r3, [fp]
 800da7a:	e602      	b.n	800d682 <_dtoa_r+0x5b2>
 800da7c:	9b05      	ldr	r3, [sp, #20]
 800da7e:	9a05      	ldr	r2, [sp, #20]
 800da80:	f803 ac01 	strb.w	sl, [r3, #-1]
 800da84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da86:	4293      	cmp	r3, r2
 800da88:	d029      	beq.n	800dade <_dtoa_r+0xa0e>
 800da8a:	9901      	ldr	r1, [sp, #4]
 800da8c:	2300      	movs	r3, #0
 800da8e:	220a      	movs	r2, #10
 800da90:	4648      	mov	r0, r9
 800da92:	f000 f91f 	bl	800dcd4 <__multadd>
 800da96:	45a8      	cmp	r8, r5
 800da98:	9001      	str	r0, [sp, #4]
 800da9a:	f04f 0300 	mov.w	r3, #0
 800da9e:	f04f 020a 	mov.w	r2, #10
 800daa2:	4641      	mov	r1, r8
 800daa4:	4648      	mov	r0, r9
 800daa6:	d107      	bne.n	800dab8 <_dtoa_r+0x9e8>
 800daa8:	f000 f914 	bl	800dcd4 <__multadd>
 800daac:	4680      	mov	r8, r0
 800daae:	4605      	mov	r5, r0
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	3301      	adds	r3, #1
 800dab4:	9305      	str	r3, [sp, #20]
 800dab6:	e775      	b.n	800d9a4 <_dtoa_r+0x8d4>
 800dab8:	f000 f90c 	bl	800dcd4 <__multadd>
 800dabc:	4629      	mov	r1, r5
 800dabe:	4680      	mov	r8, r0
 800dac0:	2300      	movs	r3, #0
 800dac2:	220a      	movs	r2, #10
 800dac4:	4648      	mov	r0, r9
 800dac6:	f000 f905 	bl	800dcd4 <__multadd>
 800daca:	4605      	mov	r5, r0
 800dacc:	e7f0      	b.n	800dab0 <_dtoa_r+0x9e0>
 800dace:	f1bb 0f00 	cmp.w	fp, #0
 800dad2:	bfcc      	ite	gt
 800dad4:	465e      	movgt	r6, fp
 800dad6:	2601      	movle	r6, #1
 800dad8:	443e      	add	r6, r7
 800dada:	f04f 0800 	mov.w	r8, #0
 800dade:	9901      	ldr	r1, [sp, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	4648      	mov	r0, r9
 800dae4:	f000 faa2 	bl	800e02c <__lshift>
 800dae8:	4621      	mov	r1, r4
 800daea:	9001      	str	r0, [sp, #4]
 800daec:	f000 fb0a 	bl	800e104 <__mcmp>
 800daf0:	2800      	cmp	r0, #0
 800daf2:	dcaf      	bgt.n	800da54 <_dtoa_r+0x984>
 800daf4:	d102      	bne.n	800dafc <_dtoa_r+0xa2c>
 800daf6:	f01a 0f01 	tst.w	sl, #1
 800dafa:	d1ab      	bne.n	800da54 <_dtoa_r+0x984>
 800dafc:	4633      	mov	r3, r6
 800dafe:	461e      	mov	r6, r3
 800db00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db04:	2a30      	cmp	r2, #48	@ 0x30
 800db06:	d0fa      	beq.n	800dafe <_dtoa_r+0xa2e>
 800db08:	e5bb      	b.n	800d682 <_dtoa_r+0x5b2>
 800db0a:	429f      	cmp	r7, r3
 800db0c:	d1a3      	bne.n	800da56 <_dtoa_r+0x986>
 800db0e:	9b04      	ldr	r3, [sp, #16]
 800db10:	3301      	adds	r3, #1
 800db12:	9304      	str	r3, [sp, #16]
 800db14:	2331      	movs	r3, #49	@ 0x31
 800db16:	703b      	strb	r3, [r7, #0]
 800db18:	e5b3      	b.n	800d682 <_dtoa_r+0x5b2>
 800db1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db1c:	4f16      	ldr	r7, [pc, #88]	@ (800db78 <_dtoa_r+0xaa8>)
 800db1e:	b11b      	cbz	r3, 800db28 <_dtoa_r+0xa58>
 800db20:	f107 0308 	add.w	r3, r7, #8
 800db24:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	4638      	mov	r0, r7
 800db2a:	b011      	add	sp, #68	@ 0x44
 800db2c:	ecbd 8b02 	vpop	{d8}
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db34:	9b07      	ldr	r3, [sp, #28]
 800db36:	2b01      	cmp	r3, #1
 800db38:	f77f ae36 	ble.w	800d7a8 <_dtoa_r+0x6d8>
 800db3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db40:	2001      	movs	r0, #1
 800db42:	e656      	b.n	800d7f2 <_dtoa_r+0x722>
 800db44:	f1bb 0f00 	cmp.w	fp, #0
 800db48:	f77f aed7 	ble.w	800d8fa <_dtoa_r+0x82a>
 800db4c:	463e      	mov	r6, r7
 800db4e:	9801      	ldr	r0, [sp, #4]
 800db50:	4621      	mov	r1, r4
 800db52:	f7ff fa34 	bl	800cfbe <quorem>
 800db56:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800db5a:	f806 ab01 	strb.w	sl, [r6], #1
 800db5e:	1bf2      	subs	r2, r6, r7
 800db60:	4593      	cmp	fp, r2
 800db62:	ddb4      	ble.n	800dace <_dtoa_r+0x9fe>
 800db64:	9901      	ldr	r1, [sp, #4]
 800db66:	2300      	movs	r3, #0
 800db68:	220a      	movs	r2, #10
 800db6a:	4648      	mov	r0, r9
 800db6c:	f000 f8b2 	bl	800dcd4 <__multadd>
 800db70:	9001      	str	r0, [sp, #4]
 800db72:	e7ec      	b.n	800db4e <_dtoa_r+0xa7e>
 800db74:	080114b4 	.word	0x080114b4
 800db78:	08011438 	.word	0x08011438

0800db7c <_free_r>:
 800db7c:	b538      	push	{r3, r4, r5, lr}
 800db7e:	4605      	mov	r5, r0
 800db80:	2900      	cmp	r1, #0
 800db82:	d041      	beq.n	800dc08 <_free_r+0x8c>
 800db84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db88:	1f0c      	subs	r4, r1, #4
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	bfb8      	it	lt
 800db8e:	18e4      	addlt	r4, r4, r3
 800db90:	f7fe fc0e 	bl	800c3b0 <__malloc_lock>
 800db94:	4a1d      	ldr	r2, [pc, #116]	@ (800dc0c <_free_r+0x90>)
 800db96:	6813      	ldr	r3, [r2, #0]
 800db98:	b933      	cbnz	r3, 800dba8 <_free_r+0x2c>
 800db9a:	6063      	str	r3, [r4, #4]
 800db9c:	6014      	str	r4, [r2, #0]
 800db9e:	4628      	mov	r0, r5
 800dba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dba4:	f7fe bc0a 	b.w	800c3bc <__malloc_unlock>
 800dba8:	42a3      	cmp	r3, r4
 800dbaa:	d908      	bls.n	800dbbe <_free_r+0x42>
 800dbac:	6820      	ldr	r0, [r4, #0]
 800dbae:	1821      	adds	r1, r4, r0
 800dbb0:	428b      	cmp	r3, r1
 800dbb2:	bf01      	itttt	eq
 800dbb4:	6819      	ldreq	r1, [r3, #0]
 800dbb6:	685b      	ldreq	r3, [r3, #4]
 800dbb8:	1809      	addeq	r1, r1, r0
 800dbba:	6021      	streq	r1, [r4, #0]
 800dbbc:	e7ed      	b.n	800db9a <_free_r+0x1e>
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	b10b      	cbz	r3, 800dbc8 <_free_r+0x4c>
 800dbc4:	42a3      	cmp	r3, r4
 800dbc6:	d9fa      	bls.n	800dbbe <_free_r+0x42>
 800dbc8:	6811      	ldr	r1, [r2, #0]
 800dbca:	1850      	adds	r0, r2, r1
 800dbcc:	42a0      	cmp	r0, r4
 800dbce:	d10b      	bne.n	800dbe8 <_free_r+0x6c>
 800dbd0:	6820      	ldr	r0, [r4, #0]
 800dbd2:	4401      	add	r1, r0
 800dbd4:	1850      	adds	r0, r2, r1
 800dbd6:	4283      	cmp	r3, r0
 800dbd8:	6011      	str	r1, [r2, #0]
 800dbda:	d1e0      	bne.n	800db9e <_free_r+0x22>
 800dbdc:	6818      	ldr	r0, [r3, #0]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	6053      	str	r3, [r2, #4]
 800dbe2:	4408      	add	r0, r1
 800dbe4:	6010      	str	r0, [r2, #0]
 800dbe6:	e7da      	b.n	800db9e <_free_r+0x22>
 800dbe8:	d902      	bls.n	800dbf0 <_free_r+0x74>
 800dbea:	230c      	movs	r3, #12
 800dbec:	602b      	str	r3, [r5, #0]
 800dbee:	e7d6      	b.n	800db9e <_free_r+0x22>
 800dbf0:	6820      	ldr	r0, [r4, #0]
 800dbf2:	1821      	adds	r1, r4, r0
 800dbf4:	428b      	cmp	r3, r1
 800dbf6:	bf04      	itt	eq
 800dbf8:	6819      	ldreq	r1, [r3, #0]
 800dbfa:	685b      	ldreq	r3, [r3, #4]
 800dbfc:	6063      	str	r3, [r4, #4]
 800dbfe:	bf04      	itt	eq
 800dc00:	1809      	addeq	r1, r1, r0
 800dc02:	6021      	streq	r1, [r4, #0]
 800dc04:	6054      	str	r4, [r2, #4]
 800dc06:	e7ca      	b.n	800db9e <_free_r+0x22>
 800dc08:	bd38      	pop	{r3, r4, r5, pc}
 800dc0a:	bf00      	nop
 800dc0c:	240052bc 	.word	0x240052bc

0800dc10 <_Balloc>:
 800dc10:	b570      	push	{r4, r5, r6, lr}
 800dc12:	69c6      	ldr	r6, [r0, #28]
 800dc14:	4604      	mov	r4, r0
 800dc16:	460d      	mov	r5, r1
 800dc18:	b976      	cbnz	r6, 800dc38 <_Balloc+0x28>
 800dc1a:	2010      	movs	r0, #16
 800dc1c:	f7fe fb1e 	bl	800c25c <malloc>
 800dc20:	4602      	mov	r2, r0
 800dc22:	61e0      	str	r0, [r4, #28]
 800dc24:	b920      	cbnz	r0, 800dc30 <_Balloc+0x20>
 800dc26:	4b18      	ldr	r3, [pc, #96]	@ (800dc88 <_Balloc+0x78>)
 800dc28:	4818      	ldr	r0, [pc, #96]	@ (800dc8c <_Balloc+0x7c>)
 800dc2a:	216b      	movs	r1, #107	@ 0x6b
 800dc2c:	f000 fd90 	bl	800e750 <__assert_func>
 800dc30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc34:	6006      	str	r6, [r0, #0]
 800dc36:	60c6      	str	r6, [r0, #12]
 800dc38:	69e6      	ldr	r6, [r4, #28]
 800dc3a:	68f3      	ldr	r3, [r6, #12]
 800dc3c:	b183      	cbz	r3, 800dc60 <_Balloc+0x50>
 800dc3e:	69e3      	ldr	r3, [r4, #28]
 800dc40:	68db      	ldr	r3, [r3, #12]
 800dc42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc46:	b9b8      	cbnz	r0, 800dc78 <_Balloc+0x68>
 800dc48:	2101      	movs	r1, #1
 800dc4a:	fa01 f605 	lsl.w	r6, r1, r5
 800dc4e:	1d72      	adds	r2, r6, #5
 800dc50:	0092      	lsls	r2, r2, #2
 800dc52:	4620      	mov	r0, r4
 800dc54:	f000 fd9a 	bl	800e78c <_calloc_r>
 800dc58:	b160      	cbz	r0, 800dc74 <_Balloc+0x64>
 800dc5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc5e:	e00e      	b.n	800dc7e <_Balloc+0x6e>
 800dc60:	2221      	movs	r2, #33	@ 0x21
 800dc62:	2104      	movs	r1, #4
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 fd91 	bl	800e78c <_calloc_r>
 800dc6a:	69e3      	ldr	r3, [r4, #28]
 800dc6c:	60f0      	str	r0, [r6, #12]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1e4      	bne.n	800dc3e <_Balloc+0x2e>
 800dc74:	2000      	movs	r0, #0
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	6802      	ldr	r2, [r0, #0]
 800dc7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc84:	e7f7      	b.n	800dc76 <_Balloc+0x66>
 800dc86:	bf00      	nop
 800dc88:	08011445 	.word	0x08011445
 800dc8c:	080114c5 	.word	0x080114c5

0800dc90 <_Bfree>:
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	69c6      	ldr	r6, [r0, #28]
 800dc94:	4605      	mov	r5, r0
 800dc96:	460c      	mov	r4, r1
 800dc98:	b976      	cbnz	r6, 800dcb8 <_Bfree+0x28>
 800dc9a:	2010      	movs	r0, #16
 800dc9c:	f7fe fade 	bl	800c25c <malloc>
 800dca0:	4602      	mov	r2, r0
 800dca2:	61e8      	str	r0, [r5, #28]
 800dca4:	b920      	cbnz	r0, 800dcb0 <_Bfree+0x20>
 800dca6:	4b09      	ldr	r3, [pc, #36]	@ (800dccc <_Bfree+0x3c>)
 800dca8:	4809      	ldr	r0, [pc, #36]	@ (800dcd0 <_Bfree+0x40>)
 800dcaa:	218f      	movs	r1, #143	@ 0x8f
 800dcac:	f000 fd50 	bl	800e750 <__assert_func>
 800dcb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcb4:	6006      	str	r6, [r0, #0]
 800dcb6:	60c6      	str	r6, [r0, #12]
 800dcb8:	b13c      	cbz	r4, 800dcca <_Bfree+0x3a>
 800dcba:	69eb      	ldr	r3, [r5, #28]
 800dcbc:	6862      	ldr	r2, [r4, #4]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dcc4:	6021      	str	r1, [r4, #0]
 800dcc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dcca:	bd70      	pop	{r4, r5, r6, pc}
 800dccc:	08011445 	.word	0x08011445
 800dcd0:	080114c5 	.word	0x080114c5

0800dcd4 <__multadd>:
 800dcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd8:	690d      	ldr	r5, [r1, #16]
 800dcda:	4607      	mov	r7, r0
 800dcdc:	460c      	mov	r4, r1
 800dcde:	461e      	mov	r6, r3
 800dce0:	f101 0c14 	add.w	ip, r1, #20
 800dce4:	2000      	movs	r0, #0
 800dce6:	f8dc 3000 	ldr.w	r3, [ip]
 800dcea:	b299      	uxth	r1, r3
 800dcec:	fb02 6101 	mla	r1, r2, r1, r6
 800dcf0:	0c1e      	lsrs	r6, r3, #16
 800dcf2:	0c0b      	lsrs	r3, r1, #16
 800dcf4:	fb02 3306 	mla	r3, r2, r6, r3
 800dcf8:	b289      	uxth	r1, r1
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd00:	4285      	cmp	r5, r0
 800dd02:	f84c 1b04 	str.w	r1, [ip], #4
 800dd06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd0a:	dcec      	bgt.n	800dce6 <__multadd+0x12>
 800dd0c:	b30e      	cbz	r6, 800dd52 <__multadd+0x7e>
 800dd0e:	68a3      	ldr	r3, [r4, #8]
 800dd10:	42ab      	cmp	r3, r5
 800dd12:	dc19      	bgt.n	800dd48 <__multadd+0x74>
 800dd14:	6861      	ldr	r1, [r4, #4]
 800dd16:	4638      	mov	r0, r7
 800dd18:	3101      	adds	r1, #1
 800dd1a:	f7ff ff79 	bl	800dc10 <_Balloc>
 800dd1e:	4680      	mov	r8, r0
 800dd20:	b928      	cbnz	r0, 800dd2e <__multadd+0x5a>
 800dd22:	4602      	mov	r2, r0
 800dd24:	4b0c      	ldr	r3, [pc, #48]	@ (800dd58 <__multadd+0x84>)
 800dd26:	480d      	ldr	r0, [pc, #52]	@ (800dd5c <__multadd+0x88>)
 800dd28:	21ba      	movs	r1, #186	@ 0xba
 800dd2a:	f000 fd11 	bl	800e750 <__assert_func>
 800dd2e:	6922      	ldr	r2, [r4, #16]
 800dd30:	3202      	adds	r2, #2
 800dd32:	f104 010c 	add.w	r1, r4, #12
 800dd36:	0092      	lsls	r2, r2, #2
 800dd38:	300c      	adds	r0, #12
 800dd3a:	f7ff f932 	bl	800cfa2 <memcpy>
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4638      	mov	r0, r7
 800dd42:	f7ff ffa5 	bl	800dc90 <_Bfree>
 800dd46:	4644      	mov	r4, r8
 800dd48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd4c:	3501      	adds	r5, #1
 800dd4e:	615e      	str	r6, [r3, #20]
 800dd50:	6125      	str	r5, [r4, #16]
 800dd52:	4620      	mov	r0, r4
 800dd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd58:	080114b4 	.word	0x080114b4
 800dd5c:	080114c5 	.word	0x080114c5

0800dd60 <__hi0bits>:
 800dd60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dd64:	4603      	mov	r3, r0
 800dd66:	bf36      	itet	cc
 800dd68:	0403      	lslcc	r3, r0, #16
 800dd6a:	2000      	movcs	r0, #0
 800dd6c:	2010      	movcc	r0, #16
 800dd6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd72:	bf3c      	itt	cc
 800dd74:	021b      	lslcc	r3, r3, #8
 800dd76:	3008      	addcc	r0, #8
 800dd78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd7c:	bf3c      	itt	cc
 800dd7e:	011b      	lslcc	r3, r3, #4
 800dd80:	3004      	addcc	r0, #4
 800dd82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd86:	bf3c      	itt	cc
 800dd88:	009b      	lslcc	r3, r3, #2
 800dd8a:	3002      	addcc	r0, #2
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	db05      	blt.n	800dd9c <__hi0bits+0x3c>
 800dd90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dd94:	f100 0001 	add.w	r0, r0, #1
 800dd98:	bf08      	it	eq
 800dd9a:	2020      	moveq	r0, #32
 800dd9c:	4770      	bx	lr

0800dd9e <__lo0bits>:
 800dd9e:	6803      	ldr	r3, [r0, #0]
 800dda0:	4602      	mov	r2, r0
 800dda2:	f013 0007 	ands.w	r0, r3, #7
 800dda6:	d00b      	beq.n	800ddc0 <__lo0bits+0x22>
 800dda8:	07d9      	lsls	r1, r3, #31
 800ddaa:	d421      	bmi.n	800ddf0 <__lo0bits+0x52>
 800ddac:	0798      	lsls	r0, r3, #30
 800ddae:	bf49      	itett	mi
 800ddb0:	085b      	lsrmi	r3, r3, #1
 800ddb2:	089b      	lsrpl	r3, r3, #2
 800ddb4:	2001      	movmi	r0, #1
 800ddb6:	6013      	strmi	r3, [r2, #0]
 800ddb8:	bf5c      	itt	pl
 800ddba:	6013      	strpl	r3, [r2, #0]
 800ddbc:	2002      	movpl	r0, #2
 800ddbe:	4770      	bx	lr
 800ddc0:	b299      	uxth	r1, r3
 800ddc2:	b909      	cbnz	r1, 800ddc8 <__lo0bits+0x2a>
 800ddc4:	0c1b      	lsrs	r3, r3, #16
 800ddc6:	2010      	movs	r0, #16
 800ddc8:	b2d9      	uxtb	r1, r3
 800ddca:	b909      	cbnz	r1, 800ddd0 <__lo0bits+0x32>
 800ddcc:	3008      	adds	r0, #8
 800ddce:	0a1b      	lsrs	r3, r3, #8
 800ddd0:	0719      	lsls	r1, r3, #28
 800ddd2:	bf04      	itt	eq
 800ddd4:	091b      	lsreq	r3, r3, #4
 800ddd6:	3004      	addeq	r0, #4
 800ddd8:	0799      	lsls	r1, r3, #30
 800ddda:	bf04      	itt	eq
 800dddc:	089b      	lsreq	r3, r3, #2
 800ddde:	3002      	addeq	r0, #2
 800dde0:	07d9      	lsls	r1, r3, #31
 800dde2:	d403      	bmi.n	800ddec <__lo0bits+0x4e>
 800dde4:	085b      	lsrs	r3, r3, #1
 800dde6:	f100 0001 	add.w	r0, r0, #1
 800ddea:	d003      	beq.n	800ddf4 <__lo0bits+0x56>
 800ddec:	6013      	str	r3, [r2, #0]
 800ddee:	4770      	bx	lr
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	4770      	bx	lr
 800ddf4:	2020      	movs	r0, #32
 800ddf6:	4770      	bx	lr

0800ddf8 <__i2b>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	f7ff ff07 	bl	800dc10 <_Balloc>
 800de02:	4602      	mov	r2, r0
 800de04:	b928      	cbnz	r0, 800de12 <__i2b+0x1a>
 800de06:	4b05      	ldr	r3, [pc, #20]	@ (800de1c <__i2b+0x24>)
 800de08:	4805      	ldr	r0, [pc, #20]	@ (800de20 <__i2b+0x28>)
 800de0a:	f240 1145 	movw	r1, #325	@ 0x145
 800de0e:	f000 fc9f 	bl	800e750 <__assert_func>
 800de12:	2301      	movs	r3, #1
 800de14:	6144      	str	r4, [r0, #20]
 800de16:	6103      	str	r3, [r0, #16]
 800de18:	bd10      	pop	{r4, pc}
 800de1a:	bf00      	nop
 800de1c:	080114b4 	.word	0x080114b4
 800de20:	080114c5 	.word	0x080114c5

0800de24 <__multiply>:
 800de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de28:	4614      	mov	r4, r2
 800de2a:	690a      	ldr	r2, [r1, #16]
 800de2c:	6923      	ldr	r3, [r4, #16]
 800de2e:	429a      	cmp	r2, r3
 800de30:	bfa8      	it	ge
 800de32:	4623      	movge	r3, r4
 800de34:	460f      	mov	r7, r1
 800de36:	bfa4      	itt	ge
 800de38:	460c      	movge	r4, r1
 800de3a:	461f      	movge	r7, r3
 800de3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800de40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800de44:	68a3      	ldr	r3, [r4, #8]
 800de46:	6861      	ldr	r1, [r4, #4]
 800de48:	eb0a 0609 	add.w	r6, sl, r9
 800de4c:	42b3      	cmp	r3, r6
 800de4e:	b085      	sub	sp, #20
 800de50:	bfb8      	it	lt
 800de52:	3101      	addlt	r1, #1
 800de54:	f7ff fedc 	bl	800dc10 <_Balloc>
 800de58:	b930      	cbnz	r0, 800de68 <__multiply+0x44>
 800de5a:	4602      	mov	r2, r0
 800de5c:	4b44      	ldr	r3, [pc, #272]	@ (800df70 <__multiply+0x14c>)
 800de5e:	4845      	ldr	r0, [pc, #276]	@ (800df74 <__multiply+0x150>)
 800de60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800de64:	f000 fc74 	bl	800e750 <__assert_func>
 800de68:	f100 0514 	add.w	r5, r0, #20
 800de6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de70:	462b      	mov	r3, r5
 800de72:	2200      	movs	r2, #0
 800de74:	4543      	cmp	r3, r8
 800de76:	d321      	bcc.n	800debc <__multiply+0x98>
 800de78:	f107 0114 	add.w	r1, r7, #20
 800de7c:	f104 0214 	add.w	r2, r4, #20
 800de80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800de84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800de88:	9302      	str	r3, [sp, #8]
 800de8a:	1b13      	subs	r3, r2, r4
 800de8c:	3b15      	subs	r3, #21
 800de8e:	f023 0303 	bic.w	r3, r3, #3
 800de92:	3304      	adds	r3, #4
 800de94:	f104 0715 	add.w	r7, r4, #21
 800de98:	42ba      	cmp	r2, r7
 800de9a:	bf38      	it	cc
 800de9c:	2304      	movcc	r3, #4
 800de9e:	9301      	str	r3, [sp, #4]
 800dea0:	9b02      	ldr	r3, [sp, #8]
 800dea2:	9103      	str	r1, [sp, #12]
 800dea4:	428b      	cmp	r3, r1
 800dea6:	d80c      	bhi.n	800dec2 <__multiply+0x9e>
 800dea8:	2e00      	cmp	r6, #0
 800deaa:	dd03      	ble.n	800deb4 <__multiply+0x90>
 800deac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d05b      	beq.n	800df6c <__multiply+0x148>
 800deb4:	6106      	str	r6, [r0, #16]
 800deb6:	b005      	add	sp, #20
 800deb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800debc:	f843 2b04 	str.w	r2, [r3], #4
 800dec0:	e7d8      	b.n	800de74 <__multiply+0x50>
 800dec2:	f8b1 a000 	ldrh.w	sl, [r1]
 800dec6:	f1ba 0f00 	cmp.w	sl, #0
 800deca:	d024      	beq.n	800df16 <__multiply+0xf2>
 800decc:	f104 0e14 	add.w	lr, r4, #20
 800ded0:	46a9      	mov	r9, r5
 800ded2:	f04f 0c00 	mov.w	ip, #0
 800ded6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800deda:	f8d9 3000 	ldr.w	r3, [r9]
 800dede:	fa1f fb87 	uxth.w	fp, r7
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	fb0a 330b 	mla	r3, sl, fp, r3
 800dee8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800deec:	f8d9 7000 	ldr.w	r7, [r9]
 800def0:	4463      	add	r3, ip
 800def2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800def6:	fb0a c70b 	mla	r7, sl, fp, ip
 800defa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800defe:	b29b      	uxth	r3, r3
 800df00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df04:	4572      	cmp	r2, lr
 800df06:	f849 3b04 	str.w	r3, [r9], #4
 800df0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800df0e:	d8e2      	bhi.n	800ded6 <__multiply+0xb2>
 800df10:	9b01      	ldr	r3, [sp, #4]
 800df12:	f845 c003 	str.w	ip, [r5, r3]
 800df16:	9b03      	ldr	r3, [sp, #12]
 800df18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800df1c:	3104      	adds	r1, #4
 800df1e:	f1b9 0f00 	cmp.w	r9, #0
 800df22:	d021      	beq.n	800df68 <__multiply+0x144>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	f104 0c14 	add.w	ip, r4, #20
 800df2a:	46ae      	mov	lr, r5
 800df2c:	f04f 0a00 	mov.w	sl, #0
 800df30:	f8bc b000 	ldrh.w	fp, [ip]
 800df34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800df38:	fb09 770b 	mla	r7, r9, fp, r7
 800df3c:	4457      	add	r7, sl
 800df3e:	b29b      	uxth	r3, r3
 800df40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800df44:	f84e 3b04 	str.w	r3, [lr], #4
 800df48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df50:	f8be 3000 	ldrh.w	r3, [lr]
 800df54:	fb09 330a 	mla	r3, r9, sl, r3
 800df58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800df5c:	4562      	cmp	r2, ip
 800df5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df62:	d8e5      	bhi.n	800df30 <__multiply+0x10c>
 800df64:	9f01      	ldr	r7, [sp, #4]
 800df66:	51eb      	str	r3, [r5, r7]
 800df68:	3504      	adds	r5, #4
 800df6a:	e799      	b.n	800dea0 <__multiply+0x7c>
 800df6c:	3e01      	subs	r6, #1
 800df6e:	e79b      	b.n	800dea8 <__multiply+0x84>
 800df70:	080114b4 	.word	0x080114b4
 800df74:	080114c5 	.word	0x080114c5

0800df78 <__pow5mult>:
 800df78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df7c:	4615      	mov	r5, r2
 800df7e:	f012 0203 	ands.w	r2, r2, #3
 800df82:	4607      	mov	r7, r0
 800df84:	460e      	mov	r6, r1
 800df86:	d007      	beq.n	800df98 <__pow5mult+0x20>
 800df88:	4c25      	ldr	r4, [pc, #148]	@ (800e020 <__pow5mult+0xa8>)
 800df8a:	3a01      	subs	r2, #1
 800df8c:	2300      	movs	r3, #0
 800df8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df92:	f7ff fe9f 	bl	800dcd4 <__multadd>
 800df96:	4606      	mov	r6, r0
 800df98:	10ad      	asrs	r5, r5, #2
 800df9a:	d03d      	beq.n	800e018 <__pow5mult+0xa0>
 800df9c:	69fc      	ldr	r4, [r7, #28]
 800df9e:	b97c      	cbnz	r4, 800dfc0 <__pow5mult+0x48>
 800dfa0:	2010      	movs	r0, #16
 800dfa2:	f7fe f95b 	bl	800c25c <malloc>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	61f8      	str	r0, [r7, #28]
 800dfaa:	b928      	cbnz	r0, 800dfb8 <__pow5mult+0x40>
 800dfac:	4b1d      	ldr	r3, [pc, #116]	@ (800e024 <__pow5mult+0xac>)
 800dfae:	481e      	ldr	r0, [pc, #120]	@ (800e028 <__pow5mult+0xb0>)
 800dfb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dfb4:	f000 fbcc 	bl	800e750 <__assert_func>
 800dfb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfbc:	6004      	str	r4, [r0, #0]
 800dfbe:	60c4      	str	r4, [r0, #12]
 800dfc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dfc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfc8:	b94c      	cbnz	r4, 800dfde <__pow5mult+0x66>
 800dfca:	f240 2171 	movw	r1, #625	@ 0x271
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f7ff ff12 	bl	800ddf8 <__i2b>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfda:	4604      	mov	r4, r0
 800dfdc:	6003      	str	r3, [r0, #0]
 800dfde:	f04f 0900 	mov.w	r9, #0
 800dfe2:	07eb      	lsls	r3, r5, #31
 800dfe4:	d50a      	bpl.n	800dffc <__pow5mult+0x84>
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	4622      	mov	r2, r4
 800dfea:	4638      	mov	r0, r7
 800dfec:	f7ff ff1a 	bl	800de24 <__multiply>
 800dff0:	4631      	mov	r1, r6
 800dff2:	4680      	mov	r8, r0
 800dff4:	4638      	mov	r0, r7
 800dff6:	f7ff fe4b 	bl	800dc90 <_Bfree>
 800dffa:	4646      	mov	r6, r8
 800dffc:	106d      	asrs	r5, r5, #1
 800dffe:	d00b      	beq.n	800e018 <__pow5mult+0xa0>
 800e000:	6820      	ldr	r0, [r4, #0]
 800e002:	b938      	cbnz	r0, 800e014 <__pow5mult+0x9c>
 800e004:	4622      	mov	r2, r4
 800e006:	4621      	mov	r1, r4
 800e008:	4638      	mov	r0, r7
 800e00a:	f7ff ff0b 	bl	800de24 <__multiply>
 800e00e:	6020      	str	r0, [r4, #0]
 800e010:	f8c0 9000 	str.w	r9, [r0]
 800e014:	4604      	mov	r4, r0
 800e016:	e7e4      	b.n	800dfe2 <__pow5mult+0x6a>
 800e018:	4630      	mov	r0, r6
 800e01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e01e:	bf00      	nop
 800e020:	08011520 	.word	0x08011520
 800e024:	08011445 	.word	0x08011445
 800e028:	080114c5 	.word	0x080114c5

0800e02c <__lshift>:
 800e02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e030:	460c      	mov	r4, r1
 800e032:	6849      	ldr	r1, [r1, #4]
 800e034:	6923      	ldr	r3, [r4, #16]
 800e036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	4607      	mov	r7, r0
 800e03e:	4691      	mov	r9, r2
 800e040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e044:	f108 0601 	add.w	r6, r8, #1
 800e048:	42b3      	cmp	r3, r6
 800e04a:	db0b      	blt.n	800e064 <__lshift+0x38>
 800e04c:	4638      	mov	r0, r7
 800e04e:	f7ff fddf 	bl	800dc10 <_Balloc>
 800e052:	4605      	mov	r5, r0
 800e054:	b948      	cbnz	r0, 800e06a <__lshift+0x3e>
 800e056:	4602      	mov	r2, r0
 800e058:	4b28      	ldr	r3, [pc, #160]	@ (800e0fc <__lshift+0xd0>)
 800e05a:	4829      	ldr	r0, [pc, #164]	@ (800e100 <__lshift+0xd4>)
 800e05c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e060:	f000 fb76 	bl	800e750 <__assert_func>
 800e064:	3101      	adds	r1, #1
 800e066:	005b      	lsls	r3, r3, #1
 800e068:	e7ee      	b.n	800e048 <__lshift+0x1c>
 800e06a:	2300      	movs	r3, #0
 800e06c:	f100 0114 	add.w	r1, r0, #20
 800e070:	f100 0210 	add.w	r2, r0, #16
 800e074:	4618      	mov	r0, r3
 800e076:	4553      	cmp	r3, sl
 800e078:	db33      	blt.n	800e0e2 <__lshift+0xb6>
 800e07a:	6920      	ldr	r0, [r4, #16]
 800e07c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e080:	f104 0314 	add.w	r3, r4, #20
 800e084:	f019 091f 	ands.w	r9, r9, #31
 800e088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e08c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e090:	d02b      	beq.n	800e0ea <__lshift+0xbe>
 800e092:	f1c9 0e20 	rsb	lr, r9, #32
 800e096:	468a      	mov	sl, r1
 800e098:	2200      	movs	r2, #0
 800e09a:	6818      	ldr	r0, [r3, #0]
 800e09c:	fa00 f009 	lsl.w	r0, r0, r9
 800e0a0:	4310      	orrs	r0, r2
 800e0a2:	f84a 0b04 	str.w	r0, [sl], #4
 800e0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0aa:	459c      	cmp	ip, r3
 800e0ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0b0:	d8f3      	bhi.n	800e09a <__lshift+0x6e>
 800e0b2:	ebac 0304 	sub.w	r3, ip, r4
 800e0b6:	3b15      	subs	r3, #21
 800e0b8:	f023 0303 	bic.w	r3, r3, #3
 800e0bc:	3304      	adds	r3, #4
 800e0be:	f104 0015 	add.w	r0, r4, #21
 800e0c2:	4584      	cmp	ip, r0
 800e0c4:	bf38      	it	cc
 800e0c6:	2304      	movcc	r3, #4
 800e0c8:	50ca      	str	r2, [r1, r3]
 800e0ca:	b10a      	cbz	r2, 800e0d0 <__lshift+0xa4>
 800e0cc:	f108 0602 	add.w	r6, r8, #2
 800e0d0:	3e01      	subs	r6, #1
 800e0d2:	4638      	mov	r0, r7
 800e0d4:	612e      	str	r6, [r5, #16]
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	f7ff fdda 	bl	800dc90 <_Bfree>
 800e0dc:	4628      	mov	r0, r5
 800e0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	e7c5      	b.n	800e076 <__lshift+0x4a>
 800e0ea:	3904      	subs	r1, #4
 800e0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0f4:	459c      	cmp	ip, r3
 800e0f6:	d8f9      	bhi.n	800e0ec <__lshift+0xc0>
 800e0f8:	e7ea      	b.n	800e0d0 <__lshift+0xa4>
 800e0fa:	bf00      	nop
 800e0fc:	080114b4 	.word	0x080114b4
 800e100:	080114c5 	.word	0x080114c5

0800e104 <__mcmp>:
 800e104:	690a      	ldr	r2, [r1, #16]
 800e106:	4603      	mov	r3, r0
 800e108:	6900      	ldr	r0, [r0, #16]
 800e10a:	1a80      	subs	r0, r0, r2
 800e10c:	b530      	push	{r4, r5, lr}
 800e10e:	d10e      	bne.n	800e12e <__mcmp+0x2a>
 800e110:	3314      	adds	r3, #20
 800e112:	3114      	adds	r1, #20
 800e114:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e118:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e11c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e124:	4295      	cmp	r5, r2
 800e126:	d003      	beq.n	800e130 <__mcmp+0x2c>
 800e128:	d205      	bcs.n	800e136 <__mcmp+0x32>
 800e12a:	f04f 30ff 	mov.w	r0, #4294967295
 800e12e:	bd30      	pop	{r4, r5, pc}
 800e130:	42a3      	cmp	r3, r4
 800e132:	d3f3      	bcc.n	800e11c <__mcmp+0x18>
 800e134:	e7fb      	b.n	800e12e <__mcmp+0x2a>
 800e136:	2001      	movs	r0, #1
 800e138:	e7f9      	b.n	800e12e <__mcmp+0x2a>
	...

0800e13c <__mdiff>:
 800e13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e140:	4689      	mov	r9, r1
 800e142:	4606      	mov	r6, r0
 800e144:	4611      	mov	r1, r2
 800e146:	4648      	mov	r0, r9
 800e148:	4614      	mov	r4, r2
 800e14a:	f7ff ffdb 	bl	800e104 <__mcmp>
 800e14e:	1e05      	subs	r5, r0, #0
 800e150:	d112      	bne.n	800e178 <__mdiff+0x3c>
 800e152:	4629      	mov	r1, r5
 800e154:	4630      	mov	r0, r6
 800e156:	f7ff fd5b 	bl	800dc10 <_Balloc>
 800e15a:	4602      	mov	r2, r0
 800e15c:	b928      	cbnz	r0, 800e16a <__mdiff+0x2e>
 800e15e:	4b3f      	ldr	r3, [pc, #252]	@ (800e25c <__mdiff+0x120>)
 800e160:	f240 2137 	movw	r1, #567	@ 0x237
 800e164:	483e      	ldr	r0, [pc, #248]	@ (800e260 <__mdiff+0x124>)
 800e166:	f000 faf3 	bl	800e750 <__assert_func>
 800e16a:	2301      	movs	r3, #1
 800e16c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e170:	4610      	mov	r0, r2
 800e172:	b003      	add	sp, #12
 800e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e178:	bfbc      	itt	lt
 800e17a:	464b      	movlt	r3, r9
 800e17c:	46a1      	movlt	r9, r4
 800e17e:	4630      	mov	r0, r6
 800e180:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e184:	bfba      	itte	lt
 800e186:	461c      	movlt	r4, r3
 800e188:	2501      	movlt	r5, #1
 800e18a:	2500      	movge	r5, #0
 800e18c:	f7ff fd40 	bl	800dc10 <_Balloc>
 800e190:	4602      	mov	r2, r0
 800e192:	b918      	cbnz	r0, 800e19c <__mdiff+0x60>
 800e194:	4b31      	ldr	r3, [pc, #196]	@ (800e25c <__mdiff+0x120>)
 800e196:	f240 2145 	movw	r1, #581	@ 0x245
 800e19a:	e7e3      	b.n	800e164 <__mdiff+0x28>
 800e19c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e1a0:	6926      	ldr	r6, [r4, #16]
 800e1a2:	60c5      	str	r5, [r0, #12]
 800e1a4:	f109 0310 	add.w	r3, r9, #16
 800e1a8:	f109 0514 	add.w	r5, r9, #20
 800e1ac:	f104 0e14 	add.w	lr, r4, #20
 800e1b0:	f100 0b14 	add.w	fp, r0, #20
 800e1b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e1b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	46d9      	mov	r9, fp
 800e1c0:	f04f 0c00 	mov.w	ip, #0
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e1ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	fa1f f38a 	uxth.w	r3, sl
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	b283      	uxth	r3, r0
 800e1d8:	1acb      	subs	r3, r1, r3
 800e1da:	0c00      	lsrs	r0, r0, #16
 800e1dc:	4463      	add	r3, ip
 800e1de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e1e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e1ec:	4576      	cmp	r6, lr
 800e1ee:	f849 3b04 	str.w	r3, [r9], #4
 800e1f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e1f6:	d8e5      	bhi.n	800e1c4 <__mdiff+0x88>
 800e1f8:	1b33      	subs	r3, r6, r4
 800e1fa:	3b15      	subs	r3, #21
 800e1fc:	f023 0303 	bic.w	r3, r3, #3
 800e200:	3415      	adds	r4, #21
 800e202:	3304      	adds	r3, #4
 800e204:	42a6      	cmp	r6, r4
 800e206:	bf38      	it	cc
 800e208:	2304      	movcc	r3, #4
 800e20a:	441d      	add	r5, r3
 800e20c:	445b      	add	r3, fp
 800e20e:	461e      	mov	r6, r3
 800e210:	462c      	mov	r4, r5
 800e212:	4544      	cmp	r4, r8
 800e214:	d30e      	bcc.n	800e234 <__mdiff+0xf8>
 800e216:	f108 0103 	add.w	r1, r8, #3
 800e21a:	1b49      	subs	r1, r1, r5
 800e21c:	f021 0103 	bic.w	r1, r1, #3
 800e220:	3d03      	subs	r5, #3
 800e222:	45a8      	cmp	r8, r5
 800e224:	bf38      	it	cc
 800e226:	2100      	movcc	r1, #0
 800e228:	440b      	add	r3, r1
 800e22a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e22e:	b191      	cbz	r1, 800e256 <__mdiff+0x11a>
 800e230:	6117      	str	r7, [r2, #16]
 800e232:	e79d      	b.n	800e170 <__mdiff+0x34>
 800e234:	f854 1b04 	ldr.w	r1, [r4], #4
 800e238:	46e6      	mov	lr, ip
 800e23a:	0c08      	lsrs	r0, r1, #16
 800e23c:	fa1c fc81 	uxtah	ip, ip, r1
 800e240:	4471      	add	r1, lr
 800e242:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e246:	b289      	uxth	r1, r1
 800e248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e24c:	f846 1b04 	str.w	r1, [r6], #4
 800e250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e254:	e7dd      	b.n	800e212 <__mdiff+0xd6>
 800e256:	3f01      	subs	r7, #1
 800e258:	e7e7      	b.n	800e22a <__mdiff+0xee>
 800e25a:	bf00      	nop
 800e25c:	080114b4 	.word	0x080114b4
 800e260:	080114c5 	.word	0x080114c5

0800e264 <__d2b>:
 800e264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e268:	460f      	mov	r7, r1
 800e26a:	2101      	movs	r1, #1
 800e26c:	ec59 8b10 	vmov	r8, r9, d0
 800e270:	4616      	mov	r6, r2
 800e272:	f7ff fccd 	bl	800dc10 <_Balloc>
 800e276:	4604      	mov	r4, r0
 800e278:	b930      	cbnz	r0, 800e288 <__d2b+0x24>
 800e27a:	4602      	mov	r2, r0
 800e27c:	4b23      	ldr	r3, [pc, #140]	@ (800e30c <__d2b+0xa8>)
 800e27e:	4824      	ldr	r0, [pc, #144]	@ (800e310 <__d2b+0xac>)
 800e280:	f240 310f 	movw	r1, #783	@ 0x30f
 800e284:	f000 fa64 	bl	800e750 <__assert_func>
 800e288:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e28c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e290:	b10d      	cbz	r5, 800e296 <__d2b+0x32>
 800e292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	f1b8 0300 	subs.w	r3, r8, #0
 800e29c:	d023      	beq.n	800e2e6 <__d2b+0x82>
 800e29e:	4668      	mov	r0, sp
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	f7ff fd7c 	bl	800dd9e <__lo0bits>
 800e2a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e2aa:	b1d0      	cbz	r0, 800e2e2 <__d2b+0x7e>
 800e2ac:	f1c0 0320 	rsb	r3, r0, #32
 800e2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2b4:	430b      	orrs	r3, r1
 800e2b6:	40c2      	lsrs	r2, r0
 800e2b8:	6163      	str	r3, [r4, #20]
 800e2ba:	9201      	str	r2, [sp, #4]
 800e2bc:	9b01      	ldr	r3, [sp, #4]
 800e2be:	61a3      	str	r3, [r4, #24]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	bf0c      	ite	eq
 800e2c4:	2201      	moveq	r2, #1
 800e2c6:	2202      	movne	r2, #2
 800e2c8:	6122      	str	r2, [r4, #16]
 800e2ca:	b1a5      	cbz	r5, 800e2f6 <__d2b+0x92>
 800e2cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e2d0:	4405      	add	r5, r0
 800e2d2:	603d      	str	r5, [r7, #0]
 800e2d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e2d8:	6030      	str	r0, [r6, #0]
 800e2da:	4620      	mov	r0, r4
 800e2dc:	b003      	add	sp, #12
 800e2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2e2:	6161      	str	r1, [r4, #20]
 800e2e4:	e7ea      	b.n	800e2bc <__d2b+0x58>
 800e2e6:	a801      	add	r0, sp, #4
 800e2e8:	f7ff fd59 	bl	800dd9e <__lo0bits>
 800e2ec:	9b01      	ldr	r3, [sp, #4]
 800e2ee:	6163      	str	r3, [r4, #20]
 800e2f0:	3020      	adds	r0, #32
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	e7e8      	b.n	800e2c8 <__d2b+0x64>
 800e2f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e2fe:	6038      	str	r0, [r7, #0]
 800e300:	6918      	ldr	r0, [r3, #16]
 800e302:	f7ff fd2d 	bl	800dd60 <__hi0bits>
 800e306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e30a:	e7e5      	b.n	800e2d8 <__d2b+0x74>
 800e30c:	080114b4 	.word	0x080114b4
 800e310:	080114c5 	.word	0x080114c5

0800e314 <__ssputs_r>:
 800e314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e318:	688e      	ldr	r6, [r1, #8]
 800e31a:	461f      	mov	r7, r3
 800e31c:	42be      	cmp	r6, r7
 800e31e:	680b      	ldr	r3, [r1, #0]
 800e320:	4682      	mov	sl, r0
 800e322:	460c      	mov	r4, r1
 800e324:	4690      	mov	r8, r2
 800e326:	d82d      	bhi.n	800e384 <__ssputs_r+0x70>
 800e328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e32c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e330:	d026      	beq.n	800e380 <__ssputs_r+0x6c>
 800e332:	6965      	ldr	r5, [r4, #20]
 800e334:	6909      	ldr	r1, [r1, #16]
 800e336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e33a:	eba3 0901 	sub.w	r9, r3, r1
 800e33e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e342:	1c7b      	adds	r3, r7, #1
 800e344:	444b      	add	r3, r9
 800e346:	106d      	asrs	r5, r5, #1
 800e348:	429d      	cmp	r5, r3
 800e34a:	bf38      	it	cc
 800e34c:	461d      	movcc	r5, r3
 800e34e:	0553      	lsls	r3, r2, #21
 800e350:	d527      	bpl.n	800e3a2 <__ssputs_r+0x8e>
 800e352:	4629      	mov	r1, r5
 800e354:	f7fd ffac 	bl	800c2b0 <_malloc_r>
 800e358:	4606      	mov	r6, r0
 800e35a:	b360      	cbz	r0, 800e3b6 <__ssputs_r+0xa2>
 800e35c:	6921      	ldr	r1, [r4, #16]
 800e35e:	464a      	mov	r2, r9
 800e360:	f7fe fe1f 	bl	800cfa2 <memcpy>
 800e364:	89a3      	ldrh	r3, [r4, #12]
 800e366:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e36a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e36e:	81a3      	strh	r3, [r4, #12]
 800e370:	6126      	str	r6, [r4, #16]
 800e372:	6165      	str	r5, [r4, #20]
 800e374:	444e      	add	r6, r9
 800e376:	eba5 0509 	sub.w	r5, r5, r9
 800e37a:	6026      	str	r6, [r4, #0]
 800e37c:	60a5      	str	r5, [r4, #8]
 800e37e:	463e      	mov	r6, r7
 800e380:	42be      	cmp	r6, r7
 800e382:	d900      	bls.n	800e386 <__ssputs_r+0x72>
 800e384:	463e      	mov	r6, r7
 800e386:	6820      	ldr	r0, [r4, #0]
 800e388:	4632      	mov	r2, r6
 800e38a:	4641      	mov	r1, r8
 800e38c:	f000 f9c6 	bl	800e71c <memmove>
 800e390:	68a3      	ldr	r3, [r4, #8]
 800e392:	1b9b      	subs	r3, r3, r6
 800e394:	60a3      	str	r3, [r4, #8]
 800e396:	6823      	ldr	r3, [r4, #0]
 800e398:	4433      	add	r3, r6
 800e39a:	6023      	str	r3, [r4, #0]
 800e39c:	2000      	movs	r0, #0
 800e39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a2:	462a      	mov	r2, r5
 800e3a4:	f000 fa18 	bl	800e7d8 <_realloc_r>
 800e3a8:	4606      	mov	r6, r0
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d1e0      	bne.n	800e370 <__ssputs_r+0x5c>
 800e3ae:	6921      	ldr	r1, [r4, #16]
 800e3b0:	4650      	mov	r0, sl
 800e3b2:	f7ff fbe3 	bl	800db7c <_free_r>
 800e3b6:	230c      	movs	r3, #12
 800e3b8:	f8ca 3000 	str.w	r3, [sl]
 800e3bc:	89a3      	ldrh	r3, [r4, #12]
 800e3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3c2:	81a3      	strh	r3, [r4, #12]
 800e3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c8:	e7e9      	b.n	800e39e <__ssputs_r+0x8a>
	...

0800e3cc <_svfiprintf_r>:
 800e3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d0:	4698      	mov	r8, r3
 800e3d2:	898b      	ldrh	r3, [r1, #12]
 800e3d4:	061b      	lsls	r3, r3, #24
 800e3d6:	b09d      	sub	sp, #116	@ 0x74
 800e3d8:	4607      	mov	r7, r0
 800e3da:	460d      	mov	r5, r1
 800e3dc:	4614      	mov	r4, r2
 800e3de:	d510      	bpl.n	800e402 <_svfiprintf_r+0x36>
 800e3e0:	690b      	ldr	r3, [r1, #16]
 800e3e2:	b973      	cbnz	r3, 800e402 <_svfiprintf_r+0x36>
 800e3e4:	2140      	movs	r1, #64	@ 0x40
 800e3e6:	f7fd ff63 	bl	800c2b0 <_malloc_r>
 800e3ea:	6028      	str	r0, [r5, #0]
 800e3ec:	6128      	str	r0, [r5, #16]
 800e3ee:	b930      	cbnz	r0, 800e3fe <_svfiprintf_r+0x32>
 800e3f0:	230c      	movs	r3, #12
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f8:	b01d      	add	sp, #116	@ 0x74
 800e3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fe:	2340      	movs	r3, #64	@ 0x40
 800e400:	616b      	str	r3, [r5, #20]
 800e402:	2300      	movs	r3, #0
 800e404:	9309      	str	r3, [sp, #36]	@ 0x24
 800e406:	2320      	movs	r3, #32
 800e408:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e410:	2330      	movs	r3, #48	@ 0x30
 800e412:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e5b0 <_svfiprintf_r+0x1e4>
 800e416:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e41a:	f04f 0901 	mov.w	r9, #1
 800e41e:	4623      	mov	r3, r4
 800e420:	469a      	mov	sl, r3
 800e422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e426:	b10a      	cbz	r2, 800e42c <_svfiprintf_r+0x60>
 800e428:	2a25      	cmp	r2, #37	@ 0x25
 800e42a:	d1f9      	bne.n	800e420 <_svfiprintf_r+0x54>
 800e42c:	ebba 0b04 	subs.w	fp, sl, r4
 800e430:	d00b      	beq.n	800e44a <_svfiprintf_r+0x7e>
 800e432:	465b      	mov	r3, fp
 800e434:	4622      	mov	r2, r4
 800e436:	4629      	mov	r1, r5
 800e438:	4638      	mov	r0, r7
 800e43a:	f7ff ff6b 	bl	800e314 <__ssputs_r>
 800e43e:	3001      	adds	r0, #1
 800e440:	f000 80a7 	beq.w	800e592 <_svfiprintf_r+0x1c6>
 800e444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e446:	445a      	add	r2, fp
 800e448:	9209      	str	r2, [sp, #36]	@ 0x24
 800e44a:	f89a 3000 	ldrb.w	r3, [sl]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 809f 	beq.w	800e592 <_svfiprintf_r+0x1c6>
 800e454:	2300      	movs	r3, #0
 800e456:	f04f 32ff 	mov.w	r2, #4294967295
 800e45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e45e:	f10a 0a01 	add.w	sl, sl, #1
 800e462:	9304      	str	r3, [sp, #16]
 800e464:	9307      	str	r3, [sp, #28]
 800e466:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e46a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e46c:	4654      	mov	r4, sl
 800e46e:	2205      	movs	r2, #5
 800e470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e474:	484e      	ldr	r0, [pc, #312]	@ (800e5b0 <_svfiprintf_r+0x1e4>)
 800e476:	f7f1 ff33 	bl	80002e0 <memchr>
 800e47a:	9a04      	ldr	r2, [sp, #16]
 800e47c:	b9d8      	cbnz	r0, 800e4b6 <_svfiprintf_r+0xea>
 800e47e:	06d0      	lsls	r0, r2, #27
 800e480:	bf44      	itt	mi
 800e482:	2320      	movmi	r3, #32
 800e484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e488:	0711      	lsls	r1, r2, #28
 800e48a:	bf44      	itt	mi
 800e48c:	232b      	movmi	r3, #43	@ 0x2b
 800e48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e492:	f89a 3000 	ldrb.w	r3, [sl]
 800e496:	2b2a      	cmp	r3, #42	@ 0x2a
 800e498:	d015      	beq.n	800e4c6 <_svfiprintf_r+0xfa>
 800e49a:	9a07      	ldr	r2, [sp, #28]
 800e49c:	4654      	mov	r4, sl
 800e49e:	2000      	movs	r0, #0
 800e4a0:	f04f 0c0a 	mov.w	ip, #10
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4aa:	3b30      	subs	r3, #48	@ 0x30
 800e4ac:	2b09      	cmp	r3, #9
 800e4ae:	d94b      	bls.n	800e548 <_svfiprintf_r+0x17c>
 800e4b0:	b1b0      	cbz	r0, 800e4e0 <_svfiprintf_r+0x114>
 800e4b2:	9207      	str	r2, [sp, #28]
 800e4b4:	e014      	b.n	800e4e0 <_svfiprintf_r+0x114>
 800e4b6:	eba0 0308 	sub.w	r3, r0, r8
 800e4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	9304      	str	r3, [sp, #16]
 800e4c2:	46a2      	mov	sl, r4
 800e4c4:	e7d2      	b.n	800e46c <_svfiprintf_r+0xa0>
 800e4c6:	9b03      	ldr	r3, [sp, #12]
 800e4c8:	1d19      	adds	r1, r3, #4
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	9103      	str	r1, [sp, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	bfbb      	ittet	lt
 800e4d2:	425b      	neglt	r3, r3
 800e4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800e4d8:	9307      	strge	r3, [sp, #28]
 800e4da:	9307      	strlt	r3, [sp, #28]
 800e4dc:	bfb8      	it	lt
 800e4de:	9204      	strlt	r2, [sp, #16]
 800e4e0:	7823      	ldrb	r3, [r4, #0]
 800e4e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4e4:	d10a      	bne.n	800e4fc <_svfiprintf_r+0x130>
 800e4e6:	7863      	ldrb	r3, [r4, #1]
 800e4e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4ea:	d132      	bne.n	800e552 <_svfiprintf_r+0x186>
 800e4ec:	9b03      	ldr	r3, [sp, #12]
 800e4ee:	1d1a      	adds	r2, r3, #4
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	9203      	str	r2, [sp, #12]
 800e4f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4f8:	3402      	adds	r4, #2
 800e4fa:	9305      	str	r3, [sp, #20]
 800e4fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e5c0 <_svfiprintf_r+0x1f4>
 800e500:	7821      	ldrb	r1, [r4, #0]
 800e502:	2203      	movs	r2, #3
 800e504:	4650      	mov	r0, sl
 800e506:	f7f1 feeb 	bl	80002e0 <memchr>
 800e50a:	b138      	cbz	r0, 800e51c <_svfiprintf_r+0x150>
 800e50c:	9b04      	ldr	r3, [sp, #16]
 800e50e:	eba0 000a 	sub.w	r0, r0, sl
 800e512:	2240      	movs	r2, #64	@ 0x40
 800e514:	4082      	lsls	r2, r0
 800e516:	4313      	orrs	r3, r2
 800e518:	3401      	adds	r4, #1
 800e51a:	9304      	str	r3, [sp, #16]
 800e51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e520:	4824      	ldr	r0, [pc, #144]	@ (800e5b4 <_svfiprintf_r+0x1e8>)
 800e522:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e526:	2206      	movs	r2, #6
 800e528:	f7f1 feda 	bl	80002e0 <memchr>
 800e52c:	2800      	cmp	r0, #0
 800e52e:	d036      	beq.n	800e59e <_svfiprintf_r+0x1d2>
 800e530:	4b21      	ldr	r3, [pc, #132]	@ (800e5b8 <_svfiprintf_r+0x1ec>)
 800e532:	bb1b      	cbnz	r3, 800e57c <_svfiprintf_r+0x1b0>
 800e534:	9b03      	ldr	r3, [sp, #12]
 800e536:	3307      	adds	r3, #7
 800e538:	f023 0307 	bic.w	r3, r3, #7
 800e53c:	3308      	adds	r3, #8
 800e53e:	9303      	str	r3, [sp, #12]
 800e540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e542:	4433      	add	r3, r6
 800e544:	9309      	str	r3, [sp, #36]	@ 0x24
 800e546:	e76a      	b.n	800e41e <_svfiprintf_r+0x52>
 800e548:	fb0c 3202 	mla	r2, ip, r2, r3
 800e54c:	460c      	mov	r4, r1
 800e54e:	2001      	movs	r0, #1
 800e550:	e7a8      	b.n	800e4a4 <_svfiprintf_r+0xd8>
 800e552:	2300      	movs	r3, #0
 800e554:	3401      	adds	r4, #1
 800e556:	9305      	str	r3, [sp, #20]
 800e558:	4619      	mov	r1, r3
 800e55a:	f04f 0c0a 	mov.w	ip, #10
 800e55e:	4620      	mov	r0, r4
 800e560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e564:	3a30      	subs	r2, #48	@ 0x30
 800e566:	2a09      	cmp	r2, #9
 800e568:	d903      	bls.n	800e572 <_svfiprintf_r+0x1a6>
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d0c6      	beq.n	800e4fc <_svfiprintf_r+0x130>
 800e56e:	9105      	str	r1, [sp, #20]
 800e570:	e7c4      	b.n	800e4fc <_svfiprintf_r+0x130>
 800e572:	fb0c 2101 	mla	r1, ip, r1, r2
 800e576:	4604      	mov	r4, r0
 800e578:	2301      	movs	r3, #1
 800e57a:	e7f0      	b.n	800e55e <_svfiprintf_r+0x192>
 800e57c:	ab03      	add	r3, sp, #12
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	462a      	mov	r2, r5
 800e582:	4b0e      	ldr	r3, [pc, #56]	@ (800e5bc <_svfiprintf_r+0x1f0>)
 800e584:	a904      	add	r1, sp, #16
 800e586:	4638      	mov	r0, r7
 800e588:	f7fd ffae 	bl	800c4e8 <_printf_float>
 800e58c:	1c42      	adds	r2, r0, #1
 800e58e:	4606      	mov	r6, r0
 800e590:	d1d6      	bne.n	800e540 <_svfiprintf_r+0x174>
 800e592:	89ab      	ldrh	r3, [r5, #12]
 800e594:	065b      	lsls	r3, r3, #25
 800e596:	f53f af2d 	bmi.w	800e3f4 <_svfiprintf_r+0x28>
 800e59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e59c:	e72c      	b.n	800e3f8 <_svfiprintf_r+0x2c>
 800e59e:	ab03      	add	r3, sp, #12
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	462a      	mov	r2, r5
 800e5a4:	4b05      	ldr	r3, [pc, #20]	@ (800e5bc <_svfiprintf_r+0x1f0>)
 800e5a6:	a904      	add	r1, sp, #16
 800e5a8:	4638      	mov	r0, r7
 800e5aa:	f7fe fa25 	bl	800c9f8 <_printf_i>
 800e5ae:	e7ed      	b.n	800e58c <_svfiprintf_r+0x1c0>
 800e5b0:	08011620 	.word	0x08011620
 800e5b4:	0801162a 	.word	0x0801162a
 800e5b8:	0800c4e9 	.word	0x0800c4e9
 800e5bc:	0800e315 	.word	0x0800e315
 800e5c0:	08011626 	.word	0x08011626

0800e5c4 <__sflush_r>:
 800e5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5cc:	0716      	lsls	r6, r2, #28
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	d454      	bmi.n	800e67e <__sflush_r+0xba>
 800e5d4:	684b      	ldr	r3, [r1, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	dc02      	bgt.n	800e5e0 <__sflush_r+0x1c>
 800e5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	dd48      	ble.n	800e672 <__sflush_r+0xae>
 800e5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5e2:	2e00      	cmp	r6, #0
 800e5e4:	d045      	beq.n	800e672 <__sflush_r+0xae>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5ec:	682f      	ldr	r7, [r5, #0]
 800e5ee:	6a21      	ldr	r1, [r4, #32]
 800e5f0:	602b      	str	r3, [r5, #0]
 800e5f2:	d030      	beq.n	800e656 <__sflush_r+0x92>
 800e5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	0759      	lsls	r1, r3, #29
 800e5fa:	d505      	bpl.n	800e608 <__sflush_r+0x44>
 800e5fc:	6863      	ldr	r3, [r4, #4]
 800e5fe:	1ad2      	subs	r2, r2, r3
 800e600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e602:	b10b      	cbz	r3, 800e608 <__sflush_r+0x44>
 800e604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e606:	1ad2      	subs	r2, r2, r3
 800e608:	2300      	movs	r3, #0
 800e60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e60c:	6a21      	ldr	r1, [r4, #32]
 800e60e:	4628      	mov	r0, r5
 800e610:	47b0      	blx	r6
 800e612:	1c43      	adds	r3, r0, #1
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	d106      	bne.n	800e626 <__sflush_r+0x62>
 800e618:	6829      	ldr	r1, [r5, #0]
 800e61a:	291d      	cmp	r1, #29
 800e61c:	d82b      	bhi.n	800e676 <__sflush_r+0xb2>
 800e61e:	4a2a      	ldr	r2, [pc, #168]	@ (800e6c8 <__sflush_r+0x104>)
 800e620:	410a      	asrs	r2, r1
 800e622:	07d6      	lsls	r6, r2, #31
 800e624:	d427      	bmi.n	800e676 <__sflush_r+0xb2>
 800e626:	2200      	movs	r2, #0
 800e628:	6062      	str	r2, [r4, #4]
 800e62a:	04d9      	lsls	r1, r3, #19
 800e62c:	6922      	ldr	r2, [r4, #16]
 800e62e:	6022      	str	r2, [r4, #0]
 800e630:	d504      	bpl.n	800e63c <__sflush_r+0x78>
 800e632:	1c42      	adds	r2, r0, #1
 800e634:	d101      	bne.n	800e63a <__sflush_r+0x76>
 800e636:	682b      	ldr	r3, [r5, #0]
 800e638:	b903      	cbnz	r3, 800e63c <__sflush_r+0x78>
 800e63a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e63e:	602f      	str	r7, [r5, #0]
 800e640:	b1b9      	cbz	r1, 800e672 <__sflush_r+0xae>
 800e642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e646:	4299      	cmp	r1, r3
 800e648:	d002      	beq.n	800e650 <__sflush_r+0x8c>
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7ff fa96 	bl	800db7c <_free_r>
 800e650:	2300      	movs	r3, #0
 800e652:	6363      	str	r3, [r4, #52]	@ 0x34
 800e654:	e00d      	b.n	800e672 <__sflush_r+0xae>
 800e656:	2301      	movs	r3, #1
 800e658:	4628      	mov	r0, r5
 800e65a:	47b0      	blx	r6
 800e65c:	4602      	mov	r2, r0
 800e65e:	1c50      	adds	r0, r2, #1
 800e660:	d1c9      	bne.n	800e5f6 <__sflush_r+0x32>
 800e662:	682b      	ldr	r3, [r5, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d0c6      	beq.n	800e5f6 <__sflush_r+0x32>
 800e668:	2b1d      	cmp	r3, #29
 800e66a:	d001      	beq.n	800e670 <__sflush_r+0xac>
 800e66c:	2b16      	cmp	r3, #22
 800e66e:	d11e      	bne.n	800e6ae <__sflush_r+0xea>
 800e670:	602f      	str	r7, [r5, #0]
 800e672:	2000      	movs	r0, #0
 800e674:	e022      	b.n	800e6bc <__sflush_r+0xf8>
 800e676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e67a:	b21b      	sxth	r3, r3
 800e67c:	e01b      	b.n	800e6b6 <__sflush_r+0xf2>
 800e67e:	690f      	ldr	r7, [r1, #16]
 800e680:	2f00      	cmp	r7, #0
 800e682:	d0f6      	beq.n	800e672 <__sflush_r+0xae>
 800e684:	0793      	lsls	r3, r2, #30
 800e686:	680e      	ldr	r6, [r1, #0]
 800e688:	bf08      	it	eq
 800e68a:	694b      	ldreq	r3, [r1, #20]
 800e68c:	600f      	str	r7, [r1, #0]
 800e68e:	bf18      	it	ne
 800e690:	2300      	movne	r3, #0
 800e692:	eba6 0807 	sub.w	r8, r6, r7
 800e696:	608b      	str	r3, [r1, #8]
 800e698:	f1b8 0f00 	cmp.w	r8, #0
 800e69c:	dde9      	ble.n	800e672 <__sflush_r+0xae>
 800e69e:	6a21      	ldr	r1, [r4, #32]
 800e6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6a2:	4643      	mov	r3, r8
 800e6a4:	463a      	mov	r2, r7
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	47b0      	blx	r6
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	dc08      	bgt.n	800e6c0 <__sflush_r+0xfc>
 800e6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6b6:	81a3      	strh	r3, [r4, #12]
 800e6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c0:	4407      	add	r7, r0
 800e6c2:	eba8 0800 	sub.w	r8, r8, r0
 800e6c6:	e7e7      	b.n	800e698 <__sflush_r+0xd4>
 800e6c8:	dfbffffe 	.word	0xdfbffffe

0800e6cc <_fflush_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	690b      	ldr	r3, [r1, #16]
 800e6d0:	4605      	mov	r5, r0
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	b913      	cbnz	r3, 800e6dc <_fflush_r+0x10>
 800e6d6:	2500      	movs	r5, #0
 800e6d8:	4628      	mov	r0, r5
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	b118      	cbz	r0, 800e6e6 <_fflush_r+0x1a>
 800e6de:	6a03      	ldr	r3, [r0, #32]
 800e6e0:	b90b      	cbnz	r3, 800e6e6 <_fflush_r+0x1a>
 800e6e2:	f7fe fb35 	bl	800cd50 <__sinit>
 800e6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d0f3      	beq.n	800e6d6 <_fflush_r+0xa>
 800e6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6f0:	07d0      	lsls	r0, r2, #31
 800e6f2:	d404      	bmi.n	800e6fe <_fflush_r+0x32>
 800e6f4:	0599      	lsls	r1, r3, #22
 800e6f6:	d402      	bmi.n	800e6fe <_fflush_r+0x32>
 800e6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6fa:	f7fe fc50 	bl	800cf9e <__retarget_lock_acquire_recursive>
 800e6fe:	4628      	mov	r0, r5
 800e700:	4621      	mov	r1, r4
 800e702:	f7ff ff5f 	bl	800e5c4 <__sflush_r>
 800e706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e708:	07da      	lsls	r2, r3, #31
 800e70a:	4605      	mov	r5, r0
 800e70c:	d4e4      	bmi.n	800e6d8 <_fflush_r+0xc>
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	059b      	lsls	r3, r3, #22
 800e712:	d4e1      	bmi.n	800e6d8 <_fflush_r+0xc>
 800e714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e716:	f7fe fc43 	bl	800cfa0 <__retarget_lock_release_recursive>
 800e71a:	e7dd      	b.n	800e6d8 <_fflush_r+0xc>

0800e71c <memmove>:
 800e71c:	4288      	cmp	r0, r1
 800e71e:	b510      	push	{r4, lr}
 800e720:	eb01 0402 	add.w	r4, r1, r2
 800e724:	d902      	bls.n	800e72c <memmove+0x10>
 800e726:	4284      	cmp	r4, r0
 800e728:	4623      	mov	r3, r4
 800e72a:	d807      	bhi.n	800e73c <memmove+0x20>
 800e72c:	1e43      	subs	r3, r0, #1
 800e72e:	42a1      	cmp	r1, r4
 800e730:	d008      	beq.n	800e744 <memmove+0x28>
 800e732:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e73a:	e7f8      	b.n	800e72e <memmove+0x12>
 800e73c:	4402      	add	r2, r0
 800e73e:	4601      	mov	r1, r0
 800e740:	428a      	cmp	r2, r1
 800e742:	d100      	bne.n	800e746 <memmove+0x2a>
 800e744:	bd10      	pop	{r4, pc}
 800e746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e74a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e74e:	e7f7      	b.n	800e740 <memmove+0x24>

0800e750 <__assert_func>:
 800e750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e752:	4614      	mov	r4, r2
 800e754:	461a      	mov	r2, r3
 800e756:	4b09      	ldr	r3, [pc, #36]	@ (800e77c <__assert_func+0x2c>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4605      	mov	r5, r0
 800e75c:	68d8      	ldr	r0, [r3, #12]
 800e75e:	b954      	cbnz	r4, 800e776 <__assert_func+0x26>
 800e760:	4b07      	ldr	r3, [pc, #28]	@ (800e780 <__assert_func+0x30>)
 800e762:	461c      	mov	r4, r3
 800e764:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e768:	9100      	str	r1, [sp, #0]
 800e76a:	462b      	mov	r3, r5
 800e76c:	4905      	ldr	r1, [pc, #20]	@ (800e784 <__assert_func+0x34>)
 800e76e:	f000 f86f 	bl	800e850 <fiprintf>
 800e772:	f000 f87f 	bl	800e874 <abort>
 800e776:	4b04      	ldr	r3, [pc, #16]	@ (800e788 <__assert_func+0x38>)
 800e778:	e7f4      	b.n	800e764 <__assert_func+0x14>
 800e77a:	bf00      	nop
 800e77c:	24000044 	.word	0x24000044
 800e780:	08011676 	.word	0x08011676
 800e784:	08011648 	.word	0x08011648
 800e788:	0801163b 	.word	0x0801163b

0800e78c <_calloc_r>:
 800e78c:	b570      	push	{r4, r5, r6, lr}
 800e78e:	fba1 5402 	umull	r5, r4, r1, r2
 800e792:	b93c      	cbnz	r4, 800e7a4 <_calloc_r+0x18>
 800e794:	4629      	mov	r1, r5
 800e796:	f7fd fd8b 	bl	800c2b0 <_malloc_r>
 800e79a:	4606      	mov	r6, r0
 800e79c:	b928      	cbnz	r0, 800e7aa <_calloc_r+0x1e>
 800e79e:	2600      	movs	r6, #0
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	bd70      	pop	{r4, r5, r6, pc}
 800e7a4:	220c      	movs	r2, #12
 800e7a6:	6002      	str	r2, [r0, #0]
 800e7a8:	e7f9      	b.n	800e79e <_calloc_r+0x12>
 800e7aa:	462a      	mov	r2, r5
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	f7fe fb68 	bl	800ce82 <memset>
 800e7b2:	e7f5      	b.n	800e7a0 <_calloc_r+0x14>

0800e7b4 <__ascii_mbtowc>:
 800e7b4:	b082      	sub	sp, #8
 800e7b6:	b901      	cbnz	r1, 800e7ba <__ascii_mbtowc+0x6>
 800e7b8:	a901      	add	r1, sp, #4
 800e7ba:	b142      	cbz	r2, 800e7ce <__ascii_mbtowc+0x1a>
 800e7bc:	b14b      	cbz	r3, 800e7d2 <__ascii_mbtowc+0x1e>
 800e7be:	7813      	ldrb	r3, [r2, #0]
 800e7c0:	600b      	str	r3, [r1, #0]
 800e7c2:	7812      	ldrb	r2, [r2, #0]
 800e7c4:	1e10      	subs	r0, r2, #0
 800e7c6:	bf18      	it	ne
 800e7c8:	2001      	movne	r0, #1
 800e7ca:	b002      	add	sp, #8
 800e7cc:	4770      	bx	lr
 800e7ce:	4610      	mov	r0, r2
 800e7d0:	e7fb      	b.n	800e7ca <__ascii_mbtowc+0x16>
 800e7d2:	f06f 0001 	mvn.w	r0, #1
 800e7d6:	e7f8      	b.n	800e7ca <__ascii_mbtowc+0x16>

0800e7d8 <_realloc_r>:
 800e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	4680      	mov	r8, r0
 800e7de:	4615      	mov	r5, r2
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	b921      	cbnz	r1, 800e7ee <_realloc_r+0x16>
 800e7e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	f7fd bd61 	b.w	800c2b0 <_malloc_r>
 800e7ee:	b92a      	cbnz	r2, 800e7fc <_realloc_r+0x24>
 800e7f0:	f7ff f9c4 	bl	800db7c <_free_r>
 800e7f4:	2400      	movs	r4, #0
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7fc:	f000 f841 	bl	800e882 <_malloc_usable_size_r>
 800e800:	4285      	cmp	r5, r0
 800e802:	4606      	mov	r6, r0
 800e804:	d802      	bhi.n	800e80c <_realloc_r+0x34>
 800e806:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e80a:	d8f4      	bhi.n	800e7f6 <_realloc_r+0x1e>
 800e80c:	4629      	mov	r1, r5
 800e80e:	4640      	mov	r0, r8
 800e810:	f7fd fd4e 	bl	800c2b0 <_malloc_r>
 800e814:	4607      	mov	r7, r0
 800e816:	2800      	cmp	r0, #0
 800e818:	d0ec      	beq.n	800e7f4 <_realloc_r+0x1c>
 800e81a:	42b5      	cmp	r5, r6
 800e81c:	462a      	mov	r2, r5
 800e81e:	4621      	mov	r1, r4
 800e820:	bf28      	it	cs
 800e822:	4632      	movcs	r2, r6
 800e824:	f7fe fbbd 	bl	800cfa2 <memcpy>
 800e828:	4621      	mov	r1, r4
 800e82a:	4640      	mov	r0, r8
 800e82c:	f7ff f9a6 	bl	800db7c <_free_r>
 800e830:	463c      	mov	r4, r7
 800e832:	e7e0      	b.n	800e7f6 <_realloc_r+0x1e>

0800e834 <__ascii_wctomb>:
 800e834:	4603      	mov	r3, r0
 800e836:	4608      	mov	r0, r1
 800e838:	b141      	cbz	r1, 800e84c <__ascii_wctomb+0x18>
 800e83a:	2aff      	cmp	r2, #255	@ 0xff
 800e83c:	d904      	bls.n	800e848 <__ascii_wctomb+0x14>
 800e83e:	228a      	movs	r2, #138	@ 0x8a
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	f04f 30ff 	mov.w	r0, #4294967295
 800e846:	4770      	bx	lr
 800e848:	700a      	strb	r2, [r1, #0]
 800e84a:	2001      	movs	r0, #1
 800e84c:	4770      	bx	lr
	...

0800e850 <fiprintf>:
 800e850:	b40e      	push	{r1, r2, r3}
 800e852:	b503      	push	{r0, r1, lr}
 800e854:	4601      	mov	r1, r0
 800e856:	ab03      	add	r3, sp, #12
 800e858:	4805      	ldr	r0, [pc, #20]	@ (800e870 <fiprintf+0x20>)
 800e85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e85e:	6800      	ldr	r0, [r0, #0]
 800e860:	9301      	str	r3, [sp, #4]
 800e862:	f000 f83f 	bl	800e8e4 <_vfiprintf_r>
 800e866:	b002      	add	sp, #8
 800e868:	f85d eb04 	ldr.w	lr, [sp], #4
 800e86c:	b003      	add	sp, #12
 800e86e:	4770      	bx	lr
 800e870:	24000044 	.word	0x24000044

0800e874 <abort>:
 800e874:	b508      	push	{r3, lr}
 800e876:	2006      	movs	r0, #6
 800e878:	f000 fa08 	bl	800ec8c <raise>
 800e87c:	2001      	movs	r0, #1
 800e87e:	f7f2 fd85 	bl	800138c <_exit>

0800e882 <_malloc_usable_size_r>:
 800e882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e886:	1f18      	subs	r0, r3, #4
 800e888:	2b00      	cmp	r3, #0
 800e88a:	bfbc      	itt	lt
 800e88c:	580b      	ldrlt	r3, [r1, r0]
 800e88e:	18c0      	addlt	r0, r0, r3
 800e890:	4770      	bx	lr

0800e892 <__sfputc_r>:
 800e892:	6893      	ldr	r3, [r2, #8]
 800e894:	3b01      	subs	r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	b410      	push	{r4}
 800e89a:	6093      	str	r3, [r2, #8]
 800e89c:	da08      	bge.n	800e8b0 <__sfputc_r+0x1e>
 800e89e:	6994      	ldr	r4, [r2, #24]
 800e8a0:	42a3      	cmp	r3, r4
 800e8a2:	db01      	blt.n	800e8a8 <__sfputc_r+0x16>
 800e8a4:	290a      	cmp	r1, #10
 800e8a6:	d103      	bne.n	800e8b0 <__sfputc_r+0x1e>
 800e8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ac:	f000 b932 	b.w	800eb14 <__swbuf_r>
 800e8b0:	6813      	ldr	r3, [r2, #0]
 800e8b2:	1c58      	adds	r0, r3, #1
 800e8b4:	6010      	str	r0, [r2, #0]
 800e8b6:	7019      	strb	r1, [r3, #0]
 800e8b8:	4608      	mov	r0, r1
 800e8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <__sfputs_r>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	460f      	mov	r7, r1
 800e8c6:	4614      	mov	r4, r2
 800e8c8:	18d5      	adds	r5, r2, r3
 800e8ca:	42ac      	cmp	r4, r5
 800e8cc:	d101      	bne.n	800e8d2 <__sfputs_r+0x12>
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	e007      	b.n	800e8e2 <__sfputs_r+0x22>
 800e8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8d6:	463a      	mov	r2, r7
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f7ff ffda 	bl	800e892 <__sfputc_r>
 800e8de:	1c43      	adds	r3, r0, #1
 800e8e0:	d1f3      	bne.n	800e8ca <__sfputs_r+0xa>
 800e8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8e4 <_vfiprintf_r>:
 800e8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e8:	460d      	mov	r5, r1
 800e8ea:	b09d      	sub	sp, #116	@ 0x74
 800e8ec:	4614      	mov	r4, r2
 800e8ee:	4698      	mov	r8, r3
 800e8f0:	4606      	mov	r6, r0
 800e8f2:	b118      	cbz	r0, 800e8fc <_vfiprintf_r+0x18>
 800e8f4:	6a03      	ldr	r3, [r0, #32]
 800e8f6:	b90b      	cbnz	r3, 800e8fc <_vfiprintf_r+0x18>
 800e8f8:	f7fe fa2a 	bl	800cd50 <__sinit>
 800e8fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8fe:	07d9      	lsls	r1, r3, #31
 800e900:	d405      	bmi.n	800e90e <_vfiprintf_r+0x2a>
 800e902:	89ab      	ldrh	r3, [r5, #12]
 800e904:	059a      	lsls	r2, r3, #22
 800e906:	d402      	bmi.n	800e90e <_vfiprintf_r+0x2a>
 800e908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e90a:	f7fe fb48 	bl	800cf9e <__retarget_lock_acquire_recursive>
 800e90e:	89ab      	ldrh	r3, [r5, #12]
 800e910:	071b      	lsls	r3, r3, #28
 800e912:	d501      	bpl.n	800e918 <_vfiprintf_r+0x34>
 800e914:	692b      	ldr	r3, [r5, #16]
 800e916:	b99b      	cbnz	r3, 800e940 <_vfiprintf_r+0x5c>
 800e918:	4629      	mov	r1, r5
 800e91a:	4630      	mov	r0, r6
 800e91c:	f000 f938 	bl	800eb90 <__swsetup_r>
 800e920:	b170      	cbz	r0, 800e940 <_vfiprintf_r+0x5c>
 800e922:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e924:	07dc      	lsls	r4, r3, #31
 800e926:	d504      	bpl.n	800e932 <_vfiprintf_r+0x4e>
 800e928:	f04f 30ff 	mov.w	r0, #4294967295
 800e92c:	b01d      	add	sp, #116	@ 0x74
 800e92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e932:	89ab      	ldrh	r3, [r5, #12]
 800e934:	0598      	lsls	r0, r3, #22
 800e936:	d4f7      	bmi.n	800e928 <_vfiprintf_r+0x44>
 800e938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e93a:	f7fe fb31 	bl	800cfa0 <__retarget_lock_release_recursive>
 800e93e:	e7f3      	b.n	800e928 <_vfiprintf_r+0x44>
 800e940:	2300      	movs	r3, #0
 800e942:	9309      	str	r3, [sp, #36]	@ 0x24
 800e944:	2320      	movs	r3, #32
 800e946:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e94a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e94e:	2330      	movs	r3, #48	@ 0x30
 800e950:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eb00 <_vfiprintf_r+0x21c>
 800e954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e958:	f04f 0901 	mov.w	r9, #1
 800e95c:	4623      	mov	r3, r4
 800e95e:	469a      	mov	sl, r3
 800e960:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e964:	b10a      	cbz	r2, 800e96a <_vfiprintf_r+0x86>
 800e966:	2a25      	cmp	r2, #37	@ 0x25
 800e968:	d1f9      	bne.n	800e95e <_vfiprintf_r+0x7a>
 800e96a:	ebba 0b04 	subs.w	fp, sl, r4
 800e96e:	d00b      	beq.n	800e988 <_vfiprintf_r+0xa4>
 800e970:	465b      	mov	r3, fp
 800e972:	4622      	mov	r2, r4
 800e974:	4629      	mov	r1, r5
 800e976:	4630      	mov	r0, r6
 800e978:	f7ff ffa2 	bl	800e8c0 <__sfputs_r>
 800e97c:	3001      	adds	r0, #1
 800e97e:	f000 80a7 	beq.w	800ead0 <_vfiprintf_r+0x1ec>
 800e982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e984:	445a      	add	r2, fp
 800e986:	9209      	str	r2, [sp, #36]	@ 0x24
 800e988:	f89a 3000 	ldrb.w	r3, [sl]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 809f 	beq.w	800ead0 <_vfiprintf_r+0x1ec>
 800e992:	2300      	movs	r3, #0
 800e994:	f04f 32ff 	mov.w	r2, #4294967295
 800e998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e99c:	f10a 0a01 	add.w	sl, sl, #1
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	9307      	str	r3, [sp, #28]
 800e9a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9aa:	4654      	mov	r4, sl
 800e9ac:	2205      	movs	r2, #5
 800e9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b2:	4853      	ldr	r0, [pc, #332]	@ (800eb00 <_vfiprintf_r+0x21c>)
 800e9b4:	f7f1 fc94 	bl	80002e0 <memchr>
 800e9b8:	9a04      	ldr	r2, [sp, #16]
 800e9ba:	b9d8      	cbnz	r0, 800e9f4 <_vfiprintf_r+0x110>
 800e9bc:	06d1      	lsls	r1, r2, #27
 800e9be:	bf44      	itt	mi
 800e9c0:	2320      	movmi	r3, #32
 800e9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9c6:	0713      	lsls	r3, r2, #28
 800e9c8:	bf44      	itt	mi
 800e9ca:	232b      	movmi	r3, #43	@ 0x2b
 800e9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9d6:	d015      	beq.n	800ea04 <_vfiprintf_r+0x120>
 800e9d8:	9a07      	ldr	r2, [sp, #28]
 800e9da:	4654      	mov	r4, sl
 800e9dc:	2000      	movs	r0, #0
 800e9de:	f04f 0c0a 	mov.w	ip, #10
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9e8:	3b30      	subs	r3, #48	@ 0x30
 800e9ea:	2b09      	cmp	r3, #9
 800e9ec:	d94b      	bls.n	800ea86 <_vfiprintf_r+0x1a2>
 800e9ee:	b1b0      	cbz	r0, 800ea1e <_vfiprintf_r+0x13a>
 800e9f0:	9207      	str	r2, [sp, #28]
 800e9f2:	e014      	b.n	800ea1e <_vfiprintf_r+0x13a>
 800e9f4:	eba0 0308 	sub.w	r3, r0, r8
 800e9f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	9304      	str	r3, [sp, #16]
 800ea00:	46a2      	mov	sl, r4
 800ea02:	e7d2      	b.n	800e9aa <_vfiprintf_r+0xc6>
 800ea04:	9b03      	ldr	r3, [sp, #12]
 800ea06:	1d19      	adds	r1, r3, #4
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	9103      	str	r1, [sp, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bfbb      	ittet	lt
 800ea10:	425b      	neglt	r3, r3
 800ea12:	f042 0202 	orrlt.w	r2, r2, #2
 800ea16:	9307      	strge	r3, [sp, #28]
 800ea18:	9307      	strlt	r3, [sp, #28]
 800ea1a:	bfb8      	it	lt
 800ea1c:	9204      	strlt	r2, [sp, #16]
 800ea1e:	7823      	ldrb	r3, [r4, #0]
 800ea20:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea22:	d10a      	bne.n	800ea3a <_vfiprintf_r+0x156>
 800ea24:	7863      	ldrb	r3, [r4, #1]
 800ea26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea28:	d132      	bne.n	800ea90 <_vfiprintf_r+0x1ac>
 800ea2a:	9b03      	ldr	r3, [sp, #12]
 800ea2c:	1d1a      	adds	r2, r3, #4
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	9203      	str	r2, [sp, #12]
 800ea32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea36:	3402      	adds	r4, #2
 800ea38:	9305      	str	r3, [sp, #20]
 800ea3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eb10 <_vfiprintf_r+0x22c>
 800ea3e:	7821      	ldrb	r1, [r4, #0]
 800ea40:	2203      	movs	r2, #3
 800ea42:	4650      	mov	r0, sl
 800ea44:	f7f1 fc4c 	bl	80002e0 <memchr>
 800ea48:	b138      	cbz	r0, 800ea5a <_vfiprintf_r+0x176>
 800ea4a:	9b04      	ldr	r3, [sp, #16]
 800ea4c:	eba0 000a 	sub.w	r0, r0, sl
 800ea50:	2240      	movs	r2, #64	@ 0x40
 800ea52:	4082      	lsls	r2, r0
 800ea54:	4313      	orrs	r3, r2
 800ea56:	3401      	adds	r4, #1
 800ea58:	9304      	str	r3, [sp, #16]
 800ea5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea5e:	4829      	ldr	r0, [pc, #164]	@ (800eb04 <_vfiprintf_r+0x220>)
 800ea60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea64:	2206      	movs	r2, #6
 800ea66:	f7f1 fc3b 	bl	80002e0 <memchr>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d03f      	beq.n	800eaee <_vfiprintf_r+0x20a>
 800ea6e:	4b26      	ldr	r3, [pc, #152]	@ (800eb08 <_vfiprintf_r+0x224>)
 800ea70:	bb1b      	cbnz	r3, 800eaba <_vfiprintf_r+0x1d6>
 800ea72:	9b03      	ldr	r3, [sp, #12]
 800ea74:	3307      	adds	r3, #7
 800ea76:	f023 0307 	bic.w	r3, r3, #7
 800ea7a:	3308      	adds	r3, #8
 800ea7c:	9303      	str	r3, [sp, #12]
 800ea7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea80:	443b      	add	r3, r7
 800ea82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea84:	e76a      	b.n	800e95c <_vfiprintf_r+0x78>
 800ea86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea8a:	460c      	mov	r4, r1
 800ea8c:	2001      	movs	r0, #1
 800ea8e:	e7a8      	b.n	800e9e2 <_vfiprintf_r+0xfe>
 800ea90:	2300      	movs	r3, #0
 800ea92:	3401      	adds	r4, #1
 800ea94:	9305      	str	r3, [sp, #20]
 800ea96:	4619      	mov	r1, r3
 800ea98:	f04f 0c0a 	mov.w	ip, #10
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaa2:	3a30      	subs	r2, #48	@ 0x30
 800eaa4:	2a09      	cmp	r2, #9
 800eaa6:	d903      	bls.n	800eab0 <_vfiprintf_r+0x1cc>
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d0c6      	beq.n	800ea3a <_vfiprintf_r+0x156>
 800eaac:	9105      	str	r1, [sp, #20]
 800eaae:	e7c4      	b.n	800ea3a <_vfiprintf_r+0x156>
 800eab0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eab4:	4604      	mov	r4, r0
 800eab6:	2301      	movs	r3, #1
 800eab8:	e7f0      	b.n	800ea9c <_vfiprintf_r+0x1b8>
 800eaba:	ab03      	add	r3, sp, #12
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	462a      	mov	r2, r5
 800eac0:	4b12      	ldr	r3, [pc, #72]	@ (800eb0c <_vfiprintf_r+0x228>)
 800eac2:	a904      	add	r1, sp, #16
 800eac4:	4630      	mov	r0, r6
 800eac6:	f7fd fd0f 	bl	800c4e8 <_printf_float>
 800eaca:	4607      	mov	r7, r0
 800eacc:	1c78      	adds	r0, r7, #1
 800eace:	d1d6      	bne.n	800ea7e <_vfiprintf_r+0x19a>
 800ead0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ead2:	07d9      	lsls	r1, r3, #31
 800ead4:	d405      	bmi.n	800eae2 <_vfiprintf_r+0x1fe>
 800ead6:	89ab      	ldrh	r3, [r5, #12]
 800ead8:	059a      	lsls	r2, r3, #22
 800eada:	d402      	bmi.n	800eae2 <_vfiprintf_r+0x1fe>
 800eadc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eade:	f7fe fa5f 	bl	800cfa0 <__retarget_lock_release_recursive>
 800eae2:	89ab      	ldrh	r3, [r5, #12]
 800eae4:	065b      	lsls	r3, r3, #25
 800eae6:	f53f af1f 	bmi.w	800e928 <_vfiprintf_r+0x44>
 800eaea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eaec:	e71e      	b.n	800e92c <_vfiprintf_r+0x48>
 800eaee:	ab03      	add	r3, sp, #12
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	462a      	mov	r2, r5
 800eaf4:	4b05      	ldr	r3, [pc, #20]	@ (800eb0c <_vfiprintf_r+0x228>)
 800eaf6:	a904      	add	r1, sp, #16
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f7fd ff7d 	bl	800c9f8 <_printf_i>
 800eafe:	e7e4      	b.n	800eaca <_vfiprintf_r+0x1e6>
 800eb00:	08011620 	.word	0x08011620
 800eb04:	0801162a 	.word	0x0801162a
 800eb08:	0800c4e9 	.word	0x0800c4e9
 800eb0c:	0800e8c1 	.word	0x0800e8c1
 800eb10:	08011626 	.word	0x08011626

0800eb14 <__swbuf_r>:
 800eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb16:	460e      	mov	r6, r1
 800eb18:	4614      	mov	r4, r2
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	b118      	cbz	r0, 800eb26 <__swbuf_r+0x12>
 800eb1e:	6a03      	ldr	r3, [r0, #32]
 800eb20:	b90b      	cbnz	r3, 800eb26 <__swbuf_r+0x12>
 800eb22:	f7fe f915 	bl	800cd50 <__sinit>
 800eb26:	69a3      	ldr	r3, [r4, #24]
 800eb28:	60a3      	str	r3, [r4, #8]
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	071a      	lsls	r2, r3, #28
 800eb2e:	d501      	bpl.n	800eb34 <__swbuf_r+0x20>
 800eb30:	6923      	ldr	r3, [r4, #16]
 800eb32:	b943      	cbnz	r3, 800eb46 <__swbuf_r+0x32>
 800eb34:	4621      	mov	r1, r4
 800eb36:	4628      	mov	r0, r5
 800eb38:	f000 f82a 	bl	800eb90 <__swsetup_r>
 800eb3c:	b118      	cbz	r0, 800eb46 <__swbuf_r+0x32>
 800eb3e:	f04f 37ff 	mov.w	r7, #4294967295
 800eb42:	4638      	mov	r0, r7
 800eb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	6922      	ldr	r2, [r4, #16]
 800eb4a:	1a98      	subs	r0, r3, r2
 800eb4c:	6963      	ldr	r3, [r4, #20]
 800eb4e:	b2f6      	uxtb	r6, r6
 800eb50:	4283      	cmp	r3, r0
 800eb52:	4637      	mov	r7, r6
 800eb54:	dc05      	bgt.n	800eb62 <__swbuf_r+0x4e>
 800eb56:	4621      	mov	r1, r4
 800eb58:	4628      	mov	r0, r5
 800eb5a:	f7ff fdb7 	bl	800e6cc <_fflush_r>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d1ed      	bne.n	800eb3e <__swbuf_r+0x2a>
 800eb62:	68a3      	ldr	r3, [r4, #8]
 800eb64:	3b01      	subs	r3, #1
 800eb66:	60a3      	str	r3, [r4, #8]
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	1c5a      	adds	r2, r3, #1
 800eb6c:	6022      	str	r2, [r4, #0]
 800eb6e:	701e      	strb	r6, [r3, #0]
 800eb70:	6962      	ldr	r2, [r4, #20]
 800eb72:	1c43      	adds	r3, r0, #1
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d004      	beq.n	800eb82 <__swbuf_r+0x6e>
 800eb78:	89a3      	ldrh	r3, [r4, #12]
 800eb7a:	07db      	lsls	r3, r3, #31
 800eb7c:	d5e1      	bpl.n	800eb42 <__swbuf_r+0x2e>
 800eb7e:	2e0a      	cmp	r6, #10
 800eb80:	d1df      	bne.n	800eb42 <__swbuf_r+0x2e>
 800eb82:	4621      	mov	r1, r4
 800eb84:	4628      	mov	r0, r5
 800eb86:	f7ff fda1 	bl	800e6cc <_fflush_r>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d0d9      	beq.n	800eb42 <__swbuf_r+0x2e>
 800eb8e:	e7d6      	b.n	800eb3e <__swbuf_r+0x2a>

0800eb90 <__swsetup_r>:
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	4b29      	ldr	r3, [pc, #164]	@ (800ec38 <__swsetup_r+0xa8>)
 800eb94:	4605      	mov	r5, r0
 800eb96:	6818      	ldr	r0, [r3, #0]
 800eb98:	460c      	mov	r4, r1
 800eb9a:	b118      	cbz	r0, 800eba4 <__swsetup_r+0x14>
 800eb9c:	6a03      	ldr	r3, [r0, #32]
 800eb9e:	b90b      	cbnz	r3, 800eba4 <__swsetup_r+0x14>
 800eba0:	f7fe f8d6 	bl	800cd50 <__sinit>
 800eba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eba8:	0719      	lsls	r1, r3, #28
 800ebaa:	d422      	bmi.n	800ebf2 <__swsetup_r+0x62>
 800ebac:	06da      	lsls	r2, r3, #27
 800ebae:	d407      	bmi.n	800ebc0 <__swsetup_r+0x30>
 800ebb0:	2209      	movs	r2, #9
 800ebb2:	602a      	str	r2, [r5, #0]
 800ebb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebb8:	81a3      	strh	r3, [r4, #12]
 800ebba:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbe:	e033      	b.n	800ec28 <__swsetup_r+0x98>
 800ebc0:	0758      	lsls	r0, r3, #29
 800ebc2:	d512      	bpl.n	800ebea <__swsetup_r+0x5a>
 800ebc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebc6:	b141      	cbz	r1, 800ebda <__swsetup_r+0x4a>
 800ebc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ebcc:	4299      	cmp	r1, r3
 800ebce:	d002      	beq.n	800ebd6 <__swsetup_r+0x46>
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f7fe ffd3 	bl	800db7c <_free_r>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ebe0:	81a3      	strh	r3, [r4, #12]
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	6063      	str	r3, [r4, #4]
 800ebe6:	6923      	ldr	r3, [r4, #16]
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	f043 0308 	orr.w	r3, r3, #8
 800ebf0:	81a3      	strh	r3, [r4, #12]
 800ebf2:	6923      	ldr	r3, [r4, #16]
 800ebf4:	b94b      	cbnz	r3, 800ec0a <__swsetup_r+0x7a>
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ebfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec00:	d003      	beq.n	800ec0a <__swsetup_r+0x7a>
 800ec02:	4621      	mov	r1, r4
 800ec04:	4628      	mov	r0, r5
 800ec06:	f000 f883 	bl	800ed10 <__smakebuf_r>
 800ec0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec0e:	f013 0201 	ands.w	r2, r3, #1
 800ec12:	d00a      	beq.n	800ec2a <__swsetup_r+0x9a>
 800ec14:	2200      	movs	r2, #0
 800ec16:	60a2      	str	r2, [r4, #8]
 800ec18:	6962      	ldr	r2, [r4, #20]
 800ec1a:	4252      	negs	r2, r2
 800ec1c:	61a2      	str	r2, [r4, #24]
 800ec1e:	6922      	ldr	r2, [r4, #16]
 800ec20:	b942      	cbnz	r2, 800ec34 <__swsetup_r+0xa4>
 800ec22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ec26:	d1c5      	bne.n	800ebb4 <__swsetup_r+0x24>
 800ec28:	bd38      	pop	{r3, r4, r5, pc}
 800ec2a:	0799      	lsls	r1, r3, #30
 800ec2c:	bf58      	it	pl
 800ec2e:	6962      	ldrpl	r2, [r4, #20]
 800ec30:	60a2      	str	r2, [r4, #8]
 800ec32:	e7f4      	b.n	800ec1e <__swsetup_r+0x8e>
 800ec34:	2000      	movs	r0, #0
 800ec36:	e7f7      	b.n	800ec28 <__swsetup_r+0x98>
 800ec38:	24000044 	.word	0x24000044

0800ec3c <_raise_r>:
 800ec3c:	291f      	cmp	r1, #31
 800ec3e:	b538      	push	{r3, r4, r5, lr}
 800ec40:	4605      	mov	r5, r0
 800ec42:	460c      	mov	r4, r1
 800ec44:	d904      	bls.n	800ec50 <_raise_r+0x14>
 800ec46:	2316      	movs	r3, #22
 800ec48:	6003      	str	r3, [r0, #0]
 800ec4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ec52:	b112      	cbz	r2, 800ec5a <_raise_r+0x1e>
 800ec54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec58:	b94b      	cbnz	r3, 800ec6e <_raise_r+0x32>
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f000 f830 	bl	800ecc0 <_getpid_r>
 800ec60:	4622      	mov	r2, r4
 800ec62:	4601      	mov	r1, r0
 800ec64:	4628      	mov	r0, r5
 800ec66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec6a:	f000 b817 	b.w	800ec9c <_kill_r>
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d00a      	beq.n	800ec88 <_raise_r+0x4c>
 800ec72:	1c59      	adds	r1, r3, #1
 800ec74:	d103      	bne.n	800ec7e <_raise_r+0x42>
 800ec76:	2316      	movs	r3, #22
 800ec78:	6003      	str	r3, [r0, #0]
 800ec7a:	2001      	movs	r0, #1
 800ec7c:	e7e7      	b.n	800ec4e <_raise_r+0x12>
 800ec7e:	2100      	movs	r1, #0
 800ec80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec84:	4620      	mov	r0, r4
 800ec86:	4798      	blx	r3
 800ec88:	2000      	movs	r0, #0
 800ec8a:	e7e0      	b.n	800ec4e <_raise_r+0x12>

0800ec8c <raise>:
 800ec8c:	4b02      	ldr	r3, [pc, #8]	@ (800ec98 <raise+0xc>)
 800ec8e:	4601      	mov	r1, r0
 800ec90:	6818      	ldr	r0, [r3, #0]
 800ec92:	f7ff bfd3 	b.w	800ec3c <_raise_r>
 800ec96:	bf00      	nop
 800ec98:	24000044 	.word	0x24000044

0800ec9c <_kill_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	4d07      	ldr	r5, [pc, #28]	@ (800ecbc <_kill_r+0x20>)
 800eca0:	2300      	movs	r3, #0
 800eca2:	4604      	mov	r4, r0
 800eca4:	4608      	mov	r0, r1
 800eca6:	4611      	mov	r1, r2
 800eca8:	602b      	str	r3, [r5, #0]
 800ecaa:	f7f2 fb5f 	bl	800136c <_kill>
 800ecae:	1c43      	adds	r3, r0, #1
 800ecb0:	d102      	bne.n	800ecb8 <_kill_r+0x1c>
 800ecb2:	682b      	ldr	r3, [r5, #0]
 800ecb4:	b103      	cbz	r3, 800ecb8 <_kill_r+0x1c>
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	bd38      	pop	{r3, r4, r5, pc}
 800ecba:	bf00      	nop
 800ecbc:	240053fc 	.word	0x240053fc

0800ecc0 <_getpid_r>:
 800ecc0:	f7f2 bb4c 	b.w	800135c <_getpid>

0800ecc4 <__swhatbuf_r>:
 800ecc4:	b570      	push	{r4, r5, r6, lr}
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eccc:	2900      	cmp	r1, #0
 800ecce:	b096      	sub	sp, #88	@ 0x58
 800ecd0:	4615      	mov	r5, r2
 800ecd2:	461e      	mov	r6, r3
 800ecd4:	da0d      	bge.n	800ecf2 <__swhatbuf_r+0x2e>
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ecdc:	f04f 0100 	mov.w	r1, #0
 800ece0:	bf14      	ite	ne
 800ece2:	2340      	movne	r3, #64	@ 0x40
 800ece4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ece8:	2000      	movs	r0, #0
 800ecea:	6031      	str	r1, [r6, #0]
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	b016      	add	sp, #88	@ 0x58
 800ecf0:	bd70      	pop	{r4, r5, r6, pc}
 800ecf2:	466a      	mov	r2, sp
 800ecf4:	f000 f848 	bl	800ed88 <_fstat_r>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	dbec      	blt.n	800ecd6 <__swhatbuf_r+0x12>
 800ecfc:	9901      	ldr	r1, [sp, #4]
 800ecfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed06:	4259      	negs	r1, r3
 800ed08:	4159      	adcs	r1, r3
 800ed0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed0e:	e7eb      	b.n	800ece8 <__swhatbuf_r+0x24>

0800ed10 <__smakebuf_r>:
 800ed10:	898b      	ldrh	r3, [r1, #12]
 800ed12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed14:	079d      	lsls	r5, r3, #30
 800ed16:	4606      	mov	r6, r0
 800ed18:	460c      	mov	r4, r1
 800ed1a:	d507      	bpl.n	800ed2c <__smakebuf_r+0x1c>
 800ed1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed20:	6023      	str	r3, [r4, #0]
 800ed22:	6123      	str	r3, [r4, #16]
 800ed24:	2301      	movs	r3, #1
 800ed26:	6163      	str	r3, [r4, #20]
 800ed28:	b003      	add	sp, #12
 800ed2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed2c:	ab01      	add	r3, sp, #4
 800ed2e:	466a      	mov	r2, sp
 800ed30:	f7ff ffc8 	bl	800ecc4 <__swhatbuf_r>
 800ed34:	9f00      	ldr	r7, [sp, #0]
 800ed36:	4605      	mov	r5, r0
 800ed38:	4639      	mov	r1, r7
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	f7fd fab8 	bl	800c2b0 <_malloc_r>
 800ed40:	b948      	cbnz	r0, 800ed56 <__smakebuf_r+0x46>
 800ed42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed46:	059a      	lsls	r2, r3, #22
 800ed48:	d4ee      	bmi.n	800ed28 <__smakebuf_r+0x18>
 800ed4a:	f023 0303 	bic.w	r3, r3, #3
 800ed4e:	f043 0302 	orr.w	r3, r3, #2
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	e7e2      	b.n	800ed1c <__smakebuf_r+0xc>
 800ed56:	89a3      	ldrh	r3, [r4, #12]
 800ed58:	6020      	str	r0, [r4, #0]
 800ed5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed5e:	81a3      	strh	r3, [r4, #12]
 800ed60:	9b01      	ldr	r3, [sp, #4]
 800ed62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ed66:	b15b      	cbz	r3, 800ed80 <__smakebuf_r+0x70>
 800ed68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	f000 f81d 	bl	800edac <_isatty_r>
 800ed72:	b128      	cbz	r0, 800ed80 <__smakebuf_r+0x70>
 800ed74:	89a3      	ldrh	r3, [r4, #12]
 800ed76:	f023 0303 	bic.w	r3, r3, #3
 800ed7a:	f043 0301 	orr.w	r3, r3, #1
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	431d      	orrs	r5, r3
 800ed84:	81a5      	strh	r5, [r4, #12]
 800ed86:	e7cf      	b.n	800ed28 <__smakebuf_r+0x18>

0800ed88 <_fstat_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4d07      	ldr	r5, [pc, #28]	@ (800eda8 <_fstat_r+0x20>)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	4608      	mov	r0, r1
 800ed92:	4611      	mov	r1, r2
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	f7f2 fb49 	bl	800142c <_fstat>
 800ed9a:	1c43      	adds	r3, r0, #1
 800ed9c:	d102      	bne.n	800eda4 <_fstat_r+0x1c>
 800ed9e:	682b      	ldr	r3, [r5, #0]
 800eda0:	b103      	cbz	r3, 800eda4 <_fstat_r+0x1c>
 800eda2:	6023      	str	r3, [r4, #0]
 800eda4:	bd38      	pop	{r3, r4, r5, pc}
 800eda6:	bf00      	nop
 800eda8:	240053fc 	.word	0x240053fc

0800edac <_isatty_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	4d06      	ldr	r5, [pc, #24]	@ (800edc8 <_isatty_r+0x1c>)
 800edb0:	2300      	movs	r3, #0
 800edb2:	4604      	mov	r4, r0
 800edb4:	4608      	mov	r0, r1
 800edb6:	602b      	str	r3, [r5, #0]
 800edb8:	f7f2 fb48 	bl	800144c <_isatty>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_isatty_r+0x1a>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_isatty_r+0x1a>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	240053fc 	.word	0x240053fc
 800edcc:	00000000 	.word	0x00000000

0800edd0 <fmod>:
 800edd0:	b508      	push	{r3, lr}
 800edd2:	ed2d 8b04 	vpush	{d8-d9}
 800edd6:	eeb0 9b40 	vmov.f64	d9, d0
 800edda:	eeb0 8b41 	vmov.f64	d8, d1
 800edde:	f000 f879 	bl	800eed4 <__ieee754_fmod>
 800ede2:	eeb4 9b48 	vcmp.f64	d9, d8
 800ede6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edea:	d60c      	bvs.n	800ee06 <fmod+0x36>
 800edec:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800ee10 <fmod+0x40>
 800edf0:	eeb4 8b49 	vcmp.f64	d8, d9
 800edf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf8:	d105      	bne.n	800ee06 <fmod+0x36>
 800edfa:	f7fe f8a5 	bl	800cf48 <__errno>
 800edfe:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ee02:	2321      	movs	r3, #33	@ 0x21
 800ee04:	6003      	str	r3, [r0, #0]
 800ee06:	ecbd 8b04 	vpop	{d8-d9}
 800ee0a:	bd08      	pop	{r3, pc}
 800ee0c:	f3af 8000 	nop.w
	...

0800ee18 <sqrt>:
 800ee18:	b508      	push	{r3, lr}
 800ee1a:	ed2d 8b04 	vpush	{d8-d9}
 800ee1e:	eeb0 8b40 	vmov.f64	d8, d0
 800ee22:	f000 f853 	bl	800eecc <__ieee754_sqrt>
 800ee26:	eeb4 8b48 	vcmp.f64	d8, d8
 800ee2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2e:	d60c      	bvs.n	800ee4a <sqrt+0x32>
 800ee30:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800ee50 <sqrt+0x38>
 800ee34:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ee38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3c:	d505      	bpl.n	800ee4a <sqrt+0x32>
 800ee3e:	f7fe f883 	bl	800cf48 <__errno>
 800ee42:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ee46:	2321      	movs	r3, #33	@ 0x21
 800ee48:	6003      	str	r3, [r0, #0]
 800ee4a:	ecbd 8b04 	vpop	{d8-d9}
 800ee4e:	bd08      	pop	{r3, pc}
	...

0800ee58 <acosf>:
 800ee58:	b508      	push	{r3, lr}
 800ee5a:	ed2d 8b02 	vpush	{d8}
 800ee5e:	eeb0 8a40 	vmov.f32	s16, s0
 800ee62:	f000 f943 	bl	800f0ec <__ieee754_acosf>
 800ee66:	eeb4 8a48 	vcmp.f32	s16, s16
 800ee6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6e:	eef0 8a40 	vmov.f32	s17, s0
 800ee72:	d615      	bvs.n	800eea0 <acosf+0x48>
 800ee74:	eeb0 0a48 	vmov.f32	s0, s16
 800ee78:	f000 f81a 	bl	800eeb0 <fabsf>
 800ee7c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ee80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ee84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee88:	dd0a      	ble.n	800eea0 <acosf+0x48>
 800ee8a:	f7fe f85d 	bl	800cf48 <__errno>
 800ee8e:	ecbd 8b02 	vpop	{d8}
 800ee92:	2321      	movs	r3, #33	@ 0x21
 800ee94:	6003      	str	r3, [r0, #0]
 800ee96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ee9a:	4804      	ldr	r0, [pc, #16]	@ (800eeac <acosf+0x54>)
 800ee9c:	f000 b810 	b.w	800eec0 <nanf>
 800eea0:	eeb0 0a68 	vmov.f32	s0, s17
 800eea4:	ecbd 8b02 	vpop	{d8}
 800eea8:	bd08      	pop	{r3, pc}
 800eeaa:	bf00      	nop
 800eeac:	08011676 	.word	0x08011676

0800eeb0 <fabsf>:
 800eeb0:	ee10 3a10 	vmov	r3, s0
 800eeb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eeb8:	ee00 3a10 	vmov	s0, r3
 800eebc:	4770      	bx	lr
	...

0800eec0 <nanf>:
 800eec0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eec8 <nanf+0x8>
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	7fc00000 	.word	0x7fc00000

0800eecc <__ieee754_sqrt>:
 800eecc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800eed0:	4770      	bx	lr
	...

0800eed4 <__ieee754_fmod>:
 800eed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eed8:	ed8d 1b00 	vstr	d1, [sp]
 800eedc:	e9dd 6500 	ldrd	r6, r5, [sp]
 800eee0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800eee4:	ea56 0307 	orrs.w	r3, r6, r7
 800eee8:	46b6      	mov	lr, r6
 800eeea:	d00d      	beq.n	800ef08 <__ieee754_fmod+0x34>
 800eeec:	ee10 ca90 	vmov	ip, s1
 800eef0:	4b78      	ldr	r3, [pc, #480]	@ (800f0d4 <__ieee754_fmod+0x200>)
 800eef2:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800eef6:	4598      	cmp	r8, r3
 800eef8:	d806      	bhi.n	800ef08 <__ieee754_fmod+0x34>
 800eefa:	4273      	negs	r3, r6
 800eefc:	4a76      	ldr	r2, [pc, #472]	@ (800f0d8 <__ieee754_fmod+0x204>)
 800eefe:	4333      	orrs	r3, r6
 800ef00:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d908      	bls.n	800ef1a <__ieee754_fmod+0x46>
 800ef08:	ed9d 7b00 	vldr	d7, [sp]
 800ef0c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ef10:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800ef14:	b003      	add	sp, #12
 800ef16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef1a:	ee10 9a10 	vmov	r9, s0
 800ef1e:	45b8      	cmp	r8, r7
 800ef20:	4649      	mov	r1, r9
 800ef22:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800ef26:	dc09      	bgt.n	800ef3c <__ieee754_fmod+0x68>
 800ef28:	dbf4      	blt.n	800ef14 <__ieee754_fmod+0x40>
 800ef2a:	454e      	cmp	r6, r9
 800ef2c:	d8f2      	bhi.n	800ef14 <__ieee754_fmod+0x40>
 800ef2e:	d105      	bne.n	800ef3c <__ieee754_fmod+0x68>
 800ef30:	4b6a      	ldr	r3, [pc, #424]	@ (800f0dc <__ieee754_fmod+0x208>)
 800ef32:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800ef36:	ed93 0b00 	vldr	d0, [r3]
 800ef3a:	e7eb      	b.n	800ef14 <__ieee754_fmod+0x40>
 800ef3c:	4a66      	ldr	r2, [pc, #408]	@ (800f0d8 <__ieee754_fmod+0x204>)
 800ef3e:	ea1c 0f02 	tst.w	ip, r2
 800ef42:	d14a      	bne.n	800efda <__ieee754_fmod+0x106>
 800ef44:	f1b8 0f00 	cmp.w	r8, #0
 800ef48:	d13f      	bne.n	800efca <__ieee754_fmod+0xf6>
 800ef4a:	4865      	ldr	r0, [pc, #404]	@ (800f0e0 <__ieee754_fmod+0x20c>)
 800ef4c:	464b      	mov	r3, r9
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	dc38      	bgt.n	800efc4 <__ieee754_fmod+0xf0>
 800ef52:	4215      	tst	r5, r2
 800ef54:	d150      	bne.n	800eff8 <__ieee754_fmod+0x124>
 800ef56:	2f00      	cmp	r7, #0
 800ef58:	d147      	bne.n	800efea <__ieee754_fmod+0x116>
 800ef5a:	4a61      	ldr	r2, [pc, #388]	@ (800f0e0 <__ieee754_fmod+0x20c>)
 800ef5c:	4633      	mov	r3, r6
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	dc40      	bgt.n	800efe4 <__ieee754_fmod+0x110>
 800ef62:	4b60      	ldr	r3, [pc, #384]	@ (800f0e4 <__ieee754_fmod+0x210>)
 800ef64:	4298      	cmp	r0, r3
 800ef66:	db4b      	blt.n	800f000 <__ieee754_fmod+0x12c>
 800ef68:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800ef6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef70:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800f0e4 <__ieee754_fmod+0x210>
 800ef74:	4562      	cmp	r2, ip
 800ef76:	db58      	blt.n	800f02a <__ieee754_fmod+0x156>
 800ef78:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ef7c:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800ef80:	1a80      	subs	r0, r0, r2
 800ef82:	1b5e      	subs	r6, r3, r5
 800ef84:	eba1 070e 	sub.w	r7, r1, lr
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d164      	bne.n	800f056 <__ieee754_fmod+0x182>
 800ef8c:	4571      	cmp	r1, lr
 800ef8e:	bf38      	it	cc
 800ef90:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800ef94:	2e00      	cmp	r6, #0
 800ef96:	bfa4      	itt	ge
 800ef98:	4639      	movge	r1, r7
 800ef9a:	4633      	movge	r3, r6
 800ef9c:	ea53 0001 	orrs.w	r0, r3, r1
 800efa0:	d0c6      	beq.n	800ef30 <__ieee754_fmod+0x5c>
 800efa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efa6:	db6b      	blt.n	800f080 <__ieee754_fmod+0x1ac>
 800efa8:	484e      	ldr	r0, [pc, #312]	@ (800f0e4 <__ieee754_fmod+0x210>)
 800efaa:	4282      	cmp	r2, r0
 800efac:	db6e      	blt.n	800f08c <__ieee754_fmod+0x1b8>
 800efae:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800efb2:	4323      	orrs	r3, r4
 800efb4:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800efb8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800efbc:	460c      	mov	r4, r1
 800efbe:	ec45 4b10 	vmov	d0, r4, r5
 800efc2:	e7a7      	b.n	800ef14 <__ieee754_fmod+0x40>
 800efc4:	3801      	subs	r0, #1
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	e7c1      	b.n	800ef4e <__ieee754_fmod+0x7a>
 800efca:	4846      	ldr	r0, [pc, #280]	@ (800f0e4 <__ieee754_fmod+0x210>)
 800efcc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	ddbe      	ble.n	800ef52 <__ieee754_fmod+0x7e>
 800efd4:	3801      	subs	r0, #1
 800efd6:	005b      	lsls	r3, r3, #1
 800efd8:	e7fa      	b.n	800efd0 <__ieee754_fmod+0xfc>
 800efda:	ea4f 5028 	mov.w	r0, r8, asr #20
 800efde:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800efe2:	e7b6      	b.n	800ef52 <__ieee754_fmod+0x7e>
 800efe4:	3a01      	subs	r2, #1
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	e7b9      	b.n	800ef5e <__ieee754_fmod+0x8a>
 800efea:	4a3e      	ldr	r2, [pc, #248]	@ (800f0e4 <__ieee754_fmod+0x210>)
 800efec:	02fb      	lsls	r3, r7, #11
 800efee:	2b00      	cmp	r3, #0
 800eff0:	ddb7      	ble.n	800ef62 <__ieee754_fmod+0x8e>
 800eff2:	3a01      	subs	r2, #1
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	e7fa      	b.n	800efee <__ieee754_fmod+0x11a>
 800eff8:	153a      	asrs	r2, r7, #20
 800effa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800effe:	e7b0      	b.n	800ef62 <__ieee754_fmod+0x8e>
 800f000:	eba3 0c00 	sub.w	ip, r3, r0
 800f004:	f1bc 0f1f 	cmp.w	ip, #31
 800f008:	dc09      	bgt.n	800f01e <__ieee754_fmod+0x14a>
 800f00a:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800f00e:	fa08 f10c 	lsl.w	r1, r8, ip
 800f012:	fa29 f303 	lsr.w	r3, r9, r3
 800f016:	430b      	orrs	r3, r1
 800f018:	fa09 f10c 	lsl.w	r1, r9, ip
 800f01c:	e7a8      	b.n	800ef70 <__ieee754_fmod+0x9c>
 800f01e:	4b32      	ldr	r3, [pc, #200]	@ (800f0e8 <__ieee754_fmod+0x214>)
 800f020:	1a1b      	subs	r3, r3, r0
 800f022:	fa09 f303 	lsl.w	r3, r9, r3
 800f026:	2100      	movs	r1, #0
 800f028:	e7a2      	b.n	800ef70 <__ieee754_fmod+0x9c>
 800f02a:	ebac 0c02 	sub.w	ip, ip, r2
 800f02e:	f1bc 0f1f 	cmp.w	ip, #31
 800f032:	dc09      	bgt.n	800f048 <__ieee754_fmod+0x174>
 800f034:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800f038:	fa07 f70c 	lsl.w	r7, r7, ip
 800f03c:	fa26 f505 	lsr.w	r5, r6, r5
 800f040:	433d      	orrs	r5, r7
 800f042:	fa06 fe0c 	lsl.w	lr, r6, ip
 800f046:	e79b      	b.n	800ef80 <__ieee754_fmod+0xac>
 800f048:	4d27      	ldr	r5, [pc, #156]	@ (800f0e8 <__ieee754_fmod+0x214>)
 800f04a:	1aad      	subs	r5, r5, r2
 800f04c:	fa06 f505 	lsl.w	r5, r6, r5
 800f050:	f04f 0e00 	mov.w	lr, #0
 800f054:	e794      	b.n	800ef80 <__ieee754_fmod+0xac>
 800f056:	4571      	cmp	r1, lr
 800f058:	bf38      	it	cc
 800f05a:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800f05e:	2e00      	cmp	r6, #0
 800f060:	da05      	bge.n	800f06e <__ieee754_fmod+0x19a>
 800f062:	0fce      	lsrs	r6, r1, #31
 800f064:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800f068:	0049      	lsls	r1, r1, #1
 800f06a:	3801      	subs	r0, #1
 800f06c:	e789      	b.n	800ef82 <__ieee754_fmod+0xae>
 800f06e:	ea56 0307 	orrs.w	r3, r6, r7
 800f072:	f43f af5d 	beq.w	800ef30 <__ieee754_fmod+0x5c>
 800f076:	0ffb      	lsrs	r3, r7, #31
 800f078:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800f07c:	0079      	lsls	r1, r7, #1
 800f07e:	e7f4      	b.n	800f06a <__ieee754_fmod+0x196>
 800f080:	0fc8      	lsrs	r0, r1, #31
 800f082:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f086:	0049      	lsls	r1, r1, #1
 800f088:	3a01      	subs	r2, #1
 800f08a:	e78a      	b.n	800efa2 <__ieee754_fmod+0xce>
 800f08c:	1a80      	subs	r0, r0, r2
 800f08e:	2814      	cmp	r0, #20
 800f090:	dc0c      	bgt.n	800f0ac <__ieee754_fmod+0x1d8>
 800f092:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f096:	fa03 f202 	lsl.w	r2, r3, r2
 800f09a:	40c1      	lsrs	r1, r0
 800f09c:	430a      	orrs	r2, r1
 800f09e:	4103      	asrs	r3, r0
 800f0a0:	ea43 0104 	orr.w	r1, r3, r4
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	ec41 0b10 	vmov	d0, r0, r1
 800f0aa:	e733      	b.n	800ef14 <__ieee754_fmod+0x40>
 800f0ac:	281f      	cmp	r0, #31
 800f0ae:	dc07      	bgt.n	800f0c0 <__ieee754_fmod+0x1ec>
 800f0b0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800f0b4:	40c1      	lsrs	r1, r0
 800f0b6:	fa03 f202 	lsl.w	r2, r3, r2
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	4623      	mov	r3, r4
 800f0be:	e7ef      	b.n	800f0a0 <__ieee754_fmod+0x1cc>
 800f0c0:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800f0c4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f0c8:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800f0cc:	32e2      	adds	r2, #226	@ 0xe2
 800f0ce:	fa43 f202 	asr.w	r2, r3, r2
 800f0d2:	e7f3      	b.n	800f0bc <__ieee754_fmod+0x1e8>
 800f0d4:	7fefffff 	.word	0x7fefffff
 800f0d8:	7ff00000 	.word	0x7ff00000
 800f0dc:	08011778 	.word	0x08011778
 800f0e0:	fffffbed 	.word	0xfffffbed
 800f0e4:	fffffc02 	.word	0xfffffc02
 800f0e8:	fffffbe2 	.word	0xfffffbe2

0800f0ec <__ieee754_acosf>:
 800f0ec:	b508      	push	{r3, lr}
 800f0ee:	ee10 3a10 	vmov	r3, s0
 800f0f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f0f6:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800f0fa:	ed2d 8b0c 	vpush	{d8-d13}
 800f0fe:	d109      	bne.n	800f114 <__ieee754_acosf+0x28>
 800f100:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 800f298 <__ieee754_acosf+0x1ac>
 800f104:	eddf 7a65 	vldr	s15, [pc, #404]	@ 800f29c <__ieee754_acosf+0x1b0>
 800f108:	2b00      	cmp	r3, #0
 800f10a:	fe37 0a80 	vselgt.f32	s0, s15, s0
 800f10e:	ecbd 8b0c 	vpop	{d8-d13}
 800f112:	bd08      	pop	{r3, pc}
 800f114:	d904      	bls.n	800f120 <__ieee754_acosf+0x34>
 800f116:	ee30 8a40 	vsub.f32	s16, s0, s0
 800f11a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f11e:	e7f6      	b.n	800f10e <__ieee754_acosf+0x22>
 800f120:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 800f124:	d23c      	bcs.n	800f1a0 <__ieee754_acosf+0xb4>
 800f126:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 800f12a:	f240 80b1 	bls.w	800f290 <__ieee754_acosf+0x1a4>
 800f12e:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f132:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 800f2a0 <__ieee754_acosf+0x1b4>
 800f136:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800f2a4 <__ieee754_acosf+0x1b8>
 800f13a:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 800f2a8 <__ieee754_acosf+0x1bc>
 800f13e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f142:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800f2ac <__ieee754_acosf+0x1c0>
 800f146:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f14a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f2b0 <__ieee754_acosf+0x1c4>
 800f14e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f152:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800f2b4 <__ieee754_acosf+0x1c8>
 800f156:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f15a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800f2b8 <__ieee754_acosf+0x1cc>
 800f15e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f162:	eddf 6a56 	vldr	s13, [pc, #344]	@ 800f2bc <__ieee754_acosf+0x1d0>
 800f166:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800f16a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 800f2c0 <__ieee754_acosf+0x1d4>
 800f16e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f172:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 800f2c4 <__ieee754_acosf+0x1d8>
 800f176:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f17a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f17e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f182:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f186:	eddf 7a50 	vldr	s15, [pc, #320]	@ 800f2c8 <__ieee754_acosf+0x1dc>
 800f18a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800f18e:	eee0 7a46 	vfms.f32	s15, s0, s12
 800f192:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f196:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 800f2cc <__ieee754_acosf+0x1e0>
 800f19a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f19e:	e7b6      	b.n	800f10e <__ieee754_acosf+0x22>
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	eddf da3f 	vldr	s27, [pc, #252]	@ 800f2a0 <__ieee754_acosf+0x1b4>
 800f1a6:	eddf ca3f 	vldr	s25, [pc, #252]	@ 800f2a4 <__ieee754_acosf+0x1b8>
 800f1aa:	ed9f ca40 	vldr	s24, [pc, #256]	@ 800f2ac <__ieee754_acosf+0x1c0>
 800f1ae:	eddf ba40 	vldr	s23, [pc, #256]	@ 800f2b0 <__ieee754_acosf+0x1c4>
 800f1b2:	ed9f ba40 	vldr	s22, [pc, #256]	@ 800f2b4 <__ieee754_acosf+0x1c8>
 800f1b6:	eddf 8a40 	vldr	s17, [pc, #256]	@ 800f2b8 <__ieee754_acosf+0x1cc>
 800f1ba:	ed9f da40 	vldr	s26, [pc, #256]	@ 800f2bc <__ieee754_acosf+0x1d0>
 800f1be:	eddf aa3a 	vldr	s21, [pc, #232]	@ 800f2a8 <__ieee754_acosf+0x1bc>
 800f1c2:	ed9f aa3f 	vldr	s20, [pc, #252]	@ 800f2c0 <__ieee754_acosf+0x1d4>
 800f1c6:	eddf 9a3f 	vldr	s19, [pc, #252]	@ 800f2c4 <__ieee754_acosf+0x1d8>
 800f1ca:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 800f1ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f1d2:	da28      	bge.n	800f226 <__ieee754_acosf+0x13a>
 800f1d4:	ee30 8a09 	vadd.f32	s16, s0, s18
 800f1d8:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f1dc:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800f1e0:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800f1e4:	eeac ca80 	vfma.f32	s24, s25, s0
 800f1e8:	eeaa aa80 	vfma.f32	s20, s21, s0
 800f1ec:	eeec ba00 	vfma.f32	s23, s24, s0
 800f1f0:	eeea 9a00 	vfma.f32	s19, s20, s0
 800f1f4:	eeab ba80 	vfma.f32	s22, s23, s0
 800f1f8:	eea9 9a80 	vfma.f32	s18, s19, s0
 800f1fc:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800f200:	ee68 8a80 	vmul.f32	s17, s17, s0
 800f204:	f000 f86a 	bl	800f2dc <__ieee754_sqrtf>
 800f208:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800f20c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800f2d0 <__ieee754_acosf+0x1e4>
 800f210:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f214:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800f218:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f21c:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800f2d4 <__ieee754_acosf+0x1e8>
 800f220:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f224:	e773      	b.n	800f10e <__ieee754_acosf+0x22>
 800f226:	ee39 8a40 	vsub.f32	s16, s18, s0
 800f22a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f22e:	eeb0 0a48 	vmov.f32	s0, s16
 800f232:	f000 f853 	bl	800f2dc <__ieee754_sqrtf>
 800f236:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800f23a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800f23e:	eeac ca88 	vfma.f32	s24, s25, s16
 800f242:	eeaa aa88 	vfma.f32	s20, s21, s16
 800f246:	eeec ba08 	vfma.f32	s23, s24, s16
 800f24a:	ee10 3a10 	vmov	r3, s0
 800f24e:	eeab ba88 	vfma.f32	s22, s23, s16
 800f252:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f256:	f023 030f 	bic.w	r3, r3, #15
 800f25a:	eeea 9a08 	vfma.f32	s19, s20, s16
 800f25e:	ee07 3a90 	vmov	s15, r3
 800f262:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800f266:	eeb0 6a48 	vmov.f32	s12, s16
 800f26a:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800f26e:	eea9 9a88 	vfma.f32	s18, s19, s16
 800f272:	ee70 6a27 	vadd.f32	s13, s0, s15
 800f276:	ee68 8a88 	vmul.f32	s17, s17, s16
 800f27a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f27e:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800f282:	eea0 7a26 	vfma.f32	s14, s0, s13
 800f286:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f28a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f28e:	e73e      	b.n	800f10e <__ieee754_acosf+0x22>
 800f290:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800f2d8 <__ieee754_acosf+0x1ec>
 800f294:	e73b      	b.n	800f10e <__ieee754_acosf+0x22>
 800f296:	bf00      	nop
 800f298:	40490fdb 	.word	0x40490fdb
 800f29c:	00000000 	.word	0x00000000
 800f2a0:	3811ef08 	.word	0x3811ef08
 800f2a4:	3a4f7f04 	.word	0x3a4f7f04
 800f2a8:	bf303361 	.word	0xbf303361
 800f2ac:	bd241146 	.word	0xbd241146
 800f2b0:	3e4e0aa8 	.word	0x3e4e0aa8
 800f2b4:	bea6b090 	.word	0xbea6b090
 800f2b8:	3e2aaaab 	.word	0x3e2aaaab
 800f2bc:	3d9dc62e 	.word	0x3d9dc62e
 800f2c0:	4001572d 	.word	0x4001572d
 800f2c4:	c019d139 	.word	0xc019d139
 800f2c8:	33a22168 	.word	0x33a22168
 800f2cc:	3fc90fda 	.word	0x3fc90fda
 800f2d0:	b3a22168 	.word	0xb3a22168
 800f2d4:	40490fda 	.word	0x40490fda
 800f2d8:	3fc90fdb 	.word	0x3fc90fdb

0800f2dc <__ieee754_sqrtf>:
 800f2dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f2e0:	4770      	bx	lr
	...

0800f2e4 <_init>:
 800f2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e6:	bf00      	nop
 800f2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ea:	bc08      	pop	{r3}
 800f2ec:	469e      	mov	lr, r3
 800f2ee:	4770      	bx	lr

0800f2f0 <_fini>:
 800f2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f2:	bf00      	nop
 800f2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2f6:	bc08      	pop	{r3}
 800f2f8:	469e      	mov	lr, r3
 800f2fa:	4770      	bx	lr
