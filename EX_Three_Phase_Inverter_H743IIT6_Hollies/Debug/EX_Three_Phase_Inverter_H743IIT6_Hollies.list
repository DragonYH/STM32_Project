
EX_Three_Phase_Inverter_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002578  08014f28  08014f28  00015f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080174a0  080174a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080174a8  080174a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080174ac  080174ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f4  24000000  080174b0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000939c  240002f4  080177a4  000192f4  2**2
                  ALLOC
  8 ._user_heap_stack 0000c000  24009690  080177a4  00019690  2**0
                  ALLOC
  9 ._DTCM_Area   00000000  20000000  20000000  000192f4  2**0
                  CONTENTS
 10 .ARM.attributes 0000002e  00000000  00000000  000192f4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003a4f2  00000000  00000000  00019322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000080ef  00000000  00000000  00053814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002728  00000000  00000000  0005b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001d6d  00000000  00000000  0005e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041525  00000000  00000000  0005fd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000376ca  00000000  00000000  000a12c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00176ca7  00000000  00000000  000d898c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  0024f633  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b258  00000000  00000000  0024f6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000076  00000000  00000000  0025a944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000005c1  00000000  00000000  0025a9ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000058  00000000  00000000  0025af7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014f0c 	.word	0x08014f0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	08014f0c 	.word	0x08014f0c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f012 fa5a 	bl	8012a72 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fd29 	bl	800201c <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 fdee 	bl	80011b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 fe18 	bl	8002224 <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 fdd9 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000310 	.word	0x24000310
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f001 ff1b 	bl	80024bc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fc26 	bl	8001edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fc3d 	bl	8001f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  OLED_Init();
 80006b0:	f010 fa58 	bl	8010b64 <OLED_Init>
  ad7606_Init();
 80006b4:	f00f fe18 	bl	80102e8 <ad7606_Init>
  INA228_config(INA228_0);
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f00f ff28 	bl	8010512 <INA228_config>
  pll_Init_V(&signal_V, 50, 20000, 10.f);
 80006c2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80006c6:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006ca:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8000764 <MX_FREERTOS_Init+0xb8>
 80006ce:	4826      	ldr	r0, [pc, #152]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 80006d0:	f010 fd72 	bl	80111b8 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006d4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006d8:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8000764 <MX_FREERTOS_Init+0xb8>
 80006dc:	4823      	ldr	r0, [pc, #140]	@ (800076c <MX_FREERTOS_Init+0xc0>)
 80006de:	f010 fe1b 	bl	8011318 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	4822      	ldr	r0, [pc, #136]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 80006e6:	f008 fd9b 	bl	8009220 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	4820      	ldr	r0, [pc, #128]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 80006ee:	f008 fd97 	bl	8009220 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006f2:	2108      	movs	r1, #8
 80006f4:	481e      	ldr	r0, [pc, #120]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 80006f6:	f008 fd93 	bl	8009220 <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	481d      	ldr	r0, [pc, #116]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 80006fe:	f001 fcaf 	bl	8002060 <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	481c      	ldr	r0, [pc, #112]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 8000706:	f00f fe29 	bl	801035c <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 800070c:	2100      	movs	r1, #0
 800070e:	481c      	ldr	r0, [pc, #112]	@ (8000780 <MX_FREERTOS_Init+0xd4>)
 8000710:	f00c fb76 	bl	800ce00 <osThreadNew>
 8000714:	4603      	mov	r3, r0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_FREERTOS_Init+0xd8>)
 8000718:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 800071a:	4a1b      	ldr	r2, [pc, #108]	@ (8000788 <MX_FREERTOS_Init+0xdc>)
 800071c:	2100      	movs	r1, #0
 800071e:	481b      	ldr	r0, [pc, #108]	@ (800078c <MX_FREERTOS_Init+0xe0>)
 8000720:	f00c fb6e 	bl	800ce00 <osThreadNew>
 8000724:	4603      	mov	r3, r0
 8000726:	4a1a      	ldr	r2, [pc, #104]	@ (8000790 <MX_FREERTOS_Init+0xe4>)
 8000728:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 800072a:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <MX_FREERTOS_Init+0xe8>)
 800072c:	2100      	movs	r1, #0
 800072e:	481a      	ldr	r0, [pc, #104]	@ (8000798 <MX_FREERTOS_Init+0xec>)
 8000730:	f00c fb66 	bl	800ce00 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a19      	ldr	r2, [pc, #100]	@ (800079c <MX_FREERTOS_Init+0xf0>)
 8000738:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 800073a:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <MX_FREERTOS_Init+0xf4>)
 800073c:	2100      	movs	r1, #0
 800073e:	4819      	ldr	r0, [pc, #100]	@ (80007a4 <MX_FREERTOS_Init+0xf8>)
 8000740:	f00c fb5e 	bl	800ce00 <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a18      	ldr	r2, [pc, #96]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 8000748:	6013      	str	r3, [r2, #0]

  /* creation of acVControl */
  acVControlHandle = osThreadNew(StartACVContorl, NULL, &acVControl_attributes);
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <MX_FREERTOS_Init+0x100>)
 800074c:	2100      	movs	r1, #0
 800074e:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <MX_FREERTOS_Init+0x104>)
 8000750:	f00c fb56 	bl	800ce00 <osThreadNew>
 8000754:	4603      	mov	r3, r0
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <MX_FREERTOS_Init+0x108>)
 8000758:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	08016918 	.word	0x08016918
 8000764:	42480000 	.word	0x42480000
 8000768:	2400953c 	.word	0x2400953c
 800076c:	24009540 	.word	0x24009540
 8000770:	24000550 	.word	0x24000550
 8000774:	24000310 	.word	0x24000310
 8000778:	2400059c 	.word	0x2400059c
 800077c:	08015054 	.word	0x08015054
 8000780:	080007b9 	.word	0x080007b9
 8000784:	24000324 	.word	0x24000324
 8000788:	08015078 	.word	0x08015078
 800078c:	08000819 	.word	0x08000819
 8000790:	24000328 	.word	0x24000328
 8000794:	0801509c 	.word	0x0801509c
 8000798:	08000831 	.word	0x08000831
 800079c:	2400032c 	.word	0x2400032c
 80007a0:	080150c0 	.word	0x080150c0
 80007a4:	08000879 	.word	0x08000879
 80007a8:	24000330 	.word	0x24000330
 80007ac:	080150e4 	.word	0x080150e4
 80007b0:	080008d9 	.word	0x080008d9
 80007b4:	24000334 	.word	0x24000334

080007b8 <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007c0:	f00f f852 	bl	800f868 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007c4:	2101      	movs	r1, #1
 80007c6:	4813      	ldr	r0, [pc, #76]	@ (8000814 <StartStateLED+0x5c>)
 80007c8:	f002 f841 	bl	800284e <HAL_GPIO_TogglePin>
    osDelay(100);
 80007cc:	2064      	movs	r0, #100	@ 0x64
 80007ce:	f00c fba9 	bl	800cf24 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007d2:	2101      	movs	r1, #1
 80007d4:	480f      	ldr	r0, [pc, #60]	@ (8000814 <StartStateLED+0x5c>)
 80007d6:	f002 f83a 	bl	800284e <HAL_GPIO_TogglePin>
    osDelay(200);
 80007da:	20c8      	movs	r0, #200	@ 0xc8
 80007dc:	f00c fba2 	bl	800cf24 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007e0:	2101      	movs	r1, #1
 80007e2:	480c      	ldr	r0, [pc, #48]	@ (8000814 <StartStateLED+0x5c>)
 80007e4:	f002 f833 	bl	800284e <HAL_GPIO_TogglePin>
    osDelay(100);
 80007e8:	2064      	movs	r0, #100	@ 0x64
 80007ea:	f00c fb9b 	bl	800cf24 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007ee:	2101      	movs	r1, #1
 80007f0:	4808      	ldr	r0, [pc, #32]	@ (8000814 <StartStateLED+0x5c>)
 80007f2:	f002 f82c 	bl	800284e <HAL_GPIO_TogglePin>
    osDelay(200);
 80007f6:	20c8      	movs	r0, #200	@ 0xc8
 80007f8:	f00c fb94 	bl	800cf24 <osDelay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2102      	movs	r1, #2
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <StartStateLED+0x5c>)
 8000802:	f002 f80b 	bl	800281c <HAL_GPIO_WritePin>
    osDelay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080a:	f00c fb8b 	bl	800cf24 <osDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800080e:	bf00      	nop
 8000810:	e7d8      	b.n	80007c4 <StartStateLED+0xc>
 8000812:	bf00      	nop
 8000814:	58022000 	.word	0x58022000

08000818 <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */
  /* Infinite loop */
  for (;;)
  {
    appOLEDShow();
 8000820:	f000 f866 	bl	80008f0 <appOLEDShow>
    osDelay(100);
 8000824:	2064      	movs	r0, #100	@ 0x64
 8000826:	f00c fb7d 	bl	800cf24 <osDelay>
    appOLEDShow();
 800082a:	bf00      	nop
 800082c:	e7f8      	b.n	8000820 <StartOledShow+0x8>
	...

08000830 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <StartDcSamp+0x3c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f00f ff17 	bl	8010670 <INA228_getVBUS_V>
 8000842:	eef0 7a40 	vmov.f32	s15, s0
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <StartDcSamp+0x40>)
 8000848:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <StartDcSamp+0x3c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f00f ff91 	bl	8010778 <INA228_getCURRENT_A>
 8000856:	eef0 7a40 	vmov.f32	s15, s0
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <StartDcSamp+0x44>)
 800085c:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f00c fb5f 	bl	800cf24 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 8000866:	bf00      	nop
 8000868:	e7e6      	b.n	8000838 <StartDcSamp+0x8>
 800086a:	bf00      	nop
 800086c:	08016918 	.word	0x08016918
 8000870:	24009530 	.word	0x24009530
 8000874:	24009534 	.word	0x24009534

08000878 <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsartDebug */
  static uint8_t text[32] = {0};
  /* Infinite loop */
  for (;;)
  {
    sprintf((char *)text, "%5.2f %5.2f\n", signal_V->basic->rms_a, signal_V->basic->input_a);
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <StartUsartDebug+0x54>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	edd3 7a03 	vldr	s15, [r3, #12]
 800088a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <StartUsartDebug+0x54>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	edd3 7a00 	vldr	s15, [r3]
 8000898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800089c:	ed8d 7b00 	vstr	d7, [sp]
 80008a0:	ec53 2b16 	vmov	r2, r3, d6
 80008a4:	490a      	ldr	r1, [pc, #40]	@ (80008d0 <StartUsartDebug+0x58>)
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <StartUsartDebug+0x5c>)
 80008a8:	f012 f880 	bl	80129ac <siprintf>
    CDC_Transmit_FS(text, 32);
 80008ac:	2120      	movs	r1, #32
 80008ae:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <StartUsartDebug+0x5c>)
 80008b0:	f00f f89a 	bl	800f9e8 <CDC_Transmit_FS>
    memset(text, 0, 32);
 80008b4:	2220      	movs	r2, #32
 80008b6:	2100      	movs	r1, #0
 80008b8:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <StartUsartDebug+0x5c>)
 80008ba:	f012 f8da 	bl	8012a72 <memset>
    osDelay(500);
 80008be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008c2:	f00c fb2f 	bl	800cf24 <osDelay>
    sprintf((char *)text, "%5.2f %5.2f\n", signal_V->basic->rms_a, signal_V->basic->input_a);
 80008c6:	bf00      	nop
 80008c8:	e7da      	b.n	8000880 <StartUsartDebug+0x8>
 80008ca:	bf00      	nop
 80008cc:	2400953c 	.word	0x2400953c
 80008d0:	08014f60 	.word	0x08014f60
 80008d4:	24000338 	.word	0x24000338

080008d8 <StartACVContorl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartACVContorl */
void StartACVContorl(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartACVContorl */
  /* Infinite loop */
  for (;;)
  {
    appACVControl();
 80008e0:	f000 f8f8 	bl	8000ad4 <appACVControl>
    osDelay(25);
 80008e4:	2019      	movs	r0, #25
 80008e6:	f00c fb1d 	bl	800cf24 <osDelay>
    appACVControl();
 80008ea:	bf00      	nop
 80008ec:	e7f8      	b.n	80008e0 <StartACVContorl+0x8>
	...

080008f0 <appOLEDShow>:

/**
 * @brief OLED显示
 */
void appOLEDShow()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af02      	add	r7, sp, #8
  static uint8_t text[32] = {0};
  sprintf((char *)text, "Ua: %5.2f Ub: %5.2f", signal_V->basic->rms_a, signal_V->basic->rms_b);
 80008f6:	4b6a      	ldr	r3, [pc, #424]	@ (8000aa0 <appOLEDShow+0x1b0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8000900:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000904:	4b66      	ldr	r3, [pc, #408]	@ (8000aa0 <appOLEDShow+0x1b0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	edd3 7a04 	vldr	s15, [r3, #16]
 800090e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000912:	ed8d 7b00 	vstr	d7, [sp]
 8000916:	ec53 2b16 	vmov	r2, r3, d6
 800091a:	4962      	ldr	r1, [pc, #392]	@ (8000aa4 <appOLEDShow+0x1b4>)
 800091c:	4862      	ldr	r0, [pc, #392]	@ (8000aa8 <appOLEDShow+0x1b8>)
 800091e:	f012 f845 	bl	80129ac <siprintf>
  OLED_ShowString(0, 0, text, 12);
 8000922:	230c      	movs	r3, #12
 8000924:	4a60      	ldr	r2, [pc, #384]	@ (8000aa8 <appOLEDShow+0x1b8>)
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f010 f8e7 	bl	8010afc <OLED_ShowString>
  sprintf((char *)text, "Uc: %5.2f Ia: %5.2f", signal_V->basic->rms_c, signal_I->basic->rms_a);
 800092e:	4b5c      	ldr	r3, [pc, #368]	@ (8000aa0 <appOLEDShow+0x1b0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	edd3 7a05 	vldr	s15, [r3, #20]
 8000938:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800093c:	4b5b      	ldr	r3, [pc, #364]	@ (8000aac <appOLEDShow+0x1bc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	edd3 7a03 	vldr	s15, [r3, #12]
 8000946:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800094a:	ed8d 7b00 	vstr	d7, [sp]
 800094e:	ec53 2b16 	vmov	r2, r3, d6
 8000952:	4957      	ldr	r1, [pc, #348]	@ (8000ab0 <appOLEDShow+0x1c0>)
 8000954:	4854      	ldr	r0, [pc, #336]	@ (8000aa8 <appOLEDShow+0x1b8>)
 8000956:	f012 f829 	bl	80129ac <siprintf>
  OLED_ShowString(0, 12, text, 12);
 800095a:	230c      	movs	r3, #12
 800095c:	4a52      	ldr	r2, [pc, #328]	@ (8000aa8 <appOLEDShow+0x1b8>)
 800095e:	210c      	movs	r1, #12
 8000960:	2000      	movs	r0, #0
 8000962:	f010 f8cb 	bl	8010afc <OLED_ShowString>
  sprintf((char *)text, "Ib: %5.2f Ic: %5.2f", signal_I->basic->rms_b, signal_I->basic->rms_c);
 8000966:	4b51      	ldr	r3, [pc, #324]	@ (8000aac <appOLEDShow+0x1bc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000970:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000974:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <appOLEDShow+0x1bc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	edd3 7a05 	vldr	s15, [r3, #20]
 800097e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000982:	ed8d 7b00 	vstr	d7, [sp]
 8000986:	ec53 2b16 	vmov	r2, r3, d6
 800098a:	494a      	ldr	r1, [pc, #296]	@ (8000ab4 <appOLEDShow+0x1c4>)
 800098c:	4846      	ldr	r0, [pc, #280]	@ (8000aa8 <appOLEDShow+0x1b8>)
 800098e:	f012 f80d 	bl	80129ac <siprintf>
  OLED_ShowString(0, 24, text, 12);
 8000992:	230c      	movs	r3, #12
 8000994:	4a44      	ldr	r2, [pc, #272]	@ (8000aa8 <appOLEDShow+0x1b8>)
 8000996:	2118      	movs	r1, #24
 8000998:	2000      	movs	r0, #0
 800099a:	f010 f8af 	bl	8010afc <OLED_ShowString>
  sprintf((char *)text, "U: %5.2f I: %5.2f", U, I);
 800099e:	4b46      	ldr	r3, [pc, #280]	@ (8000ab8 <appOLEDShow+0x1c8>)
 80009a0:	edd3 7a00 	vldr	s15, [r3]
 80009a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009a8:	4b44      	ldr	r3, [pc, #272]	@ (8000abc <appOLEDShow+0x1cc>)
 80009aa:	edd3 7a00 	vldr	s15, [r3]
 80009ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009b2:	ed8d 7b00 	vstr	d7, [sp]
 80009b6:	ec53 2b16 	vmov	r2, r3, d6
 80009ba:	4941      	ldr	r1, [pc, #260]	@ (8000ac0 <appOLEDShow+0x1d0>)
 80009bc:	483a      	ldr	r0, [pc, #232]	@ (8000aa8 <appOLEDShow+0x1b8>)
 80009be:	f011 fff5 	bl	80129ac <siprintf>
  OLED_ShowString(0, 36, text, 12);
 80009c2:	230c      	movs	r3, #12
 80009c4:	4a38      	ldr	r2, [pc, #224]	@ (8000aa8 <appOLEDShow+0x1b8>)
 80009c6:	2124      	movs	r1, #36	@ 0x24
 80009c8:	2000      	movs	r0, #0
 80009ca:	f010 f897 	bl	8010afc <OLED_ShowString>
  float n = (signal_V->basic->rms_a * signal_I->basic->rms_a + signal_V->basic->rms_b * signal_I->basic->rms_b + signal_V->basic->rms_c * signal_I->basic->rms_c) / (U * I) * 100.f;
 80009ce:	4b34      	ldr	r3, [pc, #208]	@ (8000aa0 <appOLEDShow+0x1b0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80009d8:	4b34      	ldr	r3, [pc, #208]	@ (8000aac <appOLEDShow+0x1bc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	edd3 7a03 	vldr	s15, [r3, #12]
 80009e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009e6:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa0 <appOLEDShow+0x1b0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	edd3 6a04 	vldr	s13, [r3, #16]
 80009f0:	4b2e      	ldr	r3, [pc, #184]	@ (8000aac <appOLEDShow+0x1bc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80009fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a02:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <appOLEDShow+0x1b0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	edd3 6a05 	vldr	s13, [r3, #20]
 8000a0c:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <appOLEDShow+0x1bc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a1a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <appOLEDShow+0x1c8>)
 8000a20:	ed93 7a00 	vldr	s14, [r3]
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <appOLEDShow+0x1cc>)
 8000a26:	edd3 7a00 	vldr	s15, [r3]
 8000a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a32:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000ac4 <appOLEDShow+0x1d4>
 8000a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3a:	edc7 7a01 	vstr	s15, [r7, #4]
  if (n > 100.f)
 8000a3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a42:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000ac4 <appOLEDShow+0x1d4>
 8000a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4e:	dd02      	ble.n	8000a56 <appOLEDShow+0x166>
  {
    n = 100.f;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <appOLEDShow+0x1d8>)
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	e009      	b.n	8000a6a <appOLEDShow+0x17a>
  }
  else if (n < 0.f)
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	d502      	bpl.n	8000a6a <appOLEDShow+0x17a>
  {
    n = 0.f;
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  }
  sprintf((char *)text, "cnt: %4ld n: %5.2f%%", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1), n);
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <appOLEDShow+0x1dc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a78:	ed8d 7b00 	vstr	d7, [sp]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4914      	ldr	r1, [pc, #80]	@ (8000ad0 <appOLEDShow+0x1e0>)
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <appOLEDShow+0x1b8>)
 8000a82:	f011 ff93 	bl	80129ac <siprintf>
  OLED_ShowString(0, 48, text, 12);
 8000a86:	230c      	movs	r3, #12
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <appOLEDShow+0x1b8>)
 8000a8a:	2130      	movs	r1, #48	@ 0x30
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f010 f835 	bl	8010afc <OLED_ShowString>
  OLED_Refresh();
 8000a92:	f00f fec3 	bl	801081c <OLED_Refresh>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2400953c 	.word	0x2400953c
 8000aa4:	08014f70 	.word	0x08014f70
 8000aa8:	24000358 	.word	0x24000358
 8000aac:	24009540 	.word	0x24009540
 8000ab0:	08014f84 	.word	0x08014f84
 8000ab4:	08014f98 	.word	0x08014f98
 8000ab8:	24009530 	.word	0x24009530
 8000abc:	24009534 	.word	0x24009534
 8000ac0:	08014fac 	.word	0x08014fac
 8000ac4:	42c80000 	.word	0x42c80000
 8000ac8:	42c80000 	.word	0x42c80000
 8000acc:	24000550 	.word	0x24000550
 8000ad0:	08014fc0 	.word	0x08014fc0

08000ad4 <appACVControl>:

/**
 * @brief 交流逆变电压控制
 */
void appACVControl()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  static PID pidACV;
  pid_Init(&pidACV, 0.01f, 0.1f, 0, 1.f, 0.f);
 8000ad8:	ed9f 2a0f 	vldr	s4, [pc, #60]	@ 8000b18 <appACVControl+0x44>
 8000adc:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8000ae0:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 8000b18 <appACVControl+0x44>
 8000ae4:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000b1c <appACVControl+0x48>
 8000ae8:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000b20 <appACVControl+0x4c>
 8000aec:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <appACVControl+0x50>)
 8000aee:	f010 f8bf 	bl	8010c70 <pid_Init>
  pid(&pidACV, 5.f, signal_V->basic->rms_a);
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <appACVControl+0x54>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000afc:	eef0 0a67 	vmov.f32	s1, s15
 8000b00:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <appACVControl+0x50>)
 8000b06:	f010 f8e2 	bl	8010cce <pid>
  M = pidACV.out;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <appACVControl+0x50>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <appACVControl+0x58>)
 8000b10:	6013      	str	r3, [r2, #0]
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	3dcccccd 	.word	0x3dcccccd
 8000b20:	3c23d70a 	.word	0x3c23d70a
 8000b24:	24000378 	.word	0x24000378
 8000b28:	2400953c 	.word	0x2400953c
 8000b2c:	24009538 	.word	0x24009538

08000b30 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	@ 0x30
 8000b34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b69      	ldr	r3, [pc, #420]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	4a67      	ldr	r2, [pc, #412]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b56:	4b65      	ldr	r3, [pc, #404]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b64:	4b61      	ldr	r3, [pc, #388]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	4a60      	ldr	r2, [pc, #384]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b74:	4b5d      	ldr	r3, [pc, #372]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b5a      	ldr	r3, [pc, #360]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	4a58      	ldr	r2, [pc, #352]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b92:	4b56      	ldr	r3, [pc, #344]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b52      	ldr	r3, [pc, #328]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	4a51      	ldr	r2, [pc, #324]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	4a49      	ldr	r2, [pc, #292]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bce:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bdc:	4b43      	ldr	r3, [pc, #268]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be2:	4a42      	ldr	r2, [pc, #264]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bec:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <MX_GPIO_Init+0x1bc>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	483c      	ldr	r0, [pc, #240]	@ (8000cf0 <MX_GPIO_Init+0x1c0>)
 8000c00:	f001 fe0c 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2102      	movs	r1, #2
 8000c08:	483a      	ldr	r0, [pc, #232]	@ (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000c0a:	f001 fe07 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2188      	movs	r1, #136	@ 0x88
 8000c12:	4839      	ldr	r0, [pc, #228]	@ (8000cf8 <MX_GPIO_Init+0x1c8>)
 8000c14:	f001 fe02 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4837      	ldr	r0, [pc, #220]	@ (8000cfc <MX_GPIO_Init+0x1cc>)
 8000c1e:	f001 fdfd 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2140      	movs	r1, #64	@ 0x40
 8000c26:	4835      	ldr	r0, [pc, #212]	@ (8000cfc <MX_GPIO_Init+0x1cc>)
 8000c28:	f001 fdf8 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	482b      	ldr	r0, [pc, #172]	@ (8000cf0 <MX_GPIO_Init+0x1c0>)
 8000c44:	f001 fc3a 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4825      	ldr	r0, [pc, #148]	@ (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000c60:	f001 fc2c 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000c64:	2388      	movs	r3, #136	@ 0x88
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481f      	ldr	r0, [pc, #124]	@ (8000cf8 <MX_GPIO_Init+0x1c8>)
 8000c7c:	f001 fc1e 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000c80:	2340      	movs	r3, #64	@ 0x40
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4818      	ldr	r0, [pc, #96]	@ (8000cf8 <MX_GPIO_Init+0x1c8>)
 8000c96:	f001 fc11 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <MX_GPIO_Init+0x1cc>)
 8000cb2:	f001 fc03 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000cb6:	2340      	movs	r3, #64	@ 0x40
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <MX_GPIO_Init+0x1cc>)
 8000cce:	f001 fbf5 	bl	80024bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2017      	movs	r0, #23
 8000cd8:	f001 f900 	bl	8001edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cdc:	2017      	movs	r0, #23
 8000cde:	f001 f917 	bl	8001f10 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	@ 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58020800 	.word	0x58020800
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58021800 	.word	0x58021800
 8000cfc:	58022000 	.word	0x58022000

08000d00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <MX_I2C1_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <MX_I2C1_Init+0x7c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3a:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d3c:	f001 fdbc 	bl	80028b8 <HAL_I2C_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d46:	f000 fa33 	bl	80011b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4809      	ldr	r0, [pc, #36]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d4e:	f002 fb3f 	bl	80033d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d58:	f000 fa2a 	bl	80011b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d60:	f002 fb81 	bl	8003466 <HAL_I2CEx_ConfigDigitalFilter>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 fa21 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2400039c 	.word	0x2400039c
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	307075b1 	.word	0x307075b1

08000d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0ba      	sub	sp, #232	@ 0xe8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	22c0      	movs	r2, #192	@ 0xc0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f011 fe66 	bl	8012a72 <memset>
  if(i2cHandle->Instance==I2C1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a26      	ldr	r2, [pc, #152]	@ (8000e44 <HAL_I2C_MspInit+0xc4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d145      	bne.n	8000e3c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db0:	f04f 0208 	mov.w	r2, #8
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 fe94 	bl	8005af4 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dd2:	f000 f9ed 	bl	80011b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df4:	23c0      	movs	r3, #192	@ 0xc0
 8000df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <HAL_I2C_MspInit+0xcc>)
 8000e1a:	f001 fb4f 	bl	80024bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e24:	4a08      	ldr	r2, [pc, #32]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	37e8      	adds	r7, #232	@ 0xe8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40005400 	.word	0x40005400
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58020400 	.word	0x58020400

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e56:	f000 f961 	bl	800111c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e5a:	4b40      	ldr	r3, [pc, #256]	@ (8000f5c <main+0x10c>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11b      	bne.n	8000e9e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e66:	f3bf 8f4f 	dsb	sy
}
 8000e6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e6c:	f3bf 8f6f 	isb	sy
}
 8000e70:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e72:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <main+0x10c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7a:	f3bf 8f4f 	dsb	sy
}
 8000e7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e80:	f3bf 8f6f 	isb	sy
}
 8000e84:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e86:	4b35      	ldr	r3, [pc, #212]	@ (8000f5c <main+0x10c>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a34      	ldr	r2, [pc, #208]	@ (8000f5c <main+0x10c>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e92:	f3bf 8f4f 	dsb	sy
}
 8000e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e98:	f3bf 8f6f 	isb	sy
}
 8000e9c:	e000      	b.n	8000ea0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e9e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f5c <main+0x10c>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d138      	bne.n	8000f1e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <main+0x10c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb4:	f3bf 8f4f 	dsb	sy
}
 8000eb8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000eba:	4b28      	ldr	r3, [pc, #160]	@ (8000f5c <main+0x10c>)
 8000ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ec0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0b5b      	lsrs	r3, r3, #13
 8000ec6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000eca:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ed4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	015a      	lsls	r2, r3, #5
 8000eda:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000ede:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ee4:	491d      	ldr	r1, [pc, #116]	@ (8000f5c <main+0x10c>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	1e5a      	subs	r2, r3, #1
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1ef      	bne.n	8000ed6 <main+0x86>
    } while(sets-- != 0U);
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	60ba      	str	r2, [r7, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e5      	bne.n	8000ecc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f00:	f3bf 8f4f 	dsb	sy
}
 8000f04:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <main+0x10c>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <main+0x10c>)
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
}
 8000f16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f18:	f3bf 8f6f 	isb	sy
}
 8000f1c:	e000      	b.n	8000f20 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f1e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fe98 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f81c 	bl	8000f60 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f28:	f000 f8c8 	bl	80010bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f7ff fe00 	bl	8000b30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f30:	f000 f944 	bl	80011bc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f34:	f000 f998 	bl	8001268 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f38:	f000 fd50 	bl	80019dc <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f3c:	f7ff fee0 	bl	8000d00 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f40:	f000 fc84 	bl	800184c <MX_TIM1_Init>
  MX_DAC1_Init();
 8000f44:	f7ff fb32 	bl	80005ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000f48:	f00e fc8e 	bl	800f868 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f4c:	f00b ff0e 	bl	800cd6c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f50:	f7ff fbac 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f54:	f00b ff2e 	bl	800cdb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <main+0x108>
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b09e      	sub	sp, #120	@ 0x78
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6a:	224c      	movs	r2, #76	@ 0x4c
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f011 fd7f 	bl	8012a72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2220      	movs	r2, #32
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f011 fd78 	bl	8012a72 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f82:	2002      	movs	r0, #2
 8000f84:	f003 fd5a 	bl	8004a3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b48      	ldr	r3, [pc, #288]	@ (80010b0 <SystemClock_Config+0x150>)
 8000f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f90:	4a47      	ldr	r2, [pc, #284]	@ (80010b0 <SystemClock_Config+0x150>)
 8000f92:	f023 0301 	bic.w	r3, r3, #1
 8000f96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f98:	4b45      	ldr	r3, [pc, #276]	@ (80010b0 <SystemClock_Config+0x150>)
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <SystemClock_Config+0x154>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a43      	ldr	r2, [pc, #268]	@ (80010b4 <SystemClock_Config+0x154>)
 8000fa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b41      	ldr	r3, [pc, #260]	@ (80010b4 <SystemClock_Config+0x154>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fba:	bf00      	nop
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80010b4 <SystemClock_Config+0x154>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fc8:	d1f8      	bne.n	8000fbc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b3b      	ldr	r3, [pc, #236]	@ (80010b8 <SystemClock_Config+0x158>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fd0:	4a39      	ldr	r2, [pc, #228]	@ (80010b8 <SystemClock_Config+0x158>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fda:	4b37      	ldr	r3, [pc, #220]	@ (80010b8 <SystemClock_Config+0x158>)
 8000fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <SystemClock_Config+0x154>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a30      	ldr	r2, [pc, #192]	@ (80010b4 <SystemClock_Config+0x154>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80010b4 <SystemClock_Config+0x154>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <SystemClock_Config+0x150>)
 8001004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001006:	4a2a      	ldr	r2, [pc, #168]	@ (80010b0 <SystemClock_Config+0x150>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800100e:	4b28      	ldr	r3, [pc, #160]	@ (80010b0 <SystemClock_Config+0x150>)
 8001010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800101a:	bf00      	nop
 800101c:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <SystemClock_Config+0x154>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001028:	d1f8      	bne.n	800101c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102a:	2301      	movs	r3, #1
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001032:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001038:	2302      	movs	r3, #2
 800103a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800103c:	2305      	movs	r3, #5
 800103e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001040:	23c0      	movs	r3, #192	@ 0xc0
 8001042:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001044:	2302      	movs	r3, #2
 8001046:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001048:	2314      	movs	r3, #20
 800104a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001050:	2308      	movs	r3, #8
 8001052:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001054:	2300      	movs	r3, #0
 8001056:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fd35 	bl	8004ad0 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800106c:	f000 f8a0 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	233f      	movs	r3, #63	@ 0x3f
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2303      	movs	r3, #3
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800107c:	2308      	movs	r3, #8
 800107e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001080:	2340      	movs	r3, #64	@ 0x40
 8001082:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001084:	2340      	movs	r3, #64	@ 0x40
 8001086:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800108e:	2340      	movs	r3, #64	@ 0x40
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2104      	movs	r1, #4
 8001098:	4618      	mov	r0, r3
 800109a:	f004 f973 	bl	8005384 <HAL_RCC_ClockConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80010a4:	f000 f884 	bl	80011b0 <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3778      	adds	r7, #120	@ 0x78
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58000400 	.word	0x58000400
 80010b4:	58024800 	.word	0x58024800
 80010b8:	58024400 	.word	0x58024400

080010bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0b0      	sub	sp, #192	@ 0xc0
 80010c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	22c0      	movs	r2, #192	@ 0xc0
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f011 fcd2 	bl	8012a72 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 80010ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 80010da:	2319      	movs	r3, #25
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 80010de:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80010fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001100:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fcf5 	bl	8005af4 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001110:	f000 f84e 	bl	80011b0 <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	37c0      	adds	r7, #192	@ 0xc0
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800112e:	f000 fefd 	bl	8001f2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001132:	2301      	movs	r3, #1
 8001134:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001136:	2300      	movs	r3, #0
 8001138:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800113a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800113e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001140:	2312      	movs	r3, #18
 8001142:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001148:	2301      	movs	r3, #1
 800114a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800114c:	2303      	movs	r3, #3
 800114e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001158:	2301      	movs	r3, #1
 800115a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001160:	463b      	mov	r3, r7
 8001162:	4618      	mov	r0, r3
 8001164:	f000 ff1a 	bl	8001f9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001168:	2301      	movs	r3, #1
 800116a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 800116c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001170:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001172:	2310      	movs	r3, #16
 8001174:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001176:	463b      	mov	r3, r7
 8001178:	4618      	mov	r0, r3
 800117a:	f000 ff0f 	bl	8001f9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800117e:	2004      	movs	r0, #4
 8001180:	f000 feec 	bl	8001f5c <HAL_MPU_Enable>

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800119e:	f000 fd95 	bl	8001ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40001000 	.word	0x40001000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <Error_Handler+0x8>

080011bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011c2:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <MX_SPI1_Init+0xa8>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d6:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011d8:	2207      	movs	r2, #7
 80011da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011dc:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_SPI1_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_SPI1_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800121c:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_SPI1_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <MX_SPI1_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_SPI1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_SPI1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_SPI1_Init+0xa4>)
 800124e:	f005 ffbf 	bl	80071d0 <HAL_SPI_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001258:	f7ff ffaa 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	240003f0 	.word	0x240003f0
 8001264:	40013000 	.word	0x40013000

08001268 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <MX_SPI2_Init+0xa8>)
 800126e:	4a29      	ldr	r2, [pc, #164]	@ (8001314 <MX_SPI2_Init+0xac>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <MX_SPI2_Init+0xa8>)
 8001274:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001278:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800127a:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <MX_SPI2_Init+0xa8>)
 800127c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001280:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <MX_SPI2_Init+0xa8>)
 8001284:	220f      	movs	r2, #15
 8001286:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_SPI2_Init+0xa8>)
 800128a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800128e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_SPI2_Init+0xa8>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <MX_SPI2_Init+0xa8>)
 8001298:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800129c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012a0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_SPI2_Init+0xa8>)
 80012fe:	f005 ff67 	bl	80071d0 <HAL_SPI_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001308:	f7ff ff52 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	24000478 	.word	0x24000478
 8001314:	40003800 	.word	0x40003800

08001318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a34      	ldr	r2, [pc, #208]	@ (8001408 <HAL_SPI_MspInit+0xf0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12e      	bne.n	8001398 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 800133c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001340:	4a32      	ldr	r2, [pc, #200]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 8001342:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001346:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800134a:	4b30      	ldr	r3, [pc, #192]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 800134c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	4a2b      	ldr	r2, [pc, #172]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8001376:	23a0      	movs	r3, #160	@ 0xa0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001386:	2305      	movs	r3, #5
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	481f      	ldr	r0, [pc, #124]	@ (8001410 <HAL_SPI_MspInit+0xf8>)
 8001392:	f001 f893 	bl	80024bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001396:	e032      	b.n	80013fe <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1d      	ldr	r2, [pc, #116]	@ (8001414 <HAL_SPI_MspInit+0xfc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12d      	bne.n	80013fe <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a8:	4a18      	ldr	r2, [pc, #96]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 80013b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	4a11      	ldr	r2, [pc, #68]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_SPI_MspInit+0xf4>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80013de:	2306      	movs	r3, #6
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ee:	2305      	movs	r3, #5
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <HAL_SPI_MspInit+0x100>)
 80013fa:	f001 f85f 	bl	80024bc <HAL_GPIO_Init>
}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	@ 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40013000 	.word	0x40013000
 800140c:	58024400 	.word	0x58024400
 8001410:	58020000 	.word	0x58020000
 8001414:	40003800 	.word	0x40003800
 8001418:	58022000 	.word	0x58022000

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_MspInit+0x38>)
 8001424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001428:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <HAL_MspInit+0x38>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001432:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_MspInit+0x38>)
 8001434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	210f      	movs	r1, #15
 8001444:	f06f 0001 	mvn.w	r0, #1
 8001448:	f000 fd48 	bl	8001edc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	@ 0x40
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	d827      	bhi.n	80014b6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001466:	2200      	movs	r2, #0
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	2036      	movs	r0, #54	@ 0x36
 800146c:	f000 fd36 	bl	8001edc <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001470:	2036      	movs	r0, #54	@ 0x36
 8001472:	f000 fd4d 	bl	8001f10 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001476:	4a29      	ldr	r2, [pc, #164]	@ (800151c <HAL_InitTick+0xc4>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800147c:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <HAL_InitTick+0xc8>)
 800147e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001482:	4a27      	ldr	r2, [pc, #156]	@ (8001520 <HAL_InitTick+0xc8>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <HAL_InitTick+0xc8>)
 800148e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800149a:	f107 0210 	add.w	r2, r7, #16
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 fae3 	bl	8005a70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d106      	bne.n	80014c2 <HAL_InitTick+0x6a>
 80014b4:	e001      	b.n	80014ba <HAL_InitTick+0x62>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e02b      	b.n	8001512 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ba:	f004 fac3 	bl	8005a44 <HAL_RCC_GetPCLK1Freq>
 80014be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80014c0:	e004      	b.n	80014cc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014c2:	f004 fabf 	bl	8005a44 <HAL_RCC_GetPCLK1Freq>
 80014c6:	4603      	mov	r3, r0
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014ce:	4a15      	ldr	r2, [pc, #84]	@ (8001524 <HAL_InitTick+0xcc>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	3b01      	subs	r3, #1
 80014d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <HAL_InitTick+0xd0>)
 80014dc:	4a13      	ldr	r2, [pc, #76]	@ (800152c <HAL_InitTick+0xd4>)
 80014de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_InitTick+0xd0>)
 80014e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <HAL_InitTick+0xd0>)
 80014ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_InitTick+0xd0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_InitTick+0xd0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80014fa:	480b      	ldr	r0, [pc, #44]	@ (8001528 <HAL_InitTick+0xd0>)
 80014fc:	f006 fcd5 	bl	8007eaa <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d104      	bne.n	8001510 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001506:	4808      	ldr	r0, [pc, #32]	@ (8001528 <HAL_InitTick+0xd0>)
 8001508:	f006 fd26 	bl	8007f58 <HAL_TIM_Base_Start_IT>
 800150c:	4603      	mov	r3, r0
 800150e:	e000      	b.n	8001512 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	3740      	adds	r7, #64	@ 0x40
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	24000008 	.word	0x24000008
 8001520:	58024400 	.word	0x58024400
 8001524:	431bde83 	.word	0x431bde83
 8001528:	24000500 	.word	0x24000500
 800152c:	40001000 	.word	0x40001000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <NMI_Handler+0x4>

08001538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <MemManage_Handler+0x4>

08001548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <UsageFault_Handler+0x4>

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 800156a:	2040      	movs	r0, #64	@ 0x40
 800156c:	f001 f989 	bl	8002882 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <TIM6_DAC_IRQHandler+0x20>)
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001582:	4804      	ldr	r0, [pc, #16]	@ (8001594 <TIM6_DAC_IRQHandler+0x20>)
 8001584:	f000 fdc3 	bl	800210e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001588:	4803      	ldr	r0, [pc, #12]	@ (8001598 <TIM6_DAC_IRQHandler+0x24>)
 800158a:	f006 fecd 	bl	8008328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	24000310 	.word	0x24000310
 8001598:	24000500 	.word	0x24000500

0800159c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <OTG_FS_IRQHandler+0x10>)
 80015a2:	f002 f8ed 	bl	8003780 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2400641c 	.word	0x2400641c

080015b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_kill>:

int _kill(int pid, int sig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ca:	f011 fab5 	bl	8012b38 <__errno>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
  return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_exit>:

void _exit (int status)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffe7 	bl	80015c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f2:	bf00      	nop
 80015f4:	e7fd      	b.n	80015f2 <_exit+0x12>

080015f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e00a      	b.n	800161e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001608:	f3af 8000 	nop.w
 800160c:	4601      	mov	r1, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	b2ca      	uxtb	r2, r1
 8001616:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	dbf0      	blt.n	8001608 <_read+0x12>
  }

  return len;
 8001626:	687b      	ldr	r3, [r7, #4]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	e009      	b.n	8001656 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf1      	blt.n	8001642 <_write+0x12>
  }
  return len;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_close>:

int _close(int file)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001690:	605a      	str	r2, [r3, #4]
  return 0;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_isatty>:

int _isatty(int file)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	@ (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f011 fa1a 	bl	8012b38 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	24080000 	.word	0x24080000
 8001730:	00008000 	.word	0x00008000
 8001734:	2400054c 	.word	0x2400054c
 8001738:	24009690 	.word	0x24009690

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001740:	4b37      	ldr	r3, [pc, #220]	@ (8001820 <SystemInit+0xe4>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001746:	4a36      	ldr	r2, [pc, #216]	@ (8001820 <SystemInit+0xe4>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001750:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <SystemInit+0xe8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	2b06      	cmp	r3, #6
 800175a:	d807      	bhi.n	800176c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800175c:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <SystemInit+0xe8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 030f 	bic.w	r3, r3, #15
 8001764:	4a2f      	ldr	r2, [pc, #188]	@ (8001824 <SystemInit+0xe8>)
 8001766:	f043 0307 	orr.w	r3, r3, #7
 800176a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <SystemInit+0xec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <SystemInit+0xec>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001778:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <SystemInit+0xec>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800177e:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <SystemInit+0xec>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4929      	ldr	r1, [pc, #164]	@ (8001828 <SystemInit+0xec>)
 8001784:	4b29      	ldr	r3, [pc, #164]	@ (800182c <SystemInit+0xf0>)
 8001786:	4013      	ands	r3, r2
 8001788:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <SystemInit+0xe8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001796:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <SystemInit+0xe8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 030f 	bic.w	r3, r3, #15
 800179e:	4a21      	ldr	r2, [pc, #132]	@ (8001824 <SystemInit+0xe8>)
 80017a0:	f043 0307 	orr.w	r3, r3, #7
 80017a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <SystemInit+0xec>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <SystemInit+0xec>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <SystemInit+0xec>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <SystemInit+0xec>)
 80017ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <SystemInit+0xf4>)
 80017bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <SystemInit+0xec>)
 80017c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <SystemInit+0xf8>)
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <SystemInit+0xec>)
 80017c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <SystemInit+0xfc>)
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <SystemInit+0xec>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <SystemInit+0xec>)
 80017d2:	4a19      	ldr	r2, [pc, #100]	@ (8001838 <SystemInit+0xfc>)
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <SystemInit+0xec>)
 80017d8:	2200      	movs	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <SystemInit+0xec>)
 80017de:	4a16      	ldr	r2, [pc, #88]	@ (8001838 <SystemInit+0xfc>)
 80017e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <SystemInit+0xec>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <SystemInit+0xec>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <SystemInit+0xec>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <SystemInit+0xec>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <SystemInit+0x100>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <SystemInit+0x104>)
 8001800:	4013      	ands	r3, r2
 8001802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001806:	d202      	bcs.n	800180e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <SystemInit+0x108>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <SystemInit+0x10c>)
 8001810:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001814:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00
 8001824:	52002000 	.word	0x52002000
 8001828:	58024400 	.word	0x58024400
 800182c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001830:	02020200 	.word	0x02020200
 8001834:	01ff0000 	.word	0x01ff0000
 8001838:	01010280 	.word	0x01010280
 800183c:	5c001000 	.word	0x5c001000
 8001840:	ffff0000 	.word	0xffff0000
 8001844:	51008108 	.word	0x51008108
 8001848:	52004000 	.word	0x52004000

0800184c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b09a      	sub	sp, #104	@ 0x68
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	222c      	movs	r2, #44	@ 0x2c
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f011 f8f3 	bl	8012a72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800188c:	4b51      	ldr	r3, [pc, #324]	@ (80019d4 <MX_TIM1_Init+0x188>)
 800188e:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <MX_TIM1_Init+0x18c>)
 8001890:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001892:	4b50      	ldr	r3, [pc, #320]	@ (80019d4 <MX_TIM1_Init+0x188>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001898:	4b4e      	ldr	r3, [pc, #312]	@ (80019d4 <MX_TIM1_Init+0x188>)
 800189a:	2220      	movs	r2, #32
 800189c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 800189e:	4b4d      	ldr	r3, [pc, #308]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80018a0:	f241 726f 	movw	r2, #5999	@ 0x176f
 80018a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b4b      	ldr	r3, [pc, #300]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ac:	4b49      	ldr	r3, [pc, #292]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b2:	4b48      	ldr	r3, [pc, #288]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b8:	4846      	ldr	r0, [pc, #280]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80018ba:	f006 faf6 	bl	8007eaa <HAL_TIM_Base_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018c4:	f7ff fc74 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018d2:	4619      	mov	r1, r3
 80018d4:	483f      	ldr	r0, [pc, #252]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80018d6:	f006 ff43 	bl	8008760 <HAL_TIM_ConfigClockSource>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018e0:	f7ff fc66 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018e4:	483b      	ldr	r0, [pc, #236]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80018e6:	f006 fbaf 	bl	8008048 <HAL_TIM_PWM_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018f0:	f7ff fc5e 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001900:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001904:	4619      	mov	r1, r3
 8001906:	4833      	ldr	r0, [pc, #204]	@ (80019d4 <MX_TIM1_Init+0x188>)
 8001908:	f007 fd4c 	bl	80093a4 <HAL_TIMEx_MasterConfigSynchronization>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001912:	f7ff fc4d 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001916:	2360      	movs	r3, #96	@ 0x60
 8001918:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 800191a:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 800191e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001920:	2300      	movs	r3, #0
 8001922:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001928:	2304      	movs	r3, #4
 800192a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001934:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4825      	ldr	r0, [pc, #148]	@ (80019d4 <MX_TIM1_Init+0x188>)
 800193e:	f006 fdfb 	bl	8008538 <HAL_TIM_PWM_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001948:	f7ff fc32 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800194c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001950:	2204      	movs	r2, #4
 8001952:	4619      	mov	r1, r3
 8001954:	481f      	ldr	r0, [pc, #124]	@ (80019d4 <MX_TIM1_Init+0x188>)
 8001956:	f006 fdef 	bl	8008538 <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001960:	f7ff fc26 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001968:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800196c:	2208      	movs	r2, #8
 800196e:	4619      	mov	r1, r3
 8001970:	4818      	ldr	r0, [pc, #96]	@ (80019d4 <MX_TIM1_Init+0x188>)
 8001972:	f006 fde1 	bl	8008538 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 800197c:	f7ff fc18 	bl	80011b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001998:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80019b6:	f007 fd83 	bl	80094c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 80019c0:	f7ff fbf6 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019c4:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <MX_TIM1_Init+0x188>)
 80019c6:	f000 f8b9 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 80019ca:	bf00      	nop
 80019cc:	3768      	adds	r7, #104	@ 0x68
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	24000550 	.word	0x24000550
 80019d8:	40010000 	.word	0x40010000

080019dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	@ 0x38
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001a22:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a24:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001a28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a36:	4824      	ldr	r0, [pc, #144]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a38:	f006 fa37 	bl	8007eaa <HAL_TIM_Base_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001a42:	f7ff fbb5 	bl	80011b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a50:	4619      	mov	r1, r3
 8001a52:	481d      	ldr	r0, [pc, #116]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a54:	f006 fe84 	bl	8008760 <HAL_TIM_ConfigClockSource>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001a5e:	f7ff fba7 	bl	80011b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a62:	4819      	ldr	r0, [pc, #100]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a64:	f006 faf0 	bl	8008048 <HAL_TIM_PWM_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a6e:	f7ff fb9f 	bl	80011b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4811      	ldr	r0, [pc, #68]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001a82:	f007 fc8f 	bl	80093a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a8c:	f7ff fb90 	bl	80011b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a90:	2360      	movs	r3, #96	@ 0x60
 8001a92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001a94:	f242 3327 	movw	r3, #8999	@ 0x2327
 8001a98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4807      	ldr	r0, [pc, #28]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001aaa:	f006 fd45 	bl	8008538 <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001ab4:	f7ff fb7c 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ab8:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <MX_TIM2_Init+0xec>)
 8001aba:	f000 f83f 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 8001abe:	bf00      	nop
 8001ac0:	3738      	adds	r7, #56	@ 0x38
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2400059c 	.word	0x2400059c

08001acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a16      	ldr	r2, [pc, #88]	@ (8001b34 <HAL_TIM_Base_MspInit+0x68>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10f      	bne.n	8001afe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ade:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <HAL_TIM_Base_MspInit+0x6c>)
 8001ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ae4:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <HAL_TIM_Base_MspInit+0x6c>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_TIM_Base_MspInit+0x6c>)
 8001af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001afc:	e013      	b.n	8001b26 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b06:	d10e      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_TIM_Base_MspInit+0x6c>)
 8001b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <HAL_TIM_Base_MspInit+0x6c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b18:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <HAL_TIM_Base_MspInit+0x6c>)
 8001b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	58024400 	.word	0x58024400

08001b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a25      	ldr	r2, [pc, #148]	@ (8001bf0 <HAL_TIM_MspPostInit+0xb4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d120      	bne.n	8001ba0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <HAL_TIM_MspPostInit+0xb8>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b64:	4a23      	ldr	r2, [pc, #140]	@ (8001bf4 <HAL_TIM_MspPostInit+0xb8>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <HAL_TIM_MspPostInit+0xb8>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001b7c:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4817      	ldr	r0, [pc, #92]	@ (8001bf8 <HAL_TIM_MspPostInit+0xbc>)
 8001b9a:	f000 fc8f 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b9e:	e023      	b.n	8001be8 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba8:	d11e      	bne.n	8001be8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_TIM_MspPostInit+0xb8>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb0:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <HAL_TIM_MspPostInit+0xb8>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_TIM_MspPostInit+0xb8>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <HAL_TIM_MspPostInit+0xc0>)
 8001be4:	f000 fc6a 	bl	80024bc <HAL_GPIO_Init>
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	58020400 	.word	0x58020400
 8001bfc:	58020000 	.word	0x58020000

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c04:	f7ff fd9a 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f010 ff89 	bl	8012b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff f90d 	bl	8000e50 <main>
  bx  lr
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c38:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c40:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8001c44:	080174b0 	.word	0x080174b0
  ldr r2, =_sbss
 8001c48:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001c4c:	24009690 	.word	0x24009690

08001c50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC3_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f000 f933 	bl	8001ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c60:	f003 fd46 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_Init+0x68>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	4913      	ldr	r1, [pc, #76]	@ (8001cc0 <HAL_Init+0x6c>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <HAL_Init+0x68>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc0 <HAL_Init+0x6c>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_Init+0x70>)
 8001c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c98:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc8 <HAL_Init+0x74>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9e:	2005      	movs	r0, #5
 8001ca0:	f7ff fbda 	bl	8001458 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e002      	b.n	8001cb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cae:	f7ff fbb5 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	08015108 	.word	0x08015108
 8001cc4:	24000004 	.word	0x24000004
 8001cc8:	24000000 	.word	0x24000000

08001ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_IncTick+0x20>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <HAL_IncTick+0x24>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <HAL_IncTick+0x24>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	2400000c 	.word	0x2400000c
 8001cf0:	240005e8 	.word	0x240005e8

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	240005e8 	.word	0x240005e8

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d005      	beq.n	8001d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_Delay+0x44>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d32:	bf00      	nop
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f7      	bhi.n	8001d34 <HAL_Delay+0x28>
  {
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2400000c 	.word	0x2400000c

08001d54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_GetREVID+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	5c001000 	.word	0x5c001000

08001d6c <__NVIC_SetPriorityGrouping>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <__NVIC_SetPriorityGrouping+0x40>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <__NVIC_SetPriorityGrouping+0x40>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00
 8001db0:	05fa0000 	.word	0x05fa0000

08001db4 <__NVIC_GetPriorityGrouping>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	@ (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	@ (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	@ (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	@ 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ff4c 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eea:	f7ff ff63 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001eee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	6978      	ldr	r0, [r7, #20]
 8001ef6:	f7ff ffb3 	bl	8001e60 <NVIC_EncodePriority>
 8001efa:	4602      	mov	r2, r0
 8001efc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff82 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f08:	bf00      	nop
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff56 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f30:	f3bf 8f5f 	dmb	sy
}
 8001f34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <HAL_MPU_Disable+0x28>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	4a06      	ldr	r2, [pc, #24]	@ (8001f54 <HAL_MPU_Disable+0x28>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_MPU_Disable+0x2c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	e000ed90 	.word	0xe000ed90

08001f5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f64:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <HAL_MPU_Enable+0x38>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_MPU_Enable+0x3c>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_MPU_Enable+0x3c>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f7a:	f3bf 8f4f 	dsb	sy
}
 8001f7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f80:	f3bf 8f6f 	isb	sy
}
 8001f84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed90 	.word	0xe000ed90
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	785a      	ldrb	r2, [r3, #1]
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_MPU_ConfigRegion+0x7c>)
 8001faa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fac:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <HAL_MPU_ConfigRegion+0x7c>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <HAL_MPU_ConfigRegion+0x7c>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fb8:	4a17      	ldr	r2, [pc, #92]	@ (8002018 <HAL_MPU_ConfigRegion+0x7c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7b1b      	ldrb	r3, [r3, #12]
 8001fc4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7adb      	ldrb	r3, [r3, #11]
 8001fca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7a9b      	ldrb	r3, [r3, #10]
 8001fd2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7b5b      	ldrb	r3, [r3, #13]
 8001fda:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7b9b      	ldrb	r3, [r3, #14]
 8001fe2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7bdb      	ldrb	r3, [r3, #15]
 8001fea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	7a5b      	ldrb	r3, [r3, #9]
 8001ff2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7a1b      	ldrb	r3, [r3, #8]
 8001ffa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ffc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002006:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002008:	6113      	str	r3, [r2, #16]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed90 	.word	0xe000ed90

0800201c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e014      	b.n	8002058 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fae6 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e046      	b.n	8002102 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	795b      	ldrb	r3, [r3, #5]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_DAC_Start+0x20>
 800207c:	2302      	movs	r3, #2
 800207e:	e040      	b.n	8002102 <HAL_DAC_Start+0xa2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6819      	ldr	r1, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2201      	movs	r2, #1
 800209a:	409a      	lsls	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10f      	bne.n	80020ca <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d11d      	bne.n	80020f4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	e014      	b.n	80020f4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2102      	movs	r1, #2
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0202 	orr.w	r2, r2, #2
 80020f2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002124:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01d      	beq.n	800216c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d018      	beq.n	800216c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002154:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002164:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f851 	bl	800220e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01d      	beq.n	80021b2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2204      	movs	r2, #4
 8002184:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f043 0202 	orr.w	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800219a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80021aa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f97b 	bl	80024a8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e015      	b.n	8002202 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	3308      	adds	r3, #8
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e004      	b.n	80021f8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	3314      	adds	r3, #20
 80021f6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	461a      	mov	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_DAC_ConfigChannel+0x1e>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12a      	b.n	800249c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	795b      	ldrb	r3, [r3, #5]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_DAC_ConfigChannel+0x2e>
 800224e:	2302      	movs	r3, #2
 8002250:	e124      	b.n	800249c <HAL_DAC_ConfigChannel+0x278>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2202      	movs	r2, #2
 800225c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b04      	cmp	r3, #4
 8002264:	d17a      	bne.n	800235c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002266:	f7ff fd45 	bl	8001cf4 <HAL_GetTick>
 800226a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d13d      	bne.n	80022ee <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002272:	e018      	b.n	80022a6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002274:	f7ff fd3e 	bl	8001cf4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d911      	bls.n	80022a6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002288:	4b86      	ldr	r3, [pc, #536]	@ (80024a4 <HAL_DAC_ConfigChannel+0x280>)
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f043 0208 	orr.w	r2, r3, #8
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2203      	movs	r2, #3
 80022a0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0fa      	b.n	800249c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ac:	4b7d      	ldr	r3, [pc, #500]	@ (80024a4 <HAL_DAC_ConfigChannel+0x280>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1df      	bne.n	8002274 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	6992      	ldr	r2, [r2, #24]
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80022be:	e020      	b.n	8002302 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022c0:	f7ff fd18 	bl	8001cf4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d90f      	bls.n	80022ee <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0a      	bge.n	80022ee <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f043 0208 	orr.w	r2, r3, #8
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2203      	movs	r2, #3
 80022e8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0d6      	b.n	800249c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	dbe3      	blt.n	80022c0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	6992      	ldr	r2, [r2, #24]
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	ea02 0103 	and.w	r1, r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	21ff      	movs	r1, #255	@ 0xff
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	ea02 0103 	and.w	r1, r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d11d      	bne.n	80023a0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	221f      	movs	r2, #31
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2207      	movs	r2, #7
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d102      	bne.n	80023ca <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c8:	e00f      	b.n	80023ea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d102      	bne.n	80023d8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80023d2:	2301      	movs	r3, #1
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d6:	e008      	b.n	80023ea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80023e0:	2301      	movs	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e4:	e001      	b.n	80023ea <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43da      	mvns	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	400a      	ands	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	22c0      	movs	r2, #192	@ 0xc0
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800249c:	4618      	mov	r0, r3
 800249e:	3728      	adds	r7, #40	@ 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20008000 	.word	0x20008000

080024a8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024ca:	4b89      	ldr	r3, [pc, #548]	@ (80026f0 <HAL_GPIO_Init+0x234>)
 80024cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024ce:	e194      	b.n	80027fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8186 	beq.w	80027f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d005      	beq.n	8002500 <HAL_GPIO_Init+0x44>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d130      	bne.n	8002562 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002536:	2201      	movs	r2, #1
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0201 	and.w	r2, r3, #1
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b03      	cmp	r3, #3
 800256c:	d017      	beq.n	800259e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d123      	bne.n	80025f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	69b9      	ldr	r1, [r7, #24]
 80025ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0203 	and.w	r2, r3, #3
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80e0 	beq.w	80027f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002634:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <HAL_GPIO_Init+0x238>)
 8002636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800263a:	4a2e      	ldr	r2, [pc, #184]	@ (80026f4 <HAL_GPIO_Init+0x238>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002644:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <HAL_GPIO_Init+0x238>)
 8002646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a29      	ldr	r2, [pc, #164]	@ (80026f8 <HAL_GPIO_Init+0x23c>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a20      	ldr	r2, [pc, #128]	@ (80026fc <HAL_GPIO_Init+0x240>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d052      	beq.n	8002724 <HAL_GPIO_Init+0x268>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1f      	ldr	r2, [pc, #124]	@ (8002700 <HAL_GPIO_Init+0x244>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_GPIO_Init+0x22e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a1e      	ldr	r2, [pc, #120]	@ (8002704 <HAL_GPIO_Init+0x248>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02b      	beq.n	80026e6 <HAL_GPIO_Init+0x22a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <HAL_GPIO_Init+0x24c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d025      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <HAL_GPIO_Init+0x250>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01f      	beq.n	80026de <HAL_GPIO_Init+0x222>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002710 <HAL_GPIO_Init+0x254>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0x21e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <HAL_GPIO_Init+0x258>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x21a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_GPIO_Init+0x25c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x216>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a18      	ldr	r2, [pc, #96]	@ (800271c <HAL_GPIO_Init+0x260>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x212>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a17      	ldr	r2, [pc, #92]	@ (8002720 <HAL_GPIO_Init+0x264>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x20e>
 80026c6:	2309      	movs	r3, #9
 80026c8:	e02d      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026ca:	230a      	movs	r3, #10
 80026cc:	e02b      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026ce:	2308      	movs	r3, #8
 80026d0:	e029      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e027      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e025      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026da:	2305      	movs	r3, #5
 80026dc:	e023      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026de:	2304      	movs	r3, #4
 80026e0:	e021      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e01f      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e01d      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e01b      	b.n	8002726 <HAL_GPIO_Init+0x26a>
 80026ee:	bf00      	nop
 80026f0:	58000080 	.word	0x58000080
 80026f4:	58024400 	.word	0x58024400
 80026f8:	58000400 	.word	0x58000400
 80026fc:	58020000 	.word	0x58020000
 8002700:	58020400 	.word	0x58020400
 8002704:	58020800 	.word	0x58020800
 8002708:	58020c00 	.word	0x58020c00
 800270c:	58021000 	.word	0x58021000
 8002710:	58021400 	.word	0x58021400
 8002714:	58021800 	.word	0x58021800
 8002718:	58021c00 	.word	0x58021c00
 800271c:	58022000 	.word	0x58022000
 8002720:	58022400 	.word	0x58022400
 8002724:	2300      	movs	r3, #0
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	f002 0203 	and.w	r2, r2, #3
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	4093      	lsls	r3, r2
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002736:	4938      	ldr	r1, [pc, #224]	@ (8002818 <HAL_GPIO_Init+0x35c>)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800276a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002798:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3301      	adds	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	f47f ae63 	bne.w	80024d0 <HAL_GPIO_Init+0x14>
  }
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	3724      	adds	r7, #36	@ 0x24
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	58000400 	.word	0x58000400

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	041a      	lsls	r2, r3, #16
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43d9      	mvns	r1, r3
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002890:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800289c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f00f f819 	bl	80118e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e08b      	b.n	80029e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe fa4e 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2224      	movs	r2, #36	@ 0x24
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	e006      	b.n	8002940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800293e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d108      	bne.n	800295a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	e007      	b.n	800296a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002968:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <HAL_I2C_Init+0x134>)
 8002976:	430b      	orrs	r3, r1
 8002978:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002988:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69d9      	ldr	r1, [r3, #28]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	02008000 	.word	0x02008000

080029f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 80f9 	bne.w	8002c0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x34>
 8002a1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0ed      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Mem_Write+0x4e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0e6      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a46:	f7ff f955 	bl	8001cf4 <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2319      	movs	r3, #25
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fac3 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0d1      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	@ 0x21
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	@ 0x40
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a90:	88f8      	ldrh	r0, [r7, #6]
 8002a92:	893a      	ldrh	r2, [r7, #8]
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f9d3 	bl	8002e4c <I2C_RequestMemoryWrite>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0a9      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2bff      	cmp	r3, #255	@ 0xff
 8002ac0:	d90e      	bls.n	8002ae0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	@ 0xff
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	8979      	ldrh	r1, [r7, #10]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fc47 	bl	800336c <I2C_TransferConfig>
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	2300      	movs	r3, #0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fc36 	bl	800336c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fac6 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07b      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d034      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d130      	bne.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	@ 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa3f 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04d      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2bff      	cmp	r3, #255	@ 0xff
 8002b78:	d90e      	bls.n	8002b98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	@ 0xff
 8002b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fbeb 	bl	800336c <I2C_TransferConfig>
 8002b96:	e00f      	b.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fbda 	bl	800336c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d19e      	bne.n	8002b00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 faac 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01a      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <HAL_I2C_Mem_Write+0x224>)
 8002bea:	400b      	ands	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	813b      	strh	r3, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	f040 80fd 	bne.w	8002e3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x34>
 8002c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0f1      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Mem_Read+0x4e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0ea      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c6e:	f7ff f841 	bl	8001cf4 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2319      	movs	r3, #25
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f9af 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d5      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2222      	movs	r2, #34	@ 0x22
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2240      	movs	r2, #64	@ 0x40
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb8:	88f8      	ldrh	r0, [r7, #6]
 8002cba:	893a      	ldrh	r2, [r7, #8]
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f913 	bl	8002ef4 <I2C_RequestMemoryRead>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0ad      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	@ 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	@ 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	4b52      	ldr	r3, [pc, #328]	@ (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fb33 	bl	800336c <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb22 	bl	800336c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2104      	movs	r1, #4
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f956 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07c      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d034      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d130      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	@ 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f927 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e04d      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2bff      	cmp	r3, #255	@ 0xff
 8002da8:	d90e      	bls.n	8002dc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	@ 0xff
 8002dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fad3 	bl	800336c <I2C_TransferConfig>
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fac2 	bl	800336c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19a      	bne.n	8002d28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f994 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e01a      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <HAL_I2C_Mem_Read+0x230>)
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	80002400 	.word	0x80002400
 8002e48:	fe00e800 	.word	0xfe00e800

08002e4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <I2C_RequestMemoryWrite+0xa4>)
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fa79 	bl	800336c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f909 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02c      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e9e:	e015      	b.n	8002ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8ef 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e012      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	@ 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f884 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	80002000 	.word	0x80002000

08002ef4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	460b      	mov	r3, r1
 8002f08:	813b      	strh	r3, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	4b20      	ldr	r3, [pc, #128]	@ (8002f98 <I2C_RequestMemoryRead+0xa4>)
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fa26 	bl	800336c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f8b6 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e02c      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	893b      	ldrh	r3, [r7, #8]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f44:	e015      	b.n	8002f72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f89c 	bl	8003096 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e012      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2140      	movs	r1, #64	@ 0x40
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f831 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	80002000 	.word	0x80002000

08002f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d103      	bne.n	8002fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	619a      	str	r2, [r3, #24]
  }
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	e03b      	b.n	800306e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f8d6 	bl	80031ac <I2C_IsErrorOccurred>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d02d      	beq.n	800306e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fe fe6f 	bl	8001cf4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d122      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4013      	ands	r3, r2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	429a      	cmp	r2, r3
 8003044:	d113      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00f      	b.n	800308e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	429a      	cmp	r2, r3
 800308a:	d0b4      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030a2:	e033      	b.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f87f 	bl	80031ac <I2C_IsErrorOccurred>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e031      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d025      	beq.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7fe fe18 	bl	8001cf4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11a      	bne.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d013      	beq.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d1c4      	bne.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003130:	e02f      	b.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f838 	bl	80031ac <I2C_IsErrorOccurred>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e02d      	b.n	80031a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fdd5 	bl	8001cf4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11a      	bne.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d013      	beq.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e007      	b.n	80031a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d1c8      	bne.n	8003132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	@ 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d068      	beq.n	80032aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031e0:	e049      	b.n	8003276 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d045      	beq.n	8003276 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fe fd83 	bl	8001cf4 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_IsErrorOccurred+0x54>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d13a      	bne.n	8003276 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003212:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800321e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003222:	d121      	bne.n	8003268 <I2C_IsErrorOccurred+0xbc>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800322a:	d01d      	beq.n	8003268 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b20      	cmp	r3, #32
 8003230:	d01a      	beq.n	8003268 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003240:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003242:	f7fe fd57 	bl	8001cf4 <HAL_GetTick>
 8003246:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003248:	e00e      	b.n	8003268 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800324a:	f7fe fd53 	bl	8001cf4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b19      	cmp	r3, #25
 8003256:	d907      	bls.n	8003268 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f043 0320 	orr.w	r3, r3, #32
 800325e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003266:	e006      	b.n	8003276 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b20      	cmp	r3, #32
 8003274:	d1e9      	bne.n	800324a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b20      	cmp	r3, #32
 8003282:	d003      	beq.n	800328c <I2C_IsErrorOccurred+0xe0>
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0aa      	beq.n	80031e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800328c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2220      	movs	r2, #32
 800329a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f043 0308 	orr.w	r3, r3, #8
 80032e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fe3b 	bl	8002f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <I2C_IsErrorOccurred+0x1bc>)
 8003332:	400b      	ands	r3, r1
 8003334:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800335a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800335e:	4618      	mov	r0, r3
 8003360:	3728      	adds	r7, #40	@ 0x28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	fe00e800 	.word	0xfe00e800

0800336c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	4613      	mov	r3, r2
 800337c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003384:	7a7b      	ldrb	r3, [r7, #9]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800338c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	4313      	orrs	r3, r2
 8003396:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800339a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	0d5b      	lsrs	r3, r3, #21
 80033a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <I2C_TransferConfig+0x60>)
 80033ac:	430b      	orrs	r3, r1
 80033ae:	43db      	mvns	r3, r3
 80033b0:	ea02 0103 	and.w	r1, r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	03ff63ff 	.word	0x03ff63ff

080033d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d138      	bne.n	8003458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e032      	b.n	800345a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	@ 0x24
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b20      	cmp	r3, #32
 800347a:	d139      	bne.n	80034f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003486:	2302      	movs	r3, #2
 8003488:	e033      	b.n	80034f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2224      	movs	r2, #36	@ 0x24
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af02      	add	r7, sp, #8
 8003504:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0fe      	b.n	800370e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d106      	bne.n	800352a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f00c fba7 	bl	800fc78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2203      	movs	r2, #3
 800352e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f006 f9a9 	bl	800988e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7c1a      	ldrb	r2, [r3, #16]
 8003544:	f88d 2000 	strb.w	r2, [sp]
 8003548:	3304      	adds	r3, #4
 800354a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800354c:	f006 f87a 	bl	8009644 <USB_CoreInit>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0d5      	b.n	800370e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f006 f9a1 	bl	80098b0 <USB_SetCurrentMode>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0c6      	b.n	800370e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	e04a      	b.n	800361c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3315      	adds	r3, #21
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3314      	adds	r3, #20
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	b298      	uxth	r0, r3
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	332e      	adds	r3, #46	@ 0x2e
 80035c2:	4602      	mov	r2, r0
 80035c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	3318      	adds	r3, #24
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	331c      	adds	r3, #28
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3320      	adds	r3, #32
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3324      	adds	r3, #36	@ 0x24
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3301      	adds	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	791b      	ldrb	r3, [r3, #4]
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3af      	bcc.n	8003586 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	e044      	b.n	80036b6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	3301      	adds	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	791b      	ldrb	r3, [r3, #4]
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3b5      	bcc.n	800362c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7c1a      	ldrb	r2, [r3, #16]
 80036c8:	f88d 2000 	strb.w	r2, [sp]
 80036cc:	3304      	adds	r3, #4
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	f006 f93a 	bl	8009948 <USB_DevInit>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e013      	b.n	800370e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7b1b      	ldrb	r3, [r3, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 f96d 	bl	80049dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f007 f979 	bl	800a9fe <USB_DevDisconnect>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_PCD_Start+0x1c>
 800372e:	2302      	movs	r3, #2
 8003730:	e022      	b.n	8003778 <HAL_PCD_Start+0x62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003752:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f006 f884 	bl	800986c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f007 f927 	bl	800a9bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b08d      	sub	sp, #52	@ 0x34
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f007 f9e5 	bl	800ab66 <USB_GetMode>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 84b9 	bne.w	8004116 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f007 f949 	bl	800aa40 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 84af 	beq.w	8004114 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f007 f936 	bl	800aa40 <USB_ReadInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d107      	bne.n	80037ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f002 0202 	and.w	r2, r2, #2
 80037ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f007 f924 	bl	800aa40 <USB_ReadInterrupts>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d161      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0210 	bic.w	r2, r2, #16
 8003810:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 020f 	and.w	r2, r3, #15
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	0c5b      	lsrs	r3, r3, #17
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	2b02      	cmp	r3, #2
 800383c:	d124      	bne.n	8003888 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d035      	beq.n	80038b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	6a38      	ldr	r0, [r7, #32]
 800385e:	f006 ff5b 	bl	800a718 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800386e:	441a      	add	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003880:	441a      	add	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	615a      	str	r2, [r3, #20]
 8003886:	e016      	b.n	80038b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	0c5b      	lsrs	r3, r3, #17
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	2b06      	cmp	r3, #6
 8003892:	d110      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800389a:	2208      	movs	r2, #8
 800389c:	4619      	mov	r1, r3
 800389e:	6a38      	ldr	r0, [r7, #32]
 80038a0:	f006 ff3a 	bl	800a718 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b0:	441a      	add	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0210 	orr.w	r2, r2, #16
 80038c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f007 f8b8 	bl	800aa40 <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038da:	f040 80a7 	bne.w	8003a2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f007 f8bd 	bl	800aa66 <USB_ReadDevAllOutEpInterrupt>
 80038ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80038ee:	e099      	b.n	8003a24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 808e 	beq.w	8003a18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f007 f8e1 	bl	800aace <USB_ReadDevOutEPInterrupt>
 800390c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00c      	beq.n	8003932 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	2301      	movs	r3, #1
 8003928:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800392a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fecf 	bl	80046d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00c      	beq.n	8003956 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003948:	461a      	mov	r2, r3
 800394a:	2308      	movs	r3, #8
 800394c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800394e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 ffa5 	bl	80048a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	2310      	movs	r3, #16
 8003970:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d030      	beq.n	80039de <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003984:	2b80      	cmp	r3, #128	@ 0x80
 8003986:	d109      	bne.n	800399c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800399a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800399c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	78db      	ldrb	r3, [r3, #3]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d108      	bne.n	80039cc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	4619      	mov	r1, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f00c fa7c 	bl	800fec4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d8:	461a      	mov	r2, r3
 80039da:	2302      	movs	r3, #2
 80039dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f4:	461a      	mov	r2, r3
 80039f6:	2320      	movs	r3, #32
 80039f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f47f af62 	bne.w	80038f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f007 f805 	bl	800aa40 <USB_ReadInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a40:	f040 80db 	bne.w	8003bfa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f007 f826 	bl	800aa9a <USB_ReadDevAllInEpInterrupt>
 8003a4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a54:	e0cd      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80c2 	beq.w	8003be6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f007 f84c 	bl	800ab0a <USB_ReadDevInEPInterrupt>
 8003a72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d057      	beq.n	8003b2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69f9      	ldr	r1, [r7, #28]
 8003a9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	799b      	ldrb	r3, [r3, #6]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d132      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3320      	adds	r3, #32
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4403      	add	r3, r0
 8003adc:	331c      	adds	r3, #28
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4419      	add	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4403      	add	r3, r0
 8003af0:	3320      	adds	r3, #32
 8003af2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d113      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x3a2>
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3324      	adds	r3, #36	@ 0x24
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d108      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	f007 f855 	bl	800abcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f00c f946 	bl	800fdba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b44:	461a      	mov	r2, r3
 8003b46:	2308      	movs	r3, #8
 8003b48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b60:	461a      	mov	r2, r3
 8003b62:	2310      	movs	r3, #16
 8003b64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2340      	movs	r3, #64	@ 0x40
 8003b80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d023      	beq.n	8003bd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b8e:	6a38      	ldr	r0, [r7, #32]
 8003b90:	f006 f838 	bl	8009c04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	3310      	adds	r3, #16
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	78db      	ldrb	r3, [r3, #3]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d108      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f00c f993 	bl	800fee8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fce8 	bl	80045b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af2e 	bne.w	8003a56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f006 ff1e 	bl	800aa40 <USB_ReadInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c0e:	d122      	bne.n	8003c56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d108      	bne.n	8003c40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c36:	2100      	movs	r1, #0
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fef3 	bl	8004a24 <HAL_PCDEx_LPM_Callback>
 8003c3e:	e002      	b.n	8003c46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f00c f931 	bl	800fea8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f006 fef0 	bl	800aa40 <USB_ReadInterrupts>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c6a:	d112      	bne.n	8003c92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d102      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f00c f8ed 	bl	800fe5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f006 fed2 	bl	800aa40 <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ca6:	d121      	bne.n	8003cec <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003cb6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d111      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	f003 020f 	and.w	r2, r3, #15
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003cdc:	2101      	movs	r1, #1
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fea0 	bl	8004a24 <HAL_PCDEx_LPM_Callback>
 8003ce4:	e002      	b.n	8003cec <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f00c f8b8 	bl	800fe5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f006 fea5 	bl	800aa40 <USB_ReadInterrupts>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d00:	f040 80b7 	bne.w	8003e72 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2110      	movs	r1, #16
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 ff70 	bl	8009c04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d28:	e046      	b.n	8003db8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d36:	461a      	mov	r2, r3
 8003d38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d4e:	0151      	lsls	r1, r2, #5
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	440a      	add	r2, r1
 8003d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d82:	0151      	lsls	r1, r2, #5
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	440a      	add	r2, r1
 8003d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da2:	0151      	lsls	r1, r2, #5
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	440a      	add	r2, r1
 8003da8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003db0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	3301      	adds	r3, #1
 8003db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d3b2      	bcc.n	8003d2a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dd2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003dd6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7bdb      	ldrb	r3, [r3, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d016      	beq.n	8003e0e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003df0:	f043 030b 	orr.w	r3, r3, #11
 8003df4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e06:	f043 030b 	orr.w	r3, r3, #11
 8003e0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0c:	e015      	b.n	8003e3a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003e22:	4313      	orrs	r3, r2
 8003e24:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e34:	f043 030b 	orr.w	r3, r3, #11
 8003e38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69fa      	ldr	r2, [r7, #28]
 8003e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e48:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f006 feb5 	bl	800abcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f006 fde2 	bl	800aa40 <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e86:	d123      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f006 fe79 	bl	800ab84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f005 ff2d 	bl	8009cf6 <USB_GetDevSpeed>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	f001 fd9c 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8003eac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f005 fc37 	bl	8009728 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f00b ffa5 	bl	800fe0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f006 fdb3 	bl	800aa40 <USB_ReadInterrupts>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d10a      	bne.n	8003efa <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f00b ff82 	bl	800fdee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f002 0208 	and.w	r2, r2, #8
 8003ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f006 fd9e 	bl	800aa40 <USB_ReadInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d123      	bne.n	8003f56 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	e014      	b.n	8003f4a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fb08 	bl	8004554 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	791b      	ldrb	r3, [r3, #4]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d3e4      	bcc.n	8003f20 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f006 fd70 	bl	800aa40 <USB_ReadInterrupts>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f6a:	d13c      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f70:	e02b      	b.n	8003fca <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3318      	adds	r3, #24
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d115      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da12      	bge.n	8003fc4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3317      	adds	r3, #23
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fac8 	bl	8004554 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	791b      	ldrb	r3, [r3, #4]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d3cd      	bcc.n	8003f72 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f006 fd28 	bl	800aa40 <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ffa:	d156      	bne.n	80040aa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004000:	e045      	b.n	800408e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d12e      	bne.n	8004088 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800402a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800402c:	2b00      	cmp	r3, #0
 800402e:	da2b      	bge.n	8004088 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800403c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004040:	429a      	cmp	r2, r3
 8004042:	d121      	bne.n	8004088 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004084:	6053      	str	r3, [r2, #4]
            break;
 8004086:	e008      	b.n	800409a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	3301      	adds	r3, #1
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	791b      	ldrb	r3, [r3, #4]
 8004092:	461a      	mov	r2, r3
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	4293      	cmp	r3, r2
 8004098:	d3b3      	bcc.n	8004002 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f006 fcc6 	bl	800aa40 <USB_ReadInterrupts>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d10a      	bne.n	80040d6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f00b ff23 	bl	800ff0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80040d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f006 fcb0 	bl	800aa40 <USB_ReadInterrupts>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d115      	bne.n	8004116 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f00b ff13 	bl	800ff28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	e000      	b.n	8004116 <HAL_PCD_IRQHandler+0x996>
      return;
 8004114:	bf00      	nop
    }
  }
}
 8004116:	3734      	adds	r7, #52	@ 0x34
 8004118:	46bd      	mov	sp, r7
 800411a:	bd90      	pop	{r4, r7, pc}

0800411c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_PCD_SetAddress+0x1a>
 8004132:	2302      	movs	r3, #2
 8004134:	e012      	b.n	800415c <HAL_PCD_SetAddress+0x40>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f006 fc0f 	bl	800a970 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	70fb      	strb	r3, [r7, #3]
 8004176:	460b      	mov	r3, r1
 8004178:	803b      	strh	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004186:	2b00      	cmp	r3, #0
 8004188:	da0f      	bge.n	80041aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	f003 020f 	and.w	r2, r3, #15
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	3310      	adds	r3, #16
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	3304      	adds	r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	705a      	strb	r2, [r3, #1]
 80041a8:	e00f      	b.n	80041ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	4613      	mov	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	3304      	adds	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041d6:	883a      	ldrh	r2, [r7, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	78ba      	ldrb	r2, [r7, #2]
 80041e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041f4:	78bb      	ldrb	r3, [r7, #2]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d102      	bne.n	8004200 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_PCD_EP_Open+0xaa>
 800420a:	2302      	movs	r3, #2
 800420c:	e00e      	b.n	800422c <HAL_PCD_EP_Open+0xc8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	4618      	mov	r0, r3
 800421e:	f005 fd8f 	bl	8009d40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800422a:	7afb      	ldrb	r3, [r7, #11]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da0f      	bge.n	8004268 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 020f 	and.w	r2, r3, #15
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	3310      	adds	r3, #16
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	705a      	strb	r2, [r3, #1]
 8004266:	e00f      	b.n	8004288 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	f003 020f 	and.w	r2, r3, #15
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	3304      	adds	r3, #4
 8004280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_PCD_EP_Close+0x6e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e00e      	b.n	80042c0 <HAL_PCD_EP_Close+0x8c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f005 fdcd 	bl	8009e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	460b      	mov	r3, r1
 80042d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d8:	7afb      	ldrb	r3, [r7, #11]
 80042da:	f003 020f 	and.w	r2, r3, #15
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	3304      	adds	r3, #4
 80042f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2200      	movs	r2, #0
 8004308:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	b2da      	uxtb	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	799b      	ldrb	r3, [r3, #6]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	799b      	ldrb	r3, [r3, #6]
 800432c:	461a      	mov	r2, r3
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	f005 fe6a 	bl	800a008 <USB_EPStartXfer>

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	f003 020f 	and.w	r2, r3, #15
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004360:	681b      	ldr	r3, [r3, #0]
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	460b      	mov	r3, r1
 800437c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	3310      	adds	r3, #16
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2201      	movs	r2, #1
 80043ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ae:	7afb      	ldrb	r3, [r7, #11]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	799b      	ldrb	r3, [r3, #6]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d102      	bne.n	80043c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	799b      	ldrb	r3, [r3, #6]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6979      	ldr	r1, [r7, #20]
 80043d4:	f005 fe18 	bl	800a008 <USB_EPStartXfer>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	7912      	ldrb	r2, [r2, #4]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e04f      	b.n	80044a0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004404:	2b00      	cmp	r3, #0
 8004406:	da0f      	bge.n	8004428 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 020f 	and.w	r2, r3, #15
 800440e:	4613      	mov	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	3310      	adds	r3, #16
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	3304      	adds	r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	705a      	strb	r2, [r3, #1]
 8004426:	e00d      	b.n	8004444 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	3304      	adds	r3, #4
 800443c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_PCD_EP_SetStall+0x82>
 8004460:	2302      	movs	r3, #2
 8004462:	e01d      	b.n	80044a0 <HAL_PCD_EP_SetStall+0xbe>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	4618      	mov	r0, r3
 8004474:	f006 f9a8 	bl	800a7c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	7999      	ldrb	r1, [r3, #6]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004490:	461a      	mov	r2, r3
 8004492:	f006 fb9b 	bl	800abcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	7912      	ldrb	r2, [r2, #4]
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e042      	b.n	800454c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	da0f      	bge.n	80044ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	f003 020f 	and.w	r2, r3, #15
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	3310      	adds	r3, #16
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	3304      	adds	r3, #4
 80044e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	705a      	strb	r2, [r3, #1]
 80044ec:	e00f      	b.n	800450e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_PCD_EP_ClrStall+0x86>
 800452a:	2302      	movs	r3, #2
 800452c:	e00e      	b.n	800454c <HAL_PCD_EP_ClrStall+0xa4>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	4618      	mov	r0, r3
 800453e:	f006 f9b1 	bl	800a8a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004564:	2b00      	cmp	r3, #0
 8004566:	da0c      	bge.n	8004582 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	f003 020f 	and.w	r2, r3, #15
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	3310      	adds	r3, #16
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4413      	add	r3, r2
 800457c:	3304      	adds	r3, #4
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e00c      	b.n	800459c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68f9      	ldr	r1, [r7, #12]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f005 ffd0 	bl	800a548 <USB_EPStopXfer>
 80045a8:	4603      	mov	r3, r0
 80045aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045ac:	7afb      	ldrb	r3, [r7, #11]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b08a      	sub	sp, #40	@ 0x28
 80045ba:	af02      	add	r7, sp, #8
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	3310      	adds	r3, #16
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	3304      	adds	r3, #4
 80045dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d901      	bls.n	80045ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e06b      	b.n	80046c6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	429a      	cmp	r2, r3
 8004602:	d902      	bls.n	800460a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3303      	adds	r3, #3
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004612:	e02a      	b.n	800466a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	429a      	cmp	r2, r3
 8004628:	d902      	bls.n	8004630 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3303      	adds	r3, #3
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68d9      	ldr	r1, [r3, #12]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4603      	mov	r3, r0
 800464c:	6978      	ldr	r0, [r7, #20]
 800464e:	f006 f825 	bl	800a69c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	441a      	add	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	441a      	add	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	429a      	cmp	r2, r3
 800467e:	d809      	bhi.n	8004694 <PCD_WriteEmptyTxFifo+0xde>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004688:	429a      	cmp	r2, r3
 800468a:	d203      	bcs.n	8004694 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1bf      	bne.n	8004614 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	d811      	bhi.n	80046c4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	2201      	movs	r2, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	6939      	ldr	r1, [r7, #16]
 80046bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046c0:	4013      	ands	r3, r2
 80046c2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	333c      	adds	r3, #60	@ 0x3c
 80046e8:	3304      	adds	r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	799b      	ldrb	r3, [r3, #6]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d17b      	bne.n	80047fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4a61      	ldr	r2, [pc, #388]	@ (8004898 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	f240 80b9 	bls.w	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80b3 	beq.w	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004732:	461a      	mov	r2, r3
 8004734:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004738:	6093      	str	r3, [r2, #8]
 800473a:	e0a7      	b.n	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	2320      	movs	r3, #32
 8004756:	6093      	str	r3, [r2, #8]
 8004758:	e098      	b.n	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f040 8093 	bne.w	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4a4b      	ldr	r2, [pc, #300]	@ (8004898 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d90f      	bls.n	800478e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004784:	461a      	mov	r2, r3
 8004786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800478a:	6093      	str	r3, [r2, #8]
 800478c:	e07e      	b.n	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	3304      	adds	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	0159      	lsls	r1, r3, #5
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ba:	1ad2      	subs	r2, r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d114      	bne.n	80047f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047d8:	461a      	mov	r2, r3
 80047da:	2101      	movs	r1, #1
 80047dc:	f006 f9f6 	bl	800abcc <USB_EP0_OutStart>
 80047e0:	e006      	b.n	80047f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	441a      	add	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f00b fac4 	bl	800fd84 <HAL_PCD_DataOutStageCallback>
 80047fc:	e046      	b.n	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	4a26      	ldr	r2, [pc, #152]	@ (800489c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d124      	bne.n	8004850 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481c:	461a      	mov	r2, r3
 800481e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004822:	6093      	str	r3, [r2, #8]
 8004824:	e032      	b.n	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	2320      	movs	r3, #32
 8004840:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f00b fa9b 	bl	800fd84 <HAL_PCD_DataOutStageCallback>
 800484e:	e01d      	b.n	800488c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d114      	bne.n	8004880 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004878:	461a      	mov	r2, r3
 800487a:	2100      	movs	r1, #0
 800487c:	f006 f9a6 	bl	800abcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	4619      	mov	r1, r3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f00b fa7c 	bl	800fd84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	4f54300a 	.word	0x4f54300a
 800489c:	4f54310a 	.word	0x4f54310a

080048a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	333c      	adds	r3, #60	@ 0x3c
 80048b8:	3304      	adds	r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a15      	ldr	r2, [pc, #84]	@ (8004928 <PCD_EP_OutSetupPacket_int+0x88>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d90e      	bls.n	80048f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ec:	461a      	mov	r2, r3
 80048ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f00b fa33 	bl	800fd60 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004928 <PCD_EP_OutSetupPacket_int+0x88>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d90c      	bls.n	800491c <PCD_EP_OutSetupPacket_int+0x7c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	799b      	ldrb	r3, [r3, #6]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d108      	bne.n	800491c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004914:	461a      	mov	r2, r3
 8004916:	2101      	movs	r1, #1
 8004918:	f006 f958 	bl	800abcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	4f54300a 	.word	0x4f54300a

0800492c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
 8004938:	4613      	mov	r3, r2
 800493a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800494a:	883b      	ldrh	r3, [r7, #0]
 800494c:	0419      	lsls	r1, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	430a      	orrs	r2, r1
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28
 8004958:	e028      	b.n	80049ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4413      	add	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	e00d      	b.n	800498a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	3340      	adds	r3, #64	@ 0x40
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4413      	add	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	3301      	adds	r3, #1
 8004988:	73fb      	strb	r3, [r7, #15]
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	3b01      	subs	r3, #1
 8004990:	429a      	cmp	r2, r3
 8004992:	d3ec      	bcc.n	800496e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004994:	883b      	ldrh	r3, [r7, #0]
 8004996:	0418      	lsls	r0, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	3b01      	subs	r3, #1
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	4302      	orrs	r2, r0
 80049a4:	3340      	adds	r3, #64	@ 0x40
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a0a:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	10000003 	.word	0x10000003

08004a24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a44:	4b19      	ldr	r3, [pc, #100]	@ (8004aac <HAL_PWREx_ConfigSupply+0x70>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d00a      	beq.n	8004a66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a50:	4b16      	ldr	r3, [pc, #88]	@ (8004aac <HAL_PWREx_ConfigSupply+0x70>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d001      	beq.n	8004a62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e01f      	b.n	8004aa2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e01d      	b.n	8004aa2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a66:	4b11      	ldr	r3, [pc, #68]	@ (8004aac <HAL_PWREx_ConfigSupply+0x70>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 0207 	bic.w	r2, r3, #7
 8004a6e:	490f      	ldr	r1, [pc, #60]	@ (8004aac <HAL_PWREx_ConfigSupply+0x70>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a76:	f7fd f93d 	bl	8001cf4 <HAL_GetTick>
 8004a7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a7c:	e009      	b.n	8004a92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a7e:	f7fd f939 	bl	8001cf4 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a8c:	d901      	bls.n	8004a92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e007      	b.n	8004aa2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a92:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <HAL_PWREx_ConfigSupply+0x70>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a9e:	d1ee      	bne.n	8004a7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	58024800 	.word	0x58024800

08004ab0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004ab4:	4b05      	ldr	r3, [pc, #20]	@ (8004acc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	@ (8004acc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	60d3      	str	r3, [r2, #12]
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	58024800 	.word	0x58024800

08004ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	@ 0x30
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f000 bc48 	b.w	8005374 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8088 	beq.w	8004c02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af2:	4b99      	ldr	r3, [pc, #612]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004afc:	4b96      	ldr	r3, [pc, #600]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d007      	beq.n	8004b18 <HAL_RCC_OscConfig+0x48>
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	2b18      	cmp	r3, #24
 8004b0c:	d111      	bne.n	8004b32 <HAL_RCC_OscConfig+0x62>
 8004b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d10c      	bne.n	8004b32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4b8f      	ldr	r3, [pc, #572]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d06d      	beq.n	8004c00 <HAL_RCC_OscConfig+0x130>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d169      	bne.n	8004c00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f000 bc21 	b.w	8005374 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_OscConfig+0x7a>
 8004b3c:	4b86      	ldr	r3, [pc, #536]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a85      	ldr	r2, [pc, #532]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e02e      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x9c>
 8004b52:	4b81      	ldr	r3, [pc, #516]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a80      	ldr	r2, [pc, #512]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7d      	ldr	r2, [pc, #500]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e01d      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0xc0>
 8004b76:	4b78      	ldr	r3, [pc, #480]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a77      	ldr	r2, [pc, #476]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b75      	ldr	r3, [pc, #468]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a74      	ldr	r2, [pc, #464]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd8>
 8004b90:	4b71      	ldr	r3, [pc, #452]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a70      	ldr	r2, [pc, #448]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b6e      	ldr	r3, [pc, #440]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a6d      	ldr	r2, [pc, #436]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fd f8a0 	bl	8001cf4 <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fd f89c 	bl	8001cf4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	@ 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e3d4      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bca:	4b63      	ldr	r3, [pc, #396]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0xe8>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fd f88c 	bl	8001cf4 <HAL_GetTick>
 8004bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fd f888 	bl	8001cf4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	@ 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e3c0      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bf2:	4b59      	ldr	r3, [pc, #356]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x110>
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80ca 	beq.w	8004da4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c10:	4b51      	ldr	r3, [pc, #324]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_RCC_OscConfig+0x166>
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	2b18      	cmp	r3, #24
 8004c2a:	d156      	bne.n	8004cda <HAL_RCC_OscConfig+0x20a>
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d151      	bne.n	8004cda <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c36:	4b48      	ldr	r3, [pc, #288]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_RCC_OscConfig+0x17e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e392      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c4e:	4b42      	ldr	r3, [pc, #264]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 0219 	bic.w	r2, r3, #25
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	493f      	ldr	r1, [pc, #252]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fd f848 	bl	8001cf4 <HAL_GetTick>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c68:	f7fd f844 	bl	8001cf4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e37c      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c7a:	4b37      	ldr	r3, [pc, #220]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	f7fd f865 	bl	8001d54 <HAL_GetREVID>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d817      	bhi.n	8004cc4 <HAL_RCC_OscConfig+0x1f4>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b40      	cmp	r3, #64	@ 0x40
 8004c9a:	d108      	bne.n	8004cae <HAL_RCC_OscConfig+0x1de>
 8004c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004caa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cac:	e07a      	b.n	8004da4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cae:	4b2a      	ldr	r3, [pc, #168]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	031b      	lsls	r3, r3, #12
 8004cbc:	4926      	ldr	r1, [pc, #152]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc2:	e06f      	b.n	8004da4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc4:	4b24      	ldr	r3, [pc, #144]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	4921      	ldr	r1, [pc, #132]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd8:	e064      	b.n	8004da4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d047      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 0219 	bic.w	r2, r3, #25
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	491a      	ldr	r1, [pc, #104]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fc fffe 	bl	8001cf4 <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cfc:	f7fc fffa 	bl	8001cf4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e332      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d0e:	4b12      	ldr	r3, [pc, #72]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1a:	f7fd f81b 	bl	8001d54 <HAL_GetREVID>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d819      	bhi.n	8004d5c <HAL_RCC_OscConfig+0x28c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b40      	cmp	r3, #64	@ 0x40
 8004d2e:	d108      	bne.n	8004d42 <HAL_RCC_OscConfig+0x272>
 8004d30:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d38:	4a07      	ldr	r2, [pc, #28]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3e:	6053      	str	r3, [r2, #4]
 8004d40:	e030      	b.n	8004da4 <HAL_RCC_OscConfig+0x2d4>
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	031b      	lsls	r3, r3, #12
 8004d50:	4901      	ldr	r1, [pc, #4]	@ (8004d58 <HAL_RCC_OscConfig+0x288>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	604b      	str	r3, [r1, #4]
 8004d56:	e025      	b.n	8004da4 <HAL_RCC_OscConfig+0x2d4>
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	4b9a      	ldr	r3, [pc, #616]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	4997      	ldr	r1, [pc, #604]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
 8004d70:	e018      	b.n	8004da4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d72:	4b95      	ldr	r3, [pc, #596]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a94      	ldr	r2, [pc, #592]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fc ffb9 	bl	8001cf4 <HAL_GetTick>
 8004d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fc ffb5 	bl	8001cf4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e2ed      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d98:	4b8b      	ldr	r3, [pc, #556]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a9 	beq.w	8004f04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db2:	4b85      	ldr	r3, [pc, #532]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dbc:	4b82      	ldr	r3, [pc, #520]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d007      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x308>
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b18      	cmp	r3, #24
 8004dcc:	d13a      	bne.n	8004e44 <HAL_RCC_OscConfig+0x374>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d135      	bne.n	8004e44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_OscConfig+0x320>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b80      	cmp	r3, #128	@ 0x80
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e2c1      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004df0:	f7fc ffb0 	bl	8001d54 <HAL_GetREVID>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d817      	bhi.n	8004e2e <HAL_RCC_OscConfig+0x35e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d108      	bne.n	8004e18 <HAL_RCC_OscConfig+0x348>
 8004e06:	4b70      	ldr	r3, [pc, #448]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e16:	e075      	b.n	8004f04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e18:	4b6b      	ldr	r3, [pc, #428]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	069b      	lsls	r3, r3, #26
 8004e26:	4968      	ldr	r1, [pc, #416]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e2c:	e06a      	b.n	8004f04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e2e:	4b66      	ldr	r3, [pc, #408]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	061b      	lsls	r3, r3, #24
 8004e3c:	4962      	ldr	r1, [pc, #392]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e42:	e05f      	b.n	8004f04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d042      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a5d      	ldr	r2, [pc, #372]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fc ff4c 	bl	8001cf4 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e60:	f7fc ff48 	bl	8001cf4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e280      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e72:	4b55      	ldr	r3, [pc, #340]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e7e:	f7fc ff69 	bl	8001d54 <HAL_GetREVID>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d817      	bhi.n	8004ebc <HAL_RCC_OscConfig+0x3ec>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d108      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x3d6>
 8004e94:	4b4c      	ldr	r3, [pc, #304]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004e9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ea2:	6053      	str	r3, [r2, #4]
 8004ea4:	e02e      	b.n	8004f04 <HAL_RCC_OscConfig+0x434>
 8004ea6:	4b48      	ldr	r3, [pc, #288]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	069b      	lsls	r3, r3, #26
 8004eb4:	4944      	ldr	r1, [pc, #272]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	604b      	str	r3, [r1, #4]
 8004eba:	e023      	b.n	8004f04 <HAL_RCC_OscConfig+0x434>
 8004ebc:	4b42      	ldr	r3, [pc, #264]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	493f      	ldr	r1, [pc, #252]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60cb      	str	r3, [r1, #12]
 8004ed0:	e018      	b.n	8004f04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a3c      	ldr	r2, [pc, #240]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fc ff09 	bl	8001cf4 <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ee6:	f7fc ff05 	bl	8001cf4 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e23d      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ef8:	4b33      	ldr	r3, [pc, #204]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d036      	beq.n	8004f7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d019      	beq.n	8004f4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f18:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f24:	f7fc fee6 	bl	8001cf4 <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7fc fee2 	bl	8001cf4 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e21a      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f3e:	4b22      	ldr	r3, [pc, #136]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x45c>
 8004f4a:	e018      	b.n	8004f7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fc fecc 	bl	8001cf4 <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fc fec8 	bl	8001cf4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e200      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f72:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d039      	beq.n	8004ffe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01c      	beq.n	8004fcc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004f98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f9e:	f7fc fea9 	bl	8001cf4 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa6:	f7fc fea5 	bl	8001cf4 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e1dd      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fb8:	4b03      	ldr	r3, [pc, #12]	@ (8004fc8 <HAL_RCC_OscConfig+0x4f8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x4d6>
 8004fc4:	e01b      	b.n	8004ffe <HAL_RCC_OscConfig+0x52e>
 8004fc6:	bf00      	nop
 8004fc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fcc:	4b9b      	ldr	r3, [pc, #620]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a9a      	ldr	r2, [pc, #616]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8004fd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fd8:	f7fc fe8c 	bl	8001cf4 <HAL_GetTick>
 8004fdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fe0:	f7fc fe88 	bl	8001cf4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e1c0      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ff2:	4b92      	ldr	r3, [pc, #584]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8081 	beq.w	800510e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800500c:	4b8c      	ldr	r3, [pc, #560]	@ (8005240 <HAL_RCC_OscConfig+0x770>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a8b      	ldr	r2, [pc, #556]	@ (8005240 <HAL_RCC_OscConfig+0x770>)
 8005012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005018:	f7fc fe6c 	bl	8001cf4 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005020:	f7fc fe68 	bl	8001cf4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e1a0      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005032:	4b83      	ldr	r3, [pc, #524]	@ (8005240 <HAL_RCC_OscConfig+0x770>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d106      	bne.n	8005054 <HAL_RCC_OscConfig+0x584>
 8005046:	4b7d      	ldr	r3, [pc, #500]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504a:	4a7c      	ldr	r2, [pc, #496]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	6713      	str	r3, [r2, #112]	@ 0x70
 8005052:	e02d      	b.n	80050b0 <HAL_RCC_OscConfig+0x5e0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10c      	bne.n	8005076 <HAL_RCC_OscConfig+0x5a6>
 800505c:	4b77      	ldr	r3, [pc, #476]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005060:	4a76      	ldr	r2, [pc, #472]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	@ 0x70
 8005068:	4b74      	ldr	r3, [pc, #464]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	4a73      	ldr	r2, [pc, #460]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800506e:	f023 0304 	bic.w	r3, r3, #4
 8005072:	6713      	str	r3, [r2, #112]	@ 0x70
 8005074:	e01c      	b.n	80050b0 <HAL_RCC_OscConfig+0x5e0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b05      	cmp	r3, #5
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c8>
 800507e:	4b6f      	ldr	r3, [pc, #444]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005082:	4a6e      	ldr	r2, [pc, #440]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005084:	f043 0304 	orr.w	r3, r3, #4
 8005088:	6713      	str	r3, [r2, #112]	@ 0x70
 800508a:	4b6c      	ldr	r3, [pc, #432]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	4a6b      	ldr	r2, [pc, #428]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	6713      	str	r3, [r2, #112]	@ 0x70
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0x5e0>
 8005098:	4b68      	ldr	r3, [pc, #416]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509c:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a4:	4b65      	ldr	r3, [pc, #404]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a8:	4a64      	ldr	r2, [pc, #400]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80050aa:	f023 0304 	bic.w	r3, r3, #4
 80050ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fc fe1c 	bl	8001cf4 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c0:	f7fc fe18 	bl	8001cf4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e14e      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d6:	4b59      	ldr	r3, [pc, #356]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0ee      	beq.n	80050c0 <HAL_RCC_OscConfig+0x5f0>
 80050e2:	e014      	b.n	800510e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fc fe06 	bl	8001cf4 <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ec:	f7fc fe02 	bl	8001cf4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e138      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005102:	4b4e      	ldr	r3, [pc, #312]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ee      	bne.n	80050ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 812d 	beq.w	8005372 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005118:	4b48      	ldr	r3, [pc, #288]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005120:	2b18      	cmp	r3, #24
 8005122:	f000 80bd 	beq.w	80052a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	2b02      	cmp	r3, #2
 800512c:	f040 809e 	bne.w	800526c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005130:	4b42      	ldr	r3, [pc, #264]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a41      	ldr	r2, [pc, #260]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800513a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fc fdda 	bl	8001cf4 <HAL_GetTick>
 8005140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005144:	f7fc fdd6 	bl	8001cf4 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e10e      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005156:	4b39      	ldr	r3, [pc, #228]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005162:	4b36      	ldr	r3, [pc, #216]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005164:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005166:	4b37      	ldr	r3, [pc, #220]	@ (8005244 <HAL_RCC_OscConfig+0x774>)
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005172:	0112      	lsls	r2, r2, #4
 8005174:	430a      	orrs	r2, r1
 8005176:	4931      	ldr	r1, [pc, #196]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005178:	4313      	orrs	r3, r2
 800517a:	628b      	str	r3, [r1, #40]	@ 0x28
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	3b01      	subs	r3, #1
 8005182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518a:	3b01      	subs	r3, #1
 800518c:	025b      	lsls	r3, r3, #9
 800518e:	b29b      	uxth	r3, r3
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	3b01      	subs	r3, #1
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a4:	3b01      	subs	r3, #1
 80051a6:	061b      	lsls	r3, r3, #24
 80051a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051ac:	4923      	ldr	r1, [pc, #140]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051b2:	4b22      	ldr	r3, [pc, #136]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	4a21      	ldr	r2, [pc, #132]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051be:	4b1f      	ldr	r3, [pc, #124]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c2:	4b21      	ldr	r3, [pc, #132]	@ (8005248 <HAL_RCC_OscConfig+0x778>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051ca:	00d2      	lsls	r2, r2, #3
 80051cc:	491b      	ldr	r1, [pc, #108]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051d2:	4b1a      	ldr	r3, [pc, #104]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	f023 020c 	bic.w	r2, r3, #12
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	4917      	ldr	r1, [pc, #92]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051e4:	4b15      	ldr	r3, [pc, #84]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	f023 0202 	bic.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	4912      	ldr	r1, [pc, #72]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051f6:	4b11      	ldr	r3, [pc, #68]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	4a10      	ldr	r2, [pc, #64]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005202:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	4a0d      	ldr	r2, [pc, #52]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800520c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800520e:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800521a:	4b08      	ldr	r3, [pc, #32]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	4a07      	ldr	r2, [pc, #28]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005226:	4b05      	ldr	r3, [pc, #20]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a04      	ldr	r2, [pc, #16]	@ (800523c <HAL_RCC_OscConfig+0x76c>)
 800522c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fc fd5f 	bl	8001cf4 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005238:	e011      	b.n	800525e <HAL_RCC_OscConfig+0x78e>
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
 8005240:	58024800 	.word	0x58024800
 8005244:	fffffc0c 	.word	0xfffffc0c
 8005248:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc fd52 	bl	8001cf4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e08a      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800525e:	4b47      	ldr	r3, [pc, #284]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0x77c>
 800526a:	e082      	b.n	8005372 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526c:	4b43      	ldr	r3, [pc, #268]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a42      	ldr	r2, [pc, #264]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fc fd3c 	bl	8001cf4 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fc fd38 	bl	8001cf4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e070      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005292:	4b3a      	ldr	r3, [pc, #232]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x7b0>
 800529e:	e068      	b.n	8005372 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052a0:	4b36      	ldr	r3, [pc, #216]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052a6:	4b35      	ldr	r3, [pc, #212]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d031      	beq.n	8005318 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f003 0203 	and.w	r2, r3, #3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d12a      	bne.n	8005318 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d122      	bne.n	8005318 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d11a      	bne.n	8005318 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	0a5b      	lsrs	r3, r3, #9
 80052e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d111      	bne.n	8005318 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d108      	bne.n	8005318 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	0e1b      	lsrs	r3, r3, #24
 800530a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e02b      	b.n	8005374 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800531c:	4b17      	ldr	r3, [pc, #92]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 800531e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005320:	08db      	lsrs	r3, r3, #3
 8005322:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005326:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d01f      	beq.n	8005372 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005332:	4b12      	ldr	r3, [pc, #72]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	4a11      	ldr	r2, [pc, #68]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800533e:	f7fc fcd9 	bl	8001cf4 <HAL_GetTick>
 8005342:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005344:	bf00      	nop
 8005346:	f7fc fcd5 	bl	8001cf4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	4293      	cmp	r3, r2
 8005350:	d0f9      	beq.n	8005346 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005356:	4b0a      	ldr	r3, [pc, #40]	@ (8005380 <HAL_RCC_OscConfig+0x8b0>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800535e:	00d2      	lsls	r2, r2, #3
 8005360:	4906      	ldr	r1, [pc, #24]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005362:	4313      	orrs	r3, r2
 8005364:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005366:	4b05      	ldr	r3, [pc, #20]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	4a04      	ldr	r2, [pc, #16]	@ (800537c <HAL_RCC_OscConfig+0x8ac>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3730      	adds	r7, #48	@ 0x30
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	58024400 	.word	0x58024400
 8005380:	ffff0007 	.word	0xffff0007

08005384 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e19c      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005398:	4b8a      	ldr	r3, [pc, #552]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d910      	bls.n	80053c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a6:	4b87      	ldr	r3, [pc, #540]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 020f 	bic.w	r2, r3, #15
 80053ae:	4985      	ldr	r1, [pc, #532]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b6:	4b83      	ldr	r3, [pc, #524]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e184      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	4b7b      	ldr	r3, [pc, #492]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d908      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053e4:	4b78      	ldr	r3, [pc, #480]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	4975      	ldr	r1, [pc, #468]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	4b70      	ldr	r3, [pc, #448]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800540e:	429a      	cmp	r2, r3
 8005410:	d908      	bls.n	8005424 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005412:	4b6d      	ldr	r3, [pc, #436]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	496a      	ldr	r1, [pc, #424]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005420:	4313      	orrs	r3, r2
 8005422:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	4b64      	ldr	r3, [pc, #400]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800543c:	429a      	cmp	r2, r3
 800543e:	d908      	bls.n	8005452 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005440:	4b61      	ldr	r3, [pc, #388]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	495e      	ldr	r1, [pc, #376]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 800544e:	4313      	orrs	r3, r2
 8005450:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	4b59      	ldr	r3, [pc, #356]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800546a:	429a      	cmp	r2, r3
 800546c:	d908      	bls.n	8005480 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800546e:	4b56      	ldr	r3, [pc, #344]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4953      	ldr	r1, [pc, #332]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 800547c:	4313      	orrs	r3, r2
 800547e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d010      	beq.n	80054ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	4b4d      	ldr	r3, [pc, #308]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	429a      	cmp	r2, r3
 800549a:	d908      	bls.n	80054ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800549c:	4b4a      	ldr	r3, [pc, #296]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f023 020f 	bic.w	r2, r3, #15
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4947      	ldr	r1, [pc, #284]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d055      	beq.n	8005566 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054ba:	4b43      	ldr	r3, [pc, #268]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	4940      	ldr	r1, [pc, #256]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054d4:	4b3c      	ldr	r3, [pc, #240]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d121      	bne.n	8005524 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0f6      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d107      	bne.n	80054fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054ec:	4b36      	ldr	r3, [pc, #216]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d115      	bne.n	8005524 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0ea      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d107      	bne.n	8005514 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005504:	4b30      	ldr	r3, [pc, #192]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0de      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005514:	4b2c      	ldr	r3, [pc, #176]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0d6      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005524:	4b28      	ldr	r3, [pc, #160]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f023 0207 	bic.w	r2, r3, #7
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4925      	ldr	r1, [pc, #148]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005532:	4313      	orrs	r3, r2
 8005534:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005536:	f7fc fbdd 	bl	8001cf4 <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553c:	e00a      	b.n	8005554 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553e:	f7fc fbd9 	bl	8001cf4 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0be      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005554:	4b1c      	ldr	r3, [pc, #112]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	429a      	cmp	r2, r3
 8005564:	d1eb      	bne.n	800553e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d010      	beq.n	8005594 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	4b14      	ldr	r3, [pc, #80]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	429a      	cmp	r2, r3
 8005580:	d208      	bcs.n	8005594 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005582:	4b11      	ldr	r3, [pc, #68]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f023 020f 	bic.w	r2, r3, #15
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	490e      	ldr	r1, [pc, #56]	@ (80055c8 <HAL_RCC_ClockConfig+0x244>)
 8005590:	4313      	orrs	r3, r2
 8005592:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d214      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	4b08      	ldr	r3, [pc, #32]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f023 020f 	bic.w	r2, r3, #15
 80055aa:	4906      	ldr	r1, [pc, #24]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b04      	ldr	r3, [pc, #16]	@ (80055c4 <HAL_RCC_ClockConfig+0x240>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d005      	beq.n	80055cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e086      	b.n	80056d2 <HAL_RCC_ClockConfig+0x34e>
 80055c4:	52002000 	.word	0x52002000
 80055c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	4b3f      	ldr	r3, [pc, #252]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d208      	bcs.n	80055fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055e8:	4b3c      	ldr	r3, [pc, #240]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	4939      	ldr	r1, [pc, #228]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	4b34      	ldr	r3, [pc, #208]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005612:	429a      	cmp	r2, r3
 8005614:	d208      	bcs.n	8005628 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005616:	4b31      	ldr	r3, [pc, #196]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	492e      	ldr	r1, [pc, #184]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 8005624:	4313      	orrs	r3, r2
 8005626:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d010      	beq.n	8005656 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	4b28      	ldr	r3, [pc, #160]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005640:	429a      	cmp	r2, r3
 8005642:	d208      	bcs.n	8005656 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005644:	4b25      	ldr	r3, [pc, #148]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	4922      	ldr	r1, [pc, #136]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 8005652:	4313      	orrs	r3, r2
 8005654:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d010      	beq.n	8005684 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	4b1d      	ldr	r3, [pc, #116]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800566e:	429a      	cmp	r2, r3
 8005670:	d208      	bcs.n	8005684 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005672:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	4917      	ldr	r1, [pc, #92]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 8005680:	4313      	orrs	r3, r2
 8005682:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005684:	f000 f834 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b14      	ldr	r3, [pc, #80]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	4912      	ldr	r1, [pc, #72]	@ (80056e0 <HAL_RCC_ClockConfig+0x35c>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
 80056a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056a2:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <HAL_RCC_ClockConfig+0x358>)
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	4a0d      	ldr	r2, [pc, #52]	@ (80056e0 <HAL_RCC_ClockConfig+0x35c>)
 80056ac:	5cd3      	ldrb	r3, [r2, r3]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
 80056b8:	4a0a      	ldr	r2, [pc, #40]	@ (80056e4 <HAL_RCC_ClockConfig+0x360>)
 80056ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056bc:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <HAL_RCC_ClockConfig+0x364>)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056c2:	4b0a      	ldr	r3, [pc, #40]	@ (80056ec <HAL_RCC_ClockConfig+0x368>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fb fec6 	bl	8001458 <HAL_InitTick>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	58024400 	.word	0x58024400
 80056e0:	08015108 	.word	0x08015108
 80056e4:	24000004 	.word	0x24000004
 80056e8:	24000000 	.word	0x24000000
 80056ec:	24000008 	.word	0x24000008

080056f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b089      	sub	sp, #36	@ 0x24
 80056f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f6:	4bb3      	ldr	r3, [pc, #716]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056fe:	2b18      	cmp	r3, #24
 8005700:	f200 8155 	bhi.w	80059ae <HAL_RCC_GetSysClockFreq+0x2be>
 8005704:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005771 	.word	0x08005771
 8005710:	080059af 	.word	0x080059af
 8005714:	080059af 	.word	0x080059af
 8005718:	080059af 	.word	0x080059af
 800571c:	080059af 	.word	0x080059af
 8005720:	080059af 	.word	0x080059af
 8005724:	080059af 	.word	0x080059af
 8005728:	080059af 	.word	0x080059af
 800572c:	08005797 	.word	0x08005797
 8005730:	080059af 	.word	0x080059af
 8005734:	080059af 	.word	0x080059af
 8005738:	080059af 	.word	0x080059af
 800573c:	080059af 	.word	0x080059af
 8005740:	080059af 	.word	0x080059af
 8005744:	080059af 	.word	0x080059af
 8005748:	080059af 	.word	0x080059af
 800574c:	0800579d 	.word	0x0800579d
 8005750:	080059af 	.word	0x080059af
 8005754:	080059af 	.word	0x080059af
 8005758:	080059af 	.word	0x080059af
 800575c:	080059af 	.word	0x080059af
 8005760:	080059af 	.word	0x080059af
 8005764:	080059af 	.word	0x080059af
 8005768:	080059af 	.word	0x080059af
 800576c:	080057a3 	.word	0x080057a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005770:	4b94      	ldr	r3, [pc, #592]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800577c:	4b91      	ldr	r3, [pc, #580]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	4a90      	ldr	r2, [pc, #576]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800578e:	e111      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005790:	4b8d      	ldr	r3, [pc, #564]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005792:	61bb      	str	r3, [r7, #24]
      break;
 8005794:	e10e      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005796:	4b8d      	ldr	r3, [pc, #564]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005798:	61bb      	str	r3, [r7, #24]
      break;
 800579a:	e10b      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800579c:	4b8c      	ldr	r3, [pc, #560]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800579e:	61bb      	str	r3, [r7, #24]
      break;
 80057a0:	e108      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057a2:	4b88      	ldr	r3, [pc, #544]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057ac:	4b85      	ldr	r3, [pc, #532]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057b8:	4b82      	ldr	r3, [pc, #520]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057c2:	4b80      	ldr	r3, [pc, #512]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c6:	08db      	lsrs	r3, r3, #3
 80057c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80e1 	beq.w	80059a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	f000 8083 	beq.w	80058f4 <HAL_RCC_GetSysClockFreq+0x204>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	f200 80a1 	bhi.w	8005938 <HAL_RCC_GetSysClockFreq+0x248>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCC_GetSysClockFreq+0x114>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d056      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005802:	e099      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005804:	4b6f      	ldr	r3, [pc, #444]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d02d      	beq.n	800586c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005810:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	08db      	lsrs	r3, r3, #3
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	4a6b      	ldr	r2, [pc, #428]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
 8005820:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800583a:	4b62      	ldr	r3, [pc, #392]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584a:	ed97 6a02 	vldr	s12, [r7, #8]
 800584e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800585a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800586a:	e087      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587e:	4b51      	ldr	r3, [pc, #324]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005892:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ae:	e065      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80058be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058c2:	4b40      	ldr	r3, [pc, #256]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058f2:	e043      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005906:	4b2f      	ldr	r3, [pc, #188]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005916:	ed97 6a02 	vldr	s12, [r7, #8]
 800591a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800591e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800592a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005932:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005936:	e021      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800594a:	4b1e      	ldr	r3, [pc, #120]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595a:	ed97 6a02 	vldr	s12, [r7, #8]
 800595e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800596a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800596e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800597a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800597c:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	0a5b      	lsrs	r3, r3, #9
 8005982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005986:	3301      	adds	r3, #1
 8005988:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005994:	edd7 6a07 	vldr	s13, [r7, #28]
 8005998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800599c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a0:	ee17 3a90 	vmov	r3, s15
 80059a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059a6:	e005      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
      break;
 80059ac:	e002      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059ae:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059b0:	61bb      	str	r3, [r7, #24]
      break;
 80059b2:	bf00      	nop
  }

  return sysclockfreq;
 80059b4:	69bb      	ldr	r3, [r7, #24]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3724      	adds	r7, #36	@ 0x24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	03d09000 	.word	0x03d09000
 80059cc:	003d0900 	.word	0x003d0900
 80059d0:	017d7840 	.word	0x017d7840
 80059d4:	46000000 	.word	0x46000000
 80059d8:	4c742400 	.word	0x4c742400
 80059dc:	4a742400 	.word	0x4a742400
 80059e0:	4bbebc20 	.word	0x4bbebc20

080059e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80059ea:	f7ff fe81 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x50>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	0a1b      	lsrs	r3, r3, #8
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	490f      	ldr	r1, [pc, #60]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x54>)
 80059fc:	5ccb      	ldrb	r3, [r1, r3]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	fa22 f303 	lsr.w	r3, r2, r3
 8005a06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a08:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	4a09      	ldr	r2, [pc, #36]	@ (8005a38 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a12:	5cd3      	ldrb	r3, [r2, r3]
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	4a07      	ldr	r2, [pc, #28]	@ (8005a3c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a22:	4a07      	ldr	r2, [pc, #28]	@ (8005a40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a28:	4b04      	ldr	r3, [pc, #16]	@ (8005a3c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	58024400 	.word	0x58024400
 8005a38:	08015108 	.word	0x08015108
 8005a3c:	24000004 	.word	0x24000004
 8005a40:	24000000 	.word	0x24000000

08005a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a48:	f7ff ffcc 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	4904      	ldr	r1, [pc, #16]	@ (8005a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a5a:	5ccb      	ldrb	r3, [r1, r3]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	08015108 	.word	0x08015108

08005a70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	223f      	movs	r2, #63	@ 0x3f
 8005a7e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a80:	4b1a      	ldr	r3, [pc, #104]	@ (8005aec <HAL_RCC_GetClockConfig+0x7c>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f003 0207 	and.w	r2, r3, #7
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005a8c:	4b17      	ldr	r3, [pc, #92]	@ (8005aec <HAL_RCC_GetClockConfig+0x7c>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005a98:	4b14      	ldr	r3, [pc, #80]	@ (8005aec <HAL_RCC_GetClockConfig+0x7c>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f003 020f 	and.w	r2, r3, #15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005aa4:	4b11      	ldr	r3, [pc, #68]	@ (8005aec <HAL_RCC_GetClockConfig+0x7c>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8005aec <HAL_RCC_GetClockConfig+0x7c>)
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <HAL_RCC_GetClockConfig+0x7c>)
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <HAL_RCC_GetClockConfig+0x7c>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <HAL_RCC_GetClockConfig+0x80>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 020f 	and.w	r2, r3, #15
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	601a      	str	r2, [r3, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	58024400 	.word	0x58024400
 8005af0:	52002000 	.word	0x52002000

08005af4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af8:	b0ca      	sub	sp, #296	@ 0x128
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b18:	2500      	movs	r5, #0
 8005b1a:	ea54 0305 	orrs.w	r3, r4, r5
 8005b1e:	d049      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b2a:	d02f      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b30:	d828      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b36:	d01a      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b3c:	d822      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b46:	d007      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b48:	e01c      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4a:	4bb8      	ldr	r3, [pc, #736]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4e:	4ab7      	ldr	r2, [pc, #732]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b56:	e01a      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 f9d1 	bl	8006f08 <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b6c:	e00f      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	3328      	adds	r3, #40	@ 0x28
 8005b74:	2102      	movs	r1, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fa78 	bl	800706c <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b82:	e004      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b96:	4ba5      	ldr	r3, [pc, #660]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ba4:	4aa1      	ldr	r2, [pc, #644]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005baa:	e003      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005bc0:	f04f 0900 	mov.w	r9, #0
 8005bc4:	ea58 0309 	orrs.w	r3, r8, r9
 8005bc8:	d047      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d82a      	bhi.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005bf1 	.word	0x08005bf1
 8005be0:	08005bff 	.word	0x08005bff
 8005be4:	08005c15 	.word	0x08005c15
 8005be8:	08005c33 	.word	0x08005c33
 8005bec:	08005c33 	.word	0x08005c33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	4a8d      	ldr	r2, [pc, #564]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bfc:	e01a      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	3308      	adds	r3, #8
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 f97e 	bl	8006f08 <RCCEx_PLL2_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c12:	e00f      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	3328      	adds	r3, #40	@ 0x28
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fa25 	bl	800706c <RCCEx_PLL3_Config>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c28:	e004      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c30:	e000      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c40:	f023 0107 	bic.w	r1, r3, #7
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4a:	4a78      	ldr	r2, [pc, #480]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c50:	e003      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005c66:	f04f 0b00 	mov.w	fp, #0
 8005c6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c6e:	d04c      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c7a:	d030      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c80:	d829      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c84:	d02d      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c88:	d825      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c8a:	2b80      	cmp	r3, #128	@ 0x80
 8005c8c:	d018      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005c8e:	2b80      	cmp	r3, #128	@ 0x80
 8005c90:	d821      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005c96:	2b40      	cmp	r3, #64	@ 0x40
 8005c98:	d007      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005c9a:	e01c      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b63      	ldr	r3, [pc, #396]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4a62      	ldr	r2, [pc, #392]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ca8:	e01c      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 f928 	bl	8006f08 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e011      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	3328      	adds	r3, #40	@ 0x28
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 f9cf 	bl	800706c <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e006      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cdc:	e002      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005cec:	4b4f      	ldr	r3, [pc, #316]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d00:	e003      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005d16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005d20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005d24:	460b      	mov	r3, r1
 8005d26:	4313      	orrs	r3, r2
 8005d28:	d053      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d36:	d035      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005d38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d3c:	d82e      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d42:	d031      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005d44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d48:	d828      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d4e:	d01a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d54:	d822      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d5e:	d007      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005d60:	e01c      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d62:	4b32      	ldr	r3, [pc, #200]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	4a31      	ldr	r2, [pc, #196]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d6e:	e01c      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	3308      	adds	r3, #8
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 f8c5 	bl	8006f08 <RCCEx_PLL2_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d84:	e011      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8a:	3328      	adds	r3, #40	@ 0x28
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 f96c 	bl	800706c <RCCEx_PLL3_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d9a:	e006      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da2:	e002      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005da4:	bf00      	nop
 8005da6:	e000      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005db2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005dde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005de8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005dec:	460b      	mov	r3, r1
 8005dee:	4313      	orrs	r3, r2
 8005df0:	d056      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dfe:	d038      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e04:	d831      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e0a:	d034      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005e0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e10:	d82b      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e16:	d01d      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e1c:	d825      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005e22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e28:	e01f      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e2a:	bf00      	nop
 8005e2c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e30:	4ba2      	ldr	r3, [pc, #648]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	4aa1      	ldr	r2, [pc, #644]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e3c:	e01c      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	3308      	adds	r3, #8
 8005e44:	2100      	movs	r1, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 f85e 	bl	8006f08 <RCCEx_PLL2_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e52:	e011      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e58:	3328      	adds	r3, #40	@ 0x28
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 f905 	bl	800706c <RCCEx_PLL3_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e70:	e002      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e80:	4b8e      	ldr	r3, [pc, #568]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e84:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e90:	4a8a      	ldr	r2, [pc, #552]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e92:	430b      	orrs	r3, r1
 8005e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e96:	e003      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005eb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	d03a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec6:	2b30      	cmp	r3, #48	@ 0x30
 8005ec8:	d01f      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005eca:	2b30      	cmp	r3, #48	@ 0x30
 8005ecc:	d819      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d00c      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d815      	bhi.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d019      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d111      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ede:	4b77      	ldr	r3, [pc, #476]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	4a76      	ldr	r2, [pc, #472]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005eea:	e011      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 f807 	bl	8006f08 <RCCEx_PLL2_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005f00:	e006      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f08:	e002      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f18:	4b68      	ldr	r3, [pc, #416]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f26:	4a65      	ldr	r2, [pc, #404]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f2c:	e003      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f46:	2300      	movs	r3, #0
 8005f48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4313      	orrs	r3, r2
 8005f54:	d051      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f60:	d035      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005f62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f66:	d82e      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f6c:	d031      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005f6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f72:	d828      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f78:	d01a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7e:	d822      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f88:	d007      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005f8a:	e01c      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f90:	4a4a      	ldr	r2, [pc, #296]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f98:	e01c      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 ffb0 	bl	8006f08 <RCCEx_PLL2_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fae:	e011      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb4:	3328      	adds	r3, #40	@ 0x28
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f857 	bl	800706c <RCCEx_PLL3_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fc4:	e006      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005fce:	bf00      	nop
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fdc:	4b37      	ldr	r3, [pc, #220]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fea:	4a34      	ldr	r2, [pc, #208]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800600a:	2300      	movs	r3, #0
 800600c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006010:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d056      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006024:	d033      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006026:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800602a:	d82c      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800602c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006030:	d02f      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006032:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006036:	d826      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006038:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800603c:	d02b      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800603e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006042:	d820      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006048:	d012      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800604a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800604e:	d81a      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d022      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006058:	d115      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	3308      	adds	r3, #8
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f000 ff50 	bl	8006f08 <RCCEx_PLL2_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800606e:	e015      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	3328      	adds	r3, #40	@ 0x28
 8006076:	2101      	movs	r1, #1
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fff7 	bl	800706c <RCCEx_PLL3_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006084:	e00a      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800608c:	e006      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800608e:	bf00      	nop
 8006090:	e004      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800609a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10d      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060a4:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b2:	4a02      	ldr	r2, [pc, #8]	@ (80060bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80060b8:	e006      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060ba:	bf00      	nop
 80060bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80060d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060d8:	2300      	movs	r3, #0
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4313      	orrs	r3, r2
 80060e6:	d055      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f4:	d033      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80060f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060fa:	d82c      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d02f      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006106:	d826      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006108:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800610c:	d02b      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800610e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006112:	d820      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006118:	d012      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800611a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800611e:	d81a      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d022      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006128:	d115      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612e:	3308      	adds	r3, #8
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fee8 	bl	8006f08 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800613e:	e015      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006144:	3328      	adds	r3, #40	@ 0x28
 8006146:	2101      	movs	r1, #1
 8006148:	4618      	mov	r0, r3
 800614a:	f000 ff8f 	bl	800706c <RCCEx_PLL3_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006154:	e00a      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800615c:	e006      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800615e:	bf00      	nop
 8006160:	e004      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006162:	bf00      	nop
 8006164:	e002      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006166:	bf00      	nop
 8006168:	e000      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800616a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006174:	4ba3      	ldr	r3, [pc, #652]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006178:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006184:	4a9f      	ldr	r2, [pc, #636]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006186:	430b      	orrs	r3, r1
 8006188:	6593      	str	r3, [r2, #88]	@ 0x58
 800618a:	e003      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80061a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ae:	460b      	mov	r3, r1
 80061b0:	4313      	orrs	r3, r2
 80061b2:	d037      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80061b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061be:	d00e      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80061c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c4:	d816      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d018      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80061ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ce:	d111      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b8c      	ldr	r3, [pc, #560]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d4:	4a8b      	ldr	r2, [pc, #556]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061dc:	e00f      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e2:	3308      	adds	r3, #8
 80061e4:	2101      	movs	r1, #1
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fe8e 	bl	8006f08 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061f2:	e004      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061fa:	e000      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80061fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006206:	4b7f      	ldr	r3, [pc, #508]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800620a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800620e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006214:	4a7b      	ldr	r2, [pc, #492]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006216:	430b      	orrs	r3, r1
 8006218:	6513      	str	r3, [r2, #80]	@ 0x50
 800621a:	e003      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006234:	2300      	movs	r3, #0
 8006236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800623a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800623e:	460b      	mov	r3, r1
 8006240:	4313      	orrs	r3, r2
 8006242:	d039      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624a:	2b03      	cmp	r3, #3
 800624c:	d81c      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800624e:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	08006291 	.word	0x08006291
 8006258:	08006265 	.word	0x08006265
 800625c:	08006273 	.word	0x08006273
 8006260:	08006291 	.word	0x08006291
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006264:	4b67      	ldr	r3, [pc, #412]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	4a66      	ldr	r2, [pc, #408]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800626e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006270:	e00f      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006276:	3308      	adds	r3, #8
 8006278:	2102      	movs	r1, #2
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fe44 	bl	8006f08 <RCCEx_PLL2_Config>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006286:	e004      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800628e:	e000      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800629a:	4b5a      	ldr	r3, [pc, #360]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800629c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629e:	f023 0103 	bic.w	r1, r3, #3
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a8:	4a56      	ldr	r2, [pc, #344]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062aa:	430b      	orrs	r3, r1
 80062ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062ae:	e003      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80062c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062c8:	2300      	movs	r3, #0
 80062ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80062d2:	460b      	mov	r3, r1
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f000 809f 	beq.w	8006418 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062da:	4b4b      	ldr	r3, [pc, #300]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a4a      	ldr	r2, [pc, #296]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80062e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062e6:	f7fb fd05 	bl	8001cf4 <HAL_GetTick>
 80062ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ee:	e00b      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f0:	f7fb fd00 	bl	8001cf4 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b64      	cmp	r3, #100	@ 0x64
 80062fe:	d903      	bls.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006306:	e005      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006308:	4b3f      	ldr	r3, [pc, #252]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0ed      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006318:	2b00      	cmp	r3, #0
 800631a:	d179      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800631c:	4b39      	ldr	r3, [pc, #228]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800631e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006328:	4053      	eors	r3, r2
 800632a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800632e:	2b00      	cmp	r3, #0
 8006330:	d015      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006332:	4b34      	ldr	r3, [pc, #208]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800633e:	4b31      	ldr	r3, [pc, #196]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	4a30      	ldr	r2, [pc, #192]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006348:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800634a:	4b2e      	ldr	r3, [pc, #184]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	4a2d      	ldr	r2, [pc, #180]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006354:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006356:	4a2b      	ldr	r2, [pc, #172]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800635c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800636a:	d118      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fb fcc2 	bl	8001cf4 <HAL_GetTick>
 8006370:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006374:	e00d      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006376:	f7fb fcbd 	bl	8001cf4 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006386:	429a      	cmp	r2, r3
 8006388:	d903      	bls.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006390:	e005      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006392:	4b1c      	ldr	r3, [pc, #112]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0eb      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800639e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d129      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b6:	d10e      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80063b8:	4b12      	ldr	r3, [pc, #72]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063c8:	091a      	lsrs	r2, r3, #4
 80063ca:	4b10      	ldr	r3, [pc, #64]	@ (800640c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6113      	str	r3, [r2, #16]
 80063d4:	e005      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80063d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	4a0a      	ldr	r2, [pc, #40]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063e0:	6113      	str	r3, [r2, #16]
 80063e2:	4b08      	ldr	r3, [pc, #32]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80063e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f2:	4a04      	ldr	r2, [pc, #16]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063f4:	430b      	orrs	r3, r1
 80063f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f8:	e00e      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006402:	e009      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006404:	58024400 	.word	0x58024400
 8006408:	58024800 	.word	0x58024800
 800640c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 0301 	and.w	r3, r2, #1
 8006424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800642e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	f000 8089 	beq.w	800654c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006440:	2b28      	cmp	r3, #40	@ 0x28
 8006442:	d86b      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006444:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	08006525 	.word	0x08006525
 8006450:	0800651d 	.word	0x0800651d
 8006454:	0800651d 	.word	0x0800651d
 8006458:	0800651d 	.word	0x0800651d
 800645c:	0800651d 	.word	0x0800651d
 8006460:	0800651d 	.word	0x0800651d
 8006464:	0800651d 	.word	0x0800651d
 8006468:	0800651d 	.word	0x0800651d
 800646c:	080064f1 	.word	0x080064f1
 8006470:	0800651d 	.word	0x0800651d
 8006474:	0800651d 	.word	0x0800651d
 8006478:	0800651d 	.word	0x0800651d
 800647c:	0800651d 	.word	0x0800651d
 8006480:	0800651d 	.word	0x0800651d
 8006484:	0800651d 	.word	0x0800651d
 8006488:	0800651d 	.word	0x0800651d
 800648c:	08006507 	.word	0x08006507
 8006490:	0800651d 	.word	0x0800651d
 8006494:	0800651d 	.word	0x0800651d
 8006498:	0800651d 	.word	0x0800651d
 800649c:	0800651d 	.word	0x0800651d
 80064a0:	0800651d 	.word	0x0800651d
 80064a4:	0800651d 	.word	0x0800651d
 80064a8:	0800651d 	.word	0x0800651d
 80064ac:	08006525 	.word	0x08006525
 80064b0:	0800651d 	.word	0x0800651d
 80064b4:	0800651d 	.word	0x0800651d
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	0800651d 	.word	0x0800651d
 80064c0:	0800651d 	.word	0x0800651d
 80064c4:	0800651d 	.word	0x0800651d
 80064c8:	0800651d 	.word	0x0800651d
 80064cc:	08006525 	.word	0x08006525
 80064d0:	0800651d 	.word	0x0800651d
 80064d4:	0800651d 	.word	0x0800651d
 80064d8:	0800651d 	.word	0x0800651d
 80064dc:	0800651d 	.word	0x0800651d
 80064e0:	0800651d 	.word	0x0800651d
 80064e4:	0800651d 	.word	0x0800651d
 80064e8:	0800651d 	.word	0x0800651d
 80064ec:	08006525 	.word	0x08006525
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	3308      	adds	r3, #8
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 fd05 	bl	8006f08 <RCCEx_PLL2_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006504:	e00f      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650a:	3328      	adds	r3, #40	@ 0x28
 800650c:	2101      	movs	r1, #1
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fdac 	bl	800706c <RCCEx_PLL3_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800651a:	e004      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800652e:	4bbf      	ldr	r3, [pc, #764]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006532:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800653c:	4abb      	ldr	r2, [pc, #748]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800653e:	430b      	orrs	r3, r1
 8006540:	6553      	str	r3, [r2, #84]	@ 0x54
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 0302 	and.w	r3, r2, #2
 8006558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006562:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d041      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006572:	2b05      	cmp	r3, #5
 8006574:	d824      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006576:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065c9 	.word	0x080065c9
 8006580:	08006595 	.word	0x08006595
 8006584:	080065ab 	.word	0x080065ab
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065c9 	.word	0x080065c9
 8006590:	080065c9 	.word	0x080065c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006598:	3308      	adds	r3, #8
 800659a:	2101      	movs	r1, #1
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fcb3 	bl	8006f08 <RCCEx_PLL2_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065a8:	e00f      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	3328      	adds	r3, #40	@ 0x28
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fd5a 	bl	800706c <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065be:	e004      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80065c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065d2:	4b96      	ldr	r3, [pc, #600]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d6:	f023 0107 	bic.w	r1, r3, #7
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065e0:	4a92      	ldr	r2, [pc, #584]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065e2:	430b      	orrs	r3, r1
 80065e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80065e6:	e003      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f002 0304 	and.w	r3, r2, #4
 80065fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006600:	2300      	movs	r3, #0
 8006602:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006606:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800660a:	460b      	mov	r3, r1
 800660c:	4313      	orrs	r3, r2
 800660e:	d044      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006618:	2b05      	cmp	r3, #5
 800661a:	d825      	bhi.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800661c:	a201      	add	r2, pc, #4	@ (adr r2, 8006624 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	08006671 	.word	0x08006671
 8006628:	0800663d 	.word	0x0800663d
 800662c:	08006653 	.word	0x08006653
 8006630:	08006671 	.word	0x08006671
 8006634:	08006671 	.word	0x08006671
 8006638:	08006671 	.word	0x08006671
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	3308      	adds	r3, #8
 8006642:	2101      	movs	r1, #1
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fc5f 	bl	8006f08 <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006650:	e00f      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	3328      	adds	r3, #40	@ 0x28
 8006658:	2101      	movs	r1, #1
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fd06 	bl	800706c <RCCEx_PLL3_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006666:	e004      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800666e:	e000      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800667a:	4b6c      	ldr	r3, [pc, #432]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800667c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667e:	f023 0107 	bic.w	r1, r3, #7
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800668a:	4a68      	ldr	r2, [pc, #416]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800668c:	430b      	orrs	r3, r1
 800668e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006690:	e003      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f002 0320 	and.w	r3, r2, #32
 80066a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066aa:	2300      	movs	r3, #0
 80066ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d055      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066c6:	d033      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80066c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066cc:	d82c      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d2:	d02f      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80066d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d8:	d826      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066de:	d02b      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80066e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066e4:	d820      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ea:	d012      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80066ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f0:	d81a      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d022      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80066f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066fa:	d115      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	3308      	adds	r3, #8
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fbff 	bl	8006f08 <RCCEx_PLL2_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006710:	e015      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	3328      	adds	r3, #40	@ 0x28
 8006718:	2102      	movs	r1, #2
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fca6 	bl	800706c <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006726:	e00a      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800672e:	e006      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006730:	bf00      	nop
 8006732:	e004      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006734:	bf00      	nop
 8006736:	e002      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006738:	bf00      	nop
 800673a:	e000      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800673c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006746:	4b39      	ldr	r3, [pc, #228]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	4a35      	ldr	r2, [pc, #212]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006758:	430b      	orrs	r3, r1
 800675a:	6553      	str	r3, [r2, #84]	@ 0x54
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006776:	2300      	movs	r3, #0
 8006778:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800677c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d058      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800678e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006792:	d033      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006794:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006798:	d82c      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679e:	d02f      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a4:	d826      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067aa:	d02b      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80067ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b0:	d820      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b6:	d012      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067bc:	d81a      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d022      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80067c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c6:	d115      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067cc:	3308      	adds	r3, #8
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fb99 	bl	8006f08 <RCCEx_PLL2_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067dc:	e015      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	3328      	adds	r3, #40	@ 0x28
 80067e4:	2102      	movs	r1, #2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fc40 	bl	800706c <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067f2:	e00a      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067fa:	e006      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067fc:	bf00      	nop
 80067fe:	e004      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006800:	bf00      	nop
 8006802:	e002      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006804:	bf00      	nop
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10e      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006812:	4b06      	ldr	r3, [pc, #24]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006822:	4a02      	ldr	r2, [pc, #8]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006824:	430b      	orrs	r3, r1
 8006826:	6593      	str	r3, [r2, #88]	@ 0x58
 8006828:	e006      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800682a:	bf00      	nop
 800682c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006848:	2300      	movs	r3, #0
 800684a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800684e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006852:	460b      	mov	r3, r1
 8006854:	4313      	orrs	r3, r2
 8006856:	d055      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006860:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006864:	d033      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006866:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800686a:	d82c      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800686c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006870:	d02f      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006876:	d826      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006878:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800687c:	d02b      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800687e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006882:	d820      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006888:	d012      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800688a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800688e:	d81a      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d022      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006898:	d115      	bne.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	3308      	adds	r3, #8
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fb30 	bl	8006f08 <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068ae:	e015      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	3328      	adds	r3, #40	@ 0x28
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fbd7 	bl	800706c <RCCEx_PLL3_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068c4:	e00a      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068cc:	e006      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068ce:	bf00      	nop
 80068d0:	e004      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068d2:	bf00      	nop
 80068d4:	e002      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068d6:	bf00      	nop
 80068d8:	e000      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80068da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10b      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80068e4:	4ba1      	ldr	r3, [pc, #644]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068f4:	4a9d      	ldr	r2, [pc, #628]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f6:	430b      	orrs	r3, r1
 80068f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068fa:	e003      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f002 0308 	and.w	r3, r2, #8
 8006910:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006914:	2300      	movs	r3, #0
 8006916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800691a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800691e:	460b      	mov	r3, r1
 8006920:	4313      	orrs	r3, r2
 8006922:	d01e      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006930:	d10c      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006936:	3328      	adds	r3, #40	@ 0x28
 8006938:	2102      	movs	r1, #2
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fb96 	bl	800706c <RCCEx_PLL3_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800694c:	4b87      	ldr	r3, [pc, #540]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006950:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695c:	4a83      	ldr	r2, [pc, #524]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800695e:	430b      	orrs	r3, r1
 8006960:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f002 0310 	and.w	r3, r2, #16
 800696e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006978:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800697c:	460b      	mov	r3, r1
 800697e:	4313      	orrs	r3, r2
 8006980:	d01e      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800698a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698e:	d10c      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006994:	3328      	adds	r3, #40	@ 0x28
 8006996:	2102      	movs	r1, #2
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fb67 	bl	800706c <RCCEx_PLL3_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069aa:	4b70      	ldr	r3, [pc, #448]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ba:	4a6c      	ldr	r2, [pc, #432]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069bc:	430b      	orrs	r3, r1
 80069be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80069cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069d0:	2300      	movs	r3, #0
 80069d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80069da:	460b      	mov	r3, r1
 80069dc:	4313      	orrs	r3, r2
 80069de:	d03e      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069ec:	d022      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80069ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069f2:	d81b      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fc:	d00b      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80069fe:	e015      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	3308      	adds	r3, #8
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fa7d 	bl	8006f08 <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a14:	e00f      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	3328      	adds	r3, #40	@ 0x28
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fb24 	bl	800706c <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a4e:	4a47      	ldr	r2, [pc, #284]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d03b      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a86:	d01f      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006a88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a8c:	d818      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a92:	d003      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006a94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a98:	d007      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006a9a:	e011      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9c:	4b33      	ldr	r3, [pc, #204]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	4a32      	ldr	r2, [pc, #200]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006aa8:	e00f      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	3328      	adds	r3, #40	@ 0x28
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fada 	bl	800706c <RCCEx_PLL3_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006abe:	e004      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10b      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ad2:	4b26      	ldr	r3, [pc, #152]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae2:	4a22      	ldr	r2, [pc, #136]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae4:	430b      	orrs	r3, r1
 8006ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ae8:	e003      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b00:	2300      	movs	r3, #0
 8006b02:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d034      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1c:	d007      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006b1e:	e011      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b20:	4b12      	ldr	r3, [pc, #72]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b24:	4a11      	ldr	r2, [pc, #68]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b2c:	e00e      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	3308      	adds	r3, #8
 8006b34:	2102      	movs	r1, #2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 f9e6 	bl	8006f08 <RCCEx_PLL2_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b42:	e003      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10d      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b54:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b62:	4a02      	ldr	r2, [pc, #8]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b68:	e006      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006b6a:	bf00      	nop
 8006b6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b86:	2300      	movs	r3, #0
 8006b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d00c      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	3328      	adds	r3, #40	@ 0x28
 8006b9a:	2102      	movs	r1, #2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 fa65 	bl	800706c <RCCEx_PLL3_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006bba:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bc0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	d038      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd6:	d018      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bdc:	d811      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be2:	d014      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be8:	d80b      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d011      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf4:	4bc3      	ldr	r3, [pc, #780]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf8:	4ac2      	ldr	r2, [pc, #776]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c00:	e008      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c08:	e004      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c0a:	bf00      	nop
 8006c0c:	e002      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c1c:	4bb9      	ldr	r3, [pc, #740]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c2c:	4ab5      	ldr	r2, [pc, #724]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c52:	460b      	mov	r3, r1
 8006c54:	4313      	orrs	r3, r2
 8006c56:	d009      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c58:	4baa      	ldr	r3, [pc, #680]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c66:	4aa7      	ldr	r2, [pc, #668]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006c78:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c82:	460b      	mov	r3, r1
 8006c84:	4313      	orrs	r3, r2
 8006c86:	d00a      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c88:	4b9e      	ldr	r3, [pc, #632]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006c98:	4a9a      	ldr	r2, [pc, #616]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006caa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cac:	2300      	movs	r3, #0
 8006cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cba:	4b92      	ldr	r3, [pc, #584]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cbe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cc8:	4a8e      	ldr	r2, [pc, #568]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cdc:	2300      	movs	r3, #0
 8006cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cea:	4b86      	ldr	r3, [pc, #536]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	4a85      	ldr	r2, [pc, #532]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cf0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006cf4:	6113      	str	r3, [r2, #16]
 8006cf6:	4b83      	ldr	r3, [pc, #524]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cf8:	6919      	ldr	r1, [r3, #16]
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d02:	4a80      	ldr	r2, [pc, #512]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d16:	2300      	movs	r3, #0
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d24:	4b77      	ldr	r3, [pc, #476]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d32:	4a74      	ldr	r2, [pc, #464]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d34:	430b      	orrs	r3, r1
 8006d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d46:	2300      	movs	r3, #0
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	d00a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d54:	4b6b      	ldr	r3, [pc, #428]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d64:	4a67      	ldr	r2, [pc, #412]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	2100      	movs	r1, #0
 8006d74:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d80:	460b      	mov	r3, r1
 8006d82:	4313      	orrs	r3, r2
 8006d84:	d011      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 f8ba 	bl	8006f08 <RCCEx_PLL2_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	2100      	movs	r1, #0
 8006db4:	6239      	str	r1, [r7, #32]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d011      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dca:	3308      	adds	r3, #8
 8006dcc:	2101      	movs	r1, #1
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f89a 	bl	8006f08 <RCCEx_PLL2_Config>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	2100      	movs	r1, #0
 8006df4:	61b9      	str	r1, [r7, #24]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d011      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f87a 	bl	8006f08 <RCCEx_PLL2_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	2100      	movs	r1, #0
 8006e34:	6139      	str	r1, [r7, #16]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e40:	460b      	mov	r3, r1
 8006e42:	4313      	orrs	r3, r2
 8006e44:	d011      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4a:	3328      	adds	r3, #40	@ 0x28
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f90c 	bl	800706c <RCCEx_PLL3_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	2100      	movs	r1, #0
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e80:	460b      	mov	r3, r1
 8006e82:	4313      	orrs	r3, r2
 8006e84:	d011      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	3328      	adds	r3, #40	@ 0x28
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 f8ec 	bl	800706c <RCCEx_PLL3_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	d011      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	3328      	adds	r3, #40	@ 0x28
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f8cc 	bl	800706c <RCCEx_PLL3_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006eea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006efe:	46bd      	mov	sp, r7
 8006f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f04:	58024400 	.word	0x58024400

08006f08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f16:	4b53      	ldr	r3, [pc, #332]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d101      	bne.n	8006f26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e099      	b.n	800705a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f26:	4b4f      	ldr	r3, [pc, #316]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a4e      	ldr	r2, [pc, #312]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f32:	f7fa fedf 	bl	8001cf4 <HAL_GetTick>
 8006f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f38:	e008      	b.n	8006f4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f3a:	f7fa fedb 	bl	8001cf4 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e086      	b.n	800705a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f4c:	4b45      	ldr	r3, [pc, #276]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1f0      	bne.n	8006f3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f58:	4b42      	ldr	r3, [pc, #264]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	031b      	lsls	r3, r3, #12
 8006f66:	493f      	ldr	r1, [pc, #252]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	025b      	lsls	r3, r3, #9
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	061b      	lsls	r3, r3, #24
 8006f98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f9c:	4931      	ldr	r1, [pc, #196]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fa2:	4b30      	ldr	r3, [pc, #192]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	492d      	ldr	r1, [pc, #180]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb8:	f023 0220 	bic.w	r2, r3, #32
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	4928      	ldr	r1, [pc, #160]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fc6:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	4a26      	ldr	r2, [pc, #152]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	f023 0310 	bic.w	r3, r3, #16
 8006fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fd2:	4b24      	ldr	r3, [pc, #144]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fd6:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <RCCEx_PLL2_Config+0x160>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	69d2      	ldr	r2, [r2, #28]
 8006fde:	00d2      	lsls	r2, r2, #3
 8006fe0:	4920      	ldr	r1, [pc, #128]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fea:	4a1e      	ldr	r2, [pc, #120]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006fec:	f043 0310 	orr.w	r3, r3, #16
 8006ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	4a19      	ldr	r2, [pc, #100]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007002:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007004:	e00f      	b.n	8007026 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d106      	bne.n	800701a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800700c:	4b15      	ldr	r3, [pc, #84]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a14      	ldr	r2, [pc, #80]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8007012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007018:	e005      	b.n	8007026 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800701a:	4b12      	ldr	r3, [pc, #72]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	4a11      	ldr	r2, [pc, #68]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8007020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007024:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007026:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a0e      	ldr	r2, [pc, #56]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 800702c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007032:	f7fa fe5f 	bl	8001cf4 <HAL_GetTick>
 8007036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007038:	e008      	b.n	800704c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800703a:	f7fa fe5b 	bl	8001cf4 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d901      	bls.n	800704c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e006      	b.n	800705a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800704c:	4b05      	ldr	r3, [pc, #20]	@ (8007064 <RCCEx_PLL2_Config+0x15c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0f0      	beq.n	800703a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	58024400 	.word	0x58024400
 8007068:	ffff0007 	.word	0xffff0007

0800706c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800707a:	4b53      	ldr	r3, [pc, #332]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d101      	bne.n	800708a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e099      	b.n	80071be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800708a:	4b4f      	ldr	r3, [pc, #316]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a4e      	ldr	r2, [pc, #312]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007096:	f7fa fe2d 	bl	8001cf4 <HAL_GetTick>
 800709a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800709c:	e008      	b.n	80070b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800709e:	f7fa fe29 	bl	8001cf4 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e086      	b.n	80071be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070b0:	4b45      	ldr	r3, [pc, #276]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1f0      	bne.n	800709e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070bc:	4b42      	ldr	r3, [pc, #264]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	051b      	lsls	r3, r3, #20
 80070ca:	493f      	ldr	r1, [pc, #252]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	3b01      	subs	r3, #1
 80070d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	3b01      	subs	r3, #1
 80070e0:	025b      	lsls	r3, r3, #9
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	041b      	lsls	r3, r3, #16
 80070ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007100:	4931      	ldr	r1, [pc, #196]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007102:	4313      	orrs	r3, r2
 8007104:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007106:	4b30      	ldr	r3, [pc, #192]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	492d      	ldr	r1, [pc, #180]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007118:	4b2b      	ldr	r3, [pc, #172]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	4928      	ldr	r1, [pc, #160]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007126:	4313      	orrs	r3, r2
 8007128:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800712a:	4b27      	ldr	r3, [pc, #156]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	4a26      	ldr	r2, [pc, #152]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007134:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007136:	4b24      	ldr	r3, [pc, #144]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800713a:	4b24      	ldr	r3, [pc, #144]	@ (80071cc <RCCEx_PLL3_Config+0x160>)
 800713c:	4013      	ands	r3, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	69d2      	ldr	r2, [r2, #28]
 8007142:	00d2      	lsls	r2, r2, #3
 8007144:	4920      	ldr	r1, [pc, #128]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007146:	4313      	orrs	r3, r2
 8007148:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800714a:	4b1f      	ldr	r3, [pc, #124]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	4a1e      	ldr	r2, [pc, #120]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007154:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800715c:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	4a19      	ldr	r2, [pc, #100]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007162:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007166:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007168:	e00f      	b.n	800718a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d106      	bne.n	800717e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007170:	4b15      	ldr	r3, [pc, #84]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	4a14      	ldr	r2, [pc, #80]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007176:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800717a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800717c:	e005      	b.n	800718a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800717e:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	4a11      	ldr	r2, [pc, #68]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007184:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007188:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800718a:	4b0f      	ldr	r3, [pc, #60]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a0e      	ldr	r2, [pc, #56]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 8007190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007196:	f7fa fdad 	bl	8001cf4 <HAL_GetTick>
 800719a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800719c:	e008      	b.n	80071b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800719e:	f7fa fda9 	bl	8001cf4 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e006      	b.n	80071be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071b0:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <RCCEx_PLL3_Config+0x15c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	58024400 	.word	0x58024400
 80071cc:	ffff0007 	.word	0xffff0007

080071d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e10f      	b.n	8007402 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a87      	ldr	r2, [pc, #540]	@ (800740c <HAL_SPI_Init+0x23c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00f      	beq.n	8007212 <HAL_SPI_Init+0x42>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a86      	ldr	r2, [pc, #536]	@ (8007410 <HAL_SPI_Init+0x240>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d00a      	beq.n	8007212 <HAL_SPI_Init+0x42>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a84      	ldr	r2, [pc, #528]	@ (8007414 <HAL_SPI_Init+0x244>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d005      	beq.n	8007212 <HAL_SPI_Init+0x42>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	2b0f      	cmp	r3, #15
 800720c:	d901      	bls.n	8007212 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e0f7      	b.n	8007402 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fe2e 	bl	8007e74 <SPI_GetPacketSize>
 8007218:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a7b      	ldr	r2, [pc, #492]	@ (800740c <HAL_SPI_Init+0x23c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00c      	beq.n	800723e <HAL_SPI_Init+0x6e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a79      	ldr	r2, [pc, #484]	@ (8007410 <HAL_SPI_Init+0x240>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d007      	beq.n	800723e <HAL_SPI_Init+0x6e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a78      	ldr	r2, [pc, #480]	@ (8007414 <HAL_SPI_Init+0x244>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d002      	beq.n	800723e <HAL_SPI_Init+0x6e>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b08      	cmp	r3, #8
 800723c:	d811      	bhi.n	8007262 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007242:	4a72      	ldr	r2, [pc, #456]	@ (800740c <HAL_SPI_Init+0x23c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d009      	beq.n	800725c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a70      	ldr	r2, [pc, #448]	@ (8007410 <HAL_SPI_Init+0x240>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_SPI_Init+0x8c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a6f      	ldr	r2, [pc, #444]	@ (8007414 <HAL_SPI_Init+0x244>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d104      	bne.n	8007266 <HAL_SPI_Init+0x96>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b10      	cmp	r3, #16
 8007260:	d901      	bls.n	8007266 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e0cd      	b.n	8007402 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fa f84c 	bl	8001318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80072a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072ac:	d119      	bne.n	80072e2 <HAL_SPI_Init+0x112>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072b6:	d103      	bne.n	80072c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10c      	bne.n	80072e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072d0:	d107      	bne.n	80072e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00f      	beq.n	800730e <HAL_SPI_Init+0x13e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b06      	cmp	r3, #6
 80072f4:	d90b      	bls.n	800730e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e007      	b.n	800731e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800731c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	431a      	orrs	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007330:	ea42 0103 	orr.w	r1, r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800737e:	ea42 0103 	orr.w	r1, r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d113      	bne.n	80073be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0201 	bic.w	r2, r2, #1
 80073cc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40013000 	.word	0x40013000
 8007410:	40003800 	.word	0x40003800
 8007414:	40003c00 	.word	0x40003c00

08007418 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4613      	mov	r3, r2
 8007426:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3320      	adds	r3, #32
 800742e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007430:	f7fa fc60 	bl	8001cf4 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b01      	cmp	r3, #1
 8007440:	d001      	beq.n	8007446 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007442:	2302      	movs	r3, #2
 8007444:	e1d1      	b.n	80077ea <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_SPI_Transmit+0x3a>
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e1c9      	b.n	80077ea <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_SPI_Transmit+0x4c>
 8007460:	2302      	movs	r3, #2
 8007462:	e1c2      	b.n	80077ea <HAL_SPI_Transmit+0x3d2>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2203      	movs	r2, #3
 8007470:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	88fa      	ldrh	r2, [r7, #6]
 800748e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80074bc:	d108      	bne.n	80074d0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e009      	b.n	80074e4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80074e2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	4b96      	ldr	r3, [pc, #600]	@ (8007744 <HAL_SPI_Transmit+0x32c>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	88f9      	ldrh	r1, [r7, #6]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	430b      	orrs	r3, r1
 80074f6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007510:	d107      	bne.n	8007522 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d947      	bls.n	80075ba <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800752a:	e03f      	b.n	80075ac <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b02      	cmp	r3, #2
 8007538:	d114      	bne.n	8007564 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6812      	ldr	r2, [r2, #0]
 8007544:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800754a:	1d1a      	adds	r2, r3, #4
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007562:	e023      	b.n	80075ac <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007564:	f7fa fbc6 	bl	8001cf4 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d803      	bhi.n	800757c <HAL_SPI_Transmit+0x164>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d102      	bne.n	8007582 <HAL_SPI_Transmit+0x16a>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d114      	bne.n	80075ac <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fba8 	bl	8007cd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800758e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e11e      	b.n	80077ea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1b9      	bne.n	800752c <HAL_SPI_Transmit+0x114>
 80075b8:	e0f1      	b.n	800779e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b07      	cmp	r3, #7
 80075c0:	f240 80e6 	bls.w	8007790 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80075c4:	e05d      	b.n	8007682 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d132      	bne.n	800763a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d918      	bls.n	8007612 <HAL_SPI_Transmit+0x1fa>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d014      	beq.n	8007612 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f8:	1d1a      	adds	r2, r3, #4
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b02      	subs	r3, #2
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007610:	e037      	b.n	8007682 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007616:	881a      	ldrh	r2, [r3, #0]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007638:	e023      	b.n	8007682 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800763a:	f7fa fb5b 	bl	8001cf4 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d803      	bhi.n	8007652 <HAL_SPI_Transmit+0x23a>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d102      	bne.n	8007658 <HAL_SPI_Transmit+0x240>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d114      	bne.n	8007682 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fb3d 	bl	8007cd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007664:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e0b3      	b.n	80077ea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d19b      	bne.n	80075c6 <HAL_SPI_Transmit+0x1ae>
 800768e:	e086      	b.n	800779e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d154      	bne.n	8007748 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d918      	bls.n	80076dc <HAL_SPI_Transmit+0x2c4>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ae:	2b40      	cmp	r3, #64	@ 0x40
 80076b0:	d914      	bls.n	80076dc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b04      	subs	r3, #4
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076da:	e059      	b.n	8007790 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d917      	bls.n	8007718 <HAL_SPI_Transmit+0x300>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d013      	beq.n	8007718 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076f4:	881a      	ldrh	r2, [r3, #0]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b02      	subs	r3, #2
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007716:	e03b      	b.n	8007790 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3320      	adds	r3, #32
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007742:	e025      	b.n	8007790 <HAL_SPI_Transmit+0x378>
 8007744:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007748:	f7fa fad4 	bl	8001cf4 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d803      	bhi.n	8007760 <HAL_SPI_Transmit+0x348>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d102      	bne.n	8007766 <HAL_SPI_Transmit+0x34e>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d114      	bne.n	8007790 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fab6 	bl	8007cd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007772:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e02c      	b.n	80077ea <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	f47f af79 	bne.w	8007690 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2108      	movs	r1, #8
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fb35 	bl	8007e18 <SPI_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ba:	f043 0220 	orr.w	r2, r3, #32
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fa87 	bl	8007cd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80077e8:	2300      	movs	r3, #0
  }
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop

080077f4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	b29b      	uxth	r3, r3
 800780c:	3301      	adds	r3, #1
 800780e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3330      	adds	r3, #48	@ 0x30
 8007816:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007818:	f7fa fa6c 	bl	8001cf4 <HAL_GetTick>
 800781c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b01      	cmp	r3, #1
 8007828:	d001      	beq.n	800782e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800782a:	2302      	movs	r3, #2
 800782c:	e250      	b.n	8007cd0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <HAL_SPI_Receive+0x46>
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e248      	b.n	8007cd0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_SPI_Receive+0x58>
 8007848:	2302      	movs	r3, #2
 800784a:	e241      	b.n	8007cd0 <HAL_SPI_Receive+0x4dc>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2204      	movs	r2, #4
 8007858:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	88fa      	ldrh	r2, [r7, #6]
 800786e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80078a4:	d108      	bne.n	80078b8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e009      	b.n	80078cc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80078ca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	4b95      	ldr	r3, [pc, #596]	@ (8007b28 <HAL_SPI_Receive+0x334>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	88f9      	ldrh	r1, [r7, #6]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	430b      	orrs	r3, r1
 80078de:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078f8:	d107      	bne.n	800790a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007908:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	2b0f      	cmp	r3, #15
 8007910:	d96c      	bls.n	80079ec <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007912:	e064      	b.n	80079de <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b01      	cmp	r3, #1
 8007928:	d114      	bne.n	8007954 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007932:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007934:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007952:	e044      	b.n	80079de <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800795a:	b29b      	uxth	r3, r3
 800795c:	8bfa      	ldrh	r2, [r7, #30]
 800795e:	429a      	cmp	r2, r3
 8007960:	d919      	bls.n	8007996 <HAL_SPI_Receive+0x1a2>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d014      	beq.n	8007996 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007974:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007976:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800797c:	1d1a      	adds	r2, r3, #4
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007994:	e023      	b.n	80079de <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007996:	f7fa f9ad 	bl	8001cf4 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d803      	bhi.n	80079ae <HAL_SPI_Receive+0x1ba>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ac:	d102      	bne.n	80079b4 <HAL_SPI_Receive+0x1c0>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d114      	bne.n	80079de <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f98f 	bl	8007cd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e178      	b.n	8007cd0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d194      	bne.n	8007914 <HAL_SPI_Receive+0x120>
 80079ea:	e15e      	b.n	8007caa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b07      	cmp	r3, #7
 80079f2:	f240 8153 	bls.w	8007c9c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80079f6:	e08f      	b.n	8007b18 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d114      	bne.n	8007a38 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	8812      	ldrh	r2, [r2, #0]
 8007a16:	b292      	uxth	r2, r2
 8007a18:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a1e:	1c9a      	adds	r2, r3, #2
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a36:	e06f      	b.n	8007b18 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8bfa      	ldrh	r2, [r7, #30]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d924      	bls.n	8007a90 <HAL_SPI_Receive+0x29c>
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01f      	beq.n	8007a90 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	8812      	ldrh	r2, [r2, #0]
 8007a58:	b292      	uxth	r2, r2
 8007a5a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a60:	1c9a      	adds	r2, r3, #2
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	8812      	ldrh	r2, [r2, #0]
 8007a6e:	b292      	uxth	r2, r2
 8007a70:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a76:	1c9a      	adds	r2, r3, #2
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b02      	subs	r3, #2
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a8e:	e043      	b.n	8007b18 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d119      	bne.n	8007ad0 <HAL_SPI_Receive+0x2dc>
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d014      	beq.n	8007ad0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	8812      	ldrh	r2, [r2, #0]
 8007aae:	b292      	uxth	r2, r2
 8007ab0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab6:	1c9a      	adds	r2, r3, #2
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ace:	e023      	b.n	8007b18 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ad0:	f7fa f910 	bl	8001cf4 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d803      	bhi.n	8007ae8 <HAL_SPI_Receive+0x2f4>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d102      	bne.n	8007aee <HAL_SPI_Receive+0x2fa>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d114      	bne.n	8007b18 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f8f2 	bl	8007cd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e0db      	b.n	8007cd0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f47f af69 	bne.w	80079f8 <HAL_SPI_Receive+0x204>
 8007b26:	e0c0      	b.n	8007caa <HAL_SPI_Receive+0x4b6>
 8007b28:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d117      	bne.n	8007b72 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b70:	e094      	b.n	8007c9c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	8bfa      	ldrh	r2, [r7, #30]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d946      	bls.n	8007c0e <HAL_SPI_Receive+0x41a>
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d041      	beq.n	8007c0e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bce:	7812      	ldrb	r2, [r2, #0]
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b04      	subs	r3, #4
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c0c:	e046      	b.n	8007c9c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d81c      	bhi.n	8007c54 <HAL_SPI_Receive+0x460>
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d017      	beq.n	8007c54 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c30:	7812      	ldrb	r2, [r2, #0]
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c52:	e023      	b.n	8007c9c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c54:	f7fa f84e 	bl	8001cf4 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d803      	bhi.n	8007c6c <HAL_SPI_Receive+0x478>
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d102      	bne.n	8007c72 <HAL_SPI_Receive+0x47e>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d114      	bne.n	8007c9c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f830 	bl	8007cd8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e019      	b.n	8007cd0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f47f af41 	bne.w	8007b2c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f814 	bl	8007cd8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007cce:	2300      	movs	r3, #0
  }
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0208 	orr.w	r2, r2, #8
 8007cf6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0210 	orr.w	r2, r2, #16
 8007d06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0201 	bic.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6919      	ldr	r1, [r3, #16]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b3c      	ldr	r3, [pc, #240]	@ (8007e14 <SPI_CloseTransfer+0x13c>)
 8007d24:	400b      	ands	r3, r1
 8007d26:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007d36:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d014      	beq.n	8007d6e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00f      	beq.n	8007d6e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699a      	ldr	r2, [r3, #24]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0220 	orr.w	r2, r2, #32
 8007d6c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d014      	beq.n	8007da4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00f      	beq.n	8007da4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d8a:	f043 0204 	orr.w	r2, r3, #4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699a      	ldr	r2, [r3, #24]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007da2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00f      	beq.n	8007dce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007db4:	f043 0201 	orr.w	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dcc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00f      	beq.n	8007df8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dde:	f043 0208 	orr.w	r2, r3, #8
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007df6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	fffffc90 	.word	0xfffffc90

08007e18 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e28:	e010      	b.n	8007e4c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e2a:	f7f9 ff63 	bl	8001cf4 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d803      	bhi.n	8007e42 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d102      	bne.n	8007e48 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e00f      	b.n	8007e6c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695a      	ldr	r2, [r3, #20]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4013      	ands	r3, r2
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bf0c      	ite	eq
 8007e5c:	2301      	moveq	r3, #1
 8007e5e:	2300      	movne	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d0df      	beq.n	8007e2a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e80:	095b      	lsrs	r3, r3, #5
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	3307      	adds	r3, #7
 8007e92:	08db      	lsrs	r3, r3, #3
 8007e94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e049      	b.n	8007f50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d106      	bne.n	8007ed6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7f9 fdfb 	bl	8001acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f000 fd59 	bl	80089a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d001      	beq.n	8007f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e054      	b.n	800801a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a26      	ldr	r2, [pc, #152]	@ (8008028 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d022      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f9a:	d01d      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a22      	ldr	r2, [pc, #136]	@ (800802c <HAL_TIM_Base_Start_IT+0xd4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d018      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a21      	ldr	r2, [pc, #132]	@ (8008030 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d013      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008034 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00e      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8008038 <HAL_TIM_Base_Start_IT+0xe0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d009      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800803c <HAL_TIM_Base_Start_IT+0xe4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d004      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x80>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8008040 <HAL_TIM_Base_Start_IT+0xe8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d115      	bne.n	8008004 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	4b19      	ldr	r3, [pc, #100]	@ (8008044 <HAL_TIM_Base_Start_IT+0xec>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b06      	cmp	r3, #6
 8007fe8:	d015      	beq.n	8008016 <HAL_TIM_Base_Start_IT+0xbe>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff0:	d011      	beq.n	8008016 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0201 	orr.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008002:	e008      	b.n	8008016 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e000      	b.n	8008018 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008016:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40010000 	.word	0x40010000
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40010400 	.word	0x40010400
 800803c:	40001800 	.word	0x40001800
 8008040:	40014000 	.word	0x40014000
 8008044:	00010007 	.word	0x00010007

08008048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e049      	b.n	80080ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f841 	bl	80080f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f000 fc8a 	bl	80089a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_TIM_PWM_Start+0x24>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	bf14      	ite	ne
 8008128:	2301      	movne	r3, #1
 800812a:	2300      	moveq	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e03c      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d109      	bne.n	800814a <HAL_TIM_PWM_Start+0x3e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b01      	cmp	r3, #1
 8008140:	bf14      	ite	ne
 8008142:	2301      	movne	r3, #1
 8008144:	2300      	moveq	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	e02f      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d109      	bne.n	8008164 <HAL_TIM_PWM_Start+0x58>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	bf14      	ite	ne
 800815c:	2301      	movne	r3, #1
 800815e:	2300      	moveq	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	e022      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b0c      	cmp	r3, #12
 8008168:	d109      	bne.n	800817e <HAL_TIM_PWM_Start+0x72>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b01      	cmp	r3, #1
 8008174:	bf14      	ite	ne
 8008176:	2301      	movne	r3, #1
 8008178:	2300      	moveq	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	e015      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b10      	cmp	r3, #16
 8008182:	d109      	bne.n	8008198 <HAL_TIM_PWM_Start+0x8c>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b01      	cmp	r3, #1
 800818e:	bf14      	ite	ne
 8008190:	2301      	movne	r3, #1
 8008192:	2300      	moveq	r3, #0
 8008194:	b2db      	uxtb	r3, r3
 8008196:	e008      	b.n	80081aa <HAL_TIM_PWM_Start+0x9e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	bf14      	ite	ne
 80081a4:	2301      	movne	r3, #1
 80081a6:	2300      	moveq	r3, #0
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e0a1      	b.n	80082f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_PWM_Start+0xb6>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c0:	e023      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d104      	bne.n	80081d2 <HAL_TIM_PWM_Start+0xc6>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081d0:	e01b      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d104      	bne.n	80081e2 <HAL_TIM_PWM_Start+0xd6>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081e0:	e013      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b0c      	cmp	r3, #12
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_PWM_Start+0xe6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081f0:	e00b      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d104      	bne.n	8008202 <HAL_TIM_PWM_Start+0xf6>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008200:	e003      	b.n	800820a <HAL_TIM_PWM_Start+0xfe>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2201      	movs	r2, #1
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 ffde 	bl	80091d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a38      	ldr	r2, [pc, #224]	@ (8008300 <HAL_TIM_PWM_Start+0x1f4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a37      	ldr	r2, [pc, #220]	@ (8008304 <HAL_TIM_PWM_Start+0x1f8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00e      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a35      	ldr	r2, [pc, #212]	@ (8008308 <HAL_TIM_PWM_Start+0x1fc>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d009      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a34      	ldr	r2, [pc, #208]	@ (800830c <HAL_TIM_PWM_Start+0x200>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d004      	beq.n	800824a <HAL_TIM_PWM_Start+0x13e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a32      	ldr	r2, [pc, #200]	@ (8008310 <HAL_TIM_PWM_Start+0x204>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d101      	bne.n	800824e <HAL_TIM_PWM_Start+0x142>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <HAL_TIM_PWM_Start+0x144>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d007      	beq.n	8008264 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008262:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a25      	ldr	r2, [pc, #148]	@ (8008300 <HAL_TIM_PWM_Start+0x1f4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d022      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008276:	d01d      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a25      	ldr	r2, [pc, #148]	@ (8008314 <HAL_TIM_PWM_Start+0x208>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a24      	ldr	r2, [pc, #144]	@ (8008318 <HAL_TIM_PWM_Start+0x20c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a22      	ldr	r2, [pc, #136]	@ (800831c <HAL_TIM_PWM_Start+0x210>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a1a      	ldr	r2, [pc, #104]	@ (8008304 <HAL_TIM_PWM_Start+0x1f8>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008320 <HAL_TIM_PWM_Start+0x214>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <HAL_TIM_PWM_Start+0x1a8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a16      	ldr	r2, [pc, #88]	@ (8008308 <HAL_TIM_PWM_Start+0x1fc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d115      	bne.n	80082e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008324 <HAL_TIM_PWM_Start+0x218>)
 80082bc:	4013      	ands	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b06      	cmp	r3, #6
 80082c4:	d015      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x1e6>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082cc:	d011      	beq.n	80082f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0201 	orr.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082de:	e008      	b.n	80082f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e000      	b.n	80082f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	40010000 	.word	0x40010000
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40001800 	.word	0x40001800
 8008324:	00010007 	.word	0x00010007

08008328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d020      	beq.n	800838c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01b      	beq.n	800838c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0202 	mvn.w	r2, #2
 800835c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 faf6 	bl	8008964 <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fae8 	bl	8008950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 faf9 	bl	8008978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d020      	beq.n	80083d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01b      	beq.n	80083d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0204 	mvn.w	r2, #4
 80083a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fad0 	bl	8008964 <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fac2 	bl	8008950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fad3 	bl	8008978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d020      	beq.n	8008424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01b      	beq.n	8008424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0208 	mvn.w	r2, #8
 80083f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2204      	movs	r2, #4
 80083fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 faaa 	bl	8008964 <HAL_TIM_IC_CaptureCallback>
 8008410:	e005      	b.n	800841e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa9c 	bl	8008950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 faad 	bl	8008978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 0310 	and.w	r3, r3, #16
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0310 	and.w	r3, r3, #16
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0210 	mvn.w	r2, #16
 8008440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2208      	movs	r2, #8
 8008446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa84 	bl	8008964 <HAL_TIM_IC_CaptureCallback>
 800845c:	e005      	b.n	800846a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa76 	bl	8008950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fa87 	bl	8008978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00c      	beq.n	8008494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0201 	mvn.w	r2, #1
 800848c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7f8 fe7c 	bl	800118c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800849a:	2b00      	cmp	r3, #0
 800849c:	d104      	bne.n	80084a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00c      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80084ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 f887 	bl	80095d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00c      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80084de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 f87f 	bl	80095e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00c      	beq.n	800850a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fa41 	bl	800898c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f003 0320 	and.w	r3, r3, #32
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00c      	beq.n	800852e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 0320 	and.w	r3, r3, #32
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f06f 0220 	mvn.w	r2, #32
 8008526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 f847 	bl	80095bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008552:	2302      	movs	r3, #2
 8008554:	e0ff      	b.n	8008756 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b14      	cmp	r3, #20
 8008562:	f200 80f0 	bhi.w	8008746 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008566:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	080085c1 	.word	0x080085c1
 8008570:	08008747 	.word	0x08008747
 8008574:	08008747 	.word	0x08008747
 8008578:	08008747 	.word	0x08008747
 800857c:	08008601 	.word	0x08008601
 8008580:	08008747 	.word	0x08008747
 8008584:	08008747 	.word	0x08008747
 8008588:	08008747 	.word	0x08008747
 800858c:	08008643 	.word	0x08008643
 8008590:	08008747 	.word	0x08008747
 8008594:	08008747 	.word	0x08008747
 8008598:	08008747 	.word	0x08008747
 800859c:	08008683 	.word	0x08008683
 80085a0:	08008747 	.word	0x08008747
 80085a4:	08008747 	.word	0x08008747
 80085a8:	08008747 	.word	0x08008747
 80085ac:	080086c5 	.word	0x080086c5
 80085b0:	08008747 	.word	0x08008747
 80085b4:	08008747 	.word	0x08008747
 80085b8:	08008747 	.word	0x08008747
 80085bc:	08008705 	.word	0x08008705
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fa90 	bl	8008aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699a      	ldr	r2, [r3, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0208 	orr.w	r2, r2, #8
 80085da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0204 	bic.w	r2, r2, #4
 80085ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6999      	ldr	r1, [r3, #24]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	619a      	str	r2, [r3, #24]
      break;
 80085fe:	e0a5      	b.n	800874c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fb00 	bl	8008c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800861a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800862a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6999      	ldr	r1, [r3, #24]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	021a      	lsls	r2, r3, #8
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	619a      	str	r2, [r3, #24]
      break;
 8008640:	e084      	b.n	800874c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fb69 	bl	8008d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f042 0208 	orr.w	r2, r2, #8
 800865c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0204 	bic.w	r2, r2, #4
 800866c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69d9      	ldr	r1, [r3, #28]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	691a      	ldr	r2, [r3, #16]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	61da      	str	r2, [r3, #28]
      break;
 8008680:	e064      	b.n	800874c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fbd1 	bl	8008e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800869c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69da      	ldr	r2, [r3, #28]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69d9      	ldr	r1, [r3, #28]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	021a      	lsls	r2, r3, #8
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	61da      	str	r2, [r3, #28]
      break;
 80086c2:	e043      	b.n	800874c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fc1a 	bl	8008f04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f042 0208 	orr.w	r2, r2, #8
 80086de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0204 	bic.w	r2, r2, #4
 80086ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	691a      	ldr	r2, [r3, #16]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008702:	e023      	b.n	800874c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fc5e 	bl	8008fcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800871e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800872e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	021a      	lsls	r2, r3, #8
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008744:	e002      	b.n	800874c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
      break;
 800874a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop

08008760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <HAL_TIM_ConfigClockSource+0x1c>
 8008778:	2302      	movs	r3, #2
 800877a:	e0dc      	b.n	8008936 <HAL_TIM_ConfigClockSource+0x1d6>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	4b6a      	ldr	r3, [pc, #424]	@ (8008940 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008798:	4013      	ands	r3, r2
 800879a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a64      	ldr	r2, [pc, #400]	@ (8008944 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	f000 80a9 	beq.w	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 80087b8:	4a62      	ldr	r2, [pc, #392]	@ (8008944 <HAL_TIM_ConfigClockSource+0x1e4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	f200 80ae 	bhi.w	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 80087c0:	4a61      	ldr	r2, [pc, #388]	@ (8008948 <HAL_TIM_ConfigClockSource+0x1e8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	f000 80a1 	beq.w	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 80087c8:	4a5f      	ldr	r2, [pc, #380]	@ (8008948 <HAL_TIM_ConfigClockSource+0x1e8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	f200 80a6 	bhi.w	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 80087d0:	4a5e      	ldr	r2, [pc, #376]	@ (800894c <HAL_TIM_ConfigClockSource+0x1ec>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	f000 8099 	beq.w	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 80087d8:	4a5c      	ldr	r2, [pc, #368]	@ (800894c <HAL_TIM_ConfigClockSource+0x1ec>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	f200 809e 	bhi.w	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 80087e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087e4:	f000 8091 	beq.w	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 80087e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087ec:	f200 8096 	bhi.w	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 80087f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087f4:	f000 8089 	beq.w	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 80087f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087fc:	f200 808e 	bhi.w	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 8008800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008804:	d03e      	beq.n	8008884 <HAL_TIM_ConfigClockSource+0x124>
 8008806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800880a:	f200 8087 	bhi.w	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 800880e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008812:	f000 8086 	beq.w	8008922 <HAL_TIM_ConfigClockSource+0x1c2>
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800881a:	d87f      	bhi.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 800881c:	2b70      	cmp	r3, #112	@ 0x70
 800881e:	d01a      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0xf6>
 8008820:	2b70      	cmp	r3, #112	@ 0x70
 8008822:	d87b      	bhi.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 8008824:	2b60      	cmp	r3, #96	@ 0x60
 8008826:	d050      	beq.n	80088ca <HAL_TIM_ConfigClockSource+0x16a>
 8008828:	2b60      	cmp	r3, #96	@ 0x60
 800882a:	d877      	bhi.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 800882c:	2b50      	cmp	r3, #80	@ 0x50
 800882e:	d03c      	beq.n	80088aa <HAL_TIM_ConfigClockSource+0x14a>
 8008830:	2b50      	cmp	r3, #80	@ 0x50
 8008832:	d873      	bhi.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 8008834:	2b40      	cmp	r3, #64	@ 0x40
 8008836:	d058      	beq.n	80088ea <HAL_TIM_ConfigClockSource+0x18a>
 8008838:	2b40      	cmp	r3, #64	@ 0x40
 800883a:	d86f      	bhi.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 800883c:	2b30      	cmp	r3, #48	@ 0x30
 800883e:	d064      	beq.n	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 8008840:	2b30      	cmp	r3, #48	@ 0x30
 8008842:	d86b      	bhi.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 8008844:	2b20      	cmp	r3, #32
 8008846:	d060      	beq.n	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 8008848:	2b20      	cmp	r3, #32
 800884a:	d867      	bhi.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
 800884c:	2b00      	cmp	r3, #0
 800884e:	d05c      	beq.n	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 8008850:	2b10      	cmp	r3, #16
 8008852:	d05a      	beq.n	800890a <HAL_TIM_ConfigClockSource+0x1aa>
 8008854:	e062      	b.n	800891c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008866:	f000 fc95 	bl	8009194 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008878:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	609a      	str	r2, [r3, #8]
      break;
 8008882:	e04f      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008894:	f000 fc7e 	bl	8009194 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088a6:	609a      	str	r2, [r3, #8]
      break;
 80088a8:	e03c      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b6:	461a      	mov	r2, r3
 80088b8:	f000 fbee 	bl	8009098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2150      	movs	r1, #80	@ 0x50
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fc48 	bl	8009158 <TIM_ITRx_SetConfig>
      break;
 80088c8:	e02c      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088d6:	461a      	mov	r2, r3
 80088d8:	f000 fc0d 	bl	80090f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2160      	movs	r1, #96	@ 0x60
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fc38 	bl	8009158 <TIM_ITRx_SetConfig>
      break;
 80088e8:	e01c      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f6:	461a      	mov	r2, r3
 80088f8:	f000 fbce 	bl	8009098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2140      	movs	r1, #64	@ 0x40
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fc28 	bl	8009158 <TIM_ITRx_SetConfig>
      break;
 8008908:	e00c      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4619      	mov	r1, r3
 8008914:	4610      	mov	r0, r2
 8008916:	f000 fc1f 	bl	8009158 <TIM_ITRx_SetConfig>
      break;
 800891a:	e003      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	73fb      	strb	r3, [r7, #15]
      break;
 8008920:	e000      	b.n	8008924 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008922:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	ffceff88 	.word	0xffceff88
 8008944:	00100040 	.word	0x00100040
 8008948:	00100030 	.word	0x00100030
 800894c:	00100020 	.word	0x00100020

08008950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a46      	ldr	r2, [pc, #280]	@ (8008acc <TIM_Base_SetConfig+0x12c>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d013      	beq.n	80089e0 <TIM_Base_SetConfig+0x40>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089be:	d00f      	beq.n	80089e0 <TIM_Base_SetConfig+0x40>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a43      	ldr	r2, [pc, #268]	@ (8008ad0 <TIM_Base_SetConfig+0x130>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00b      	beq.n	80089e0 <TIM_Base_SetConfig+0x40>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a42      	ldr	r2, [pc, #264]	@ (8008ad4 <TIM_Base_SetConfig+0x134>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d007      	beq.n	80089e0 <TIM_Base_SetConfig+0x40>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a41      	ldr	r2, [pc, #260]	@ (8008ad8 <TIM_Base_SetConfig+0x138>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d003      	beq.n	80089e0 <TIM_Base_SetConfig+0x40>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a40      	ldr	r2, [pc, #256]	@ (8008adc <TIM_Base_SetConfig+0x13c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d108      	bne.n	80089f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a35      	ldr	r2, [pc, #212]	@ (8008acc <TIM_Base_SetConfig+0x12c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d01f      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a00:	d01b      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a32      	ldr	r2, [pc, #200]	@ (8008ad0 <TIM_Base_SetConfig+0x130>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d017      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a31      	ldr	r2, [pc, #196]	@ (8008ad4 <TIM_Base_SetConfig+0x134>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d013      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a30      	ldr	r2, [pc, #192]	@ (8008ad8 <TIM_Base_SetConfig+0x138>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00f      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8008adc <TIM_Base_SetConfig+0x13c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00b      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a2e      	ldr	r2, [pc, #184]	@ (8008ae0 <TIM_Base_SetConfig+0x140>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d007      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8008ae4 <TIM_Base_SetConfig+0x144>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d003      	beq.n	8008a3a <TIM_Base_SetConfig+0x9a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a2c      	ldr	r2, [pc, #176]	@ (8008ae8 <TIM_Base_SetConfig+0x148>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d108      	bne.n	8008a4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a16      	ldr	r2, [pc, #88]	@ (8008acc <TIM_Base_SetConfig+0x12c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00f      	beq.n	8008a98 <TIM_Base_SetConfig+0xf8>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a18      	ldr	r2, [pc, #96]	@ (8008adc <TIM_Base_SetConfig+0x13c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00b      	beq.n	8008a98 <TIM_Base_SetConfig+0xf8>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a17      	ldr	r2, [pc, #92]	@ (8008ae0 <TIM_Base_SetConfig+0x140>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d007      	beq.n	8008a98 <TIM_Base_SetConfig+0xf8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	@ (8008ae4 <TIM_Base_SetConfig+0x144>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_Base_SetConfig+0xf8>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a15      	ldr	r2, [pc, #84]	@ (8008ae8 <TIM_Base_SetConfig+0x148>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d103      	bne.n	8008aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	691a      	ldr	r2, [r3, #16]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d105      	bne.n	8008abe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f023 0201 	bic.w	r2, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	611a      	str	r2, [r3, #16]
  }
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40000400 	.word	0x40000400
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	40000c00 	.word	0x40000c00
 8008adc:	40010400 	.word	0x40010400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40014400 	.word	0x40014400
 8008ae8:	40014800 	.word	0x40014800

08008aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	f023 0201 	bic.w	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4b37      	ldr	r3, [pc, #220]	@ (8008bf4 <TIM_OC1_SetConfig+0x108>)
 8008b18:	4013      	ands	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f023 0302 	bic.w	r3, r3, #2
 8008b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a2d      	ldr	r2, [pc, #180]	@ (8008bf8 <TIM_OC1_SetConfig+0x10c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00f      	beq.n	8008b68 <TIM_OC1_SetConfig+0x7c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bfc <TIM_OC1_SetConfig+0x110>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <TIM_OC1_SetConfig+0x7c>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a2b      	ldr	r2, [pc, #172]	@ (8008c00 <TIM_OC1_SetConfig+0x114>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_OC1_SetConfig+0x7c>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8008c04 <TIM_OC1_SetConfig+0x118>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_OC1_SetConfig+0x7c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a29      	ldr	r2, [pc, #164]	@ (8008c08 <TIM_OC1_SetConfig+0x11c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d10c      	bne.n	8008b82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f023 0308 	bic.w	r3, r3, #8
 8008b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f023 0304 	bic.w	r3, r3, #4
 8008b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf8 <TIM_OC1_SetConfig+0x10c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00f      	beq.n	8008baa <TIM_OC1_SetConfig+0xbe>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bfc <TIM_OC1_SetConfig+0x110>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00b      	beq.n	8008baa <TIM_OC1_SetConfig+0xbe>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1a      	ldr	r2, [pc, #104]	@ (8008c00 <TIM_OC1_SetConfig+0x114>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <TIM_OC1_SetConfig+0xbe>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a19      	ldr	r2, [pc, #100]	@ (8008c04 <TIM_OC1_SetConfig+0x118>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_OC1_SetConfig+0xbe>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a18      	ldr	r2, [pc, #96]	@ (8008c08 <TIM_OC1_SetConfig+0x11c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d111      	bne.n	8008bce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	621a      	str	r2, [r3, #32]
}
 8008be8:	bf00      	nop
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	fffeff8f 	.word	0xfffeff8f
 8008bf8:	40010000 	.word	0x40010000
 8008bfc:	40010400 	.word	0x40010400
 8008c00:	40014000 	.word	0x40014000
 8008c04:	40014400 	.word	0x40014400
 8008c08:	40014800 	.word	0x40014800

08008c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f023 0210 	bic.w	r2, r3, #16
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	4b34      	ldr	r3, [pc, #208]	@ (8008d08 <TIM_OC2_SetConfig+0xfc>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f023 0320 	bic.w	r3, r3, #32
 8008c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	011b      	lsls	r3, r3, #4
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a29      	ldr	r2, [pc, #164]	@ (8008d0c <TIM_OC2_SetConfig+0x100>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d003      	beq.n	8008c74 <TIM_OC2_SetConfig+0x68>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a28      	ldr	r2, [pc, #160]	@ (8008d10 <TIM_OC2_SetConfig+0x104>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d10d      	bne.n	8008c90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a1e      	ldr	r2, [pc, #120]	@ (8008d0c <TIM_OC2_SetConfig+0x100>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00f      	beq.n	8008cb8 <TIM_OC2_SetConfig+0xac>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d10 <TIM_OC2_SetConfig+0x104>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d00b      	beq.n	8008cb8 <TIM_OC2_SetConfig+0xac>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d14 <TIM_OC2_SetConfig+0x108>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d007      	beq.n	8008cb8 <TIM_OC2_SetConfig+0xac>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1b      	ldr	r2, [pc, #108]	@ (8008d18 <TIM_OC2_SetConfig+0x10c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d003      	beq.n	8008cb8 <TIM_OC2_SetConfig+0xac>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8008d1c <TIM_OC2_SetConfig+0x110>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d113      	bne.n	8008ce0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	621a      	str	r2, [r3, #32]
}
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	feff8fff 	.word	0xfeff8fff
 8008d0c:	40010000 	.word	0x40010000
 8008d10:	40010400 	.word	0x40010400
 8008d14:	40014000 	.word	0x40014000
 8008d18:	40014400 	.word	0x40014400
 8008d1c:	40014800 	.word	0x40014800

08008d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4b33      	ldr	r3, [pc, #204]	@ (8008e18 <TIM_OC3_SetConfig+0xf8>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a28      	ldr	r2, [pc, #160]	@ (8008e1c <TIM_OC3_SetConfig+0xfc>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_OC3_SetConfig+0x66>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a27      	ldr	r2, [pc, #156]	@ (8008e20 <TIM_OC3_SetConfig+0x100>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d10d      	bne.n	8008da2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e1c <TIM_OC3_SetConfig+0xfc>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00f      	beq.n	8008dca <TIM_OC3_SetConfig+0xaa>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a1c      	ldr	r2, [pc, #112]	@ (8008e20 <TIM_OC3_SetConfig+0x100>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00b      	beq.n	8008dca <TIM_OC3_SetConfig+0xaa>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e24 <TIM_OC3_SetConfig+0x104>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d007      	beq.n	8008dca <TIM_OC3_SetConfig+0xaa>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8008e28 <TIM_OC3_SetConfig+0x108>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d003      	beq.n	8008dca <TIM_OC3_SetConfig+0xaa>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a19      	ldr	r2, [pc, #100]	@ (8008e2c <TIM_OC3_SetConfig+0x10c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d113      	bne.n	8008df2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	621a      	str	r2, [r3, #32]
}
 8008e0c:	bf00      	nop
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	fffeff8f 	.word	0xfffeff8f
 8008e1c:	40010000 	.word	0x40010000
 8008e20:	40010400 	.word	0x40010400
 8008e24:	40014000 	.word	0x40014000
 8008e28:	40014400 	.word	0x40014400
 8008e2c:	40014800 	.word	0x40014800

08008e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <TIM_OC4_SetConfig+0xbc>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	031b      	lsls	r3, r3, #12
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a19      	ldr	r2, [pc, #100]	@ (8008ef0 <TIM_OC4_SetConfig+0xc0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00f      	beq.n	8008eb0 <TIM_OC4_SetConfig+0x80>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a18      	ldr	r2, [pc, #96]	@ (8008ef4 <TIM_OC4_SetConfig+0xc4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00b      	beq.n	8008eb0 <TIM_OC4_SetConfig+0x80>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a17      	ldr	r2, [pc, #92]	@ (8008ef8 <TIM_OC4_SetConfig+0xc8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d007      	beq.n	8008eb0 <TIM_OC4_SetConfig+0x80>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a16      	ldr	r2, [pc, #88]	@ (8008efc <TIM_OC4_SetConfig+0xcc>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d003      	beq.n	8008eb0 <TIM_OC4_SetConfig+0x80>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a15      	ldr	r2, [pc, #84]	@ (8008f00 <TIM_OC4_SetConfig+0xd0>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d109      	bne.n	8008ec4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	019b      	lsls	r3, r3, #6
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	feff8fff 	.word	0xfeff8fff
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40014400 	.word	0x40014400
 8008f00:	40014800 	.word	0x40014800

08008f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4b21      	ldr	r3, [pc, #132]	@ (8008fb4 <TIM_OC5_SetConfig+0xb0>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008f44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a18      	ldr	r2, [pc, #96]	@ (8008fb8 <TIM_OC5_SetConfig+0xb4>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00f      	beq.n	8008f7a <TIM_OC5_SetConfig+0x76>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a17      	ldr	r2, [pc, #92]	@ (8008fbc <TIM_OC5_SetConfig+0xb8>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00b      	beq.n	8008f7a <TIM_OC5_SetConfig+0x76>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a16      	ldr	r2, [pc, #88]	@ (8008fc0 <TIM_OC5_SetConfig+0xbc>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d007      	beq.n	8008f7a <TIM_OC5_SetConfig+0x76>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a15      	ldr	r2, [pc, #84]	@ (8008fc4 <TIM_OC5_SetConfig+0xc0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC5_SetConfig+0x76>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a14      	ldr	r2, [pc, #80]	@ (8008fc8 <TIM_OC5_SetConfig+0xc4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d109      	bne.n	8008f8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	621a      	str	r2, [r3, #32]
}
 8008fa8:	bf00      	nop
 8008faa:	371c      	adds	r7, #28
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	fffeff8f 	.word	0xfffeff8f
 8008fb8:	40010000 	.word	0x40010000
 8008fbc:	40010400 	.word	0x40010400
 8008fc0:	40014000 	.word	0x40014000
 8008fc4:	40014400 	.word	0x40014400
 8008fc8:	40014800 	.word	0x40014800

08008fcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
 8008fe0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	4b22      	ldr	r3, [pc, #136]	@ (8009080 <TIM_OC6_SetConfig+0xb4>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4313      	orrs	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800900e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	051b      	lsls	r3, r3, #20
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	4313      	orrs	r3, r2
 800901a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a19      	ldr	r2, [pc, #100]	@ (8009084 <TIM_OC6_SetConfig+0xb8>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00f      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a18      	ldr	r2, [pc, #96]	@ (8009088 <TIM_OC6_SetConfig+0xbc>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d00b      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a17      	ldr	r2, [pc, #92]	@ (800908c <TIM_OC6_SetConfig+0xc0>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d007      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a16      	ldr	r2, [pc, #88]	@ (8009090 <TIM_OC6_SetConfig+0xc4>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d003      	beq.n	8009044 <TIM_OC6_SetConfig+0x78>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a15      	ldr	r2, [pc, #84]	@ (8009094 <TIM_OC6_SetConfig+0xc8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d109      	bne.n	8009058 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800904a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	029b      	lsls	r3, r3, #10
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	4313      	orrs	r3, r2
 8009056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	621a      	str	r2, [r3, #32]
}
 8009072:	bf00      	nop
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	feff8fff 	.word	0xfeff8fff
 8009084:	40010000 	.word	0x40010000
 8009088:	40010400 	.word	0x40010400
 800908c:	40014000 	.word	0x40014000
 8009090:	40014400 	.word	0x40014400
 8009094:	40014800 	.word	0x40014800

08009098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009098:	b480      	push	{r7}
 800909a:	b087      	sub	sp, #28
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f023 0201 	bic.w	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f023 030a 	bic.w	r3, r3, #10
 80090d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	621a      	str	r2, [r3, #32]
}
 80090ea:	bf00      	nop
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b087      	sub	sp, #28
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	f023 0210 	bic.w	r2, r3, #16
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	031b      	lsls	r3, r3, #12
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4313      	orrs	r3, r2
 800912a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009132:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	621a      	str	r2, [r3, #32]
}
 800914a:	bf00      	nop
 800914c:	371c      	adds	r7, #28
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
	...

08009158 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4b09      	ldr	r3, [pc, #36]	@ (8009190 <TIM_ITRx_SetConfig+0x38>)
 800916c:	4013      	ands	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4313      	orrs	r3, r2
 8009176:	f043 0307 	orr.w	r3, r3, #7
 800917a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	609a      	str	r2, [r3, #8]
}
 8009182:	bf00      	nop
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	ffcfff8f 	.word	0xffcfff8f

08009194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	021a      	lsls	r2, r3, #8
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	4313      	orrs	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	609a      	str	r2, [r3, #8]
}
 80091c8:	bf00      	nop
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	2201      	movs	r2, #1
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1a      	ldr	r2, [r3, #32]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	43db      	mvns	r3, r3
 80091f6:	401a      	ands	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a1a      	ldr	r2, [r3, #32]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f003 031f 	and.w	r3, r3, #31
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	fa01 f303 	lsl.w	r3, r1, r3
 800920c:	431a      	orrs	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
	...

08009220 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d109      	bne.n	8009244 <HAL_TIMEx_PWMN_Start+0x24>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b01      	cmp	r3, #1
 800923a:	bf14      	ite	ne
 800923c:	2301      	movne	r3, #1
 800923e:	2300      	moveq	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	e022      	b.n	800928a <HAL_TIMEx_PWMN_Start+0x6a>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b04      	cmp	r3, #4
 8009248:	d109      	bne.n	800925e <HAL_TIMEx_PWMN_Start+0x3e>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b01      	cmp	r3, #1
 8009254:	bf14      	ite	ne
 8009256:	2301      	movne	r3, #1
 8009258:	2300      	moveq	r3, #0
 800925a:	b2db      	uxtb	r3, r3
 800925c:	e015      	b.n	800928a <HAL_TIMEx_PWMN_Start+0x6a>
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b08      	cmp	r3, #8
 8009262:	d109      	bne.n	8009278 <HAL_TIMEx_PWMN_Start+0x58>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b01      	cmp	r3, #1
 800926e:	bf14      	ite	ne
 8009270:	2301      	movne	r3, #1
 8009272:	2300      	moveq	r3, #0
 8009274:	b2db      	uxtb	r3, r3
 8009276:	e008      	b.n	800928a <HAL_TIMEx_PWMN_Start+0x6a>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b01      	cmp	r3, #1
 8009282:	bf14      	ite	ne
 8009284:	2301      	movne	r3, #1
 8009286:	2300      	moveq	r3, #0
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e073      	b.n	800937a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d104      	bne.n	80092a2 <HAL_TIMEx_PWMN_Start+0x82>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092a0:	e013      	b.n	80092ca <HAL_TIMEx_PWMN_Start+0xaa>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d104      	bne.n	80092b2 <HAL_TIMEx_PWMN_Start+0x92>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092b0:	e00b      	b.n	80092ca <HAL_TIMEx_PWMN_Start+0xaa>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d104      	bne.n	80092c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092c0:	e003      	b.n	80092ca <HAL_TIMEx_PWMN_Start+0xaa>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2202      	movs	r2, #2
 80092c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2204      	movs	r2, #4
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f990 	bl	80095f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a25      	ldr	r2, [pc, #148]	@ (8009384 <HAL_TIMEx_PWMN_Start+0x164>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d022      	beq.n	8009338 <HAL_TIMEx_PWMN_Start+0x118>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092fa:	d01d      	beq.n	8009338 <HAL_TIMEx_PWMN_Start+0x118>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a21      	ldr	r2, [pc, #132]	@ (8009388 <HAL_TIMEx_PWMN_Start+0x168>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d018      	beq.n	8009338 <HAL_TIMEx_PWMN_Start+0x118>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a20      	ldr	r2, [pc, #128]	@ (800938c <HAL_TIMEx_PWMN_Start+0x16c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d013      	beq.n	8009338 <HAL_TIMEx_PWMN_Start+0x118>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a1e      	ldr	r2, [pc, #120]	@ (8009390 <HAL_TIMEx_PWMN_Start+0x170>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00e      	beq.n	8009338 <HAL_TIMEx_PWMN_Start+0x118>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1d      	ldr	r2, [pc, #116]	@ (8009394 <HAL_TIMEx_PWMN_Start+0x174>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d009      	beq.n	8009338 <HAL_TIMEx_PWMN_Start+0x118>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1b      	ldr	r2, [pc, #108]	@ (8009398 <HAL_TIMEx_PWMN_Start+0x178>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d004      	beq.n	8009338 <HAL_TIMEx_PWMN_Start+0x118>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a1a      	ldr	r2, [pc, #104]	@ (800939c <HAL_TIMEx_PWMN_Start+0x17c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d115      	bne.n	8009364 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	4b18      	ldr	r3, [pc, #96]	@ (80093a0 <HAL_TIMEx_PWMN_Start+0x180>)
 8009340:	4013      	ands	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b06      	cmp	r3, #6
 8009348:	d015      	beq.n	8009376 <HAL_TIMEx_PWMN_Start+0x156>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009350:	d011      	beq.n	8009376 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0201 	orr.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009362:	e008      	b.n	8009376 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	e000      	b.n	8009378 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009376:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	40010000 	.word	0x40010000
 8009388:	40000400 	.word	0x40000400
 800938c:	40000800 	.word	0x40000800
 8009390:	40000c00 	.word	0x40000c00
 8009394:	40010400 	.word	0x40010400
 8009398:	40001800 	.word	0x40001800
 800939c:	40014000 	.word	0x40014000
 80093a0:	00010007 	.word	0x00010007

080093a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e06d      	b.n	8009498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a30      	ldr	r2, [pc, #192]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d004      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a2f      	ldr	r2, [pc, #188]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d108      	bne.n	8009402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a20      	ldr	r2, [pc, #128]	@ (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d022      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800942e:	d01d      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a1d      	ldr	r2, [pc, #116]	@ (80094ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d018      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1c      	ldr	r2, [pc, #112]	@ (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d013      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1a      	ldr	r2, [pc, #104]	@ (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d00e      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a15      	ldr	r2, [pc, #84]	@ (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d009      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a16      	ldr	r2, [pc, #88]	@ (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d004      	beq.n	800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a15      	ldr	r2, [pc, #84]	@ (80094bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d10c      	bne.n	8009486 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	4313      	orrs	r3, r2
 800947c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40010000 	.word	0x40010000
 80094a8:	40010400 	.word	0x40010400
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40000c00 	.word	0x40000c00
 80094b8:	40001800 	.word	0x40001800
 80094bc:	40014000 	.word	0x40014000

080094c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d101      	bne.n	80094dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094d8:	2302      	movs	r3, #2
 80094da:	e065      	b.n	80095a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4313      	orrs	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	695b      	ldr	r3, [r3, #20]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	041b      	lsls	r3, r3, #16
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a16      	ldr	r2, [pc, #88]	@ (80095b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d004      	beq.n	800956a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a14      	ldr	r2, [pc, #80]	@ (80095b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d115      	bne.n	8009596 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009574:	051b      	lsls	r3, r3, #20
 8009576:	4313      	orrs	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	4313      	orrs	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40010400 	.word	0x40010400

080095bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	2204      	movs	r2, #4
 800960c:	fa02 f303 	lsl.w	r3, r2, r3
 8009610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1a      	ldr	r2, [r3, #32]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	43db      	mvns	r3, r3
 800961a:	401a      	ands	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	fa01 f303 	lsl.w	r3, r1, r3
 8009630:	431a      	orrs	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	621a      	str	r2, [r3, #32]
}
 8009636:	bf00      	nop
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
	...

08009644 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009644:	b084      	sub	sp, #16
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	f107 001c 	add.w	r0, r7, #28
 8009652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009656:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800965a:	2b01      	cmp	r3, #1
 800965c:	d121      	bne.n	80096a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009662:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	4b2c      	ldr	r3, [pc, #176]	@ (8009720 <USB_CoreInit+0xdc>)
 8009670:	4013      	ands	r3, r2
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009682:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009686:	2b01      	cmp	r3, #1
 8009688:	d105      	bne.n	8009696 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 faf6 	bl	800ac88 <USB_CoreReset>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
 80096a0:	e01b      	b.n	80096da <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 faea 	bl	800ac88 <USB_CoreReset>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80096b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d106      	bne.n	80096ce <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80096cc:	e005      	b.n	80096da <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80096da:	7fbb      	ldrb	r3, [r7, #30]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d116      	bne.n	800970e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009724 <USB_CoreInit+0xe0>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f043 0206 	orr.w	r2, r3, #6
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f043 0220 	orr.w	r2, r3, #32
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800970e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800971a:	b004      	add	sp, #16
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	ffbdffbf 	.word	0xffbdffbf
 8009724:	03ee0000 	.word	0x03ee0000

08009728 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	4613      	mov	r3, r2
 8009734:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d165      	bne.n	8009808 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4a41      	ldr	r2, [pc, #260]	@ (8009844 <USB_SetTurnaroundTime+0x11c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d906      	bls.n	8009752 <USB_SetTurnaroundTime+0x2a>
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4a40      	ldr	r2, [pc, #256]	@ (8009848 <USB_SetTurnaroundTime+0x120>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d202      	bcs.n	8009752 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800974c:	230f      	movs	r3, #15
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e062      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4a3c      	ldr	r2, [pc, #240]	@ (8009848 <USB_SetTurnaroundTime+0x120>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d306      	bcc.n	8009768 <USB_SetTurnaroundTime+0x40>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	4a3b      	ldr	r2, [pc, #236]	@ (800984c <USB_SetTurnaroundTime+0x124>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d202      	bcs.n	8009768 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009762:	230e      	movs	r3, #14
 8009764:	617b      	str	r3, [r7, #20]
 8009766:	e057      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	4a38      	ldr	r2, [pc, #224]	@ (800984c <USB_SetTurnaroundTime+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d306      	bcc.n	800977e <USB_SetTurnaroundTime+0x56>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4a37      	ldr	r2, [pc, #220]	@ (8009850 <USB_SetTurnaroundTime+0x128>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d202      	bcs.n	800977e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009778:	230d      	movs	r3, #13
 800977a:	617b      	str	r3, [r7, #20]
 800977c:	e04c      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4a33      	ldr	r2, [pc, #204]	@ (8009850 <USB_SetTurnaroundTime+0x128>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d306      	bcc.n	8009794 <USB_SetTurnaroundTime+0x6c>
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4a32      	ldr	r2, [pc, #200]	@ (8009854 <USB_SetTurnaroundTime+0x12c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d802      	bhi.n	8009794 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800978e:	230c      	movs	r3, #12
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	e041      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4a2f      	ldr	r2, [pc, #188]	@ (8009854 <USB_SetTurnaroundTime+0x12c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d906      	bls.n	80097aa <USB_SetTurnaroundTime+0x82>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4a2e      	ldr	r2, [pc, #184]	@ (8009858 <USB_SetTurnaroundTime+0x130>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d802      	bhi.n	80097aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097a4:	230b      	movs	r3, #11
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	e036      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4a2a      	ldr	r2, [pc, #168]	@ (8009858 <USB_SetTurnaroundTime+0x130>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d906      	bls.n	80097c0 <USB_SetTurnaroundTime+0x98>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4a29      	ldr	r2, [pc, #164]	@ (800985c <USB_SetTurnaroundTime+0x134>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d802      	bhi.n	80097c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097ba:	230a      	movs	r3, #10
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	e02b      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4a26      	ldr	r2, [pc, #152]	@ (800985c <USB_SetTurnaroundTime+0x134>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d906      	bls.n	80097d6 <USB_SetTurnaroundTime+0xae>
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4a25      	ldr	r2, [pc, #148]	@ (8009860 <USB_SetTurnaroundTime+0x138>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d202      	bcs.n	80097d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097d0:	2309      	movs	r3, #9
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	e020      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	4a21      	ldr	r2, [pc, #132]	@ (8009860 <USB_SetTurnaroundTime+0x138>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d306      	bcc.n	80097ec <USB_SetTurnaroundTime+0xc4>
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	4a20      	ldr	r2, [pc, #128]	@ (8009864 <USB_SetTurnaroundTime+0x13c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d802      	bhi.n	80097ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097e6:	2308      	movs	r3, #8
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	e015      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4a1d      	ldr	r2, [pc, #116]	@ (8009864 <USB_SetTurnaroundTime+0x13c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d906      	bls.n	8009802 <USB_SetTurnaroundTime+0xda>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009868 <USB_SetTurnaroundTime+0x140>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d202      	bcs.n	8009802 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097fc:	2307      	movs	r3, #7
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	e00a      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009802:	2306      	movs	r3, #6
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	e007      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800980e:	2309      	movs	r3, #9
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	e001      	b.n	8009818 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009814:	2309      	movs	r3, #9
 8009816:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68da      	ldr	r2, [r3, #12]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	029b      	lsls	r3, r3, #10
 800982c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009830:	431a      	orrs	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	00d8acbf 	.word	0x00d8acbf
 8009848:	00e4e1c0 	.word	0x00e4e1c0
 800984c:	00f42400 	.word	0x00f42400
 8009850:	01067380 	.word	0x01067380
 8009854:	011a499f 	.word	0x011a499f
 8009858:	01312cff 	.word	0x01312cff
 800985c:	014ca43f 	.word	0x014ca43f
 8009860:	016e3600 	.word	0x016e3600
 8009864:	01a6ab1f 	.word	0x01a6ab1f
 8009868:	01e84800 	.word	0x01e84800

0800986c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f043 0201 	orr.w	r2, r3, #1
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f023 0201 	bic.w	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d115      	bne.n	80098fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80098de:	200a      	movs	r0, #10
 80098e0:	f7f8 fa14 	bl	8001d0c <HAL_Delay>
      ms += 10U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	330a      	adds	r3, #10
 80098e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f001 f93b 	bl	800ab66 <USB_GetMode>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d01e      	beq.n	8009934 <USB_SetCurrentMode+0x84>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80098fa:	d9f0      	bls.n	80098de <USB_SetCurrentMode+0x2e>
 80098fc:	e01a      	b.n	8009934 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d115      	bne.n	8009930 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009910:	200a      	movs	r0, #10
 8009912:	f7f8 f9fb 	bl	8001d0c <HAL_Delay>
      ms += 10U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	330a      	adds	r3, #10
 800991a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 f922 	bl	800ab66 <USB_GetMode>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <USB_SetCurrentMode+0x84>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2bc7      	cmp	r3, #199	@ 0xc7
 800992c:	d9f0      	bls.n	8009910 <USB_SetCurrentMode+0x60>
 800992e:	e001      	b.n	8009934 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e005      	b.n	8009940 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2bc8      	cmp	r3, #200	@ 0xc8
 8009938:	d101      	bne.n	800993e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009948:	b084      	sub	sp, #16
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	e009      	b.n	800997c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3340      	adds	r3, #64	@ 0x40
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	2200      	movs	r2, #0
 8009974:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b0e      	cmp	r3, #14
 8009980:	d9f2      	bls.n	8009968 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009982:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009986:	2b00      	cmp	r3, #0
 8009988:	d11c      	bne.n	80099c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009998:	f043 0302 	orr.w	r3, r3, #2
 800999c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	e005      	b.n	80099d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099d6:	461a      	mov	r2, r3
 80099d8:	2300      	movs	r3, #0
 80099da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d10d      	bne.n	8009a00 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80099ec:	2100      	movs	r1, #0
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f968 	bl	8009cc4 <USB_SetDevSpeed>
 80099f4:	e008      	b.n	8009a08 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80099f6:	2101      	movs	r1, #1
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f963 	bl	8009cc4 <USB_SetDevSpeed>
 80099fe:	e003      	b.n	8009a08 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a00:	2103      	movs	r1, #3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f95e 	bl	8009cc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a08:	2110      	movs	r1, #16
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f8fa 	bl	8009c04 <USB_FlushTxFifo>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f924 	bl	8009c68 <USB_FlushRxFifo>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a30:	461a      	mov	r2, r3
 8009a32:	2300      	movs	r3, #0
 8009a34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	2300      	movs	r3, #0
 8009a40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a48:	461a      	mov	r2, r3
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a4e:	2300      	movs	r3, #0
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	e043      	b.n	8009adc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a6a:	d118      	bne.n	8009a9e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	e013      	b.n	8009ab0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a94:	461a      	mov	r2, r3
 8009a96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	e008      	b.n	8009ab0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aaa:	461a      	mov	r2, r3
 8009aac:	2300      	movs	r3, #0
 8009aae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009abc:	461a      	mov	r2, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ad4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d3b5      	bcc.n	8009a54 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	e043      	b.n	8009b76 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b04:	d118      	bne.n	8009b38 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	e013      	b.n	8009b4a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	e008      	b.n	8009b4a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b44:	461a      	mov	r2, r3
 8009b46:	2300      	movs	r3, #0
 8009b48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b56:	461a      	mov	r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3301      	adds	r3, #1
 8009b74:	613b      	str	r3, [r7, #16]
 8009b76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d3b5      	bcc.n	8009aee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ba2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d105      	bne.n	8009bb8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	f043 0210 	orr.w	r2, r3, #16
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699a      	ldr	r2, [r3, #24]
 8009bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8009bfc <USB_DevInit+0x2b4>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d005      	beq.n	8009bd8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	f043 0208 	orr.w	r2, r3, #8
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d105      	bne.n	8009bec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	699a      	ldr	r2, [r3, #24]
 8009be4:	4b06      	ldr	r3, [pc, #24]	@ (8009c00 <USB_DevInit+0x2b8>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bf8:	b004      	add	sp, #16
 8009bfa:	4770      	bx	lr
 8009bfc:	803c3800 	.word	0x803c3800
 8009c00:	40000004 	.word	0x40000004

08009c04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c1e:	d901      	bls.n	8009c24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e01b      	b.n	8009c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	daf2      	bge.n	8009c12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	019b      	lsls	r3, r3, #6
 8009c34:	f043 0220 	orr.w	r2, r3, #32
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c48:	d901      	bls.n	8009c4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e006      	b.n	8009c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d0f0      	beq.n	8009c3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3301      	adds	r3, #1
 8009c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c80:	d901      	bls.n	8009c86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e018      	b.n	8009cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	daf2      	bge.n	8009c74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2210      	movs	r2, #16
 8009c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ca4:	d901      	bls.n	8009caa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e006      	b.n	8009cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f003 0310 	and.w	r3, r3, #16
 8009cb2:	2b10      	cmp	r3, #16
 8009cb4:	d0f0      	beq.n	8009c98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	78fb      	ldrb	r3, [r7, #3]
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b087      	sub	sp, #28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0306 	and.w	r3, r3, #6
 8009d0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]
 8009d1a:	e00a      	b.n	8009d32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d002      	beq.n	8009d28 <USB_GetDevSpeed+0x32>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b06      	cmp	r3, #6
 8009d26:	d102      	bne.n	8009d2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	75fb      	strb	r3, [r7, #23]
 8009d2c:	e001      	b.n	8009d32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009d2e:	230f      	movs	r3, #15
 8009d30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	371c      	adds	r7, #28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d139      	bne.n	8009dd0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d62:	69da      	ldr	r2, [r3, #28]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	68f9      	ldr	r1, [r7, #12]
 8009d76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d153      	bne.n	8009e3c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009db0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	059b      	lsls	r3, r3, #22
 8009db6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009db8:	431a      	orrs	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	0159      	lsls	r1, r3, #5
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	440b      	add	r3, r1
 8009dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4b20      	ldr	r3, [pc, #128]	@ (8009e4c <USB_ActivateEndpoint+0x10c>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	600b      	str	r3, [r1, #0]
 8009dce:	e035      	b.n	8009e3c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd6:	69da      	ldr	r2, [r3, #28]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	2101      	movs	r1, #1
 8009de2:	fa01 f303 	lsl.w	r3, r1, r3
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	68f9      	ldr	r1, [r7, #12]
 8009dea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dee:	4313      	orrs	r3, r2
 8009df0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d119      	bne.n	8009e3c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	791b      	ldrb	r3, [r3, #4]
 8009e22:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e24:	430b      	orrs	r3, r1
 8009e26:	431a      	orrs	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	0159      	lsls	r1, r3, #5
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	440b      	add	r3, r1
 8009e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e34:	4619      	mov	r1, r3
 8009e36:	4b05      	ldr	r3, [pc, #20]	@ (8009e4c <USB_ActivateEndpoint+0x10c>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	10008000 	.word	0x10008000

08009e50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	785b      	ldrb	r3, [r3, #1]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d161      	bne.n	8009f30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e82:	d11f      	bne.n	8009ec4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	0151      	lsls	r1, r2, #5
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	440a      	add	r2, r1
 8009e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ea2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	0151      	lsls	r1, r2, #5
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	440a      	add	r2, r1
 8009eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 030f 	and.w	r3, r3, #15
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	43db      	mvns	r3, r3
 8009ede:	68f9      	ldr	r1, [r7, #12]
 8009ee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 030f 	and.w	r3, r3, #15
 8009ef8:	2101      	movs	r1, #1
 8009efa:	fa01 f303 	lsl.w	r3, r1, r3
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	43db      	mvns	r3, r3
 8009f02:	68f9      	ldr	r1, [r7, #12]
 8009f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f08:	4013      	ands	r3, r2
 8009f0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	0159      	lsls	r1, r3, #5
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	440b      	add	r3, r1
 8009f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f26:	4619      	mov	r1, r3
 8009f28:	4b35      	ldr	r3, [pc, #212]	@ (800a000 <USB_DeactivateEndpoint+0x1b0>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	600b      	str	r3, [r1, #0]
 8009f2e:	e060      	b.n	8009ff2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f46:	d11f      	bne.n	8009f88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	0151      	lsls	r1, r2, #5
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 030f 	and.w	r3, r3, #15
 8009f98:	2101      	movs	r1, #1
 8009f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9e:	041b      	lsls	r3, r3, #16
 8009fa0:	43db      	mvns	r3, r3
 8009fa2:	68f9      	ldr	r1, [r7, #12]
 8009fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fa8:	4013      	ands	r3, r2
 8009faa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fb2:	69da      	ldr	r2, [r3, #28]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	43db      	mvns	r3, r3
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fcc:	4013      	ands	r3, r2
 8009fce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	0159      	lsls	r1, r3, #5
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	440b      	add	r3, r1
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fea:	4619      	mov	r1, r3
 8009fec:	4b05      	ldr	r3, [pc, #20]	@ (800a004 <USB_DeactivateEndpoint+0x1b4>)
 8009fee:	4013      	ands	r3, r2
 8009ff0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	ec337800 	.word	0xec337800
 800a004:	eff37800 	.word	0xeff37800

0800a008 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	@ 0x28
 800a00c:	af02      	add	r7, sp, #8
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	2b01      	cmp	r3, #1
 800a026:	f040 8181 	bne.w	800a32c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d132      	bne.n	800a098 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	0159      	lsls	r1, r3, #5
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	440b      	add	r3, r1
 800a048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a04c:	4619      	mov	r1, r3
 800a04e:	4ba5      	ldr	r3, [pc, #660]	@ (800a2e4 <USB_EPStartXfer+0x2dc>)
 800a050:	4013      	ands	r3, r2
 800a052:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	0151      	lsls	r1, r2, #5
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	440a      	add	r2, r1
 800a06a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a06e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a080:	691a      	ldr	r2, [r3, #16]
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	0159      	lsls	r1, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	440b      	add	r3, r1
 800a08a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a08e:	4619      	mov	r1, r3
 800a090:	4b95      	ldr	r3, [pc, #596]	@ (800a2e8 <USB_EPStartXfer+0x2e0>)
 800a092:	4013      	ands	r3, r2
 800a094:	610b      	str	r3, [r1, #16]
 800a096:	e092      	b.n	800a1be <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a4:	691a      	ldr	r2, [r3, #16]
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	0159      	lsls	r1, r3, #5
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	440b      	add	r3, r1
 800a0ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4b8c      	ldr	r3, [pc, #560]	@ (800a2e8 <USB_EPStartXfer+0x2e0>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c6:	691a      	ldr	r2, [r3, #16]
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	0159      	lsls	r1, r3, #5
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	440b      	add	r3, r1
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4b83      	ldr	r3, [pc, #524]	@ (800a2e4 <USB_EPStartXfer+0x2dc>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d11a      	bne.n	800a118 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d903      	bls.n	800a0f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	689a      	ldr	r2, [r3, #8]
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	69ba      	ldr	r2, [r7, #24]
 800a106:	0151      	lsls	r1, r2, #5
 800a108:	69fa      	ldr	r2, [r7, #28]
 800a10a:	440a      	add	r2, r1
 800a10c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a114:	6113      	str	r3, [r2, #16]
 800a116:	e01b      	b.n	800a150 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a124:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	6919      	ldr	r1, [r3, #16]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	440b      	add	r3, r1
 800a130:	1e59      	subs	r1, r3, #1
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	fbb1 f3f3 	udiv	r3, r1, r3
 800a13a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a13c:	4b6b      	ldr	r3, [pc, #428]	@ (800a2ec <USB_EPStartXfer+0x2e4>)
 800a13e:	400b      	ands	r3, r1
 800a140:	69b9      	ldr	r1, [r7, #24]
 800a142:	0148      	lsls	r0, r1, #5
 800a144:	69f9      	ldr	r1, [r7, #28]
 800a146:	4401      	add	r1, r0
 800a148:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a14c:	4313      	orrs	r3, r2
 800a14e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a15c:	691a      	ldr	r2, [r3, #16]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a166:	69b9      	ldr	r1, [r7, #24]
 800a168:	0148      	lsls	r0, r1, #5
 800a16a:	69f9      	ldr	r1, [r7, #28]
 800a16c:	4401      	add	r1, r0
 800a16e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a172:	4313      	orrs	r3, r2
 800a174:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d11f      	bne.n	800a1be <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	440a      	add	r2, r1
 800a194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a198:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a19c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	015a      	lsls	r2, r3, #5
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	0151      	lsls	r1, r2, #5
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	440a      	add	r2, r1
 800a1b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d14b      	bne.n	800a25c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d009      	beq.n	800a1e0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d8:	461a      	mov	r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	69db      	ldr	r3, [r3, #28]
 800a1de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d128      	bne.n	800a23a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d110      	bne.n	800a21a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	69ba      	ldr	r2, [r7, #24]
 800a208:	0151      	lsls	r1, r2, #5
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	440a      	add	r2, r1
 800a20e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a212:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	e00f      	b.n	800a23a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	015a      	lsls	r2, r3, #5
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	4413      	add	r3, r2
 800a222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	0151      	lsls	r1, r2, #5
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	440a      	add	r2, r1
 800a230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a238:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	69fa      	ldr	r2, [r7, #28]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a254:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	e16a      	b.n	800a532 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	0151      	lsls	r1, r2, #5
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	440a      	add	r2, r1
 800a272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a276:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a27a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	791b      	ldrb	r3, [r3, #4]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d015      	beq.n	800a2b0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f000 8152 	beq.w	800a532 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	2101      	movs	r1, #1
 800a2a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a4:	69f9      	ldr	r1, [r7, #28]
 800a2a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	634b      	str	r3, [r1, #52]	@ 0x34
 800a2ae:	e140      	b.n	800a532 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d117      	bne.n	800a2f0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69ba      	ldr	r2, [r7, #24]
 800a2d0:	0151      	lsls	r1, r2, #5
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	440a      	add	r2, r1
 800a2d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	e016      	b.n	800a310 <USB_EPStartXfer+0x308>
 800a2e2:	bf00      	nop
 800a2e4:	e007ffff 	.word	0xe007ffff
 800a2e8:	fff80000 	.word	0xfff80000
 800a2ec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	0151      	lsls	r1, r2, #5
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	440a      	add	r2, r1
 800a306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a30a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a30e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	68d9      	ldr	r1, [r3, #12]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	781a      	ldrb	r2, [r3, #0]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	b298      	uxth	r0, r3
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	4603      	mov	r3, r0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f9b9 	bl	800a69c <USB_WritePacket>
 800a32a:	e102      	b.n	800a532 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	0159      	lsls	r1, r3, #5
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	440b      	add	r3, r1
 800a342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a346:	4619      	mov	r1, r3
 800a348:	4b7c      	ldr	r3, [pc, #496]	@ (800a53c <USB_EPStartXfer+0x534>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	4413      	add	r3, r2
 800a356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	0159      	lsls	r1, r3, #5
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	440b      	add	r3, r1
 800a364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a368:	4619      	mov	r1, r3
 800a36a:	4b75      	ldr	r3, [pc, #468]	@ (800a540 <USB_EPStartXfer+0x538>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d12f      	bne.n	800a3d6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39a:	691a      	ldr	r2, [r3, #16]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3a4:	69b9      	ldr	r1, [r7, #24]
 800a3a6:	0148      	lsls	r0, r1, #5
 800a3a8:	69f9      	ldr	r1, [r7, #28]
 800a3aa:	4401      	add	r1, r0
 800a3ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3d2:	6113      	str	r3, [r2, #16]
 800a3d4:	e05f      	b.n	800a496 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d123      	bne.n	800a426 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3f4:	69b9      	ldr	r1, [r7, #24]
 800a3f6:	0148      	lsls	r0, r1, #5
 800a3f8:	69f9      	ldr	r1, [r7, #28]
 800a3fa:	4401      	add	r1, r0
 800a3fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a400:	4313      	orrs	r3, r2
 800a402:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	0151      	lsls	r1, r2, #5
 800a416:	69fa      	ldr	r2, [r7, #28]
 800a418:	440a      	add	r2, r1
 800a41a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a41e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a422:	6113      	str	r3, [r2, #16]
 800a424:	e037      	b.n	800a496 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	691a      	ldr	r2, [r3, #16]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	4413      	add	r3, r2
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	8afa      	ldrh	r2, [r7, #22]
 800a442:	fb03 f202 	mul.w	r2, r3, r2
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	8afb      	ldrh	r3, [r7, #22]
 800a45a:	04d9      	lsls	r1, r3, #19
 800a45c:	4b39      	ldr	r3, [pc, #228]	@ (800a544 <USB_EPStartXfer+0x53c>)
 800a45e:	400b      	ands	r3, r1
 800a460:	69b9      	ldr	r1, [r7, #24]
 800a462:	0148      	lsls	r0, r1, #5
 800a464:	69f9      	ldr	r1, [r7, #28]
 800a466:	4401      	add	r1, r0
 800a468:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a46c:	4313      	orrs	r3, r2
 800a46e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47c:	691a      	ldr	r2, [r3, #16]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a486:	69b9      	ldr	r1, [r7, #24]
 800a488:	0148      	lsls	r0, r1, #5
 800a48a:	69f9      	ldr	r1, [r7, #28]
 800a48c:	4401      	add	r1, r0
 800a48e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a492:	4313      	orrs	r3, r2
 800a494:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a496:	79fb      	ldrb	r3, [r7, #7]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d10d      	bne.n	800a4b8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d009      	beq.n	800a4b8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	68d9      	ldr	r1, [r3, #12]
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b4:	460a      	mov	r2, r1
 800a4b6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	791b      	ldrb	r3, [r3, #4]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d128      	bne.n	800a512 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d110      	bne.n	800a4f2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	69ba      	ldr	r2, [r7, #24]
 800a4e0:	0151      	lsls	r1, r2, #5
 800a4e2:	69fa      	ldr	r2, [r7, #28]
 800a4e4:	440a      	add	r2, r1
 800a4e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	e00f      	b.n	800a512 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	0151      	lsls	r1, r2, #5
 800a504:	69fa      	ldr	r2, [r7, #28]
 800a506:	440a      	add	r2, r1
 800a508:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a50c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a510:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	69ba      	ldr	r2, [r7, #24]
 800a522:	0151      	lsls	r1, r2, #5
 800a524:	69fa      	ldr	r2, [r7, #28]
 800a526:	440a      	add	r2, r1
 800a528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a52c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a530:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	fff80000 	.word	0xfff80000
 800a540:	e007ffff 	.word	0xe007ffff
 800a544:	1ff80000 	.word	0x1ff80000

0800a548 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	785b      	ldrb	r3, [r3, #1]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d14a      	bne.n	800a5fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a57a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a57e:	f040 8086 	bne.w	800a68e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	7812      	ldrb	r2, [r2, #0]
 800a596:	0151      	lsls	r1, r2, #5
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	440a      	add	r2, r1
 800a59c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a5a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	7812      	ldrb	r2, [r2, #0]
 800a5ba:	0151      	lsls	r1, r2, #5
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	440a      	add	r2, r1
 800a5c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d902      	bls.n	800a5e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
          break;
 800a5de:	e056      	b.n	800a68e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	015a      	lsls	r2, r3, #5
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5f8:	d0e7      	beq.n	800a5ca <USB_EPStopXfer+0x82>
 800a5fa:	e048      	b.n	800a68e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a614:	d13b      	bne.n	800a68e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	7812      	ldrb	r2, [r2, #0]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a634:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a638:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	7812      	ldrb	r2, [r2, #0]
 800a64e:	0151      	lsls	r1, r2, #5
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	440a      	add	r2, r1
 800a654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a65c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3301      	adds	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d902      	bls.n	800a674 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	75fb      	strb	r3, [r7, #23]
          break;
 800a672:	e00c      	b.n	800a68e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a68c:	d0e7      	beq.n	800a65e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a690:	4618      	mov	r0, r3
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b089      	sub	sp, #36	@ 0x24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	71fb      	strb	r3, [r7, #7]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a6ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d123      	bne.n	800a70a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a6c2:	88bb      	ldrh	r3, [r7, #4]
 800a6c4:	3303      	adds	r3, #3
 800a6c6:	089b      	lsrs	r3, r3, #2
 800a6c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	61bb      	str	r3, [r7, #24]
 800a6ce:	e018      	b.n	800a702 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	031a      	lsls	r2, r3, #12
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6dc:	461a      	mov	r2, r3
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	3301      	adds	r3, #1
 800a700:	61bb      	str	r3, [r7, #24]
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	429a      	cmp	r2, r3
 800a708:	d3e2      	bcc.n	800a6d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3724      	adds	r7, #36	@ 0x24
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a718:	b480      	push	{r7}
 800a71a:	b08b      	sub	sp, #44	@ 0x2c
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	4613      	mov	r3, r2
 800a724:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	089b      	lsrs	r3, r3, #2
 800a732:	b29b      	uxth	r3, r3
 800a734:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a736:	88fb      	ldrh	r3, [r7, #6]
 800a738:	f003 0303 	and.w	r3, r3, #3
 800a73c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a73e:	2300      	movs	r3, #0
 800a740:	623b      	str	r3, [r7, #32]
 800a742:	e014      	b.n	800a76e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a752:	3301      	adds	r3, #1
 800a754:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	3301      	adds	r3, #1
 800a75a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75e:	3301      	adds	r3, #1
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a764:	3301      	adds	r3, #1
 800a766:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	3301      	adds	r3, #1
 800a76c:	623b      	str	r3, [r7, #32]
 800a76e:	6a3a      	ldr	r2, [r7, #32]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	429a      	cmp	r2, r3
 800a774:	d3e6      	bcc.n	800a744 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a776:	8bfb      	ldrh	r3, [r7, #30]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01e      	beq.n	800a7ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a786:	461a      	mov	r2, r3
 800a788:	f107 0310 	add.w	r3, r7, #16
 800a78c:	6812      	ldr	r2, [r2, #0]
 800a78e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	b2db      	uxtb	r3, r3
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	fa22 f303 	lsr.w	r3, r2, r3
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a0:	701a      	strb	r2, [r3, #0]
      i++;
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a7ae:	8bfb      	ldrh	r3, [r7, #30]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a7b4:	8bfb      	ldrh	r3, [r7, #30]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1ea      	bne.n	800a790 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	372c      	adds	r7, #44	@ 0x2c
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d12c      	bne.n	800a83e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	db12      	blt.n	800a81c <USB_EPSetStall+0x54>
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00f      	beq.n	800a81c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	0151      	lsls	r1, r2, #5
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	440a      	add	r2, r1
 800a812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a816:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a81a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	440a      	add	r2, r1
 800a832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a836:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	e02b      	b.n	800a896 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	db12      	blt.n	800a876 <USB_EPSetStall+0xae>
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00f      	beq.n	800a876 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	0151      	lsls	r1, r2, #5
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	440a      	add	r2, r1
 800a86c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a870:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a874:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	0151      	lsls	r1, r2, #5
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	440a      	add	r2, r1
 800a88c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a894:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	785b      	ldrb	r3, [r3, #1]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d128      	bne.n	800a912 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	0151      	lsls	r1, r2, #5
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	440a      	add	r2, r1
 800a8d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	791b      	ldrb	r3, [r3, #4]
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d003      	beq.n	800a8f0 <USB_EPClearStall+0x4c>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	791b      	ldrb	r3, [r3, #4]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d138      	bne.n	800a962 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	0151      	lsls	r1, r2, #5
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	440a      	add	r2, r1
 800a906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a90a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	e027      	b.n	800a962 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	0151      	lsls	r1, r2, #5
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	440a      	add	r2, r1
 800a928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a92c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a930:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	791b      	ldrb	r3, [r3, #4]
 800a936:	2b03      	cmp	r3, #3
 800a938:	d003      	beq.n	800a942 <USB_EPClearStall+0x9e>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	791b      	ldrb	r3, [r3, #4]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d10f      	bne.n	800a962 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	0151      	lsls	r1, r2, #5
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	440a      	add	r2, r1
 800a958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a95c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a960:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a98e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a992:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	78fb      	ldrb	r3, [r7, #3]
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a9a4:	68f9      	ldr	r1, [r7, #12]
 800a9a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a9d6:	f023 0303 	bic.w	r3, r3, #3
 800a9da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9ea:	f023 0302 	bic.w	r3, r3, #2
 800a9ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa18:	f023 0303 	bic.w	r3, r3, #3
 800aa1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa2c:	f043 0302 	orr.w	r3, r3, #2
 800aa30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	4013      	ands	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa58:	68fb      	ldr	r3, [r7, #12]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b085      	sub	sp, #20
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	4013      	ands	r3, r2
 800aa88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	0c1b      	lsrs	r3, r3, #16
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b085      	sub	sp, #20
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	4013      	ands	r3, r2
 800aabc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	b29b      	uxth	r3, r3
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3714      	adds	r7, #20
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aace:	b480      	push	{r7}
 800aad0:	b085      	sub	sp, #20
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	4013      	ands	r3, r2
 800aafa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aafc:	68bb      	ldr	r3, [r7, #8]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b087      	sub	sp, #28
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	460b      	mov	r3, r1
 800ab14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab2e:	78fb      	ldrb	r3, [r7, #3]
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	fa22 f303 	lsr.w	r3, r2, r3
 800ab3a:	01db      	lsls	r3, r3, #7
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	4013      	ands	r3, r2
 800ab56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab58:	68bb      	ldr	r3, [r7, #8]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b083      	sub	sp, #12
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	f003 0301 	and.w	r3, r3, #1
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
	...

0800ab84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4b09      	ldr	r3, [pc, #36]	@ (800abc8 <USB_ActivateSetup+0x44>)
 800aba2:	4013      	ands	r3, r2
 800aba4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	fffff800 	.word	0xfffff800

0800abcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800abcc:	b480      	push	{r7}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	460b      	mov	r3, r1
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	333c      	adds	r3, #60	@ 0x3c
 800abe2:	3304      	adds	r3, #4
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	4a26      	ldr	r2, [pc, #152]	@ (800ac84 <USB_EP0_OutStart+0xb8>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d90a      	bls.n	800ac06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac00:	d101      	bne.n	800ac06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	e037      	b.n	800ac76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac34:	f043 0318 	orr.w	r3, r3, #24
 800ac38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac48:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ac4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ac4e:	7afb      	ldrb	r3, [r7, #11]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d10f      	bne.n	800ac74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac6e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ac72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	371c      	adds	r7, #28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	4f54300a 	.word	0x4f54300a

0800ac88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3301      	adds	r3, #1
 800ac98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aca0:	d901      	bls.n	800aca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e01b      	b.n	800acde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	daf2      	bge.n	800ac94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f043 0201 	orr.w	r2, r3, #1
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	3301      	adds	r3, #1
 800acc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800acca:	d901      	bls.n	800acd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e006      	b.n	800acde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d0f0      	beq.n	800acbe <USB_CoreReset+0x36>

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
	...

0800acec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acf8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800acfc:	f005 fab0 	bl	8010260 <USBD_static_malloc>
 800ad00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d109      	bne.n	800ad1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	32b0      	adds	r2, #176	@ 0xb0
 800ad12:	2100      	movs	r1, #0
 800ad14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e0d4      	b.n	800aec6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ad1c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ad20:	2100      	movs	r1, #0
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f007 fea5 	bl	8012a72 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	32b0      	adds	r2, #176	@ 0xb0
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	32b0      	adds	r2, #176	@ 0xb0
 800ad42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7c1b      	ldrb	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d138      	bne.n	800adc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad54:	4b5e      	ldr	r3, [pc, #376]	@ (800aed0 <USBD_CDC_Init+0x1e4>)
 800ad56:	7819      	ldrb	r1, [r3, #0]
 800ad58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f005 f95b 	bl	801001a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad64:	4b5a      	ldr	r3, [pc, #360]	@ (800aed0 <USBD_CDC_Init+0x1e4>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 020f 	and.w	r2, r3, #15
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	440b      	add	r3, r1
 800ad78:	3324      	adds	r3, #36	@ 0x24
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad7e:	4b55      	ldr	r3, [pc, #340]	@ (800aed4 <USBD_CDC_Init+0x1e8>)
 800ad80:	7819      	ldrb	r1, [r3, #0]
 800ad82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad86:	2202      	movs	r2, #2
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f005 f946 	bl	801001a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad8e:	4b51      	ldr	r3, [pc, #324]	@ (800aed4 <USBD_CDC_Init+0x1e8>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f003 020f 	and.w	r2, r3, #15
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ada6:	2201      	movs	r2, #1
 800ada8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800adaa:	4b4b      	ldr	r3, [pc, #300]	@ (800aed8 <USBD_CDC_Init+0x1ec>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	f003 020f 	and.w	r2, r3, #15
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	4613      	mov	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4413      	add	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	440b      	add	r3, r1
 800adbe:	3326      	adds	r3, #38	@ 0x26
 800adc0:	2210      	movs	r2, #16
 800adc2:	801a      	strh	r2, [r3, #0]
 800adc4:	e035      	b.n	800ae32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800adc6:	4b42      	ldr	r3, [pc, #264]	@ (800aed0 <USBD_CDC_Init+0x1e4>)
 800adc8:	7819      	ldrb	r1, [r3, #0]
 800adca:	2340      	movs	r3, #64	@ 0x40
 800adcc:	2202      	movs	r2, #2
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f005 f923 	bl	801001a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800add4:	4b3e      	ldr	r3, [pc, #248]	@ (800aed0 <USBD_CDC_Init+0x1e4>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f003 020f 	and.w	r2, r3, #15
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	440b      	add	r3, r1
 800ade8:	3324      	adds	r3, #36	@ 0x24
 800adea:	2201      	movs	r2, #1
 800adec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800adee:	4b39      	ldr	r3, [pc, #228]	@ (800aed4 <USBD_CDC_Init+0x1e8>)
 800adf0:	7819      	ldrb	r1, [r3, #0]
 800adf2:	2340      	movs	r3, #64	@ 0x40
 800adf4:	2202      	movs	r2, #2
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f005 f90f 	bl	801001a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adfc:	4b35      	ldr	r3, [pc, #212]	@ (800aed4 <USBD_CDC_Init+0x1e8>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	f003 020f 	and.w	r2, r3, #15
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
 800ae10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae14:	2201      	movs	r2, #1
 800ae16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae18:	4b2f      	ldr	r3, [pc, #188]	@ (800aed8 <USBD_CDC_Init+0x1ec>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	f003 020f 	and.w	r2, r3, #15
 800ae20:	6879      	ldr	r1, [r7, #4]
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	440b      	add	r3, r1
 800ae2c:	3326      	adds	r3, #38	@ 0x26
 800ae2e:	2210      	movs	r2, #16
 800ae30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae32:	4b29      	ldr	r3, [pc, #164]	@ (800aed8 <USBD_CDC_Init+0x1ec>)
 800ae34:	7819      	ldrb	r1, [r3, #0]
 800ae36:	2308      	movs	r3, #8
 800ae38:	2203      	movs	r2, #3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f005 f8ed 	bl	801001a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ae40:	4b25      	ldr	r3, [pc, #148]	@ (800aed8 <USBD_CDC_Init+0x1ec>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	f003 020f 	and.w	r2, r3, #15
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	3324      	adds	r3, #36	@ 0x24
 800ae56:	2201      	movs	r2, #1
 800ae58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	33b0      	adds	r3, #176	@ 0xb0
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ae90:	2302      	movs	r3, #2
 800ae92:	e018      	b.n	800aec6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	7c1b      	ldrb	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae9c:	4b0d      	ldr	r3, [pc, #52]	@ (800aed4 <USBD_CDC_Init+0x1e8>)
 800ae9e:	7819      	ldrb	r1, [r3, #0]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f005 f9a4 	bl	80101f8 <USBD_LL_PrepareReceive>
 800aeb0:	e008      	b.n	800aec4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aeb2:	4b08      	ldr	r3, [pc, #32]	@ (800aed4 <USBD_CDC_Init+0x1e8>)
 800aeb4:	7819      	ldrb	r1, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aebc:	2340      	movs	r3, #64	@ 0x40
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f005 f99a 	bl	80101f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	24000097 	.word	0x24000097
 800aed4:	24000098 	.word	0x24000098
 800aed8:	24000099 	.word	0x24000099

0800aedc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aee8:	4b3a      	ldr	r3, [pc, #232]	@ (800afd4 <USBD_CDC_DeInit+0xf8>)
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	4619      	mov	r1, r3
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f005 f8b9 	bl	8010066 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aef4:	4b37      	ldr	r3, [pc, #220]	@ (800afd4 <USBD_CDC_DeInit+0xf8>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f003 020f 	and.w	r2, r3, #15
 800aefc:	6879      	ldr	r1, [r7, #4]
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	440b      	add	r3, r1
 800af08:	3324      	adds	r3, #36	@ 0x24
 800af0a:	2200      	movs	r2, #0
 800af0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800af0e:	4b32      	ldr	r3, [pc, #200]	@ (800afd8 <USBD_CDC_DeInit+0xfc>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f005 f8a6 	bl	8010066 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800af1a:	4b2f      	ldr	r3, [pc, #188]	@ (800afd8 <USBD_CDC_DeInit+0xfc>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	f003 020f 	and.w	r2, r3, #15
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	4613      	mov	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	440b      	add	r3, r1
 800af2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af32:	2200      	movs	r2, #0
 800af34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af36:	4b29      	ldr	r3, [pc, #164]	@ (800afdc <USBD_CDC_DeInit+0x100>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f005 f892 	bl	8010066 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800af42:	4b26      	ldr	r3, [pc, #152]	@ (800afdc <USBD_CDC_DeInit+0x100>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	f003 020f 	and.w	r2, r3, #15
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	3324      	adds	r3, #36	@ 0x24
 800af58:	2200      	movs	r2, #0
 800af5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af5c:	4b1f      	ldr	r3, [pc, #124]	@ (800afdc <USBD_CDC_DeInit+0x100>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f003 020f 	and.w	r2, r3, #15
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	3326      	adds	r3, #38	@ 0x26
 800af72:	2200      	movs	r2, #0
 800af74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	32b0      	adds	r2, #176	@ 0xb0
 800af80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d01f      	beq.n	800afc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	33b0      	adds	r3, #176	@ 0xb0
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	32b0      	adds	r2, #176	@ 0xb0
 800afa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afaa:	4618      	mov	r0, r3
 800afac:	f005 f966 	bl	801027c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	32b0      	adds	r2, #176	@ 0xb0
 800afba:	2100      	movs	r1, #0
 800afbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	24000097 	.word	0x24000097
 800afd8:	24000098 	.word	0x24000098
 800afdc:	24000099 	.word	0x24000099

0800afe0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	32b0      	adds	r2, #176	@ 0xb0
 800aff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e0bf      	b.n	800b190 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d050      	beq.n	800b0be <USBD_CDC_Setup+0xde>
 800b01c:	2b20      	cmp	r3, #32
 800b01e:	f040 80af 	bne.w	800b180 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	88db      	ldrh	r3, [r3, #6]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d03a      	beq.n	800b0a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b25b      	sxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	da1b      	bge.n	800b06c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	33b0      	adds	r3, #176	@ 0xb0
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b04a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	88d2      	ldrh	r2, [r2, #6]
 800b050:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	88db      	ldrh	r3, [r3, #6]
 800b056:	2b07      	cmp	r3, #7
 800b058:	bf28      	it	cs
 800b05a:	2307      	movcs	r3, #7
 800b05c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	89fa      	ldrh	r2, [r7, #14]
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 fdbd 	bl	800cbe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b06a:	e090      	b.n	800b18e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	785a      	ldrb	r2, [r3, #1]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b07c:	d803      	bhi.n	800b086 <USBD_CDC_Setup+0xa6>
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	88db      	ldrh	r3, [r3, #6]
 800b082:	b2da      	uxtb	r2, r3
 800b084:	e000      	b.n	800b088 <USBD_CDC_Setup+0xa8>
 800b086:	2240      	movs	r2, #64	@ 0x40
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b08e:	6939      	ldr	r1, [r7, #16]
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b096:	461a      	mov	r2, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 fdcf 	bl	800cc3c <USBD_CtlPrepareRx>
      break;
 800b09e:	e076      	b.n	800b18e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	33b0      	adds	r3, #176	@ 0xb0
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	7850      	ldrb	r0, [r2, #1]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	4798      	blx	r3
      break;
 800b0bc:	e067      	b.n	800b18e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	785b      	ldrb	r3, [r3, #1]
 800b0c2:	2b0b      	cmp	r3, #11
 800b0c4:	d851      	bhi.n	800b16a <USBD_CDC_Setup+0x18a>
 800b0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0cc <USBD_CDC_Setup+0xec>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b0fd 	.word	0x0800b0fd
 800b0d0:	0800b179 	.word	0x0800b179
 800b0d4:	0800b16b 	.word	0x0800b16b
 800b0d8:	0800b16b 	.word	0x0800b16b
 800b0dc:	0800b16b 	.word	0x0800b16b
 800b0e0:	0800b16b 	.word	0x0800b16b
 800b0e4:	0800b16b 	.word	0x0800b16b
 800b0e8:	0800b16b 	.word	0x0800b16b
 800b0ec:	0800b16b 	.word	0x0800b16b
 800b0f0:	0800b16b 	.word	0x0800b16b
 800b0f4:	0800b127 	.word	0x0800b127
 800b0f8:	0800b151 	.word	0x0800b151
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b03      	cmp	r3, #3
 800b106:	d107      	bne.n	800b118 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b108:	f107 030a 	add.w	r3, r7, #10
 800b10c:	2202      	movs	r2, #2
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 fd67 	bl	800cbe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b116:	e032      	b.n	800b17e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 fce5 	bl	800caea <USBD_CtlError>
            ret = USBD_FAIL;
 800b120:	2303      	movs	r3, #3
 800b122:	75fb      	strb	r3, [r7, #23]
          break;
 800b124:	e02b      	b.n	800b17e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d107      	bne.n	800b142 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b132:	f107 030d 	add.w	r3, r7, #13
 800b136:	2201      	movs	r2, #1
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 fd52 	bl	800cbe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b140:	e01d      	b.n	800b17e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f001 fcd0 	bl	800caea <USBD_CtlError>
            ret = USBD_FAIL;
 800b14a:	2303      	movs	r3, #3
 800b14c:	75fb      	strb	r3, [r7, #23]
          break;
 800b14e:	e016      	b.n	800b17e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b03      	cmp	r3, #3
 800b15a:	d00f      	beq.n	800b17c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f001 fcc3 	bl	800caea <USBD_CtlError>
            ret = USBD_FAIL;
 800b164:	2303      	movs	r3, #3
 800b166:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b168:	e008      	b.n	800b17c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 fcbc 	bl	800caea <USBD_CtlError>
          ret = USBD_FAIL;
 800b172:	2303      	movs	r3, #3
 800b174:	75fb      	strb	r3, [r7, #23]
          break;
 800b176:	e002      	b.n	800b17e <USBD_CDC_Setup+0x19e>
          break;
 800b178:	bf00      	nop
 800b17a:	e008      	b.n	800b18e <USBD_CDC_Setup+0x1ae>
          break;
 800b17c:	bf00      	nop
      }
      break;
 800b17e:	e006      	b.n	800b18e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f001 fcb1 	bl	800caea <USBD_CtlError>
      ret = USBD_FAIL;
 800b188:	2303      	movs	r3, #3
 800b18a:	75fb      	strb	r3, [r7, #23]
      break;
 800b18c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	32b0      	adds	r2, #176	@ 0xb0
 800b1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e065      	b.n	800b28e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	32b0      	adds	r2, #176	@ 0xb0
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1d2:	78fb      	ldrb	r3, [r7, #3]
 800b1d4:	f003 020f 	and.w	r2, r3, #15
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	3318      	adds	r3, #24
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d02f      	beq.n	800b24c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b1ec:	78fb      	ldrb	r3, [r7, #3]
 800b1ee:	f003 020f 	and.w	r2, r3, #15
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	440b      	add	r3, r1
 800b1fe:	3318      	adds	r3, #24
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	f003 010f 	and.w	r1, r3, #15
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	460b      	mov	r3, r1
 800b20c:	00db      	lsls	r3, r3, #3
 800b20e:	440b      	add	r3, r1
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4403      	add	r3, r0
 800b214:	331c      	adds	r3, #28
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	fbb2 f1f3 	udiv	r1, r2, r3
 800b21c:	fb01 f303 	mul.w	r3, r1, r3
 800b220:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b222:	2b00      	cmp	r3, #0
 800b224:	d112      	bne.n	800b24c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	f003 020f 	and.w	r2, r3, #15
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	440b      	add	r3, r1
 800b238:	3318      	adds	r3, #24
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b23e:	78f9      	ldrb	r1, [r7, #3]
 800b240:	2300      	movs	r3, #0
 800b242:	2200      	movs	r2, #0
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f004 ffb6 	bl	80101b6 <USBD_LL_Transmit>
 800b24a:	e01f      	b.n	800b28c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	33b0      	adds	r3, #176	@ 0xb0
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d010      	beq.n	800b28c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	33b0      	adds	r3, #176	@ 0xb0
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b288:	78fa      	ldrb	r2, [r7, #3]
 800b28a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	32b0      	adds	r2, #176	@ 0xb0
 800b2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	32b0      	adds	r2, #176	@ 0xb0
 800b2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e01a      	b.n	800b2fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2c8:	78fb      	ldrb	r3, [r7, #3]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f004 ffb4 	bl	801023a <USBD_LL_GetRxDataSize>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	33b0      	adds	r3, #176	@ 0xb0
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	32b0      	adds	r2, #176	@ 0xb0
 800b318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b324:	2303      	movs	r3, #3
 800b326:	e024      	b.n	800b372 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	33b0      	adds	r3, #176	@ 0xb0
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d019      	beq.n	800b370 <USBD_CDC_EP0_RxReady+0x6a>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b342:	2bff      	cmp	r3, #255	@ 0xff
 800b344:	d014      	beq.n	800b370 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	33b0      	adds	r3, #176	@ 0xb0
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b35e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b366:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	22ff      	movs	r2, #255	@ 0xff
 800b36c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b384:	2182      	movs	r1, #130	@ 0x82
 800b386:	4818      	ldr	r0, [pc, #96]	@ (800b3e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b388:	f000 fd4f 	bl	800be2a <USBD_GetEpDesc>
 800b38c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b38e:	2101      	movs	r1, #1
 800b390:	4815      	ldr	r0, [pc, #84]	@ (800b3e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b392:	f000 fd4a 	bl	800be2a <USBD_GetEpDesc>
 800b396:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b398:	2181      	movs	r1, #129	@ 0x81
 800b39a:	4813      	ldr	r0, [pc, #76]	@ (800b3e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b39c:	f000 fd45 	bl	800be2a <USBD_GetEpDesc>
 800b3a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2210      	movs	r2, #16
 800b3ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d006      	beq.n	800b3c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3bc:	711a      	strb	r2, [r3, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d006      	beq.n	800b3d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3d0:	711a      	strb	r2, [r3, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2243      	movs	r2, #67	@ 0x43
 800b3da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3dc:	4b02      	ldr	r3, [pc, #8]	@ (800b3e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	24000054 	.word	0x24000054

0800b3ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3f4:	2182      	movs	r1, #130	@ 0x82
 800b3f6:	4818      	ldr	r0, [pc, #96]	@ (800b458 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3f8:	f000 fd17 	bl	800be2a <USBD_GetEpDesc>
 800b3fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3fe:	2101      	movs	r1, #1
 800b400:	4815      	ldr	r0, [pc, #84]	@ (800b458 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b402:	f000 fd12 	bl	800be2a <USBD_GetEpDesc>
 800b406:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b408:	2181      	movs	r1, #129	@ 0x81
 800b40a:	4813      	ldr	r0, [pc, #76]	@ (800b458 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b40c:	f000 fd0d 	bl	800be2a <USBD_GetEpDesc>
 800b410:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2210      	movs	r2, #16
 800b41c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d006      	beq.n	800b432 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	2200      	movs	r2, #0
 800b428:	711a      	strb	r2, [r3, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f042 0202 	orr.w	r2, r2, #2
 800b430:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d006      	beq.n	800b446 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	711a      	strb	r2, [r3, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f042 0202 	orr.w	r2, r2, #2
 800b444:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2243      	movs	r2, #67	@ 0x43
 800b44a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b44c:	4b02      	ldr	r3, [pc, #8]	@ (800b458 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	24000054 	.word	0x24000054

0800b45c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b464:	2182      	movs	r1, #130	@ 0x82
 800b466:	4818      	ldr	r0, [pc, #96]	@ (800b4c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b468:	f000 fcdf 	bl	800be2a <USBD_GetEpDesc>
 800b46c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b46e:	2101      	movs	r1, #1
 800b470:	4815      	ldr	r0, [pc, #84]	@ (800b4c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b472:	f000 fcda 	bl	800be2a <USBD_GetEpDesc>
 800b476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b478:	2181      	movs	r1, #129	@ 0x81
 800b47a:	4813      	ldr	r0, [pc, #76]	@ (800b4c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b47c:	f000 fcd5 	bl	800be2a <USBD_GetEpDesc>
 800b480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	2210      	movs	r2, #16
 800b48c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d006      	beq.n	800b4a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2200      	movs	r2, #0
 800b498:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b49c:	711a      	strb	r2, [r3, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d006      	beq.n	800b4b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4b0:	711a      	strb	r2, [r3, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2243      	movs	r2, #67	@ 0x43
 800b4ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4bc:	4b02      	ldr	r3, [pc, #8]	@ (800b4c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	24000054 	.word	0x24000054

0800b4cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b4da:	4b03      	ldr	r3, [pc, #12]	@ (800b4e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	24000010 	.word	0x24000010

0800b4ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e009      	b.n	800b514 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	33b0      	adds	r3, #176	@ 0xb0
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	32b0      	adds	r2, #176	@ 0xb0
 800b536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b542:	2303      	movs	r3, #3
 800b544:	e008      	b.n	800b558 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	371c      	adds	r7, #28
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	32b0      	adds	r2, #176	@ 0xb0
 800b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b584:	2303      	movs	r3, #3
 800b586:	e004      	b.n	800b592 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
	...

0800b5a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	32b0      	adds	r2, #176	@ 0xb0
 800b5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e025      	b.n	800b612 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d11f      	bne.n	800b610 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b5d8:	4b10      	ldr	r3, [pc, #64]	@ (800b61c <USBD_CDC_TransmitPacket+0x7c>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	f003 020f 	and.w	r2, r3, #15
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4403      	add	r3, r0
 800b5f2:	3318      	adds	r3, #24
 800b5f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b5f6:	4b09      	ldr	r3, [pc, #36]	@ (800b61c <USBD_CDC_TransmitPacket+0x7c>)
 800b5f8:	7819      	ldrb	r1, [r3, #0]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f004 fdd5 	bl	80101b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	24000097 	.word	0x24000097

0800b620 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	32b0      	adds	r2, #176	@ 0xb0
 800b632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b636:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	32b0      	adds	r2, #176	@ 0xb0
 800b642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e018      	b.n	800b680 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	7c1b      	ldrb	r3, [r3, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b656:	4b0c      	ldr	r3, [pc, #48]	@ (800b688 <USBD_CDC_ReceivePacket+0x68>)
 800b658:	7819      	ldrb	r1, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f004 fdc7 	bl	80101f8 <USBD_LL_PrepareReceive>
 800b66a:	e008      	b.n	800b67e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b66c:	4b06      	ldr	r3, [pc, #24]	@ (800b688 <USBD_CDC_ReceivePacket+0x68>)
 800b66e:	7819      	ldrb	r1, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b676:	2340      	movs	r3, #64	@ 0x40
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f004 fdbd 	bl	80101f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	24000098 	.word	0x24000098

0800b68c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	4613      	mov	r3, r2
 800b698:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e01f      	b.n	800b6e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	79fa      	ldrb	r2, [r7, #7]
 800b6d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f004 fc33 	bl	800ff44 <USBD_LL_Init>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3718      	adds	r7, #24
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b700:	2303      	movs	r3, #3
 800b702:	e025      	b.n	800b750 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	32ae      	adds	r2, #174	@ 0xae
 800b716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00f      	beq.n	800b740 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	32ae      	adds	r2, #174	@ 0xae
 800b72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b730:	f107 020e 	add.w	r2, r7, #14
 800b734:	4610      	mov	r0, r2
 800b736:	4798      	blx	r3
 800b738:	4602      	mov	r2, r0
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f004 fc3f 	bl	800ffe4 <USBD_LL_Start>
 800b766:	4603      	mov	r3, r0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b778:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	460b      	mov	r3, r1
 800b790:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	78fa      	ldrb	r2, [r7, #3]
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	4798      	blx	r3
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	4611      	mov	r1, r2
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d001      	beq.n	800b7e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	4618      	mov	r0, r3
 800b806:	f001 f936 	bl	800ca76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b818:	461a      	mov	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b826:	f003 031f 	and.w	r3, r3, #31
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d01a      	beq.n	800b864 <USBD_LL_SetupStage+0x72>
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d822      	bhi.n	800b878 <USBD_LL_SetupStage+0x86>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <USBD_LL_SetupStage+0x4a>
 800b836:	2b01      	cmp	r3, #1
 800b838:	d00a      	beq.n	800b850 <USBD_LL_SetupStage+0x5e>
 800b83a:	e01d      	b.n	800b878 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fb63 	bl	800bf10 <USBD_StdDevReq>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73fb      	strb	r3, [r7, #15]
      break;
 800b84e:	e020      	b.n	800b892 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fbcb 	bl	800bff4 <USBD_StdItfReq>
 800b85e:	4603      	mov	r3, r0
 800b860:	73fb      	strb	r3, [r7, #15]
      break;
 800b862:	e016      	b.n	800b892 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fc2d 	bl	800c0cc <USBD_StdEPReq>
 800b872:	4603      	mov	r3, r0
 800b874:	73fb      	strb	r3, [r7, #15]
      break;
 800b876:	e00c      	b.n	800b892 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b87e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b882:	b2db      	uxtb	r3, r3
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f004 fc0c 	bl	80100a4 <USBD_LL_StallEP>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]
      break;
 800b890:	bf00      	nop
  }

  return ret;
 800b892:	7bfb      	ldrb	r3, [r7, #15]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b8ae:	7afb      	ldrb	r3, [r7, #11]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d16e      	bne.n	800b992 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b8ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	f040 8098 	bne.w	800b9f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	689a      	ldr	r2, [r3, #8]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d913      	bls.n	800b8fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	689a      	ldr	r2, [r3, #8]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	1ad2      	subs	r2, r2, r3
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	bf28      	it	cs
 800b8ee:	4613      	movcs	r3, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f001 f9be 	bl	800cc76 <USBD_CtlContinueRx>
 800b8fa:	e07d      	b.n	800b9f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b902:	f003 031f 	and.w	r3, r3, #31
 800b906:	2b02      	cmp	r3, #2
 800b908:	d014      	beq.n	800b934 <USBD_LL_DataOutStage+0x98>
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d81d      	bhi.n	800b94a <USBD_LL_DataOutStage+0xae>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <USBD_LL_DataOutStage+0x7c>
 800b912:	2b01      	cmp	r3, #1
 800b914:	d003      	beq.n	800b91e <USBD_LL_DataOutStage+0x82>
 800b916:	e018      	b.n	800b94a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b918:	2300      	movs	r3, #0
 800b91a:	75bb      	strb	r3, [r7, #22]
            break;
 800b91c:	e018      	b.n	800b950 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b924:	b2db      	uxtb	r3, r3
 800b926:	4619      	mov	r1, r3
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 fa64 	bl	800bdf6 <USBD_CoreFindIF>
 800b92e:	4603      	mov	r3, r0
 800b930:	75bb      	strb	r3, [r7, #22]
            break;
 800b932:	e00d      	b.n	800b950 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	4619      	mov	r1, r3
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 fa66 	bl	800be10 <USBD_CoreFindEP>
 800b944:	4603      	mov	r3, r0
 800b946:	75bb      	strb	r3, [r7, #22]
            break;
 800b948:	e002      	b.n	800b950 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	75bb      	strb	r3, [r7, #22]
            break;
 800b94e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b950:	7dbb      	ldrb	r3, [r7, #22]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d119      	bne.n	800b98a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d113      	bne.n	800b98a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b962:	7dba      	ldrb	r2, [r7, #22]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	32ae      	adds	r2, #174	@ 0xae
 800b968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00b      	beq.n	800b98a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b972:	7dba      	ldrb	r2, [r7, #22]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b97a:	7dba      	ldrb	r2, [r7, #22]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	32ae      	adds	r2, #174	@ 0xae
 800b980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f001 f984 	bl	800cc98 <USBD_CtlSendStatus>
 800b990:	e032      	b.n	800b9f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b992:	7afb      	ldrb	r3, [r7, #11]
 800b994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	4619      	mov	r1, r3
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 fa37 	bl	800be10 <USBD_CoreFindEP>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9a6:	7dbb      	ldrb	r3, [r7, #22]
 800b9a8:	2bff      	cmp	r3, #255	@ 0xff
 800b9aa:	d025      	beq.n	800b9f8 <USBD_LL_DataOutStage+0x15c>
 800b9ac:	7dbb      	ldrb	r3, [r7, #22]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d122      	bne.n	800b9f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d117      	bne.n	800b9ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b9be:	7dba      	ldrb	r2, [r7, #22]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	32ae      	adds	r2, #174	@ 0xae
 800b9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00f      	beq.n	800b9ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b9ce:	7dba      	ldrb	r2, [r7, #22]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b9d6:	7dba      	ldrb	r2, [r7, #22]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	32ae      	adds	r2, #174	@ 0xae
 800b9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	7afa      	ldrb	r2, [r7, #11]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	4798      	blx	r3
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d001      	beq.n	800b9f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	e000      	b.n	800b9fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b086      	sub	sp, #24
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ba10:	7afb      	ldrb	r3, [r7, #11]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d16f      	bne.n	800baf6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3314      	adds	r3, #20
 800ba1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d15a      	bne.n	800badc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	689a      	ldr	r2, [r3, #8]
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d914      	bls.n	800ba5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	689a      	ldr	r2, [r3, #8]
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	1ad2      	subs	r2, r2, r3
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	461a      	mov	r2, r3
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f001 f8e6 	bl	800cc1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f004 fbcf 	bl	80101f8 <USBD_LL_PrepareReceive>
 800ba5a:	e03f      	b.n	800badc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	68da      	ldr	r2, [r3, #12]
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d11c      	bne.n	800baa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d316      	bcc.n	800baa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d20f      	bcs.n	800baa2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba82:	2200      	movs	r2, #0
 800ba84:	2100      	movs	r1, #0
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f001 f8c7 	bl	800cc1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba94:	2300      	movs	r3, #0
 800ba96:	2200      	movs	r2, #0
 800ba98:	2100      	movs	r1, #0
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f004 fbac 	bl	80101f8 <USBD_LL_PrepareReceive>
 800baa0:	e01c      	b.n	800badc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d10f      	bne.n	800bace <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bace:	2180      	movs	r1, #128	@ 0x80
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f004 fae7 	bl	80100a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f001 f8f1 	bl	800ccbe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d03a      	beq.n	800bb5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f7ff fe42 	bl	800b770 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800baf4:	e032      	b.n	800bb5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800baf6:	7afb      	ldrb	r3, [r7, #11]
 800baf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	4619      	mov	r1, r3
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f000 f985 	bl	800be10 <USBD_CoreFindEP>
 800bb06:	4603      	mov	r3, r0
 800bb08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	2bff      	cmp	r3, #255	@ 0xff
 800bb0e:	d025      	beq.n	800bb5c <USBD_LL_DataInStage+0x15a>
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d122      	bne.n	800bb5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d11c      	bne.n	800bb5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bb22:	7dfa      	ldrb	r2, [r7, #23]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	32ae      	adds	r2, #174	@ 0xae
 800bb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2c:	695b      	ldr	r3, [r3, #20]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d014      	beq.n	800bb5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bb32:	7dfa      	ldrb	r2, [r7, #23]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bb3a:	7dfa      	ldrb	r2, [r7, #23]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	32ae      	adds	r2, #174	@ 0xae
 800bb40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	7afa      	ldrb	r2, [r7, #11]
 800bb48:	4611      	mov	r1, r2
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	4798      	blx	r3
 800bb4e:	4603      	mov	r3, r0
 800bb50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb52:	7dbb      	ldrb	r3, [r7, #22]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb58:	7dbb      	ldrb	r3, [r7, #22]
 800bb5a:	e000      	b.n	800bb5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d014      	beq.n	800bbcc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00e      	beq.n	800bbcc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	6852      	ldr	r2, [r2, #4]
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	4798      	blx	r3
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbcc:	2340      	movs	r3, #64	@ 0x40
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f004 fa21 	bl	801001a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2240      	movs	r2, #64	@ 0x40
 800bbe4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbe8:	2340      	movs	r3, #64	@ 0x40
 800bbea:	2200      	movs	r2, #0
 800bbec:	2180      	movs	r1, #128	@ 0x80
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f004 fa13 	bl	801001a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2240      	movs	r2, #64	@ 0x40
 800bbfe:	621a      	str	r2, [r3, #32]

  return ret;
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	460b      	mov	r3, r1
 800bc14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	78fa      	ldrb	r2, [r7, #3]
 800bc1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	370c      	adds	r7, #12
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b04      	cmp	r3, #4
 800bc3c:	d006      	beq.n	800bc4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2204      	movs	r2, #4
 800bc50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d106      	bne.n	800bc84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b082      	sub	sp, #8
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d110      	bne.n	800bcc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d005      	beq.n	800bcc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	32ae      	adds	r2, #174	@ 0xae
 800bce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e01c      	b.n	800bd2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d115      	bne.n	800bd2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	32ae      	adds	r2, #174	@ 0xae
 800bd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00b      	beq.n	800bd2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	32ae      	adds	r2, #174	@ 0xae
 800bd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	78fa      	ldrb	r2, [r7, #3]
 800bd26:	4611      	mov	r1, r2
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b082      	sub	sp, #8
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	32ae      	adds	r2, #174	@ 0xae
 800bd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e01c      	b.n	800bd92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d115      	bne.n	800bd90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	32ae      	adds	r2, #174	@ 0xae
 800bd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32ae      	adds	r2, #174	@ 0xae
 800bd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd88:	78fa      	ldrb	r2, [r7, #3]
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00e      	beq.n	800bdec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6852      	ldr	r2, [r2, #4]
 800bdda:	b2d2      	uxtb	r2, r2
 800bddc:	4611      	mov	r1, r2
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bde8:	2303      	movs	r3, #3
 800bdea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	460b      	mov	r3, r1
 800be00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b086      	sub	sp, #24
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	885b      	ldrh	r3, [r3, #2]
 800be46:	b29b      	uxth	r3, r3
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	7812      	ldrb	r2, [r2, #0]
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d91f      	bls.n	800be90 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800be56:	e013      	b.n	800be80 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800be58:	f107 030a 	add.w	r3, r7, #10
 800be5c:	4619      	mov	r1, r3
 800be5e:	6978      	ldr	r0, [r7, #20]
 800be60:	f000 f81b 	bl	800be9a <USBD_GetNextDesc>
 800be64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	785b      	ldrb	r3, [r3, #1]
 800be6a:	2b05      	cmp	r3, #5
 800be6c:	d108      	bne.n	800be80 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	789b      	ldrb	r3, [r3, #2]
 800be76:	78fa      	ldrb	r2, [r7, #3]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d008      	beq.n	800be8e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800be7c:	2300      	movs	r3, #0
 800be7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	885b      	ldrh	r3, [r3, #2]
 800be84:	b29a      	uxth	r2, r3
 800be86:	897b      	ldrh	r3, [r7, #10]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d8e5      	bhi.n	800be58 <USBD_GetEpDesc+0x2e>
 800be8c:	e000      	b.n	800be90 <USBD_GetEpDesc+0x66>
          break;
 800be8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800be90:	693b      	ldr	r3, [r7, #16]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b085      	sub	sp, #20
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	7812      	ldrb	r2, [r2, #0]
 800beb0:	4413      	add	r3, r2
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4413      	add	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bec4:	68fb      	ldr	r3, [r7, #12]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b087      	sub	sp, #28
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	3301      	adds	r3, #1
 800bee8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bef0:	8a3b      	ldrh	r3, [r7, #16]
 800bef2:	021b      	lsls	r3, r3, #8
 800bef4:	b21a      	sxth	r2, r3
 800bef6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800befa:	4313      	orrs	r3, r2
 800befc:	b21b      	sxth	r3, r3
 800befe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf00:	89fb      	ldrh	r3, [r7, #14]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
	...

0800bf10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf26:	2b40      	cmp	r3, #64	@ 0x40
 800bf28:	d005      	beq.n	800bf36 <USBD_StdDevReq+0x26>
 800bf2a:	2b40      	cmp	r3, #64	@ 0x40
 800bf2c:	d857      	bhi.n	800bfde <USBD_StdDevReq+0xce>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00f      	beq.n	800bf52 <USBD_StdDevReq+0x42>
 800bf32:	2b20      	cmp	r3, #32
 800bf34:	d153      	bne.n	800bfde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	32ae      	adds	r2, #174	@ 0xae
 800bf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	4798      	blx	r3
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf50:	e04a      	b.n	800bfe8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	785b      	ldrb	r3, [r3, #1]
 800bf56:	2b09      	cmp	r3, #9
 800bf58:	d83b      	bhi.n	800bfd2 <USBD_StdDevReq+0xc2>
 800bf5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf60 <USBD_StdDevReq+0x50>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bfb5 	.word	0x0800bfb5
 800bf64:	0800bfc9 	.word	0x0800bfc9
 800bf68:	0800bfd3 	.word	0x0800bfd3
 800bf6c:	0800bfbf 	.word	0x0800bfbf
 800bf70:	0800bfd3 	.word	0x0800bfd3
 800bf74:	0800bf93 	.word	0x0800bf93
 800bf78:	0800bf89 	.word	0x0800bf89
 800bf7c:	0800bfd3 	.word	0x0800bfd3
 800bf80:	0800bfab 	.word	0x0800bfab
 800bf84:	0800bf9d 	.word	0x0800bf9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fa3c 	bl	800c408 <USBD_GetDescriptor>
          break;
 800bf90:	e024      	b.n	800bfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fbcb 	bl	800c730 <USBD_SetAddress>
          break;
 800bf9a:	e01f      	b.n	800bfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fc0a 	bl	800c7b8 <USBD_SetConfig>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	73fb      	strb	r3, [r7, #15]
          break;
 800bfa8:	e018      	b.n	800bfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 fcad 	bl	800c90c <USBD_GetConfig>
          break;
 800bfb2:	e013      	b.n	800bfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fcde 	bl	800c978 <USBD_GetStatus>
          break;
 800bfbc:	e00e      	b.n	800bfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fd0d 	bl	800c9e0 <USBD_SetFeature>
          break;
 800bfc6:	e009      	b.n	800bfdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fd31 	bl	800ca32 <USBD_ClrFeature>
          break;
 800bfd0:	e004      	b.n	800bfdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 fd88 	bl	800caea <USBD_CtlError>
          break;
 800bfda:	bf00      	nop
      }
      break;
 800bfdc:	e004      	b.n	800bfe8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fd82 	bl	800caea <USBD_CtlError>
      break;
 800bfe6:	bf00      	nop
  }

  return ret;
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop

0800bff4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c00a:	2b40      	cmp	r3, #64	@ 0x40
 800c00c:	d005      	beq.n	800c01a <USBD_StdItfReq+0x26>
 800c00e:	2b40      	cmp	r3, #64	@ 0x40
 800c010:	d852      	bhi.n	800c0b8 <USBD_StdItfReq+0xc4>
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <USBD_StdItfReq+0x26>
 800c016:	2b20      	cmp	r3, #32
 800c018:	d14e      	bne.n	800c0b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c020:	b2db      	uxtb	r3, r3
 800c022:	3b01      	subs	r3, #1
 800c024:	2b02      	cmp	r3, #2
 800c026:	d840      	bhi.n	800c0aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	889b      	ldrh	r3, [r3, #4]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d836      	bhi.n	800c0a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	889b      	ldrh	r3, [r3, #4]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	4619      	mov	r1, r3
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7ff fedb 	bl	800bdf6 <USBD_CoreFindIF>
 800c040:	4603      	mov	r3, r0
 800c042:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	2bff      	cmp	r3, #255	@ 0xff
 800c048:	d01d      	beq.n	800c086 <USBD_StdItfReq+0x92>
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d11a      	bne.n	800c086 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c050:	7bba      	ldrb	r2, [r7, #14]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	32ae      	adds	r2, #174	@ 0xae
 800c056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00f      	beq.n	800c080 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c060:	7bba      	ldrb	r2, [r7, #14]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c068:	7bba      	ldrb	r2, [r7, #14]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	32ae      	adds	r2, #174	@ 0xae
 800c06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	4798      	blx	r3
 800c07a:	4603      	mov	r3, r0
 800c07c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c07e:	e004      	b.n	800c08a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c080:	2303      	movs	r3, #3
 800c082:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c084:	e001      	b.n	800c08a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c086:	2303      	movs	r3, #3
 800c088:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	88db      	ldrh	r3, [r3, #6]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d110      	bne.n	800c0b4 <USBD_StdItfReq+0xc0>
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10d      	bne.n	800c0b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fdfd 	bl	800cc98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c09e:	e009      	b.n	800c0b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fd21 	bl	800caea <USBD_CtlError>
          break;
 800c0a8:	e004      	b.n	800c0b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fd1c 	bl	800caea <USBD_CtlError>
          break;
 800c0b2:	e000      	b.n	800c0b6 <USBD_StdItfReq+0xc2>
          break;
 800c0b4:	bf00      	nop
      }
      break;
 800c0b6:	e004      	b.n	800c0c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fd15 	bl	800caea <USBD_CtlError>
      break;
 800c0c0:	bf00      	nop
  }

  return ret;
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	889b      	ldrh	r3, [r3, #4]
 800c0de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0e8:	2b40      	cmp	r3, #64	@ 0x40
 800c0ea:	d007      	beq.n	800c0fc <USBD_StdEPReq+0x30>
 800c0ec:	2b40      	cmp	r3, #64	@ 0x40
 800c0ee:	f200 817f 	bhi.w	800c3f0 <USBD_StdEPReq+0x324>
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d02a      	beq.n	800c14c <USBD_StdEPReq+0x80>
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	f040 817a 	bne.w	800c3f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fe85 	bl	800be10 <USBD_CoreFindEP>
 800c106:	4603      	mov	r3, r0
 800c108:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c10a:	7b7b      	ldrb	r3, [r7, #13]
 800c10c:	2bff      	cmp	r3, #255	@ 0xff
 800c10e:	f000 8174 	beq.w	800c3fa <USBD_StdEPReq+0x32e>
 800c112:	7b7b      	ldrb	r3, [r7, #13]
 800c114:	2b00      	cmp	r3, #0
 800c116:	f040 8170 	bne.w	800c3fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c11a:	7b7a      	ldrb	r2, [r7, #13]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c122:	7b7a      	ldrb	r2, [r7, #13]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	32ae      	adds	r2, #174	@ 0xae
 800c128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 8163 	beq.w	800c3fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c134:	7b7a      	ldrb	r2, [r7, #13]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	32ae      	adds	r2, #174	@ 0xae
 800c13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	4798      	blx	r3
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c14a:	e156      	b.n	800c3fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	785b      	ldrb	r3, [r3, #1]
 800c150:	2b03      	cmp	r3, #3
 800c152:	d008      	beq.n	800c166 <USBD_StdEPReq+0x9a>
 800c154:	2b03      	cmp	r3, #3
 800c156:	f300 8145 	bgt.w	800c3e4 <USBD_StdEPReq+0x318>
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 809b 	beq.w	800c296 <USBD_StdEPReq+0x1ca>
 800c160:	2b01      	cmp	r3, #1
 800c162:	d03c      	beq.n	800c1de <USBD_StdEPReq+0x112>
 800c164:	e13e      	b.n	800c3e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d002      	beq.n	800c178 <USBD_StdEPReq+0xac>
 800c172:	2b03      	cmp	r3, #3
 800c174:	d016      	beq.n	800c1a4 <USBD_StdEPReq+0xd8>
 800c176:	e02c      	b.n	800c1d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00d      	beq.n	800c19a <USBD_StdEPReq+0xce>
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
 800c180:	2b80      	cmp	r3, #128	@ 0x80
 800c182:	d00a      	beq.n	800c19a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f003 ff8b 	bl	80100a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c18e:	2180      	movs	r1, #128	@ 0x80
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f003 ff87 	bl	80100a4 <USBD_LL_StallEP>
 800c196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c198:	e020      	b.n	800c1dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 fca4 	bl	800caea <USBD_CtlError>
              break;
 800c1a2:	e01b      	b.n	800c1dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	885b      	ldrh	r3, [r3, #2]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10e      	bne.n	800c1ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00b      	beq.n	800c1ca <USBD_StdEPReq+0xfe>
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	2b80      	cmp	r3, #128	@ 0x80
 800c1b6:	d008      	beq.n	800c1ca <USBD_StdEPReq+0xfe>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	88db      	ldrh	r3, [r3, #6]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d104      	bne.n	800c1ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f003 ff6d 	bl	80100a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fd64 	bl	800cc98 <USBD_CtlSendStatus>

              break;
 800c1d0:	e004      	b.n	800c1dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fc88 	bl	800caea <USBD_CtlError>
              break;
 800c1da:	bf00      	nop
          }
          break;
 800c1dc:	e107      	b.n	800c3ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d002      	beq.n	800c1f0 <USBD_StdEPReq+0x124>
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d016      	beq.n	800c21c <USBD_StdEPReq+0x150>
 800c1ee:	e04b      	b.n	800c288 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00d      	beq.n	800c212 <USBD_StdEPReq+0x146>
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	2b80      	cmp	r3, #128	@ 0x80
 800c1fa:	d00a      	beq.n	800c212 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f003 ff4f 	bl	80100a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c206:	2180      	movs	r1, #128	@ 0x80
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f003 ff4b 	bl	80100a4 <USBD_LL_StallEP>
 800c20e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c210:	e040      	b.n	800c294 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fc68 	bl	800caea <USBD_CtlError>
              break;
 800c21a:	e03b      	b.n	800c294 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	885b      	ldrh	r3, [r3, #2]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d136      	bne.n	800c292 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c224:	7bbb      	ldrb	r3, [r7, #14]
 800c226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d004      	beq.n	800c238 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c22e:	7bbb      	ldrb	r3, [r7, #14]
 800c230:	4619      	mov	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f003 ff55 	bl	80100e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fd2d 	bl	800cc98 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	4619      	mov	r1, r3
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff fde4 	bl	800be10 <USBD_CoreFindEP>
 800c248:	4603      	mov	r3, r0
 800c24a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c24c:	7b7b      	ldrb	r3, [r7, #13]
 800c24e:	2bff      	cmp	r3, #255	@ 0xff
 800c250:	d01f      	beq.n	800c292 <USBD_StdEPReq+0x1c6>
 800c252:	7b7b      	ldrb	r3, [r7, #13]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d11c      	bne.n	800c292 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c258:	7b7a      	ldrb	r2, [r7, #13]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c260:	7b7a      	ldrb	r2, [r7, #13]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	32ae      	adds	r2, #174	@ 0xae
 800c266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d010      	beq.n	800c292 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c270:	7b7a      	ldrb	r2, [r7, #13]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	32ae      	adds	r2, #174	@ 0xae
 800c276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	4798      	blx	r3
 800c282:	4603      	mov	r3, r0
 800c284:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c286:	e004      	b.n	800c292 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fc2d 	bl	800caea <USBD_CtlError>
              break;
 800c290:	e000      	b.n	800c294 <USBD_StdEPReq+0x1c8>
              break;
 800c292:	bf00      	nop
          }
          break;
 800c294:	e0ab      	b.n	800c3ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d002      	beq.n	800c2a8 <USBD_StdEPReq+0x1dc>
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d032      	beq.n	800c30c <USBD_StdEPReq+0x240>
 800c2a6:	e097      	b.n	800c3d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d007      	beq.n	800c2be <USBD_StdEPReq+0x1f2>
 800c2ae:	7bbb      	ldrb	r3, [r7, #14]
 800c2b0:	2b80      	cmp	r3, #128	@ 0x80
 800c2b2:	d004      	beq.n	800c2be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fc17 	bl	800caea <USBD_CtlError>
                break;
 800c2bc:	e091      	b.n	800c3e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	da0b      	bge.n	800c2de <USBD_StdEPReq+0x212>
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
 800c2c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	3310      	adds	r3, #16
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	4413      	add	r3, r2
 800c2da:	3304      	adds	r3, #4
 800c2dc:	e00b      	b.n	800c2f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2202      	movs	r2, #2
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fc6d 	bl	800cbe4 <USBD_CtlSendData>
              break;
 800c30a:	e06a      	b.n	800c3e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c30c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c310:	2b00      	cmp	r3, #0
 800c312:	da11      	bge.n	800c338 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	f003 020f 	and.w	r2, r3, #15
 800c31a:	6879      	ldr	r1, [r7, #4]
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	3324      	adds	r3, #36	@ 0x24
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d117      	bne.n	800c35e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fbda 	bl	800caea <USBD_CtlError>
                  break;
 800c336:	e054      	b.n	800c3e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	f003 020f 	and.w	r2, r3, #15
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	440b      	add	r3, r1
 800c34a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fbc7 	bl	800caea <USBD_CtlError>
                  break;
 800c35c:	e041      	b.n	800c3e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c35e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c362:	2b00      	cmp	r3, #0
 800c364:	da0b      	bge.n	800c37e <USBD_StdEPReq+0x2b2>
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c36c:	4613      	mov	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	3310      	adds	r3, #16
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	4413      	add	r3, r2
 800c37a:	3304      	adds	r3, #4
 800c37c:	e00b      	b.n	800c396 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
 800c380:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c384:	4613      	mov	r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4413      	add	r3, r2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	4413      	add	r3, r2
 800c394:	3304      	adds	r3, #4
 800c396:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c398:	7bbb      	ldrb	r3, [r7, #14]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <USBD_StdEPReq+0x2d8>
 800c39e:	7bbb      	ldrb	r3, [r7, #14]
 800c3a0:	2b80      	cmp	r3, #128	@ 0x80
 800c3a2:	d103      	bne.n	800c3ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	e00e      	b.n	800c3ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f003 feb5 	bl	8010120 <USBD_LL_IsStallEP>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d003      	beq.n	800c3c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e002      	b.n	800c3ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fc07 	bl	800cbe4 <USBD_CtlSendData>
              break;
 800c3d6:	e004      	b.n	800c3e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fb85 	bl	800caea <USBD_CtlError>
              break;
 800c3e0:	bf00      	nop
          }
          break;
 800c3e2:	e004      	b.n	800c3ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fb7f 	bl	800caea <USBD_CtlError>
          break;
 800c3ec:	bf00      	nop
      }
      break;
 800c3ee:	e005      	b.n	800c3fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fb79 	bl	800caea <USBD_CtlError>
      break;
 800c3f8:	e000      	b.n	800c3fc <USBD_StdEPReq+0x330>
      break;
 800c3fa:	bf00      	nop
  }

  return ret;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c41a:	2300      	movs	r3, #0
 800c41c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	885b      	ldrh	r3, [r3, #2]
 800c422:	0a1b      	lsrs	r3, r3, #8
 800c424:	b29b      	uxth	r3, r3
 800c426:	3b01      	subs	r3, #1
 800c428:	2b0e      	cmp	r3, #14
 800c42a:	f200 8152 	bhi.w	800c6d2 <USBD_GetDescriptor+0x2ca>
 800c42e:	a201      	add	r2, pc, #4	@ (adr r2, 800c434 <USBD_GetDescriptor+0x2c>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c4a5 	.word	0x0800c4a5
 800c438:	0800c4bd 	.word	0x0800c4bd
 800c43c:	0800c4fd 	.word	0x0800c4fd
 800c440:	0800c6d3 	.word	0x0800c6d3
 800c444:	0800c6d3 	.word	0x0800c6d3
 800c448:	0800c673 	.word	0x0800c673
 800c44c:	0800c69f 	.word	0x0800c69f
 800c450:	0800c6d3 	.word	0x0800c6d3
 800c454:	0800c6d3 	.word	0x0800c6d3
 800c458:	0800c6d3 	.word	0x0800c6d3
 800c45c:	0800c6d3 	.word	0x0800c6d3
 800c460:	0800c6d3 	.word	0x0800c6d3
 800c464:	0800c6d3 	.word	0x0800c6d3
 800c468:	0800c6d3 	.word	0x0800c6d3
 800c46c:	0800c471 	.word	0x0800c471
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c476:	69db      	ldr	r3, [r3, #28]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c482:	69db      	ldr	r3, [r3, #28]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	7c12      	ldrb	r2, [r2, #16]
 800c488:	f107 0108 	add.w	r1, r7, #8
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c492:	e126      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fb27 	bl	800caea <USBD_CtlError>
        err++;
 800c49c:	7afb      	ldrb	r3, [r7, #11]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	72fb      	strb	r3, [r7, #11]
      break;
 800c4a2:	e11e      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	7c12      	ldrb	r2, [r2, #16]
 800c4b0:	f107 0108 	add.w	r1, r7, #8
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	4798      	blx	r3
 800c4b8:	60f8      	str	r0, [r7, #12]
      break;
 800c4ba:	e112      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	7c1b      	ldrb	r3, [r3, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10d      	bne.n	800c4e0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4cc:	f107 0208 	add.w	r2, r7, #8
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4798      	blx	r3
 800c4d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	2202      	movs	r2, #2
 800c4dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c4de:	e100      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e8:	f107 0208 	add.w	r2, r7, #8
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4798      	blx	r3
 800c4f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	701a      	strb	r2, [r3, #0]
      break;
 800c4fa:	e0f2      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	885b      	ldrh	r3, [r3, #2]
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b05      	cmp	r3, #5
 800c504:	f200 80ac 	bhi.w	800c660 <USBD_GetDescriptor+0x258>
 800c508:	a201      	add	r2, pc, #4	@ (adr r2, 800c510 <USBD_GetDescriptor+0x108>)
 800c50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50e:	bf00      	nop
 800c510:	0800c529 	.word	0x0800c529
 800c514:	0800c55d 	.word	0x0800c55d
 800c518:	0800c591 	.word	0x0800c591
 800c51c:	0800c5c5 	.word	0x0800c5c5
 800c520:	0800c5f9 	.word	0x0800c5f9
 800c524:	0800c62d 	.word	0x0800c62d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00b      	beq.n	800c54c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	7c12      	ldrb	r2, [r2, #16]
 800c540:	f107 0108 	add.w	r1, r7, #8
 800c544:	4610      	mov	r0, r2
 800c546:	4798      	blx	r3
 800c548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c54a:	e091      	b.n	800c670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 facb 	bl	800caea <USBD_CtlError>
            err++;
 800c554:	7afb      	ldrb	r3, [r7, #11]
 800c556:	3301      	adds	r3, #1
 800c558:	72fb      	strb	r3, [r7, #11]
          break;
 800c55a:	e089      	b.n	800c670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00b      	beq.n	800c580 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	7c12      	ldrb	r2, [r2, #16]
 800c574:	f107 0108 	add.w	r1, r7, #8
 800c578:	4610      	mov	r0, r2
 800c57a:	4798      	blx	r3
 800c57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c57e:	e077      	b.n	800c670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fab1 	bl	800caea <USBD_CtlError>
            err++;
 800c588:	7afb      	ldrb	r3, [r7, #11]
 800c58a:	3301      	adds	r3, #1
 800c58c:	72fb      	strb	r3, [r7, #11]
          break;
 800c58e:	e06f      	b.n	800c670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	7c12      	ldrb	r2, [r2, #16]
 800c5a8:	f107 0108 	add.w	r1, r7, #8
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	4798      	blx	r3
 800c5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5b2:	e05d      	b.n	800c670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fa97 	bl	800caea <USBD_CtlError>
            err++;
 800c5bc:	7afb      	ldrb	r3, [r7, #11]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c5c2:	e055      	b.n	800c670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00b      	beq.n	800c5e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	7c12      	ldrb	r2, [r2, #16]
 800c5dc:	f107 0108 	add.w	r1, r7, #8
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4798      	blx	r3
 800c5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5e6:	e043      	b.n	800c670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fa7d 	bl	800caea <USBD_CtlError>
            err++;
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5f6:	e03b      	b.n	800c670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00b      	beq.n	800c61c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c60a:	695b      	ldr	r3, [r3, #20]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	7c12      	ldrb	r2, [r2, #16]
 800c610:	f107 0108 	add.w	r1, r7, #8
 800c614:	4610      	mov	r0, r2
 800c616:	4798      	blx	r3
 800c618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c61a:	e029      	b.n	800c670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 fa63 	bl	800caea <USBD_CtlError>
            err++;
 800c624:	7afb      	ldrb	r3, [r7, #11]
 800c626:	3301      	adds	r3, #1
 800c628:	72fb      	strb	r3, [r7, #11]
          break;
 800c62a:	e021      	b.n	800c670 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00b      	beq.n	800c650 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	7c12      	ldrb	r2, [r2, #16]
 800c644:	f107 0108 	add.w	r1, r7, #8
 800c648:	4610      	mov	r0, r2
 800c64a:	4798      	blx	r3
 800c64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c64e:	e00f      	b.n	800c670 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa49 	bl	800caea <USBD_CtlError>
            err++;
 800c658:	7afb      	ldrb	r3, [r7, #11]
 800c65a:	3301      	adds	r3, #1
 800c65c:	72fb      	strb	r3, [r7, #11]
          break;
 800c65e:	e007      	b.n	800c670 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 fa41 	bl	800caea <USBD_CtlError>
          err++;
 800c668:	7afb      	ldrb	r3, [r7, #11]
 800c66a:	3301      	adds	r3, #1
 800c66c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c66e:	bf00      	nop
      }
      break;
 800c670:	e037      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	7c1b      	ldrb	r3, [r3, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d109      	bne.n	800c68e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c682:	f107 0208 	add.w	r2, r7, #8
 800c686:	4610      	mov	r0, r2
 800c688:	4798      	blx	r3
 800c68a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c68c:	e029      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 fa2a 	bl	800caea <USBD_CtlError>
        err++;
 800c696:	7afb      	ldrb	r3, [r7, #11]
 800c698:	3301      	adds	r3, #1
 800c69a:	72fb      	strb	r3, [r7, #11]
      break;
 800c69c:	e021      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	7c1b      	ldrb	r3, [r3, #16]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10d      	bne.n	800c6c2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ae:	f107 0208 	add.w	r2, r7, #8
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	4798      	blx	r3
 800c6b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	2207      	movs	r2, #7
 800c6be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6c0:	e00f      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fa10 	bl	800caea <USBD_CtlError>
        err++;
 800c6ca:	7afb      	ldrb	r3, [r7, #11]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	72fb      	strb	r3, [r7, #11]
      break;
 800c6d0:	e007      	b.n	800c6e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fa08 	bl	800caea <USBD_CtlError>
      err++;
 800c6da:	7afb      	ldrb	r3, [r7, #11]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	72fb      	strb	r3, [r7, #11]
      break;
 800c6e0:	bf00      	nop
  }

  if (err != 0U)
 800c6e2:	7afb      	ldrb	r3, [r7, #11]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d11e      	bne.n	800c726 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	88db      	ldrh	r3, [r3, #6]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d016      	beq.n	800c71e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c6f0:	893b      	ldrh	r3, [r7, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00e      	beq.n	800c714 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	88da      	ldrh	r2, [r3, #6]
 800c6fa:	893b      	ldrh	r3, [r7, #8]
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	bf28      	it	cs
 800c700:	4613      	movcs	r3, r2
 800c702:	b29b      	uxth	r3, r3
 800c704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c706:	893b      	ldrh	r3, [r7, #8]
 800c708:	461a      	mov	r2, r3
 800c70a:	68f9      	ldr	r1, [r7, #12]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fa69 	bl	800cbe4 <USBD_CtlSendData>
 800c712:	e009      	b.n	800c728 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f9e7 	bl	800caea <USBD_CtlError>
 800c71c:	e004      	b.n	800c728 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 faba 	bl	800cc98 <USBD_CtlSendStatus>
 800c724:	e000      	b.n	800c728 <USBD_GetDescriptor+0x320>
    return;
 800c726:	bf00      	nop
  }
}
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop

0800c730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	889b      	ldrh	r3, [r3, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d131      	bne.n	800c7a6 <USBD_SetAddress+0x76>
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	88db      	ldrh	r3, [r3, #6]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d12d      	bne.n	800c7a6 <USBD_SetAddress+0x76>
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	885b      	ldrh	r3, [r3, #2]
 800c74e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c750:	d829      	bhi.n	800c7a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	885b      	ldrh	r3, [r3, #2]
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c75c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b03      	cmp	r3, #3
 800c768:	d104      	bne.n	800c774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f9bc 	bl	800caea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c772:	e01d      	b.n	800c7b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	7bfa      	ldrb	r2, [r7, #15]
 800c778:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f003 fcf9 	bl	8010178 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fa86 	bl	800cc98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d004      	beq.n	800c79c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2202      	movs	r2, #2
 800c796:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79a:	e009      	b.n	800c7b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7a4:	e004      	b.n	800c7b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f99e 	bl	800caea <USBD_CtlError>
  }
}
 800c7ae:	bf00      	nop
 800c7b0:	bf00      	nop
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	885b      	ldrh	r3, [r3, #2]
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	4b4e      	ldr	r3, [pc, #312]	@ (800c908 <USBD_SetConfig+0x150>)
 800c7ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c7d0:	4b4d      	ldr	r3, [pc, #308]	@ (800c908 <USBD_SetConfig+0x150>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d905      	bls.n	800c7e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f985 	bl	800caea <USBD_CtlError>
    return USBD_FAIL;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e08c      	b.n	800c8fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b02      	cmp	r3, #2
 800c7ee:	d002      	beq.n	800c7f6 <USBD_SetConfig+0x3e>
 800c7f0:	2b03      	cmp	r3, #3
 800c7f2:	d029      	beq.n	800c848 <USBD_SetConfig+0x90>
 800c7f4:	e075      	b.n	800c8e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c7f6:	4b44      	ldr	r3, [pc, #272]	@ (800c908 <USBD_SetConfig+0x150>)
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d020      	beq.n	800c840 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c7fe:	4b42      	ldr	r3, [pc, #264]	@ (800c908 <USBD_SetConfig+0x150>)
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c808:	4b3f      	ldr	r3, [pc, #252]	@ (800c908 <USBD_SetConfig+0x150>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7fe ffb9 	bl	800b786 <USBD_SetClassConfig>
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c818:	7bfb      	ldrb	r3, [r7, #15]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d008      	beq.n	800c830 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f962 	bl	800caea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2202      	movs	r2, #2
 800c82a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c82e:	e065      	b.n	800c8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f000 fa31 	bl	800cc98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2203      	movs	r2, #3
 800c83a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c83e:	e05d      	b.n	800c8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fa29 	bl	800cc98 <USBD_CtlSendStatus>
      break;
 800c846:	e059      	b.n	800c8fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c848:	4b2f      	ldr	r3, [pc, #188]	@ (800c908 <USBD_SetConfig+0x150>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d112      	bne.n	800c876 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2202      	movs	r2, #2
 800c854:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c858:	4b2b      	ldr	r3, [pc, #172]	@ (800c908 <USBD_SetConfig+0x150>)
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	461a      	mov	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c862:	4b29      	ldr	r3, [pc, #164]	@ (800c908 <USBD_SetConfig+0x150>)
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	4619      	mov	r1, r3
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7fe ffa8 	bl	800b7be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fa12 	bl	800cc98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c874:	e042      	b.n	800c8fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c876:	4b24      	ldr	r3, [pc, #144]	@ (800c908 <USBD_SetConfig+0x150>)
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	429a      	cmp	r2, r3
 800c882:	d02a      	beq.n	800c8da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7fe ff96 	bl	800b7be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c892:	4b1d      	ldr	r3, [pc, #116]	@ (800c908 <USBD_SetConfig+0x150>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c89c:	4b1a      	ldr	r3, [pc, #104]	@ (800c908 <USBD_SetConfig+0x150>)
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7fe ff6f 	bl	800b786 <USBD_SetClassConfig>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00f      	beq.n	800c8d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f918 	bl	800caea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7fe ff7b 	bl	800b7be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c8d0:	e014      	b.n	800c8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f9e0 	bl	800cc98 <USBD_CtlSendStatus>
      break;
 800c8d8:	e010      	b.n	800c8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f9dc 	bl	800cc98 <USBD_CtlSendStatus>
      break;
 800c8e0:	e00c      	b.n	800c8fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f900 	bl	800caea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c8ea:	4b07      	ldr	r3, [pc, #28]	@ (800c908 <USBD_SetConfig+0x150>)
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fe ff64 	bl	800b7be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8fa:	bf00      	nop
  }

  return ret;
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	240005ec 	.word	0x240005ec

0800c90c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	88db      	ldrh	r3, [r3, #6]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d004      	beq.n	800c928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f8e2 	bl	800caea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c926:	e023      	b.n	800c970 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b02      	cmp	r3, #2
 800c932:	dc02      	bgt.n	800c93a <USBD_GetConfig+0x2e>
 800c934:	2b00      	cmp	r3, #0
 800c936:	dc03      	bgt.n	800c940 <USBD_GetConfig+0x34>
 800c938:	e015      	b.n	800c966 <USBD_GetConfig+0x5a>
 800c93a:	2b03      	cmp	r3, #3
 800c93c:	d00b      	beq.n	800c956 <USBD_GetConfig+0x4a>
 800c93e:	e012      	b.n	800c966 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3308      	adds	r3, #8
 800c94a:	2201      	movs	r2, #1
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f948 	bl	800cbe4 <USBD_CtlSendData>
        break;
 800c954:	e00c      	b.n	800c970 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	3304      	adds	r3, #4
 800c95a:	2201      	movs	r2, #1
 800c95c:	4619      	mov	r1, r3
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f940 	bl	800cbe4 <USBD_CtlSendData>
        break;
 800c964:	e004      	b.n	800c970 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f8be 	bl	800caea <USBD_CtlError>
        break;
 800c96e:	bf00      	nop
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	3b01      	subs	r3, #1
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d81e      	bhi.n	800c9ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	88db      	ldrh	r3, [r3, #6]
 800c994:	2b02      	cmp	r3, #2
 800c996:	d004      	beq.n	800c9a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f8a5 	bl	800caea <USBD_CtlError>
        break;
 800c9a0:	e01a      	b.n	800c9d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d005      	beq.n	800c9be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f043 0202 	orr.w	r2, r3, #2
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f90c 	bl	800cbe4 <USBD_CtlSendData>
      break;
 800c9cc:	e004      	b.n	800c9d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f88a 	bl	800caea <USBD_CtlError>
      break;
 800c9d6:	bf00      	nop
  }
}
 800c9d8:	bf00      	nop
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	885b      	ldrh	r3, [r3, #2]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d107      	bne.n	800ca02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 f94c 	bl	800cc98 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ca00:	e013      	b.n	800ca2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	885b      	ldrh	r3, [r3, #2]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d10b      	bne.n	800ca22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	889b      	ldrh	r3, [r3, #4]
 800ca0e:	0a1b      	lsrs	r3, r3, #8
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f93c 	bl	800cc98 <USBD_CtlSendStatus>
}
 800ca20:	e003      	b.n	800ca2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 f860 	bl	800caea <USBD_CtlError>
}
 800ca2a:	bf00      	nop
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b082      	sub	sp, #8
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	3b01      	subs	r3, #1
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d80b      	bhi.n	800ca62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	885b      	ldrh	r3, [r3, #2]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d10c      	bne.n	800ca6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f91c 	bl	800cc98 <USBD_CtlSendStatus>
      }
      break;
 800ca60:	e004      	b.n	800ca6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 f840 	bl	800caea <USBD_CtlError>
      break;
 800ca6a:	e000      	b.n	800ca6e <USBD_ClrFeature+0x3c>
      break;
 800ca6c:	bf00      	nop
  }
}
 800ca6e:	bf00      	nop
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	781a      	ldrb	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	781a      	ldrb	r2, [r3, #0]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7ff fa16 	bl	800bed2 <SWAPBYTE>
 800caa6:	4603      	mov	r3, r0
 800caa8:	461a      	mov	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3301      	adds	r3, #1
 800cab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	3301      	adds	r3, #1
 800cab8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f7ff fa09 	bl	800bed2 <SWAPBYTE>
 800cac0:	4603      	mov	r3, r0
 800cac2:	461a      	mov	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	3301      	adds	r3, #1
 800cacc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3301      	adds	r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f7ff f9fc 	bl	800bed2 <SWAPBYTE>
 800cada:	4603      	mov	r3, r0
 800cadc:	461a      	mov	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	80da      	strh	r2, [r3, #6]
}
 800cae2:	bf00      	nop
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b082      	sub	sp, #8
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800caf4:	2180      	movs	r1, #128	@ 0x80
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f003 fad4 	bl	80100a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cafc:	2100      	movs	r1, #0
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f003 fad0 	bl	80100a4 <USBD_LL_StallEP>
}
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d042      	beq.n	800cba8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cb26:	6938      	ldr	r0, [r7, #16]
 800cb28:	f000 f842 	bl	800cbb0 <USBD_GetLen>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	3301      	adds	r3, #1
 800cb30:	005b      	lsls	r3, r3, #1
 800cb32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb36:	d808      	bhi.n	800cb4a <USBD_GetString+0x3e>
 800cb38:	6938      	ldr	r0, [r7, #16]
 800cb3a:	f000 f839 	bl	800cbb0 <USBD_GetLen>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	3301      	adds	r3, #1
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	e001      	b.n	800cb4e <USBD_GetString+0x42>
 800cb4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	4413      	add	r3, r2
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	7812      	ldrb	r2, [r2, #0]
 800cb5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
 800cb60:	3301      	adds	r3, #1
 800cb62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	4413      	add	r3, r2
 800cb6a:	2203      	movs	r2, #3
 800cb6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb6e:	7dfb      	ldrb	r3, [r7, #23]
 800cb70:	3301      	adds	r3, #1
 800cb72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb74:	e013      	b.n	800cb9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	7812      	ldrb	r2, [r2, #0]
 800cb80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	3301      	adds	r3, #1
 800cb86:	613b      	str	r3, [r7, #16]
    idx++;
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	4413      	add	r3, r2
 800cb94:	2200      	movs	r2, #0
 800cb96:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb98:	7dfb      	ldrb	r3, [r7, #23]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1e7      	bne.n	800cb76 <USBD_GetString+0x6a>
 800cba6:	e000      	b.n	800cbaa <USBD_GetString+0x9e>
    return;
 800cba8:	bf00      	nop
  }
}
 800cbaa:	3718      	adds	r7, #24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cbc0:	e005      	b.n	800cbce <USBD_GetLen+0x1e>
  {
    len++;
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1f5      	bne.n	800cbc2 <USBD_GetLen+0x12>
  }

  return len;
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	2100      	movs	r1, #0
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f003 fad3 	bl	80101b6 <USBD_LL_Transmit>

  return USBD_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	68ba      	ldr	r2, [r7, #8]
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f003 fac2 	bl	80101b6 <USBD_LL_Transmit>

  return USBD_OK;
 800cc32:	2300      	movs	r3, #0
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2203      	movs	r2, #3
 800cc4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	2100      	movs	r1, #0
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f003 fac6 	bl	80101f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	60b9      	str	r1, [r7, #8]
 800cc80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	2100      	movs	r1, #0
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f003 fab5 	bl	80101f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2204      	movs	r2, #4
 800cca4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cca8:	2300      	movs	r3, #0
 800ccaa:	2200      	movs	r2, #0
 800ccac:	2100      	movs	r1, #0
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f003 fa81 	bl	80101b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b082      	sub	sp, #8
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2205      	movs	r2, #5
 800ccca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccce:	2300      	movs	r3, #0
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f003 fa8f 	bl	80101f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <__NVIC_SetPriority>:
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4603      	mov	r3, r0
 800ccec:	6039      	str	r1, [r7, #0]
 800ccee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ccf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	db0a      	blt.n	800cd0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	490c      	ldr	r1, [pc, #48]	@ (800cd30 <__NVIC_SetPriority+0x4c>)
 800ccfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd02:	0112      	lsls	r2, r2, #4
 800cd04:	b2d2      	uxtb	r2, r2
 800cd06:	440b      	add	r3, r1
 800cd08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cd0c:	e00a      	b.n	800cd24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	4908      	ldr	r1, [pc, #32]	@ (800cd34 <__NVIC_SetPriority+0x50>)
 800cd14:	88fb      	ldrh	r3, [r7, #6]
 800cd16:	f003 030f 	and.w	r3, r3, #15
 800cd1a:	3b04      	subs	r3, #4
 800cd1c:	0112      	lsls	r2, r2, #4
 800cd1e:	b2d2      	uxtb	r2, r2
 800cd20:	440b      	add	r3, r1
 800cd22:	761a      	strb	r2, [r3, #24]
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	e000e100 	.word	0xe000e100
 800cd34:	e000ed00 	.word	0xe000ed00

0800cd38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cd3c:	4b05      	ldr	r3, [pc, #20]	@ (800cd54 <SysTick_Handler+0x1c>)
 800cd3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cd40:	f001 fd18 	bl	800e774 <xTaskGetSchedulerState>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d001      	beq.n	800cd4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cd4a:	f002 fb0d 	bl	800f368 <xPortSysTickHandler>
  }
}
 800cd4e:	bf00      	nop
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	e000e010 	.word	0xe000e010

0800cd58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	f06f 0004 	mvn.w	r0, #4
 800cd62:	f7ff ffbf 	bl	800cce4 <__NVIC_SetPriority>
#endif
}
 800cd66:	bf00      	nop
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd72:	f3ef 8305 	mrs	r3, IPSR
 800cd76:	603b      	str	r3, [r7, #0]
  return(result);
 800cd78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d003      	beq.n	800cd86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cd7e:	f06f 0305 	mvn.w	r3, #5
 800cd82:	607b      	str	r3, [r7, #4]
 800cd84:	e00c      	b.n	800cda0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cd86:	4b0a      	ldr	r3, [pc, #40]	@ (800cdb0 <osKernelInitialize+0x44>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d105      	bne.n	800cd9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cd8e:	4b08      	ldr	r3, [pc, #32]	@ (800cdb0 <osKernelInitialize+0x44>)
 800cd90:	2201      	movs	r2, #1
 800cd92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	607b      	str	r3, [r7, #4]
 800cd98:	e002      	b.n	800cda0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cd9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cda0:	687b      	ldr	r3, [r7, #4]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	240005f0 	.word	0x240005f0

0800cdb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdba:	f3ef 8305 	mrs	r3, IPSR
 800cdbe:	603b      	str	r3, [r7, #0]
  return(result);
 800cdc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d003      	beq.n	800cdce <osKernelStart+0x1a>
    stat = osErrorISR;
 800cdc6:	f06f 0305 	mvn.w	r3, #5
 800cdca:	607b      	str	r3, [r7, #4]
 800cdcc:	e010      	b.n	800cdf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cdce:	4b0b      	ldr	r3, [pc, #44]	@ (800cdfc <osKernelStart+0x48>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d109      	bne.n	800cdea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cdd6:	f7ff ffbf 	bl	800cd58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cdda:	4b08      	ldr	r3, [pc, #32]	@ (800cdfc <osKernelStart+0x48>)
 800cddc:	2202      	movs	r2, #2
 800cdde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cde0:	f001 f87a 	bl	800ded8 <vTaskStartScheduler>
      stat = osOK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	607b      	str	r3, [r7, #4]
 800cde8:	e002      	b.n	800cdf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cdea:	f04f 33ff 	mov.w	r3, #4294967295
 800cdee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cdf0:	687b      	ldr	r3, [r7, #4]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3708      	adds	r7, #8
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	240005f0 	.word	0x240005f0

0800ce00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08e      	sub	sp, #56	@ 0x38
 800ce04:	af04      	add	r7, sp, #16
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce10:	f3ef 8305 	mrs	r3, IPSR
 800ce14:	617b      	str	r3, [r7, #20]
  return(result);
 800ce16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d17e      	bne.n	800cf1a <osThreadNew+0x11a>
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d07b      	beq.n	800cf1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ce22:	2380      	movs	r3, #128	@ 0x80
 800ce24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ce26:	2318      	movs	r3, #24
 800ce28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ce2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d045      	beq.n	800cec6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d002      	beq.n	800ce48 <osThreadNew+0x48>
        name = attr->name;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	699b      	ldr	r3, [r3, #24]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d008      	beq.n	800ce6e <osThreadNew+0x6e>
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	2b38      	cmp	r3, #56	@ 0x38
 800ce60:	d805      	bhi.n	800ce6e <osThreadNew+0x6e>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	f003 0301 	and.w	r3, r3, #1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <osThreadNew+0x72>
        return (NULL);
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e054      	b.n	800cf1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	089b      	lsrs	r3, r3, #2
 800ce80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00e      	beq.n	800cea8 <osThreadNew+0xa8>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	2b5b      	cmp	r3, #91	@ 0x5b
 800ce90:	d90a      	bls.n	800cea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d006      	beq.n	800cea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <osThreadNew+0xa8>
        mem = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	e010      	b.n	800ceca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10c      	bne.n	800ceca <osThreadNew+0xca>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d108      	bne.n	800ceca <osThreadNew+0xca>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d104      	bne.n	800ceca <osThreadNew+0xca>
          mem = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	61bb      	str	r3, [r7, #24]
 800cec4:	e001      	b.n	800ceca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d110      	bne.n	800cef2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ced8:	9202      	str	r2, [sp, #8]
 800ceda:	9301      	str	r3, [sp, #4]
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	6a3a      	ldr	r2, [r7, #32]
 800cee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f000 fe1a 	bl	800db20 <xTaskCreateStatic>
 800ceec:	4603      	mov	r3, r0
 800ceee:	613b      	str	r3, [r7, #16]
 800cef0:	e013      	b.n	800cf1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d110      	bne.n	800cf1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	f107 0310 	add.w	r3, r7, #16
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f000 fe68 	bl	800dbe0 <xTaskCreate>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d001      	beq.n	800cf1a <osThreadNew+0x11a>
            hTask = NULL;
 800cf16:	2300      	movs	r3, #0
 800cf18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cf1a:	693b      	ldr	r3, [r7, #16]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3728      	adds	r7, #40	@ 0x28
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf2c:	f3ef 8305 	mrs	r3, IPSR
 800cf30:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d003      	beq.n	800cf40 <osDelay+0x1c>
    stat = osErrorISR;
 800cf38:	f06f 0305 	mvn.w	r3, #5
 800cf3c:	60fb      	str	r3, [r7, #12]
 800cf3e:	e007      	b.n	800cf50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d002      	beq.n	800cf50 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 ff8e 	bl	800de6c <vTaskDelay>
    }
  }

  return (stat);
 800cf50:	68fb      	ldr	r3, [r7, #12]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
	...

0800cf5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cf5c:	b480      	push	{r7}
 800cf5e:	b085      	sub	sp, #20
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4a07      	ldr	r2, [pc, #28]	@ (800cf88 <vApplicationGetIdleTaskMemory+0x2c>)
 800cf6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	4a06      	ldr	r2, [pc, #24]	@ (800cf8c <vApplicationGetIdleTaskMemory+0x30>)
 800cf72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2280      	movs	r2, #128	@ 0x80
 800cf78:	601a      	str	r2, [r3, #0]
}
 800cf7a:	bf00      	nop
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	240005f4 	.word	0x240005f4
 800cf8c:	24000650 	.word	0x24000650

0800cf90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	4a07      	ldr	r2, [pc, #28]	@ (800cfbc <vApplicationGetTimerTaskMemory+0x2c>)
 800cfa0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	4a06      	ldr	r2, [pc, #24]	@ (800cfc0 <vApplicationGetTimerTaskMemory+0x30>)
 800cfa6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cfae:	601a      	str	r2, [r3, #0]
}
 800cfb0:	bf00      	nop
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	24000850 	.word	0x24000850
 800cfc0:	240008ac 	.word	0x240008ac

0800cfc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f103 0208 	add.w	r2, r3, #8
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cfdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f103 0208 	add.w	r2, r3, #8
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f103 0208 	add.w	r2, r3, #8
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d012:	bf00      	nop
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d01e:	b480      	push	{r7}
 800d020:	b085      	sub	sp, #20
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	689a      	ldr	r2, [r3, #8]
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	683a      	ldr	r2, [r7, #0]
 800d042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	1c5a      	adds	r2, r3, #1
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	601a      	str	r2, [r3, #0]
}
 800d05a:	bf00      	nop
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07c:	d103      	bne.n	800d086 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	60fb      	str	r3, [r7, #12]
 800d084:	e00c      	b.n	800d0a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	3308      	adds	r3, #8
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	e002      	b.n	800d094 <vListInsert+0x2e>
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d2f6      	bcs.n	800d08e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	685a      	ldr	r2, [r3, #4]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	683a      	ldr	r2, [r7, #0]
 800d0ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	1c5a      	adds	r2, r3, #1
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	601a      	str	r2, [r3, #0]
}
 800d0cc:	bf00      	nop
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	6892      	ldr	r2, [r2, #8]
 800d0ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	6852      	ldr	r2, [r2, #4]
 800d0f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	429a      	cmp	r2, r3
 800d102:	d103      	bne.n	800d10c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	1e5a      	subs	r2, r3, #1
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d10b      	bne.n	800d158 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d152:	bf00      	nop
 800d154:	bf00      	nop
 800d156:	e7fd      	b.n	800d154 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d158:	f002 f876 	bl	800f248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d164:	68f9      	ldr	r1, [r7, #12]
 800d166:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d168:	fb01 f303 	mul.w	r3, r1, r3
 800d16c:	441a      	add	r2, r3
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d188:	3b01      	subs	r3, #1
 800d18a:	68f9      	ldr	r1, [r7, #12]
 800d18c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d18e:	fb01 f303 	mul.w	r3, r1, r3
 800d192:	441a      	add	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	22ff      	movs	r2, #255	@ 0xff
 800d19c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	22ff      	movs	r2, #255	@ 0xff
 800d1a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d114      	bne.n	800d1d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d01a      	beq.n	800d1ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	3310      	adds	r3, #16
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f001 f91a 	bl	800e3f4 <xTaskRemoveFromEventList>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d012      	beq.n	800d1ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1fc <xQueueGenericReset+0xd0>)
 800d1c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	e009      	b.n	800d1ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3310      	adds	r3, #16
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7ff fef1 	bl	800cfc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	3324      	adds	r3, #36	@ 0x24
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff feec 	bl	800cfc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1ec:	f002 f85e 	bl	800f2ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d1f0:	2301      	movs	r3, #1
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	e000ed04 	.word	0xe000ed04

0800d200 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d200:	b580      	push	{r7, lr}
 800d202:	b08e      	sub	sp, #56	@ 0x38
 800d204:	af02      	add	r7, sp, #8
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10b      	bne.n	800d22c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d218:	f383 8811 	msr	BASEPRI, r3
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d226:	bf00      	nop
 800d228:	bf00      	nop
 800d22a:	e7fd      	b.n	800d228 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10b      	bne.n	800d24a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d244:	bf00      	nop
 800d246:	bf00      	nop
 800d248:	e7fd      	b.n	800d246 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <xQueueGenericCreateStatic+0x56>
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <xQueueGenericCreateStatic+0x5a>
 800d256:	2301      	movs	r3, #1
 800d258:	e000      	b.n	800d25c <xQueueGenericCreateStatic+0x5c>
 800d25a:	2300      	movs	r3, #0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10b      	bne.n	800d278 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	623b      	str	r3, [r7, #32]
}
 800d272:	bf00      	nop
 800d274:	bf00      	nop
 800d276:	e7fd      	b.n	800d274 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d102      	bne.n	800d284 <xQueueGenericCreateStatic+0x84>
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <xQueueGenericCreateStatic+0x88>
 800d284:	2301      	movs	r3, #1
 800d286:	e000      	b.n	800d28a <xQueueGenericCreateStatic+0x8a>
 800d288:	2300      	movs	r3, #0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10b      	bne.n	800d2a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	61fb      	str	r3, [r7, #28]
}
 800d2a0:	bf00      	nop
 800d2a2:	bf00      	nop
 800d2a4:	e7fd      	b.n	800d2a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2a6:	2350      	movs	r3, #80	@ 0x50
 800d2a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b50      	cmp	r3, #80	@ 0x50
 800d2ae:	d00b      	beq.n	800d2c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	61bb      	str	r3, [r7, #24]
}
 800d2c2:	bf00      	nop
 800d2c4:	bf00      	nop
 800d2c6:	e7fd      	b.n	800d2c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d2c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00d      	beq.n	800d2f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	68b9      	ldr	r1, [r7, #8]
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f000 f805 	bl	800d2fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3730      	adds	r7, #48	@ 0x30
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b084      	sub	sp, #16
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	60b9      	str	r1, [r7, #8]
 800d304:	607a      	str	r2, [r7, #4]
 800d306:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d103      	bne.n	800d316 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	69ba      	ldr	r2, [r7, #24]
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	e002      	b.n	800d31c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	68ba      	ldr	r2, [r7, #8]
 800d326:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d328:	2101      	movs	r1, #1
 800d32a:	69b8      	ldr	r0, [r7, #24]
 800d32c:	f7ff fefe 	bl	800d12c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	78fa      	ldrb	r2, [r7, #3]
 800d334:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d338:	bf00      	nop
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08e      	sub	sp, #56	@ 0x38
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d34e:	2300      	movs	r3, #0
 800d350:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10b      	bne.n	800d374 <xQueueGenericSend+0x34>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d36e:	bf00      	nop
 800d370:	bf00      	nop
 800d372:	e7fd      	b.n	800d370 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d103      	bne.n	800d382 <xQueueGenericSend+0x42>
 800d37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <xQueueGenericSend+0x46>
 800d382:	2301      	movs	r3, #1
 800d384:	e000      	b.n	800d388 <xQueueGenericSend+0x48>
 800d386:	2300      	movs	r3, #0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10b      	bne.n	800d3a4 <xQueueGenericSend+0x64>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d39e:	bf00      	nop
 800d3a0:	bf00      	nop
 800d3a2:	e7fd      	b.n	800d3a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d103      	bne.n	800d3b2 <xQueueGenericSend+0x72>
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d101      	bne.n	800d3b6 <xQueueGenericSend+0x76>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e000      	b.n	800d3b8 <xQueueGenericSend+0x78>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10b      	bne.n	800d3d4 <xQueueGenericSend+0x94>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	623b      	str	r3, [r7, #32]
}
 800d3ce:	bf00      	nop
 800d3d0:	bf00      	nop
 800d3d2:	e7fd      	b.n	800d3d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3d4:	f001 f9ce 	bl	800e774 <xTaskGetSchedulerState>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d102      	bne.n	800d3e4 <xQueueGenericSend+0xa4>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <xQueueGenericSend+0xa8>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e000      	b.n	800d3ea <xQueueGenericSend+0xaa>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10b      	bne.n	800d406 <xQueueGenericSend+0xc6>
	__asm volatile
 800d3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	61fb      	str	r3, [r7, #28]
}
 800d400:	bf00      	nop
 800d402:	bf00      	nop
 800d404:	e7fd      	b.n	800d402 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d406:	f001 ff1f 	bl	800f248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d412:	429a      	cmp	r2, r3
 800d414:	d302      	bcc.n	800d41c <xQueueGenericSend+0xdc>
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d129      	bne.n	800d470 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d41c:	683a      	ldr	r2, [r7, #0]
 800d41e:	68b9      	ldr	r1, [r7, #8]
 800d420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d422:	f000 fa0f 	bl	800d844 <prvCopyDataToQueue>
 800d426:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d010      	beq.n	800d452 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d432:	3324      	adds	r3, #36	@ 0x24
 800d434:	4618      	mov	r0, r3
 800d436:	f000 ffdd 	bl	800e3f4 <xTaskRemoveFromEventList>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d013      	beq.n	800d468 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d440:	4b3f      	ldr	r3, [pc, #252]	@ (800d540 <xQueueGenericSend+0x200>)
 800d442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	e00a      	b.n	800d468 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d454:	2b00      	cmp	r3, #0
 800d456:	d007      	beq.n	800d468 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d458:	4b39      	ldr	r3, [pc, #228]	@ (800d540 <xQueueGenericSend+0x200>)
 800d45a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d45e:	601a      	str	r2, [r3, #0]
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d468:	f001 ff20 	bl	800f2ac <vPortExitCritical>
				return pdPASS;
 800d46c:	2301      	movs	r3, #1
 800d46e:	e063      	b.n	800d538 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d103      	bne.n	800d47e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d476:	f001 ff19 	bl	800f2ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d47a:	2300      	movs	r3, #0
 800d47c:	e05c      	b.n	800d538 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d480:	2b00      	cmp	r3, #0
 800d482:	d106      	bne.n	800d492 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	4618      	mov	r0, r3
 800d48a:	f001 f817 	bl	800e4bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d48e:	2301      	movs	r3, #1
 800d490:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d492:	f001 ff0b 	bl	800f2ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d496:	f000 fd87 	bl	800dfa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d49a:	f001 fed5 	bl	800f248 <vPortEnterCritical>
 800d49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4a4:	b25b      	sxtb	r3, r3
 800d4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4aa:	d103      	bne.n	800d4b4 <xQueueGenericSend+0x174>
 800d4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4ba:	b25b      	sxtb	r3, r3
 800d4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c0:	d103      	bne.n	800d4ca <xQueueGenericSend+0x18a>
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4ca:	f001 feef 	bl	800f2ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4ce:	1d3a      	adds	r2, r7, #4
 800d4d0:	f107 0314 	add.w	r3, r7, #20
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f001 f806 	bl	800e4e8 <xTaskCheckForTimeOut>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d124      	bne.n	800d52c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d4e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4e4:	f000 faa6 	bl	800da34 <prvIsQueueFull>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d018      	beq.n	800d520 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f0:	3310      	adds	r3, #16
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 ff2a 	bl	800e350 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d4fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4fe:	f000 fa31 	bl	800d964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d502:	f000 fd5f 	bl	800dfc4 <xTaskResumeAll>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f47f af7c 	bne.w	800d406 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d50e:	4b0c      	ldr	r3, [pc, #48]	@ (800d540 <xQueueGenericSend+0x200>)
 800d510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	f3bf 8f6f 	isb	sy
 800d51e:	e772      	b.n	800d406 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d522:	f000 fa1f 	bl	800d964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d526:	f000 fd4d 	bl	800dfc4 <xTaskResumeAll>
 800d52a:	e76c      	b.n	800d406 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d52c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d52e:	f000 fa19 	bl	800d964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d532:	f000 fd47 	bl	800dfc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d536:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3738      	adds	r7, #56	@ 0x38
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	e000ed04 	.word	0xe000ed04

0800d544 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b090      	sub	sp, #64	@ 0x40
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
 800d550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10b      	bne.n	800d574 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
 800d572:	e7fd      	b.n	800d570 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d103      	bne.n	800d582 <xQueueGenericSendFromISR+0x3e>
 800d57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d101      	bne.n	800d586 <xQueueGenericSendFromISR+0x42>
 800d582:	2301      	movs	r3, #1
 800d584:	e000      	b.n	800d588 <xQueueGenericSendFromISR+0x44>
 800d586:	2300      	movs	r3, #0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10b      	bne.n	800d5a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	e7fd      	b.n	800d5a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2b02      	cmp	r3, #2
 800d5a8:	d103      	bne.n	800d5b2 <xQueueGenericSendFromISR+0x6e>
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d101      	bne.n	800d5b6 <xQueueGenericSendFromISR+0x72>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e000      	b.n	800d5b8 <xQueueGenericSendFromISR+0x74>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10b      	bne.n	800d5d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	623b      	str	r3, [r7, #32]
}
 800d5ce:	bf00      	nop
 800d5d0:	bf00      	nop
 800d5d2:	e7fd      	b.n	800d5d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5d4:	f001 ff18 	bl	800f408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d5d8:	f3ef 8211 	mrs	r2, BASEPRI
 800d5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	61fa      	str	r2, [r7, #28]
 800d5ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d5f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d302      	bcc.n	800d606 <xQueueGenericSendFromISR+0xc2>
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2b02      	cmp	r3, #2
 800d604:	d12f      	bne.n	800d666 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d60c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d614:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	68b9      	ldr	r1, [r7, #8]
 800d61a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d61c:	f000 f912 	bl	800d844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d620:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d628:	d112      	bne.n	800d650 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d016      	beq.n	800d660 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d634:	3324      	adds	r3, #36	@ 0x24
 800d636:	4618      	mov	r0, r3
 800d638:	f000 fedc 	bl	800e3f4 <xTaskRemoveFromEventList>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00e      	beq.n	800d660 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00b      	beq.n	800d660 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	e007      	b.n	800d660 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d650:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d654:	3301      	adds	r3, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	b25a      	sxtb	r2, r3
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d660:	2301      	movs	r3, #1
 800d662:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d664:	e001      	b.n	800d66a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d666:	2300      	movs	r3, #0
 800d668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d674:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3740      	adds	r7, #64	@ 0x40
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08c      	sub	sp, #48	@ 0x30
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d68c:	2300      	movs	r3, #0
 800d68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10b      	bne.n	800d6b2 <xQueueReceive+0x32>
	__asm volatile
 800d69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69e:	f383 8811 	msr	BASEPRI, r3
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	f3bf 8f4f 	dsb	sy
 800d6aa:	623b      	str	r3, [r7, #32]
}
 800d6ac:	bf00      	nop
 800d6ae:	bf00      	nop
 800d6b0:	e7fd      	b.n	800d6ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d103      	bne.n	800d6c0 <xQueueReceive+0x40>
 800d6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d101      	bne.n	800d6c4 <xQueueReceive+0x44>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e000      	b.n	800d6c6 <xQueueReceive+0x46>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10b      	bne.n	800d6e2 <xQueueReceive+0x62>
	__asm volatile
 800d6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ce:	f383 8811 	msr	BASEPRI, r3
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	f3bf 8f4f 	dsb	sy
 800d6da:	61fb      	str	r3, [r7, #28]
}
 800d6dc:	bf00      	nop
 800d6de:	bf00      	nop
 800d6e0:	e7fd      	b.n	800d6de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6e2:	f001 f847 	bl	800e774 <xTaskGetSchedulerState>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d102      	bne.n	800d6f2 <xQueueReceive+0x72>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <xQueueReceive+0x76>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <xQueueReceive+0x78>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10b      	bne.n	800d714 <xQueueReceive+0x94>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	61bb      	str	r3, [r7, #24]
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	e7fd      	b.n	800d710 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d714:	f001 fd98 	bl	800f248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d71c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01f      	beq.n	800d764 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d724:	68b9      	ldr	r1, [r7, #8]
 800d726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d728:	f000 f8f6 	bl	800d918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72e:	1e5a      	subs	r2, r3, #1
 800d730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d732:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d736:	691b      	ldr	r3, [r3, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00f      	beq.n	800d75c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73e:	3310      	adds	r3, #16
 800d740:	4618      	mov	r0, r3
 800d742:	f000 fe57 	bl	800e3f4 <xTaskRemoveFromEventList>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d007      	beq.n	800d75c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d74c:	4b3c      	ldr	r3, [pc, #240]	@ (800d840 <xQueueReceive+0x1c0>)
 800d74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d75c:	f001 fda6 	bl	800f2ac <vPortExitCritical>
				return pdPASS;
 800d760:	2301      	movs	r3, #1
 800d762:	e069      	b.n	800d838 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d103      	bne.n	800d772 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d76a:	f001 fd9f 	bl	800f2ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d76e:	2300      	movs	r3, #0
 800d770:	e062      	b.n	800d838 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d774:	2b00      	cmp	r3, #0
 800d776:	d106      	bne.n	800d786 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d778:	f107 0310 	add.w	r3, r7, #16
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 fe9d 	bl	800e4bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d782:	2301      	movs	r3, #1
 800d784:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d786:	f001 fd91 	bl	800f2ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d78a:	f000 fc0d 	bl	800dfa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d78e:	f001 fd5b 	bl	800f248 <vPortEnterCritical>
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d798:	b25b      	sxtb	r3, r3
 800d79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79e:	d103      	bne.n	800d7a8 <xQueueReceive+0x128>
 800d7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7ae:	b25b      	sxtb	r3, r3
 800d7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b4:	d103      	bne.n	800d7be <xQueueReceive+0x13e>
 800d7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7be:	f001 fd75 	bl	800f2ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7c2:	1d3a      	adds	r2, r7, #4
 800d7c4:	f107 0310 	add.w	r3, r7, #16
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f000 fe8c 	bl	800e4e8 <xTaskCheckForTimeOut>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d123      	bne.n	800d81e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7d8:	f000 f916 	bl	800da08 <prvIsQueueEmpty>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d017      	beq.n	800d812 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e4:	3324      	adds	r3, #36	@ 0x24
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f000 fdb0 	bl	800e350 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7f2:	f000 f8b7 	bl	800d964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7f6:	f000 fbe5 	bl	800dfc4 <xTaskResumeAll>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d189      	bne.n	800d714 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d800:	4b0f      	ldr	r3, [pc, #60]	@ (800d840 <xQueueReceive+0x1c0>)
 800d802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	e780      	b.n	800d714 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d814:	f000 f8a6 	bl	800d964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d818:	f000 fbd4 	bl	800dfc4 <xTaskResumeAll>
 800d81c:	e77a      	b.n	800d714 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d81e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d820:	f000 f8a0 	bl	800d964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d824:	f000 fbce 	bl	800dfc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d82a:	f000 f8ed 	bl	800da08 <prvIsQueueEmpty>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	f43f af6f 	beq.w	800d714 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d836:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3730      	adds	r7, #48	@ 0x30
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	e000ed04 	.word	0xe000ed04

0800d844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d850:	2300      	movs	r3, #0
 800d852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d10d      	bne.n	800d87e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d14d      	bne.n	800d906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 ff9e 	bl	800e7b0 <xTaskPriorityDisinherit>
 800d874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	609a      	str	r2, [r3, #8]
 800d87c:	e043      	b.n	800d906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d119      	bne.n	800d8b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6858      	ldr	r0, [r3, #4]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d88c:	461a      	mov	r2, r3
 800d88e:	68b9      	ldr	r1, [r7, #8]
 800d890:	f005 f97f 	bl	8012b92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	685a      	ldr	r2, [r3, #4]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d89c:	441a      	add	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	685a      	ldr	r2, [r3, #4]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d32b      	bcc.n	800d906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	605a      	str	r2, [r3, #4]
 800d8b6:	e026      	b.n	800d906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68d8      	ldr	r0, [r3, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	68b9      	ldr	r1, [r7, #8]
 800d8c4:	f005 f965 	bl	8012b92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	68da      	ldr	r2, [r3, #12]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d0:	425b      	negs	r3, r3
 800d8d2:	441a      	add	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	68da      	ldr	r2, [r3, #12]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d207      	bcs.n	800d8f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	689a      	ldr	r2, [r3, #8]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ec:	425b      	negs	r3, r3
 800d8ee:	441a      	add	r2, r3
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	d105      	bne.n	800d906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	3b01      	subs	r3, #1
 800d904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	1c5a      	adds	r2, r3, #1
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d90e:	697b      	ldr	r3, [r7, #20]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d926:	2b00      	cmp	r3, #0
 800d928:	d018      	beq.n	800d95c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68da      	ldr	r2, [r3, #12]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d932:	441a      	add	r2, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	68da      	ldr	r2, [r3, #12]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	429a      	cmp	r2, r3
 800d942:	d303      	bcc.n	800d94c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	68d9      	ldr	r1, [r3, #12]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d954:	461a      	mov	r2, r3
 800d956:	6838      	ldr	r0, [r7, #0]
 800d958:	f005 f91b 	bl	8012b92 <memcpy>
	}
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d96c:	f001 fc6c 	bl	800f248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d978:	e011      	b.n	800d99e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d012      	beq.n	800d9a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	3324      	adds	r3, #36	@ 0x24
 800d986:	4618      	mov	r0, r3
 800d988:	f000 fd34 	bl	800e3f4 <xTaskRemoveFromEventList>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d992:	f000 fe0d 	bl	800e5b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	3b01      	subs	r3, #1
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d99e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	dce9      	bgt.n	800d97a <prvUnlockQueue+0x16>
 800d9a6:	e000      	b.n	800d9aa <prvUnlockQueue+0x46>
					break;
 800d9a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	22ff      	movs	r2, #255	@ 0xff
 800d9ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d9b2:	f001 fc7b 	bl	800f2ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d9b6:	f001 fc47 	bl	800f248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9c2:	e011      	b.n	800d9e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d012      	beq.n	800d9f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	3310      	adds	r3, #16
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 fd0f 	bl	800e3f4 <xTaskRemoveFromEventList>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d001      	beq.n	800d9e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d9dc:	f000 fde8 	bl	800e5b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d9e0:	7bbb      	ldrb	r3, [r7, #14]
 800d9e2:	3b01      	subs	r3, #1
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	dce9      	bgt.n	800d9c4 <prvUnlockQueue+0x60>
 800d9f0:	e000      	b.n	800d9f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d9f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	22ff      	movs	r2, #255	@ 0xff
 800d9f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d9fc:	f001 fc56 	bl	800f2ac <vPortExitCritical>
}
 800da00:	bf00      	nop
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da10:	f001 fc1a 	bl	800f248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d102      	bne.n	800da22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da1c:	2301      	movs	r3, #1
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	e001      	b.n	800da26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da22:	2300      	movs	r3, #0
 800da24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da26:	f001 fc41 	bl	800f2ac <vPortExitCritical>

	return xReturn;
 800da2a:	68fb      	ldr	r3, [r7, #12]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da3c:	f001 fc04 	bl	800f248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da48:	429a      	cmp	r2, r3
 800da4a:	d102      	bne.n	800da52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	60fb      	str	r3, [r7, #12]
 800da50:	e001      	b.n	800da56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da52:	2300      	movs	r3, #0
 800da54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da56:	f001 fc29 	bl	800f2ac <vPortExitCritical>

	return xReturn;
 800da5a:	68fb      	ldr	r3, [r7, #12]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da6e:	2300      	movs	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	e014      	b.n	800da9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da74:	4a0f      	ldr	r2, [pc, #60]	@ (800dab4 <vQueueAddToRegistry+0x50>)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10b      	bne.n	800da98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da80:	490c      	ldr	r1, [pc, #48]	@ (800dab4 <vQueueAddToRegistry+0x50>)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800da8a:	4a0a      	ldr	r2, [pc, #40]	@ (800dab4 <vQueueAddToRegistry+0x50>)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	4413      	add	r3, r2
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800da96:	e006      	b.n	800daa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3301      	adds	r3, #1
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b07      	cmp	r3, #7
 800daa2:	d9e7      	bls.n	800da74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	24000cac 	.word	0x24000cac

0800dab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dac8:	f001 fbbe 	bl	800f248 <vPortEnterCritical>
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dad2:	b25b      	sxtb	r3, r3
 800dad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad8:	d103      	bne.n	800dae2 <vQueueWaitForMessageRestricted+0x2a>
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dae8:	b25b      	sxtb	r3, r3
 800daea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daee:	d103      	bne.n	800daf8 <vQueueWaitForMessageRestricted+0x40>
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800daf8:	f001 fbd8 	bl	800f2ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db00:	2b00      	cmp	r3, #0
 800db02:	d106      	bne.n	800db12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	3324      	adds	r3, #36	@ 0x24
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	68b9      	ldr	r1, [r7, #8]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 fc45 	bl	800e39c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800db12:	6978      	ldr	r0, [r7, #20]
 800db14:	f7ff ff26 	bl	800d964 <prvUnlockQueue>
	}
 800db18:	bf00      	nop
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db20:	b580      	push	{r7, lr}
 800db22:	b08e      	sub	sp, #56	@ 0x38
 800db24:	af04      	add	r7, sp, #16
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
 800db2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10b      	bne.n	800db4c <xTaskCreateStatic+0x2c>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	623b      	str	r3, [r7, #32]
}
 800db46:	bf00      	nop
 800db48:	bf00      	nop
 800db4a:	e7fd      	b.n	800db48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d10b      	bne.n	800db6a <xTaskCreateStatic+0x4a>
	__asm volatile
 800db52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db56:	f383 8811 	msr	BASEPRI, r3
 800db5a:	f3bf 8f6f 	isb	sy
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	61fb      	str	r3, [r7, #28]
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop
 800db68:	e7fd      	b.n	800db66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db6a:	235c      	movs	r3, #92	@ 0x5c
 800db6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	2b5c      	cmp	r3, #92	@ 0x5c
 800db72:	d00b      	beq.n	800db8c <xTaskCreateStatic+0x6c>
	__asm volatile
 800db74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	61bb      	str	r3, [r7, #24]
}
 800db86:	bf00      	nop
 800db88:	bf00      	nop
 800db8a:	e7fd      	b.n	800db88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db90:	2b00      	cmp	r3, #0
 800db92:	d01e      	beq.n	800dbd2 <xTaskCreateStatic+0xb2>
 800db94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01b      	beq.n	800dbd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dba2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba6:	2202      	movs	r2, #2
 800dba8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dbac:	2300      	movs	r3, #0
 800dbae:	9303      	str	r3, [sp, #12]
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb2:	9302      	str	r3, [sp, #8]
 800dbb4:	f107 0314 	add.w	r3, r7, #20
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	68b9      	ldr	r1, [r7, #8]
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 f850 	bl	800dc6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbcc:	f000 f8de 	bl	800dd8c <prvAddNewTaskToReadyList>
 800dbd0:	e001      	b.n	800dbd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dbd6:	697b      	ldr	r3, [r7, #20]
	}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3728      	adds	r7, #40	@ 0x28
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b08c      	sub	sp, #48	@ 0x30
 800dbe4:	af04      	add	r7, sp, #16
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	603b      	str	r3, [r7, #0]
 800dbec:	4613      	mov	r3, r2
 800dbee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dbf0:	88fb      	ldrh	r3, [r7, #6]
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f001 fc49 	bl	800f48c <pvPortMalloc>
 800dbfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00e      	beq.n	800dc20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc02:	205c      	movs	r0, #92	@ 0x5c
 800dc04:	f001 fc42 	bl	800f48c <pvPortMalloc>
 800dc08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d003      	beq.n	800dc18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	631a      	str	r2, [r3, #48]	@ 0x30
 800dc16:	e005      	b.n	800dc24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc18:	6978      	ldr	r0, [r7, #20]
 800dc1a:	f001 fd05 	bl	800f628 <vPortFree>
 800dc1e:	e001      	b.n	800dc24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc20:	2300      	movs	r3, #0
 800dc22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d017      	beq.n	800dc5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc32:	88fa      	ldrh	r2, [r7, #6]
 800dc34:	2300      	movs	r3, #0
 800dc36:	9303      	str	r3, [sp, #12]
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	9302      	str	r3, [sp, #8]
 800dc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f000 f80e 	bl	800dc6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc4e:	69f8      	ldr	r0, [r7, #28]
 800dc50:	f000 f89c 	bl	800dd8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc54:	2301      	movs	r3, #1
 800dc56:	61bb      	str	r3, [r7, #24]
 800dc58:	e002      	b.n	800dc60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc5a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc60:	69bb      	ldr	r3, [r7, #24]
	}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3720      	adds	r7, #32
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b088      	sub	sp, #32
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
 800dc76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	461a      	mov	r2, r3
 800dc82:	21a5      	movs	r1, #165	@ 0xa5
 800dc84:	f004 fef5 	bl	8012a72 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc8c:	6879      	ldr	r1, [r7, #4]
 800dc8e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800dc92:	440b      	add	r3, r1
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	f023 0307 	bic.w	r3, r3, #7
 800dca0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	f003 0307 	and.w	r3, r3, #7
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00b      	beq.n	800dcc4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	617b      	str	r3, [r7, #20]
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	e7fd      	b.n	800dcc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d01f      	beq.n	800dd0a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcca:	2300      	movs	r3, #0
 800dccc:	61fb      	str	r3, [r7, #28]
 800dcce:	e012      	b.n	800dcf6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	7819      	ldrb	r1, [r3, #0]
 800dcd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	4413      	add	r3, r2
 800dcde:	3334      	adds	r3, #52	@ 0x34
 800dce0:	460a      	mov	r2, r1
 800dce2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	4413      	add	r3, r2
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d006      	beq.n	800dcfe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	61fb      	str	r3, [r7, #28]
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	2b0f      	cmp	r3, #15
 800dcfa:	d9e9      	bls.n	800dcd0 <prvInitialiseNewTask+0x66>
 800dcfc:	e000      	b.n	800dd00 <prvInitialiseNewTask+0x96>
			{
				break;
 800dcfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd08:	e003      	b.n	800dd12 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd14:	2b37      	cmp	r3, #55	@ 0x37
 800dd16:	d901      	bls.n	800dd1c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd18:	2337      	movs	r3, #55	@ 0x37
 800dd1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd20:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd26:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd30:	3304      	adds	r3, #4
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff f966 	bl	800d004 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3a:	3318      	adds	r3, #24
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7ff f961 	bl	800d004 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd56:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	68f9      	ldr	r1, [r7, #12]
 800dd6a:	69b8      	ldr	r0, [r7, #24]
 800dd6c:	f001 f93e 	bl	800efec <pxPortInitialiseStack>
 800dd70:	4602      	mov	r2, r0
 800dd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd82:	bf00      	nop
 800dd84:	3720      	adds	r7, #32
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
	...

0800dd8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd94:	f001 fa58 	bl	800f248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd98:	4b2d      	ldr	r3, [pc, #180]	@ (800de50 <prvAddNewTaskToReadyList+0xc4>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	4a2c      	ldr	r2, [pc, #176]	@ (800de50 <prvAddNewTaskToReadyList+0xc4>)
 800dda0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dda2:	4b2c      	ldr	r3, [pc, #176]	@ (800de54 <prvAddNewTaskToReadyList+0xc8>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d109      	bne.n	800ddbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ddaa:	4a2a      	ldr	r2, [pc, #168]	@ (800de54 <prvAddNewTaskToReadyList+0xc8>)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ddb0:	4b27      	ldr	r3, [pc, #156]	@ (800de50 <prvAddNewTaskToReadyList+0xc4>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d110      	bne.n	800ddda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ddb8:	f000 fc1e 	bl	800e5f8 <prvInitialiseTaskLists>
 800ddbc:	e00d      	b.n	800ddda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ddbe:	4b26      	ldr	r3, [pc, #152]	@ (800de58 <prvAddNewTaskToReadyList+0xcc>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d109      	bne.n	800ddda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ddc6:	4b23      	ldr	r3, [pc, #140]	@ (800de54 <prvAddNewTaskToReadyList+0xc8>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d802      	bhi.n	800ddda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ddd4:	4a1f      	ldr	r2, [pc, #124]	@ (800de54 <prvAddNewTaskToReadyList+0xc8>)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ddda:	4b20      	ldr	r3, [pc, #128]	@ (800de5c <prvAddNewTaskToReadyList+0xd0>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	3301      	adds	r3, #1
 800dde0:	4a1e      	ldr	r2, [pc, #120]	@ (800de5c <prvAddNewTaskToReadyList+0xd0>)
 800dde2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dde4:	4b1d      	ldr	r3, [pc, #116]	@ (800de5c <prvAddNewTaskToReadyList+0xd0>)
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddf0:	4b1b      	ldr	r3, [pc, #108]	@ (800de60 <prvAddNewTaskToReadyList+0xd4>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d903      	bls.n	800de00 <prvAddNewTaskToReadyList+0x74>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfc:	4a18      	ldr	r2, [pc, #96]	@ (800de60 <prvAddNewTaskToReadyList+0xd4>)
 800ddfe:	6013      	str	r3, [r2, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de04:	4613      	mov	r3, r2
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	4413      	add	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4a15      	ldr	r2, [pc, #84]	@ (800de64 <prvAddNewTaskToReadyList+0xd8>)
 800de0e:	441a      	add	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3304      	adds	r3, #4
 800de14:	4619      	mov	r1, r3
 800de16:	4610      	mov	r0, r2
 800de18:	f7ff f901 	bl	800d01e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de1c:	f001 fa46 	bl	800f2ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de20:	4b0d      	ldr	r3, [pc, #52]	@ (800de58 <prvAddNewTaskToReadyList+0xcc>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00e      	beq.n	800de46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de28:	4b0a      	ldr	r3, [pc, #40]	@ (800de54 <prvAddNewTaskToReadyList+0xc8>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de32:	429a      	cmp	r2, r3
 800de34:	d207      	bcs.n	800de46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de36:	4b0c      	ldr	r3, [pc, #48]	@ (800de68 <prvAddNewTaskToReadyList+0xdc>)
 800de38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de3c:	601a      	str	r2, [r3, #0]
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de46:	bf00      	nop
 800de48:	3708      	adds	r7, #8
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	240011c0 	.word	0x240011c0
 800de54:	24000cec 	.word	0x24000cec
 800de58:	240011cc 	.word	0x240011cc
 800de5c:	240011dc 	.word	0x240011dc
 800de60:	240011c8 	.word	0x240011c8
 800de64:	24000cf0 	.word	0x24000cf0
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de74:	2300      	movs	r3, #0
 800de76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d018      	beq.n	800deb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de7e:	4b14      	ldr	r3, [pc, #80]	@ (800ded0 <vTaskDelay+0x64>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d00b      	beq.n	800de9e <vTaskDelay+0x32>
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	60bb      	str	r3, [r7, #8]
}
 800de98:	bf00      	nop
 800de9a:	bf00      	nop
 800de9c:	e7fd      	b.n	800de9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800de9e:	f000 f883 	bl	800dfa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dea2:	2100      	movs	r1, #0
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fcf3 	bl	800e890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800deaa:	f000 f88b 	bl	800dfc4 <xTaskResumeAll>
 800deae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d107      	bne.n	800dec6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800deb6:	4b07      	ldr	r3, [pc, #28]	@ (800ded4 <vTaskDelay+0x68>)
 800deb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dec6:	bf00      	nop
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	240011e8 	.word	0x240011e8
 800ded4:	e000ed04 	.word	0xe000ed04

0800ded8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08a      	sub	sp, #40	@ 0x28
 800dedc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dede:	2300      	movs	r3, #0
 800dee0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dee2:	2300      	movs	r3, #0
 800dee4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dee6:	463a      	mov	r2, r7
 800dee8:	1d39      	adds	r1, r7, #4
 800deea:	f107 0308 	add.w	r3, r7, #8
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff f834 	bl	800cf5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800def4:	6839      	ldr	r1, [r7, #0]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	9202      	str	r2, [sp, #8]
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	2300      	movs	r3, #0
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	2300      	movs	r3, #0
 800df04:	460a      	mov	r2, r1
 800df06:	4922      	ldr	r1, [pc, #136]	@ (800df90 <vTaskStartScheduler+0xb8>)
 800df08:	4822      	ldr	r0, [pc, #136]	@ (800df94 <vTaskStartScheduler+0xbc>)
 800df0a:	f7ff fe09 	bl	800db20 <xTaskCreateStatic>
 800df0e:	4603      	mov	r3, r0
 800df10:	4a21      	ldr	r2, [pc, #132]	@ (800df98 <vTaskStartScheduler+0xc0>)
 800df12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df14:	4b20      	ldr	r3, [pc, #128]	@ (800df98 <vTaskStartScheduler+0xc0>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df1c:	2301      	movs	r3, #1
 800df1e:	617b      	str	r3, [r7, #20]
 800df20:	e001      	b.n	800df26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df22:	2300      	movs	r3, #0
 800df24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d102      	bne.n	800df32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800df2c:	f000 fd04 	bl	800e938 <xTimerCreateTimerTask>
 800df30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d116      	bne.n	800df66 <vTaskStartScheduler+0x8e>
	__asm volatile
 800df38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	613b      	str	r3, [r7, #16]
}
 800df4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df4c:	4b13      	ldr	r3, [pc, #76]	@ (800df9c <vTaskStartScheduler+0xc4>)
 800df4e:	f04f 32ff 	mov.w	r2, #4294967295
 800df52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df54:	4b12      	ldr	r3, [pc, #72]	@ (800dfa0 <vTaskStartScheduler+0xc8>)
 800df56:	2201      	movs	r2, #1
 800df58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df5a:	4b12      	ldr	r3, [pc, #72]	@ (800dfa4 <vTaskStartScheduler+0xcc>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df60:	f001 f8ce 	bl	800f100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df64:	e00f      	b.n	800df86 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6c:	d10b      	bne.n	800df86 <vTaskStartScheduler+0xae>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	60fb      	str	r3, [r7, #12]
}
 800df80:	bf00      	nop
 800df82:	bf00      	nop
 800df84:	e7fd      	b.n	800df82 <vTaskStartScheduler+0xaa>
}
 800df86:	bf00      	nop
 800df88:	3718      	adds	r7, #24
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	08014ff4 	.word	0x08014ff4
 800df94:	0800e5c9 	.word	0x0800e5c9
 800df98:	240011e4 	.word	0x240011e4
 800df9c:	240011e0 	.word	0x240011e0
 800dfa0:	240011cc 	.word	0x240011cc
 800dfa4:	240011c4 	.word	0x240011c4

0800dfa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dfac:	4b04      	ldr	r3, [pc, #16]	@ (800dfc0 <vTaskSuspendAll+0x18>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	4a03      	ldr	r2, [pc, #12]	@ (800dfc0 <vTaskSuspendAll+0x18>)
 800dfb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dfb6:	bf00      	nop
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	240011e8 	.word	0x240011e8

0800dfc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfd2:	4b42      	ldr	r3, [pc, #264]	@ (800e0dc <xTaskResumeAll+0x118>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10b      	bne.n	800dff2 <xTaskResumeAll+0x2e>
	__asm volatile
 800dfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	603b      	str	r3, [r7, #0]
}
 800dfec:	bf00      	nop
 800dfee:	bf00      	nop
 800dff0:	e7fd      	b.n	800dfee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dff2:	f001 f929 	bl	800f248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dff6:	4b39      	ldr	r3, [pc, #228]	@ (800e0dc <xTaskResumeAll+0x118>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	3b01      	subs	r3, #1
 800dffc:	4a37      	ldr	r2, [pc, #220]	@ (800e0dc <xTaskResumeAll+0x118>)
 800dffe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e000:	4b36      	ldr	r3, [pc, #216]	@ (800e0dc <xTaskResumeAll+0x118>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d162      	bne.n	800e0ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e008:	4b35      	ldr	r3, [pc, #212]	@ (800e0e0 <xTaskResumeAll+0x11c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d05e      	beq.n	800e0ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e010:	e02f      	b.n	800e072 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e012:	4b34      	ldr	r3, [pc, #208]	@ (800e0e4 <xTaskResumeAll+0x120>)
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3318      	adds	r3, #24
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff f85a 	bl	800d0d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	3304      	adds	r3, #4
 800e028:	4618      	mov	r0, r3
 800e02a:	f7ff f855 	bl	800d0d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e032:	4b2d      	ldr	r3, [pc, #180]	@ (800e0e8 <xTaskResumeAll+0x124>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	429a      	cmp	r2, r3
 800e038:	d903      	bls.n	800e042 <xTaskResumeAll+0x7e>
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03e:	4a2a      	ldr	r2, [pc, #168]	@ (800e0e8 <xTaskResumeAll+0x124>)
 800e040:	6013      	str	r3, [r2, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e046:	4613      	mov	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4a27      	ldr	r2, [pc, #156]	@ (800e0ec <xTaskResumeAll+0x128>)
 800e050:	441a      	add	r2, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3304      	adds	r3, #4
 800e056:	4619      	mov	r1, r3
 800e058:	4610      	mov	r0, r2
 800e05a:	f7fe ffe0 	bl	800d01e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e062:	4b23      	ldr	r3, [pc, #140]	@ (800e0f0 <xTaskResumeAll+0x12c>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e068:	429a      	cmp	r2, r3
 800e06a:	d302      	bcc.n	800e072 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e06c:	4b21      	ldr	r3, [pc, #132]	@ (800e0f4 <xTaskResumeAll+0x130>)
 800e06e:	2201      	movs	r2, #1
 800e070:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e072:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e4 <xTaskResumeAll+0x120>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1cb      	bne.n	800e012 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d001      	beq.n	800e084 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e080:	f000 fb58 	bl	800e734 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e084:	4b1c      	ldr	r3, [pc, #112]	@ (800e0f8 <xTaskResumeAll+0x134>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d010      	beq.n	800e0b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e090:	f000 f846 	bl	800e120 <xTaskIncrementTick>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e09a:	4b16      	ldr	r3, [pc, #88]	@ (800e0f4 <xTaskResumeAll+0x130>)
 800e09c:	2201      	movs	r2, #1
 800e09e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1f1      	bne.n	800e090 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e0ac:	4b12      	ldr	r3, [pc, #72]	@ (800e0f8 <xTaskResumeAll+0x134>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0b2:	4b10      	ldr	r3, [pc, #64]	@ (800e0f4 <xTaskResumeAll+0x130>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e0be:	4b0f      	ldr	r3, [pc, #60]	@ (800e0fc <xTaskResumeAll+0x138>)
 800e0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0ce:	f001 f8ed 	bl	800f2ac <vPortExitCritical>

	return xAlreadyYielded;
 800e0d2:	68bb      	ldr	r3, [r7, #8]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	240011e8 	.word	0x240011e8
 800e0e0:	240011c0 	.word	0x240011c0
 800e0e4:	24001180 	.word	0x24001180
 800e0e8:	240011c8 	.word	0x240011c8
 800e0ec:	24000cf0 	.word	0x24000cf0
 800e0f0:	24000cec 	.word	0x24000cec
 800e0f4:	240011d4 	.word	0x240011d4
 800e0f8:	240011d0 	.word	0x240011d0
 800e0fc:	e000ed04 	.word	0xe000ed04

0800e100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e106:	4b05      	ldr	r3, [pc, #20]	@ (800e11c <xTaskGetTickCount+0x1c>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e10c:	687b      	ldr	r3, [r7, #4]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	240011c4 	.word	0x240011c4

0800e120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e126:	2300      	movs	r3, #0
 800e128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e12a:	4b4f      	ldr	r3, [pc, #316]	@ (800e268 <xTaskIncrementTick+0x148>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f040 8090 	bne.w	800e254 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e134:	4b4d      	ldr	r3, [pc, #308]	@ (800e26c <xTaskIncrementTick+0x14c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3301      	adds	r3, #1
 800e13a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e13c:	4a4b      	ldr	r2, [pc, #300]	@ (800e26c <xTaskIncrementTick+0x14c>)
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d121      	bne.n	800e18c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e148:	4b49      	ldr	r3, [pc, #292]	@ (800e270 <xTaskIncrementTick+0x150>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00b      	beq.n	800e16a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	603b      	str	r3, [r7, #0]
}
 800e164:	bf00      	nop
 800e166:	bf00      	nop
 800e168:	e7fd      	b.n	800e166 <xTaskIncrementTick+0x46>
 800e16a:	4b41      	ldr	r3, [pc, #260]	@ (800e270 <xTaskIncrementTick+0x150>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	60fb      	str	r3, [r7, #12]
 800e170:	4b40      	ldr	r3, [pc, #256]	@ (800e274 <xTaskIncrementTick+0x154>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a3e      	ldr	r2, [pc, #248]	@ (800e270 <xTaskIncrementTick+0x150>)
 800e176:	6013      	str	r3, [r2, #0]
 800e178:	4a3e      	ldr	r2, [pc, #248]	@ (800e274 <xTaskIncrementTick+0x154>)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6013      	str	r3, [r2, #0]
 800e17e:	4b3e      	ldr	r3, [pc, #248]	@ (800e278 <xTaskIncrementTick+0x158>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3301      	adds	r3, #1
 800e184:	4a3c      	ldr	r2, [pc, #240]	@ (800e278 <xTaskIncrementTick+0x158>)
 800e186:	6013      	str	r3, [r2, #0]
 800e188:	f000 fad4 	bl	800e734 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e18c:	4b3b      	ldr	r3, [pc, #236]	@ (800e27c <xTaskIncrementTick+0x15c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	429a      	cmp	r2, r3
 800e194:	d349      	bcc.n	800e22a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e196:	4b36      	ldr	r3, [pc, #216]	@ (800e270 <xTaskIncrementTick+0x150>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d104      	bne.n	800e1aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a0:	4b36      	ldr	r3, [pc, #216]	@ (800e27c <xTaskIncrementTick+0x15c>)
 800e1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a6:	601a      	str	r2, [r3, #0]
					break;
 800e1a8:	e03f      	b.n	800e22a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1aa:	4b31      	ldr	r3, [pc, #196]	@ (800e270 <xTaskIncrementTick+0x150>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e1ba:	693a      	ldr	r2, [r7, #16]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d203      	bcs.n	800e1ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e1c2:	4a2e      	ldr	r2, [pc, #184]	@ (800e27c <xTaskIncrementTick+0x15c>)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1c8:	e02f      	b.n	800e22a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fe ff82 	bl	800d0d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d004      	beq.n	800e1e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	3318      	adds	r3, #24
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe ff79 	bl	800d0d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ea:	4b25      	ldr	r3, [pc, #148]	@ (800e280 <xTaskIncrementTick+0x160>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d903      	bls.n	800e1fa <xTaskIncrementTick+0xda>
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f6:	4a22      	ldr	r2, [pc, #136]	@ (800e280 <xTaskIncrementTick+0x160>)
 800e1f8:	6013      	str	r3, [r2, #0]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1fe:	4613      	mov	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4a1f      	ldr	r2, [pc, #124]	@ (800e284 <xTaskIncrementTick+0x164>)
 800e208:	441a      	add	r2, r3
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4619      	mov	r1, r3
 800e210:	4610      	mov	r0, r2
 800e212:	f7fe ff04 	bl	800d01e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e21a:	4b1b      	ldr	r3, [pc, #108]	@ (800e288 <xTaskIncrementTick+0x168>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e220:	429a      	cmp	r2, r3
 800e222:	d3b8      	bcc.n	800e196 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e224:	2301      	movs	r3, #1
 800e226:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e228:	e7b5      	b.n	800e196 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e22a:	4b17      	ldr	r3, [pc, #92]	@ (800e288 <xTaskIncrementTick+0x168>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e230:	4914      	ldr	r1, [pc, #80]	@ (800e284 <xTaskIncrementTick+0x164>)
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	440b      	add	r3, r1
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d901      	bls.n	800e246 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e242:	2301      	movs	r3, #1
 800e244:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e246:	4b11      	ldr	r3, [pc, #68]	@ (800e28c <xTaskIncrementTick+0x16c>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d007      	beq.n	800e25e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e24e:	2301      	movs	r3, #1
 800e250:	617b      	str	r3, [r7, #20]
 800e252:	e004      	b.n	800e25e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e254:	4b0e      	ldr	r3, [pc, #56]	@ (800e290 <xTaskIncrementTick+0x170>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3301      	adds	r3, #1
 800e25a:	4a0d      	ldr	r2, [pc, #52]	@ (800e290 <xTaskIncrementTick+0x170>)
 800e25c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e25e:	697b      	ldr	r3, [r7, #20]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	240011e8 	.word	0x240011e8
 800e26c:	240011c4 	.word	0x240011c4
 800e270:	24001178 	.word	0x24001178
 800e274:	2400117c 	.word	0x2400117c
 800e278:	240011d8 	.word	0x240011d8
 800e27c:	240011e0 	.word	0x240011e0
 800e280:	240011c8 	.word	0x240011c8
 800e284:	24000cf0 	.word	0x24000cf0
 800e288:	24000cec 	.word	0x24000cec
 800e28c:	240011d4 	.word	0x240011d4
 800e290:	240011d0 	.word	0x240011d0

0800e294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e29a:	4b28      	ldr	r3, [pc, #160]	@ (800e33c <vTaskSwitchContext+0xa8>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2a2:	4b27      	ldr	r3, [pc, #156]	@ (800e340 <vTaskSwitchContext+0xac>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e2a8:	e042      	b.n	800e330 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e2aa:	4b25      	ldr	r3, [pc, #148]	@ (800e340 <vTaskSwitchContext+0xac>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b0:	4b24      	ldr	r3, [pc, #144]	@ (800e344 <vTaskSwitchContext+0xb0>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	60fb      	str	r3, [r7, #12]
 800e2b6:	e011      	b.n	800e2dc <vTaskSwitchContext+0x48>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d10b      	bne.n	800e2d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800e2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	607b      	str	r3, [r7, #4]
}
 800e2d0:	bf00      	nop
 800e2d2:	bf00      	nop
 800e2d4:	e7fd      	b.n	800e2d2 <vTaskSwitchContext+0x3e>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	491a      	ldr	r1, [pc, #104]	@ (800e348 <vTaskSwitchContext+0xb4>)
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	440b      	add	r3, r1
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d0e3      	beq.n	800e2b8 <vTaskSwitchContext+0x24>
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4413      	add	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4a13      	ldr	r2, [pc, #76]	@ (800e348 <vTaskSwitchContext+0xb4>)
 800e2fc:	4413      	add	r3, r2
 800e2fe:	60bb      	str	r3, [r7, #8]
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	685a      	ldr	r2, [r3, #4]
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	605a      	str	r2, [r3, #4]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	685a      	ldr	r2, [r3, #4]
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	3308      	adds	r3, #8
 800e312:	429a      	cmp	r2, r3
 800e314:	d104      	bne.n	800e320 <vTaskSwitchContext+0x8c>
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	605a      	str	r2, [r3, #4]
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	4a09      	ldr	r2, [pc, #36]	@ (800e34c <vTaskSwitchContext+0xb8>)
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	4a06      	ldr	r2, [pc, #24]	@ (800e344 <vTaskSwitchContext+0xb0>)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6013      	str	r3, [r2, #0]
}
 800e330:	bf00      	nop
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	240011e8 	.word	0x240011e8
 800e340:	240011d4 	.word	0x240011d4
 800e344:	240011c8 	.word	0x240011c8
 800e348:	24000cf0 	.word	0x24000cf0
 800e34c:	24000cec 	.word	0x24000cec

0800e350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10b      	bne.n	800e378 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	60fb      	str	r3, [r7, #12]
}
 800e372:	bf00      	nop
 800e374:	bf00      	nop
 800e376:	e7fd      	b.n	800e374 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e378:	4b07      	ldr	r3, [pc, #28]	@ (800e398 <vTaskPlaceOnEventList+0x48>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	3318      	adds	r3, #24
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7fe fe70 	bl	800d066 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e386:	2101      	movs	r1, #1
 800e388:	6838      	ldr	r0, [r7, #0]
 800e38a:	f000 fa81 	bl	800e890 <prvAddCurrentTaskToDelayedList>
}
 800e38e:	bf00      	nop
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	24000cec 	.word	0x24000cec

0800e39c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d10b      	bne.n	800e3c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	617b      	str	r3, [r7, #20]
}
 800e3c0:	bf00      	nop
 800e3c2:	bf00      	nop
 800e3c4:	e7fd      	b.n	800e3c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3318      	adds	r3, #24
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7fe fe25 	bl	800d01e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e3da:	f04f 33ff 	mov.w	r3, #4294967295
 800e3de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e3e0:	6879      	ldr	r1, [r7, #4]
 800e3e2:	68b8      	ldr	r0, [r7, #8]
 800e3e4:	f000 fa54 	bl	800e890 <prvAddCurrentTaskToDelayedList>
	}
 800e3e8:	bf00      	nop
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	24000cec 	.word	0x24000cec

0800e3f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10b      	bne.n	800e422 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	60fb      	str	r3, [r7, #12]
}
 800e41c:	bf00      	nop
 800e41e:	bf00      	nop
 800e420:	e7fd      	b.n	800e41e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	3318      	adds	r3, #24
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fe56 	bl	800d0d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e42c:	4b1d      	ldr	r3, [pc, #116]	@ (800e4a4 <xTaskRemoveFromEventList+0xb0>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d11d      	bne.n	800e470 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	3304      	adds	r3, #4
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fe fe4d 	bl	800d0d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e442:	4b19      	ldr	r3, [pc, #100]	@ (800e4a8 <xTaskRemoveFromEventList+0xb4>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	429a      	cmp	r2, r3
 800e448:	d903      	bls.n	800e452 <xTaskRemoveFromEventList+0x5e>
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44e:	4a16      	ldr	r2, [pc, #88]	@ (800e4a8 <xTaskRemoveFromEventList+0xb4>)
 800e450:	6013      	str	r3, [r2, #0]
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e456:	4613      	mov	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4a13      	ldr	r2, [pc, #76]	@ (800e4ac <xTaskRemoveFromEventList+0xb8>)
 800e460:	441a      	add	r2, r3
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	3304      	adds	r3, #4
 800e466:	4619      	mov	r1, r3
 800e468:	4610      	mov	r0, r2
 800e46a:	f7fe fdd8 	bl	800d01e <vListInsertEnd>
 800e46e:	e005      	b.n	800e47c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	3318      	adds	r3, #24
 800e474:	4619      	mov	r1, r3
 800e476:	480e      	ldr	r0, [pc, #56]	@ (800e4b0 <xTaskRemoveFromEventList+0xbc>)
 800e478:	f7fe fdd1 	bl	800d01e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e480:	4b0c      	ldr	r3, [pc, #48]	@ (800e4b4 <xTaskRemoveFromEventList+0xc0>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e486:	429a      	cmp	r2, r3
 800e488:	d905      	bls.n	800e496 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e48a:	2301      	movs	r3, #1
 800e48c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e48e:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b8 <xTaskRemoveFromEventList+0xc4>)
 800e490:	2201      	movs	r2, #1
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	e001      	b.n	800e49a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e496:	2300      	movs	r3, #0
 800e498:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e49a:	697b      	ldr	r3, [r7, #20]
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3718      	adds	r7, #24
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	240011e8 	.word	0x240011e8
 800e4a8:	240011c8 	.word	0x240011c8
 800e4ac:	24000cf0 	.word	0x24000cf0
 800e4b0:	24001180 	.word	0x24001180
 800e4b4:	24000cec 	.word	0x24000cec
 800e4b8:	240011d4 	.word	0x240011d4

0800e4bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e4c4:	4b06      	ldr	r3, [pc, #24]	@ (800e4e0 <vTaskInternalSetTimeOutState+0x24>)
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e4cc:	4b05      	ldr	r3, [pc, #20]	@ (800e4e4 <vTaskInternalSetTimeOutState+0x28>)
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	605a      	str	r2, [r3, #4]
}
 800e4d4:	bf00      	nop
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr
 800e4e0:	240011d8 	.word	0x240011d8
 800e4e4:	240011c4 	.word	0x240011c4

0800e4e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10b      	bne.n	800e510 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	613b      	str	r3, [r7, #16]
}
 800e50a:	bf00      	nop
 800e50c:	bf00      	nop
 800e50e:	e7fd      	b.n	800e50c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d10b      	bne.n	800e52e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	60fb      	str	r3, [r7, #12]
}
 800e528:	bf00      	nop
 800e52a:	bf00      	nop
 800e52c:	e7fd      	b.n	800e52a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e52e:	f000 fe8b 	bl	800f248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e532:	4b1d      	ldr	r3, [pc, #116]	@ (800e5a8 <xTaskCheckForTimeOut+0xc0>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	69ba      	ldr	r2, [r7, #24]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54a:	d102      	bne.n	800e552 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e54c:	2300      	movs	r3, #0
 800e54e:	61fb      	str	r3, [r7, #28]
 800e550:	e023      	b.n	800e59a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	4b15      	ldr	r3, [pc, #84]	@ (800e5ac <xTaskCheckForTimeOut+0xc4>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d007      	beq.n	800e56e <xTaskCheckForTimeOut+0x86>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	429a      	cmp	r2, r3
 800e566:	d302      	bcc.n	800e56e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e568:	2301      	movs	r3, #1
 800e56a:	61fb      	str	r3, [r7, #28]
 800e56c:	e015      	b.n	800e59a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	697a      	ldr	r2, [r7, #20]
 800e574:	429a      	cmp	r2, r3
 800e576:	d20b      	bcs.n	800e590 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	1ad2      	subs	r2, r2, r3
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff ff99 	bl	800e4bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e58a:	2300      	movs	r3, #0
 800e58c:	61fb      	str	r3, [r7, #28]
 800e58e:	e004      	b.n	800e59a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2200      	movs	r2, #0
 800e594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e596:	2301      	movs	r3, #1
 800e598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e59a:	f000 fe87 	bl	800f2ac <vPortExitCritical>

	return xReturn;
 800e59e:	69fb      	ldr	r3, [r7, #28]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3720      	adds	r7, #32
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	240011c4 	.word	0x240011c4
 800e5ac:	240011d8 	.word	0x240011d8

0800e5b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e5b4:	4b03      	ldr	r3, [pc, #12]	@ (800e5c4 <vTaskMissedYield+0x14>)
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	601a      	str	r2, [r3, #0]
}
 800e5ba:	bf00      	nop
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr
 800e5c4:	240011d4 	.word	0x240011d4

0800e5c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e5d0:	f000 f852 	bl	800e678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e5d4:	4b06      	ldr	r3, [pc, #24]	@ (800e5f0 <prvIdleTask+0x28>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d9f9      	bls.n	800e5d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e5dc:	4b05      	ldr	r3, [pc, #20]	@ (800e5f4 <prvIdleTask+0x2c>)
 800e5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e5ec:	e7f0      	b.n	800e5d0 <prvIdleTask+0x8>
 800e5ee:	bf00      	nop
 800e5f0:	24000cf0 	.word	0x24000cf0
 800e5f4:	e000ed04 	.word	0xe000ed04

0800e5f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5fe:	2300      	movs	r3, #0
 800e600:	607b      	str	r3, [r7, #4]
 800e602:	e00c      	b.n	800e61e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	4613      	mov	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4413      	add	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4a12      	ldr	r2, [pc, #72]	@ (800e658 <prvInitialiseTaskLists+0x60>)
 800e610:	4413      	add	r3, r2
 800e612:	4618      	mov	r0, r3
 800e614:	f7fe fcd6 	bl	800cfc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3301      	adds	r3, #1
 800e61c:	607b      	str	r3, [r7, #4]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b37      	cmp	r3, #55	@ 0x37
 800e622:	d9ef      	bls.n	800e604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e624:	480d      	ldr	r0, [pc, #52]	@ (800e65c <prvInitialiseTaskLists+0x64>)
 800e626:	f7fe fccd 	bl	800cfc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e62a:	480d      	ldr	r0, [pc, #52]	@ (800e660 <prvInitialiseTaskLists+0x68>)
 800e62c:	f7fe fcca 	bl	800cfc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e630:	480c      	ldr	r0, [pc, #48]	@ (800e664 <prvInitialiseTaskLists+0x6c>)
 800e632:	f7fe fcc7 	bl	800cfc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e636:	480c      	ldr	r0, [pc, #48]	@ (800e668 <prvInitialiseTaskLists+0x70>)
 800e638:	f7fe fcc4 	bl	800cfc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e63c:	480b      	ldr	r0, [pc, #44]	@ (800e66c <prvInitialiseTaskLists+0x74>)
 800e63e:	f7fe fcc1 	bl	800cfc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e642:	4b0b      	ldr	r3, [pc, #44]	@ (800e670 <prvInitialiseTaskLists+0x78>)
 800e644:	4a05      	ldr	r2, [pc, #20]	@ (800e65c <prvInitialiseTaskLists+0x64>)
 800e646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e648:	4b0a      	ldr	r3, [pc, #40]	@ (800e674 <prvInitialiseTaskLists+0x7c>)
 800e64a:	4a05      	ldr	r2, [pc, #20]	@ (800e660 <prvInitialiseTaskLists+0x68>)
 800e64c:	601a      	str	r2, [r3, #0]
}
 800e64e:	bf00      	nop
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	24000cf0 	.word	0x24000cf0
 800e65c:	24001150 	.word	0x24001150
 800e660:	24001164 	.word	0x24001164
 800e664:	24001180 	.word	0x24001180
 800e668:	24001194 	.word	0x24001194
 800e66c:	240011ac 	.word	0x240011ac
 800e670:	24001178 	.word	0x24001178
 800e674:	2400117c 	.word	0x2400117c

0800e678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e67e:	e019      	b.n	800e6b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e680:	f000 fde2 	bl	800f248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e684:	4b10      	ldr	r3, [pc, #64]	@ (800e6c8 <prvCheckTasksWaitingTermination+0x50>)
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	3304      	adds	r3, #4
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe fd21 	bl	800d0d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e696:	4b0d      	ldr	r3, [pc, #52]	@ (800e6cc <prvCheckTasksWaitingTermination+0x54>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	3b01      	subs	r3, #1
 800e69c:	4a0b      	ldr	r2, [pc, #44]	@ (800e6cc <prvCheckTasksWaitingTermination+0x54>)
 800e69e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e6d0 <prvCheckTasksWaitingTermination+0x58>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	4a0a      	ldr	r2, [pc, #40]	@ (800e6d0 <prvCheckTasksWaitingTermination+0x58>)
 800e6a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e6aa:	f000 fdff 	bl	800f2ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 f810 	bl	800e6d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6b4:	4b06      	ldr	r3, [pc, #24]	@ (800e6d0 <prvCheckTasksWaitingTermination+0x58>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1e1      	bne.n	800e680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e6bc:	bf00      	nop
 800e6be:	bf00      	nop
 800e6c0:	3708      	adds	r7, #8
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	24001194 	.word	0x24001194
 800e6cc:	240011c0 	.word	0x240011c0
 800e6d0:	240011a8 	.word	0x240011a8

0800e6d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d108      	bne.n	800e6f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 ff9c 	bl	800f628 <vPortFree>
				vPortFree( pxTCB );
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 ff99 	bl	800f628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6f6:	e019      	b.n	800e72c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d103      	bne.n	800e70a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 ff90 	bl	800f628 <vPortFree>
	}
 800e708:	e010      	b.n	800e72c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e710:	2b02      	cmp	r3, #2
 800e712:	d00b      	beq.n	800e72c <prvDeleteTCB+0x58>
	__asm volatile
 800e714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e718:	f383 8811 	msr	BASEPRI, r3
 800e71c:	f3bf 8f6f 	isb	sy
 800e720:	f3bf 8f4f 	dsb	sy
 800e724:	60fb      	str	r3, [r7, #12]
}
 800e726:	bf00      	nop
 800e728:	bf00      	nop
 800e72a:	e7fd      	b.n	800e728 <prvDeleteTCB+0x54>
	}
 800e72c:	bf00      	nop
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e73a:	4b0c      	ldr	r3, [pc, #48]	@ (800e76c <prvResetNextTaskUnblockTime+0x38>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d104      	bne.n	800e74e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e744:	4b0a      	ldr	r3, [pc, #40]	@ (800e770 <prvResetNextTaskUnblockTime+0x3c>)
 800e746:	f04f 32ff 	mov.w	r2, #4294967295
 800e74a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e74c:	e008      	b.n	800e760 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e74e:	4b07      	ldr	r3, [pc, #28]	@ (800e76c <prvResetNextTaskUnblockTime+0x38>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	4a04      	ldr	r2, [pc, #16]	@ (800e770 <prvResetNextTaskUnblockTime+0x3c>)
 800e75e:	6013      	str	r3, [r2, #0]
}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	24001178 	.word	0x24001178
 800e770:	240011e0 	.word	0x240011e0

0800e774 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e77a:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a8 <xTaskGetSchedulerState+0x34>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d102      	bne.n	800e788 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e782:	2301      	movs	r3, #1
 800e784:	607b      	str	r3, [r7, #4]
 800e786:	e008      	b.n	800e79a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e788:	4b08      	ldr	r3, [pc, #32]	@ (800e7ac <xTaskGetSchedulerState+0x38>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d102      	bne.n	800e796 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e790:	2302      	movs	r3, #2
 800e792:	607b      	str	r3, [r7, #4]
 800e794:	e001      	b.n	800e79a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e796:	2300      	movs	r3, #0
 800e798:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e79a:	687b      	ldr	r3, [r7, #4]
	}
 800e79c:	4618      	mov	r0, r3
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	240011cc 	.word	0x240011cc
 800e7ac:	240011e8 	.word	0x240011e8

0800e7b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d058      	beq.n	800e878 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e7c6:	4b2f      	ldr	r3, [pc, #188]	@ (800e884 <xTaskPriorityDisinherit+0xd4>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	693a      	ldr	r2, [r7, #16]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d00b      	beq.n	800e7e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	60fb      	str	r3, [r7, #12]
}
 800e7e2:	bf00      	nop
 800e7e4:	bf00      	nop
 800e7e6:	e7fd      	b.n	800e7e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10b      	bne.n	800e808 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	60bb      	str	r3, [r7, #8]
}
 800e802:	bf00      	nop
 800e804:	bf00      	nop
 800e806:	e7fd      	b.n	800e804 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e80c:	1e5a      	subs	r2, r3, #1
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d02c      	beq.n	800e878 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e822:	2b00      	cmp	r3, #0
 800e824:	d128      	bne.n	800e878 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	3304      	adds	r3, #4
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe fc54 	bl	800d0d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e83c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e848:	4b0f      	ldr	r3, [pc, #60]	@ (800e888 <xTaskPriorityDisinherit+0xd8>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d903      	bls.n	800e858 <xTaskPriorityDisinherit+0xa8>
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e854:	4a0c      	ldr	r2, [pc, #48]	@ (800e888 <xTaskPriorityDisinherit+0xd8>)
 800e856:	6013      	str	r3, [r2, #0]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e85c:	4613      	mov	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4a09      	ldr	r2, [pc, #36]	@ (800e88c <xTaskPriorityDisinherit+0xdc>)
 800e866:	441a      	add	r2, r3
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	3304      	adds	r3, #4
 800e86c:	4619      	mov	r1, r3
 800e86e:	4610      	mov	r0, r2
 800e870:	f7fe fbd5 	bl	800d01e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e874:	2301      	movs	r3, #1
 800e876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e878:	697b      	ldr	r3, [r7, #20]
	}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3718      	adds	r7, #24
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	24000cec 	.word	0x24000cec
 800e888:	240011c8 	.word	0x240011c8
 800e88c:	24000cf0 	.word	0x24000cf0

0800e890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e89a:	4b21      	ldr	r3, [pc, #132]	@ (800e920 <prvAddCurrentTaskToDelayedList+0x90>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8a0:	4b20      	ldr	r3, [pc, #128]	@ (800e924 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fe fc16 	bl	800d0d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b2:	d10a      	bne.n	800e8ca <prvAddCurrentTaskToDelayedList+0x3a>
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d007      	beq.n	800e8ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8ba:	4b1a      	ldr	r3, [pc, #104]	@ (800e924 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3304      	adds	r3, #4
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	4819      	ldr	r0, [pc, #100]	@ (800e928 <prvAddCurrentTaskToDelayedList+0x98>)
 800e8c4:	f7fe fbab 	bl	800d01e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e8c8:	e026      	b.n	800e918 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8d2:	4b14      	ldr	r3, [pc, #80]	@ (800e924 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d209      	bcs.n	800e8f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8e2:	4b12      	ldr	r3, [pc, #72]	@ (800e92c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e924 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3304      	adds	r3, #4
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	f7fe fbb9 	bl	800d066 <vListInsert>
}
 800e8f4:	e010      	b.n	800e918 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e930 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e924 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3304      	adds	r3, #4
 800e900:	4619      	mov	r1, r3
 800e902:	4610      	mov	r0, r2
 800e904:	f7fe fbaf 	bl	800d066 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e908:	4b0a      	ldr	r3, [pc, #40]	@ (800e934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d202      	bcs.n	800e918 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e912:	4a08      	ldr	r2, [pc, #32]	@ (800e934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	6013      	str	r3, [r2, #0]
}
 800e918:	bf00      	nop
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	240011c4 	.word	0x240011c4
 800e924:	24000cec 	.word	0x24000cec
 800e928:	240011ac 	.word	0x240011ac
 800e92c:	2400117c 	.word	0x2400117c
 800e930:	24001178 	.word	0x24001178
 800e934:	240011e0 	.word	0x240011e0

0800e938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b08a      	sub	sp, #40	@ 0x28
 800e93c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e93e:	2300      	movs	r3, #0
 800e940:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e942:	f000 fb13 	bl	800ef6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e946:	4b1d      	ldr	r3, [pc, #116]	@ (800e9bc <xTimerCreateTimerTask+0x84>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d021      	beq.n	800e992 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e94e:	2300      	movs	r3, #0
 800e950:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e952:	2300      	movs	r3, #0
 800e954:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e956:	1d3a      	adds	r2, r7, #4
 800e958:	f107 0108 	add.w	r1, r7, #8
 800e95c:	f107 030c 	add.w	r3, r7, #12
 800e960:	4618      	mov	r0, r3
 800e962:	f7fe fb15 	bl	800cf90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e966:	6879      	ldr	r1, [r7, #4]
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	9202      	str	r2, [sp, #8]
 800e96e:	9301      	str	r3, [sp, #4]
 800e970:	2302      	movs	r3, #2
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	2300      	movs	r3, #0
 800e976:	460a      	mov	r2, r1
 800e978:	4911      	ldr	r1, [pc, #68]	@ (800e9c0 <xTimerCreateTimerTask+0x88>)
 800e97a:	4812      	ldr	r0, [pc, #72]	@ (800e9c4 <xTimerCreateTimerTask+0x8c>)
 800e97c:	f7ff f8d0 	bl	800db20 <xTaskCreateStatic>
 800e980:	4603      	mov	r3, r0
 800e982:	4a11      	ldr	r2, [pc, #68]	@ (800e9c8 <xTimerCreateTimerTask+0x90>)
 800e984:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e986:	4b10      	ldr	r3, [pc, #64]	@ (800e9c8 <xTimerCreateTimerTask+0x90>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e98e:	2301      	movs	r3, #1
 800e990:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10b      	bne.n	800e9b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	613b      	str	r3, [r7, #16]
}
 800e9aa:	bf00      	nop
 800e9ac:	bf00      	nop
 800e9ae:	e7fd      	b.n	800e9ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e9b0:	697b      	ldr	r3, [r7, #20]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3718      	adds	r7, #24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	2400121c 	.word	0x2400121c
 800e9c0:	08014ffc 	.word	0x08014ffc
 800e9c4:	0800eb05 	.word	0x0800eb05
 800e9c8:	24001220 	.word	0x24001220

0800e9cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08a      	sub	sp, #40	@ 0x28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10b      	bne.n	800e9fc <xTimerGenericCommand+0x30>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	623b      	str	r3, [r7, #32]
}
 800e9f6:	bf00      	nop
 800e9f8:	bf00      	nop
 800e9fa:	e7fd      	b.n	800e9f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9fc:	4b19      	ldr	r3, [pc, #100]	@ (800ea64 <xTimerGenericCommand+0x98>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d02a      	beq.n	800ea5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	2b05      	cmp	r3, #5
 800ea14:	dc18      	bgt.n	800ea48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ea16:	f7ff fead 	bl	800e774 <xTaskGetSchedulerState>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d109      	bne.n	800ea34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea20:	4b10      	ldr	r3, [pc, #64]	@ (800ea64 <xTimerGenericCommand+0x98>)
 800ea22:	6818      	ldr	r0, [r3, #0]
 800ea24:	f107 0110 	add.w	r1, r7, #16
 800ea28:	2300      	movs	r3, #0
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea2c:	f7fe fc88 	bl	800d340 <xQueueGenericSend>
 800ea30:	6278      	str	r0, [r7, #36]	@ 0x24
 800ea32:	e012      	b.n	800ea5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea34:	4b0b      	ldr	r3, [pc, #44]	@ (800ea64 <xTimerGenericCommand+0x98>)
 800ea36:	6818      	ldr	r0, [r3, #0]
 800ea38:	f107 0110 	add.w	r1, r7, #16
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f7fe fc7e 	bl	800d340 <xQueueGenericSend>
 800ea44:	6278      	str	r0, [r7, #36]	@ 0x24
 800ea46:	e008      	b.n	800ea5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea48:	4b06      	ldr	r3, [pc, #24]	@ (800ea64 <xTimerGenericCommand+0x98>)
 800ea4a:	6818      	ldr	r0, [r3, #0]
 800ea4c:	f107 0110 	add.w	r1, r7, #16
 800ea50:	2300      	movs	r3, #0
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	f7fe fd76 	bl	800d544 <xQueueGenericSendFromISR>
 800ea58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3728      	adds	r7, #40	@ 0x28
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	2400121c 	.word	0x2400121c

0800ea68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b088      	sub	sp, #32
 800ea6c:	af02      	add	r7, sp, #8
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea72:	4b23      	ldr	r3, [pc, #140]	@ (800eb00 <prvProcessExpiredTimer+0x98>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fe fb29 	bl	800d0d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea8c:	f003 0304 	and.w	r3, r3, #4
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d023      	beq.n	800eadc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	699a      	ldr	r2, [r3, #24]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	18d1      	adds	r1, r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	683a      	ldr	r2, [r7, #0]
 800eaa0:	6978      	ldr	r0, [r7, #20]
 800eaa2:	f000 f8d5 	bl	800ec50 <prvInsertTimerInActiveList>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d020      	beq.n	800eaee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eaac:	2300      	movs	r3, #0
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	2300      	movs	r3, #0
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	2100      	movs	r1, #0
 800eab6:	6978      	ldr	r0, [r7, #20]
 800eab8:	f7ff ff88 	bl	800e9cc <xTimerGenericCommand>
 800eabc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d114      	bne.n	800eaee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800eac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac8:	f383 8811 	msr	BASEPRI, r3
 800eacc:	f3bf 8f6f 	isb	sy
 800ead0:	f3bf 8f4f 	dsb	sy
 800ead4:	60fb      	str	r3, [r7, #12]
}
 800ead6:	bf00      	nop
 800ead8:	bf00      	nop
 800eada:	e7fd      	b.n	800ead8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eae2:	f023 0301 	bic.w	r3, r3, #1
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	6978      	ldr	r0, [r7, #20]
 800eaf4:	4798      	blx	r3
}
 800eaf6:	bf00      	nop
 800eaf8:	3718      	adds	r7, #24
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	24001214 	.word	0x24001214

0800eb04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb0c:	f107 0308 	add.w	r3, r7, #8
 800eb10:	4618      	mov	r0, r3
 800eb12:	f000 f859 	bl	800ebc8 <prvGetNextExpireTime>
 800eb16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f000 f805 	bl	800eb2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb22:	f000 f8d7 	bl	800ecd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb26:	bf00      	nop
 800eb28:	e7f0      	b.n	800eb0c <prvTimerTask+0x8>
	...

0800eb2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb36:	f7ff fa37 	bl	800dfa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb3a:	f107 0308 	add.w	r3, r7, #8
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 f866 	bl	800ec10 <prvSampleTimeNow>
 800eb44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d130      	bne.n	800ebae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10a      	bne.n	800eb68 <prvProcessTimerOrBlockTask+0x3c>
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d806      	bhi.n	800eb68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb5a:	f7ff fa33 	bl	800dfc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb5e:	68f9      	ldr	r1, [r7, #12]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7ff ff81 	bl	800ea68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb66:	e024      	b.n	800ebb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d008      	beq.n	800eb80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb6e:	4b13      	ldr	r3, [pc, #76]	@ (800ebbc <prvProcessTimerOrBlockTask+0x90>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d101      	bne.n	800eb7c <prvProcessTimerOrBlockTask+0x50>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e000      	b.n	800eb7e <prvProcessTimerOrBlockTask+0x52>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb80:	4b0f      	ldr	r3, [pc, #60]	@ (800ebc0 <prvProcessTimerOrBlockTask+0x94>)
 800eb82:	6818      	ldr	r0, [r3, #0]
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	f7fe ff93 	bl	800dab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb92:	f7ff fa17 	bl	800dfc4 <xTaskResumeAll>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10a      	bne.n	800ebb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb9c:	4b09      	ldr	r3, [pc, #36]	@ (800ebc4 <prvProcessTimerOrBlockTask+0x98>)
 800eb9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	f3bf 8f6f 	isb	sy
}
 800ebac:	e001      	b.n	800ebb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ebae:	f7ff fa09 	bl	800dfc4 <xTaskResumeAll>
}
 800ebb2:	bf00      	nop
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	24001218 	.word	0x24001218
 800ebc0:	2400121c 	.word	0x2400121c
 800ebc4:	e000ed04 	.word	0xe000ed04

0800ebc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ebd0:	4b0e      	ldr	r3, [pc, #56]	@ (800ec0c <prvGetNextExpireTime+0x44>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <prvGetNextExpireTime+0x16>
 800ebda:	2201      	movs	r2, #1
 800ebdc:	e000      	b.n	800ebe0 <prvGetNextExpireTime+0x18>
 800ebde:	2200      	movs	r2, #0
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d105      	bne.n	800ebf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebec:	4b07      	ldr	r3, [pc, #28]	@ (800ec0c <prvGetNextExpireTime+0x44>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	60fb      	str	r3, [r7, #12]
 800ebf6:	e001      	b.n	800ebfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	24001214 	.word	0x24001214

0800ec10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec18:	f7ff fa72 	bl	800e100 <xTaskGetTickCount>
 800ec1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec4c <prvSampleTimeNow+0x3c>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d205      	bcs.n	800ec34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec28:	f000 f93a 	bl	800eea0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	e002      	b.n	800ec3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec3a:	4a04      	ldr	r2, [pc, #16]	@ (800ec4c <prvSampleTimeNow+0x3c>)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec40:	68fb      	ldr	r3, [r7, #12]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	24001224 	.word	0x24001224

0800ec50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
 800ec5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d812      	bhi.n	800ec9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	1ad2      	subs	r2, r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d302      	bcc.n	800ec8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec84:	2301      	movs	r3, #1
 800ec86:	617b      	str	r3, [r7, #20]
 800ec88:	e01b      	b.n	800ecc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec8a:	4b10      	ldr	r3, [pc, #64]	@ (800eccc <prvInsertTimerInActiveList+0x7c>)
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3304      	adds	r3, #4
 800ec92:	4619      	mov	r1, r3
 800ec94:	4610      	mov	r0, r2
 800ec96:	f7fe f9e6 	bl	800d066 <vListInsert>
 800ec9a:	e012      	b.n	800ecc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d206      	bcs.n	800ecb2 <prvInsertTimerInActiveList+0x62>
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d302      	bcc.n	800ecb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ecac:	2301      	movs	r3, #1
 800ecae:	617b      	str	r3, [r7, #20]
 800ecb0:	e007      	b.n	800ecc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ecb2:	4b07      	ldr	r3, [pc, #28]	@ (800ecd0 <prvInsertTimerInActiveList+0x80>)
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3304      	adds	r3, #4
 800ecba:	4619      	mov	r1, r3
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	f7fe f9d2 	bl	800d066 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ecc2:	697b      	ldr	r3, [r7, #20]
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3718      	adds	r7, #24
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	24001218 	.word	0x24001218
 800ecd0:	24001214 	.word	0x24001214

0800ecd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08e      	sub	sp, #56	@ 0x38
 800ecd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecda:	e0ce      	b.n	800ee7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	da19      	bge.n	800ed16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ece2:	1d3b      	adds	r3, r7, #4
 800ece4:	3304      	adds	r3, #4
 800ece6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ece8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d10b      	bne.n	800ed06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ecee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf2:	f383 8811 	msr	BASEPRI, r3
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	f3bf 8f4f 	dsb	sy
 800ecfe:	61fb      	str	r3, [r7, #28]
}
 800ed00:	bf00      	nop
 800ed02:	bf00      	nop
 800ed04:	e7fd      	b.n	800ed02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed0c:	6850      	ldr	r0, [r2, #4]
 800ed0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed10:	6892      	ldr	r2, [r2, #8]
 800ed12:	4611      	mov	r1, r2
 800ed14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f2c0 80ae 	blt.w	800ee7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed24:	695b      	ldr	r3, [r3, #20]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d004      	beq.n	800ed34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed2c:	3304      	adds	r3, #4
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe f9d2 	bl	800d0d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed34:	463b      	mov	r3, r7
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff ff6a 	bl	800ec10 <prvSampleTimeNow>
 800ed3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b09      	cmp	r3, #9
 800ed42:	f200 8097 	bhi.w	800ee74 <prvProcessReceivedCommands+0x1a0>
 800ed46:	a201      	add	r2, pc, #4	@ (adr r2, 800ed4c <prvProcessReceivedCommands+0x78>)
 800ed48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4c:	0800ed75 	.word	0x0800ed75
 800ed50:	0800ed75 	.word	0x0800ed75
 800ed54:	0800ed75 	.word	0x0800ed75
 800ed58:	0800edeb 	.word	0x0800edeb
 800ed5c:	0800edff 	.word	0x0800edff
 800ed60:	0800ee4b 	.word	0x0800ee4b
 800ed64:	0800ed75 	.word	0x0800ed75
 800ed68:	0800ed75 	.word	0x0800ed75
 800ed6c:	0800edeb 	.word	0x0800edeb
 800ed70:	0800edff 	.word	0x0800edff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed7a:	f043 0301 	orr.w	r3, r3, #1
 800ed7e:	b2da      	uxtb	r2, r3
 800ed80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8a:	699b      	ldr	r3, [r3, #24]
 800ed8c:	18d1      	adds	r1, r2, r3
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed94:	f7ff ff5c 	bl	800ec50 <prvInsertTimerInActiveList>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d06c      	beq.n	800ee78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eda4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edac:	f003 0304 	and.w	r3, r3, #4
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d061      	beq.n	800ee78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	441a      	add	r2, r3
 800edbc:	2300      	movs	r3, #0
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	2300      	movs	r3, #0
 800edc2:	2100      	movs	r1, #0
 800edc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edc6:	f7ff fe01 	bl	800e9cc <xTimerGenericCommand>
 800edca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800edcc:	6a3b      	ldr	r3, [r7, #32]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d152      	bne.n	800ee78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	61bb      	str	r3, [r7, #24]
}
 800ede4:	bf00      	nop
 800ede6:	bf00      	nop
 800ede8:	e7fd      	b.n	800ede6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edf0:	f023 0301 	bic.w	r3, r3, #1
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800edfc:	e03d      	b.n	800ee7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee04:	f043 0301 	orr.w	r3, r3, #1
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee18:	699b      	ldr	r3, [r3, #24]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10b      	bne.n	800ee36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee22:	f383 8811 	msr	BASEPRI, r3
 800ee26:	f3bf 8f6f 	isb	sy
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	617b      	str	r3, [r7, #20]
}
 800ee30:	bf00      	nop
 800ee32:	bf00      	nop
 800ee34:	e7fd      	b.n	800ee32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee38:	699a      	ldr	r2, [r3, #24]
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3c:	18d1      	adds	r1, r2, r3
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee44:	f7ff ff04 	bl	800ec50 <prvInsertTimerInActiveList>
					break;
 800ee48:	e017      	b.n	800ee7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee50:	f003 0302 	and.w	r3, r3, #2
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d103      	bne.n	800ee60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ee58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee5a:	f000 fbe5 	bl	800f628 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee5e:	e00c      	b.n	800ee7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee66:	f023 0301 	bic.w	r3, r3, #1
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ee72:	e002      	b.n	800ee7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ee74:	bf00      	nop
 800ee76:	e000      	b.n	800ee7a <prvProcessReceivedCommands+0x1a6>
					break;
 800ee78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee7a:	4b08      	ldr	r3, [pc, #32]	@ (800ee9c <prvProcessReceivedCommands+0x1c8>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	1d39      	adds	r1, r7, #4
 800ee80:	2200      	movs	r2, #0
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fe fbfc 	bl	800d680 <xQueueReceive>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	f47f af26 	bne.w	800ecdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ee90:	bf00      	nop
 800ee92:	bf00      	nop
 800ee94:	3730      	adds	r7, #48	@ 0x30
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	2400121c 	.word	0x2400121c

0800eea0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b088      	sub	sp, #32
 800eea4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eea6:	e049      	b.n	800ef3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eea8:	4b2e      	ldr	r3, [pc, #184]	@ (800ef64 <prvSwitchTimerLists+0xc4>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeb2:	4b2c      	ldr	r3, [pc, #176]	@ (800ef64 <prvSwitchTimerLists+0xc4>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	3304      	adds	r3, #4
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe f909 	bl	800d0d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eed4:	f003 0304 	and.w	r3, r3, #4
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d02f      	beq.n	800ef3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	699b      	ldr	r3, [r3, #24]
 800eee0:	693a      	ldr	r2, [r7, #16]
 800eee2:	4413      	add	r3, r2
 800eee4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d90e      	bls.n	800ef0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eefa:	4b1a      	ldr	r3, [pc, #104]	@ (800ef64 <prvSwitchTimerLists+0xc4>)
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	3304      	adds	r3, #4
 800ef02:	4619      	mov	r1, r3
 800ef04:	4610      	mov	r0, r2
 800ef06:	f7fe f8ae 	bl	800d066 <vListInsert>
 800ef0a:	e017      	b.n	800ef3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	2300      	movs	r3, #0
 800ef12:	693a      	ldr	r2, [r7, #16]
 800ef14:	2100      	movs	r1, #0
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7ff fd58 	bl	800e9cc <xTimerGenericCommand>
 800ef1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d10b      	bne.n	800ef3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ef24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	603b      	str	r3, [r7, #0]
}
 800ef36:	bf00      	nop
 800ef38:	bf00      	nop
 800ef3a:	e7fd      	b.n	800ef38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef3c:	4b09      	ldr	r3, [pc, #36]	@ (800ef64 <prvSwitchTimerLists+0xc4>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1b0      	bne.n	800eea8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef46:	4b07      	ldr	r3, [pc, #28]	@ (800ef64 <prvSwitchTimerLists+0xc4>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef4c:	4b06      	ldr	r3, [pc, #24]	@ (800ef68 <prvSwitchTimerLists+0xc8>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a04      	ldr	r2, [pc, #16]	@ (800ef64 <prvSwitchTimerLists+0xc4>)
 800ef52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef54:	4a04      	ldr	r2, [pc, #16]	@ (800ef68 <prvSwitchTimerLists+0xc8>)
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	6013      	str	r3, [r2, #0]
}
 800ef5a:	bf00      	nop
 800ef5c:	3718      	adds	r7, #24
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	24001214 	.word	0x24001214
 800ef68:	24001218 	.word	0x24001218

0800ef6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef72:	f000 f969 	bl	800f248 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef76:	4b15      	ldr	r3, [pc, #84]	@ (800efcc <prvCheckForValidListAndQueue+0x60>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d120      	bne.n	800efc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef7e:	4814      	ldr	r0, [pc, #80]	@ (800efd0 <prvCheckForValidListAndQueue+0x64>)
 800ef80:	f7fe f820 	bl	800cfc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef84:	4813      	ldr	r0, [pc, #76]	@ (800efd4 <prvCheckForValidListAndQueue+0x68>)
 800ef86:	f7fe f81d 	bl	800cfc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef8a:	4b13      	ldr	r3, [pc, #76]	@ (800efd8 <prvCheckForValidListAndQueue+0x6c>)
 800ef8c:	4a10      	ldr	r2, [pc, #64]	@ (800efd0 <prvCheckForValidListAndQueue+0x64>)
 800ef8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef90:	4b12      	ldr	r3, [pc, #72]	@ (800efdc <prvCheckForValidListAndQueue+0x70>)
 800ef92:	4a10      	ldr	r2, [pc, #64]	@ (800efd4 <prvCheckForValidListAndQueue+0x68>)
 800ef94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef96:	2300      	movs	r3, #0
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	4b11      	ldr	r3, [pc, #68]	@ (800efe0 <prvCheckForValidListAndQueue+0x74>)
 800ef9c:	4a11      	ldr	r2, [pc, #68]	@ (800efe4 <prvCheckForValidListAndQueue+0x78>)
 800ef9e:	2110      	movs	r1, #16
 800efa0:	200a      	movs	r0, #10
 800efa2:	f7fe f92d 	bl	800d200 <xQueueGenericCreateStatic>
 800efa6:	4603      	mov	r3, r0
 800efa8:	4a08      	ldr	r2, [pc, #32]	@ (800efcc <prvCheckForValidListAndQueue+0x60>)
 800efaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800efac:	4b07      	ldr	r3, [pc, #28]	@ (800efcc <prvCheckForValidListAndQueue+0x60>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d005      	beq.n	800efc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efb4:	4b05      	ldr	r3, [pc, #20]	@ (800efcc <prvCheckForValidListAndQueue+0x60>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	490b      	ldr	r1, [pc, #44]	@ (800efe8 <prvCheckForValidListAndQueue+0x7c>)
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe fd52 	bl	800da64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efc0:	f000 f974 	bl	800f2ac <vPortExitCritical>
}
 800efc4:	bf00      	nop
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	2400121c 	.word	0x2400121c
 800efd0:	240011ec 	.word	0x240011ec
 800efd4:	24001200 	.word	0x24001200
 800efd8:	24001214 	.word	0x24001214
 800efdc:	24001218 	.word	0x24001218
 800efe0:	240012c8 	.word	0x240012c8
 800efe4:	24001228 	.word	0x24001228
 800efe8:	08015004 	.word	0x08015004

0800efec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efec:	b480      	push	{r7}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	3b04      	subs	r3, #4
 800effc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3b04      	subs	r3, #4
 800f00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	f023 0201 	bic.w	r2, r3, #1
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	3b04      	subs	r3, #4
 800f01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f01c:	4a0c      	ldr	r2, [pc, #48]	@ (800f050 <pxPortInitialiseStack+0x64>)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	3b14      	subs	r3, #20
 800f026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3b04      	subs	r3, #4
 800f032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f06f 0202 	mvn.w	r2, #2
 800f03a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	3b20      	subs	r3, #32
 800f040:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f042:	68fb      	ldr	r3, [r7, #12]
}
 800f044:	4618      	mov	r0, r3
 800f046:	3714      	adds	r7, #20
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	0800f055 	.word	0x0800f055

0800f054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f05a:	2300      	movs	r3, #0
 800f05c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f05e:	4b13      	ldr	r3, [pc, #76]	@ (800f0ac <prvTaskExitError+0x58>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f066:	d00b      	beq.n	800f080 <prvTaskExitError+0x2c>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	60fb      	str	r3, [r7, #12]
}
 800f07a:	bf00      	nop
 800f07c:	bf00      	nop
 800f07e:	e7fd      	b.n	800f07c <prvTaskExitError+0x28>
	__asm volatile
 800f080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	60bb      	str	r3, [r7, #8]
}
 800f092:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f094:	bf00      	nop
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d0fc      	beq.n	800f096 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f09c:	bf00      	nop
 800f09e:	bf00      	nop
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr
 800f0aa:	bf00      	nop
 800f0ac:	2400009c 	.word	0x2400009c

0800f0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0b0:	4b07      	ldr	r3, [pc, #28]	@ (800f0d0 <pxCurrentTCBConst2>)
 800f0b2:	6819      	ldr	r1, [r3, #0]
 800f0b4:	6808      	ldr	r0, [r1, #0]
 800f0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ba:	f380 8809 	msr	PSP, r0
 800f0be:	f3bf 8f6f 	isb	sy
 800f0c2:	f04f 0000 	mov.w	r0, #0
 800f0c6:	f380 8811 	msr	BASEPRI, r0
 800f0ca:	4770      	bx	lr
 800f0cc:	f3af 8000 	nop.w

0800f0d0 <pxCurrentTCBConst2>:
 800f0d0:	24000cec 	.word	0x24000cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0d4:	bf00      	nop
 800f0d6:	bf00      	nop

0800f0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0d8:	4808      	ldr	r0, [pc, #32]	@ (800f0fc <prvPortStartFirstTask+0x24>)
 800f0da:	6800      	ldr	r0, [r0, #0]
 800f0dc:	6800      	ldr	r0, [r0, #0]
 800f0de:	f380 8808 	msr	MSP, r0
 800f0e2:	f04f 0000 	mov.w	r0, #0
 800f0e6:	f380 8814 	msr	CONTROL, r0
 800f0ea:	b662      	cpsie	i
 800f0ec:	b661      	cpsie	f
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	df00      	svc	0
 800f0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0fa:	bf00      	nop
 800f0fc:	e000ed08 	.word	0xe000ed08

0800f100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f106:	4b47      	ldr	r3, [pc, #284]	@ (800f224 <xPortStartScheduler+0x124>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a47      	ldr	r2, [pc, #284]	@ (800f228 <xPortStartScheduler+0x128>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d10b      	bne.n	800f128 <xPortStartScheduler+0x28>
	__asm volatile
 800f110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f114:	f383 8811 	msr	BASEPRI, r3
 800f118:	f3bf 8f6f 	isb	sy
 800f11c:	f3bf 8f4f 	dsb	sy
 800f120:	613b      	str	r3, [r7, #16]
}
 800f122:	bf00      	nop
 800f124:	bf00      	nop
 800f126:	e7fd      	b.n	800f124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f128:	4b3e      	ldr	r3, [pc, #248]	@ (800f224 <xPortStartScheduler+0x124>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4a3f      	ldr	r2, [pc, #252]	@ (800f22c <xPortStartScheduler+0x12c>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d10b      	bne.n	800f14a <xPortStartScheduler+0x4a>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	60fb      	str	r3, [r7, #12]
}
 800f144:	bf00      	nop
 800f146:	bf00      	nop
 800f148:	e7fd      	b.n	800f146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f14a:	4b39      	ldr	r3, [pc, #228]	@ (800f230 <xPortStartScheduler+0x130>)
 800f14c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	b2db      	uxtb	r3, r3
 800f154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	22ff      	movs	r2, #255	@ 0xff
 800f15a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	b2db      	uxtb	r3, r3
 800f162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f164:	78fb      	ldrb	r3, [r7, #3]
 800f166:	b2db      	uxtb	r3, r3
 800f168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f16c:	b2da      	uxtb	r2, r3
 800f16e:	4b31      	ldr	r3, [pc, #196]	@ (800f234 <xPortStartScheduler+0x134>)
 800f170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f172:	4b31      	ldr	r3, [pc, #196]	@ (800f238 <xPortStartScheduler+0x138>)
 800f174:	2207      	movs	r2, #7
 800f176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f178:	e009      	b.n	800f18e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f17a:	4b2f      	ldr	r3, [pc, #188]	@ (800f238 <xPortStartScheduler+0x138>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	3b01      	subs	r3, #1
 800f180:	4a2d      	ldr	r2, [pc, #180]	@ (800f238 <xPortStartScheduler+0x138>)
 800f182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	b2db      	uxtb	r3, r3
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f18e:	78fb      	ldrb	r3, [r7, #3]
 800f190:	b2db      	uxtb	r3, r3
 800f192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f196:	2b80      	cmp	r3, #128	@ 0x80
 800f198:	d0ef      	beq.n	800f17a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f19a:	4b27      	ldr	r3, [pc, #156]	@ (800f238 <xPortStartScheduler+0x138>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f1c3 0307 	rsb	r3, r3, #7
 800f1a2:	2b04      	cmp	r3, #4
 800f1a4:	d00b      	beq.n	800f1be <xPortStartScheduler+0xbe>
	__asm volatile
 800f1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	60bb      	str	r3, [r7, #8]
}
 800f1b8:	bf00      	nop
 800f1ba:	bf00      	nop
 800f1bc:	e7fd      	b.n	800f1ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f1be:	4b1e      	ldr	r3, [pc, #120]	@ (800f238 <xPortStartScheduler+0x138>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	021b      	lsls	r3, r3, #8
 800f1c4:	4a1c      	ldr	r2, [pc, #112]	@ (800f238 <xPortStartScheduler+0x138>)
 800f1c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f1c8:	4b1b      	ldr	r3, [pc, #108]	@ (800f238 <xPortStartScheduler+0x138>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f1d0:	4a19      	ldr	r2, [pc, #100]	@ (800f238 <xPortStartScheduler+0x138>)
 800f1d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	b2da      	uxtb	r2, r3
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f1dc:	4b17      	ldr	r3, [pc, #92]	@ (800f23c <xPortStartScheduler+0x13c>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a16      	ldr	r2, [pc, #88]	@ (800f23c <xPortStartScheduler+0x13c>)
 800f1e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f1e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1e8:	4b14      	ldr	r3, [pc, #80]	@ (800f23c <xPortStartScheduler+0x13c>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a13      	ldr	r2, [pc, #76]	@ (800f23c <xPortStartScheduler+0x13c>)
 800f1ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f1f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1f4:	f000 f8da 	bl	800f3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1f8:	4b11      	ldr	r3, [pc, #68]	@ (800f240 <xPortStartScheduler+0x140>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1fe:	f000 f8f9 	bl	800f3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f202:	4b10      	ldr	r3, [pc, #64]	@ (800f244 <xPortStartScheduler+0x144>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a0f      	ldr	r2, [pc, #60]	@ (800f244 <xPortStartScheduler+0x144>)
 800f208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f20c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f20e:	f7ff ff63 	bl	800f0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f212:	f7ff f83f 	bl	800e294 <vTaskSwitchContext>
	prvTaskExitError();
 800f216:	f7ff ff1d 	bl	800f054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3718      	adds	r7, #24
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	e000ed00 	.word	0xe000ed00
 800f228:	410fc271 	.word	0x410fc271
 800f22c:	410fc270 	.word	0x410fc270
 800f230:	e000e400 	.word	0xe000e400
 800f234:	24001318 	.word	0x24001318
 800f238:	2400131c 	.word	0x2400131c
 800f23c:	e000ed20 	.word	0xe000ed20
 800f240:	2400009c 	.word	0x2400009c
 800f244:	e000ef34 	.word	0xe000ef34

0800f248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	607b      	str	r3, [r7, #4]
}
 800f260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f262:	4b10      	ldr	r3, [pc, #64]	@ (800f2a4 <vPortEnterCritical+0x5c>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	3301      	adds	r3, #1
 800f268:	4a0e      	ldr	r2, [pc, #56]	@ (800f2a4 <vPortEnterCritical+0x5c>)
 800f26a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f26c:	4b0d      	ldr	r3, [pc, #52]	@ (800f2a4 <vPortEnterCritical+0x5c>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d110      	bne.n	800f296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f274:	4b0c      	ldr	r3, [pc, #48]	@ (800f2a8 <vPortEnterCritical+0x60>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00b      	beq.n	800f296 <vPortEnterCritical+0x4e>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	603b      	str	r3, [r7, #0]
}
 800f290:	bf00      	nop
 800f292:	bf00      	nop
 800f294:	e7fd      	b.n	800f292 <vPortEnterCritical+0x4a>
	}
}
 800f296:	bf00      	nop
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	2400009c 	.word	0x2400009c
 800f2a8:	e000ed04 	.word	0xe000ed04

0800f2ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f2b2:	4b12      	ldr	r3, [pc, #72]	@ (800f2fc <vPortExitCritical+0x50>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d10b      	bne.n	800f2d2 <vPortExitCritical+0x26>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	607b      	str	r3, [r7, #4]
}
 800f2cc:	bf00      	nop
 800f2ce:	bf00      	nop
 800f2d0:	e7fd      	b.n	800f2ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f2fc <vPortExitCritical+0x50>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	4a08      	ldr	r2, [pc, #32]	@ (800f2fc <vPortExitCritical+0x50>)
 800f2da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f2dc:	4b07      	ldr	r3, [pc, #28]	@ (800f2fc <vPortExitCritical+0x50>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d105      	bne.n	800f2f0 <vPortExitCritical+0x44>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	f383 8811 	msr	BASEPRI, r3
}
 800f2ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr
 800f2fc:	2400009c 	.word	0x2400009c

0800f300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f300:	f3ef 8009 	mrs	r0, PSP
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	4b15      	ldr	r3, [pc, #84]	@ (800f360 <pxCurrentTCBConst>)
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	f01e 0f10 	tst.w	lr, #16
 800f310:	bf08      	it	eq
 800f312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31a:	6010      	str	r0, [r2, #0]
 800f31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f324:	f380 8811 	msr	BASEPRI, r0
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	f3bf 8f6f 	isb	sy
 800f330:	f7fe ffb0 	bl	800e294 <vTaskSwitchContext>
 800f334:	f04f 0000 	mov.w	r0, #0
 800f338:	f380 8811 	msr	BASEPRI, r0
 800f33c:	bc09      	pop	{r0, r3}
 800f33e:	6819      	ldr	r1, [r3, #0]
 800f340:	6808      	ldr	r0, [r1, #0]
 800f342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f346:	f01e 0f10 	tst.w	lr, #16
 800f34a:	bf08      	it	eq
 800f34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f350:	f380 8809 	msr	PSP, r0
 800f354:	f3bf 8f6f 	isb	sy
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	f3af 8000 	nop.w

0800f360 <pxCurrentTCBConst>:
 800f360:	24000cec 	.word	0x24000cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f364:	bf00      	nop
 800f366:	bf00      	nop

0800f368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
	__asm volatile
 800f36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f372:	f383 8811 	msr	BASEPRI, r3
 800f376:	f3bf 8f6f 	isb	sy
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	607b      	str	r3, [r7, #4]
}
 800f380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f382:	f7fe fecd 	bl	800e120 <xTaskIncrementTick>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d003      	beq.n	800f394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f38c:	4b06      	ldr	r3, [pc, #24]	@ (800f3a8 <xPortSysTickHandler+0x40>)
 800f38e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f392:	601a      	str	r2, [r3, #0]
 800f394:	2300      	movs	r3, #0
 800f396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	f383 8811 	msr	BASEPRI, r3
}
 800f39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f3a0:	bf00      	nop
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	e000ed04 	.word	0xe000ed04

0800f3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f3b0:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e0 <vPortSetupTimerInterrupt+0x34>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f3b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e4 <vPortSetupTimerInterrupt+0x38>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f3e8 <vPortSetupTimerInterrupt+0x3c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a0a      	ldr	r2, [pc, #40]	@ (800f3ec <vPortSetupTimerInterrupt+0x40>)
 800f3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3c6:	099b      	lsrs	r3, r3, #6
 800f3c8:	4a09      	ldr	r2, [pc, #36]	@ (800f3f0 <vPortSetupTimerInterrupt+0x44>)
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f3ce:	4b04      	ldr	r3, [pc, #16]	@ (800f3e0 <vPortSetupTimerInterrupt+0x34>)
 800f3d0:	2207      	movs	r2, #7
 800f3d2:	601a      	str	r2, [r3, #0]
}
 800f3d4:	bf00      	nop
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	e000e010 	.word	0xe000e010
 800f3e4:	e000e018 	.word	0xe000e018
 800f3e8:	24000000 	.word	0x24000000
 800f3ec:	10624dd3 	.word	0x10624dd3
 800f3f0:	e000e014 	.word	0xe000e014

0800f3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f404 <vPortEnableVFP+0x10>
 800f3f8:	6801      	ldr	r1, [r0, #0]
 800f3fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f3fe:	6001      	str	r1, [r0, #0]
 800f400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f402:	bf00      	nop
 800f404:	e000ed88 	.word	0xe000ed88

0800f408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f408:	b480      	push	{r7}
 800f40a:	b085      	sub	sp, #20
 800f40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f40e:	f3ef 8305 	mrs	r3, IPSR
 800f412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2b0f      	cmp	r3, #15
 800f418:	d915      	bls.n	800f446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f41a:	4a18      	ldr	r2, [pc, #96]	@ (800f47c <vPortValidateInterruptPriority+0x74>)
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	4413      	add	r3, r2
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f424:	4b16      	ldr	r3, [pc, #88]	@ (800f480 <vPortValidateInterruptPriority+0x78>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	7afa      	ldrb	r2, [r7, #11]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d20b      	bcs.n	800f446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f432:	f383 8811 	msr	BASEPRI, r3
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	607b      	str	r3, [r7, #4]
}
 800f440:	bf00      	nop
 800f442:	bf00      	nop
 800f444:	e7fd      	b.n	800f442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f446:	4b0f      	ldr	r3, [pc, #60]	@ (800f484 <vPortValidateInterruptPriority+0x7c>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f44e:	4b0e      	ldr	r3, [pc, #56]	@ (800f488 <vPortValidateInterruptPriority+0x80>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d90b      	bls.n	800f46e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f45a:	f383 8811 	msr	BASEPRI, r3
 800f45e:	f3bf 8f6f 	isb	sy
 800f462:	f3bf 8f4f 	dsb	sy
 800f466:	603b      	str	r3, [r7, #0]
}
 800f468:	bf00      	nop
 800f46a:	bf00      	nop
 800f46c:	e7fd      	b.n	800f46a <vPortValidateInterruptPriority+0x62>
	}
 800f46e:	bf00      	nop
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	e000e3f0 	.word	0xe000e3f0
 800f480:	24001318 	.word	0x24001318
 800f484:	e000ed0c 	.word	0xe000ed0c
 800f488:	2400131c 	.word	0x2400131c

0800f48c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b08a      	sub	sp, #40	@ 0x28
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f494:	2300      	movs	r3, #0
 800f496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f498:	f7fe fd86 	bl	800dfa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f49c:	4b5c      	ldr	r3, [pc, #368]	@ (800f610 <pvPortMalloc+0x184>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d101      	bne.n	800f4a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f4a4:	f000 f924 	bl	800f6f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800f614 <pvPortMalloc+0x188>)
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4013      	ands	r3, r2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f040 8095 	bne.w	800f5e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d01e      	beq.n	800f4fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f4bc:	2208      	movs	r2, #8
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f003 0307 	and.w	r3, r3, #7
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d015      	beq.n	800f4fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f023 0307 	bic.w	r3, r3, #7
 800f4d4:	3308      	adds	r3, #8
 800f4d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f003 0307 	and.w	r3, r3, #7
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d00b      	beq.n	800f4fa <pvPortMalloc+0x6e>
	__asm volatile
 800f4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e6:	f383 8811 	msr	BASEPRI, r3
 800f4ea:	f3bf 8f6f 	isb	sy
 800f4ee:	f3bf 8f4f 	dsb	sy
 800f4f2:	617b      	str	r3, [r7, #20]
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	e7fd      	b.n	800f4f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d06f      	beq.n	800f5e0 <pvPortMalloc+0x154>
 800f500:	4b45      	ldr	r3, [pc, #276]	@ (800f618 <pvPortMalloc+0x18c>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	429a      	cmp	r2, r3
 800f508:	d86a      	bhi.n	800f5e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f50a:	4b44      	ldr	r3, [pc, #272]	@ (800f61c <pvPortMalloc+0x190>)
 800f50c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f50e:	4b43      	ldr	r3, [pc, #268]	@ (800f61c <pvPortMalloc+0x190>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f514:	e004      	b.n	800f520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	429a      	cmp	r2, r3
 800f528:	d903      	bls.n	800f532 <pvPortMalloc+0xa6>
 800f52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1f1      	bne.n	800f516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f532:	4b37      	ldr	r3, [pc, #220]	@ (800f610 <pvPortMalloc+0x184>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f538:	429a      	cmp	r2, r3
 800f53a:	d051      	beq.n	800f5e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f53c:	6a3b      	ldr	r3, [r7, #32]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2208      	movs	r2, #8
 800f542:	4413      	add	r3, r2
 800f544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f550:	685a      	ldr	r2, [r3, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	1ad2      	subs	r2, r2, r3
 800f556:	2308      	movs	r3, #8
 800f558:	005b      	lsls	r3, r3, #1
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d920      	bls.n	800f5a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f55e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4413      	add	r3, r2
 800f564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	f003 0307 	and.w	r3, r3, #7
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00b      	beq.n	800f588 <pvPortMalloc+0xfc>
	__asm volatile
 800f570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f574:	f383 8811 	msr	BASEPRI, r3
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	613b      	str	r3, [r7, #16]
}
 800f582:	bf00      	nop
 800f584:	bf00      	nop
 800f586:	e7fd      	b.n	800f584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	1ad2      	subs	r2, r2, r3
 800f590:	69bb      	ldr	r3, [r7, #24]
 800f592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f59a:	69b8      	ldr	r0, [r7, #24]
 800f59c:	f000 f90a 	bl	800f7b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5a0:	4b1d      	ldr	r3, [pc, #116]	@ (800f618 <pvPortMalloc+0x18c>)
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	1ad3      	subs	r3, r2, r3
 800f5aa:	4a1b      	ldr	r2, [pc, #108]	@ (800f618 <pvPortMalloc+0x18c>)
 800f5ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f5ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f618 <pvPortMalloc+0x18c>)
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f620 <pvPortMalloc+0x194>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d203      	bcs.n	800f5c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f5ba:	4b17      	ldr	r3, [pc, #92]	@ (800f618 <pvPortMalloc+0x18c>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a18      	ldr	r2, [pc, #96]	@ (800f620 <pvPortMalloc+0x194>)
 800f5c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c4:	685a      	ldr	r2, [r3, #4]
 800f5c6:	4b13      	ldr	r3, [pc, #76]	@ (800f614 <pvPortMalloc+0x188>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	431a      	orrs	r2, r3
 800f5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f5d6:	4b13      	ldr	r3, [pc, #76]	@ (800f624 <pvPortMalloc+0x198>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	4a11      	ldr	r2, [pc, #68]	@ (800f624 <pvPortMalloc+0x198>)
 800f5de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f5e0:	f7fe fcf0 	bl	800dfc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	f003 0307 	and.w	r3, r3, #7
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00b      	beq.n	800f606 <pvPortMalloc+0x17a>
	__asm volatile
 800f5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	60fb      	str	r3, [r7, #12]
}
 800f600:	bf00      	nop
 800f602:	bf00      	nop
 800f604:	e7fd      	b.n	800f602 <pvPortMalloc+0x176>
	return pvReturn;
 800f606:	69fb      	ldr	r3, [r7, #28]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3728      	adds	r7, #40	@ 0x28
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	24004f28 	.word	0x24004f28
 800f614:	24004f3c 	.word	0x24004f3c
 800f618:	24004f2c 	.word	0x24004f2c
 800f61c:	24004f20 	.word	0x24004f20
 800f620:	24004f30 	.word	0x24004f30
 800f624:	24004f34 	.word	0x24004f34

0800f628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b086      	sub	sp, #24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d04f      	beq.n	800f6da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f63a:	2308      	movs	r3, #8
 800f63c:	425b      	negs	r3, r3
 800f63e:	697a      	ldr	r2, [r7, #20]
 800f640:	4413      	add	r3, r2
 800f642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	4b25      	ldr	r3, [pc, #148]	@ (800f6e4 <vPortFree+0xbc>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4013      	ands	r3, r2
 800f652:	2b00      	cmp	r3, #0
 800f654:	d10b      	bne.n	800f66e <vPortFree+0x46>
	__asm volatile
 800f656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65a:	f383 8811 	msr	BASEPRI, r3
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	f3bf 8f4f 	dsb	sy
 800f666:	60fb      	str	r3, [r7, #12]
}
 800f668:	bf00      	nop
 800f66a:	bf00      	nop
 800f66c:	e7fd      	b.n	800f66a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d00b      	beq.n	800f68e <vPortFree+0x66>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67a:	f383 8811 	msr	BASEPRI, r3
 800f67e:	f3bf 8f6f 	isb	sy
 800f682:	f3bf 8f4f 	dsb	sy
 800f686:	60bb      	str	r3, [r7, #8]
}
 800f688:	bf00      	nop
 800f68a:	bf00      	nop
 800f68c:	e7fd      	b.n	800f68a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	685a      	ldr	r2, [r3, #4]
 800f692:	4b14      	ldr	r3, [pc, #80]	@ (800f6e4 <vPortFree+0xbc>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	4013      	ands	r3, r2
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d01e      	beq.n	800f6da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d11a      	bne.n	800f6da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f6e4 <vPortFree+0xbc>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	43db      	mvns	r3, r3
 800f6ae:	401a      	ands	r2, r3
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f6b4:	f7fe fc78 	bl	800dfa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	685a      	ldr	r2, [r3, #4]
 800f6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f6e8 <vPortFree+0xc0>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	4a09      	ldr	r2, [pc, #36]	@ (800f6e8 <vPortFree+0xc0>)
 800f6c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f6c6:	6938      	ldr	r0, [r7, #16]
 800f6c8:	f000 f874 	bl	800f7b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f6cc:	4b07      	ldr	r3, [pc, #28]	@ (800f6ec <vPortFree+0xc4>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	4a06      	ldr	r2, [pc, #24]	@ (800f6ec <vPortFree+0xc4>)
 800f6d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f6d6:	f7fe fc75 	bl	800dfc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f6da:	bf00      	nop
 800f6dc:	3718      	adds	r7, #24
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	24004f3c 	.word	0x24004f3c
 800f6e8:	24004f2c 	.word	0x24004f2c
 800f6ec:	24004f38 	.word	0x24004f38

0800f6f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f6f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f6fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f6fc:	4b27      	ldr	r3, [pc, #156]	@ (800f79c <prvHeapInit+0xac>)
 800f6fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f003 0307 	and.w	r3, r3, #7
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00c      	beq.n	800f724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	3307      	adds	r3, #7
 800f70e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f023 0307 	bic.w	r3, r3, #7
 800f716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	1ad3      	subs	r3, r2, r3
 800f71e:	4a1f      	ldr	r2, [pc, #124]	@ (800f79c <prvHeapInit+0xac>)
 800f720:	4413      	add	r3, r2
 800f722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f728:	4a1d      	ldr	r2, [pc, #116]	@ (800f7a0 <prvHeapInit+0xb0>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f72e:	4b1c      	ldr	r3, [pc, #112]	@ (800f7a0 <prvHeapInit+0xb0>)
 800f730:	2200      	movs	r2, #0
 800f732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	68ba      	ldr	r2, [r7, #8]
 800f738:	4413      	add	r3, r2
 800f73a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f73c:	2208      	movs	r2, #8
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	1a9b      	subs	r3, r3, r2
 800f742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f023 0307 	bic.w	r3, r3, #7
 800f74a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	4a15      	ldr	r2, [pc, #84]	@ (800f7a4 <prvHeapInit+0xb4>)
 800f750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f752:	4b14      	ldr	r3, [pc, #80]	@ (800f7a4 <prvHeapInit+0xb4>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2200      	movs	r2, #0
 800f758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f75a:	4b12      	ldr	r3, [pc, #72]	@ (800f7a4 <prvHeapInit+0xb4>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2200      	movs	r2, #0
 800f760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	1ad2      	subs	r2, r2, r3
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f770:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a4 <prvHeapInit+0xb4>)
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	4a0a      	ldr	r2, [pc, #40]	@ (800f7a8 <prvHeapInit+0xb8>)
 800f77e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	4a09      	ldr	r2, [pc, #36]	@ (800f7ac <prvHeapInit+0xbc>)
 800f786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f788:	4b09      	ldr	r3, [pc, #36]	@ (800f7b0 <prvHeapInit+0xc0>)
 800f78a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f78e:	601a      	str	r2, [r3, #0]
}
 800f790:	bf00      	nop
 800f792:	3714      	adds	r7, #20
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	24001320 	.word	0x24001320
 800f7a0:	24004f20 	.word	0x24004f20
 800f7a4:	24004f28 	.word	0x24004f28
 800f7a8:	24004f30 	.word	0x24004f30
 800f7ac:	24004f2c 	.word	0x24004f2c
 800f7b0:	24004f3c 	.word	0x24004f3c

0800f7b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7bc:	4b28      	ldr	r3, [pc, #160]	@ (800f860 <prvInsertBlockIntoFreeList+0xac>)
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	e002      	b.n	800f7c8 <prvInsertBlockIntoFreeList+0x14>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	60fb      	str	r3, [r7, #12]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d8f7      	bhi.n	800f7c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	4413      	add	r3, r2
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d108      	bne.n	800f7f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	685a      	ldr	r2, [r3, #4]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	441a      	add	r2, r3
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	441a      	add	r2, r3
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	429a      	cmp	r2, r3
 800f808:	d118      	bne.n	800f83c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	4b15      	ldr	r3, [pc, #84]	@ (800f864 <prvInsertBlockIntoFreeList+0xb0>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	429a      	cmp	r2, r3
 800f814:	d00d      	beq.n	800f832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	685a      	ldr	r2, [r3, #4]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	441a      	add	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	e008      	b.n	800f844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f832:	4b0c      	ldr	r3, [pc, #48]	@ (800f864 <prvInsertBlockIntoFreeList+0xb0>)
 800f834:	681a      	ldr	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	e003      	b.n	800f844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d002      	beq.n	800f852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f852:	bf00      	nop
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	24004f20 	.word	0x24004f20
 800f864:	24004f28 	.word	0x24004f28

0800f868 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f86c:	2200      	movs	r2, #0
 800f86e:	4913      	ldr	r1, [pc, #76]	@ (800f8bc <MX_USB_DEVICE_Init+0x54>)
 800f870:	4813      	ldr	r0, [pc, #76]	@ (800f8c0 <MX_USB_DEVICE_Init+0x58>)
 800f872:	f7fb ff0b 	bl	800b68c <USBD_Init>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f87c:	f7f1 fc98 	bl	80011b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f880:	4910      	ldr	r1, [pc, #64]	@ (800f8c4 <MX_USB_DEVICE_Init+0x5c>)
 800f882:	480f      	ldr	r0, [pc, #60]	@ (800f8c0 <MX_USB_DEVICE_Init+0x58>)
 800f884:	f7fb ff32 	bl	800b6ec <USBD_RegisterClass>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f88e:	f7f1 fc8f 	bl	80011b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f892:	490d      	ldr	r1, [pc, #52]	@ (800f8c8 <MX_USB_DEVICE_Init+0x60>)
 800f894:	480a      	ldr	r0, [pc, #40]	@ (800f8c0 <MX_USB_DEVICE_Init+0x58>)
 800f896:	f7fb fe29 	bl	800b4ec <USBD_CDC_RegisterInterface>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d001      	beq.n	800f8a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f8a0:	f7f1 fc86 	bl	80011b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f8a4:	4806      	ldr	r0, [pc, #24]	@ (800f8c0 <MX_USB_DEVICE_Init+0x58>)
 800f8a6:	f7fb ff57 	bl	800b758 <USBD_Start>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d001      	beq.n	800f8b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f8b0:	f7f1 fc7e 	bl	80011b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f8b4:	f7f5 f8fc 	bl	8004ab0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f8b8:	bf00      	nop
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	240000b4 	.word	0x240000b4
 800f8c0:	24004f40 	.word	0x24004f40
 800f8c4:	2400001c 	.word	0x2400001c
 800f8c8:	240000a0 	.word	0x240000a0

0800f8cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	4905      	ldr	r1, [pc, #20]	@ (800f8e8 <CDC_Init_FS+0x1c>)
 800f8d4:	4805      	ldr	r0, [pc, #20]	@ (800f8ec <CDC_Init_FS+0x20>)
 800f8d6:	f7fb fe23 	bl	800b520 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f8da:	4905      	ldr	r1, [pc, #20]	@ (800f8f0 <CDC_Init_FS+0x24>)
 800f8dc:	4803      	ldr	r0, [pc, #12]	@ (800f8ec <CDC_Init_FS+0x20>)
 800f8de:	f7fb fe41 	bl	800b564 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f8e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	24005a1c 	.word	0x24005a1c
 800f8ec:	24004f40 	.word	0x24004f40
 800f8f0:	2400521c 	.word	0x2400521c

0800f8f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f8f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr

0800f904 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	4603      	mov	r3, r0
 800f90c:	6039      	str	r1, [r7, #0]
 800f90e:	71fb      	strb	r3, [r7, #7]
 800f910:	4613      	mov	r3, r2
 800f912:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	2b23      	cmp	r3, #35	@ 0x23
 800f918:	d84a      	bhi.n	800f9b0 <CDC_Control_FS+0xac>
 800f91a:	a201      	add	r2, pc, #4	@ (adr r2, 800f920 <CDC_Control_FS+0x1c>)
 800f91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f920:	0800f9b1 	.word	0x0800f9b1
 800f924:	0800f9b1 	.word	0x0800f9b1
 800f928:	0800f9b1 	.word	0x0800f9b1
 800f92c:	0800f9b1 	.word	0x0800f9b1
 800f930:	0800f9b1 	.word	0x0800f9b1
 800f934:	0800f9b1 	.word	0x0800f9b1
 800f938:	0800f9b1 	.word	0x0800f9b1
 800f93c:	0800f9b1 	.word	0x0800f9b1
 800f940:	0800f9b1 	.word	0x0800f9b1
 800f944:	0800f9b1 	.word	0x0800f9b1
 800f948:	0800f9b1 	.word	0x0800f9b1
 800f94c:	0800f9b1 	.word	0x0800f9b1
 800f950:	0800f9b1 	.word	0x0800f9b1
 800f954:	0800f9b1 	.word	0x0800f9b1
 800f958:	0800f9b1 	.word	0x0800f9b1
 800f95c:	0800f9b1 	.word	0x0800f9b1
 800f960:	0800f9b1 	.word	0x0800f9b1
 800f964:	0800f9b1 	.word	0x0800f9b1
 800f968:	0800f9b1 	.word	0x0800f9b1
 800f96c:	0800f9b1 	.word	0x0800f9b1
 800f970:	0800f9b1 	.word	0x0800f9b1
 800f974:	0800f9b1 	.word	0x0800f9b1
 800f978:	0800f9b1 	.word	0x0800f9b1
 800f97c:	0800f9b1 	.word	0x0800f9b1
 800f980:	0800f9b1 	.word	0x0800f9b1
 800f984:	0800f9b1 	.word	0x0800f9b1
 800f988:	0800f9b1 	.word	0x0800f9b1
 800f98c:	0800f9b1 	.word	0x0800f9b1
 800f990:	0800f9b1 	.word	0x0800f9b1
 800f994:	0800f9b1 	.word	0x0800f9b1
 800f998:	0800f9b1 	.word	0x0800f9b1
 800f99c:	0800f9b1 	.word	0x0800f9b1
 800f9a0:	0800f9b1 	.word	0x0800f9b1
 800f9a4:	0800f9b1 	.word	0x0800f9b1
 800f9a8:	0800f9b1 	.word	0x0800f9b1
 800f9ac:	0800f9b1 	.word	0x0800f9b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f9b0:	bf00      	nop
  }

  return (USBD_OK);
 800f9b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f9ca:	6879      	ldr	r1, [r7, #4]
 800f9cc:	4805      	ldr	r0, [pc, #20]	@ (800f9e4 <CDC_Receive_FS+0x24>)
 800f9ce:	f7fb fdc9 	bl	800b564 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f9d2:	4804      	ldr	r0, [pc, #16]	@ (800f9e4 <CDC_Receive_FS+0x24>)
 800f9d4:	f7fb fe24 	bl	800b620 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f9d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	24004f40 	.word	0x24004f40

0800f9e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800fa30 <CDC_Transmit_FS+0x48>)
 800f9fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f9fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d001      	beq.n	800fa0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e00b      	b.n	800fa26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fa0e:	887b      	ldrh	r3, [r7, #2]
 800fa10:	461a      	mov	r2, r3
 800fa12:	6879      	ldr	r1, [r7, #4]
 800fa14:	4806      	ldr	r0, [pc, #24]	@ (800fa30 <CDC_Transmit_FS+0x48>)
 800fa16:	f7fb fd83 	bl	800b520 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fa1a:	4805      	ldr	r0, [pc, #20]	@ (800fa30 <CDC_Transmit_FS+0x48>)
 800fa1c:	f7fb fdc0 	bl	800b5a0 <USBD_CDC_TransmitPacket>
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	24004f40 	.word	0x24004f40

0800fa34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b087      	sub	sp, #28
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa42:	2300      	movs	r3, #0
 800fa44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	371c      	adds	r7, #28
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
	...

0800fa58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	4603      	mov	r3, r0
 800fa60:	6039      	str	r1, [r7, #0]
 800fa62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	2212      	movs	r2, #18
 800fa68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa6a:	4b03      	ldr	r3, [pc, #12]	@ (800fa78 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr
 800fa78:	240000d4 	.word	0x240000d4

0800fa7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	4603      	mov	r3, r0
 800fa84:	6039      	str	r1, [r7, #0]
 800fa86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	2204      	movs	r2, #4
 800fa8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa8e:	4b03      	ldr	r3, [pc, #12]	@ (800fa9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	240000e8 	.word	0x240000e8

0800faa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	6039      	str	r1, [r7, #0]
 800faaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800faac:	79fb      	ldrb	r3, [r7, #7]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d105      	bne.n	800fabe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	4907      	ldr	r1, [pc, #28]	@ (800fad4 <USBD_FS_ProductStrDescriptor+0x34>)
 800fab6:	4808      	ldr	r0, [pc, #32]	@ (800fad8 <USBD_FS_ProductStrDescriptor+0x38>)
 800fab8:	f7fd f828 	bl	800cb0c <USBD_GetString>
 800fabc:	e004      	b.n	800fac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	4904      	ldr	r1, [pc, #16]	@ (800fad4 <USBD_FS_ProductStrDescriptor+0x34>)
 800fac2:	4805      	ldr	r0, [pc, #20]	@ (800fad8 <USBD_FS_ProductStrDescriptor+0x38>)
 800fac4:	f7fd f822 	bl	800cb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fac8:	4b02      	ldr	r3, [pc, #8]	@ (800fad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800faca:	4618      	mov	r0, r3
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	2400621c 	.word	0x2400621c
 800fad8:	0801500c 	.word	0x0801500c

0800fadc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	4603      	mov	r3, r0
 800fae4:	6039      	str	r1, [r7, #0]
 800fae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fae8:	683a      	ldr	r2, [r7, #0]
 800faea:	4904      	ldr	r1, [pc, #16]	@ (800fafc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800faec:	4804      	ldr	r0, [pc, #16]	@ (800fb00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800faee:	f7fd f80d 	bl	800cb0c <USBD_GetString>
  return USBD_StrDesc;
 800faf2:	4b02      	ldr	r3, [pc, #8]	@ (800fafc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	2400621c 	.word	0x2400621c
 800fb00:	08015024 	.word	0x08015024

0800fb04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	6039      	str	r1, [r7, #0]
 800fb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	221a      	movs	r2, #26
 800fb14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb16:	f000 f843 	bl	800fba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb1a:	4b02      	ldr	r3, [pc, #8]	@ (800fb24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	240000ec 	.word	0x240000ec

0800fb28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	4603      	mov	r3, r0
 800fb30:	6039      	str	r1, [r7, #0]
 800fb32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb34:	79fb      	ldrb	r3, [r7, #7]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d105      	bne.n	800fb46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb3a:	683a      	ldr	r2, [r7, #0]
 800fb3c:	4907      	ldr	r1, [pc, #28]	@ (800fb5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb3e:	4808      	ldr	r0, [pc, #32]	@ (800fb60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb40:	f7fc ffe4 	bl	800cb0c <USBD_GetString>
 800fb44:	e004      	b.n	800fb50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	4904      	ldr	r1, [pc, #16]	@ (800fb5c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb4a:	4805      	ldr	r0, [pc, #20]	@ (800fb60 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb4c:	f7fc ffde 	bl	800cb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb50:	4b02      	ldr	r3, [pc, #8]	@ (800fb5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3708      	adds	r7, #8
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	2400621c 	.word	0x2400621c
 800fb60:	08015038 	.word	0x08015038

0800fb64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	6039      	str	r1, [r7, #0]
 800fb6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb70:	79fb      	ldrb	r3, [r7, #7]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d105      	bne.n	800fb82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	4907      	ldr	r1, [pc, #28]	@ (800fb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb7a:	4808      	ldr	r0, [pc, #32]	@ (800fb9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb7c:	f7fc ffc6 	bl	800cb0c <USBD_GetString>
 800fb80:	e004      	b.n	800fb8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb82:	683a      	ldr	r2, [r7, #0]
 800fb84:	4904      	ldr	r1, [pc, #16]	@ (800fb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb86:	4805      	ldr	r0, [pc, #20]	@ (800fb9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb88:	f7fc ffc0 	bl	800cb0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb8c:	4b02      	ldr	r3, [pc, #8]	@ (800fb98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	2400621c 	.word	0x2400621c
 800fb9c:	08015044 	.word	0x08015044

0800fba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fba6:	4b0f      	ldr	r3, [pc, #60]	@ (800fbe4 <Get_SerialNum+0x44>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fbac:	4b0e      	ldr	r3, [pc, #56]	@ (800fbe8 <Get_SerialNum+0x48>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fbb2:	4b0e      	ldr	r3, [pc, #56]	@ (800fbec <Get_SerialNum+0x4c>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d009      	beq.n	800fbda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fbc6:	2208      	movs	r2, #8
 800fbc8:	4909      	ldr	r1, [pc, #36]	@ (800fbf0 <Get_SerialNum+0x50>)
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f000 f814 	bl	800fbf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fbd0:	2204      	movs	r2, #4
 800fbd2:	4908      	ldr	r1, [pc, #32]	@ (800fbf4 <Get_SerialNum+0x54>)
 800fbd4:	68b8      	ldr	r0, [r7, #8]
 800fbd6:	f000 f80f 	bl	800fbf8 <IntToUnicode>
  }
}
 800fbda:	bf00      	nop
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	1ff1e800 	.word	0x1ff1e800
 800fbe8:	1ff1e804 	.word	0x1ff1e804
 800fbec:	1ff1e808 	.word	0x1ff1e808
 800fbf0:	240000ee 	.word	0x240000ee
 800fbf4:	240000fe 	.word	0x240000fe

0800fbf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b087      	sub	sp, #28
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	4613      	mov	r3, r2
 800fc04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc06:	2300      	movs	r3, #0
 800fc08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	75fb      	strb	r3, [r7, #23]
 800fc0e:	e027      	b.n	800fc60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	0f1b      	lsrs	r3, r3, #28
 800fc14:	2b09      	cmp	r3, #9
 800fc16:	d80b      	bhi.n	800fc30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	0f1b      	lsrs	r3, r3, #28
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	7dfb      	ldrb	r3, [r7, #23]
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	4619      	mov	r1, r3
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	440b      	add	r3, r1
 800fc28:	3230      	adds	r2, #48	@ 0x30
 800fc2a:	b2d2      	uxtb	r2, r2
 800fc2c:	701a      	strb	r2, [r3, #0]
 800fc2e:	e00a      	b.n	800fc46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	0f1b      	lsrs	r3, r3, #28
 800fc34:	b2da      	uxtb	r2, r3
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	440b      	add	r3, r1
 800fc40:	3237      	adds	r2, #55	@ 0x37
 800fc42:	b2d2      	uxtb	r2, r2
 800fc44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc4c:	7dfb      	ldrb	r3, [r7, #23]
 800fc4e:	005b      	lsls	r3, r3, #1
 800fc50:	3301      	adds	r3, #1
 800fc52:	68ba      	ldr	r2, [r7, #8]
 800fc54:	4413      	add	r3, r2
 800fc56:	2200      	movs	r2, #0
 800fc58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc5a:	7dfb      	ldrb	r3, [r7, #23]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	75fb      	strb	r3, [r7, #23]
 800fc60:	7dfa      	ldrb	r2, [r7, #23]
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d3d3      	bcc.n	800fc10 <IntToUnicode+0x18>
  }
}
 800fc68:	bf00      	nop
 800fc6a:	bf00      	nop
 800fc6c:	371c      	adds	r7, #28
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
	...

0800fc78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b0ba      	sub	sp, #232	@ 0xe8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fc84:	2200      	movs	r2, #0
 800fc86:	601a      	str	r2, [r3, #0]
 800fc88:	605a      	str	r2, [r3, #4]
 800fc8a:	609a      	str	r2, [r3, #8]
 800fc8c:	60da      	str	r2, [r3, #12]
 800fc8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fc90:	f107 0310 	add.w	r3, r7, #16
 800fc94:	22c0      	movs	r2, #192	@ 0xc0
 800fc96:	2100      	movs	r1, #0
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f002 feea 	bl	8012a72 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	4a2c      	ldr	r2, [pc, #176]	@ (800fd54 <HAL_PCD_MspInit+0xdc>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d151      	bne.n	800fd4c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fca8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fcac:	f04f 0300 	mov.w	r3, #0
 800fcb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fcb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fcb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fcbc:	f107 0310 	add.w	r3, r7, #16
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7f5 ff17 	bl	8005af4 <HAL_RCCEx_PeriphCLKConfig>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d001      	beq.n	800fcd0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800fccc:	f7f1 fa70 	bl	80011b0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fcd0:	f7f4 feee 	bl	8004ab0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcd4:	4b20      	ldr	r3, [pc, #128]	@ (800fd58 <HAL_PCD_MspInit+0xe0>)
 800fcd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fcda:	4a1f      	ldr	r2, [pc, #124]	@ (800fd58 <HAL_PCD_MspInit+0xe0>)
 800fcdc:	f043 0301 	orr.w	r3, r3, #1
 800fce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fce4:	4b1c      	ldr	r3, [pc, #112]	@ (800fd58 <HAL_PCD_MspInit+0xe0>)
 800fce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	60fb      	str	r3, [r7, #12]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fcf2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fcf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcfa:	2302      	movs	r3, #2
 800fcfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd00:	2300      	movs	r3, #0
 800fd02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd06:	2300      	movs	r3, #0
 800fd08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fd0c:	230a      	movs	r3, #10
 800fd0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fd16:	4619      	mov	r1, r3
 800fd18:	4810      	ldr	r0, [pc, #64]	@ (800fd5c <HAL_PCD_MspInit+0xe4>)
 800fd1a:	f7f2 fbcf 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd1e:	4b0e      	ldr	r3, [pc, #56]	@ (800fd58 <HAL_PCD_MspInit+0xe0>)
 800fd20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fd24:	4a0c      	ldr	r2, [pc, #48]	@ (800fd58 <HAL_PCD_MspInit+0xe0>)
 800fd26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fd2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800fd2e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd58 <HAL_PCD_MspInit+0xe0>)
 800fd30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fd34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd38:	60bb      	str	r3, [r7, #8]
 800fd3a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	2105      	movs	r1, #5
 800fd40:	2065      	movs	r0, #101	@ 0x65
 800fd42:	f7f2 f8cb 	bl	8001edc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd46:	2065      	movs	r0, #101	@ 0x65
 800fd48:	f7f2 f8e2 	bl	8001f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd4c:	bf00      	nop
 800fd4e:	37e8      	adds	r7, #232	@ 0xe8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	40080000 	.word	0x40080000
 800fd58:	58024400 	.word	0x58024400
 800fd5c:	58020000 	.word	0x58020000

0800fd60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800fd74:	4619      	mov	r1, r3
 800fd76:	4610      	mov	r0, r2
 800fd78:	f7fb fd3b 	bl	800b7f2 <USBD_LL_SetupStage>
}
 800fd7c:	bf00      	nop
 800fd7e:	3708      	adds	r7, #8
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fd96:	78fa      	ldrb	r2, [r7, #3]
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	00db      	lsls	r3, r3, #3
 800fd9e:	4413      	add	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	440b      	add	r3, r1
 800fda4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	78fb      	ldrb	r3, [r7, #3]
 800fdac:	4619      	mov	r1, r3
 800fdae:	f7fb fd75 	bl	800b89c <USBD_LL_DataOutStage>
}
 800fdb2:	bf00      	nop
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800fdcc:	78fa      	ldrb	r2, [r7, #3]
 800fdce:	6879      	ldr	r1, [r7, #4]
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	00db      	lsls	r3, r3, #3
 800fdd4:	4413      	add	r3, r2
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	440b      	add	r3, r1
 800fdda:	3320      	adds	r3, #32
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	78fb      	ldrb	r3, [r7, #3]
 800fde0:	4619      	mov	r1, r3
 800fde2:	f7fb fe0e 	bl	800ba02 <USBD_LL_DataInStage>
}
 800fde6:	bf00      	nop
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b082      	sub	sp, #8
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fb ff48 	bl	800bc92 <USBD_LL_SOF>
}
 800fe02:	bf00      	nop
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fe12:	2301      	movs	r3, #1
 800fe14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	79db      	ldrb	r3, [r3, #7]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d102      	bne.n	800fe24 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	73fb      	strb	r3, [r7, #15]
 800fe22:	e008      	b.n	800fe36 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	79db      	ldrb	r3, [r3, #7]
 800fe28:	2b02      	cmp	r3, #2
 800fe2a:	d102      	bne.n	800fe32 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	73fb      	strb	r3, [r7, #15]
 800fe30:	e001      	b.n	800fe36 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe32:	f7f1 f9bd 	bl	80011b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fe3c:	7bfa      	ldrb	r2, [r7, #15]
 800fe3e:	4611      	mov	r1, r2
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fb fee2 	bl	800bc0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fb fe8a 	bl	800bb66 <USBD_LL_Reset>
}
 800fe52:	bf00      	nop
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
	...

0800fe5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fb fedd 	bl	800bc2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	6812      	ldr	r2, [r2, #0]
 800fe7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fe82:	f043 0301 	orr.w	r3, r3, #1
 800fe86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	7adb      	ldrb	r3, [r3, #11]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d005      	beq.n	800fe9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe90:	4b04      	ldr	r3, [pc, #16]	@ (800fea4 <HAL_PCD_SuspendCallback+0x48>)
 800fe92:	691b      	ldr	r3, [r3, #16]
 800fe94:	4a03      	ldr	r2, [pc, #12]	@ (800fea4 <HAL_PCD_SuspendCallback+0x48>)
 800fe96:	f043 0306 	orr.w	r3, r3, #6
 800fe9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe9c:	bf00      	nop
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	e000ed00 	.word	0xe000ed00

0800fea8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fb fed3 	bl	800bc62 <USBD_LL_Resume>
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	460b      	mov	r3, r1
 800fece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fed6:	78fa      	ldrb	r2, [r7, #3]
 800fed8:	4611      	mov	r1, r2
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fb ff2b 	bl	800bd36 <USBD_LL_IsoOUTIncomplete>
}
 800fee0:	bf00      	nop
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fefa:	78fa      	ldrb	r2, [r7, #3]
 800fefc:	4611      	mov	r1, r2
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fb fee7 	bl	800bcd2 <USBD_LL_IsoINIncomplete>
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fb ff3d 	bl	800bd9a <USBD_LL_DevConnected>
}
 800ff20:	bf00      	nop
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fb ff3a 	bl	800bdb0 <USBD_LL_DevDisconnected>
}
 800ff3c:	bf00      	nop
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d13e      	bne.n	800ffd2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff54:	4a21      	ldr	r2, [pc, #132]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a1f      	ldr	r2, [pc, #124]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff60:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff64:	4b1d      	ldr	r3, [pc, #116]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff66:	4a1e      	ldr	r2, [pc, #120]	@ (800ffe0 <USBD_LL_Init+0x9c>)
 800ff68:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800ff6a:	4b1c      	ldr	r3, [pc, #112]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff6c:	2209      	movs	r2, #9
 800ff6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff70:	4b1a      	ldr	r3, [pc, #104]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff72:	2202      	movs	r2, #2
 800ff74:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff76:	4b19      	ldr	r3, [pc, #100]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff7c:	4b17      	ldr	r3, [pc, #92]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff7e:	2202      	movs	r2, #2
 800ff80:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff82:	4b16      	ldr	r3, [pc, #88]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff88:	4b14      	ldr	r3, [pc, #80]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff8e:	4b13      	ldr	r3, [pc, #76]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ff94:	4b11      	ldr	r3, [pc, #68]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff9a:	4b10      	ldr	r3, [pc, #64]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ffa0:	4b0e      	ldr	r3, [pc, #56]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ffa6:	480d      	ldr	r0, [pc, #52]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ffa8:	f7f3 faa9 	bl	80034fe <HAL_PCD_Init>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ffb2:	f7f1 f8fd 	bl	80011b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ffb6:	2180      	movs	r1, #128	@ 0x80
 800ffb8:	4808      	ldr	r0, [pc, #32]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ffba:	f7f4 fcfe 	bl	80049ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ffbe:	2240      	movs	r2, #64	@ 0x40
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4806      	ldr	r0, [pc, #24]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ffc4:	f7f4 fcb2 	bl	800492c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ffc8:	2280      	movs	r2, #128	@ 0x80
 800ffca:	2101      	movs	r1, #1
 800ffcc:	4803      	ldr	r0, [pc, #12]	@ (800ffdc <USBD_LL_Init+0x98>)
 800ffce:	f7f4 fcad 	bl	800492c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	2400641c 	.word	0x2400641c
 800ffe0:	40080000 	.word	0x40080000

0800ffe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fff0:	2300      	movs	r3, #0
 800fff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f3 fb8b 	bl	8003716 <HAL_PCD_Start>
 8010000:	4603      	mov	r3, r0
 8010002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010004:	7bfb      	ldrb	r3, [r7, #15]
 8010006:	4618      	mov	r0, r3
 8010008:	f000 f942 	bl	8010290 <USBD_Get_USB_Status>
 801000c:	4603      	mov	r3, r0
 801000e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010010:	7bbb      	ldrb	r3, [r7, #14]
}
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b084      	sub	sp, #16
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
 8010022:	4608      	mov	r0, r1
 8010024:	4611      	mov	r1, r2
 8010026:	461a      	mov	r2, r3
 8010028:	4603      	mov	r3, r0
 801002a:	70fb      	strb	r3, [r7, #3]
 801002c:	460b      	mov	r3, r1
 801002e:	70bb      	strb	r3, [r7, #2]
 8010030:	4613      	mov	r3, r2
 8010032:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010034:	2300      	movs	r3, #0
 8010036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010038:	2300      	movs	r3, #0
 801003a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010042:	78bb      	ldrb	r3, [r7, #2]
 8010044:	883a      	ldrh	r2, [r7, #0]
 8010046:	78f9      	ldrb	r1, [r7, #3]
 8010048:	f7f4 f88c 	bl	8004164 <HAL_PCD_EP_Open>
 801004c:	4603      	mov	r3, r0
 801004e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010050:	7bfb      	ldrb	r3, [r7, #15]
 8010052:	4618      	mov	r0, r3
 8010054:	f000 f91c 	bl	8010290 <USBD_Get_USB_Status>
 8010058:	4603      	mov	r3, r0
 801005a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801005c:	7bbb      	ldrb	r3, [r7, #14]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b084      	sub	sp, #16
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
 801006e:	460b      	mov	r3, r1
 8010070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010076:	2300      	movs	r3, #0
 8010078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010080:	78fa      	ldrb	r2, [r7, #3]
 8010082:	4611      	mov	r1, r2
 8010084:	4618      	mov	r0, r3
 8010086:	f7f4 f8d5 	bl	8004234 <HAL_PCD_EP_Close>
 801008a:	4603      	mov	r3, r0
 801008c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801008e:	7bfb      	ldrb	r3, [r7, #15]
 8010090:	4618      	mov	r0, r3
 8010092:	f000 f8fd 	bl	8010290 <USBD_Get_USB_Status>
 8010096:	4603      	mov	r3, r0
 8010098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801009a:	7bbb      	ldrb	r3, [r7, #14]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	460b      	mov	r3, r1
 80100ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100b0:	2300      	movs	r3, #0
 80100b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100be:	78fa      	ldrb	r2, [r7, #3]
 80100c0:	4611      	mov	r1, r2
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7f4 f98d 	bl	80043e2 <HAL_PCD_EP_SetStall>
 80100c8:	4603      	mov	r3, r0
 80100ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100cc:	7bfb      	ldrb	r3, [r7, #15]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f000 f8de 	bl	8010290 <USBD_Get_USB_Status>
 80100d4:	4603      	mov	r3, r0
 80100d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b084      	sub	sp, #16
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
 80100ea:	460b      	mov	r3, r1
 80100ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100fc:	78fa      	ldrb	r2, [r7, #3]
 80100fe:	4611      	mov	r1, r2
 8010100:	4618      	mov	r0, r3
 8010102:	f7f4 f9d1 	bl	80044a8 <HAL_PCD_EP_ClrStall>
 8010106:	4603      	mov	r3, r0
 8010108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	4618      	mov	r0, r3
 801010e:	f000 f8bf 	bl	8010290 <USBD_Get_USB_Status>
 8010112:	4603      	mov	r3, r0
 8010114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010116:	7bbb      	ldrb	r3, [r7, #14]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	460b      	mov	r3, r1
 801012a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010132:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010138:	2b00      	cmp	r3, #0
 801013a:	da0b      	bge.n	8010154 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801013c:	78fb      	ldrb	r3, [r7, #3]
 801013e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010142:	68f9      	ldr	r1, [r7, #12]
 8010144:	4613      	mov	r3, r2
 8010146:	00db      	lsls	r3, r3, #3
 8010148:	4413      	add	r3, r2
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	440b      	add	r3, r1
 801014e:	3316      	adds	r3, #22
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	e00b      	b.n	801016c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010154:	78fb      	ldrb	r3, [r7, #3]
 8010156:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801015a:	68f9      	ldr	r1, [r7, #12]
 801015c:	4613      	mov	r3, r2
 801015e:	00db      	lsls	r3, r3, #3
 8010160:	4413      	add	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	440b      	add	r3, r1
 8010166:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801016a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	460b      	mov	r3, r1
 8010182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010184:	2300      	movs	r3, #0
 8010186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010192:	78fa      	ldrb	r2, [r7, #3]
 8010194:	4611      	mov	r1, r2
 8010196:	4618      	mov	r0, r3
 8010198:	f7f3 ffc0 	bl	800411c <HAL_PCD_SetAddress>
 801019c:	4603      	mov	r3, r0
 801019e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101a0:	7bfb      	ldrb	r3, [r7, #15]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f000 f874 	bl	8010290 <USBD_Get_USB_Status>
 80101a8:	4603      	mov	r3, r0
 80101aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b086      	sub	sp, #24
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	60f8      	str	r0, [r7, #12]
 80101be:	607a      	str	r2, [r7, #4]
 80101c0:	603b      	str	r3, [r7, #0]
 80101c2:	460b      	mov	r3, r1
 80101c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101c6:	2300      	movs	r3, #0
 80101c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101ca:	2300      	movs	r3, #0
 80101cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80101d4:	7af9      	ldrb	r1, [r7, #11]
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	f7f4 f8c8 	bl	800436e <HAL_PCD_EP_Transmit>
 80101de:	4603      	mov	r3, r0
 80101e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101e2:	7dfb      	ldrb	r3, [r7, #23]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f000 f853 	bl	8010290 <USBD_Get_USB_Status>
 80101ea:	4603      	mov	r3, r0
 80101ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3718      	adds	r7, #24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b086      	sub	sp, #24
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	607a      	str	r2, [r7, #4]
 8010202:	603b      	str	r3, [r7, #0]
 8010204:	460b      	mov	r3, r1
 8010206:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801020c:	2300      	movs	r3, #0
 801020e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010216:	7af9      	ldrb	r1, [r7, #11]
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	f7f4 f854 	bl	80042c8 <HAL_PCD_EP_Receive>
 8010220:	4603      	mov	r3, r0
 8010222:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010224:	7dfb      	ldrb	r3, [r7, #23]
 8010226:	4618      	mov	r0, r3
 8010228:	f000 f832 	bl	8010290 <USBD_Get_USB_Status>
 801022c:	4603      	mov	r3, r0
 801022e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010230:	7dbb      	ldrb	r3, [r7, #22]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3718      	adds	r7, #24
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b082      	sub	sp, #8
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	460b      	mov	r3, r1
 8010244:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801024c:	78fa      	ldrb	r2, [r7, #3]
 801024e:	4611      	mov	r1, r2
 8010250:	4618      	mov	r0, r3
 8010252:	f7f4 f874 	bl	800433e <HAL_PCD_EP_GetRxCount>
 8010256:	4603      	mov	r3, r0
}
 8010258:	4618      	mov	r0, r3
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010268:	4b03      	ldr	r3, [pc, #12]	@ (8010278 <USBD_static_malloc+0x18>)
}
 801026a:	4618      	mov	r0, r3
 801026c:	370c      	adds	r7, #12
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	24006900 	.word	0x24006900

0801027c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010284:	bf00      	nop
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801029a:	2300      	movs	r3, #0
 801029c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801029e:	79fb      	ldrb	r3, [r7, #7]
 80102a0:	2b03      	cmp	r3, #3
 80102a2:	d817      	bhi.n	80102d4 <USBD_Get_USB_Status+0x44>
 80102a4:	a201      	add	r2, pc, #4	@ (adr r2, 80102ac <USBD_Get_USB_Status+0x1c>)
 80102a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102aa:	bf00      	nop
 80102ac:	080102bd 	.word	0x080102bd
 80102b0:	080102c3 	.word	0x080102c3
 80102b4:	080102c9 	.word	0x080102c9
 80102b8:	080102cf 	.word	0x080102cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80102bc:	2300      	movs	r3, #0
 80102be:	73fb      	strb	r3, [r7, #15]
    break;
 80102c0:	e00b      	b.n	80102da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102c2:	2303      	movs	r3, #3
 80102c4:	73fb      	strb	r3, [r7, #15]
    break;
 80102c6:	e008      	b.n	80102da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102c8:	2301      	movs	r3, #1
 80102ca:	73fb      	strb	r3, [r7, #15]
    break;
 80102cc:	e005      	b.n	80102da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102ce:	2303      	movs	r3, #3
 80102d0:	73fb      	strb	r3, [r7, #15]
    break;
 80102d2:	e002      	b.n	80102da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80102d4:	2303      	movs	r3, #3
 80102d6:	73fb      	strb	r3, [r7, #15]
    break;
 80102d8:	bf00      	nop
  }
  return usb_status;
 80102da:	7bfb      	ldrb	r3, [r7, #15]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3714      	adds	r7, #20
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 80102ec:	2200      	movs	r2, #0
 80102ee:	2108      	movs	r1, #8
 80102f0:	480a      	ldr	r0, [pc, #40]	@ (801031c <ad7606_Init+0x34>)
 80102f2:	f7f2 fa93 	bl	800281c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80102f6:	2001      	movs	r0, #1
 80102f8:	f7f1 fd08 	bl	8001d0c <HAL_Delay>
    AD7606_RST_SET();
 80102fc:	2201      	movs	r2, #1
 80102fe:	2108      	movs	r1, #8
 8010300:	4806      	ldr	r0, [pc, #24]	@ (801031c <ad7606_Init+0x34>)
 8010302:	f7f2 fa8b 	bl	800281c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010306:	2001      	movs	r0, #1
 8010308:	f7f1 fd00 	bl	8001d0c <HAL_Delay>
    AD7606_RST_RESET();
 801030c:	2200      	movs	r2, #0
 801030e:	2108      	movs	r1, #8
 8010310:	4802      	ldr	r0, [pc, #8]	@ (801031c <ad7606_Init+0x34>)
 8010312:	f7f2 fa83 	bl	800281c <HAL_GPIO_WritePin>
}
 8010316:	bf00      	nop
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	58021800 	.word	0x58021800

08010320 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	4613      	mov	r3, r2
 801032c:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 801032e:	2200      	movs	r2, #0
 8010330:	2180      	movs	r1, #128	@ 0x80
 8010332:	4809      	ldr	r0, [pc, #36]	@ (8010358 <ad7606_Read+0x38>)
 8010334:	f7f2 fa72 	bl	800281c <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 8010338:	88fa      	ldrh	r2, [r7, #6]
 801033a:	2364      	movs	r3, #100	@ 0x64
 801033c:	68b9      	ldr	r1, [r7, #8]
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7f7 fa58 	bl	80077f4 <HAL_SPI_Receive>
    AD7606_CS_SET();
 8010344:	2201      	movs	r2, #1
 8010346:	2180      	movs	r1, #128	@ 0x80
 8010348:	4803      	ldr	r0, [pc, #12]	@ (8010358 <ad7606_Read+0x38>)
 801034a:	f7f2 fa67 	bl	800281c <HAL_GPIO_WritePin>
}
 801034e:	bf00      	nop
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	58021800 	.word	0x58021800

0801035c <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 8010366:	6839      	ldr	r1, [r7, #0]
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7f7 fecf 	bl	800810c <HAL_TIM_PWM_Start>
}
 801036e:	bf00      	nop
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8010378:	b480      	push	{r7}
 801037a:	b087      	sub	sp, #28
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	460b      	mov	r3, r1
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8010386:	2300      	movs	r3, #0
 8010388:	617b      	str	r3, [r7, #20]
 801038a:	e03d      	b.n	8010408 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	005b      	lsls	r3, r3, #1
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	4413      	add	r3, r2
 8010394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010398:	2b00      	cmp	r3, #0
 801039a:	da0f      	bge.n	80103bc <ad7606_Convert+0x44>
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	005b      	lsls	r3, r3, #1
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	4413      	add	r3, r2
 80103a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	425b      	negs	r3, r3
 80103ac:	b29b      	uxth	r3, r3
 80103ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	425b      	negs	r3, r3
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	b21b      	sxth	r3, r3
 80103ba:	e005      	b.n	80103c8 <ad7606_Convert+0x50>
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	005b      	lsls	r3, r3, #1
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	4413      	add	r3, r2
 80103c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103c8:	697a      	ldr	r2, [r7, #20]
 80103ca:	0052      	lsls	r2, r2, #1
 80103cc:	68f9      	ldr	r1, [r7, #12]
 80103ce:	440a      	add	r2, r1
 80103d0:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	005b      	lsls	r3, r3, #1
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	4413      	add	r3, r2
 80103da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103de:	ee07 3a90 	vmov	s15, r3
 80103e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103e6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80103ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	687a      	ldr	r2, [r7, #4]
 80103f4:	4413      	add	r3, r2
 80103f6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8010420 <ad7606_Convert+0xa8>
 80103fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80103fe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	3301      	adds	r3, #1
 8010406:	617b      	str	r3, [r7, #20]
 8010408:	897b      	ldrh	r3, [r7, #10]
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	429a      	cmp	r2, r3
 801040e:	dbbd      	blt.n	801038c <ad7606_Convert+0x14>
    }
}
 8010410:	bf00      	nop
 8010412:	bf00      	nop
 8010414:	371c      	adds	r7, #28
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	47000000 	.word	0x47000000

08010424 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 8010424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010428:	b087      	sub	sp, #28
 801042a:	af00      	add	r7, sp, #0
 801042c:	60f8      	str	r0, [r7, #12]
 801042e:	460b      	mov	r3, r1
 8010430:	607a      	str	r2, [r7, #4]
 8010432:	817b      	strh	r3, [r7, #10]
 8010434:	466b      	mov	r3, sp
 8010436:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 8010438:	8979      	ldrh	r1, [r7, #10]
 801043a:	460b      	mov	r3, r1
 801043c:	3b01      	subs	r3, #1
 801043e:	617b      	str	r3, [r7, #20]
 8010440:	b28b      	uxth	r3, r1
 8010442:	2200      	movs	r2, #0
 8010444:	4698      	mov	r8, r3
 8010446:	4691      	mov	r9, r2
 8010448:	f04f 0200 	mov.w	r2, #0
 801044c:	f04f 0300 	mov.w	r3, #0
 8010450:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8010454:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8010458:	ea4f 1208 	mov.w	r2, r8, lsl #4
 801045c:	b28b      	uxth	r3, r1
 801045e:	2200      	movs	r2, #0
 8010460:	461c      	mov	r4, r3
 8010462:	4615      	mov	r5, r2
 8010464:	f04f 0200 	mov.w	r2, #0
 8010468:	f04f 0300 	mov.w	r3, #0
 801046c:	012b      	lsls	r3, r5, #4
 801046e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8010472:	0122      	lsls	r2, r4, #4
 8010474:	460b      	mov	r3, r1
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	3307      	adds	r3, #7
 801047a:	08db      	lsrs	r3, r3, #3
 801047c:	00db      	lsls	r3, r3, #3
 801047e:	ebad 0d03 	sub.w	sp, sp, r3
 8010482:	466b      	mov	r3, sp
 8010484:	3301      	adds	r3, #1
 8010486:	085b      	lsrs	r3, r3, #1
 8010488:	005b      	lsls	r3, r3, #1
 801048a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 801048c:	897b      	ldrh	r3, [r7, #10]
 801048e:	461a      	mov	r2, r3
 8010490:	6939      	ldr	r1, [r7, #16]
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	f7ff ff44 	bl	8010320 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8010498:	897b      	ldrh	r3, [r7, #10]
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	4619      	mov	r1, r3
 801049e:	6938      	ldr	r0, [r7, #16]
 80104a0:	f7ff ff6a 	bl	8010378 <ad7606_Convert>
 80104a4:	46b5      	mov	sp, r6
}
 80104a6:	bf00      	nop
 80104a8:	371c      	adds	r7, #28
 80104aa:	46bd      	mov	sp, r7
 80104ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080104b0 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b088      	sub	sp, #32
 80104b4:	af04      	add	r7, sp, #16
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70fb      	strb	r3, [r7, #3]
 80104bc:	4613      	mov	r3, r2
 80104be:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 80104c0:	2300      	movs	r3, #0
 80104c2:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 80104c4:	883b      	ldrh	r3, [r7, #0]
 80104c6:	0a1b      	lsrs	r3, r3, #8
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	b2db      	uxtb	r3, r3
 80104cc:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 80104ce:	883b      	ldrh	r3, [r7, #0]
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	69d8      	ldr	r0, [r3, #28]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80104de:	4619      	mov	r1, r3
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	2364      	movs	r3, #100	@ 0x64
 80104e6:	9302      	str	r3, [sp, #8]
 80104e8:	2302      	movs	r3, #2
 80104ea:	9301      	str	r3, [sp, #4]
 80104ec:	f107 030c 	add.w	r3, r7, #12
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	2301      	movs	r3, #1
 80104f4:	f7f2 fa7c 	bl	80029f0 <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 80104f8:	78fb      	ldrb	r3, [r7, #3]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d105      	bne.n	801050a <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 80104fe:	883b      	ldrh	r3, [r7, #0]
 8010500:	f003 0310 	and.w	r3, r3, #16
 8010504:	b29a      	uxth	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	82da      	strh	r2, [r3, #22]
	}
}
 801050a:	bf00      	nop
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 8010512:	b580      	push	{r7, lr}
 8010514:	b082      	sub	sp, #8
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	881b      	ldrh	r3, [r3, #0]
 801051e:	461a      	mov	r2, r3
 8010520:	2100      	movs	r1, #0
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f7ff ffc4 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	885b      	ldrh	r3, [r3, #2]
 801052c:	461a      	mov	r2, r3
 801052e:	2101      	movs	r1, #1
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7ff ffbd 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	889b      	ldrh	r3, [r3, #4]
 801053a:	461a      	mov	r2, r3
 801053c:	2102      	movs	r1, #2
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f7ff ffb6 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	88db      	ldrh	r3, [r3, #6]
 8010548:	461a      	mov	r2, r3
 801054a:	2103      	movs	r1, #3
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7ff ffaf 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	891b      	ldrh	r3, [r3, #8]
 8010556:	461a      	mov	r2, r3
 8010558:	210b      	movs	r1, #11
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7ff ffa8 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	895b      	ldrh	r3, [r3, #10]
 8010564:	461a      	mov	r2, r3
 8010566:	210c      	movs	r1, #12
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7ff ffa1 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	899b      	ldrh	r3, [r3, #12]
 8010572:	461a      	mov	r2, r3
 8010574:	210d      	movs	r1, #13
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff ff9a 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	89db      	ldrh	r3, [r3, #14]
 8010580:	461a      	mov	r2, r3
 8010582:	210e      	movs	r1, #14
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7ff ff93 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	8a1b      	ldrh	r3, [r3, #16]
 801058e:	461a      	mov	r2, r3
 8010590:	210f      	movs	r1, #15
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f7ff ff8c 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	8a5b      	ldrh	r3, [r3, #18]
 801059c:	461a      	mov	r2, r3
 801059e:	2110      	movs	r1, #16
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff ff85 	bl	80104b0 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	8a9b      	ldrh	r3, [r3, #20]
 80105aa:	461a      	mov	r2, r3
 80105ac:	2111      	movs	r1, #17
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f7ff ff7e 	bl	80104b0 <INA228_writeReg>
}
 80105b4:	bf00      	nop
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 80105bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80105c0:	b08c      	sub	sp, #48	@ 0x30
 80105c2:	af04      	add	r7, sp, #16
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	460b      	mov	r3, r1
 80105c8:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 80105ca:	2300      	movs	r3, #0
 80105cc:	60fb      	str	r3, [r7, #12]
 80105ce:	2300      	movs	r3, #0
 80105d0:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105d8:	4618      	mov	r0, r3
 80105da:	78fb      	ldrb	r3, [r7, #3]
 80105dc:	b29a      	uxth	r2, r3
 80105de:	78fb      	ldrb	r3, [r7, #3]
 80105e0:	4921      	ldr	r1, [pc, #132]	@ (8010668 <INA228_readReg+0xac>)
 80105e2:	5ccb      	ldrb	r3, [r1, r3]
 80105e4:	4619      	mov	r1, r3
 80105e6:	2364      	movs	r3, #100	@ 0x64
 80105e8:	9302      	str	r3, [sp, #8]
 80105ea:	9101      	str	r1, [sp, #4]
 80105ec:	f107 030c 	add.w	r3, r7, #12
 80105f0:	9300      	str	r3, [sp, #0]
 80105f2:	2301      	movs	r3, #1
 80105f4:	4601      	mov	r1, r0
 80105f6:	481d      	ldr	r0, [pc, #116]	@ (801066c <INA228_readReg+0xb0>)
 80105f8:	f7f2 fb0e 	bl	8002c18 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 80105fc:	7b3b      	ldrb	r3, [r7, #12]
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2200      	movs	r2, #0
 8010602:	469a      	mov	sl, r3
 8010604:	4693      	mov	fp, r2
 8010606:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 801060a:	2301      	movs	r3, #1
 801060c:	617b      	str	r3, [r7, #20]
 801060e:	e01b      	b.n	8010648 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 8010610:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010614:	f04f 0200 	mov.w	r2, #0
 8010618:	f04f 0300 	mov.w	r3, #0
 801061c:	020b      	lsls	r3, r1, #8
 801061e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010622:	0202      	lsls	r2, r0, #8
 8010624:	f107 000c 	add.w	r0, r7, #12
 8010628:	6979      	ldr	r1, [r7, #20]
 801062a:	4401      	add	r1, r0
 801062c:	7809      	ldrb	r1, [r1, #0]
 801062e:	b2c9      	uxtb	r1, r1
 8010630:	2000      	movs	r0, #0
 8010632:	460c      	mov	r4, r1
 8010634:	4605      	mov	r5, r0
 8010636:	ea42 0804 	orr.w	r8, r2, r4
 801063a:	ea43 0905 	orr.w	r9, r3, r5
 801063e:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	3301      	adds	r3, #1
 8010646:	617b      	str	r3, [r7, #20]
 8010648:	78fb      	ldrb	r3, [r7, #3]
 801064a:	4a07      	ldr	r2, [pc, #28]	@ (8010668 <INA228_readReg+0xac>)
 801064c:	5cd3      	ldrb	r3, [r2, r3]
 801064e:	461a      	mov	r2, r3
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	4293      	cmp	r3, r2
 8010654:	dbdc      	blt.n	8010610 <INA228_readReg+0x54>
	}

	return value;
 8010656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 801065a:	4610      	mov	r0, r2
 801065c:	4619      	mov	r1, r3
 801065e:	3720      	adds	r7, #32
 8010660:	46bd      	mov	sp, r7
 8010662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010666:	bf00      	nop
 8010668:	08015118 	.word	0x08015118
 801066c:	2400039c 	.word	0x2400039c

08010670 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b086      	sub	sp, #24
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 8010678:	2105      	movs	r1, #5
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7ff ff9e 	bl	80105bc <INA228_readReg>
 8010680:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010684:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010688:	f04f 0200 	mov.w	r2, #0
 801068c:	f04f 0300 	mov.w	r3, #0
 8010690:	0902      	lsrs	r2, r0, #4
 8010692:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8010696:	090b      	lsrs	r3, r1, #4
 8010698:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 801069c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80106a0:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80106a4:	f173 0300 	sbcs.w	r3, r3, #0
 80106a8:	d30c      	bcc.n	80106c4 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 80106aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106ae:	f7ef ff37 	bl	8000520 <__aeabi_ul2f>
 80106b2:	ee07 0a10 	vmov	s14, r0
 80106b6:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80106f8 <INA228_getVBUS_V+0x88>
 80106ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106be:	edc7 7a05 	vstr	s15, [r7, #20]
 80106c2:	e005      	b.n	80106d0 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 80106c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106c8:	f7ef ff2a 	bl	8000520 <__aeabi_ul2f>
 80106cc:	4603      	mov	r3, r0
 80106ce:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 80106d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80106d4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80106fc <INA228_getVBUS_V+0x8c>
 80106d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80106dc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8010700 <INA228_getVBUS_V+0x90>
 80106e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80106e4:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	ee07 3a90 	vmov	s15, r3
}
 80106ee:	eeb0 0a67 	vmov.f32	s0, s15
 80106f2:	3718      	adds	r7, #24
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	49800000 	.word	0x49800000
 80106fc:	43435000 	.word	0x43435000
 8010700:	49742400 	.word	0x49742400

08010704 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 801070c:	2107      	movs	r1, #7
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f7ff ff54 	bl	80105bc <INA228_readReg>
 8010714:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801071c:	f04f 0200 	mov.w	r2, #0
 8010720:	f04f 0300 	mov.w	r3, #0
 8010724:	0902      	lsrs	r2, r0, #4
 8010726:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801072a:	090b      	lsrs	r3, r1, #4
 801072c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 8010730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010734:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010738:	f173 0300 	sbcs.w	r3, r3, #0
 801073c:	d30c      	bcc.n	8010758 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 801073e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010742:	f7ef feed 	bl	8000520 <__aeabi_ul2f>
 8010746:	ee07 0a10 	vmov	s14, r0
 801074a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010774 <INA228_getCURRENT_signedLSB+0x70>
 801074e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010752:	edc7 7a05 	vstr	s15, [r7, #20]
 8010756:	e005      	b.n	8010764 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 8010758:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801075c:	f7ef fee0 	bl	8000520 <__aeabi_ul2f>
 8010760:	4603      	mov	r3, r0
 8010762:	617b      	str	r3, [r7, #20]
	}

	return data;
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	ee07 3a90 	vmov	s15, r3
}
 801076a:	eeb0 0a67 	vmov.f32	s0, s15
 801076e:	3718      	adds	r7, #24
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	49800000 	.word	0x49800000

08010778 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f7ff ffbf 	bl	8010704 <INA228_getCURRENT_signedLSB>
 8010786:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	edd3 7a06 	vldr	s15, [r3, #24]
 8010790:	ed97 7a03 	vldr	s14, [r7, #12]
 8010794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010798:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	ee07 3a90 	vmov	s15, r3
}
 80107a2:	eeb0 0a67 	vmov.f32	s0, s15
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	4603      	mov	r3, r0
 80107b4:	460a      	mov	r2, r1
 80107b6:	71fb      	strb	r3, [r7, #7]
 80107b8:	4613      	mov	r3, r2
 80107ba:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 80107bc:	1dfb      	adds	r3, r7, #7
 80107be:	60fb      	str	r3, [r7, #12]
	if (cmd)
 80107c0:	79bb      	ldrb	r3, [r7, #6]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d005      	beq.n	80107d2 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 80107c6:	2201      	movs	r2, #1
 80107c8:	2140      	movs	r1, #64	@ 0x40
 80107ca:	4811      	ldr	r0, [pc, #68]	@ (8010810 <OLED_WR_Byte+0x64>)
 80107cc:	f7f2 f826 	bl	800281c <HAL_GPIO_WritePin>
 80107d0:	e004      	b.n	80107dc <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 80107d2:	2200      	movs	r2, #0
 80107d4:	2140      	movs	r1, #64	@ 0x40
 80107d6:	480e      	ldr	r0, [pc, #56]	@ (8010810 <OLED_WR_Byte+0x64>)
 80107d8:	f7f2 f820 	bl	800281c <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 80107dc:	2200      	movs	r2, #0
 80107de:	2102      	movs	r1, #2
 80107e0:	480c      	ldr	r0, [pc, #48]	@ (8010814 <OLED_WR_Byte+0x68>)
 80107e2:	f7f2 f81b 	bl	800281c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 80107e6:	23c8      	movs	r3, #200	@ 0xc8
 80107e8:	2201      	movs	r2, #1
 80107ea:	68f9      	ldr	r1, [r7, #12]
 80107ec:	480a      	ldr	r0, [pc, #40]	@ (8010818 <OLED_WR_Byte+0x6c>)
 80107ee:	f7f6 fe13 	bl	8007418 <HAL_SPI_Transmit>

	OLED_CS_Set();
 80107f2:	2201      	movs	r2, #1
 80107f4:	2102      	movs	r1, #2
 80107f6:	4807      	ldr	r0, [pc, #28]	@ (8010814 <OLED_WR_Byte+0x68>)
 80107f8:	f7f2 f810 	bl	800281c <HAL_GPIO_WritePin>
	OLED_DC_Set();
 80107fc:	2201      	movs	r2, #1
 80107fe:	2140      	movs	r1, #64	@ 0x40
 8010800:	4803      	ldr	r0, [pc, #12]	@ (8010810 <OLED_WR_Byte+0x64>)
 8010802:	f7f2 f80b 	bl	800281c <HAL_GPIO_WritePin>
}
 8010806:	bf00      	nop
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	58022000 	.word	0x58022000
 8010814:	58020400 	.word	0x58020400
 8010818:	240003f0 	.word	0x240003f0

0801081c <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010822:	2300      	movs	r3, #0
 8010824:	71fb      	strb	r3, [r7, #7]
 8010826:	e026      	b.n	8010876 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 8010828:	79fb      	ldrb	r3, [r7, #7]
 801082a:	3b50      	subs	r3, #80	@ 0x50
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2100      	movs	r1, #0
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff ffbb 	bl	80107ac <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 8010836:	2100      	movs	r1, #0
 8010838:	2000      	movs	r0, #0
 801083a:	f7ff ffb7 	bl	80107ac <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 801083e:	2100      	movs	r1, #0
 8010840:	2010      	movs	r0, #16
 8010842:	f7ff ffb3 	bl	80107ac <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010846:	2300      	movs	r3, #0
 8010848:	71bb      	strb	r3, [r7, #6]
 801084a:	e00d      	b.n	8010868 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 801084c:	79ba      	ldrb	r2, [r7, #6]
 801084e:	79fb      	ldrb	r3, [r7, #7]
 8010850:	490d      	ldr	r1, [pc, #52]	@ (8010888 <OLED_Refresh+0x6c>)
 8010852:	00d2      	lsls	r2, r2, #3
 8010854:	440a      	add	r2, r1
 8010856:	4413      	add	r3, r2
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	2101      	movs	r1, #1
 801085c:	4618      	mov	r0, r3
 801085e:	f7ff ffa5 	bl	80107ac <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010862:	79bb      	ldrb	r3, [r7, #6]
 8010864:	3301      	adds	r3, #1
 8010866:	71bb      	strb	r3, [r7, #6]
 8010868:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801086c:	2b00      	cmp	r3, #0
 801086e:	daed      	bge.n	801084c <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8010870:	79fb      	ldrb	r3, [r7, #7]
 8010872:	3301      	adds	r3, #1
 8010874:	71fb      	strb	r3, [r7, #7]
 8010876:	79fb      	ldrb	r3, [r7, #7]
 8010878:	2b07      	cmp	r3, #7
 801087a:	d9d5      	bls.n	8010828 <OLED_Refresh+0xc>
	}
}
 801087c:	bf00      	nop
 801087e:	bf00      	nop
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	24006b20 	.word	0x24006b20

0801088c <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010892:	2300      	movs	r3, #0
 8010894:	71fb      	strb	r3, [r7, #7]
 8010896:	e014      	b.n	80108c2 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8010898:	2300      	movs	r3, #0
 801089a:	71bb      	strb	r3, [r7, #6]
 801089c:	e00a      	b.n	80108b4 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 801089e:	79ba      	ldrb	r2, [r7, #6]
 80108a0:	79fb      	ldrb	r3, [r7, #7]
 80108a2:	490c      	ldr	r1, [pc, #48]	@ (80108d4 <OLED_Clear+0x48>)
 80108a4:	00d2      	lsls	r2, r2, #3
 80108a6:	440a      	add	r2, r1
 80108a8:	4413      	add	r3, r2
 80108aa:	2200      	movs	r2, #0
 80108ac:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 80108ae:	79bb      	ldrb	r3, [r7, #6]
 80108b0:	3301      	adds	r3, #1
 80108b2:	71bb      	strb	r3, [r7, #6]
 80108b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	daf0      	bge.n	801089e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 80108bc:	79fb      	ldrb	r3, [r7, #7]
 80108be:	3301      	adds	r3, #1
 80108c0:	71fb      	strb	r3, [r7, #7]
 80108c2:	79fb      	ldrb	r3, [r7, #7]
 80108c4:	2b07      	cmp	r3, #7
 80108c6:	d9e7      	bls.n	8010898 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 80108c8:	f7ff ffa8 	bl	801081c <OLED_Refresh>
}
 80108cc:	bf00      	nop
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	24006b20 	.word	0x24006b20

080108d8 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 80108d8:	b480      	push	{r7}
 80108da:	b085      	sub	sp, #20
 80108dc:	af00      	add	r7, sp, #0
 80108de:	4603      	mov	r3, r0
 80108e0:	460a      	mov	r2, r1
 80108e2:	71fb      	strb	r3, [r7, #7]
 80108e4:	4613      	mov	r3, r2
 80108e6:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 80108e8:	79bb      	ldrb	r3, [r7, #6]
 80108ea:	08db      	lsrs	r3, r3, #3
 80108ec:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 80108ee:	79bb      	ldrb	r3, [r7, #6]
 80108f0:	f003 0307 	and.w	r3, r3, #7
 80108f4:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 80108f6:	7bbb      	ldrb	r3, [r7, #14]
 80108f8:	2201      	movs	r2, #1
 80108fa:	fa02 f303 	lsl.w	r3, r2, r3
 80108fe:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 8010900:	79fa      	ldrb	r2, [r7, #7]
 8010902:	7bfb      	ldrb	r3, [r7, #15]
 8010904:	490a      	ldr	r1, [pc, #40]	@ (8010930 <OLED_DrawPoint+0x58>)
 8010906:	00d2      	lsls	r2, r2, #3
 8010908:	440a      	add	r2, r1
 801090a:	4413      	add	r3, r2
 801090c:	7818      	ldrb	r0, [r3, #0]
 801090e:	79fa      	ldrb	r2, [r7, #7]
 8010910:	7bfb      	ldrb	r3, [r7, #15]
 8010912:	7b79      	ldrb	r1, [r7, #13]
 8010914:	4301      	orrs	r1, r0
 8010916:	b2c8      	uxtb	r0, r1
 8010918:	4905      	ldr	r1, [pc, #20]	@ (8010930 <OLED_DrawPoint+0x58>)
 801091a:	00d2      	lsls	r2, r2, #3
 801091c:	440a      	add	r2, r1
 801091e:	4413      	add	r3, r2
 8010920:	4602      	mov	r2, r0
 8010922:	701a      	strb	r2, [r3, #0]
}
 8010924:	bf00      	nop
 8010926:	3714      	adds	r7, #20
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr
 8010930:	24006b20 	.word	0x24006b20

08010934 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	4603      	mov	r3, r0
 801093c:	460a      	mov	r2, r1
 801093e:	71fb      	strb	r3, [r7, #7]
 8010940:	4613      	mov	r3, r2
 8010942:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010944:	79bb      	ldrb	r3, [r7, #6]
 8010946:	08db      	lsrs	r3, r3, #3
 8010948:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 801094a:	79bb      	ldrb	r3, [r7, #6]
 801094c:	f003 0307 	and.w	r3, r3, #7
 8010950:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010952:	7bbb      	ldrb	r3, [r7, #14]
 8010954:	2201      	movs	r2, #1
 8010956:	fa02 f303 	lsl.w	r3, r2, r3
 801095a:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 801095c:	79fa      	ldrb	r2, [r7, #7]
 801095e:	7bfb      	ldrb	r3, [r7, #15]
 8010960:	491b      	ldr	r1, [pc, #108]	@ (80109d0 <OLED_ClearPoint+0x9c>)
 8010962:	00d2      	lsls	r2, r2, #3
 8010964:	440a      	add	r2, r1
 8010966:	4413      	add	r3, r2
 8010968:	7819      	ldrb	r1, [r3, #0]
 801096a:	79fa      	ldrb	r2, [r7, #7]
 801096c:	7bfb      	ldrb	r3, [r7, #15]
 801096e:	43c9      	mvns	r1, r1
 8010970:	b2c8      	uxtb	r0, r1
 8010972:	4917      	ldr	r1, [pc, #92]	@ (80109d0 <OLED_ClearPoint+0x9c>)
 8010974:	00d2      	lsls	r2, r2, #3
 8010976:	440a      	add	r2, r1
 8010978:	4413      	add	r3, r2
 801097a:	4602      	mov	r2, r0
 801097c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 801097e:	79fa      	ldrb	r2, [r7, #7]
 8010980:	7bfb      	ldrb	r3, [r7, #15]
 8010982:	4913      	ldr	r1, [pc, #76]	@ (80109d0 <OLED_ClearPoint+0x9c>)
 8010984:	00d2      	lsls	r2, r2, #3
 8010986:	440a      	add	r2, r1
 8010988:	4413      	add	r3, r2
 801098a:	7818      	ldrb	r0, [r3, #0]
 801098c:	79fa      	ldrb	r2, [r7, #7]
 801098e:	7bfb      	ldrb	r3, [r7, #15]
 8010990:	7b79      	ldrb	r1, [r7, #13]
 8010992:	4301      	orrs	r1, r0
 8010994:	b2c8      	uxtb	r0, r1
 8010996:	490e      	ldr	r1, [pc, #56]	@ (80109d0 <OLED_ClearPoint+0x9c>)
 8010998:	00d2      	lsls	r2, r2, #3
 801099a:	440a      	add	r2, r1
 801099c:	4413      	add	r3, r2
 801099e:	4602      	mov	r2, r0
 80109a0:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 80109a2:	79fa      	ldrb	r2, [r7, #7]
 80109a4:	7bfb      	ldrb	r3, [r7, #15]
 80109a6:	490a      	ldr	r1, [pc, #40]	@ (80109d0 <OLED_ClearPoint+0x9c>)
 80109a8:	00d2      	lsls	r2, r2, #3
 80109aa:	440a      	add	r2, r1
 80109ac:	4413      	add	r3, r2
 80109ae:	7819      	ldrb	r1, [r3, #0]
 80109b0:	79fa      	ldrb	r2, [r7, #7]
 80109b2:	7bfb      	ldrb	r3, [r7, #15]
 80109b4:	43c9      	mvns	r1, r1
 80109b6:	b2c8      	uxtb	r0, r1
 80109b8:	4905      	ldr	r1, [pc, #20]	@ (80109d0 <OLED_ClearPoint+0x9c>)
 80109ba:	00d2      	lsls	r2, r2, #3
 80109bc:	440a      	add	r2, r1
 80109be:	4413      	add	r3, r2
 80109c0:	4602      	mov	r2, r0
 80109c2:	701a      	strb	r2, [r3, #0]
}
 80109c4:	bf00      	nop
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr
 80109d0:	24006b20 	.word	0x24006b20

080109d4 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 80109d4:	b590      	push	{r4, r7, lr}
 80109d6:	b085      	sub	sp, #20
 80109d8:	af00      	add	r7, sp, #0
 80109da:	4604      	mov	r4, r0
 80109dc:	4608      	mov	r0, r1
 80109de:	4611      	mov	r1, r2
 80109e0:	461a      	mov	r2, r3
 80109e2:	4623      	mov	r3, r4
 80109e4:	71fb      	strb	r3, [r7, #7]
 80109e6:	4603      	mov	r3, r0
 80109e8:	71bb      	strb	r3, [r7, #6]
 80109ea:	460b      	mov	r3, r1
 80109ec:	717b      	strb	r3, [r7, #5]
 80109ee:	4613      	mov	r3, r2
 80109f0:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 80109f2:	79bb      	ldrb	r3, [r7, #6]
 80109f4:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 80109f6:	793b      	ldrb	r3, [r7, #4]
 80109f8:	08db      	lsrs	r3, r3, #3
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	461a      	mov	r2, r3
 80109fe:	793b      	ldrb	r3, [r7, #4]
 8010a00:	f003 0307 	and.w	r3, r3, #7
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	bf14      	ite	ne
 8010a0a:	2301      	movne	r3, #1
 8010a0c:	2300      	moveq	r3, #0
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	4413      	add	r3, r2
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	793b      	ldrb	r3, [r7, #4]
 8010a16:	085b      	lsrs	r3, r3, #1
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	fb12 f303 	smulbb	r3, r2, r3
 8010a1e:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 8010a20:	797b      	ldrb	r3, [r7, #5]
 8010a22:	3b20      	subs	r3, #32
 8010a24:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 8010a26:	2300      	movs	r3, #0
 8010a28:	73fb      	strb	r3, [r7, #15]
 8010a2a:	e057      	b.n	8010adc <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 8010a2c:	793b      	ldrb	r3, [r7, #4]
 8010a2e:	2b0c      	cmp	r3, #12
 8010a30:	d10b      	bne.n	8010a4a <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 8010a32:	7aba      	ldrb	r2, [r7, #10]
 8010a34:	7bf9      	ldrb	r1, [r7, #15]
 8010a36:	482e      	ldr	r0, [pc, #184]	@ (8010af0 <OLED_ShowChar+0x11c>)
 8010a38:	4613      	mov	r3, r2
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	4413      	add	r3, r2
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4403      	add	r3, r0
 8010a42:	440b      	add	r3, r1
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	737b      	strb	r3, [r7, #13]
 8010a48:	e019      	b.n	8010a7e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 8010a4a:	793b      	ldrb	r3, [r7, #4]
 8010a4c:	2b10      	cmp	r3, #16
 8010a4e:	d108      	bne.n	8010a62 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 8010a50:	7aba      	ldrb	r2, [r7, #10]
 8010a52:	7bfb      	ldrb	r3, [r7, #15]
 8010a54:	4927      	ldr	r1, [pc, #156]	@ (8010af4 <OLED_ShowChar+0x120>)
 8010a56:	0112      	lsls	r2, r2, #4
 8010a58:	440a      	add	r2, r1
 8010a5a:	4413      	add	r3, r2
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	737b      	strb	r3, [r7, #13]
 8010a60:	e00d      	b.n	8010a7e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8010a62:	793b      	ldrb	r3, [r7, #4]
 8010a64:	2b18      	cmp	r3, #24
 8010a66:	d13e      	bne.n	8010ae6 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 8010a68:	7aba      	ldrb	r2, [r7, #10]
 8010a6a:	7bf9      	ldrb	r1, [r7, #15]
 8010a6c:	4822      	ldr	r0, [pc, #136]	@ (8010af8 <OLED_ShowChar+0x124>)
 8010a6e:	4613      	mov	r3, r2
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	4413      	add	r3, r2
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	4403      	add	r3, r0
 8010a78:	440b      	add	r3, r1
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 8010a7e:	2300      	movs	r3, #0
 8010a80:	73bb      	strb	r3, [r7, #14]
 8010a82:	e025      	b.n	8010ad0 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8010a84:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	da06      	bge.n	8010a9a <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 8010a8c:	79ba      	ldrb	r2, [r7, #6]
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	4611      	mov	r1, r2
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7ff ff20 	bl	80108d8 <OLED_DrawPoint>
 8010a98:	e005      	b.n	8010aa6 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 8010a9a:	79ba      	ldrb	r2, [r7, #6]
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff ff47 	bl	8010934 <OLED_ClearPoint>
			temp <<= 1;
 8010aa6:	7b7b      	ldrb	r3, [r7, #13]
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	737b      	strb	r3, [r7, #13]
			y++;
 8010aac:	79bb      	ldrb	r3, [r7, #6]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010ab2:	79ba      	ldrb	r2, [r7, #6]
 8010ab4:	7b3b      	ldrb	r3, [r7, #12]
 8010ab6:	1ad2      	subs	r2, r2, r3
 8010ab8:	793b      	ldrb	r3, [r7, #4]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d105      	bne.n	8010aca <OLED_ShowChar+0xf6>
			{
				y = y0;
 8010abe:	7b3b      	ldrb	r3, [r7, #12]
 8010ac0:	71bb      	strb	r3, [r7, #6]
				x++;
 8010ac2:	79fb      	ldrb	r3, [r7, #7]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	71fb      	strb	r3, [r7, #7]
				break;
 8010ac8:	e005      	b.n	8010ad6 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 8010aca:	7bbb      	ldrb	r3, [r7, #14]
 8010acc:	3301      	adds	r3, #1
 8010ace:	73bb      	strb	r3, [r7, #14]
 8010ad0:	7bbb      	ldrb	r3, [r7, #14]
 8010ad2:	2b07      	cmp	r3, #7
 8010ad4:	d9d6      	bls.n	8010a84 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	73fb      	strb	r3, [r7, #15]
 8010adc:	7bfa      	ldrb	r2, [r7, #15]
 8010ade:	7afb      	ldrb	r3, [r7, #11]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d3a3      	bcc.n	8010a2c <OLED_ShowChar+0x58>
 8010ae4:	e000      	b.n	8010ae8 <OLED_ShowChar+0x114>
			return;
 8010ae6:	bf00      	nop
			}
		}
	}
}
 8010ae8:	3714      	adds	r7, #20
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd90      	pop	{r4, r7, pc}
 8010aee:	bf00      	nop
 8010af0:	08015158 	.word	0x08015158
 8010af4:	080155cc 	.word	0x080155cc
 8010af8:	08015bbc 	.word	0x08015bbc

08010afc <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	603a      	str	r2, [r7, #0]
 8010b04:	461a      	mov	r2, r3
 8010b06:	4603      	mov	r3, r0
 8010b08:	71fb      	strb	r3, [r7, #7]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	71bb      	strb	r3, [r7, #6]
 8010b0e:	4613      	mov	r3, r2
 8010b10:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010b12:	e01b      	b.n	8010b4c <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	781a      	ldrb	r2, [r3, #0]
 8010b18:	797b      	ldrb	r3, [r7, #5]
 8010b1a:	79b9      	ldrb	r1, [r7, #6]
 8010b1c:	79f8      	ldrb	r0, [r7, #7]
 8010b1e:	f7ff ff59 	bl	80109d4 <OLED_ShowChar>
		x += size1 / 2;
 8010b22:	797b      	ldrb	r3, [r7, #5]
 8010b24:	085b      	lsrs	r3, r3, #1
 8010b26:	b2da      	uxtb	r2, r3
 8010b28:	79fb      	ldrb	r3, [r7, #7]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 8010b2e:	79fa      	ldrb	r2, [r7, #7]
 8010b30:	797b      	ldrb	r3, [r7, #5]
 8010b32:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010b36:	429a      	cmp	r2, r3
 8010b38:	dd05      	ble.n	8010b46 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 8010b3a:	2302      	movs	r3, #2
 8010b3c:	71fb      	strb	r3, [r7, #7]
			y += size1;
 8010b3e:	79ba      	ldrb	r2, [r7, #6]
 8010b40:	797b      	ldrb	r3, [r7, #5]
 8010b42:	4413      	add	r3, r2
 8010b44:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b1f      	cmp	r3, #31
 8010b52:	d903      	bls.n	8010b5c <OLED_ShowString+0x60>
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	2b7e      	cmp	r3, #126	@ 0x7e
 8010b5a:	d9db      	bls.n	8010b14 <OLED_ShowString+0x18>
	}
}
 8010b5c:	bf00      	nop
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 8010b68:	2200      	movs	r2, #0
 8010b6a:	2120      	movs	r1, #32
 8010b6c:	483f      	ldr	r0, [pc, #252]	@ (8010c6c <OLED_Init+0x108>)
 8010b6e:	f7f1 fe55 	bl	800281c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8010b72:	20c8      	movs	r0, #200	@ 0xc8
 8010b74:	f7f1 f8ca 	bl	8001d0c <HAL_Delay>
	OLED_RES_Set();
 8010b78:	2201      	movs	r2, #1
 8010b7a:	2120      	movs	r1, #32
 8010b7c:	483b      	ldr	r0, [pc, #236]	@ (8010c6c <OLED_Init+0x108>)
 8010b7e:	f7f1 fe4d 	bl	800281c <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8010b82:	2100      	movs	r1, #0
 8010b84:	20ae      	movs	r0, #174	@ 0xae
 8010b86:	f7ff fe11 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8010b8a:	2100      	movs	r1, #0
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	f7ff fe0d 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8010b92:	2100      	movs	r1, #0
 8010b94:	2010      	movs	r0, #16
 8010b96:	f7ff fe09 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	2040      	movs	r0, #64	@ 0x40
 8010b9e:	f7ff fe05 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	2081      	movs	r0, #129	@ 0x81
 8010ba6:	f7ff fe01 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8010baa:	2100      	movs	r1, #0
 8010bac:	20cf      	movs	r0, #207	@ 0xcf
 8010bae:	f7ff fdfd 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	20a1      	movs	r0, #161	@ 0xa1
 8010bb6:	f7ff fdf9 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8010bba:	2100      	movs	r1, #0
 8010bbc:	20c8      	movs	r0, #200	@ 0xc8
 8010bbe:	f7ff fdf5 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	20a6      	movs	r0, #166	@ 0xa6
 8010bc6:	f7ff fdf1 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8010bca:	2100      	movs	r1, #0
 8010bcc:	20a8      	movs	r0, #168	@ 0xa8
 8010bce:	f7ff fded 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	203f      	movs	r0, #63	@ 0x3f
 8010bd6:	f7ff fde9 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010bda:	2100      	movs	r1, #0
 8010bdc:	20d3      	movs	r0, #211	@ 0xd3
 8010bde:	f7ff fde5 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010be2:	2100      	movs	r1, #0
 8010be4:	2000      	movs	r0, #0
 8010be6:	f7ff fde1 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010bea:	2100      	movs	r1, #0
 8010bec:	20d5      	movs	r0, #213	@ 0xd5
 8010bee:	f7ff fddd 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	2080      	movs	r0, #128	@ 0x80
 8010bf6:	f7ff fdd9 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	20d9      	movs	r0, #217	@ 0xd9
 8010bfe:	f7ff fdd5 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8010c02:	2100      	movs	r1, #0
 8010c04:	20f1      	movs	r0, #241	@ 0xf1
 8010c06:	f7ff fdd1 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010c0a:	2100      	movs	r1, #0
 8010c0c:	20da      	movs	r0, #218	@ 0xda
 8010c0e:	f7ff fdcd 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8010c12:	2100      	movs	r1, #0
 8010c14:	2012      	movs	r0, #18
 8010c16:	f7ff fdc9 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010c1a:	2100      	movs	r1, #0
 8010c1c:	20db      	movs	r0, #219	@ 0xdb
 8010c1e:	f7ff fdc5 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8010c22:	2100      	movs	r1, #0
 8010c24:	2040      	movs	r0, #64	@ 0x40
 8010c26:	f7ff fdc1 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010c2a:	2100      	movs	r1, #0
 8010c2c:	2020      	movs	r0, #32
 8010c2e:	f7ff fdbd 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8010c32:	2100      	movs	r1, #0
 8010c34:	2002      	movs	r0, #2
 8010c36:	f7ff fdb9 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	208d      	movs	r0, #141	@ 0x8d
 8010c3e:	f7ff fdb5 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8010c42:	2100      	movs	r1, #0
 8010c44:	2014      	movs	r0, #20
 8010c46:	f7ff fdb1 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	20a4      	movs	r0, #164	@ 0xa4
 8010c4e:	f7ff fdad 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8010c52:	2100      	movs	r1, #0
 8010c54:	20a6      	movs	r0, #166	@ 0xa6
 8010c56:	f7ff fda9 	bl	80107ac <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	20af      	movs	r0, #175	@ 0xaf
 8010c5e:	f7ff fda5 	bl	80107ac <OLED_WR_Byte>
	OLED_Clear();
 8010c62:	f7ff fe13 	bl	801088c <OLED_Clear>
}
 8010c66:	bf00      	nop
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	58020800 	.word	0x58020800

08010c70 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010c70:	b480      	push	{r7}
 8010c72:	b087      	sub	sp, #28
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6178      	str	r0, [r7, #20]
 8010c78:	ed87 0a04 	vstr	s0, [r7, #16]
 8010c7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8010c80:	ed87 1a02 	vstr	s2, [r7, #8]
 8010c84:	edc7 1a01 	vstr	s3, [r7, #4]
 8010c88:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	693a      	ldr	r2, [r7, #16]
 8010c90:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	f04f 0200 	mov.w	r2, #0
 8010cb0:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	f04f 0200 	mov.w	r2, #0
 8010cb8:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	f04f 0200 	mov.w	r2, #0
 8010cc0:	615a      	str	r2, [r3, #20]
}
 8010cc2:	bf00      	nop
 8010cc4:	371c      	adds	r7, #28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr

08010cce <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 8010cce:	b480      	push	{r7}
 8010cd0:	b085      	sub	sp, #20
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	60f8      	str	r0, [r7, #12]
 8010cd6:	ed87 0a02 	vstr	s0, [r7, #8]
 8010cda:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 8010cde:	ed97 7a02 	vldr	s14, [r7, #8]
 8010ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8010ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	ed93 7a06 	vldr	s14, [r3, #24]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	edd3 6a00 	vldr	s13, [r3]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	ed93 6a03 	vldr	s12, [r3, #12]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	edd3 7a04 	vldr	s15, [r3, #16]
 8010d08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010d0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	ed93 6a01 	vldr	s12, [r3, #4]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	edd3 7a03 	vldr	s15, [r3, #12]
 8010d1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010d20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	ed93 6a02 	vldr	s12, [r3, #8]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	edd3 5a03 	vldr	s11, [r3, #12]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	edd3 7a04 	vldr	s15, [r3, #16]
 8010d36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010d3a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	edd3 7a05 	vldr	s15, [r3, #20]
 8010d44:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010d48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	691a      	ldr	r2, [r3, #16]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	68da      	ldr	r2, [r3, #12]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	edd3 7a07 	vldr	s15, [r3, #28]
 8010d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7e:	dd04      	ble.n	8010d8a <pid+0xbc>
		pid->out = pid->Max;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	69da      	ldr	r2, [r3, #28]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 8010d88:	e00f      	b.n	8010daa <pid+0xdc>
	else if (pid->out < pid->Min)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	edd3 7a08 	vldr	s15, [r3, #32]
 8010d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9e:	d400      	bmi.n	8010da2 <pid+0xd4>
}
 8010da0:	e003      	b.n	8010daa <pid+0xdc>
		pid->out = pid->Min;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6a1a      	ldr	r2, [r3, #32]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	619a      	str	r2, [r3, #24]
}
 8010daa:	bf00      	nop
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
	...

08010db8 <svpwm_Control>:
 * @brief  SVPWM控制
 * @param  signal PLL信号输入结构体指针
 * @param  Udc 直流母线电压
 */
void svpwm_Control(pll_Signal_V *signal, float Udc)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b095      	sub	sp, #84	@ 0x54
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	ed87 0a00 	vstr	s0, [r7]
    // 电压标幺化
    float Ts = signal->basic->Ts;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dca:	63bb      	str	r3, [r7, #56]	@ 0x38
    float Ubase = Udc / 1.7320508f;                         // 基础电压
 8010dcc:	ed97 7a00 	vldr	s14, [r7]
 8010dd0:	eddf 6ae0 	vldr	s13, [pc, #896]	@ 8011154 <svpwm_Control+0x39c>
 8010dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010dd8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float Ualpha = M * signal->basic->clarke_alpha / Ubase; // 标幺化Clarke变换后的α轴电压
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	ed93 7a06 	vldr	s14, [r3, #24]
 8010de4:	4bdc      	ldr	r3, [pc, #880]	@ (8011158 <svpwm_Control+0x3a0>)
 8010de6:	edd3 7a00 	vldr	s15, [r3]
 8010dea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010dee:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010df6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float Ubeta = M * signal->basic->clarke_beta / Ubase;   // 标幺化Clarke变换后的β轴电压
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	ed93 7a07 	vldr	s14, [r3, #28]
 8010e02:	4bd5      	ldr	r3, [pc, #852]	@ (8011158 <svpwm_Control+0x3a0>)
 8010e04:	edd3 7a00 	vldr	s15, [r3]
 8010e08:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010e0c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e14:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // 计算中间变量
    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 8010e18:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8010e1c:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 8011154 <svpwm_Control+0x39c>
 8010e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010e24:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8010e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e2c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float Ubeta_ = Ubeta * Ts;
 8010e30:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010e34:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // 计算XYZ
    float X = Ubeta_;
 8010e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e42:	623b      	str	r3, [r7, #32]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 8010e44:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010e48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010e4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e50:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010e54:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e60:	edc7 7a07 	vstr	s15, [r7, #28]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 8010e64:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010e68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010e74:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e80:	edc7 7a06 	vstr	s15, [r7, #24]

    // 通过XYZ做扇区判断
    uint8_t sector = 0;
 8010e84:	2300      	movs	r3, #0
 8010e86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (Y < 0)
 8010e8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8010e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e96:	d517      	bpl.n	8010ec8 <svpwm_Control+0x110>
    {
        if (Z < 0)
 8010e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8010e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea4:	d503      	bpl.n	8010eae <svpwm_Control+0xf6>
            sector = 5;
 8010ea6:	2305      	movs	r3, #5
 8010ea8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010eac:	e023      	b.n	8010ef6 <svpwm_Control+0x13e>
        else
            sector = (X < 0) ? 4 : 3;
 8010eae:	edd7 7a08 	vldr	s15, [r7, #32]
 8010eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eba:	d501      	bpl.n	8010ec0 <svpwm_Control+0x108>
 8010ebc:	2304      	movs	r3, #4
 8010ebe:	e000      	b.n	8010ec2 <svpwm_Control+0x10a>
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010ec6:	e016      	b.n	8010ef6 <svpwm_Control+0x13e>
    }
    else
    {
        if (Z > 0)
 8010ec8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed4:	dd03      	ble.n	8010ede <svpwm_Control+0x126>
            sector = 2;
 8010ed6:	2302      	movs	r3, #2
 8010ed8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010edc:	e00b      	b.n	8010ef6 <svpwm_Control+0x13e>
        else
            sector = (X < 0) ? 6 : 1;
 8010ede:	edd7 7a08 	vldr	s15, [r7, #32]
 8010ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eea:	d501      	bpl.n	8010ef0 <svpwm_Control+0x138>
 8010eec:	2306      	movs	r3, #6
 8010eee:	e000      	b.n	8010ef2 <svpwm_Control+0x13a>
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 8010ef6:	f04f 0300 	mov.w	r3, #0
 8010efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010efc:	f04f 0300 	mov.w	r3, #0
 8010f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f02:	f04f 0300 	mov.w	r3, #0
 8010f06:	643b      	str	r3, [r7, #64]	@ 0x40
    switch (sector)
 8010f08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	2b05      	cmp	r3, #5
 8010f10:	f200 80f0 	bhi.w	80110f4 <svpwm_Control+0x33c>
 8010f14:	a201      	add	r2, pc, #4	@ (adr r2, 8010f1c <svpwm_Control+0x164>)
 8010f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f1a:	bf00      	nop
 8010f1c:	08010f35 	.word	0x08010f35
 8010f20:	08010f7f 	.word	0x08010f7f
 8010f24:	08010fc9 	.word	0x08010fc9
 8010f28:	08011013 	.word	0x08011013
 8010f2c:	0801105d 	.word	0x0801105d
 8010f30:	080110ab 	.word	0x080110ab
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 8010f34:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010f38:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010f40:	edd7 6a08 	vldr	s13, [r7, #32]
 8010f44:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010f4c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010f50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f58:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8010f5c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010f60:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f68:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010f6c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010f70:	edd7 7a08 	vldr	s15, [r7, #32]
 8010f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f78:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010f7c:	e0ba      	b.n	80110f4 <svpwm_Control+0x33c>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 8010f7e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010f82:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010f8a:	edd7 6a06 	vldr	s13, [r7, #24]
 8010f8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8010f92:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010f96:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010f9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fa2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 8010fa6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010faa:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fb2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 8010fb6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8010fba:	edd7 7a07 	vldr	s15, [r7, #28]
 8010fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fc2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 8010fc6:	e095      	b.n	80110f4 <svpwm_Control+0x33c>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 8010fc8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010fcc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010fd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010fd4:	edd7 6a08 	vldr	s13, [r7, #32]
 8010fd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8010fdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010fe0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010fe4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fec:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Tc = Tb - X;
 8010ff0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8010ff4:	edd7 7a08 	vldr	s15, [r7, #32]
 8010ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ffc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8011000:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011004:	edd7 7a07 	vldr	s15, [r7, #28]
 8011008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801100c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 8011010:	e070      	b.n	80110f4 <svpwm_Control+0x33c>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 8011012:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8011016:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801101a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801101e:	edd7 6a06 	vldr	s13, [r7, #24]
 8011022:	edd7 7a08 	vldr	s15, [r7, #32]
 8011026:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801102a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801102e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011036:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 801103a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 801103e:	edd7 7a08 	vldr	s15, [r7, #32]
 8011042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011046:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        Ta = Tb - Z;
 801104a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 801104e:	edd7 7a06 	vldr	s15, [r7, #24]
 8011052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011056:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        break;
 801105a:	e04b      	b.n	80110f4 <svpwm_Control+0x33c>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 801105c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8011060:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011064:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011068:	edd7 7a07 	vldr	s15, [r7, #28]
 801106c:	eef1 6a67 	vneg.f32	s13, s15
 8011070:	edd7 7a06 	vldr	s15, [r7, #24]
 8011074:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011078:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801107c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011084:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Ta = Tc + Y;
 8011088:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 801108c:	edd7 7a07 	vldr	s15, [r7, #28]
 8011090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011094:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tb = Ta + Z;
 8011098:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 801109c:	edd7 7a06 	vldr	s15, [r7, #24]
 80110a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110a4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 80110a8:	e024      	b.n	80110f4 <svpwm_Control+0x33c>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 80110aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80110ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80110b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80110b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80110ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80110be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80110c2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80110c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80110ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110ce:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
        Tc = Ta - Y;
 80110d2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80110d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80110da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110de:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Tc + X;
 80110e2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80110e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80110ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110ee:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        break;
 80110f2:	bf00      	nop
    }

    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 80110f4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80110f8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80110fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011100:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 801115c <svpwm_Control+0x3a4>
 8011104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801110c:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8011110:	60fb      	str	r3, [r7, #12]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 8011112:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8011116:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801111a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801111e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 801115c <svpwm_Control+0x3a4>
 8011122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801112a:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 801112e:	613b      	str	r3, [r7, #16]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 8011130:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8011134:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8011138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801113c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 801115c <svpwm_Control+0x3a4>
 8011140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011148:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 801114c:	617b      	str	r3, [r7, #20]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 801114e:	2300      	movs	r3, #0
 8011150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011152:	e01a      	b.n	801118a <svpwm_Control+0x3d2>
 8011154:	3fddb3d7 	.word	0x3fddb3d7
 8011158:	24009538 	.word	0x24009538
 801115c:	45bb7800 	.word	0x45bb7800
    {
        if (ccr[i] > TIM_PERIOD)
 8011160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	3350      	adds	r3, #80	@ 0x50
 8011166:	443b      	add	r3, r7
 8011168:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801116c:	f241 726f 	movw	r2, #5999	@ 0x176f
 8011170:	4293      	cmp	r3, r2
 8011172:	d907      	bls.n	8011184 <svpwm_Control+0x3cc>
        {
            ccr[i] = TIM_PERIOD;
 8011174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	3350      	adds	r3, #80	@ 0x50
 801117a:	443b      	add	r3, r7
 801117c:	f241 726f 	movw	r2, #5999	@ 0x176f
 8011180:	f843 2c44 	str.w	r2, [r3, #-68]
    for (int i = 0; i < 3; ++i)
 8011184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011186:	3301      	adds	r3, #1
 8011188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801118a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801118c:	2b02      	cmp	r3, #2
 801118e:	dde7      	ble.n	8011160 <svpwm_Control+0x3a8>
            ccr[i] = 0;
        }
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 8011190:	4a07      	ldr	r2, [pc, #28]	@ (80111b0 <svpwm_Control+0x3f8>)
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 8011196:	4a06      	ldr	r2, [pc, #24]	@ (80111b0 <svpwm_Control+0x3f8>)
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 801119c:	4a04      	ldr	r2, [pc, #16]	@ (80111b0 <svpwm_Control+0x3f8>)
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80111a2:	bf00      	nop
 80111a4:	3754      	adds	r7, #84	@ 0x54
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	40010000 	.word	0x40010000
 80111b4:	00000000 	.word	0x00000000

080111b8 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F, float Umax)
{
 80111b8:	b590      	push	{r4, r7, lr}
 80111ba:	b087      	sub	sp, #28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80111c4:	460b      	mov	r3, r1
 80111c6:	edc7 0a00 	vstr	s1, [r7]
 80111ca:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 80111cc:	200c      	movs	r0, #12
 80111ce:	f000 fe3f 	bl	8011e50 <malloc>
 80111d2:	4603      	mov	r3, r0
 80111d4:	461a      	mov	r2, r3
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681c      	ldr	r4, [r3, #0]
 80111de:	2050      	movs	r0, #80	@ 0x50
 80111e0:	f000 fe36 	bl	8011e50 <malloc>
 80111e4:	4603      	mov	r3, r0
 80111e6:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681c      	ldr	r4, [r3, #0]
 80111ec:	2024      	movs	r0, #36	@ 0x24
 80111ee:	f000 fe2f 	bl	8011e50 <malloc>
 80111f2:	4603      	mov	r3, r0
 80111f4:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f04f 0200 	mov.w	r2, #0
 8011200:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	f04f 0200 	mov.w	r2, #0
 801120c:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f04f 0200 	mov.w	r2, #0
 8011218:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f04f 0200 	mov.w	r2, #0
 8011224:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f04f 0200 	mov.w	r2, #0
 8011230:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f04f 0200 	mov.w	r2, #0
 801123c:	615a      	str	r2, [r3, #20]

    (*signal)->theta = 0.f;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f04f 0200 	mov.w	r2, #0
 8011246:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	edd7 7a02 	vldr	s15, [r7, #8]
 8011252:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8011308 <pll_Init_V+0x150>
 8011256:	ee67 7a87 	vmul.f32	s15, s15, s14
 801125a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 801125e:	88fb      	ldrh	r3, [r7, #6]
 8011260:	ee07 3a90 	vmov	s15, r3
 8011264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011276:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0 / Umax;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801128e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011292:	ed97 7a00 	vldr	s14, [r7]
 8011296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801129a:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(Umax * ki) / Umax;
 801129e:	ed97 7a00 	vldr	s14, [r7]
 80112a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80112a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80112ae:	eeb0 0b47 	vmov.f64	d0, d7
 80112b2:	f003 fba9 	bl	8014a08 <sqrt>
 80112b6:	eeb0 7b40 	vmov.f64	d7, d0
 80112ba:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8011300 <pll_Init_V+0x148>
 80112be:	ee27 5b06 	vmul.f64	d5, d7, d6
 80112c2:	edd7 7a00 	vldr	s15, [r7]
 80112c6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80112ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80112ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80112d2:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	689b      	ldr	r3, [r3, #8]
 80112dc:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 801130c <pll_Init_V+0x154>
 80112e0:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 8011310 <pll_Init_V+0x158>
 80112e4:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8011314 <pll_Init_V+0x15c>
 80112e8:	edd7 0a05 	vldr	s1, [r7, #20]
 80112ec:	ed97 0a04 	vldr	s0, [r7, #16]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff fcbd 	bl	8010c70 <pid_Init>
}
 80112f6:	bf00      	nop
 80112f8:	371c      	adds	r7, #28
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd90      	pop	{r4, r7, pc}
 80112fe:	bf00      	nop
 8011300:	667f3bcd 	.word	0x667f3bcd
 8011304:	3ff6a09e 	.word	0x3ff6a09e
 8011308:	40c90fdb 	.word	0x40c90fdb
 801130c:	c27b53d2 	.word	0xc27b53d2
 8011310:	431d1463 	.word	0x431d1463
 8011314:	00000000 	.word	0x00000000

08011318 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 8011318:	b590      	push	{r4, r7, lr}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	ed87 0a02 	vstr	s0, [r7, #8]
 8011324:	460b      	mov	r3, r1
 8011326:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 8011328:	2028      	movs	r0, #40	@ 0x28
 801132a:	f000 fd91 	bl	8011e50 <malloc>
 801132e:	4603      	mov	r3, r0
 8011330:	461a      	mov	r2, r3
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681c      	ldr	r4, [r3, #0]
 801133a:	2050      	movs	r0, #80	@ 0x50
 801133c:	f000 fd88 	bl	8011e50 <malloc>
 8011340:	4603      	mov	r3, r0
 8011342:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681c      	ldr	r4, [r3, #0]
 8011348:	2024      	movs	r0, #36	@ 0x24
 801134a:	f000 fd81 	bl	8011e50 <malloc>
 801134e:	4603      	mov	r3, r0
 8011350:	6223      	str	r3, [r4, #32]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681c      	ldr	r4, [r3, #0]
 8011356:	2024      	movs	r0, #36	@ 0x24
 8011358:	f000 fd7a 	bl	8011e50 <malloc>
 801135c:	4603      	mov	r3, r0
 801135e:	6263      	str	r3, [r4, #36]	@ 0x24
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f04f 0200 	mov.w	r2, #0
 801136a:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f04f 0200 	mov.w	r2, #0
 8011376:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f04f 0200 	mov.w	r2, #0
 8011382:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	f04f 0200 	mov.w	r2, #0
 801138e:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f04f 0200 	mov.w	r2, #0
 801139a:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f04f 0200 	mov.w	r2, #0
 80113a6:	615a      	str	r2, [r3, #20]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80113b2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011434 <pll_Init_I+0x11c>
 80113b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80113ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 80113be:	88fb      	ldrh	r3, [r7, #6]
 80113c0:	ee07 3a90 	vmov	s15, r3
 80113c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80113d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113d6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    (*signal)->CorL = 0;   // 0:感性 1:容性
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2200      	movs	r2, #0
 80113e0:	761a      	strb	r2, [r3, #24]
    (*signal)->L = 0.001f; // 1mH
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	4a14      	ldr	r2, [pc, #80]	@ (8011438 <pll_Init_I+0x120>)
 80113e8:	61da      	str	r2, [r3, #28]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 0.5f, 0.01f, 0, -80.f, -160.f);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	6a1b      	ldr	r3, [r3, #32]
 80113f0:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 801143c <pll_Init_I+0x124>
 80113f4:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8011440 <pll_Init_I+0x128>
 80113f8:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8011444 <pll_Init_I+0x12c>
 80113fc:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8011448 <pll_Init_I+0x130>
 8011400:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8011404:	4618      	mov	r0, r3
 8011406:	f7ff fc33 	bl	8010c70 <pid_Init>
    pid_Init((*signal)->pid_q, 0.5f, 0.01f, 0, 20.f, -10.f);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011410:	eeba 2a04 	vmov.f32	s4, #164	@ 0xc1200000 -10.0
 8011414:	eef3 1a04 	vmov.f32	s3, #52	@ 0x41a00000  20.0
 8011418:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8011444 <pll_Init_I+0x12c>
 801141c:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8011448 <pll_Init_I+0x130>
 8011420:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff fc23 	bl	8010c70 <pid_Init>
}
 801142a:	bf00      	nop
 801142c:	3714      	adds	r7, #20
 801142e:	46bd      	mov	sp, r7
 8011430:	bd90      	pop	{r4, r7, pc}
 8011432:	bf00      	nop
 8011434:	40c90fdb 	.word	0x40c90fdb
 8011438:	3a83126f 	.word	0x3a83126f
 801143c:	c3200000 	.word	0xc3200000
 8011440:	c2a00000 	.word	0xc2a00000
 8011444:	00000000 	.word	0x00000000
 8011448:	3c23d70a 	.word	0x3c23d70a
 801144c:	00000000 	.word	0x00000000

08011450 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 8011450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011454:	ed2d 8b02 	vpush	{d8}
 8011458:	b08c      	sub	sp, #48	@ 0x30
 801145a:	af00      	add	r7, sp, #0
 801145c:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_V->basic->input_a, signal_V->basic->input_b, &signal_V->basic->clarke_alpha, &signal_V->basic->clarke_beta);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	6818      	ldr	r0, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	6859      	ldr	r1, [r3, #4]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f103 0218 	add.w	r2, r3, #24
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	331c      	adds	r3, #28
 8011478:	6178      	str	r0, [r7, #20]
 801147a:	6139      	str	r1, [r7, #16]
 801147c:	60fa      	str	r2, [r7, #12]
 801147e:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	697a      	ldr	r2, [r7, #20]
 8011484:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8011486:	edd7 7a05 	vldr	s15, [r7, #20]
 801148a:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80115d0 <pll_Control_V+0x180>
 801148e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011492:	edd7 7a04 	vldr	s15, [r7, #16]
 8011496:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80115d4 <pll_Control_V+0x184>
 801149a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801149e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	edc3 7a00 	vstr	s15, [r3]
  }
 80114a8:	bf00      	nop
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	69de      	ldr	r6, [r3, #28]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f103 0520 	add.w	r5, r3, #32
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80114ce:	eeb0 0a67 	vmov.f32	s0, s15
 80114d2:	f000 fc2d 	bl	8011d30 <arm_sin_f32>
 80114d6:	eeb0 8a40 	vmov.f32	s16, s0
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80114e0:	eeb0 0a67 	vmov.f32	s0, s15
 80114e4:	f000 fc6a 	bl	8011dbc <arm_cos_f32>
 80114e8:	eef0 7a40 	vmov.f32	s15, s0
 80114ec:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 80114f0:	62be      	str	r6, [r7, #40]	@ 0x28
 80114f2:	627d      	str	r5, [r7, #36]	@ 0x24
 80114f4:	623c      	str	r4, [r7, #32]
 80114f6:	ed87 8a07 	vstr	s16, [r7, #28]
 80114fa:	edc7 7a06 	vstr	s15, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80114fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011502:	edd7 7a06 	vldr	s15, [r7, #24]
 8011506:	ee27 7a27 	vmul.f32	s14, s14, s15
 801150a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801150e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151c:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011520:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011524:	eeb1 7a67 	vneg.f32	s14, s15
 8011528:	edd7 7a07 	vldr	s15, [r7, #28]
 801152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011530:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8011534:	edd7 7a06 	vldr	s15, [r7, #24]
 8011538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011540:	6a3b      	ldr	r3, [r7, #32]
 8011542:	edc3 7a00 	vstr	s15, [r3]
  }
 8011546:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	689a      	ldr	r2, [r3, #8]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011554:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80115d8 <pll_Control_V+0x188>
 8011558:	eeb0 0a67 	vmov.f32	s0, s15
 801155c:	4610      	mov	r0, r2
 801155e:	f7ff fbb6 	bl	8010cce <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	ed93 7a01 	vldr	s14, [r3, #4]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	689b      	ldr	r3, [r3, #8]
 801156c:	edd3 6a06 	vldr	s13, [r3, #24]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011578:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011588:	ee77 7a27 	vadd.f32	s15, s14, s15
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	edd3 7a01 	vldr	s15, [r3, #4]
 8011598:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801159c:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 80115c8 <pll_Control_V+0x178>
 80115a0:	eeb0 0b47 	vmov.f64	d0, d7
 80115a4:	f003 fa0c 	bl	80149c0 <fmod>
 80115a8:	eeb0 7b40 	vmov.f64	d7, d0
 80115ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80115b6:	bf00      	nop
 80115b8:	3730      	adds	r7, #48	@ 0x30
 80115ba:	46bd      	mov	sp, r7
 80115bc:	ecbd 8b02 	vpop	{d8}
 80115c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c4:	f3af 8000 	nop.w
 80115c8:	60000000 	.word	0x60000000
 80115cc:	401921fb 	.word	0x401921fb
 80115d0:	3f13cd3a 	.word	0x3f13cd3a
 80115d4:	3f93cd3a 	.word	0x3f93cd3a
 80115d8:	00000000 	.word	0x00000000

080115dc <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 80115dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e0:	ed2d 8b02 	vpush	{d8}
 80115e4:	b094      	sub	sp, #80	@ 0x50
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	60f8      	str	r0, [r7, #12]
 80115ea:	60b9      	str	r1, [r7, #8]
 80115ec:	ed87 0a01 	vstr	s0, [r7, #4]
 80115f0:	edc7 0a00 	vstr	s1, [r7]
    static float Uabd;
    static float Uabq;
    static float PFTheta;
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_I->basic->input_a, signal_I->basic->input_b, &signal_I->basic->clarke_alpha, &signal_I->basic->clarke_beta);
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	6818      	ldr	r0, [r3, #0]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	6859      	ldr	r1, [r3, #4]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f103 0218 	add.w	r2, r3, #24
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	331c      	adds	r3, #28
 801160e:	6378      	str	r0, [r7, #52]	@ 0x34
 8011610:	6339      	str	r1, [r7, #48]	@ 0x30
 8011612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011614:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pIalpha = Ia;
 8011616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801161a:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 801161c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8011620:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80118c8 <pll_Control_I+0x2ec>
 8011624:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011628:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801162c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80118cc <pll_Control_I+0x2f0>
 8011630:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801163a:	edc3 7a00 	vstr	s15, [r3]
  }
 801163e:	bf00      	nop
    // 在电压的系上得出电流的dq值
    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	69de      	ldr	r6, [r3, #28]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f103 0520 	add.w	r5, r3, #32
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	edd3 7a01 	vldr	s15, [r3, #4]
 8011664:	eeb0 0a67 	vmov.f32	s0, s15
 8011668:	f000 fb62 	bl	8011d30 <arm_sin_f32>
 801166c:	eeb0 8a40 	vmov.f32	s16, s0
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	edd3 7a01 	vldr	s15, [r3, #4]
 8011676:	eeb0 0a67 	vmov.f32	s0, s15
 801167a:	f000 fb9f 	bl	8011dbc <arm_cos_f32>
 801167e:	eef0 7a40 	vmov.f32	s15, s0
 8011682:	f8c7 804c 	str.w	r8, [r7, #76]	@ 0x4c
 8011686:	64be      	str	r6, [r7, #72]	@ 0x48
 8011688:	647d      	str	r5, [r7, #68]	@ 0x44
 801168a:	643c      	str	r4, [r7, #64]	@ 0x40
 801168c:	ed87 8a0f 	vstr	s16, [r7, #60]	@ 0x3c
 8011690:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011694:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8011698:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801169c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116a0:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80116a4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80116a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116b2:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80116b6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80116ba:	eeb1 7a67 	vneg.f32	s14, s15
 80116be:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80116c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116c6:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80116ca:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80116ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116d8:	edc3 7a00 	vstr	s15, [r3]
  }
 80116dc:	bf00      	nop
    // PI控制
    PFTheta = acosf(PF);
 80116de:	ed97 0a00 	vldr	s0, [r7]
 80116e2:	f003 f9b1 	bl	8014a48 <acosf>
 80116e6:	eef0 7a40 	vmov.f32	s15, s0
 80116ea:	4b79      	ldr	r3, [pc, #484]	@ (80118d0 <pll_Control_I+0x2f4>)
 80116ec:	edc3 7a00 	vstr	s15, [r3]
    pid(signal_I->pid_d, Iset * 1.414f * arm_cos_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6a1c      	ldr	r4, [r3, #32]
 80116f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80116f8:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80118d4 <pll_Control_I+0x2f8>
 80116fc:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011700:	4b73      	ldr	r3, [pc, #460]	@ (80118d0 <pll_Control_I+0x2f4>)
 8011702:	edd3 7a00 	vldr	s15, [r3]
 8011706:	eeb0 0a67 	vmov.f32	s0, s15
 801170a:	f000 fb57 	bl	8011dbc <arm_cos_f32>
 801170e:	eef0 7a40 	vmov.f32	s15, s0
 8011712:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	ed93 7a08 	vldr	s14, [r3, #32]
 801171e:	eef0 0a47 	vmov.f32	s1, s14
 8011722:	eeb0 0a67 	vmov.f32	s0, s15
 8011726:	4620      	mov	r0, r4
 8011728:	f7ff fad1 	bl	8010cce <pid>
    if (signal_I->CorL == 1)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	7e1b      	ldrb	r3, [r3, #24]
 8011730:	2b01      	cmp	r3, #1
 8011732:	d11e      	bne.n	8011772 <pll_Control_I+0x196>
    {
        pid(signal_I->pid_q, Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011738:	edd7 7a01 	vldr	s15, [r7, #4]
 801173c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80118d4 <pll_Control_I+0x2f8>
 8011740:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011744:	4b62      	ldr	r3, [pc, #392]	@ (80118d0 <pll_Control_I+0x2f4>)
 8011746:	edd3 7a00 	vldr	s15, [r3]
 801174a:	eeb0 0a67 	vmov.f32	s0, s15
 801174e:	f000 faef 	bl	8011d30 <arm_sin_f32>
 8011752:	eef0 7a40 	vmov.f32	s15, s0
 8011756:	ee68 7a27 	vmul.f32	s15, s16, s15
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011762:	eef0 0a47 	vmov.f32	s1, s14
 8011766:	eeb0 0a67 	vmov.f32	s0, s15
 801176a:	4620      	mov	r0, r4
 801176c:	f7ff faaf 	bl	8010cce <pid>
 8011770:	e01f      	b.n	80117b2 <pll_Control_I+0x1d6>
    }
    else
    {
        pid(signal_I->pid_q, -Iset * 1.414f * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011776:	edd7 7a01 	vldr	s15, [r7, #4]
 801177a:	eef1 7a67 	vneg.f32	s15, s15
 801177e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80118d4 <pll_Control_I+0x2f8>
 8011782:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011786:	4b52      	ldr	r3, [pc, #328]	@ (80118d0 <pll_Control_I+0x2f4>)
 8011788:	edd3 7a00 	vldr	s15, [r3]
 801178c:	eeb0 0a67 	vmov.f32	s0, s15
 8011790:	f000 face 	bl	8011d30 <arm_sin_f32>
 8011794:	eef0 7a40 	vmov.f32	s15, s0
 8011798:	ee68 7a27 	vmul.f32	s15, s16, s15
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80117a4:	eef0 0a47 	vmov.f32	s1, s14
 80117a8:	eeb0 0a67 	vmov.f32	s0, s15
 80117ac:	4620      	mov	r0, r4
 80117ae:	f7ff fa8e 	bl	8010cce <pid>
    }
    // 解耦调制
    Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	6a1b      	ldr	r3, [r3, #32]
 80117be:	edd3 7a06 	vldr	s15, [r3, #24]
 80117c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80117d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80117e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117e8:	4b3b      	ldr	r3, [pc, #236]	@ (80118d8 <pll_Control_I+0x2fc>)
 80117ea:	edc3 7a00 	vstr	s15, [r3]
    Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80117fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	edd3 6a08 	vldr	s13, [r3, #32]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011812:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	edd3 7a07 	vldr	s15, [r3, #28]
 801181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011824:	4b2d      	ldr	r3, [pc, #180]	@ (80118dc <pll_Control_I+0x300>)
 8011826:	edc3 7a00 	vstr	s15, [r3]
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 801182a:	4b2b      	ldr	r3, [pc, #172]	@ (80118d8 <pll_Control_I+0x2fc>)
 801182c:	f8d3 8000 	ldr.w	r8, [r3]
 8011830:	4b2a      	ldr	r3, [pc, #168]	@ (80118dc <pll_Control_I+0x300>)
 8011832:	681e      	ldr	r6, [r3, #0]
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	1d1d      	adds	r5, r3, #4
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f103 0408 	add.w	r4, r3, #8
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	edd3 7a01 	vldr	s15, [r3, #4]
 8011844:	eeb0 0a67 	vmov.f32	s0, s15
 8011848:	f000 fa72 	bl	8011d30 <arm_sin_f32>
 801184c:	eeb0 8a40 	vmov.f32	s16, s0
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	edd3 7a01 	vldr	s15, [r3, #4]
 8011856:	eeb0 0a67 	vmov.f32	s0, s15
 801185a:	f000 faaf 	bl	8011dbc <arm_cos_f32>
 801185e:	eef0 7a40 	vmov.f32	s15, s0
 8011862:	f8c7 8024 	str.w	r8, [r7, #36]	@ 0x24
 8011866:	623e      	str	r6, [r7, #32]
 8011868:	61fd      	str	r5, [r7, #28]
 801186a:	61bc      	str	r4, [r7, #24]
 801186c:	ed87 8a05 	vstr	s16, [r7, #20]
 8011870:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011874:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011878:	edd7 7a04 	vldr	s15, [r7, #16]
 801187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011880:	edd7 6a08 	vldr	s13, [r7, #32]
 8011884:	edd7 7a05 	vldr	s15, [r7, #20]
 8011888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801188c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 8011896:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801189a:	edd7 7a05 	vldr	s15, [r7, #20]
 801189e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118a2:	edd7 6a08 	vldr	s13, [r7, #32]
 80118a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80118aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	edc3 7a00 	vstr	s15, [r3]
  }
 80118b8:	bf00      	nop
}
 80118ba:	bf00      	nop
 80118bc:	3750      	adds	r7, #80	@ 0x50
 80118be:	46bd      	mov	sp, r7
 80118c0:	ecbd 8b02 	vpop	{d8}
 80118c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118c8:	3f13cd3a 	.word	0x3f13cd3a
 80118cc:	3f93cd3a 	.word	0x3f93cd3a
 80118d0:	24006fa0 	.word	0x24006fa0
 80118d4:	3fb4fdf4 	.word	0x3fb4fdf4
 80118d8:	24006fa4 	.word	0x24006fa4
 80118dc:	24006fa8 	.word	0x24006fa8

080118e0 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b090      	sub	sp, #64	@ 0x40
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	4603      	mov	r3, r0
 80118e8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 80118ea:	88fb      	ldrh	r3, [r7, #6]
 80118ec:	2b40      	cmp	r3, #64	@ 0x40
 80118ee:	f040 81b0 	bne.w	8011c52 <HAL_GPIO_EXTI_Callback+0x372>
    {
        // 读取AD7606数据
        float adcValue[8] = {0};
 80118f2:	f107 030c 	add.w	r3, r7, #12
 80118f6:	2220      	movs	r2, #32
 80118f8:	2100      	movs	r1, #0
 80118fa:	4618      	mov	r0, r3
 80118fc:	f001 f8b9 	bl	8012a72 <memset>
        float temp_V1, temp_V2;
        ad7606_GetValue(&hspi2, 7, adcValue);
 8011900:	f107 030c 	add.w	r3, r7, #12
 8011904:	461a      	mov	r2, r3
 8011906:	2107      	movs	r1, #7
 8011908:	48ba      	ldr	r0, [pc, #744]	@ (8011bf4 <HAL_GPIO_EXTI_Callback+0x314>)
 801190a:	f7fe fd8b 	bl	8010424 <ad7606_GetValue>
        // 处理电流数据
        signal_I->basic->input_a = adcValue[1] * 2.2258065f;
 801190e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011912:	4bb9      	ldr	r3, [pc, #740]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8011bfc <HAL_GPIO_EXTI_Callback+0x31c>
 801191c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011920:	edc3 7a00 	vstr	s15, [r3]
        signal_I->basic->input_b = adcValue[3] * 2.2258065f;
 8011924:	edd7 7a06 	vldr	s15, [r7, #24]
 8011928:	4bb3      	ldr	r3, [pc, #716]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8011bfc <HAL_GPIO_EXTI_Callback+0x31c>
 8011932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011936:	edc3 7a01 	vstr	s15, [r3, #4]
        signal_I->basic->input_c = adcValue[5] * 2.2258065f;
 801193a:	edd7 7a08 	vldr	s15, [r7, #32]
 801193e:	4bae      	ldr	r3, [pc, #696]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8011bfc <HAL_GPIO_EXTI_Callback+0x31c>
 8011948:	ee67 7a87 	vmul.f32	s15, s15, s14
 801194c:	edc3 7a02 	vstr	s15, [r3, #8]
        // 处理电压数据，将线电压转为相电压
        float Uab = adcValue[2] * 38.423350f;
 8011950:	edd7 7a05 	vldr	s15, [r7, #20]
 8011954:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8011c00 <HAL_GPIO_EXTI_Callback+0x320>
 8011958:	ee67 7a87 	vmul.f32	s15, s15, s14
 801195c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        float Ubc = adcValue[4] * 38.669998f;
 8011960:	edd7 7a07 	vldr	s15, [r7, #28]
 8011964:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8011c04 <HAL_GPIO_EXTI_Callback+0x324>
 8011968:	ee67 7a87 	vmul.f32	s15, s15, s14
 801196c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        float Uca = adcValue[6] * 38.560814f;
 8011970:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011974:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8011c08 <HAL_GPIO_EXTI_Callback+0x328>
 8011978:	ee67 7a87 	vmul.f32	s15, s15, s14
 801197c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

        signal_V->basic->input_a = (Uab - Uca) / 3.f;
 8011980:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011984:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8011988:	ee37 7a67 	vsub.f32	s14, s14, s15
 801198c:	4b9f      	ldr	r3, [pc, #636]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801199a:	edc3 7a00 	vstr	s15, [r3]
        signal_V->basic->input_b = (Ubc - Uab) / 3.f;
 801199e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80119a2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80119a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119aa:	4b98      	ldr	r3, [pc, #608]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80119b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80119b8:	edc3 7a01 	vstr	s15, [r3, #4]
        signal_V->basic->input_c = (Uca - Ubc) / 3.f;
 80119bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80119c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80119c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119c8:	4b90      	ldr	r3, [pc, #576]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80119d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80119d6:	edc3 7a02 	vstr	s15, [r3, #8]

        temp_V1 = signal_V->basic->input_a;
 80119da:	4b8c      	ldr	r3, [pc, #560]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	633b      	str	r3, [r7, #48]	@ 0x30
        temp_V2 = signal_V->basic->input_b;
 80119e4:	4b89      	ldr	r3, [pc, #548]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // 模拟三相输入
        volatile static uint16_t cnt = 0;
        signal_V->basic->input_a = 11.f * arm_sin_f32(cnt * 2 * PI / 400);
 80119ee:	4b88      	ldr	r3, [pc, #544]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	ee07 3a90 	vmov	s15, r3
 80119fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119fe:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8011c14 <HAL_GPIO_EXTI_Callback+0x334>
 8011a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a06:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8011c18 <HAL_GPIO_EXTI_Callback+0x338>
 8011a0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8011a12:	f000 f98d 	bl	8011d30 <arm_sin_f32>
 8011a16:	eef0 7a40 	vmov.f32	s15, s0
 8011a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8011a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a28:	edc3 7a00 	vstr	s15, [r3]
        signal_V->basic->input_b = 11.f * arm_sin_f32(cnt * 2 * PI / 400 - 2 * PI / 3);
 8011a2c:	4b78      	ldr	r3, [pc, #480]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011a2e:	881b      	ldrh	r3, [r3, #0]
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	ee07 3a90 	vmov	s15, r3
 8011a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a3c:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8011c14 <HAL_GPIO_EXTI_Callback+0x334>
 8011a40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011a44:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8011c18 <HAL_GPIO_EXTI_Callback+0x338>
 8011a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011a4c:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8011c1c <HAL_GPIO_EXTI_Callback+0x33c>
 8011a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a54:	eeb0 0a67 	vmov.f32	s0, s15
 8011a58:	f000 f96a 	bl	8011d30 <arm_sin_f32>
 8011a5c:	eef0 7a40 	vmov.f32	s15, s0
 8011a60:	4b6a      	ldr	r3, [pc, #424]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8011a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a6e:	edc3 7a01 	vstr	s15, [r3, #4]
        // 锁相控制
        pll_Control_V(signal_V);
 8011a72:	4b66      	ldr	r3, [pc, #408]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7ff fcea 	bl	8011450 <pll_Control_V>
        // 电流内环控制
        pll_Control_I(signal_I, signal_V, 0.5f, 1.f);
 8011a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4a62      	ldr	r2, [pc, #392]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011a82:	6812      	ldr	r2, [r2, #0]
 8011a84:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011a88:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7ff fda4 	bl	80115dc <pll_Control_I>
        // svpwm调制
        svpwm_Control(signal_V, 20.f);
 8011a94:	4b5d      	ldr	r3, [pc, #372]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7ff f98b 	bl	8010db8 <svpwm_Control>
        // DAC输出
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f));
 8011aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8011c20 <HAL_GPIO_EXTI_Callback+0x340>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011aa8:	ee07 3a90 	vmov	s15, r3
 8011aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ab0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8011c24 <HAL_GPIO_EXTI_Callback+0x344>
 8011ab4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011ab8:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8011c24 <HAL_GPIO_EXTI_Callback+0x344>
 8011abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ac0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011c28 <HAL_GPIO_EXTI_Callback+0x348>
 8011ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ac8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011c2c <HAL_GPIO_EXTI_Callback+0x34c>
 8011acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ad4:	ee17 3a90 	vmov	r3, s15
 8011ad8:	2200      	movs	r2, #0
 8011ada:	2100      	movs	r1, #0
 8011adc:	4854      	ldr	r0, [pc, #336]	@ (8011c30 <HAL_GPIO_EXTI_Callback+0x350>)
 8011ade:	f7f0 fb6c 	bl	80021ba <HAL_DAC_SetValue>
        static float V_rms_c[400] = {0};
        static float I_rms_a[400] = {0};
        static float I_rms_b[400] = {0};
        static float I_rms_c[400] = {0};

        V_rms_a[cnt] = temp_V1;
 8011ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	4a52      	ldr	r2, [pc, #328]	@ (8011c34 <HAL_GPIO_EXTI_Callback+0x354>)
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011af0:	601a      	str	r2, [r3, #0]
        V_rms_b[cnt] = temp_V2;
 8011af2:	4b47      	ldr	r3, [pc, #284]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	4a4f      	ldr	r2, [pc, #316]	@ (8011c38 <HAL_GPIO_EXTI_Callback+0x358>)
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b00:	601a      	str	r2, [r3, #0]
        // V_rms_a[cnt] = signal_V->basic->input_a;
        // V_rms_b[cnt] = signal_V->basic->input_b;
        V_rms_c[cnt] = signal_V->basic->input_c;
 8011b02:	4b42      	ldr	r3, [pc, #264]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	4a41      	ldr	r2, [pc, #260]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011b0a:	8812      	ldrh	r2, [r2, #0]
 8011b0c:	b292      	uxth	r2, r2
 8011b0e:	4610      	mov	r0, r2
 8011b10:	689a      	ldr	r2, [r3, #8]
 8011b12:	494a      	ldr	r1, [pc, #296]	@ (8011c3c <HAL_GPIO_EXTI_Callback+0x35c>)
 8011b14:	0083      	lsls	r3, r0, #2
 8011b16:	440b      	add	r3, r1
 8011b18:	601a      	str	r2, [r3, #0]
        I_rms_a[cnt] = signal_I->basic->input_a;
 8011b1a:	4b37      	ldr	r3, [pc, #220]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a3b      	ldr	r2, [pc, #236]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011b22:	8812      	ldrh	r2, [r2, #0]
 8011b24:	b292      	uxth	r2, r2
 8011b26:	4610      	mov	r0, r2
 8011b28:	681a      	ldr	r2, [r3, #0]
 8011b2a:	4945      	ldr	r1, [pc, #276]	@ (8011c40 <HAL_GPIO_EXTI_Callback+0x360>)
 8011b2c:	0083      	lsls	r3, r0, #2
 8011b2e:	440b      	add	r3, r1
 8011b30:	601a      	str	r2, [r3, #0]
        I_rms_b[cnt] = signal_I->basic->input_b;
 8011b32:	4b31      	ldr	r3, [pc, #196]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4a35      	ldr	r2, [pc, #212]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011b3a:	8812      	ldrh	r2, [r2, #0]
 8011b3c:	b292      	uxth	r2, r2
 8011b3e:	4610      	mov	r0, r2
 8011b40:	685a      	ldr	r2, [r3, #4]
 8011b42:	4940      	ldr	r1, [pc, #256]	@ (8011c44 <HAL_GPIO_EXTI_Callback+0x364>)
 8011b44:	0083      	lsls	r3, r0, #2
 8011b46:	440b      	add	r3, r1
 8011b48:	601a      	str	r2, [r3, #0]
        I_rms_c[cnt] = signal_I->basic->input_c;
 8011b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4a2f      	ldr	r2, [pc, #188]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011b52:	8812      	ldrh	r2, [r2, #0]
 8011b54:	b292      	uxth	r2, r2
 8011b56:	4610      	mov	r0, r2
 8011b58:	689a      	ldr	r2, [r3, #8]
 8011b5a:	493b      	ldr	r1, [pc, #236]	@ (8011c48 <HAL_GPIO_EXTI_Callback+0x368>)
 8011b5c:	0083      	lsls	r3, r0, #2
 8011b5e:	440b      	add	r3, r1
 8011b60:	601a      	str	r2, [r3, #0]
        if (++cnt == 400)
 8011b62:	4b2b      	ldr	r3, [pc, #172]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	3301      	adds	r3, #1
 8011b6a:	b29b      	uxth	r3, r3
 8011b6c:	4a28      	ldr	r2, [pc, #160]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011b6e:	4619      	mov	r1, r3
 8011b70:	8011      	strh	r1, [r2, #0]
 8011b72:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8011b76:	d16c      	bne.n	8011c52 <HAL_GPIO_EXTI_Callback+0x372>
        {
            cnt = 0;
 8011b78:	4b25      	ldr	r3, [pc, #148]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x330>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	801a      	strh	r2, [r3, #0]
            arm_rms_f32(V_rms_a, 400, &signal_V->basic->rms_a);
 8011b7e:	4b23      	ldr	r3, [pc, #140]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	330c      	adds	r3, #12
 8011b86:	461a      	mov	r2, r3
 8011b88:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011b8c:	4829      	ldr	r0, [pc, #164]	@ (8011c34 <HAL_GPIO_EXTI_Callback+0x354>)
 8011b8e:	f000 f867 	bl	8011c60 <arm_rms_f32>
            arm_rms_f32(V_rms_b, 400, &signal_V->basic->rms_b);
 8011b92:	4b1e      	ldr	r3, [pc, #120]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	3310      	adds	r3, #16
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011ba0:	4825      	ldr	r0, [pc, #148]	@ (8011c38 <HAL_GPIO_EXTI_Callback+0x358>)
 8011ba2:	f000 f85d 	bl	8011c60 <arm_rms_f32>
            arm_rms_f32(V_rms_c, 400, &signal_V->basic->rms_c);
 8011ba6:	4b19      	ldr	r3, [pc, #100]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	3314      	adds	r3, #20
 8011bae:	461a      	mov	r2, r3
 8011bb0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bb4:	4821      	ldr	r0, [pc, #132]	@ (8011c3c <HAL_GPIO_EXTI_Callback+0x35c>)
 8011bb6:	f000 f853 	bl	8011c60 <arm_rms_f32>
            arm_rms_f32(I_rms_a, 400, &signal_I->basic->rms_a);
 8011bba:	4b0f      	ldr	r3, [pc, #60]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	330c      	adds	r3, #12
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bc8:	481d      	ldr	r0, [pc, #116]	@ (8011c40 <HAL_GPIO_EXTI_Callback+0x360>)
 8011bca:	f000 f849 	bl	8011c60 <arm_rms_f32>
            arm_rms_f32(I_rms_b, 400, &signal_I->basic->rms_b);
 8011bce:	4b0a      	ldr	r3, [pc, #40]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	3310      	adds	r3, #16
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bdc:	4819      	ldr	r0, [pc, #100]	@ (8011c44 <HAL_GPIO_EXTI_Callback+0x364>)
 8011bde:	f000 f83f 	bl	8011c60 <arm_rms_f32>
            arm_rms_f32(I_rms_c, 400, &signal_I->basic->rms_c);
 8011be2:	4b05      	ldr	r3, [pc, #20]	@ (8011bf8 <HAL_GPIO_EXTI_Callback+0x318>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	3314      	adds	r3, #20
 8011bea:	461a      	mov	r2, r3
 8011bec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bf0:	e02c      	b.n	8011c4c <HAL_GPIO_EXTI_Callback+0x36c>
 8011bf2:	bf00      	nop
 8011bf4:	24000478 	.word	0x24000478
 8011bf8:	24009540 	.word	0x24009540
 8011bfc:	400e739d 	.word	0x400e739d
 8011c00:	4219b183 	.word	0x4219b183
 8011c04:	421aae14 	.word	0x421aae14
 8011c08:	421a3e46 	.word	0x421a3e46
 8011c0c:	2400953c 	.word	0x2400953c
 8011c10:	24006fac 	.word	0x24006fac
 8011c14:	40490fdb 	.word	0x40490fdb
 8011c18:	43c80000 	.word	0x43c80000
 8011c1c:	40060a92 	.word	0x40060a92
 8011c20:	24000550 	.word	0x24000550
 8011c24:	453b8000 	.word	0x453b8000
 8011c28:	44fa0000 	.word	0x44fa0000
 8011c2c:	45000000 	.word	0x45000000
 8011c30:	24000310 	.word	0x24000310
 8011c34:	24006fb0 	.word	0x24006fb0
 8011c38:	240075f0 	.word	0x240075f0
 8011c3c:	24007c30 	.word	0x24007c30
 8011c40:	24008270 	.word	0x24008270
 8011c44:	240088b0 	.word	0x240088b0
 8011c48:	24008ef0 	.word	0x24008ef0
 8011c4c:	4803      	ldr	r0, [pc, #12]	@ (8011c5c <HAL_GPIO_EXTI_Callback+0x37c>)
 8011c4e:	f000 f807 	bl	8011c60 <arm_rms_f32>
        }
    }
}
 8011c52:	bf00      	nop
 8011c54:	3740      	adds	r7, #64	@ 0x40
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	24008ef0 	.word	0x24008ef0

08011c60 <arm_rms_f32>:
 8011c60:	b530      	push	{r4, r5, lr}
 8011c62:	088d      	lsrs	r5, r1, #2
 8011c64:	ed2d 8b02 	vpush	{d8}
 8011c68:	b083      	sub	sp, #12
 8011c6a:	d054      	beq.n	8011d16 <arm_rms_f32+0xb6>
 8011c6c:	f100 0310 	add.w	r3, r0, #16
 8011c70:	462c      	mov	r4, r5
 8011c72:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011d2c <arm_rms_f32+0xcc>
 8011c76:	ed53 6a04 	vldr	s13, [r3, #-16]
 8011c7a:	3c01      	subs	r4, #1
 8011c7c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8011c80:	f103 0310 	add.w	r3, r3, #16
 8011c84:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011c88:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 8011c8c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011c90:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8011c94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011c98:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011c9c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011ca0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ca8:	ee76 5a27 	vadd.f32	s11, s12, s15
 8011cac:	d1e3      	bne.n	8011c76 <arm_rms_f32+0x16>
 8011cae:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8011cb2:	f011 0303 	ands.w	r3, r1, #3
 8011cb6:	d015      	beq.n	8011ce4 <arm_rms_f32+0x84>
 8011cb8:	edd0 7a00 	vldr	s15, [r0]
 8011cbc:	3b01      	subs	r3, #1
 8011cbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011cc2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011cc6:	d00d      	beq.n	8011ce4 <arm_rms_f32+0x84>
 8011cc8:	edd0 7a01 	vldr	s15, [r0, #4]
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011cd2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011cd6:	d005      	beq.n	8011ce4 <arm_rms_f32+0x84>
 8011cd8:	edd0 7a02 	vldr	s15, [r0, #8]
 8011cdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ce0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011ce4:	ee07 1a90 	vmov	s15, r1
 8011ce8:	2300      	movs	r3, #0
 8011cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011cee:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 8011cf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfa:	db0f      	blt.n	8011d1c <arm_rms_f32+0xbc>
 8011cfc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011d00:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8011d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d08:	d40a      	bmi.n	8011d20 <arm_rms_f32+0xc0>
 8011d0a:	ed82 8a00 	vstr	s16, [r2]
 8011d0e:	b003      	add	sp, #12
 8011d10:	ecbd 8b02 	vpop	{d8}
 8011d14:	bd30      	pop	{r4, r5, pc}
 8011d16:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8011d2c <arm_rms_f32+0xcc>
 8011d1a:	e7ca      	b.n	8011cb2 <arm_rms_f32+0x52>
 8011d1c:	6013      	str	r3, [r2, #0]
 8011d1e:	e7f6      	b.n	8011d0e <arm_rms_f32+0xae>
 8011d20:	9201      	str	r2, [sp, #4]
 8011d22:	f002 febd 	bl	8014aa0 <sqrtf>
 8011d26:	9a01      	ldr	r2, [sp, #4]
 8011d28:	e7ef      	b.n	8011d0a <arm_rms_f32+0xaa>
 8011d2a:	bf00      	nop
 8011d2c:	00000000 	.word	0x00000000

08011d30 <arm_sin_f32>:
 8011d30:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8011db0 <arm_sin_f32+0x80>
 8011d34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011d38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011d3c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d44:	d504      	bpl.n	8011d50 <arm_sin_f32+0x20>
 8011d46:	ee17 3a90 	vmov	r3, s15
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	ee07 3a90 	vmov	s15, r3
 8011d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d54:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8011db4 <arm_sin_f32+0x84>
 8011d58:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011d5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011d60:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011d64:	ee17 3a10 	vmov	r3, s14
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d6e:	d21a      	bcs.n	8011da6 <arm_sin_f32+0x76>
 8011d70:	ee07 3a10 	vmov	s14, r3
 8011d74:	1c59      	adds	r1, r3, #1
 8011d76:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011d7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8011db8 <arm_sin_f32+0x88>)
 8011d80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011d88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011d8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d90:	edd3 6a00 	vldr	s13, [r3]
 8011d94:	ed92 7a00 	vldr	s14, [r2]
 8011d98:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011da0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011da4:	4770      	bx	lr
 8011da6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011daa:	2101      	movs	r1, #1
 8011dac:	2300      	movs	r3, #0
 8011dae:	e7e6      	b.n	8011d7e <arm_sin_f32+0x4e>
 8011db0:	3e22f983 	.word	0x3e22f983
 8011db4:	44000000 	.word	0x44000000
 8011db8:	0801691c 	.word	0x0801691c

08011dbc <arm_cos_f32>:
 8011dbc:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8011e44 <arm_cos_f32+0x88>
 8011dc0:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8011dc4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011dc8:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011dcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011dd0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd8:	d504      	bpl.n	8011de4 <arm_cos_f32+0x28>
 8011dda:	ee17 3a90 	vmov	r3, s15
 8011dde:	3b01      	subs	r3, #1
 8011de0:	ee07 3a90 	vmov	s15, r3
 8011de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011de8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8011e48 <arm_cos_f32+0x8c>
 8011dec:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011df4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011df8:	ee17 3a10 	vmov	r3, s14
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e02:	d21a      	bcs.n	8011e3a <arm_cos_f32+0x7e>
 8011e04:	ee07 3a10 	vmov	s14, r3
 8011e08:	1c59      	adds	r1, r3, #1
 8011e0a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011e0e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011e12:	4a0e      	ldr	r2, [pc, #56]	@ (8011e4c <arm_cos_f32+0x90>)
 8011e14:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011e20:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e24:	edd3 6a00 	vldr	s13, [r3]
 8011e28:	ed92 7a00 	vldr	s14, [r2]
 8011e2c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011e38:	4770      	bx	lr
 8011e3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e3e:	2101      	movs	r1, #1
 8011e40:	2300      	movs	r3, #0
 8011e42:	e7e6      	b.n	8011e12 <arm_cos_f32+0x56>
 8011e44:	3e22f983 	.word	0x3e22f983
 8011e48:	44000000 	.word	0x44000000
 8011e4c:	0801691c 	.word	0x0801691c

08011e50 <malloc>:
 8011e50:	4b02      	ldr	r3, [pc, #8]	@ (8011e5c <malloc+0xc>)
 8011e52:	4601      	mov	r1, r0
 8011e54:	6818      	ldr	r0, [r3, #0]
 8011e56:	f000 b825 	b.w	8011ea4 <_malloc_r>
 8011e5a:	bf00      	nop
 8011e5c:	24000138 	.word	0x24000138

08011e60 <sbrk_aligned>:
 8011e60:	b570      	push	{r4, r5, r6, lr}
 8011e62:	4e0f      	ldr	r6, [pc, #60]	@ (8011ea0 <sbrk_aligned+0x40>)
 8011e64:	460c      	mov	r4, r1
 8011e66:	6831      	ldr	r1, [r6, #0]
 8011e68:	4605      	mov	r5, r0
 8011e6a:	b911      	cbnz	r1, 8011e72 <sbrk_aligned+0x12>
 8011e6c:	f000 fe42 	bl	8012af4 <_sbrk_r>
 8011e70:	6030      	str	r0, [r6, #0]
 8011e72:	4621      	mov	r1, r4
 8011e74:	4628      	mov	r0, r5
 8011e76:	f000 fe3d 	bl	8012af4 <_sbrk_r>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	d103      	bne.n	8011e86 <sbrk_aligned+0x26>
 8011e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8011e82:	4620      	mov	r0, r4
 8011e84:	bd70      	pop	{r4, r5, r6, pc}
 8011e86:	1cc4      	adds	r4, r0, #3
 8011e88:	f024 0403 	bic.w	r4, r4, #3
 8011e8c:	42a0      	cmp	r0, r4
 8011e8e:	d0f8      	beq.n	8011e82 <sbrk_aligned+0x22>
 8011e90:	1a21      	subs	r1, r4, r0
 8011e92:	4628      	mov	r0, r5
 8011e94:	f000 fe2e 	bl	8012af4 <_sbrk_r>
 8011e98:	3001      	adds	r0, #1
 8011e9a:	d1f2      	bne.n	8011e82 <sbrk_aligned+0x22>
 8011e9c:	e7ef      	b.n	8011e7e <sbrk_aligned+0x1e>
 8011e9e:	bf00      	nop
 8011ea0:	24009544 	.word	0x24009544

08011ea4 <_malloc_r>:
 8011ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ea8:	1ccd      	adds	r5, r1, #3
 8011eaa:	f025 0503 	bic.w	r5, r5, #3
 8011eae:	3508      	adds	r5, #8
 8011eb0:	2d0c      	cmp	r5, #12
 8011eb2:	bf38      	it	cc
 8011eb4:	250c      	movcc	r5, #12
 8011eb6:	2d00      	cmp	r5, #0
 8011eb8:	4606      	mov	r6, r0
 8011eba:	db01      	blt.n	8011ec0 <_malloc_r+0x1c>
 8011ebc:	42a9      	cmp	r1, r5
 8011ebe:	d904      	bls.n	8011eca <_malloc_r+0x26>
 8011ec0:	230c      	movs	r3, #12
 8011ec2:	6033      	str	r3, [r6, #0]
 8011ec4:	2000      	movs	r0, #0
 8011ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011fa0 <_malloc_r+0xfc>
 8011ece:	f000 f869 	bl	8011fa4 <__malloc_lock>
 8011ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8011ed6:	461c      	mov	r4, r3
 8011ed8:	bb44      	cbnz	r4, 8011f2c <_malloc_r+0x88>
 8011eda:	4629      	mov	r1, r5
 8011edc:	4630      	mov	r0, r6
 8011ede:	f7ff ffbf 	bl	8011e60 <sbrk_aligned>
 8011ee2:	1c43      	adds	r3, r0, #1
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	d158      	bne.n	8011f9a <_malloc_r+0xf6>
 8011ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8011eec:	4627      	mov	r7, r4
 8011eee:	2f00      	cmp	r7, #0
 8011ef0:	d143      	bne.n	8011f7a <_malloc_r+0xd6>
 8011ef2:	2c00      	cmp	r4, #0
 8011ef4:	d04b      	beq.n	8011f8e <_malloc_r+0xea>
 8011ef6:	6823      	ldr	r3, [r4, #0]
 8011ef8:	4639      	mov	r1, r7
 8011efa:	4630      	mov	r0, r6
 8011efc:	eb04 0903 	add.w	r9, r4, r3
 8011f00:	f000 fdf8 	bl	8012af4 <_sbrk_r>
 8011f04:	4581      	cmp	r9, r0
 8011f06:	d142      	bne.n	8011f8e <_malloc_r+0xea>
 8011f08:	6821      	ldr	r1, [r4, #0]
 8011f0a:	1a6d      	subs	r5, r5, r1
 8011f0c:	4629      	mov	r1, r5
 8011f0e:	4630      	mov	r0, r6
 8011f10:	f7ff ffa6 	bl	8011e60 <sbrk_aligned>
 8011f14:	3001      	adds	r0, #1
 8011f16:	d03a      	beq.n	8011f8e <_malloc_r+0xea>
 8011f18:	6823      	ldr	r3, [r4, #0]
 8011f1a:	442b      	add	r3, r5
 8011f1c:	6023      	str	r3, [r4, #0]
 8011f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8011f22:	685a      	ldr	r2, [r3, #4]
 8011f24:	bb62      	cbnz	r2, 8011f80 <_malloc_r+0xdc>
 8011f26:	f8c8 7000 	str.w	r7, [r8]
 8011f2a:	e00f      	b.n	8011f4c <_malloc_r+0xa8>
 8011f2c:	6822      	ldr	r2, [r4, #0]
 8011f2e:	1b52      	subs	r2, r2, r5
 8011f30:	d420      	bmi.n	8011f74 <_malloc_r+0xd0>
 8011f32:	2a0b      	cmp	r2, #11
 8011f34:	d917      	bls.n	8011f66 <_malloc_r+0xc2>
 8011f36:	1961      	adds	r1, r4, r5
 8011f38:	42a3      	cmp	r3, r4
 8011f3a:	6025      	str	r5, [r4, #0]
 8011f3c:	bf18      	it	ne
 8011f3e:	6059      	strne	r1, [r3, #4]
 8011f40:	6863      	ldr	r3, [r4, #4]
 8011f42:	bf08      	it	eq
 8011f44:	f8c8 1000 	streq.w	r1, [r8]
 8011f48:	5162      	str	r2, [r4, r5]
 8011f4a:	604b      	str	r3, [r1, #4]
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f000 f82f 	bl	8011fb0 <__malloc_unlock>
 8011f52:	f104 000b 	add.w	r0, r4, #11
 8011f56:	1d23      	adds	r3, r4, #4
 8011f58:	f020 0007 	bic.w	r0, r0, #7
 8011f5c:	1ac2      	subs	r2, r0, r3
 8011f5e:	bf1c      	itt	ne
 8011f60:	1a1b      	subne	r3, r3, r0
 8011f62:	50a3      	strne	r3, [r4, r2]
 8011f64:	e7af      	b.n	8011ec6 <_malloc_r+0x22>
 8011f66:	6862      	ldr	r2, [r4, #4]
 8011f68:	42a3      	cmp	r3, r4
 8011f6a:	bf0c      	ite	eq
 8011f6c:	f8c8 2000 	streq.w	r2, [r8]
 8011f70:	605a      	strne	r2, [r3, #4]
 8011f72:	e7eb      	b.n	8011f4c <_malloc_r+0xa8>
 8011f74:	4623      	mov	r3, r4
 8011f76:	6864      	ldr	r4, [r4, #4]
 8011f78:	e7ae      	b.n	8011ed8 <_malloc_r+0x34>
 8011f7a:	463c      	mov	r4, r7
 8011f7c:	687f      	ldr	r7, [r7, #4]
 8011f7e:	e7b6      	b.n	8011eee <_malloc_r+0x4a>
 8011f80:	461a      	mov	r2, r3
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	42a3      	cmp	r3, r4
 8011f86:	d1fb      	bne.n	8011f80 <_malloc_r+0xdc>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	6053      	str	r3, [r2, #4]
 8011f8c:	e7de      	b.n	8011f4c <_malloc_r+0xa8>
 8011f8e:	230c      	movs	r3, #12
 8011f90:	6033      	str	r3, [r6, #0]
 8011f92:	4630      	mov	r0, r6
 8011f94:	f000 f80c 	bl	8011fb0 <__malloc_unlock>
 8011f98:	e794      	b.n	8011ec4 <_malloc_r+0x20>
 8011f9a:	6005      	str	r5, [r0, #0]
 8011f9c:	e7d6      	b.n	8011f4c <_malloc_r+0xa8>
 8011f9e:	bf00      	nop
 8011fa0:	24009548 	.word	0x24009548

08011fa4 <__malloc_lock>:
 8011fa4:	4801      	ldr	r0, [pc, #4]	@ (8011fac <__malloc_lock+0x8>)
 8011fa6:	f000 bdf2 	b.w	8012b8e <__retarget_lock_acquire_recursive>
 8011faa:	bf00      	nop
 8011fac:	2400968c 	.word	0x2400968c

08011fb0 <__malloc_unlock>:
 8011fb0:	4801      	ldr	r0, [pc, #4]	@ (8011fb8 <__malloc_unlock+0x8>)
 8011fb2:	f000 bded 	b.w	8012b90 <__retarget_lock_release_recursive>
 8011fb6:	bf00      	nop
 8011fb8:	2400968c 	.word	0x2400968c

08011fbc <__cvt>:
 8011fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fbe:	ed2d 8b02 	vpush	{d8}
 8011fc2:	eeb0 8b40 	vmov.f64	d8, d0
 8011fc6:	b085      	sub	sp, #20
 8011fc8:	4617      	mov	r7, r2
 8011fca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011fcc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011fce:	ee18 2a90 	vmov	r2, s17
 8011fd2:	f025 0520 	bic.w	r5, r5, #32
 8011fd6:	2a00      	cmp	r2, #0
 8011fd8:	bfb6      	itet	lt
 8011fda:	222d      	movlt	r2, #45	@ 0x2d
 8011fdc:	2200      	movge	r2, #0
 8011fde:	eeb1 8b40 	vneglt.f64	d8, d0
 8011fe2:	2d46      	cmp	r5, #70	@ 0x46
 8011fe4:	460c      	mov	r4, r1
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	d004      	beq.n	8011ff4 <__cvt+0x38>
 8011fea:	2d45      	cmp	r5, #69	@ 0x45
 8011fec:	d100      	bne.n	8011ff0 <__cvt+0x34>
 8011fee:	3401      	adds	r4, #1
 8011ff0:	2102      	movs	r1, #2
 8011ff2:	e000      	b.n	8011ff6 <__cvt+0x3a>
 8011ff4:	2103      	movs	r1, #3
 8011ff6:	ab03      	add	r3, sp, #12
 8011ff8:	9301      	str	r3, [sp, #4]
 8011ffa:	ab02      	add	r3, sp, #8
 8011ffc:	9300      	str	r3, [sp, #0]
 8011ffe:	4622      	mov	r2, r4
 8012000:	4633      	mov	r3, r6
 8012002:	eeb0 0b48 	vmov.f64	d0, d8
 8012006:	f000 fe5b 	bl	8012cc0 <_dtoa_r>
 801200a:	2d47      	cmp	r5, #71	@ 0x47
 801200c:	d114      	bne.n	8012038 <__cvt+0x7c>
 801200e:	07fb      	lsls	r3, r7, #31
 8012010:	d50a      	bpl.n	8012028 <__cvt+0x6c>
 8012012:	1902      	adds	r2, r0, r4
 8012014:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201c:	bf08      	it	eq
 801201e:	9203      	streq	r2, [sp, #12]
 8012020:	2130      	movs	r1, #48	@ 0x30
 8012022:	9b03      	ldr	r3, [sp, #12]
 8012024:	4293      	cmp	r3, r2
 8012026:	d319      	bcc.n	801205c <__cvt+0xa0>
 8012028:	9b03      	ldr	r3, [sp, #12]
 801202a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801202c:	1a1b      	subs	r3, r3, r0
 801202e:	6013      	str	r3, [r2, #0]
 8012030:	b005      	add	sp, #20
 8012032:	ecbd 8b02 	vpop	{d8}
 8012036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012038:	2d46      	cmp	r5, #70	@ 0x46
 801203a:	eb00 0204 	add.w	r2, r0, r4
 801203e:	d1e9      	bne.n	8012014 <__cvt+0x58>
 8012040:	7803      	ldrb	r3, [r0, #0]
 8012042:	2b30      	cmp	r3, #48	@ 0x30
 8012044:	d107      	bne.n	8012056 <__cvt+0x9a>
 8012046:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204e:	bf1c      	itt	ne
 8012050:	f1c4 0401 	rsbne	r4, r4, #1
 8012054:	6034      	strne	r4, [r6, #0]
 8012056:	6833      	ldr	r3, [r6, #0]
 8012058:	441a      	add	r2, r3
 801205a:	e7db      	b.n	8012014 <__cvt+0x58>
 801205c:	1c5c      	adds	r4, r3, #1
 801205e:	9403      	str	r4, [sp, #12]
 8012060:	7019      	strb	r1, [r3, #0]
 8012062:	e7de      	b.n	8012022 <__cvt+0x66>

08012064 <__exponent>:
 8012064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012066:	2900      	cmp	r1, #0
 8012068:	bfba      	itte	lt
 801206a:	4249      	neglt	r1, r1
 801206c:	232d      	movlt	r3, #45	@ 0x2d
 801206e:	232b      	movge	r3, #43	@ 0x2b
 8012070:	2909      	cmp	r1, #9
 8012072:	7002      	strb	r2, [r0, #0]
 8012074:	7043      	strb	r3, [r0, #1]
 8012076:	dd29      	ble.n	80120cc <__exponent+0x68>
 8012078:	f10d 0307 	add.w	r3, sp, #7
 801207c:	461d      	mov	r5, r3
 801207e:	270a      	movs	r7, #10
 8012080:	461a      	mov	r2, r3
 8012082:	fbb1 f6f7 	udiv	r6, r1, r7
 8012086:	fb07 1416 	mls	r4, r7, r6, r1
 801208a:	3430      	adds	r4, #48	@ 0x30
 801208c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012090:	460c      	mov	r4, r1
 8012092:	2c63      	cmp	r4, #99	@ 0x63
 8012094:	f103 33ff 	add.w	r3, r3, #4294967295
 8012098:	4631      	mov	r1, r6
 801209a:	dcf1      	bgt.n	8012080 <__exponent+0x1c>
 801209c:	3130      	adds	r1, #48	@ 0x30
 801209e:	1e94      	subs	r4, r2, #2
 80120a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80120a4:	1c41      	adds	r1, r0, #1
 80120a6:	4623      	mov	r3, r4
 80120a8:	42ab      	cmp	r3, r5
 80120aa:	d30a      	bcc.n	80120c2 <__exponent+0x5e>
 80120ac:	f10d 0309 	add.w	r3, sp, #9
 80120b0:	1a9b      	subs	r3, r3, r2
 80120b2:	42ac      	cmp	r4, r5
 80120b4:	bf88      	it	hi
 80120b6:	2300      	movhi	r3, #0
 80120b8:	3302      	adds	r3, #2
 80120ba:	4403      	add	r3, r0
 80120bc:	1a18      	subs	r0, r3, r0
 80120be:	b003      	add	sp, #12
 80120c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80120c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80120ca:	e7ed      	b.n	80120a8 <__exponent+0x44>
 80120cc:	2330      	movs	r3, #48	@ 0x30
 80120ce:	3130      	adds	r1, #48	@ 0x30
 80120d0:	7083      	strb	r3, [r0, #2]
 80120d2:	70c1      	strb	r1, [r0, #3]
 80120d4:	1d03      	adds	r3, r0, #4
 80120d6:	e7f1      	b.n	80120bc <__exponent+0x58>

080120d8 <_printf_float>:
 80120d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	b08d      	sub	sp, #52	@ 0x34
 80120de:	460c      	mov	r4, r1
 80120e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80120e4:	4616      	mov	r6, r2
 80120e6:	461f      	mov	r7, r3
 80120e8:	4605      	mov	r5, r0
 80120ea:	f000 fccb 	bl	8012a84 <_localeconv_r>
 80120ee:	f8d0 b000 	ldr.w	fp, [r0]
 80120f2:	4658      	mov	r0, fp
 80120f4:	f7ee f944 	bl	8000380 <strlen>
 80120f8:	2300      	movs	r3, #0
 80120fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80120fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012100:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012104:	6822      	ldr	r2, [r4, #0]
 8012106:	9005      	str	r0, [sp, #20]
 8012108:	3307      	adds	r3, #7
 801210a:	f023 0307 	bic.w	r3, r3, #7
 801210e:	f103 0108 	add.w	r1, r3, #8
 8012112:	f8c8 1000 	str.w	r1, [r8]
 8012116:	ed93 0b00 	vldr	d0, [r3]
 801211a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012378 <_printf_float+0x2a0>
 801211e:	eeb0 7bc0 	vabs.f64	d7, d0
 8012122:	eeb4 7b46 	vcmp.f64	d7, d6
 8012126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801212e:	dd24      	ble.n	801217a <_printf_float+0xa2>
 8012130:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012138:	d502      	bpl.n	8012140 <_printf_float+0x68>
 801213a:	232d      	movs	r3, #45	@ 0x2d
 801213c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012140:	498f      	ldr	r1, [pc, #572]	@ (8012380 <_printf_float+0x2a8>)
 8012142:	4b90      	ldr	r3, [pc, #576]	@ (8012384 <_printf_float+0x2ac>)
 8012144:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012148:	bf94      	ite	ls
 801214a:	4688      	movls	r8, r1
 801214c:	4698      	movhi	r8, r3
 801214e:	f022 0204 	bic.w	r2, r2, #4
 8012152:	2303      	movs	r3, #3
 8012154:	6123      	str	r3, [r4, #16]
 8012156:	6022      	str	r2, [r4, #0]
 8012158:	f04f 0a00 	mov.w	sl, #0
 801215c:	9700      	str	r7, [sp, #0]
 801215e:	4633      	mov	r3, r6
 8012160:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012162:	4621      	mov	r1, r4
 8012164:	4628      	mov	r0, r5
 8012166:	f000 f9d1 	bl	801250c <_printf_common>
 801216a:	3001      	adds	r0, #1
 801216c:	f040 8089 	bne.w	8012282 <_printf_float+0x1aa>
 8012170:	f04f 30ff 	mov.w	r0, #4294967295
 8012174:	b00d      	add	sp, #52	@ 0x34
 8012176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801217a:	eeb4 0b40 	vcmp.f64	d0, d0
 801217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012182:	d709      	bvc.n	8012198 <_printf_float+0xc0>
 8012184:	ee10 3a90 	vmov	r3, s1
 8012188:	2b00      	cmp	r3, #0
 801218a:	bfbc      	itt	lt
 801218c:	232d      	movlt	r3, #45	@ 0x2d
 801218e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012192:	497d      	ldr	r1, [pc, #500]	@ (8012388 <_printf_float+0x2b0>)
 8012194:	4b7d      	ldr	r3, [pc, #500]	@ (801238c <_printf_float+0x2b4>)
 8012196:	e7d5      	b.n	8012144 <_printf_float+0x6c>
 8012198:	6863      	ldr	r3, [r4, #4]
 801219a:	1c59      	adds	r1, r3, #1
 801219c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80121a0:	d139      	bne.n	8012216 <_printf_float+0x13e>
 80121a2:	2306      	movs	r3, #6
 80121a4:	6063      	str	r3, [r4, #4]
 80121a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80121aa:	2300      	movs	r3, #0
 80121ac:	6022      	str	r2, [r4, #0]
 80121ae:	9303      	str	r3, [sp, #12]
 80121b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80121b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80121b6:	ab09      	add	r3, sp, #36	@ 0x24
 80121b8:	9300      	str	r3, [sp, #0]
 80121ba:	6861      	ldr	r1, [r4, #4]
 80121bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80121c0:	4628      	mov	r0, r5
 80121c2:	f7ff fefb 	bl	8011fbc <__cvt>
 80121c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80121ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80121cc:	4680      	mov	r8, r0
 80121ce:	d129      	bne.n	8012224 <_printf_float+0x14c>
 80121d0:	1cc8      	adds	r0, r1, #3
 80121d2:	db02      	blt.n	80121da <_printf_float+0x102>
 80121d4:	6863      	ldr	r3, [r4, #4]
 80121d6:	4299      	cmp	r1, r3
 80121d8:	dd41      	ble.n	801225e <_printf_float+0x186>
 80121da:	f1a9 0902 	sub.w	r9, r9, #2
 80121de:	fa5f f989 	uxtb.w	r9, r9
 80121e2:	3901      	subs	r1, #1
 80121e4:	464a      	mov	r2, r9
 80121e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80121ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80121ec:	f7ff ff3a 	bl	8012064 <__exponent>
 80121f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121f2:	1813      	adds	r3, r2, r0
 80121f4:	2a01      	cmp	r2, #1
 80121f6:	4682      	mov	sl, r0
 80121f8:	6123      	str	r3, [r4, #16]
 80121fa:	dc02      	bgt.n	8012202 <_printf_float+0x12a>
 80121fc:	6822      	ldr	r2, [r4, #0]
 80121fe:	07d2      	lsls	r2, r2, #31
 8012200:	d501      	bpl.n	8012206 <_printf_float+0x12e>
 8012202:	3301      	adds	r3, #1
 8012204:	6123      	str	r3, [r4, #16]
 8012206:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801220a:	2b00      	cmp	r3, #0
 801220c:	d0a6      	beq.n	801215c <_printf_float+0x84>
 801220e:	232d      	movs	r3, #45	@ 0x2d
 8012210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012214:	e7a2      	b.n	801215c <_printf_float+0x84>
 8012216:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801221a:	d1c4      	bne.n	80121a6 <_printf_float+0xce>
 801221c:	2b00      	cmp	r3, #0
 801221e:	d1c2      	bne.n	80121a6 <_printf_float+0xce>
 8012220:	2301      	movs	r3, #1
 8012222:	e7bf      	b.n	80121a4 <_printf_float+0xcc>
 8012224:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012228:	d9db      	bls.n	80121e2 <_printf_float+0x10a>
 801222a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801222e:	d118      	bne.n	8012262 <_printf_float+0x18a>
 8012230:	2900      	cmp	r1, #0
 8012232:	6863      	ldr	r3, [r4, #4]
 8012234:	dd0b      	ble.n	801224e <_printf_float+0x176>
 8012236:	6121      	str	r1, [r4, #16]
 8012238:	b913      	cbnz	r3, 8012240 <_printf_float+0x168>
 801223a:	6822      	ldr	r2, [r4, #0]
 801223c:	07d0      	lsls	r0, r2, #31
 801223e:	d502      	bpl.n	8012246 <_printf_float+0x16e>
 8012240:	3301      	adds	r3, #1
 8012242:	440b      	add	r3, r1
 8012244:	6123      	str	r3, [r4, #16]
 8012246:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012248:	f04f 0a00 	mov.w	sl, #0
 801224c:	e7db      	b.n	8012206 <_printf_float+0x12e>
 801224e:	b913      	cbnz	r3, 8012256 <_printf_float+0x17e>
 8012250:	6822      	ldr	r2, [r4, #0]
 8012252:	07d2      	lsls	r2, r2, #31
 8012254:	d501      	bpl.n	801225a <_printf_float+0x182>
 8012256:	3302      	adds	r3, #2
 8012258:	e7f4      	b.n	8012244 <_printf_float+0x16c>
 801225a:	2301      	movs	r3, #1
 801225c:	e7f2      	b.n	8012244 <_printf_float+0x16c>
 801225e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012264:	4299      	cmp	r1, r3
 8012266:	db05      	blt.n	8012274 <_printf_float+0x19c>
 8012268:	6823      	ldr	r3, [r4, #0]
 801226a:	6121      	str	r1, [r4, #16]
 801226c:	07d8      	lsls	r0, r3, #31
 801226e:	d5ea      	bpl.n	8012246 <_printf_float+0x16e>
 8012270:	1c4b      	adds	r3, r1, #1
 8012272:	e7e7      	b.n	8012244 <_printf_float+0x16c>
 8012274:	2900      	cmp	r1, #0
 8012276:	bfd4      	ite	le
 8012278:	f1c1 0202 	rsble	r2, r1, #2
 801227c:	2201      	movgt	r2, #1
 801227e:	4413      	add	r3, r2
 8012280:	e7e0      	b.n	8012244 <_printf_float+0x16c>
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	055a      	lsls	r2, r3, #21
 8012286:	d407      	bmi.n	8012298 <_printf_float+0x1c0>
 8012288:	6923      	ldr	r3, [r4, #16]
 801228a:	4642      	mov	r2, r8
 801228c:	4631      	mov	r1, r6
 801228e:	4628      	mov	r0, r5
 8012290:	47b8      	blx	r7
 8012292:	3001      	adds	r0, #1
 8012294:	d12a      	bne.n	80122ec <_printf_float+0x214>
 8012296:	e76b      	b.n	8012170 <_printf_float+0x98>
 8012298:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801229c:	f240 80e0 	bls.w	8012460 <_printf_float+0x388>
 80122a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80122a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80122a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ac:	d133      	bne.n	8012316 <_printf_float+0x23e>
 80122ae:	4a38      	ldr	r2, [pc, #224]	@ (8012390 <_printf_float+0x2b8>)
 80122b0:	2301      	movs	r3, #1
 80122b2:	4631      	mov	r1, r6
 80122b4:	4628      	mov	r0, r5
 80122b6:	47b8      	blx	r7
 80122b8:	3001      	adds	r0, #1
 80122ba:	f43f af59 	beq.w	8012170 <_printf_float+0x98>
 80122be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80122c2:	4543      	cmp	r3, r8
 80122c4:	db02      	blt.n	80122cc <_printf_float+0x1f4>
 80122c6:	6823      	ldr	r3, [r4, #0]
 80122c8:	07d8      	lsls	r0, r3, #31
 80122ca:	d50f      	bpl.n	80122ec <_printf_float+0x214>
 80122cc:	9b05      	ldr	r3, [sp, #20]
 80122ce:	465a      	mov	r2, fp
 80122d0:	4631      	mov	r1, r6
 80122d2:	4628      	mov	r0, r5
 80122d4:	47b8      	blx	r7
 80122d6:	3001      	adds	r0, #1
 80122d8:	f43f af4a 	beq.w	8012170 <_printf_float+0x98>
 80122dc:	f04f 0900 	mov.w	r9, #0
 80122e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80122e4:	f104 0a1a 	add.w	sl, r4, #26
 80122e8:	45c8      	cmp	r8, r9
 80122ea:	dc09      	bgt.n	8012300 <_printf_float+0x228>
 80122ec:	6823      	ldr	r3, [r4, #0]
 80122ee:	079b      	lsls	r3, r3, #30
 80122f0:	f100 8107 	bmi.w	8012502 <_printf_float+0x42a>
 80122f4:	68e0      	ldr	r0, [r4, #12]
 80122f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122f8:	4298      	cmp	r0, r3
 80122fa:	bfb8      	it	lt
 80122fc:	4618      	movlt	r0, r3
 80122fe:	e739      	b.n	8012174 <_printf_float+0x9c>
 8012300:	2301      	movs	r3, #1
 8012302:	4652      	mov	r2, sl
 8012304:	4631      	mov	r1, r6
 8012306:	4628      	mov	r0, r5
 8012308:	47b8      	blx	r7
 801230a:	3001      	adds	r0, #1
 801230c:	f43f af30 	beq.w	8012170 <_printf_float+0x98>
 8012310:	f109 0901 	add.w	r9, r9, #1
 8012314:	e7e8      	b.n	80122e8 <_printf_float+0x210>
 8012316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012318:	2b00      	cmp	r3, #0
 801231a:	dc3b      	bgt.n	8012394 <_printf_float+0x2bc>
 801231c:	4a1c      	ldr	r2, [pc, #112]	@ (8012390 <_printf_float+0x2b8>)
 801231e:	2301      	movs	r3, #1
 8012320:	4631      	mov	r1, r6
 8012322:	4628      	mov	r0, r5
 8012324:	47b8      	blx	r7
 8012326:	3001      	adds	r0, #1
 8012328:	f43f af22 	beq.w	8012170 <_printf_float+0x98>
 801232c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012330:	ea59 0303 	orrs.w	r3, r9, r3
 8012334:	d102      	bne.n	801233c <_printf_float+0x264>
 8012336:	6823      	ldr	r3, [r4, #0]
 8012338:	07d9      	lsls	r1, r3, #31
 801233a:	d5d7      	bpl.n	80122ec <_printf_float+0x214>
 801233c:	9b05      	ldr	r3, [sp, #20]
 801233e:	465a      	mov	r2, fp
 8012340:	4631      	mov	r1, r6
 8012342:	4628      	mov	r0, r5
 8012344:	47b8      	blx	r7
 8012346:	3001      	adds	r0, #1
 8012348:	f43f af12 	beq.w	8012170 <_printf_float+0x98>
 801234c:	f04f 0a00 	mov.w	sl, #0
 8012350:	f104 0b1a 	add.w	fp, r4, #26
 8012354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012356:	425b      	negs	r3, r3
 8012358:	4553      	cmp	r3, sl
 801235a:	dc01      	bgt.n	8012360 <_printf_float+0x288>
 801235c:	464b      	mov	r3, r9
 801235e:	e794      	b.n	801228a <_printf_float+0x1b2>
 8012360:	2301      	movs	r3, #1
 8012362:	465a      	mov	r2, fp
 8012364:	4631      	mov	r1, r6
 8012366:	4628      	mov	r0, r5
 8012368:	47b8      	blx	r7
 801236a:	3001      	adds	r0, #1
 801236c:	f43f af00 	beq.w	8012170 <_printf_float+0x98>
 8012370:	f10a 0a01 	add.w	sl, sl, #1
 8012374:	e7ee      	b.n	8012354 <_printf_float+0x27c>
 8012376:	bf00      	nop
 8012378:	ffffffff 	.word	0xffffffff
 801237c:	7fefffff 	.word	0x7fefffff
 8012380:	08017120 	.word	0x08017120
 8012384:	08017124 	.word	0x08017124
 8012388:	08017128 	.word	0x08017128
 801238c:	0801712c 	.word	0x0801712c
 8012390:	08017130 	.word	0x08017130
 8012394:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012396:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801239a:	4553      	cmp	r3, sl
 801239c:	bfa8      	it	ge
 801239e:	4653      	movge	r3, sl
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	4699      	mov	r9, r3
 80123a4:	dc37      	bgt.n	8012416 <_printf_float+0x33e>
 80123a6:	2300      	movs	r3, #0
 80123a8:	9307      	str	r3, [sp, #28]
 80123aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123ae:	f104 021a 	add.w	r2, r4, #26
 80123b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80123b4:	9907      	ldr	r1, [sp, #28]
 80123b6:	9306      	str	r3, [sp, #24]
 80123b8:	eba3 0309 	sub.w	r3, r3, r9
 80123bc:	428b      	cmp	r3, r1
 80123be:	dc31      	bgt.n	8012424 <_printf_float+0x34c>
 80123c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123c2:	459a      	cmp	sl, r3
 80123c4:	dc3b      	bgt.n	801243e <_printf_float+0x366>
 80123c6:	6823      	ldr	r3, [r4, #0]
 80123c8:	07da      	lsls	r2, r3, #31
 80123ca:	d438      	bmi.n	801243e <_printf_float+0x366>
 80123cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123ce:	ebaa 0903 	sub.w	r9, sl, r3
 80123d2:	9b06      	ldr	r3, [sp, #24]
 80123d4:	ebaa 0303 	sub.w	r3, sl, r3
 80123d8:	4599      	cmp	r9, r3
 80123da:	bfa8      	it	ge
 80123dc:	4699      	movge	r9, r3
 80123de:	f1b9 0f00 	cmp.w	r9, #0
 80123e2:	dc34      	bgt.n	801244e <_printf_float+0x376>
 80123e4:	f04f 0800 	mov.w	r8, #0
 80123e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123ec:	f104 0b1a 	add.w	fp, r4, #26
 80123f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123f2:	ebaa 0303 	sub.w	r3, sl, r3
 80123f6:	eba3 0309 	sub.w	r3, r3, r9
 80123fa:	4543      	cmp	r3, r8
 80123fc:	f77f af76 	ble.w	80122ec <_printf_float+0x214>
 8012400:	2301      	movs	r3, #1
 8012402:	465a      	mov	r2, fp
 8012404:	4631      	mov	r1, r6
 8012406:	4628      	mov	r0, r5
 8012408:	47b8      	blx	r7
 801240a:	3001      	adds	r0, #1
 801240c:	f43f aeb0 	beq.w	8012170 <_printf_float+0x98>
 8012410:	f108 0801 	add.w	r8, r8, #1
 8012414:	e7ec      	b.n	80123f0 <_printf_float+0x318>
 8012416:	4642      	mov	r2, r8
 8012418:	4631      	mov	r1, r6
 801241a:	4628      	mov	r0, r5
 801241c:	47b8      	blx	r7
 801241e:	3001      	adds	r0, #1
 8012420:	d1c1      	bne.n	80123a6 <_printf_float+0x2ce>
 8012422:	e6a5      	b.n	8012170 <_printf_float+0x98>
 8012424:	2301      	movs	r3, #1
 8012426:	4631      	mov	r1, r6
 8012428:	4628      	mov	r0, r5
 801242a:	9206      	str	r2, [sp, #24]
 801242c:	47b8      	blx	r7
 801242e:	3001      	adds	r0, #1
 8012430:	f43f ae9e 	beq.w	8012170 <_printf_float+0x98>
 8012434:	9b07      	ldr	r3, [sp, #28]
 8012436:	9a06      	ldr	r2, [sp, #24]
 8012438:	3301      	adds	r3, #1
 801243a:	9307      	str	r3, [sp, #28]
 801243c:	e7b9      	b.n	80123b2 <_printf_float+0x2da>
 801243e:	9b05      	ldr	r3, [sp, #20]
 8012440:	465a      	mov	r2, fp
 8012442:	4631      	mov	r1, r6
 8012444:	4628      	mov	r0, r5
 8012446:	47b8      	blx	r7
 8012448:	3001      	adds	r0, #1
 801244a:	d1bf      	bne.n	80123cc <_printf_float+0x2f4>
 801244c:	e690      	b.n	8012170 <_printf_float+0x98>
 801244e:	9a06      	ldr	r2, [sp, #24]
 8012450:	464b      	mov	r3, r9
 8012452:	4442      	add	r2, r8
 8012454:	4631      	mov	r1, r6
 8012456:	4628      	mov	r0, r5
 8012458:	47b8      	blx	r7
 801245a:	3001      	adds	r0, #1
 801245c:	d1c2      	bne.n	80123e4 <_printf_float+0x30c>
 801245e:	e687      	b.n	8012170 <_printf_float+0x98>
 8012460:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012464:	f1b9 0f01 	cmp.w	r9, #1
 8012468:	dc01      	bgt.n	801246e <_printf_float+0x396>
 801246a:	07db      	lsls	r3, r3, #31
 801246c:	d536      	bpl.n	80124dc <_printf_float+0x404>
 801246e:	2301      	movs	r3, #1
 8012470:	4642      	mov	r2, r8
 8012472:	4631      	mov	r1, r6
 8012474:	4628      	mov	r0, r5
 8012476:	47b8      	blx	r7
 8012478:	3001      	adds	r0, #1
 801247a:	f43f ae79 	beq.w	8012170 <_printf_float+0x98>
 801247e:	9b05      	ldr	r3, [sp, #20]
 8012480:	465a      	mov	r2, fp
 8012482:	4631      	mov	r1, r6
 8012484:	4628      	mov	r0, r5
 8012486:	47b8      	blx	r7
 8012488:	3001      	adds	r0, #1
 801248a:	f43f ae71 	beq.w	8012170 <_printf_float+0x98>
 801248e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012492:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249a:	f109 39ff 	add.w	r9, r9, #4294967295
 801249e:	d018      	beq.n	80124d2 <_printf_float+0x3fa>
 80124a0:	464b      	mov	r3, r9
 80124a2:	f108 0201 	add.w	r2, r8, #1
 80124a6:	4631      	mov	r1, r6
 80124a8:	4628      	mov	r0, r5
 80124aa:	47b8      	blx	r7
 80124ac:	3001      	adds	r0, #1
 80124ae:	d10c      	bne.n	80124ca <_printf_float+0x3f2>
 80124b0:	e65e      	b.n	8012170 <_printf_float+0x98>
 80124b2:	2301      	movs	r3, #1
 80124b4:	465a      	mov	r2, fp
 80124b6:	4631      	mov	r1, r6
 80124b8:	4628      	mov	r0, r5
 80124ba:	47b8      	blx	r7
 80124bc:	3001      	adds	r0, #1
 80124be:	f43f ae57 	beq.w	8012170 <_printf_float+0x98>
 80124c2:	f108 0801 	add.w	r8, r8, #1
 80124c6:	45c8      	cmp	r8, r9
 80124c8:	dbf3      	blt.n	80124b2 <_printf_float+0x3da>
 80124ca:	4653      	mov	r3, sl
 80124cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80124d0:	e6dc      	b.n	801228c <_printf_float+0x1b4>
 80124d2:	f04f 0800 	mov.w	r8, #0
 80124d6:	f104 0b1a 	add.w	fp, r4, #26
 80124da:	e7f4      	b.n	80124c6 <_printf_float+0x3ee>
 80124dc:	2301      	movs	r3, #1
 80124de:	4642      	mov	r2, r8
 80124e0:	e7e1      	b.n	80124a6 <_printf_float+0x3ce>
 80124e2:	2301      	movs	r3, #1
 80124e4:	464a      	mov	r2, r9
 80124e6:	4631      	mov	r1, r6
 80124e8:	4628      	mov	r0, r5
 80124ea:	47b8      	blx	r7
 80124ec:	3001      	adds	r0, #1
 80124ee:	f43f ae3f 	beq.w	8012170 <_printf_float+0x98>
 80124f2:	f108 0801 	add.w	r8, r8, #1
 80124f6:	68e3      	ldr	r3, [r4, #12]
 80124f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80124fa:	1a5b      	subs	r3, r3, r1
 80124fc:	4543      	cmp	r3, r8
 80124fe:	dcf0      	bgt.n	80124e2 <_printf_float+0x40a>
 8012500:	e6f8      	b.n	80122f4 <_printf_float+0x21c>
 8012502:	f04f 0800 	mov.w	r8, #0
 8012506:	f104 0919 	add.w	r9, r4, #25
 801250a:	e7f4      	b.n	80124f6 <_printf_float+0x41e>

0801250c <_printf_common>:
 801250c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012510:	4616      	mov	r6, r2
 8012512:	4698      	mov	r8, r3
 8012514:	688a      	ldr	r2, [r1, #8]
 8012516:	690b      	ldr	r3, [r1, #16]
 8012518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801251c:	4293      	cmp	r3, r2
 801251e:	bfb8      	it	lt
 8012520:	4613      	movlt	r3, r2
 8012522:	6033      	str	r3, [r6, #0]
 8012524:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012528:	4607      	mov	r7, r0
 801252a:	460c      	mov	r4, r1
 801252c:	b10a      	cbz	r2, 8012532 <_printf_common+0x26>
 801252e:	3301      	adds	r3, #1
 8012530:	6033      	str	r3, [r6, #0]
 8012532:	6823      	ldr	r3, [r4, #0]
 8012534:	0699      	lsls	r1, r3, #26
 8012536:	bf42      	ittt	mi
 8012538:	6833      	ldrmi	r3, [r6, #0]
 801253a:	3302      	addmi	r3, #2
 801253c:	6033      	strmi	r3, [r6, #0]
 801253e:	6825      	ldr	r5, [r4, #0]
 8012540:	f015 0506 	ands.w	r5, r5, #6
 8012544:	d106      	bne.n	8012554 <_printf_common+0x48>
 8012546:	f104 0a19 	add.w	sl, r4, #25
 801254a:	68e3      	ldr	r3, [r4, #12]
 801254c:	6832      	ldr	r2, [r6, #0]
 801254e:	1a9b      	subs	r3, r3, r2
 8012550:	42ab      	cmp	r3, r5
 8012552:	dc26      	bgt.n	80125a2 <_printf_common+0x96>
 8012554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012558:	6822      	ldr	r2, [r4, #0]
 801255a:	3b00      	subs	r3, #0
 801255c:	bf18      	it	ne
 801255e:	2301      	movne	r3, #1
 8012560:	0692      	lsls	r2, r2, #26
 8012562:	d42b      	bmi.n	80125bc <_printf_common+0xb0>
 8012564:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012568:	4641      	mov	r1, r8
 801256a:	4638      	mov	r0, r7
 801256c:	47c8      	blx	r9
 801256e:	3001      	adds	r0, #1
 8012570:	d01e      	beq.n	80125b0 <_printf_common+0xa4>
 8012572:	6823      	ldr	r3, [r4, #0]
 8012574:	6922      	ldr	r2, [r4, #16]
 8012576:	f003 0306 	and.w	r3, r3, #6
 801257a:	2b04      	cmp	r3, #4
 801257c:	bf02      	ittt	eq
 801257e:	68e5      	ldreq	r5, [r4, #12]
 8012580:	6833      	ldreq	r3, [r6, #0]
 8012582:	1aed      	subeq	r5, r5, r3
 8012584:	68a3      	ldr	r3, [r4, #8]
 8012586:	bf0c      	ite	eq
 8012588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801258c:	2500      	movne	r5, #0
 801258e:	4293      	cmp	r3, r2
 8012590:	bfc4      	itt	gt
 8012592:	1a9b      	subgt	r3, r3, r2
 8012594:	18ed      	addgt	r5, r5, r3
 8012596:	2600      	movs	r6, #0
 8012598:	341a      	adds	r4, #26
 801259a:	42b5      	cmp	r5, r6
 801259c:	d11a      	bne.n	80125d4 <_printf_common+0xc8>
 801259e:	2000      	movs	r0, #0
 80125a0:	e008      	b.n	80125b4 <_printf_common+0xa8>
 80125a2:	2301      	movs	r3, #1
 80125a4:	4652      	mov	r2, sl
 80125a6:	4641      	mov	r1, r8
 80125a8:	4638      	mov	r0, r7
 80125aa:	47c8      	blx	r9
 80125ac:	3001      	adds	r0, #1
 80125ae:	d103      	bne.n	80125b8 <_printf_common+0xac>
 80125b0:	f04f 30ff 	mov.w	r0, #4294967295
 80125b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b8:	3501      	adds	r5, #1
 80125ba:	e7c6      	b.n	801254a <_printf_common+0x3e>
 80125bc:	18e1      	adds	r1, r4, r3
 80125be:	1c5a      	adds	r2, r3, #1
 80125c0:	2030      	movs	r0, #48	@ 0x30
 80125c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80125c6:	4422      	add	r2, r4
 80125c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80125cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80125d0:	3302      	adds	r3, #2
 80125d2:	e7c7      	b.n	8012564 <_printf_common+0x58>
 80125d4:	2301      	movs	r3, #1
 80125d6:	4622      	mov	r2, r4
 80125d8:	4641      	mov	r1, r8
 80125da:	4638      	mov	r0, r7
 80125dc:	47c8      	blx	r9
 80125de:	3001      	adds	r0, #1
 80125e0:	d0e6      	beq.n	80125b0 <_printf_common+0xa4>
 80125e2:	3601      	adds	r6, #1
 80125e4:	e7d9      	b.n	801259a <_printf_common+0x8e>
	...

080125e8 <_printf_i>:
 80125e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125ec:	7e0f      	ldrb	r7, [r1, #24]
 80125ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80125f0:	2f78      	cmp	r7, #120	@ 0x78
 80125f2:	4691      	mov	r9, r2
 80125f4:	4680      	mov	r8, r0
 80125f6:	460c      	mov	r4, r1
 80125f8:	469a      	mov	sl, r3
 80125fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80125fe:	d807      	bhi.n	8012610 <_printf_i+0x28>
 8012600:	2f62      	cmp	r7, #98	@ 0x62
 8012602:	d80a      	bhi.n	801261a <_printf_i+0x32>
 8012604:	2f00      	cmp	r7, #0
 8012606:	f000 80d2 	beq.w	80127ae <_printf_i+0x1c6>
 801260a:	2f58      	cmp	r7, #88	@ 0x58
 801260c:	f000 80b9 	beq.w	8012782 <_printf_i+0x19a>
 8012610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012618:	e03a      	b.n	8012690 <_printf_i+0xa8>
 801261a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801261e:	2b15      	cmp	r3, #21
 8012620:	d8f6      	bhi.n	8012610 <_printf_i+0x28>
 8012622:	a101      	add	r1, pc, #4	@ (adr r1, 8012628 <_printf_i+0x40>)
 8012624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012628:	08012681 	.word	0x08012681
 801262c:	08012695 	.word	0x08012695
 8012630:	08012611 	.word	0x08012611
 8012634:	08012611 	.word	0x08012611
 8012638:	08012611 	.word	0x08012611
 801263c:	08012611 	.word	0x08012611
 8012640:	08012695 	.word	0x08012695
 8012644:	08012611 	.word	0x08012611
 8012648:	08012611 	.word	0x08012611
 801264c:	08012611 	.word	0x08012611
 8012650:	08012611 	.word	0x08012611
 8012654:	08012795 	.word	0x08012795
 8012658:	080126bf 	.word	0x080126bf
 801265c:	0801274f 	.word	0x0801274f
 8012660:	08012611 	.word	0x08012611
 8012664:	08012611 	.word	0x08012611
 8012668:	080127b7 	.word	0x080127b7
 801266c:	08012611 	.word	0x08012611
 8012670:	080126bf 	.word	0x080126bf
 8012674:	08012611 	.word	0x08012611
 8012678:	08012611 	.word	0x08012611
 801267c:	08012757 	.word	0x08012757
 8012680:	6833      	ldr	r3, [r6, #0]
 8012682:	1d1a      	adds	r2, r3, #4
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6032      	str	r2, [r6, #0]
 8012688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801268c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012690:	2301      	movs	r3, #1
 8012692:	e09d      	b.n	80127d0 <_printf_i+0x1e8>
 8012694:	6833      	ldr	r3, [r6, #0]
 8012696:	6820      	ldr	r0, [r4, #0]
 8012698:	1d19      	adds	r1, r3, #4
 801269a:	6031      	str	r1, [r6, #0]
 801269c:	0606      	lsls	r6, r0, #24
 801269e:	d501      	bpl.n	80126a4 <_printf_i+0xbc>
 80126a0:	681d      	ldr	r5, [r3, #0]
 80126a2:	e003      	b.n	80126ac <_printf_i+0xc4>
 80126a4:	0645      	lsls	r5, r0, #25
 80126a6:	d5fb      	bpl.n	80126a0 <_printf_i+0xb8>
 80126a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80126ac:	2d00      	cmp	r5, #0
 80126ae:	da03      	bge.n	80126b8 <_printf_i+0xd0>
 80126b0:	232d      	movs	r3, #45	@ 0x2d
 80126b2:	426d      	negs	r5, r5
 80126b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126b8:	4859      	ldr	r0, [pc, #356]	@ (8012820 <_printf_i+0x238>)
 80126ba:	230a      	movs	r3, #10
 80126bc:	e011      	b.n	80126e2 <_printf_i+0xfa>
 80126be:	6821      	ldr	r1, [r4, #0]
 80126c0:	6833      	ldr	r3, [r6, #0]
 80126c2:	0608      	lsls	r0, r1, #24
 80126c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80126c8:	d402      	bmi.n	80126d0 <_printf_i+0xe8>
 80126ca:	0649      	lsls	r1, r1, #25
 80126cc:	bf48      	it	mi
 80126ce:	b2ad      	uxthmi	r5, r5
 80126d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80126d2:	4853      	ldr	r0, [pc, #332]	@ (8012820 <_printf_i+0x238>)
 80126d4:	6033      	str	r3, [r6, #0]
 80126d6:	bf14      	ite	ne
 80126d8:	230a      	movne	r3, #10
 80126da:	2308      	moveq	r3, #8
 80126dc:	2100      	movs	r1, #0
 80126de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80126e2:	6866      	ldr	r6, [r4, #4]
 80126e4:	60a6      	str	r6, [r4, #8]
 80126e6:	2e00      	cmp	r6, #0
 80126e8:	bfa2      	ittt	ge
 80126ea:	6821      	ldrge	r1, [r4, #0]
 80126ec:	f021 0104 	bicge.w	r1, r1, #4
 80126f0:	6021      	strge	r1, [r4, #0]
 80126f2:	b90d      	cbnz	r5, 80126f8 <_printf_i+0x110>
 80126f4:	2e00      	cmp	r6, #0
 80126f6:	d04b      	beq.n	8012790 <_printf_i+0x1a8>
 80126f8:	4616      	mov	r6, r2
 80126fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80126fe:	fb03 5711 	mls	r7, r3, r1, r5
 8012702:	5dc7      	ldrb	r7, [r0, r7]
 8012704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012708:	462f      	mov	r7, r5
 801270a:	42bb      	cmp	r3, r7
 801270c:	460d      	mov	r5, r1
 801270e:	d9f4      	bls.n	80126fa <_printf_i+0x112>
 8012710:	2b08      	cmp	r3, #8
 8012712:	d10b      	bne.n	801272c <_printf_i+0x144>
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	07df      	lsls	r7, r3, #31
 8012718:	d508      	bpl.n	801272c <_printf_i+0x144>
 801271a:	6923      	ldr	r3, [r4, #16]
 801271c:	6861      	ldr	r1, [r4, #4]
 801271e:	4299      	cmp	r1, r3
 8012720:	bfde      	ittt	le
 8012722:	2330      	movle	r3, #48	@ 0x30
 8012724:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012728:	f106 36ff 	addle.w	r6, r6, #4294967295
 801272c:	1b92      	subs	r2, r2, r6
 801272e:	6122      	str	r2, [r4, #16]
 8012730:	f8cd a000 	str.w	sl, [sp]
 8012734:	464b      	mov	r3, r9
 8012736:	aa03      	add	r2, sp, #12
 8012738:	4621      	mov	r1, r4
 801273a:	4640      	mov	r0, r8
 801273c:	f7ff fee6 	bl	801250c <_printf_common>
 8012740:	3001      	adds	r0, #1
 8012742:	d14a      	bne.n	80127da <_printf_i+0x1f2>
 8012744:	f04f 30ff 	mov.w	r0, #4294967295
 8012748:	b004      	add	sp, #16
 801274a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801274e:	6823      	ldr	r3, [r4, #0]
 8012750:	f043 0320 	orr.w	r3, r3, #32
 8012754:	6023      	str	r3, [r4, #0]
 8012756:	4833      	ldr	r0, [pc, #204]	@ (8012824 <_printf_i+0x23c>)
 8012758:	2778      	movs	r7, #120	@ 0x78
 801275a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	6831      	ldr	r1, [r6, #0]
 8012762:	061f      	lsls	r7, r3, #24
 8012764:	f851 5b04 	ldr.w	r5, [r1], #4
 8012768:	d402      	bmi.n	8012770 <_printf_i+0x188>
 801276a:	065f      	lsls	r7, r3, #25
 801276c:	bf48      	it	mi
 801276e:	b2ad      	uxthmi	r5, r5
 8012770:	6031      	str	r1, [r6, #0]
 8012772:	07d9      	lsls	r1, r3, #31
 8012774:	bf44      	itt	mi
 8012776:	f043 0320 	orrmi.w	r3, r3, #32
 801277a:	6023      	strmi	r3, [r4, #0]
 801277c:	b11d      	cbz	r5, 8012786 <_printf_i+0x19e>
 801277e:	2310      	movs	r3, #16
 8012780:	e7ac      	b.n	80126dc <_printf_i+0xf4>
 8012782:	4827      	ldr	r0, [pc, #156]	@ (8012820 <_printf_i+0x238>)
 8012784:	e7e9      	b.n	801275a <_printf_i+0x172>
 8012786:	6823      	ldr	r3, [r4, #0]
 8012788:	f023 0320 	bic.w	r3, r3, #32
 801278c:	6023      	str	r3, [r4, #0]
 801278e:	e7f6      	b.n	801277e <_printf_i+0x196>
 8012790:	4616      	mov	r6, r2
 8012792:	e7bd      	b.n	8012710 <_printf_i+0x128>
 8012794:	6833      	ldr	r3, [r6, #0]
 8012796:	6825      	ldr	r5, [r4, #0]
 8012798:	6961      	ldr	r1, [r4, #20]
 801279a:	1d18      	adds	r0, r3, #4
 801279c:	6030      	str	r0, [r6, #0]
 801279e:	062e      	lsls	r6, r5, #24
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	d501      	bpl.n	80127a8 <_printf_i+0x1c0>
 80127a4:	6019      	str	r1, [r3, #0]
 80127a6:	e002      	b.n	80127ae <_printf_i+0x1c6>
 80127a8:	0668      	lsls	r0, r5, #25
 80127aa:	d5fb      	bpl.n	80127a4 <_printf_i+0x1bc>
 80127ac:	8019      	strh	r1, [r3, #0]
 80127ae:	2300      	movs	r3, #0
 80127b0:	6123      	str	r3, [r4, #16]
 80127b2:	4616      	mov	r6, r2
 80127b4:	e7bc      	b.n	8012730 <_printf_i+0x148>
 80127b6:	6833      	ldr	r3, [r6, #0]
 80127b8:	1d1a      	adds	r2, r3, #4
 80127ba:	6032      	str	r2, [r6, #0]
 80127bc:	681e      	ldr	r6, [r3, #0]
 80127be:	6862      	ldr	r2, [r4, #4]
 80127c0:	2100      	movs	r1, #0
 80127c2:	4630      	mov	r0, r6
 80127c4:	f7ed fd8c 	bl	80002e0 <memchr>
 80127c8:	b108      	cbz	r0, 80127ce <_printf_i+0x1e6>
 80127ca:	1b80      	subs	r0, r0, r6
 80127cc:	6060      	str	r0, [r4, #4]
 80127ce:	6863      	ldr	r3, [r4, #4]
 80127d0:	6123      	str	r3, [r4, #16]
 80127d2:	2300      	movs	r3, #0
 80127d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127d8:	e7aa      	b.n	8012730 <_printf_i+0x148>
 80127da:	6923      	ldr	r3, [r4, #16]
 80127dc:	4632      	mov	r2, r6
 80127de:	4649      	mov	r1, r9
 80127e0:	4640      	mov	r0, r8
 80127e2:	47d0      	blx	sl
 80127e4:	3001      	adds	r0, #1
 80127e6:	d0ad      	beq.n	8012744 <_printf_i+0x15c>
 80127e8:	6823      	ldr	r3, [r4, #0]
 80127ea:	079b      	lsls	r3, r3, #30
 80127ec:	d413      	bmi.n	8012816 <_printf_i+0x22e>
 80127ee:	68e0      	ldr	r0, [r4, #12]
 80127f0:	9b03      	ldr	r3, [sp, #12]
 80127f2:	4298      	cmp	r0, r3
 80127f4:	bfb8      	it	lt
 80127f6:	4618      	movlt	r0, r3
 80127f8:	e7a6      	b.n	8012748 <_printf_i+0x160>
 80127fa:	2301      	movs	r3, #1
 80127fc:	4632      	mov	r2, r6
 80127fe:	4649      	mov	r1, r9
 8012800:	4640      	mov	r0, r8
 8012802:	47d0      	blx	sl
 8012804:	3001      	adds	r0, #1
 8012806:	d09d      	beq.n	8012744 <_printf_i+0x15c>
 8012808:	3501      	adds	r5, #1
 801280a:	68e3      	ldr	r3, [r4, #12]
 801280c:	9903      	ldr	r1, [sp, #12]
 801280e:	1a5b      	subs	r3, r3, r1
 8012810:	42ab      	cmp	r3, r5
 8012812:	dcf2      	bgt.n	80127fa <_printf_i+0x212>
 8012814:	e7eb      	b.n	80127ee <_printf_i+0x206>
 8012816:	2500      	movs	r5, #0
 8012818:	f104 0619 	add.w	r6, r4, #25
 801281c:	e7f5      	b.n	801280a <_printf_i+0x222>
 801281e:	bf00      	nop
 8012820:	08017132 	.word	0x08017132
 8012824:	08017143 	.word	0x08017143

08012828 <std>:
 8012828:	2300      	movs	r3, #0
 801282a:	b510      	push	{r4, lr}
 801282c:	4604      	mov	r4, r0
 801282e:	e9c0 3300 	strd	r3, r3, [r0]
 8012832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012836:	6083      	str	r3, [r0, #8]
 8012838:	8181      	strh	r1, [r0, #12]
 801283a:	6643      	str	r3, [r0, #100]	@ 0x64
 801283c:	81c2      	strh	r2, [r0, #14]
 801283e:	6183      	str	r3, [r0, #24]
 8012840:	4619      	mov	r1, r3
 8012842:	2208      	movs	r2, #8
 8012844:	305c      	adds	r0, #92	@ 0x5c
 8012846:	f000 f914 	bl	8012a72 <memset>
 801284a:	4b0d      	ldr	r3, [pc, #52]	@ (8012880 <std+0x58>)
 801284c:	6263      	str	r3, [r4, #36]	@ 0x24
 801284e:	4b0d      	ldr	r3, [pc, #52]	@ (8012884 <std+0x5c>)
 8012850:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012852:	4b0d      	ldr	r3, [pc, #52]	@ (8012888 <std+0x60>)
 8012854:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012856:	4b0d      	ldr	r3, [pc, #52]	@ (801288c <std+0x64>)
 8012858:	6323      	str	r3, [r4, #48]	@ 0x30
 801285a:	4b0d      	ldr	r3, [pc, #52]	@ (8012890 <std+0x68>)
 801285c:	6224      	str	r4, [r4, #32]
 801285e:	429c      	cmp	r4, r3
 8012860:	d006      	beq.n	8012870 <std+0x48>
 8012862:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012866:	4294      	cmp	r4, r2
 8012868:	d002      	beq.n	8012870 <std+0x48>
 801286a:	33d0      	adds	r3, #208	@ 0xd0
 801286c:	429c      	cmp	r4, r3
 801286e:	d105      	bne.n	801287c <std+0x54>
 8012870:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012878:	f000 b988 	b.w	8012b8c <__retarget_lock_init_recursive>
 801287c:	bd10      	pop	{r4, pc}
 801287e:	bf00      	nop
 8012880:	080129ed 	.word	0x080129ed
 8012884:	08012a0f 	.word	0x08012a0f
 8012888:	08012a47 	.word	0x08012a47
 801288c:	08012a6b 	.word	0x08012a6b
 8012890:	2400954c 	.word	0x2400954c

08012894 <stdio_exit_handler>:
 8012894:	4a02      	ldr	r2, [pc, #8]	@ (80128a0 <stdio_exit_handler+0xc>)
 8012896:	4903      	ldr	r1, [pc, #12]	@ (80128a4 <stdio_exit_handler+0x10>)
 8012898:	4803      	ldr	r0, [pc, #12]	@ (80128a8 <stdio_exit_handler+0x14>)
 801289a:	f000 b869 	b.w	8012970 <_fwalk_sglue>
 801289e:	bf00      	nop
 80128a0:	2400012c 	.word	0x2400012c
 80128a4:	080142bd 	.word	0x080142bd
 80128a8:	2400013c 	.word	0x2400013c

080128ac <cleanup_stdio>:
 80128ac:	6841      	ldr	r1, [r0, #4]
 80128ae:	4b0c      	ldr	r3, [pc, #48]	@ (80128e0 <cleanup_stdio+0x34>)
 80128b0:	4299      	cmp	r1, r3
 80128b2:	b510      	push	{r4, lr}
 80128b4:	4604      	mov	r4, r0
 80128b6:	d001      	beq.n	80128bc <cleanup_stdio+0x10>
 80128b8:	f001 fd00 	bl	80142bc <_fflush_r>
 80128bc:	68a1      	ldr	r1, [r4, #8]
 80128be:	4b09      	ldr	r3, [pc, #36]	@ (80128e4 <cleanup_stdio+0x38>)
 80128c0:	4299      	cmp	r1, r3
 80128c2:	d002      	beq.n	80128ca <cleanup_stdio+0x1e>
 80128c4:	4620      	mov	r0, r4
 80128c6:	f001 fcf9 	bl	80142bc <_fflush_r>
 80128ca:	68e1      	ldr	r1, [r4, #12]
 80128cc:	4b06      	ldr	r3, [pc, #24]	@ (80128e8 <cleanup_stdio+0x3c>)
 80128ce:	4299      	cmp	r1, r3
 80128d0:	d004      	beq.n	80128dc <cleanup_stdio+0x30>
 80128d2:	4620      	mov	r0, r4
 80128d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128d8:	f001 bcf0 	b.w	80142bc <_fflush_r>
 80128dc:	bd10      	pop	{r4, pc}
 80128de:	bf00      	nop
 80128e0:	2400954c 	.word	0x2400954c
 80128e4:	240095b4 	.word	0x240095b4
 80128e8:	2400961c 	.word	0x2400961c

080128ec <global_stdio_init.part.0>:
 80128ec:	b510      	push	{r4, lr}
 80128ee:	4b0b      	ldr	r3, [pc, #44]	@ (801291c <global_stdio_init.part.0+0x30>)
 80128f0:	4c0b      	ldr	r4, [pc, #44]	@ (8012920 <global_stdio_init.part.0+0x34>)
 80128f2:	4a0c      	ldr	r2, [pc, #48]	@ (8012924 <global_stdio_init.part.0+0x38>)
 80128f4:	601a      	str	r2, [r3, #0]
 80128f6:	4620      	mov	r0, r4
 80128f8:	2200      	movs	r2, #0
 80128fa:	2104      	movs	r1, #4
 80128fc:	f7ff ff94 	bl	8012828 <std>
 8012900:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012904:	2201      	movs	r2, #1
 8012906:	2109      	movs	r1, #9
 8012908:	f7ff ff8e 	bl	8012828 <std>
 801290c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012910:	2202      	movs	r2, #2
 8012912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012916:	2112      	movs	r1, #18
 8012918:	f7ff bf86 	b.w	8012828 <std>
 801291c:	24009684 	.word	0x24009684
 8012920:	2400954c 	.word	0x2400954c
 8012924:	08012895 	.word	0x08012895

08012928 <__sfp_lock_acquire>:
 8012928:	4801      	ldr	r0, [pc, #4]	@ (8012930 <__sfp_lock_acquire+0x8>)
 801292a:	f000 b930 	b.w	8012b8e <__retarget_lock_acquire_recursive>
 801292e:	bf00      	nop
 8012930:	2400968d 	.word	0x2400968d

08012934 <__sfp_lock_release>:
 8012934:	4801      	ldr	r0, [pc, #4]	@ (801293c <__sfp_lock_release+0x8>)
 8012936:	f000 b92b 	b.w	8012b90 <__retarget_lock_release_recursive>
 801293a:	bf00      	nop
 801293c:	2400968d 	.word	0x2400968d

08012940 <__sinit>:
 8012940:	b510      	push	{r4, lr}
 8012942:	4604      	mov	r4, r0
 8012944:	f7ff fff0 	bl	8012928 <__sfp_lock_acquire>
 8012948:	6a23      	ldr	r3, [r4, #32]
 801294a:	b11b      	cbz	r3, 8012954 <__sinit+0x14>
 801294c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012950:	f7ff bff0 	b.w	8012934 <__sfp_lock_release>
 8012954:	4b04      	ldr	r3, [pc, #16]	@ (8012968 <__sinit+0x28>)
 8012956:	6223      	str	r3, [r4, #32]
 8012958:	4b04      	ldr	r3, [pc, #16]	@ (801296c <__sinit+0x2c>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d1f5      	bne.n	801294c <__sinit+0xc>
 8012960:	f7ff ffc4 	bl	80128ec <global_stdio_init.part.0>
 8012964:	e7f2      	b.n	801294c <__sinit+0xc>
 8012966:	bf00      	nop
 8012968:	080128ad 	.word	0x080128ad
 801296c:	24009684 	.word	0x24009684

08012970 <_fwalk_sglue>:
 8012970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012974:	4607      	mov	r7, r0
 8012976:	4688      	mov	r8, r1
 8012978:	4614      	mov	r4, r2
 801297a:	2600      	movs	r6, #0
 801297c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012980:	f1b9 0901 	subs.w	r9, r9, #1
 8012984:	d505      	bpl.n	8012992 <_fwalk_sglue+0x22>
 8012986:	6824      	ldr	r4, [r4, #0]
 8012988:	2c00      	cmp	r4, #0
 801298a:	d1f7      	bne.n	801297c <_fwalk_sglue+0xc>
 801298c:	4630      	mov	r0, r6
 801298e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012992:	89ab      	ldrh	r3, [r5, #12]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d907      	bls.n	80129a8 <_fwalk_sglue+0x38>
 8012998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801299c:	3301      	adds	r3, #1
 801299e:	d003      	beq.n	80129a8 <_fwalk_sglue+0x38>
 80129a0:	4629      	mov	r1, r5
 80129a2:	4638      	mov	r0, r7
 80129a4:	47c0      	blx	r8
 80129a6:	4306      	orrs	r6, r0
 80129a8:	3568      	adds	r5, #104	@ 0x68
 80129aa:	e7e9      	b.n	8012980 <_fwalk_sglue+0x10>

080129ac <siprintf>:
 80129ac:	b40e      	push	{r1, r2, r3}
 80129ae:	b500      	push	{lr}
 80129b0:	b09c      	sub	sp, #112	@ 0x70
 80129b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80129b4:	9002      	str	r0, [sp, #8]
 80129b6:	9006      	str	r0, [sp, #24]
 80129b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80129bc:	4809      	ldr	r0, [pc, #36]	@ (80129e4 <siprintf+0x38>)
 80129be:	9107      	str	r1, [sp, #28]
 80129c0:	9104      	str	r1, [sp, #16]
 80129c2:	4909      	ldr	r1, [pc, #36]	@ (80129e8 <siprintf+0x3c>)
 80129c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80129c8:	9105      	str	r1, [sp, #20]
 80129ca:	6800      	ldr	r0, [r0, #0]
 80129cc:	9301      	str	r3, [sp, #4]
 80129ce:	a902      	add	r1, sp, #8
 80129d0:	f001 faf4 	bl	8013fbc <_svfiprintf_r>
 80129d4:	9b02      	ldr	r3, [sp, #8]
 80129d6:	2200      	movs	r2, #0
 80129d8:	701a      	strb	r2, [r3, #0]
 80129da:	b01c      	add	sp, #112	@ 0x70
 80129dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80129e0:	b003      	add	sp, #12
 80129e2:	4770      	bx	lr
 80129e4:	24000138 	.word	0x24000138
 80129e8:	ffff0208 	.word	0xffff0208

080129ec <__sread>:
 80129ec:	b510      	push	{r4, lr}
 80129ee:	460c      	mov	r4, r1
 80129f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129f4:	f000 f86c 	bl	8012ad0 <_read_r>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	bfab      	itete	ge
 80129fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80129fe:	89a3      	ldrhlt	r3, [r4, #12]
 8012a00:	181b      	addge	r3, r3, r0
 8012a02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012a06:	bfac      	ite	ge
 8012a08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012a0a:	81a3      	strhlt	r3, [r4, #12]
 8012a0c:	bd10      	pop	{r4, pc}

08012a0e <__swrite>:
 8012a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a12:	461f      	mov	r7, r3
 8012a14:	898b      	ldrh	r3, [r1, #12]
 8012a16:	05db      	lsls	r3, r3, #23
 8012a18:	4605      	mov	r5, r0
 8012a1a:	460c      	mov	r4, r1
 8012a1c:	4616      	mov	r6, r2
 8012a1e:	d505      	bpl.n	8012a2c <__swrite+0x1e>
 8012a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a24:	2302      	movs	r3, #2
 8012a26:	2200      	movs	r2, #0
 8012a28:	f000 f840 	bl	8012aac <_lseek_r>
 8012a2c:	89a3      	ldrh	r3, [r4, #12]
 8012a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012a36:	81a3      	strh	r3, [r4, #12]
 8012a38:	4632      	mov	r2, r6
 8012a3a:	463b      	mov	r3, r7
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a42:	f000 b867 	b.w	8012b14 <_write_r>

08012a46 <__sseek>:
 8012a46:	b510      	push	{r4, lr}
 8012a48:	460c      	mov	r4, r1
 8012a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a4e:	f000 f82d 	bl	8012aac <_lseek_r>
 8012a52:	1c43      	adds	r3, r0, #1
 8012a54:	89a3      	ldrh	r3, [r4, #12]
 8012a56:	bf15      	itete	ne
 8012a58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012a5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012a5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012a62:	81a3      	strheq	r3, [r4, #12]
 8012a64:	bf18      	it	ne
 8012a66:	81a3      	strhne	r3, [r4, #12]
 8012a68:	bd10      	pop	{r4, pc}

08012a6a <__sclose>:
 8012a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a6e:	f000 b80d 	b.w	8012a8c <_close_r>

08012a72 <memset>:
 8012a72:	4402      	add	r2, r0
 8012a74:	4603      	mov	r3, r0
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d100      	bne.n	8012a7c <memset+0xa>
 8012a7a:	4770      	bx	lr
 8012a7c:	f803 1b01 	strb.w	r1, [r3], #1
 8012a80:	e7f9      	b.n	8012a76 <memset+0x4>
	...

08012a84 <_localeconv_r>:
 8012a84:	4800      	ldr	r0, [pc, #0]	@ (8012a88 <_localeconv_r+0x4>)
 8012a86:	4770      	bx	lr
 8012a88:	24000278 	.word	0x24000278

08012a8c <_close_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4d06      	ldr	r5, [pc, #24]	@ (8012aa8 <_close_r+0x1c>)
 8012a90:	2300      	movs	r3, #0
 8012a92:	4604      	mov	r4, r0
 8012a94:	4608      	mov	r0, r1
 8012a96:	602b      	str	r3, [r5, #0]
 8012a98:	f7ee fde6 	bl	8001668 <_close>
 8012a9c:	1c43      	adds	r3, r0, #1
 8012a9e:	d102      	bne.n	8012aa6 <_close_r+0x1a>
 8012aa0:	682b      	ldr	r3, [r5, #0]
 8012aa2:	b103      	cbz	r3, 8012aa6 <_close_r+0x1a>
 8012aa4:	6023      	str	r3, [r4, #0]
 8012aa6:	bd38      	pop	{r3, r4, r5, pc}
 8012aa8:	24009688 	.word	0x24009688

08012aac <_lseek_r>:
 8012aac:	b538      	push	{r3, r4, r5, lr}
 8012aae:	4d07      	ldr	r5, [pc, #28]	@ (8012acc <_lseek_r+0x20>)
 8012ab0:	4604      	mov	r4, r0
 8012ab2:	4608      	mov	r0, r1
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	602a      	str	r2, [r5, #0]
 8012aba:	461a      	mov	r2, r3
 8012abc:	f7ee fdfb 	bl	80016b6 <_lseek>
 8012ac0:	1c43      	adds	r3, r0, #1
 8012ac2:	d102      	bne.n	8012aca <_lseek_r+0x1e>
 8012ac4:	682b      	ldr	r3, [r5, #0]
 8012ac6:	b103      	cbz	r3, 8012aca <_lseek_r+0x1e>
 8012ac8:	6023      	str	r3, [r4, #0]
 8012aca:	bd38      	pop	{r3, r4, r5, pc}
 8012acc:	24009688 	.word	0x24009688

08012ad0 <_read_r>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	4d07      	ldr	r5, [pc, #28]	@ (8012af0 <_read_r+0x20>)
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	4608      	mov	r0, r1
 8012ad8:	4611      	mov	r1, r2
 8012ada:	2200      	movs	r2, #0
 8012adc:	602a      	str	r2, [r5, #0]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	f7ee fd89 	bl	80015f6 <_read>
 8012ae4:	1c43      	adds	r3, r0, #1
 8012ae6:	d102      	bne.n	8012aee <_read_r+0x1e>
 8012ae8:	682b      	ldr	r3, [r5, #0]
 8012aea:	b103      	cbz	r3, 8012aee <_read_r+0x1e>
 8012aec:	6023      	str	r3, [r4, #0]
 8012aee:	bd38      	pop	{r3, r4, r5, pc}
 8012af0:	24009688 	.word	0x24009688

08012af4 <_sbrk_r>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	4d06      	ldr	r5, [pc, #24]	@ (8012b10 <_sbrk_r+0x1c>)
 8012af8:	2300      	movs	r3, #0
 8012afa:	4604      	mov	r4, r0
 8012afc:	4608      	mov	r0, r1
 8012afe:	602b      	str	r3, [r5, #0]
 8012b00:	f7ee fde6 	bl	80016d0 <_sbrk>
 8012b04:	1c43      	adds	r3, r0, #1
 8012b06:	d102      	bne.n	8012b0e <_sbrk_r+0x1a>
 8012b08:	682b      	ldr	r3, [r5, #0]
 8012b0a:	b103      	cbz	r3, 8012b0e <_sbrk_r+0x1a>
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	bd38      	pop	{r3, r4, r5, pc}
 8012b10:	24009688 	.word	0x24009688

08012b14 <_write_r>:
 8012b14:	b538      	push	{r3, r4, r5, lr}
 8012b16:	4d07      	ldr	r5, [pc, #28]	@ (8012b34 <_write_r+0x20>)
 8012b18:	4604      	mov	r4, r0
 8012b1a:	4608      	mov	r0, r1
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	2200      	movs	r2, #0
 8012b20:	602a      	str	r2, [r5, #0]
 8012b22:	461a      	mov	r2, r3
 8012b24:	f7ee fd84 	bl	8001630 <_write>
 8012b28:	1c43      	adds	r3, r0, #1
 8012b2a:	d102      	bne.n	8012b32 <_write_r+0x1e>
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	b103      	cbz	r3, 8012b32 <_write_r+0x1e>
 8012b30:	6023      	str	r3, [r4, #0]
 8012b32:	bd38      	pop	{r3, r4, r5, pc}
 8012b34:	24009688 	.word	0x24009688

08012b38 <__errno>:
 8012b38:	4b01      	ldr	r3, [pc, #4]	@ (8012b40 <__errno+0x8>)
 8012b3a:	6818      	ldr	r0, [r3, #0]
 8012b3c:	4770      	bx	lr
 8012b3e:	bf00      	nop
 8012b40:	24000138 	.word	0x24000138

08012b44 <__libc_init_array>:
 8012b44:	b570      	push	{r4, r5, r6, lr}
 8012b46:	4d0d      	ldr	r5, [pc, #52]	@ (8012b7c <__libc_init_array+0x38>)
 8012b48:	4c0d      	ldr	r4, [pc, #52]	@ (8012b80 <__libc_init_array+0x3c>)
 8012b4a:	1b64      	subs	r4, r4, r5
 8012b4c:	10a4      	asrs	r4, r4, #2
 8012b4e:	2600      	movs	r6, #0
 8012b50:	42a6      	cmp	r6, r4
 8012b52:	d109      	bne.n	8012b68 <__libc_init_array+0x24>
 8012b54:	4d0b      	ldr	r5, [pc, #44]	@ (8012b84 <__libc_init_array+0x40>)
 8012b56:	4c0c      	ldr	r4, [pc, #48]	@ (8012b88 <__libc_init_array+0x44>)
 8012b58:	f002 f9d8 	bl	8014f0c <_init>
 8012b5c:	1b64      	subs	r4, r4, r5
 8012b5e:	10a4      	asrs	r4, r4, #2
 8012b60:	2600      	movs	r6, #0
 8012b62:	42a6      	cmp	r6, r4
 8012b64:	d105      	bne.n	8012b72 <__libc_init_array+0x2e>
 8012b66:	bd70      	pop	{r4, r5, r6, pc}
 8012b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b6c:	4798      	blx	r3
 8012b6e:	3601      	adds	r6, #1
 8012b70:	e7ee      	b.n	8012b50 <__libc_init_array+0xc>
 8012b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b76:	4798      	blx	r3
 8012b78:	3601      	adds	r6, #1
 8012b7a:	e7f2      	b.n	8012b62 <__libc_init_array+0x1e>
 8012b7c:	080174a8 	.word	0x080174a8
 8012b80:	080174a8 	.word	0x080174a8
 8012b84:	080174a8 	.word	0x080174a8
 8012b88:	080174ac 	.word	0x080174ac

08012b8c <__retarget_lock_init_recursive>:
 8012b8c:	4770      	bx	lr

08012b8e <__retarget_lock_acquire_recursive>:
 8012b8e:	4770      	bx	lr

08012b90 <__retarget_lock_release_recursive>:
 8012b90:	4770      	bx	lr

08012b92 <memcpy>:
 8012b92:	440a      	add	r2, r1
 8012b94:	4291      	cmp	r1, r2
 8012b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b9a:	d100      	bne.n	8012b9e <memcpy+0xc>
 8012b9c:	4770      	bx	lr
 8012b9e:	b510      	push	{r4, lr}
 8012ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ba8:	4291      	cmp	r1, r2
 8012baa:	d1f9      	bne.n	8012ba0 <memcpy+0xe>
 8012bac:	bd10      	pop	{r4, pc}

08012bae <quorem>:
 8012bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb2:	6903      	ldr	r3, [r0, #16]
 8012bb4:	690c      	ldr	r4, [r1, #16]
 8012bb6:	42a3      	cmp	r3, r4
 8012bb8:	4607      	mov	r7, r0
 8012bba:	db7e      	blt.n	8012cba <quorem+0x10c>
 8012bbc:	3c01      	subs	r4, #1
 8012bbe:	f101 0814 	add.w	r8, r1, #20
 8012bc2:	00a3      	lsls	r3, r4, #2
 8012bc4:	f100 0514 	add.w	r5, r0, #20
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012bce:	9301      	str	r3, [sp, #4]
 8012bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012be0:	fbb2 f6f3 	udiv	r6, r2, r3
 8012be4:	d32e      	bcc.n	8012c44 <quorem+0x96>
 8012be6:	f04f 0a00 	mov.w	sl, #0
 8012bea:	46c4      	mov	ip, r8
 8012bec:	46ae      	mov	lr, r5
 8012bee:	46d3      	mov	fp, sl
 8012bf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012bf4:	b298      	uxth	r0, r3
 8012bf6:	fb06 a000 	mla	r0, r6, r0, sl
 8012bfa:	0c02      	lsrs	r2, r0, #16
 8012bfc:	0c1b      	lsrs	r3, r3, #16
 8012bfe:	fb06 2303 	mla	r3, r6, r3, r2
 8012c02:	f8de 2000 	ldr.w	r2, [lr]
 8012c06:	b280      	uxth	r0, r0
 8012c08:	b292      	uxth	r2, r2
 8012c0a:	1a12      	subs	r2, r2, r0
 8012c0c:	445a      	add	r2, fp
 8012c0e:	f8de 0000 	ldr.w	r0, [lr]
 8012c12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012c1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012c20:	b292      	uxth	r2, r2
 8012c22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012c26:	45e1      	cmp	r9, ip
 8012c28:	f84e 2b04 	str.w	r2, [lr], #4
 8012c2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012c30:	d2de      	bcs.n	8012bf0 <quorem+0x42>
 8012c32:	9b00      	ldr	r3, [sp, #0]
 8012c34:	58eb      	ldr	r3, [r5, r3]
 8012c36:	b92b      	cbnz	r3, 8012c44 <quorem+0x96>
 8012c38:	9b01      	ldr	r3, [sp, #4]
 8012c3a:	3b04      	subs	r3, #4
 8012c3c:	429d      	cmp	r5, r3
 8012c3e:	461a      	mov	r2, r3
 8012c40:	d32f      	bcc.n	8012ca2 <quorem+0xf4>
 8012c42:	613c      	str	r4, [r7, #16]
 8012c44:	4638      	mov	r0, r7
 8012c46:	f001 f855 	bl	8013cf4 <__mcmp>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	db25      	blt.n	8012c9a <quorem+0xec>
 8012c4e:	4629      	mov	r1, r5
 8012c50:	2000      	movs	r0, #0
 8012c52:	f858 2b04 	ldr.w	r2, [r8], #4
 8012c56:	f8d1 c000 	ldr.w	ip, [r1]
 8012c5a:	fa1f fe82 	uxth.w	lr, r2
 8012c5e:	fa1f f38c 	uxth.w	r3, ip
 8012c62:	eba3 030e 	sub.w	r3, r3, lr
 8012c66:	4403      	add	r3, r0
 8012c68:	0c12      	lsrs	r2, r2, #16
 8012c6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012c6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c78:	45c1      	cmp	r9, r8
 8012c7a:	f841 3b04 	str.w	r3, [r1], #4
 8012c7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012c82:	d2e6      	bcs.n	8012c52 <quorem+0xa4>
 8012c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c8c:	b922      	cbnz	r2, 8012c98 <quorem+0xea>
 8012c8e:	3b04      	subs	r3, #4
 8012c90:	429d      	cmp	r5, r3
 8012c92:	461a      	mov	r2, r3
 8012c94:	d30b      	bcc.n	8012cae <quorem+0x100>
 8012c96:	613c      	str	r4, [r7, #16]
 8012c98:	3601      	adds	r6, #1
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	b003      	add	sp, #12
 8012c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca2:	6812      	ldr	r2, [r2, #0]
 8012ca4:	3b04      	subs	r3, #4
 8012ca6:	2a00      	cmp	r2, #0
 8012ca8:	d1cb      	bne.n	8012c42 <quorem+0x94>
 8012caa:	3c01      	subs	r4, #1
 8012cac:	e7c6      	b.n	8012c3c <quorem+0x8e>
 8012cae:	6812      	ldr	r2, [r2, #0]
 8012cb0:	3b04      	subs	r3, #4
 8012cb2:	2a00      	cmp	r2, #0
 8012cb4:	d1ef      	bne.n	8012c96 <quorem+0xe8>
 8012cb6:	3c01      	subs	r4, #1
 8012cb8:	e7ea      	b.n	8012c90 <quorem+0xe2>
 8012cba:	2000      	movs	r0, #0
 8012cbc:	e7ee      	b.n	8012c9c <quorem+0xee>
	...

08012cc0 <_dtoa_r>:
 8012cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc4:	ed2d 8b02 	vpush	{d8}
 8012cc8:	69c7      	ldr	r7, [r0, #28]
 8012cca:	b091      	sub	sp, #68	@ 0x44
 8012ccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012cd0:	ec55 4b10 	vmov	r4, r5, d0
 8012cd4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012cd6:	9107      	str	r1, [sp, #28]
 8012cd8:	4681      	mov	r9, r0
 8012cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cdc:	930d      	str	r3, [sp, #52]	@ 0x34
 8012cde:	b97f      	cbnz	r7, 8012d00 <_dtoa_r+0x40>
 8012ce0:	2010      	movs	r0, #16
 8012ce2:	f7ff f8b5 	bl	8011e50 <malloc>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	f8c9 001c 	str.w	r0, [r9, #28]
 8012cec:	b920      	cbnz	r0, 8012cf8 <_dtoa_r+0x38>
 8012cee:	4ba0      	ldr	r3, [pc, #640]	@ (8012f70 <_dtoa_r+0x2b0>)
 8012cf0:	21ef      	movs	r1, #239	@ 0xef
 8012cf2:	48a0      	ldr	r0, [pc, #640]	@ (8012f74 <_dtoa_r+0x2b4>)
 8012cf4:	f001 fb24 	bl	8014340 <__assert_func>
 8012cf8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012cfc:	6007      	str	r7, [r0, #0]
 8012cfe:	60c7      	str	r7, [r0, #12]
 8012d00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012d04:	6819      	ldr	r1, [r3, #0]
 8012d06:	b159      	cbz	r1, 8012d20 <_dtoa_r+0x60>
 8012d08:	685a      	ldr	r2, [r3, #4]
 8012d0a:	604a      	str	r2, [r1, #4]
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	4093      	lsls	r3, r2
 8012d10:	608b      	str	r3, [r1, #8]
 8012d12:	4648      	mov	r0, r9
 8012d14:	f000 fdb4 	bl	8013880 <_Bfree>
 8012d18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	601a      	str	r2, [r3, #0]
 8012d20:	1e2b      	subs	r3, r5, #0
 8012d22:	bfbb      	ittet	lt
 8012d24:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012d28:	9303      	strlt	r3, [sp, #12]
 8012d2a:	2300      	movge	r3, #0
 8012d2c:	2201      	movlt	r2, #1
 8012d2e:	bfac      	ite	ge
 8012d30:	6033      	strge	r3, [r6, #0]
 8012d32:	6032      	strlt	r2, [r6, #0]
 8012d34:	4b90      	ldr	r3, [pc, #576]	@ (8012f78 <_dtoa_r+0x2b8>)
 8012d36:	9e03      	ldr	r6, [sp, #12]
 8012d38:	43b3      	bics	r3, r6
 8012d3a:	d110      	bne.n	8012d5e <_dtoa_r+0x9e>
 8012d3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012d3e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012d42:	6013      	str	r3, [r2, #0]
 8012d44:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012d48:	4323      	orrs	r3, r4
 8012d4a:	f000 84de 	beq.w	801370a <_dtoa_r+0xa4a>
 8012d4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012d50:	4f8a      	ldr	r7, [pc, #552]	@ (8012f7c <_dtoa_r+0x2bc>)
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f000 84e0 	beq.w	8013718 <_dtoa_r+0xa58>
 8012d58:	1cfb      	adds	r3, r7, #3
 8012d5a:	f000 bcdb 	b.w	8013714 <_dtoa_r+0xa54>
 8012d5e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012d62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d6a:	d10a      	bne.n	8012d82 <_dtoa_r+0xc2>
 8012d6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012d6e:	2301      	movs	r3, #1
 8012d70:	6013      	str	r3, [r2, #0]
 8012d72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012d74:	b113      	cbz	r3, 8012d7c <_dtoa_r+0xbc>
 8012d76:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012d78:	4b81      	ldr	r3, [pc, #516]	@ (8012f80 <_dtoa_r+0x2c0>)
 8012d7a:	6013      	str	r3, [r2, #0]
 8012d7c:	4f81      	ldr	r7, [pc, #516]	@ (8012f84 <_dtoa_r+0x2c4>)
 8012d7e:	f000 bccb 	b.w	8013718 <_dtoa_r+0xa58>
 8012d82:	aa0e      	add	r2, sp, #56	@ 0x38
 8012d84:	a90f      	add	r1, sp, #60	@ 0x3c
 8012d86:	4648      	mov	r0, r9
 8012d88:	eeb0 0b48 	vmov.f64	d0, d8
 8012d8c:	f001 f862 	bl	8013e54 <__d2b>
 8012d90:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012d94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d96:	9001      	str	r0, [sp, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d045      	beq.n	8012e28 <_dtoa_r+0x168>
 8012d9c:	eeb0 7b48 	vmov.f64	d7, d8
 8012da0:	ee18 1a90 	vmov	r1, s17
 8012da4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012da8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012dac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012db0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012db4:	2500      	movs	r5, #0
 8012db6:	ee07 1a90 	vmov	s15, r1
 8012dba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012dbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012f58 <_dtoa_r+0x298>
 8012dc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012dc6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012f60 <_dtoa_r+0x2a0>
 8012dca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012dce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012f68 <_dtoa_r+0x2a8>
 8012dd2:	ee07 3a90 	vmov	s15, r3
 8012dd6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012dda:	eeb0 7b46 	vmov.f64	d7, d6
 8012dde:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012de2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012de6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dee:	ee16 8a90 	vmov	r8, s13
 8012df2:	d508      	bpl.n	8012e06 <_dtoa_r+0x146>
 8012df4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012df8:	eeb4 6b47 	vcmp.f64	d6, d7
 8012dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e00:	bf18      	it	ne
 8012e02:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012e06:	f1b8 0f16 	cmp.w	r8, #22
 8012e0a:	d82b      	bhi.n	8012e64 <_dtoa_r+0x1a4>
 8012e0c:	495e      	ldr	r1, [pc, #376]	@ (8012f88 <_dtoa_r+0x2c8>)
 8012e0e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012e12:	ed91 7b00 	vldr	d7, [r1]
 8012e16:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1e:	d501      	bpl.n	8012e24 <_dtoa_r+0x164>
 8012e20:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e24:	2100      	movs	r1, #0
 8012e26:	e01e      	b.n	8012e66 <_dtoa_r+0x1a6>
 8012e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e2a:	4413      	add	r3, r2
 8012e2c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012e30:	2920      	cmp	r1, #32
 8012e32:	bfc1      	itttt	gt
 8012e34:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012e38:	408e      	lslgt	r6, r1
 8012e3a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012e3e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012e42:	bfd6      	itet	le
 8012e44:	f1c1 0120 	rsble	r1, r1, #32
 8012e48:	4331      	orrgt	r1, r6
 8012e4a:	fa04 f101 	lslle.w	r1, r4, r1
 8012e4e:	ee07 1a90 	vmov	s15, r1
 8012e52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012e56:	3b01      	subs	r3, #1
 8012e58:	ee17 1a90 	vmov	r1, s15
 8012e5c:	2501      	movs	r5, #1
 8012e5e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012e62:	e7a8      	b.n	8012db6 <_dtoa_r+0xf6>
 8012e64:	2101      	movs	r1, #1
 8012e66:	1ad2      	subs	r2, r2, r3
 8012e68:	1e53      	subs	r3, r2, #1
 8012e6a:	9306      	str	r3, [sp, #24]
 8012e6c:	bf45      	ittet	mi
 8012e6e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012e72:	9305      	strmi	r3, [sp, #20]
 8012e74:	2300      	movpl	r3, #0
 8012e76:	2300      	movmi	r3, #0
 8012e78:	bf4c      	ite	mi
 8012e7a:	9306      	strmi	r3, [sp, #24]
 8012e7c:	9305      	strpl	r3, [sp, #20]
 8012e7e:	f1b8 0f00 	cmp.w	r8, #0
 8012e82:	910c      	str	r1, [sp, #48]	@ 0x30
 8012e84:	db18      	blt.n	8012eb8 <_dtoa_r+0x1f8>
 8012e86:	9b06      	ldr	r3, [sp, #24]
 8012e88:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012e8c:	4443      	add	r3, r8
 8012e8e:	9306      	str	r3, [sp, #24]
 8012e90:	2300      	movs	r3, #0
 8012e92:	9a07      	ldr	r2, [sp, #28]
 8012e94:	2a09      	cmp	r2, #9
 8012e96:	d849      	bhi.n	8012f2c <_dtoa_r+0x26c>
 8012e98:	2a05      	cmp	r2, #5
 8012e9a:	bfc4      	itt	gt
 8012e9c:	3a04      	subgt	r2, #4
 8012e9e:	9207      	strgt	r2, [sp, #28]
 8012ea0:	9a07      	ldr	r2, [sp, #28]
 8012ea2:	f1a2 0202 	sub.w	r2, r2, #2
 8012ea6:	bfcc      	ite	gt
 8012ea8:	2400      	movgt	r4, #0
 8012eaa:	2401      	movle	r4, #1
 8012eac:	2a03      	cmp	r2, #3
 8012eae:	d848      	bhi.n	8012f42 <_dtoa_r+0x282>
 8012eb0:	e8df f002 	tbb	[pc, r2]
 8012eb4:	3a2c2e0b 	.word	0x3a2c2e0b
 8012eb8:	9b05      	ldr	r3, [sp, #20]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	eba3 0308 	sub.w	r3, r3, r8
 8012ec0:	9305      	str	r3, [sp, #20]
 8012ec2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012ec4:	f1c8 0300 	rsb	r3, r8, #0
 8012ec8:	e7e3      	b.n	8012e92 <_dtoa_r+0x1d2>
 8012eca:	2200      	movs	r2, #0
 8012ecc:	9208      	str	r2, [sp, #32]
 8012ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ed0:	2a00      	cmp	r2, #0
 8012ed2:	dc39      	bgt.n	8012f48 <_dtoa_r+0x288>
 8012ed4:	f04f 0b01 	mov.w	fp, #1
 8012ed8:	46da      	mov	sl, fp
 8012eda:	465a      	mov	r2, fp
 8012edc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012ee0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	2004      	movs	r0, #4
 8012ee8:	f100 0614 	add.w	r6, r0, #20
 8012eec:	4296      	cmp	r6, r2
 8012eee:	d930      	bls.n	8012f52 <_dtoa_r+0x292>
 8012ef0:	6079      	str	r1, [r7, #4]
 8012ef2:	4648      	mov	r0, r9
 8012ef4:	9304      	str	r3, [sp, #16]
 8012ef6:	f000 fc83 	bl	8013800 <_Balloc>
 8012efa:	9b04      	ldr	r3, [sp, #16]
 8012efc:	4607      	mov	r7, r0
 8012efe:	2800      	cmp	r0, #0
 8012f00:	d146      	bne.n	8012f90 <_dtoa_r+0x2d0>
 8012f02:	4b22      	ldr	r3, [pc, #136]	@ (8012f8c <_dtoa_r+0x2cc>)
 8012f04:	4602      	mov	r2, r0
 8012f06:	f240 11af 	movw	r1, #431	@ 0x1af
 8012f0a:	e6f2      	b.n	8012cf2 <_dtoa_r+0x32>
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	e7dd      	b.n	8012ecc <_dtoa_r+0x20c>
 8012f10:	2200      	movs	r2, #0
 8012f12:	9208      	str	r2, [sp, #32]
 8012f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f16:	eb08 0b02 	add.w	fp, r8, r2
 8012f1a:	f10b 0a01 	add.w	sl, fp, #1
 8012f1e:	4652      	mov	r2, sl
 8012f20:	2a01      	cmp	r2, #1
 8012f22:	bfb8      	it	lt
 8012f24:	2201      	movlt	r2, #1
 8012f26:	e7db      	b.n	8012ee0 <_dtoa_r+0x220>
 8012f28:	2201      	movs	r2, #1
 8012f2a:	e7f2      	b.n	8012f12 <_dtoa_r+0x252>
 8012f2c:	2401      	movs	r4, #1
 8012f2e:	2200      	movs	r2, #0
 8012f30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012f34:	f04f 3bff 	mov.w	fp, #4294967295
 8012f38:	2100      	movs	r1, #0
 8012f3a:	46da      	mov	sl, fp
 8012f3c:	2212      	movs	r2, #18
 8012f3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f40:	e7ce      	b.n	8012ee0 <_dtoa_r+0x220>
 8012f42:	2201      	movs	r2, #1
 8012f44:	9208      	str	r2, [sp, #32]
 8012f46:	e7f5      	b.n	8012f34 <_dtoa_r+0x274>
 8012f48:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012f4c:	46da      	mov	sl, fp
 8012f4e:	465a      	mov	r2, fp
 8012f50:	e7c6      	b.n	8012ee0 <_dtoa_r+0x220>
 8012f52:	3101      	adds	r1, #1
 8012f54:	0040      	lsls	r0, r0, #1
 8012f56:	e7c7      	b.n	8012ee8 <_dtoa_r+0x228>
 8012f58:	636f4361 	.word	0x636f4361
 8012f5c:	3fd287a7 	.word	0x3fd287a7
 8012f60:	8b60c8b3 	.word	0x8b60c8b3
 8012f64:	3fc68a28 	.word	0x3fc68a28
 8012f68:	509f79fb 	.word	0x509f79fb
 8012f6c:	3fd34413 	.word	0x3fd34413
 8012f70:	08017161 	.word	0x08017161
 8012f74:	08017178 	.word	0x08017178
 8012f78:	7ff00000 	.word	0x7ff00000
 8012f7c:	0801715d 	.word	0x0801715d
 8012f80:	08017131 	.word	0x08017131
 8012f84:	08017130 	.word	0x08017130
 8012f88:	08017270 	.word	0x08017270
 8012f8c:	080171d0 	.word	0x080171d0
 8012f90:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012f94:	f1ba 0f0e 	cmp.w	sl, #14
 8012f98:	6010      	str	r0, [r2, #0]
 8012f9a:	d86f      	bhi.n	801307c <_dtoa_r+0x3bc>
 8012f9c:	2c00      	cmp	r4, #0
 8012f9e:	d06d      	beq.n	801307c <_dtoa_r+0x3bc>
 8012fa0:	f1b8 0f00 	cmp.w	r8, #0
 8012fa4:	f340 80c2 	ble.w	801312c <_dtoa_r+0x46c>
 8012fa8:	4aca      	ldr	r2, [pc, #808]	@ (80132d4 <_dtoa_r+0x614>)
 8012faa:	f008 010f 	and.w	r1, r8, #15
 8012fae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012fb2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012fb6:	ed92 7b00 	vldr	d7, [r2]
 8012fba:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012fbe:	f000 80a9 	beq.w	8013114 <_dtoa_r+0x454>
 8012fc2:	4ac5      	ldr	r2, [pc, #788]	@ (80132d8 <_dtoa_r+0x618>)
 8012fc4:	ed92 6b08 	vldr	d6, [r2, #32]
 8012fc8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012fcc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012fd0:	f001 010f 	and.w	r1, r1, #15
 8012fd4:	2203      	movs	r2, #3
 8012fd6:	48c0      	ldr	r0, [pc, #768]	@ (80132d8 <_dtoa_r+0x618>)
 8012fd8:	2900      	cmp	r1, #0
 8012fda:	f040 809d 	bne.w	8013118 <_dtoa_r+0x458>
 8012fde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012fe2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012fe6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012fea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012fec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ff0:	2900      	cmp	r1, #0
 8012ff2:	f000 80c1 	beq.w	8013178 <_dtoa_r+0x4b8>
 8012ff6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012ffa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013002:	f140 80b9 	bpl.w	8013178 <_dtoa_r+0x4b8>
 8013006:	f1ba 0f00 	cmp.w	sl, #0
 801300a:	f000 80b5 	beq.w	8013178 <_dtoa_r+0x4b8>
 801300e:	f1bb 0f00 	cmp.w	fp, #0
 8013012:	dd31      	ble.n	8013078 <_dtoa_r+0x3b8>
 8013014:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013018:	ee27 7b06 	vmul.f64	d7, d7, d6
 801301c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013020:	f108 31ff 	add.w	r1, r8, #4294967295
 8013024:	9104      	str	r1, [sp, #16]
 8013026:	3201      	adds	r2, #1
 8013028:	465c      	mov	r4, fp
 801302a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801302e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013032:	ee07 2a90 	vmov	s15, r2
 8013036:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801303a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801303e:	ee15 2a90 	vmov	r2, s11
 8013042:	ec51 0b15 	vmov	r0, r1, d5
 8013046:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801304a:	2c00      	cmp	r4, #0
 801304c:	f040 8098 	bne.w	8013180 <_dtoa_r+0x4c0>
 8013050:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013054:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013058:	ec41 0b17 	vmov	d7, r0, r1
 801305c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013064:	f300 8261 	bgt.w	801352a <_dtoa_r+0x86a>
 8013068:	eeb1 7b47 	vneg.f64	d7, d7
 801306c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013074:	f100 80f5 	bmi.w	8013262 <_dtoa_r+0x5a2>
 8013078:	ed8d 8b02 	vstr	d8, [sp, #8]
 801307c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801307e:	2a00      	cmp	r2, #0
 8013080:	f2c0 812c 	blt.w	80132dc <_dtoa_r+0x61c>
 8013084:	f1b8 0f0e 	cmp.w	r8, #14
 8013088:	f300 8128 	bgt.w	80132dc <_dtoa_r+0x61c>
 801308c:	4b91      	ldr	r3, [pc, #580]	@ (80132d4 <_dtoa_r+0x614>)
 801308e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013092:	ed93 6b00 	vldr	d6, [r3]
 8013096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013098:	2b00      	cmp	r3, #0
 801309a:	da03      	bge.n	80130a4 <_dtoa_r+0x3e4>
 801309c:	f1ba 0f00 	cmp.w	sl, #0
 80130a0:	f340 80d2 	ble.w	8013248 <_dtoa_r+0x588>
 80130a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80130a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130ac:	463e      	mov	r6, r7
 80130ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80130b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80130b6:	ee15 3a10 	vmov	r3, s10
 80130ba:	3330      	adds	r3, #48	@ 0x30
 80130bc:	f806 3b01 	strb.w	r3, [r6], #1
 80130c0:	1bf3      	subs	r3, r6, r7
 80130c2:	459a      	cmp	sl, r3
 80130c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80130c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80130cc:	f040 80f8 	bne.w	80132c0 <_dtoa_r+0x600>
 80130d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80130d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80130d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130dc:	f300 80dd 	bgt.w	801329a <_dtoa_r+0x5da>
 80130e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80130e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e8:	d104      	bne.n	80130f4 <_dtoa_r+0x434>
 80130ea:	ee15 3a10 	vmov	r3, s10
 80130ee:	07db      	lsls	r3, r3, #31
 80130f0:	f100 80d3 	bmi.w	801329a <_dtoa_r+0x5da>
 80130f4:	9901      	ldr	r1, [sp, #4]
 80130f6:	4648      	mov	r0, r9
 80130f8:	f000 fbc2 	bl	8013880 <_Bfree>
 80130fc:	2300      	movs	r3, #0
 80130fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013100:	7033      	strb	r3, [r6, #0]
 8013102:	f108 0301 	add.w	r3, r8, #1
 8013106:	6013      	str	r3, [r2, #0]
 8013108:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801310a:	2b00      	cmp	r3, #0
 801310c:	f000 8304 	beq.w	8013718 <_dtoa_r+0xa58>
 8013110:	601e      	str	r6, [r3, #0]
 8013112:	e301      	b.n	8013718 <_dtoa_r+0xa58>
 8013114:	2202      	movs	r2, #2
 8013116:	e75e      	b.n	8012fd6 <_dtoa_r+0x316>
 8013118:	07cc      	lsls	r4, r1, #31
 801311a:	d504      	bpl.n	8013126 <_dtoa_r+0x466>
 801311c:	ed90 6b00 	vldr	d6, [r0]
 8013120:	3201      	adds	r2, #1
 8013122:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013126:	1049      	asrs	r1, r1, #1
 8013128:	3008      	adds	r0, #8
 801312a:	e755      	b.n	8012fd8 <_dtoa_r+0x318>
 801312c:	d022      	beq.n	8013174 <_dtoa_r+0x4b4>
 801312e:	f1c8 0100 	rsb	r1, r8, #0
 8013132:	4a68      	ldr	r2, [pc, #416]	@ (80132d4 <_dtoa_r+0x614>)
 8013134:	f001 000f 	and.w	r0, r1, #15
 8013138:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801313c:	ed92 7b00 	vldr	d7, [r2]
 8013140:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013144:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013148:	4863      	ldr	r0, [pc, #396]	@ (80132d8 <_dtoa_r+0x618>)
 801314a:	1109      	asrs	r1, r1, #4
 801314c:	2400      	movs	r4, #0
 801314e:	2202      	movs	r2, #2
 8013150:	b929      	cbnz	r1, 801315e <_dtoa_r+0x49e>
 8013152:	2c00      	cmp	r4, #0
 8013154:	f43f af49 	beq.w	8012fea <_dtoa_r+0x32a>
 8013158:	ed8d 7b02 	vstr	d7, [sp, #8]
 801315c:	e745      	b.n	8012fea <_dtoa_r+0x32a>
 801315e:	07ce      	lsls	r6, r1, #31
 8013160:	d505      	bpl.n	801316e <_dtoa_r+0x4ae>
 8013162:	ed90 6b00 	vldr	d6, [r0]
 8013166:	3201      	adds	r2, #1
 8013168:	2401      	movs	r4, #1
 801316a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801316e:	1049      	asrs	r1, r1, #1
 8013170:	3008      	adds	r0, #8
 8013172:	e7ed      	b.n	8013150 <_dtoa_r+0x490>
 8013174:	2202      	movs	r2, #2
 8013176:	e738      	b.n	8012fea <_dtoa_r+0x32a>
 8013178:	f8cd 8010 	str.w	r8, [sp, #16]
 801317c:	4654      	mov	r4, sl
 801317e:	e754      	b.n	801302a <_dtoa_r+0x36a>
 8013180:	4a54      	ldr	r2, [pc, #336]	@ (80132d4 <_dtoa_r+0x614>)
 8013182:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013186:	ed12 4b02 	vldr	d4, [r2, #-8]
 801318a:	9a08      	ldr	r2, [sp, #32]
 801318c:	ec41 0b17 	vmov	d7, r0, r1
 8013190:	443c      	add	r4, r7
 8013192:	b34a      	cbz	r2, 80131e8 <_dtoa_r+0x528>
 8013194:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013198:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801319c:	463e      	mov	r6, r7
 801319e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80131a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80131a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80131aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80131ae:	ee14 2a90 	vmov	r2, s9
 80131b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80131b6:	3230      	adds	r2, #48	@ 0x30
 80131b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80131bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80131c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c4:	f806 2b01 	strb.w	r2, [r6], #1
 80131c8:	d438      	bmi.n	801323c <_dtoa_r+0x57c>
 80131ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 80131ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80131d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d6:	d462      	bmi.n	801329e <_dtoa_r+0x5de>
 80131d8:	42a6      	cmp	r6, r4
 80131da:	f43f af4d 	beq.w	8013078 <_dtoa_r+0x3b8>
 80131de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80131e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80131e6:	e7e0      	b.n	80131aa <_dtoa_r+0x4ea>
 80131e8:	4621      	mov	r1, r4
 80131ea:	463e      	mov	r6, r7
 80131ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 80131f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80131f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80131f8:	ee14 2a90 	vmov	r2, s9
 80131fc:	3230      	adds	r2, #48	@ 0x30
 80131fe:	f806 2b01 	strb.w	r2, [r6], #1
 8013202:	42a6      	cmp	r6, r4
 8013204:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013208:	ee36 6b45 	vsub.f64	d6, d6, d5
 801320c:	d119      	bne.n	8013242 <_dtoa_r+0x582>
 801320e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013212:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013216:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321e:	dc3e      	bgt.n	801329e <_dtoa_r+0x5de>
 8013220:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013224:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801322c:	f57f af24 	bpl.w	8013078 <_dtoa_r+0x3b8>
 8013230:	460e      	mov	r6, r1
 8013232:	3901      	subs	r1, #1
 8013234:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013238:	2b30      	cmp	r3, #48	@ 0x30
 801323a:	d0f9      	beq.n	8013230 <_dtoa_r+0x570>
 801323c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013240:	e758      	b.n	80130f4 <_dtoa_r+0x434>
 8013242:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013246:	e7d5      	b.n	80131f4 <_dtoa_r+0x534>
 8013248:	d10b      	bne.n	8013262 <_dtoa_r+0x5a2>
 801324a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801324e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013252:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013256:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325e:	f2c0 8161 	blt.w	8013524 <_dtoa_r+0x864>
 8013262:	2400      	movs	r4, #0
 8013264:	4625      	mov	r5, r4
 8013266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013268:	43db      	mvns	r3, r3
 801326a:	9304      	str	r3, [sp, #16]
 801326c:	463e      	mov	r6, r7
 801326e:	f04f 0800 	mov.w	r8, #0
 8013272:	4621      	mov	r1, r4
 8013274:	4648      	mov	r0, r9
 8013276:	f000 fb03 	bl	8013880 <_Bfree>
 801327a:	2d00      	cmp	r5, #0
 801327c:	d0de      	beq.n	801323c <_dtoa_r+0x57c>
 801327e:	f1b8 0f00 	cmp.w	r8, #0
 8013282:	d005      	beq.n	8013290 <_dtoa_r+0x5d0>
 8013284:	45a8      	cmp	r8, r5
 8013286:	d003      	beq.n	8013290 <_dtoa_r+0x5d0>
 8013288:	4641      	mov	r1, r8
 801328a:	4648      	mov	r0, r9
 801328c:	f000 faf8 	bl	8013880 <_Bfree>
 8013290:	4629      	mov	r1, r5
 8013292:	4648      	mov	r0, r9
 8013294:	f000 faf4 	bl	8013880 <_Bfree>
 8013298:	e7d0      	b.n	801323c <_dtoa_r+0x57c>
 801329a:	f8cd 8010 	str.w	r8, [sp, #16]
 801329e:	4633      	mov	r3, r6
 80132a0:	461e      	mov	r6, r3
 80132a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132a6:	2a39      	cmp	r2, #57	@ 0x39
 80132a8:	d106      	bne.n	80132b8 <_dtoa_r+0x5f8>
 80132aa:	429f      	cmp	r7, r3
 80132ac:	d1f8      	bne.n	80132a0 <_dtoa_r+0x5e0>
 80132ae:	9a04      	ldr	r2, [sp, #16]
 80132b0:	3201      	adds	r2, #1
 80132b2:	9204      	str	r2, [sp, #16]
 80132b4:	2230      	movs	r2, #48	@ 0x30
 80132b6:	703a      	strb	r2, [r7, #0]
 80132b8:	781a      	ldrb	r2, [r3, #0]
 80132ba:	3201      	adds	r2, #1
 80132bc:	701a      	strb	r2, [r3, #0]
 80132be:	e7bd      	b.n	801323c <_dtoa_r+0x57c>
 80132c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80132c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80132c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132cc:	f47f aeef 	bne.w	80130ae <_dtoa_r+0x3ee>
 80132d0:	e710      	b.n	80130f4 <_dtoa_r+0x434>
 80132d2:	bf00      	nop
 80132d4:	08017270 	.word	0x08017270
 80132d8:	08017248 	.word	0x08017248
 80132dc:	9908      	ldr	r1, [sp, #32]
 80132de:	2900      	cmp	r1, #0
 80132e0:	f000 80e3 	beq.w	80134aa <_dtoa_r+0x7ea>
 80132e4:	9907      	ldr	r1, [sp, #28]
 80132e6:	2901      	cmp	r1, #1
 80132e8:	f300 80c8 	bgt.w	801347c <_dtoa_r+0x7bc>
 80132ec:	2d00      	cmp	r5, #0
 80132ee:	f000 80c1 	beq.w	8013474 <_dtoa_r+0x7b4>
 80132f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80132f6:	9e05      	ldr	r6, [sp, #20]
 80132f8:	461c      	mov	r4, r3
 80132fa:	9304      	str	r3, [sp, #16]
 80132fc:	9b05      	ldr	r3, [sp, #20]
 80132fe:	4413      	add	r3, r2
 8013300:	9305      	str	r3, [sp, #20]
 8013302:	9b06      	ldr	r3, [sp, #24]
 8013304:	2101      	movs	r1, #1
 8013306:	4413      	add	r3, r2
 8013308:	4648      	mov	r0, r9
 801330a:	9306      	str	r3, [sp, #24]
 801330c:	f000 fb6c 	bl	80139e8 <__i2b>
 8013310:	9b04      	ldr	r3, [sp, #16]
 8013312:	4605      	mov	r5, r0
 8013314:	b166      	cbz	r6, 8013330 <_dtoa_r+0x670>
 8013316:	9a06      	ldr	r2, [sp, #24]
 8013318:	2a00      	cmp	r2, #0
 801331a:	dd09      	ble.n	8013330 <_dtoa_r+0x670>
 801331c:	42b2      	cmp	r2, r6
 801331e:	9905      	ldr	r1, [sp, #20]
 8013320:	bfa8      	it	ge
 8013322:	4632      	movge	r2, r6
 8013324:	1a89      	subs	r1, r1, r2
 8013326:	9105      	str	r1, [sp, #20]
 8013328:	9906      	ldr	r1, [sp, #24]
 801332a:	1ab6      	subs	r6, r6, r2
 801332c:	1a8a      	subs	r2, r1, r2
 801332e:	9206      	str	r2, [sp, #24]
 8013330:	b1fb      	cbz	r3, 8013372 <_dtoa_r+0x6b2>
 8013332:	9a08      	ldr	r2, [sp, #32]
 8013334:	2a00      	cmp	r2, #0
 8013336:	f000 80bc 	beq.w	80134b2 <_dtoa_r+0x7f2>
 801333a:	b19c      	cbz	r4, 8013364 <_dtoa_r+0x6a4>
 801333c:	4629      	mov	r1, r5
 801333e:	4622      	mov	r2, r4
 8013340:	4648      	mov	r0, r9
 8013342:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013344:	f000 fc10 	bl	8013b68 <__pow5mult>
 8013348:	9a01      	ldr	r2, [sp, #4]
 801334a:	4601      	mov	r1, r0
 801334c:	4605      	mov	r5, r0
 801334e:	4648      	mov	r0, r9
 8013350:	f000 fb60 	bl	8013a14 <__multiply>
 8013354:	9901      	ldr	r1, [sp, #4]
 8013356:	9004      	str	r0, [sp, #16]
 8013358:	4648      	mov	r0, r9
 801335a:	f000 fa91 	bl	8013880 <_Bfree>
 801335e:	9a04      	ldr	r2, [sp, #16]
 8013360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013362:	9201      	str	r2, [sp, #4]
 8013364:	1b1a      	subs	r2, r3, r4
 8013366:	d004      	beq.n	8013372 <_dtoa_r+0x6b2>
 8013368:	9901      	ldr	r1, [sp, #4]
 801336a:	4648      	mov	r0, r9
 801336c:	f000 fbfc 	bl	8013b68 <__pow5mult>
 8013370:	9001      	str	r0, [sp, #4]
 8013372:	2101      	movs	r1, #1
 8013374:	4648      	mov	r0, r9
 8013376:	f000 fb37 	bl	80139e8 <__i2b>
 801337a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801337c:	4604      	mov	r4, r0
 801337e:	2b00      	cmp	r3, #0
 8013380:	f000 81d0 	beq.w	8013724 <_dtoa_r+0xa64>
 8013384:	461a      	mov	r2, r3
 8013386:	4601      	mov	r1, r0
 8013388:	4648      	mov	r0, r9
 801338a:	f000 fbed 	bl	8013b68 <__pow5mult>
 801338e:	9b07      	ldr	r3, [sp, #28]
 8013390:	2b01      	cmp	r3, #1
 8013392:	4604      	mov	r4, r0
 8013394:	f300 8095 	bgt.w	80134c2 <_dtoa_r+0x802>
 8013398:	9b02      	ldr	r3, [sp, #8]
 801339a:	2b00      	cmp	r3, #0
 801339c:	f040 808b 	bne.w	80134b6 <_dtoa_r+0x7f6>
 80133a0:	9b03      	ldr	r3, [sp, #12]
 80133a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80133a6:	2a00      	cmp	r2, #0
 80133a8:	f040 8087 	bne.w	80134ba <_dtoa_r+0x7fa>
 80133ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80133b0:	0d12      	lsrs	r2, r2, #20
 80133b2:	0512      	lsls	r2, r2, #20
 80133b4:	2a00      	cmp	r2, #0
 80133b6:	f000 8082 	beq.w	80134be <_dtoa_r+0x7fe>
 80133ba:	9b05      	ldr	r3, [sp, #20]
 80133bc:	3301      	adds	r3, #1
 80133be:	9305      	str	r3, [sp, #20]
 80133c0:	9b06      	ldr	r3, [sp, #24]
 80133c2:	3301      	adds	r3, #1
 80133c4:	9306      	str	r3, [sp, #24]
 80133c6:	2301      	movs	r3, #1
 80133c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80133ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	f000 81af 	beq.w	8013730 <_dtoa_r+0xa70>
 80133d2:	6922      	ldr	r2, [r4, #16]
 80133d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80133d8:	6910      	ldr	r0, [r2, #16]
 80133da:	f000 fab9 	bl	8013950 <__hi0bits>
 80133de:	f1c0 0020 	rsb	r0, r0, #32
 80133e2:	9b06      	ldr	r3, [sp, #24]
 80133e4:	4418      	add	r0, r3
 80133e6:	f010 001f 	ands.w	r0, r0, #31
 80133ea:	d076      	beq.n	80134da <_dtoa_r+0x81a>
 80133ec:	f1c0 0220 	rsb	r2, r0, #32
 80133f0:	2a04      	cmp	r2, #4
 80133f2:	dd69      	ble.n	80134c8 <_dtoa_r+0x808>
 80133f4:	9b05      	ldr	r3, [sp, #20]
 80133f6:	f1c0 001c 	rsb	r0, r0, #28
 80133fa:	4403      	add	r3, r0
 80133fc:	9305      	str	r3, [sp, #20]
 80133fe:	9b06      	ldr	r3, [sp, #24]
 8013400:	4406      	add	r6, r0
 8013402:	4403      	add	r3, r0
 8013404:	9306      	str	r3, [sp, #24]
 8013406:	9b05      	ldr	r3, [sp, #20]
 8013408:	2b00      	cmp	r3, #0
 801340a:	dd05      	ble.n	8013418 <_dtoa_r+0x758>
 801340c:	9901      	ldr	r1, [sp, #4]
 801340e:	461a      	mov	r2, r3
 8013410:	4648      	mov	r0, r9
 8013412:	f000 fc03 	bl	8013c1c <__lshift>
 8013416:	9001      	str	r0, [sp, #4]
 8013418:	9b06      	ldr	r3, [sp, #24]
 801341a:	2b00      	cmp	r3, #0
 801341c:	dd05      	ble.n	801342a <_dtoa_r+0x76a>
 801341e:	4621      	mov	r1, r4
 8013420:	461a      	mov	r2, r3
 8013422:	4648      	mov	r0, r9
 8013424:	f000 fbfa 	bl	8013c1c <__lshift>
 8013428:	4604      	mov	r4, r0
 801342a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801342c:	2b00      	cmp	r3, #0
 801342e:	d056      	beq.n	80134de <_dtoa_r+0x81e>
 8013430:	9801      	ldr	r0, [sp, #4]
 8013432:	4621      	mov	r1, r4
 8013434:	f000 fc5e 	bl	8013cf4 <__mcmp>
 8013438:	2800      	cmp	r0, #0
 801343a:	da50      	bge.n	80134de <_dtoa_r+0x81e>
 801343c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013440:	9304      	str	r3, [sp, #16]
 8013442:	9901      	ldr	r1, [sp, #4]
 8013444:	2300      	movs	r3, #0
 8013446:	220a      	movs	r2, #10
 8013448:	4648      	mov	r0, r9
 801344a:	f000 fa3b 	bl	80138c4 <__multadd>
 801344e:	9b08      	ldr	r3, [sp, #32]
 8013450:	9001      	str	r0, [sp, #4]
 8013452:	2b00      	cmp	r3, #0
 8013454:	f000 816e 	beq.w	8013734 <_dtoa_r+0xa74>
 8013458:	4629      	mov	r1, r5
 801345a:	2300      	movs	r3, #0
 801345c:	220a      	movs	r2, #10
 801345e:	4648      	mov	r0, r9
 8013460:	f000 fa30 	bl	80138c4 <__multadd>
 8013464:	f1bb 0f00 	cmp.w	fp, #0
 8013468:	4605      	mov	r5, r0
 801346a:	dc64      	bgt.n	8013536 <_dtoa_r+0x876>
 801346c:	9b07      	ldr	r3, [sp, #28]
 801346e:	2b02      	cmp	r3, #2
 8013470:	dc3e      	bgt.n	80134f0 <_dtoa_r+0x830>
 8013472:	e060      	b.n	8013536 <_dtoa_r+0x876>
 8013474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013476:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801347a:	e73c      	b.n	80132f6 <_dtoa_r+0x636>
 801347c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013480:	42a3      	cmp	r3, r4
 8013482:	bfbf      	itttt	lt
 8013484:	1ae2      	sublt	r2, r4, r3
 8013486:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013488:	189b      	addlt	r3, r3, r2
 801348a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801348c:	bfae      	itee	ge
 801348e:	1b1c      	subge	r4, r3, r4
 8013490:	4623      	movlt	r3, r4
 8013492:	2400      	movlt	r4, #0
 8013494:	f1ba 0f00 	cmp.w	sl, #0
 8013498:	bfb5      	itete	lt
 801349a:	9a05      	ldrlt	r2, [sp, #20]
 801349c:	9e05      	ldrge	r6, [sp, #20]
 801349e:	eba2 060a 	sublt.w	r6, r2, sl
 80134a2:	4652      	movge	r2, sl
 80134a4:	bfb8      	it	lt
 80134a6:	2200      	movlt	r2, #0
 80134a8:	e727      	b.n	80132fa <_dtoa_r+0x63a>
 80134aa:	9e05      	ldr	r6, [sp, #20]
 80134ac:	9d08      	ldr	r5, [sp, #32]
 80134ae:	461c      	mov	r4, r3
 80134b0:	e730      	b.n	8013314 <_dtoa_r+0x654>
 80134b2:	461a      	mov	r2, r3
 80134b4:	e758      	b.n	8013368 <_dtoa_r+0x6a8>
 80134b6:	2300      	movs	r3, #0
 80134b8:	e786      	b.n	80133c8 <_dtoa_r+0x708>
 80134ba:	9b02      	ldr	r3, [sp, #8]
 80134bc:	e784      	b.n	80133c8 <_dtoa_r+0x708>
 80134be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80134c0:	e783      	b.n	80133ca <_dtoa_r+0x70a>
 80134c2:	2300      	movs	r3, #0
 80134c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80134c6:	e784      	b.n	80133d2 <_dtoa_r+0x712>
 80134c8:	d09d      	beq.n	8013406 <_dtoa_r+0x746>
 80134ca:	9b05      	ldr	r3, [sp, #20]
 80134cc:	321c      	adds	r2, #28
 80134ce:	4413      	add	r3, r2
 80134d0:	9305      	str	r3, [sp, #20]
 80134d2:	9b06      	ldr	r3, [sp, #24]
 80134d4:	4416      	add	r6, r2
 80134d6:	4413      	add	r3, r2
 80134d8:	e794      	b.n	8013404 <_dtoa_r+0x744>
 80134da:	4602      	mov	r2, r0
 80134dc:	e7f5      	b.n	80134ca <_dtoa_r+0x80a>
 80134de:	f1ba 0f00 	cmp.w	sl, #0
 80134e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80134e6:	46d3      	mov	fp, sl
 80134e8:	dc21      	bgt.n	801352e <_dtoa_r+0x86e>
 80134ea:	9b07      	ldr	r3, [sp, #28]
 80134ec:	2b02      	cmp	r3, #2
 80134ee:	dd1e      	ble.n	801352e <_dtoa_r+0x86e>
 80134f0:	f1bb 0f00 	cmp.w	fp, #0
 80134f4:	f47f aeb7 	bne.w	8013266 <_dtoa_r+0x5a6>
 80134f8:	4621      	mov	r1, r4
 80134fa:	465b      	mov	r3, fp
 80134fc:	2205      	movs	r2, #5
 80134fe:	4648      	mov	r0, r9
 8013500:	f000 f9e0 	bl	80138c4 <__multadd>
 8013504:	4601      	mov	r1, r0
 8013506:	4604      	mov	r4, r0
 8013508:	9801      	ldr	r0, [sp, #4]
 801350a:	f000 fbf3 	bl	8013cf4 <__mcmp>
 801350e:	2800      	cmp	r0, #0
 8013510:	f77f aea9 	ble.w	8013266 <_dtoa_r+0x5a6>
 8013514:	463e      	mov	r6, r7
 8013516:	2331      	movs	r3, #49	@ 0x31
 8013518:	f806 3b01 	strb.w	r3, [r6], #1
 801351c:	9b04      	ldr	r3, [sp, #16]
 801351e:	3301      	adds	r3, #1
 8013520:	9304      	str	r3, [sp, #16]
 8013522:	e6a4      	b.n	801326e <_dtoa_r+0x5ae>
 8013524:	f8cd 8010 	str.w	r8, [sp, #16]
 8013528:	4654      	mov	r4, sl
 801352a:	4625      	mov	r5, r4
 801352c:	e7f2      	b.n	8013514 <_dtoa_r+0x854>
 801352e:	9b08      	ldr	r3, [sp, #32]
 8013530:	2b00      	cmp	r3, #0
 8013532:	f000 8103 	beq.w	801373c <_dtoa_r+0xa7c>
 8013536:	2e00      	cmp	r6, #0
 8013538:	dd05      	ble.n	8013546 <_dtoa_r+0x886>
 801353a:	4629      	mov	r1, r5
 801353c:	4632      	mov	r2, r6
 801353e:	4648      	mov	r0, r9
 8013540:	f000 fb6c 	bl	8013c1c <__lshift>
 8013544:	4605      	mov	r5, r0
 8013546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013548:	2b00      	cmp	r3, #0
 801354a:	d058      	beq.n	80135fe <_dtoa_r+0x93e>
 801354c:	6869      	ldr	r1, [r5, #4]
 801354e:	4648      	mov	r0, r9
 8013550:	f000 f956 	bl	8013800 <_Balloc>
 8013554:	4606      	mov	r6, r0
 8013556:	b928      	cbnz	r0, 8013564 <_dtoa_r+0x8a4>
 8013558:	4b82      	ldr	r3, [pc, #520]	@ (8013764 <_dtoa_r+0xaa4>)
 801355a:	4602      	mov	r2, r0
 801355c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013560:	f7ff bbc7 	b.w	8012cf2 <_dtoa_r+0x32>
 8013564:	692a      	ldr	r2, [r5, #16]
 8013566:	3202      	adds	r2, #2
 8013568:	0092      	lsls	r2, r2, #2
 801356a:	f105 010c 	add.w	r1, r5, #12
 801356e:	300c      	adds	r0, #12
 8013570:	f7ff fb0f 	bl	8012b92 <memcpy>
 8013574:	2201      	movs	r2, #1
 8013576:	4631      	mov	r1, r6
 8013578:	4648      	mov	r0, r9
 801357a:	f000 fb4f 	bl	8013c1c <__lshift>
 801357e:	1c7b      	adds	r3, r7, #1
 8013580:	9305      	str	r3, [sp, #20]
 8013582:	eb07 030b 	add.w	r3, r7, fp
 8013586:	9309      	str	r3, [sp, #36]	@ 0x24
 8013588:	9b02      	ldr	r3, [sp, #8]
 801358a:	f003 0301 	and.w	r3, r3, #1
 801358e:	46a8      	mov	r8, r5
 8013590:	9308      	str	r3, [sp, #32]
 8013592:	4605      	mov	r5, r0
 8013594:	9b05      	ldr	r3, [sp, #20]
 8013596:	9801      	ldr	r0, [sp, #4]
 8013598:	4621      	mov	r1, r4
 801359a:	f103 3bff 	add.w	fp, r3, #4294967295
 801359e:	f7ff fb06 	bl	8012bae <quorem>
 80135a2:	4641      	mov	r1, r8
 80135a4:	9002      	str	r0, [sp, #8]
 80135a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80135aa:	9801      	ldr	r0, [sp, #4]
 80135ac:	f000 fba2 	bl	8013cf4 <__mcmp>
 80135b0:	462a      	mov	r2, r5
 80135b2:	9006      	str	r0, [sp, #24]
 80135b4:	4621      	mov	r1, r4
 80135b6:	4648      	mov	r0, r9
 80135b8:	f000 fbb8 	bl	8013d2c <__mdiff>
 80135bc:	68c2      	ldr	r2, [r0, #12]
 80135be:	4606      	mov	r6, r0
 80135c0:	b9fa      	cbnz	r2, 8013602 <_dtoa_r+0x942>
 80135c2:	4601      	mov	r1, r0
 80135c4:	9801      	ldr	r0, [sp, #4]
 80135c6:	f000 fb95 	bl	8013cf4 <__mcmp>
 80135ca:	4602      	mov	r2, r0
 80135cc:	4631      	mov	r1, r6
 80135ce:	4648      	mov	r0, r9
 80135d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80135d2:	f000 f955 	bl	8013880 <_Bfree>
 80135d6:	9b07      	ldr	r3, [sp, #28]
 80135d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80135da:	9e05      	ldr	r6, [sp, #20]
 80135dc:	ea43 0102 	orr.w	r1, r3, r2
 80135e0:	9b08      	ldr	r3, [sp, #32]
 80135e2:	4319      	orrs	r1, r3
 80135e4:	d10f      	bne.n	8013606 <_dtoa_r+0x946>
 80135e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80135ea:	d028      	beq.n	801363e <_dtoa_r+0x97e>
 80135ec:	9b06      	ldr	r3, [sp, #24]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	dd02      	ble.n	80135f8 <_dtoa_r+0x938>
 80135f2:	9b02      	ldr	r3, [sp, #8]
 80135f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80135f8:	f88b a000 	strb.w	sl, [fp]
 80135fc:	e639      	b.n	8013272 <_dtoa_r+0x5b2>
 80135fe:	4628      	mov	r0, r5
 8013600:	e7bd      	b.n	801357e <_dtoa_r+0x8be>
 8013602:	2201      	movs	r2, #1
 8013604:	e7e2      	b.n	80135cc <_dtoa_r+0x90c>
 8013606:	9b06      	ldr	r3, [sp, #24]
 8013608:	2b00      	cmp	r3, #0
 801360a:	db04      	blt.n	8013616 <_dtoa_r+0x956>
 801360c:	9907      	ldr	r1, [sp, #28]
 801360e:	430b      	orrs	r3, r1
 8013610:	9908      	ldr	r1, [sp, #32]
 8013612:	430b      	orrs	r3, r1
 8013614:	d120      	bne.n	8013658 <_dtoa_r+0x998>
 8013616:	2a00      	cmp	r2, #0
 8013618:	ddee      	ble.n	80135f8 <_dtoa_r+0x938>
 801361a:	9901      	ldr	r1, [sp, #4]
 801361c:	2201      	movs	r2, #1
 801361e:	4648      	mov	r0, r9
 8013620:	f000 fafc 	bl	8013c1c <__lshift>
 8013624:	4621      	mov	r1, r4
 8013626:	9001      	str	r0, [sp, #4]
 8013628:	f000 fb64 	bl	8013cf4 <__mcmp>
 801362c:	2800      	cmp	r0, #0
 801362e:	dc03      	bgt.n	8013638 <_dtoa_r+0x978>
 8013630:	d1e2      	bne.n	80135f8 <_dtoa_r+0x938>
 8013632:	f01a 0f01 	tst.w	sl, #1
 8013636:	d0df      	beq.n	80135f8 <_dtoa_r+0x938>
 8013638:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801363c:	d1d9      	bne.n	80135f2 <_dtoa_r+0x932>
 801363e:	2339      	movs	r3, #57	@ 0x39
 8013640:	f88b 3000 	strb.w	r3, [fp]
 8013644:	4633      	mov	r3, r6
 8013646:	461e      	mov	r6, r3
 8013648:	3b01      	subs	r3, #1
 801364a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801364e:	2a39      	cmp	r2, #57	@ 0x39
 8013650:	d053      	beq.n	80136fa <_dtoa_r+0xa3a>
 8013652:	3201      	adds	r2, #1
 8013654:	701a      	strb	r2, [r3, #0]
 8013656:	e60c      	b.n	8013272 <_dtoa_r+0x5b2>
 8013658:	2a00      	cmp	r2, #0
 801365a:	dd07      	ble.n	801366c <_dtoa_r+0x9ac>
 801365c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013660:	d0ed      	beq.n	801363e <_dtoa_r+0x97e>
 8013662:	f10a 0301 	add.w	r3, sl, #1
 8013666:	f88b 3000 	strb.w	r3, [fp]
 801366a:	e602      	b.n	8013272 <_dtoa_r+0x5b2>
 801366c:	9b05      	ldr	r3, [sp, #20]
 801366e:	9a05      	ldr	r2, [sp, #20]
 8013670:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013676:	4293      	cmp	r3, r2
 8013678:	d029      	beq.n	80136ce <_dtoa_r+0xa0e>
 801367a:	9901      	ldr	r1, [sp, #4]
 801367c:	2300      	movs	r3, #0
 801367e:	220a      	movs	r2, #10
 8013680:	4648      	mov	r0, r9
 8013682:	f000 f91f 	bl	80138c4 <__multadd>
 8013686:	45a8      	cmp	r8, r5
 8013688:	9001      	str	r0, [sp, #4]
 801368a:	f04f 0300 	mov.w	r3, #0
 801368e:	f04f 020a 	mov.w	r2, #10
 8013692:	4641      	mov	r1, r8
 8013694:	4648      	mov	r0, r9
 8013696:	d107      	bne.n	80136a8 <_dtoa_r+0x9e8>
 8013698:	f000 f914 	bl	80138c4 <__multadd>
 801369c:	4680      	mov	r8, r0
 801369e:	4605      	mov	r5, r0
 80136a0:	9b05      	ldr	r3, [sp, #20]
 80136a2:	3301      	adds	r3, #1
 80136a4:	9305      	str	r3, [sp, #20]
 80136a6:	e775      	b.n	8013594 <_dtoa_r+0x8d4>
 80136a8:	f000 f90c 	bl	80138c4 <__multadd>
 80136ac:	4629      	mov	r1, r5
 80136ae:	4680      	mov	r8, r0
 80136b0:	2300      	movs	r3, #0
 80136b2:	220a      	movs	r2, #10
 80136b4:	4648      	mov	r0, r9
 80136b6:	f000 f905 	bl	80138c4 <__multadd>
 80136ba:	4605      	mov	r5, r0
 80136bc:	e7f0      	b.n	80136a0 <_dtoa_r+0x9e0>
 80136be:	f1bb 0f00 	cmp.w	fp, #0
 80136c2:	bfcc      	ite	gt
 80136c4:	465e      	movgt	r6, fp
 80136c6:	2601      	movle	r6, #1
 80136c8:	443e      	add	r6, r7
 80136ca:	f04f 0800 	mov.w	r8, #0
 80136ce:	9901      	ldr	r1, [sp, #4]
 80136d0:	2201      	movs	r2, #1
 80136d2:	4648      	mov	r0, r9
 80136d4:	f000 faa2 	bl	8013c1c <__lshift>
 80136d8:	4621      	mov	r1, r4
 80136da:	9001      	str	r0, [sp, #4]
 80136dc:	f000 fb0a 	bl	8013cf4 <__mcmp>
 80136e0:	2800      	cmp	r0, #0
 80136e2:	dcaf      	bgt.n	8013644 <_dtoa_r+0x984>
 80136e4:	d102      	bne.n	80136ec <_dtoa_r+0xa2c>
 80136e6:	f01a 0f01 	tst.w	sl, #1
 80136ea:	d1ab      	bne.n	8013644 <_dtoa_r+0x984>
 80136ec:	4633      	mov	r3, r6
 80136ee:	461e      	mov	r6, r3
 80136f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136f4:	2a30      	cmp	r2, #48	@ 0x30
 80136f6:	d0fa      	beq.n	80136ee <_dtoa_r+0xa2e>
 80136f8:	e5bb      	b.n	8013272 <_dtoa_r+0x5b2>
 80136fa:	429f      	cmp	r7, r3
 80136fc:	d1a3      	bne.n	8013646 <_dtoa_r+0x986>
 80136fe:	9b04      	ldr	r3, [sp, #16]
 8013700:	3301      	adds	r3, #1
 8013702:	9304      	str	r3, [sp, #16]
 8013704:	2331      	movs	r3, #49	@ 0x31
 8013706:	703b      	strb	r3, [r7, #0]
 8013708:	e5b3      	b.n	8013272 <_dtoa_r+0x5b2>
 801370a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801370c:	4f16      	ldr	r7, [pc, #88]	@ (8013768 <_dtoa_r+0xaa8>)
 801370e:	b11b      	cbz	r3, 8013718 <_dtoa_r+0xa58>
 8013710:	f107 0308 	add.w	r3, r7, #8
 8013714:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013716:	6013      	str	r3, [r2, #0]
 8013718:	4638      	mov	r0, r7
 801371a:	b011      	add	sp, #68	@ 0x44
 801371c:	ecbd 8b02 	vpop	{d8}
 8013720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013724:	9b07      	ldr	r3, [sp, #28]
 8013726:	2b01      	cmp	r3, #1
 8013728:	f77f ae36 	ble.w	8013398 <_dtoa_r+0x6d8>
 801372c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801372e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013730:	2001      	movs	r0, #1
 8013732:	e656      	b.n	80133e2 <_dtoa_r+0x722>
 8013734:	f1bb 0f00 	cmp.w	fp, #0
 8013738:	f77f aed7 	ble.w	80134ea <_dtoa_r+0x82a>
 801373c:	463e      	mov	r6, r7
 801373e:	9801      	ldr	r0, [sp, #4]
 8013740:	4621      	mov	r1, r4
 8013742:	f7ff fa34 	bl	8012bae <quorem>
 8013746:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801374a:	f806 ab01 	strb.w	sl, [r6], #1
 801374e:	1bf2      	subs	r2, r6, r7
 8013750:	4593      	cmp	fp, r2
 8013752:	ddb4      	ble.n	80136be <_dtoa_r+0x9fe>
 8013754:	9901      	ldr	r1, [sp, #4]
 8013756:	2300      	movs	r3, #0
 8013758:	220a      	movs	r2, #10
 801375a:	4648      	mov	r0, r9
 801375c:	f000 f8b2 	bl	80138c4 <__multadd>
 8013760:	9001      	str	r0, [sp, #4]
 8013762:	e7ec      	b.n	801373e <_dtoa_r+0xa7e>
 8013764:	080171d0 	.word	0x080171d0
 8013768:	08017154 	.word	0x08017154

0801376c <_free_r>:
 801376c:	b538      	push	{r3, r4, r5, lr}
 801376e:	4605      	mov	r5, r0
 8013770:	2900      	cmp	r1, #0
 8013772:	d041      	beq.n	80137f8 <_free_r+0x8c>
 8013774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013778:	1f0c      	subs	r4, r1, #4
 801377a:	2b00      	cmp	r3, #0
 801377c:	bfb8      	it	lt
 801377e:	18e4      	addlt	r4, r4, r3
 8013780:	f7fe fc10 	bl	8011fa4 <__malloc_lock>
 8013784:	4a1d      	ldr	r2, [pc, #116]	@ (80137fc <_free_r+0x90>)
 8013786:	6813      	ldr	r3, [r2, #0]
 8013788:	b933      	cbnz	r3, 8013798 <_free_r+0x2c>
 801378a:	6063      	str	r3, [r4, #4]
 801378c:	6014      	str	r4, [r2, #0]
 801378e:	4628      	mov	r0, r5
 8013790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013794:	f7fe bc0c 	b.w	8011fb0 <__malloc_unlock>
 8013798:	42a3      	cmp	r3, r4
 801379a:	d908      	bls.n	80137ae <_free_r+0x42>
 801379c:	6820      	ldr	r0, [r4, #0]
 801379e:	1821      	adds	r1, r4, r0
 80137a0:	428b      	cmp	r3, r1
 80137a2:	bf01      	itttt	eq
 80137a4:	6819      	ldreq	r1, [r3, #0]
 80137a6:	685b      	ldreq	r3, [r3, #4]
 80137a8:	1809      	addeq	r1, r1, r0
 80137aa:	6021      	streq	r1, [r4, #0]
 80137ac:	e7ed      	b.n	801378a <_free_r+0x1e>
 80137ae:	461a      	mov	r2, r3
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	b10b      	cbz	r3, 80137b8 <_free_r+0x4c>
 80137b4:	42a3      	cmp	r3, r4
 80137b6:	d9fa      	bls.n	80137ae <_free_r+0x42>
 80137b8:	6811      	ldr	r1, [r2, #0]
 80137ba:	1850      	adds	r0, r2, r1
 80137bc:	42a0      	cmp	r0, r4
 80137be:	d10b      	bne.n	80137d8 <_free_r+0x6c>
 80137c0:	6820      	ldr	r0, [r4, #0]
 80137c2:	4401      	add	r1, r0
 80137c4:	1850      	adds	r0, r2, r1
 80137c6:	4283      	cmp	r3, r0
 80137c8:	6011      	str	r1, [r2, #0]
 80137ca:	d1e0      	bne.n	801378e <_free_r+0x22>
 80137cc:	6818      	ldr	r0, [r3, #0]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	6053      	str	r3, [r2, #4]
 80137d2:	4408      	add	r0, r1
 80137d4:	6010      	str	r0, [r2, #0]
 80137d6:	e7da      	b.n	801378e <_free_r+0x22>
 80137d8:	d902      	bls.n	80137e0 <_free_r+0x74>
 80137da:	230c      	movs	r3, #12
 80137dc:	602b      	str	r3, [r5, #0]
 80137de:	e7d6      	b.n	801378e <_free_r+0x22>
 80137e0:	6820      	ldr	r0, [r4, #0]
 80137e2:	1821      	adds	r1, r4, r0
 80137e4:	428b      	cmp	r3, r1
 80137e6:	bf04      	itt	eq
 80137e8:	6819      	ldreq	r1, [r3, #0]
 80137ea:	685b      	ldreq	r3, [r3, #4]
 80137ec:	6063      	str	r3, [r4, #4]
 80137ee:	bf04      	itt	eq
 80137f0:	1809      	addeq	r1, r1, r0
 80137f2:	6021      	streq	r1, [r4, #0]
 80137f4:	6054      	str	r4, [r2, #4]
 80137f6:	e7ca      	b.n	801378e <_free_r+0x22>
 80137f8:	bd38      	pop	{r3, r4, r5, pc}
 80137fa:	bf00      	nop
 80137fc:	24009548 	.word	0x24009548

08013800 <_Balloc>:
 8013800:	b570      	push	{r4, r5, r6, lr}
 8013802:	69c6      	ldr	r6, [r0, #28]
 8013804:	4604      	mov	r4, r0
 8013806:	460d      	mov	r5, r1
 8013808:	b976      	cbnz	r6, 8013828 <_Balloc+0x28>
 801380a:	2010      	movs	r0, #16
 801380c:	f7fe fb20 	bl	8011e50 <malloc>
 8013810:	4602      	mov	r2, r0
 8013812:	61e0      	str	r0, [r4, #28]
 8013814:	b920      	cbnz	r0, 8013820 <_Balloc+0x20>
 8013816:	4b18      	ldr	r3, [pc, #96]	@ (8013878 <_Balloc+0x78>)
 8013818:	4818      	ldr	r0, [pc, #96]	@ (801387c <_Balloc+0x7c>)
 801381a:	216b      	movs	r1, #107	@ 0x6b
 801381c:	f000 fd90 	bl	8014340 <__assert_func>
 8013820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013824:	6006      	str	r6, [r0, #0]
 8013826:	60c6      	str	r6, [r0, #12]
 8013828:	69e6      	ldr	r6, [r4, #28]
 801382a:	68f3      	ldr	r3, [r6, #12]
 801382c:	b183      	cbz	r3, 8013850 <_Balloc+0x50>
 801382e:	69e3      	ldr	r3, [r4, #28]
 8013830:	68db      	ldr	r3, [r3, #12]
 8013832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013836:	b9b8      	cbnz	r0, 8013868 <_Balloc+0x68>
 8013838:	2101      	movs	r1, #1
 801383a:	fa01 f605 	lsl.w	r6, r1, r5
 801383e:	1d72      	adds	r2, r6, #5
 8013840:	0092      	lsls	r2, r2, #2
 8013842:	4620      	mov	r0, r4
 8013844:	f000 fd9a 	bl	801437c <_calloc_r>
 8013848:	b160      	cbz	r0, 8013864 <_Balloc+0x64>
 801384a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801384e:	e00e      	b.n	801386e <_Balloc+0x6e>
 8013850:	2221      	movs	r2, #33	@ 0x21
 8013852:	2104      	movs	r1, #4
 8013854:	4620      	mov	r0, r4
 8013856:	f000 fd91 	bl	801437c <_calloc_r>
 801385a:	69e3      	ldr	r3, [r4, #28]
 801385c:	60f0      	str	r0, [r6, #12]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d1e4      	bne.n	801382e <_Balloc+0x2e>
 8013864:	2000      	movs	r0, #0
 8013866:	bd70      	pop	{r4, r5, r6, pc}
 8013868:	6802      	ldr	r2, [r0, #0]
 801386a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801386e:	2300      	movs	r3, #0
 8013870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013874:	e7f7      	b.n	8013866 <_Balloc+0x66>
 8013876:	bf00      	nop
 8013878:	08017161 	.word	0x08017161
 801387c:	080171e1 	.word	0x080171e1

08013880 <_Bfree>:
 8013880:	b570      	push	{r4, r5, r6, lr}
 8013882:	69c6      	ldr	r6, [r0, #28]
 8013884:	4605      	mov	r5, r0
 8013886:	460c      	mov	r4, r1
 8013888:	b976      	cbnz	r6, 80138a8 <_Bfree+0x28>
 801388a:	2010      	movs	r0, #16
 801388c:	f7fe fae0 	bl	8011e50 <malloc>
 8013890:	4602      	mov	r2, r0
 8013892:	61e8      	str	r0, [r5, #28]
 8013894:	b920      	cbnz	r0, 80138a0 <_Bfree+0x20>
 8013896:	4b09      	ldr	r3, [pc, #36]	@ (80138bc <_Bfree+0x3c>)
 8013898:	4809      	ldr	r0, [pc, #36]	@ (80138c0 <_Bfree+0x40>)
 801389a:	218f      	movs	r1, #143	@ 0x8f
 801389c:	f000 fd50 	bl	8014340 <__assert_func>
 80138a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138a4:	6006      	str	r6, [r0, #0]
 80138a6:	60c6      	str	r6, [r0, #12]
 80138a8:	b13c      	cbz	r4, 80138ba <_Bfree+0x3a>
 80138aa:	69eb      	ldr	r3, [r5, #28]
 80138ac:	6862      	ldr	r2, [r4, #4]
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138b4:	6021      	str	r1, [r4, #0]
 80138b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138ba:	bd70      	pop	{r4, r5, r6, pc}
 80138bc:	08017161 	.word	0x08017161
 80138c0:	080171e1 	.word	0x080171e1

080138c4 <__multadd>:
 80138c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c8:	690d      	ldr	r5, [r1, #16]
 80138ca:	4607      	mov	r7, r0
 80138cc:	460c      	mov	r4, r1
 80138ce:	461e      	mov	r6, r3
 80138d0:	f101 0c14 	add.w	ip, r1, #20
 80138d4:	2000      	movs	r0, #0
 80138d6:	f8dc 3000 	ldr.w	r3, [ip]
 80138da:	b299      	uxth	r1, r3
 80138dc:	fb02 6101 	mla	r1, r2, r1, r6
 80138e0:	0c1e      	lsrs	r6, r3, #16
 80138e2:	0c0b      	lsrs	r3, r1, #16
 80138e4:	fb02 3306 	mla	r3, r2, r6, r3
 80138e8:	b289      	uxth	r1, r1
 80138ea:	3001      	adds	r0, #1
 80138ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80138f0:	4285      	cmp	r5, r0
 80138f2:	f84c 1b04 	str.w	r1, [ip], #4
 80138f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80138fa:	dcec      	bgt.n	80138d6 <__multadd+0x12>
 80138fc:	b30e      	cbz	r6, 8013942 <__multadd+0x7e>
 80138fe:	68a3      	ldr	r3, [r4, #8]
 8013900:	42ab      	cmp	r3, r5
 8013902:	dc19      	bgt.n	8013938 <__multadd+0x74>
 8013904:	6861      	ldr	r1, [r4, #4]
 8013906:	4638      	mov	r0, r7
 8013908:	3101      	adds	r1, #1
 801390a:	f7ff ff79 	bl	8013800 <_Balloc>
 801390e:	4680      	mov	r8, r0
 8013910:	b928      	cbnz	r0, 801391e <__multadd+0x5a>
 8013912:	4602      	mov	r2, r0
 8013914:	4b0c      	ldr	r3, [pc, #48]	@ (8013948 <__multadd+0x84>)
 8013916:	480d      	ldr	r0, [pc, #52]	@ (801394c <__multadd+0x88>)
 8013918:	21ba      	movs	r1, #186	@ 0xba
 801391a:	f000 fd11 	bl	8014340 <__assert_func>
 801391e:	6922      	ldr	r2, [r4, #16]
 8013920:	3202      	adds	r2, #2
 8013922:	f104 010c 	add.w	r1, r4, #12
 8013926:	0092      	lsls	r2, r2, #2
 8013928:	300c      	adds	r0, #12
 801392a:	f7ff f932 	bl	8012b92 <memcpy>
 801392e:	4621      	mov	r1, r4
 8013930:	4638      	mov	r0, r7
 8013932:	f7ff ffa5 	bl	8013880 <_Bfree>
 8013936:	4644      	mov	r4, r8
 8013938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801393c:	3501      	adds	r5, #1
 801393e:	615e      	str	r6, [r3, #20]
 8013940:	6125      	str	r5, [r4, #16]
 8013942:	4620      	mov	r0, r4
 8013944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013948:	080171d0 	.word	0x080171d0
 801394c:	080171e1 	.word	0x080171e1

08013950 <__hi0bits>:
 8013950:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013954:	4603      	mov	r3, r0
 8013956:	bf36      	itet	cc
 8013958:	0403      	lslcc	r3, r0, #16
 801395a:	2000      	movcs	r0, #0
 801395c:	2010      	movcc	r0, #16
 801395e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013962:	bf3c      	itt	cc
 8013964:	021b      	lslcc	r3, r3, #8
 8013966:	3008      	addcc	r0, #8
 8013968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801396c:	bf3c      	itt	cc
 801396e:	011b      	lslcc	r3, r3, #4
 8013970:	3004      	addcc	r0, #4
 8013972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013976:	bf3c      	itt	cc
 8013978:	009b      	lslcc	r3, r3, #2
 801397a:	3002      	addcc	r0, #2
 801397c:	2b00      	cmp	r3, #0
 801397e:	db05      	blt.n	801398c <__hi0bits+0x3c>
 8013980:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013984:	f100 0001 	add.w	r0, r0, #1
 8013988:	bf08      	it	eq
 801398a:	2020      	moveq	r0, #32
 801398c:	4770      	bx	lr

0801398e <__lo0bits>:
 801398e:	6803      	ldr	r3, [r0, #0]
 8013990:	4602      	mov	r2, r0
 8013992:	f013 0007 	ands.w	r0, r3, #7
 8013996:	d00b      	beq.n	80139b0 <__lo0bits+0x22>
 8013998:	07d9      	lsls	r1, r3, #31
 801399a:	d421      	bmi.n	80139e0 <__lo0bits+0x52>
 801399c:	0798      	lsls	r0, r3, #30
 801399e:	bf49      	itett	mi
 80139a0:	085b      	lsrmi	r3, r3, #1
 80139a2:	089b      	lsrpl	r3, r3, #2
 80139a4:	2001      	movmi	r0, #1
 80139a6:	6013      	strmi	r3, [r2, #0]
 80139a8:	bf5c      	itt	pl
 80139aa:	6013      	strpl	r3, [r2, #0]
 80139ac:	2002      	movpl	r0, #2
 80139ae:	4770      	bx	lr
 80139b0:	b299      	uxth	r1, r3
 80139b2:	b909      	cbnz	r1, 80139b8 <__lo0bits+0x2a>
 80139b4:	0c1b      	lsrs	r3, r3, #16
 80139b6:	2010      	movs	r0, #16
 80139b8:	b2d9      	uxtb	r1, r3
 80139ba:	b909      	cbnz	r1, 80139c0 <__lo0bits+0x32>
 80139bc:	3008      	adds	r0, #8
 80139be:	0a1b      	lsrs	r3, r3, #8
 80139c0:	0719      	lsls	r1, r3, #28
 80139c2:	bf04      	itt	eq
 80139c4:	091b      	lsreq	r3, r3, #4
 80139c6:	3004      	addeq	r0, #4
 80139c8:	0799      	lsls	r1, r3, #30
 80139ca:	bf04      	itt	eq
 80139cc:	089b      	lsreq	r3, r3, #2
 80139ce:	3002      	addeq	r0, #2
 80139d0:	07d9      	lsls	r1, r3, #31
 80139d2:	d403      	bmi.n	80139dc <__lo0bits+0x4e>
 80139d4:	085b      	lsrs	r3, r3, #1
 80139d6:	f100 0001 	add.w	r0, r0, #1
 80139da:	d003      	beq.n	80139e4 <__lo0bits+0x56>
 80139dc:	6013      	str	r3, [r2, #0]
 80139de:	4770      	bx	lr
 80139e0:	2000      	movs	r0, #0
 80139e2:	4770      	bx	lr
 80139e4:	2020      	movs	r0, #32
 80139e6:	4770      	bx	lr

080139e8 <__i2b>:
 80139e8:	b510      	push	{r4, lr}
 80139ea:	460c      	mov	r4, r1
 80139ec:	2101      	movs	r1, #1
 80139ee:	f7ff ff07 	bl	8013800 <_Balloc>
 80139f2:	4602      	mov	r2, r0
 80139f4:	b928      	cbnz	r0, 8013a02 <__i2b+0x1a>
 80139f6:	4b05      	ldr	r3, [pc, #20]	@ (8013a0c <__i2b+0x24>)
 80139f8:	4805      	ldr	r0, [pc, #20]	@ (8013a10 <__i2b+0x28>)
 80139fa:	f240 1145 	movw	r1, #325	@ 0x145
 80139fe:	f000 fc9f 	bl	8014340 <__assert_func>
 8013a02:	2301      	movs	r3, #1
 8013a04:	6144      	str	r4, [r0, #20]
 8013a06:	6103      	str	r3, [r0, #16]
 8013a08:	bd10      	pop	{r4, pc}
 8013a0a:	bf00      	nop
 8013a0c:	080171d0 	.word	0x080171d0
 8013a10:	080171e1 	.word	0x080171e1

08013a14 <__multiply>:
 8013a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a18:	4614      	mov	r4, r2
 8013a1a:	690a      	ldr	r2, [r1, #16]
 8013a1c:	6923      	ldr	r3, [r4, #16]
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	bfa8      	it	ge
 8013a22:	4623      	movge	r3, r4
 8013a24:	460f      	mov	r7, r1
 8013a26:	bfa4      	itt	ge
 8013a28:	460c      	movge	r4, r1
 8013a2a:	461f      	movge	r7, r3
 8013a2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013a30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013a34:	68a3      	ldr	r3, [r4, #8]
 8013a36:	6861      	ldr	r1, [r4, #4]
 8013a38:	eb0a 0609 	add.w	r6, sl, r9
 8013a3c:	42b3      	cmp	r3, r6
 8013a3e:	b085      	sub	sp, #20
 8013a40:	bfb8      	it	lt
 8013a42:	3101      	addlt	r1, #1
 8013a44:	f7ff fedc 	bl	8013800 <_Balloc>
 8013a48:	b930      	cbnz	r0, 8013a58 <__multiply+0x44>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	4b44      	ldr	r3, [pc, #272]	@ (8013b60 <__multiply+0x14c>)
 8013a4e:	4845      	ldr	r0, [pc, #276]	@ (8013b64 <__multiply+0x150>)
 8013a50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013a54:	f000 fc74 	bl	8014340 <__assert_func>
 8013a58:	f100 0514 	add.w	r5, r0, #20
 8013a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013a60:	462b      	mov	r3, r5
 8013a62:	2200      	movs	r2, #0
 8013a64:	4543      	cmp	r3, r8
 8013a66:	d321      	bcc.n	8013aac <__multiply+0x98>
 8013a68:	f107 0114 	add.w	r1, r7, #20
 8013a6c:	f104 0214 	add.w	r2, r4, #20
 8013a70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013a74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013a78:	9302      	str	r3, [sp, #8]
 8013a7a:	1b13      	subs	r3, r2, r4
 8013a7c:	3b15      	subs	r3, #21
 8013a7e:	f023 0303 	bic.w	r3, r3, #3
 8013a82:	3304      	adds	r3, #4
 8013a84:	f104 0715 	add.w	r7, r4, #21
 8013a88:	42ba      	cmp	r2, r7
 8013a8a:	bf38      	it	cc
 8013a8c:	2304      	movcc	r3, #4
 8013a8e:	9301      	str	r3, [sp, #4]
 8013a90:	9b02      	ldr	r3, [sp, #8]
 8013a92:	9103      	str	r1, [sp, #12]
 8013a94:	428b      	cmp	r3, r1
 8013a96:	d80c      	bhi.n	8013ab2 <__multiply+0x9e>
 8013a98:	2e00      	cmp	r6, #0
 8013a9a:	dd03      	ble.n	8013aa4 <__multiply+0x90>
 8013a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d05b      	beq.n	8013b5c <__multiply+0x148>
 8013aa4:	6106      	str	r6, [r0, #16]
 8013aa6:	b005      	add	sp, #20
 8013aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aac:	f843 2b04 	str.w	r2, [r3], #4
 8013ab0:	e7d8      	b.n	8013a64 <__multiply+0x50>
 8013ab2:	f8b1 a000 	ldrh.w	sl, [r1]
 8013ab6:	f1ba 0f00 	cmp.w	sl, #0
 8013aba:	d024      	beq.n	8013b06 <__multiply+0xf2>
 8013abc:	f104 0e14 	add.w	lr, r4, #20
 8013ac0:	46a9      	mov	r9, r5
 8013ac2:	f04f 0c00 	mov.w	ip, #0
 8013ac6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013aca:	f8d9 3000 	ldr.w	r3, [r9]
 8013ace:	fa1f fb87 	uxth.w	fp, r7
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013ad8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013adc:	f8d9 7000 	ldr.w	r7, [r9]
 8013ae0:	4463      	add	r3, ip
 8013ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013ae6:	fb0a c70b 	mla	r7, sl, fp, ip
 8013aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013af4:	4572      	cmp	r2, lr
 8013af6:	f849 3b04 	str.w	r3, [r9], #4
 8013afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013afe:	d8e2      	bhi.n	8013ac6 <__multiply+0xb2>
 8013b00:	9b01      	ldr	r3, [sp, #4]
 8013b02:	f845 c003 	str.w	ip, [r5, r3]
 8013b06:	9b03      	ldr	r3, [sp, #12]
 8013b08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013b0c:	3104      	adds	r1, #4
 8013b0e:	f1b9 0f00 	cmp.w	r9, #0
 8013b12:	d021      	beq.n	8013b58 <__multiply+0x144>
 8013b14:	682b      	ldr	r3, [r5, #0]
 8013b16:	f104 0c14 	add.w	ip, r4, #20
 8013b1a:	46ae      	mov	lr, r5
 8013b1c:	f04f 0a00 	mov.w	sl, #0
 8013b20:	f8bc b000 	ldrh.w	fp, [ip]
 8013b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013b28:	fb09 770b 	mla	r7, r9, fp, r7
 8013b2c:	4457      	add	r7, sl
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013b34:	f84e 3b04 	str.w	r3, [lr], #4
 8013b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b40:	f8be 3000 	ldrh.w	r3, [lr]
 8013b44:	fb09 330a 	mla	r3, r9, sl, r3
 8013b48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013b4c:	4562      	cmp	r2, ip
 8013b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b52:	d8e5      	bhi.n	8013b20 <__multiply+0x10c>
 8013b54:	9f01      	ldr	r7, [sp, #4]
 8013b56:	51eb      	str	r3, [r5, r7]
 8013b58:	3504      	adds	r5, #4
 8013b5a:	e799      	b.n	8013a90 <__multiply+0x7c>
 8013b5c:	3e01      	subs	r6, #1
 8013b5e:	e79b      	b.n	8013a98 <__multiply+0x84>
 8013b60:	080171d0 	.word	0x080171d0
 8013b64:	080171e1 	.word	0x080171e1

08013b68 <__pow5mult>:
 8013b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b6c:	4615      	mov	r5, r2
 8013b6e:	f012 0203 	ands.w	r2, r2, #3
 8013b72:	4607      	mov	r7, r0
 8013b74:	460e      	mov	r6, r1
 8013b76:	d007      	beq.n	8013b88 <__pow5mult+0x20>
 8013b78:	4c25      	ldr	r4, [pc, #148]	@ (8013c10 <__pow5mult+0xa8>)
 8013b7a:	3a01      	subs	r2, #1
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b82:	f7ff fe9f 	bl	80138c4 <__multadd>
 8013b86:	4606      	mov	r6, r0
 8013b88:	10ad      	asrs	r5, r5, #2
 8013b8a:	d03d      	beq.n	8013c08 <__pow5mult+0xa0>
 8013b8c:	69fc      	ldr	r4, [r7, #28]
 8013b8e:	b97c      	cbnz	r4, 8013bb0 <__pow5mult+0x48>
 8013b90:	2010      	movs	r0, #16
 8013b92:	f7fe f95d 	bl	8011e50 <malloc>
 8013b96:	4602      	mov	r2, r0
 8013b98:	61f8      	str	r0, [r7, #28]
 8013b9a:	b928      	cbnz	r0, 8013ba8 <__pow5mult+0x40>
 8013b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8013c14 <__pow5mult+0xac>)
 8013b9e:	481e      	ldr	r0, [pc, #120]	@ (8013c18 <__pow5mult+0xb0>)
 8013ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013ba4:	f000 fbcc 	bl	8014340 <__assert_func>
 8013ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013bac:	6004      	str	r4, [r0, #0]
 8013bae:	60c4      	str	r4, [r0, #12]
 8013bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013bb8:	b94c      	cbnz	r4, 8013bce <__pow5mult+0x66>
 8013bba:	f240 2171 	movw	r1, #625	@ 0x271
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	f7ff ff12 	bl	80139e8 <__i2b>
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013bca:	4604      	mov	r4, r0
 8013bcc:	6003      	str	r3, [r0, #0]
 8013bce:	f04f 0900 	mov.w	r9, #0
 8013bd2:	07eb      	lsls	r3, r5, #31
 8013bd4:	d50a      	bpl.n	8013bec <__pow5mult+0x84>
 8013bd6:	4631      	mov	r1, r6
 8013bd8:	4622      	mov	r2, r4
 8013bda:	4638      	mov	r0, r7
 8013bdc:	f7ff ff1a 	bl	8013a14 <__multiply>
 8013be0:	4631      	mov	r1, r6
 8013be2:	4680      	mov	r8, r0
 8013be4:	4638      	mov	r0, r7
 8013be6:	f7ff fe4b 	bl	8013880 <_Bfree>
 8013bea:	4646      	mov	r6, r8
 8013bec:	106d      	asrs	r5, r5, #1
 8013bee:	d00b      	beq.n	8013c08 <__pow5mult+0xa0>
 8013bf0:	6820      	ldr	r0, [r4, #0]
 8013bf2:	b938      	cbnz	r0, 8013c04 <__pow5mult+0x9c>
 8013bf4:	4622      	mov	r2, r4
 8013bf6:	4621      	mov	r1, r4
 8013bf8:	4638      	mov	r0, r7
 8013bfa:	f7ff ff0b 	bl	8013a14 <__multiply>
 8013bfe:	6020      	str	r0, [r4, #0]
 8013c00:	f8c0 9000 	str.w	r9, [r0]
 8013c04:	4604      	mov	r4, r0
 8013c06:	e7e4      	b.n	8013bd2 <__pow5mult+0x6a>
 8013c08:	4630      	mov	r0, r6
 8013c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c0e:	bf00      	nop
 8013c10:	0801723c 	.word	0x0801723c
 8013c14:	08017161 	.word	0x08017161
 8013c18:	080171e1 	.word	0x080171e1

08013c1c <__lshift>:
 8013c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c20:	460c      	mov	r4, r1
 8013c22:	6849      	ldr	r1, [r1, #4]
 8013c24:	6923      	ldr	r3, [r4, #16]
 8013c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c2a:	68a3      	ldr	r3, [r4, #8]
 8013c2c:	4607      	mov	r7, r0
 8013c2e:	4691      	mov	r9, r2
 8013c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c34:	f108 0601 	add.w	r6, r8, #1
 8013c38:	42b3      	cmp	r3, r6
 8013c3a:	db0b      	blt.n	8013c54 <__lshift+0x38>
 8013c3c:	4638      	mov	r0, r7
 8013c3e:	f7ff fddf 	bl	8013800 <_Balloc>
 8013c42:	4605      	mov	r5, r0
 8013c44:	b948      	cbnz	r0, 8013c5a <__lshift+0x3e>
 8013c46:	4602      	mov	r2, r0
 8013c48:	4b28      	ldr	r3, [pc, #160]	@ (8013cec <__lshift+0xd0>)
 8013c4a:	4829      	ldr	r0, [pc, #164]	@ (8013cf0 <__lshift+0xd4>)
 8013c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013c50:	f000 fb76 	bl	8014340 <__assert_func>
 8013c54:	3101      	adds	r1, #1
 8013c56:	005b      	lsls	r3, r3, #1
 8013c58:	e7ee      	b.n	8013c38 <__lshift+0x1c>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	f100 0114 	add.w	r1, r0, #20
 8013c60:	f100 0210 	add.w	r2, r0, #16
 8013c64:	4618      	mov	r0, r3
 8013c66:	4553      	cmp	r3, sl
 8013c68:	db33      	blt.n	8013cd2 <__lshift+0xb6>
 8013c6a:	6920      	ldr	r0, [r4, #16]
 8013c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c70:	f104 0314 	add.w	r3, r4, #20
 8013c74:	f019 091f 	ands.w	r9, r9, #31
 8013c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c80:	d02b      	beq.n	8013cda <__lshift+0xbe>
 8013c82:	f1c9 0e20 	rsb	lr, r9, #32
 8013c86:	468a      	mov	sl, r1
 8013c88:	2200      	movs	r2, #0
 8013c8a:	6818      	ldr	r0, [r3, #0]
 8013c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8013c90:	4310      	orrs	r0, r2
 8013c92:	f84a 0b04 	str.w	r0, [sl], #4
 8013c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c9a:	459c      	cmp	ip, r3
 8013c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013ca0:	d8f3      	bhi.n	8013c8a <__lshift+0x6e>
 8013ca2:	ebac 0304 	sub.w	r3, ip, r4
 8013ca6:	3b15      	subs	r3, #21
 8013ca8:	f023 0303 	bic.w	r3, r3, #3
 8013cac:	3304      	adds	r3, #4
 8013cae:	f104 0015 	add.w	r0, r4, #21
 8013cb2:	4584      	cmp	ip, r0
 8013cb4:	bf38      	it	cc
 8013cb6:	2304      	movcc	r3, #4
 8013cb8:	50ca      	str	r2, [r1, r3]
 8013cba:	b10a      	cbz	r2, 8013cc0 <__lshift+0xa4>
 8013cbc:	f108 0602 	add.w	r6, r8, #2
 8013cc0:	3e01      	subs	r6, #1
 8013cc2:	4638      	mov	r0, r7
 8013cc4:	612e      	str	r6, [r5, #16]
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	f7ff fdda 	bl	8013880 <_Bfree>
 8013ccc:	4628      	mov	r0, r5
 8013cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	e7c5      	b.n	8013c66 <__lshift+0x4a>
 8013cda:	3904      	subs	r1, #4
 8013cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013ce4:	459c      	cmp	ip, r3
 8013ce6:	d8f9      	bhi.n	8013cdc <__lshift+0xc0>
 8013ce8:	e7ea      	b.n	8013cc0 <__lshift+0xa4>
 8013cea:	bf00      	nop
 8013cec:	080171d0 	.word	0x080171d0
 8013cf0:	080171e1 	.word	0x080171e1

08013cf4 <__mcmp>:
 8013cf4:	690a      	ldr	r2, [r1, #16]
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	6900      	ldr	r0, [r0, #16]
 8013cfa:	1a80      	subs	r0, r0, r2
 8013cfc:	b530      	push	{r4, r5, lr}
 8013cfe:	d10e      	bne.n	8013d1e <__mcmp+0x2a>
 8013d00:	3314      	adds	r3, #20
 8013d02:	3114      	adds	r1, #20
 8013d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013d14:	4295      	cmp	r5, r2
 8013d16:	d003      	beq.n	8013d20 <__mcmp+0x2c>
 8013d18:	d205      	bcs.n	8013d26 <__mcmp+0x32>
 8013d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d1e:	bd30      	pop	{r4, r5, pc}
 8013d20:	42a3      	cmp	r3, r4
 8013d22:	d3f3      	bcc.n	8013d0c <__mcmp+0x18>
 8013d24:	e7fb      	b.n	8013d1e <__mcmp+0x2a>
 8013d26:	2001      	movs	r0, #1
 8013d28:	e7f9      	b.n	8013d1e <__mcmp+0x2a>
	...

08013d2c <__mdiff>:
 8013d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d30:	4689      	mov	r9, r1
 8013d32:	4606      	mov	r6, r0
 8013d34:	4611      	mov	r1, r2
 8013d36:	4648      	mov	r0, r9
 8013d38:	4614      	mov	r4, r2
 8013d3a:	f7ff ffdb 	bl	8013cf4 <__mcmp>
 8013d3e:	1e05      	subs	r5, r0, #0
 8013d40:	d112      	bne.n	8013d68 <__mdiff+0x3c>
 8013d42:	4629      	mov	r1, r5
 8013d44:	4630      	mov	r0, r6
 8013d46:	f7ff fd5b 	bl	8013800 <_Balloc>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	b928      	cbnz	r0, 8013d5a <__mdiff+0x2e>
 8013d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8013e4c <__mdiff+0x120>)
 8013d50:	f240 2137 	movw	r1, #567	@ 0x237
 8013d54:	483e      	ldr	r0, [pc, #248]	@ (8013e50 <__mdiff+0x124>)
 8013d56:	f000 faf3 	bl	8014340 <__assert_func>
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013d60:	4610      	mov	r0, r2
 8013d62:	b003      	add	sp, #12
 8013d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d68:	bfbc      	itt	lt
 8013d6a:	464b      	movlt	r3, r9
 8013d6c:	46a1      	movlt	r9, r4
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013d74:	bfba      	itte	lt
 8013d76:	461c      	movlt	r4, r3
 8013d78:	2501      	movlt	r5, #1
 8013d7a:	2500      	movge	r5, #0
 8013d7c:	f7ff fd40 	bl	8013800 <_Balloc>
 8013d80:	4602      	mov	r2, r0
 8013d82:	b918      	cbnz	r0, 8013d8c <__mdiff+0x60>
 8013d84:	4b31      	ldr	r3, [pc, #196]	@ (8013e4c <__mdiff+0x120>)
 8013d86:	f240 2145 	movw	r1, #581	@ 0x245
 8013d8a:	e7e3      	b.n	8013d54 <__mdiff+0x28>
 8013d8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013d90:	6926      	ldr	r6, [r4, #16]
 8013d92:	60c5      	str	r5, [r0, #12]
 8013d94:	f109 0310 	add.w	r3, r9, #16
 8013d98:	f109 0514 	add.w	r5, r9, #20
 8013d9c:	f104 0e14 	add.w	lr, r4, #20
 8013da0:	f100 0b14 	add.w	fp, r0, #20
 8013da4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013da8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013dac:	9301      	str	r3, [sp, #4]
 8013dae:	46d9      	mov	r9, fp
 8013db0:	f04f 0c00 	mov.w	ip, #0
 8013db4:	9b01      	ldr	r3, [sp, #4]
 8013db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013dbe:	9301      	str	r3, [sp, #4]
 8013dc0:	fa1f f38a 	uxth.w	r3, sl
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	b283      	uxth	r3, r0
 8013dc8:	1acb      	subs	r3, r1, r3
 8013dca:	0c00      	lsrs	r0, r0, #16
 8013dcc:	4463      	add	r3, ip
 8013dce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013dd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013ddc:	4576      	cmp	r6, lr
 8013dde:	f849 3b04 	str.w	r3, [r9], #4
 8013de2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013de6:	d8e5      	bhi.n	8013db4 <__mdiff+0x88>
 8013de8:	1b33      	subs	r3, r6, r4
 8013dea:	3b15      	subs	r3, #21
 8013dec:	f023 0303 	bic.w	r3, r3, #3
 8013df0:	3415      	adds	r4, #21
 8013df2:	3304      	adds	r3, #4
 8013df4:	42a6      	cmp	r6, r4
 8013df6:	bf38      	it	cc
 8013df8:	2304      	movcc	r3, #4
 8013dfa:	441d      	add	r5, r3
 8013dfc:	445b      	add	r3, fp
 8013dfe:	461e      	mov	r6, r3
 8013e00:	462c      	mov	r4, r5
 8013e02:	4544      	cmp	r4, r8
 8013e04:	d30e      	bcc.n	8013e24 <__mdiff+0xf8>
 8013e06:	f108 0103 	add.w	r1, r8, #3
 8013e0a:	1b49      	subs	r1, r1, r5
 8013e0c:	f021 0103 	bic.w	r1, r1, #3
 8013e10:	3d03      	subs	r5, #3
 8013e12:	45a8      	cmp	r8, r5
 8013e14:	bf38      	it	cc
 8013e16:	2100      	movcc	r1, #0
 8013e18:	440b      	add	r3, r1
 8013e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013e1e:	b191      	cbz	r1, 8013e46 <__mdiff+0x11a>
 8013e20:	6117      	str	r7, [r2, #16]
 8013e22:	e79d      	b.n	8013d60 <__mdiff+0x34>
 8013e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8013e28:	46e6      	mov	lr, ip
 8013e2a:	0c08      	lsrs	r0, r1, #16
 8013e2c:	fa1c fc81 	uxtah	ip, ip, r1
 8013e30:	4471      	add	r1, lr
 8013e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013e36:	b289      	uxth	r1, r1
 8013e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013e3c:	f846 1b04 	str.w	r1, [r6], #4
 8013e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013e44:	e7dd      	b.n	8013e02 <__mdiff+0xd6>
 8013e46:	3f01      	subs	r7, #1
 8013e48:	e7e7      	b.n	8013e1a <__mdiff+0xee>
 8013e4a:	bf00      	nop
 8013e4c:	080171d0 	.word	0x080171d0
 8013e50:	080171e1 	.word	0x080171e1

08013e54 <__d2b>:
 8013e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013e58:	460f      	mov	r7, r1
 8013e5a:	2101      	movs	r1, #1
 8013e5c:	ec59 8b10 	vmov	r8, r9, d0
 8013e60:	4616      	mov	r6, r2
 8013e62:	f7ff fccd 	bl	8013800 <_Balloc>
 8013e66:	4604      	mov	r4, r0
 8013e68:	b930      	cbnz	r0, 8013e78 <__d2b+0x24>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	4b23      	ldr	r3, [pc, #140]	@ (8013efc <__d2b+0xa8>)
 8013e6e:	4824      	ldr	r0, [pc, #144]	@ (8013f00 <__d2b+0xac>)
 8013e70:	f240 310f 	movw	r1, #783	@ 0x30f
 8013e74:	f000 fa64 	bl	8014340 <__assert_func>
 8013e78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013e7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e80:	b10d      	cbz	r5, 8013e86 <__d2b+0x32>
 8013e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013e86:	9301      	str	r3, [sp, #4]
 8013e88:	f1b8 0300 	subs.w	r3, r8, #0
 8013e8c:	d023      	beq.n	8013ed6 <__d2b+0x82>
 8013e8e:	4668      	mov	r0, sp
 8013e90:	9300      	str	r3, [sp, #0]
 8013e92:	f7ff fd7c 	bl	801398e <__lo0bits>
 8013e96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013e9a:	b1d0      	cbz	r0, 8013ed2 <__d2b+0x7e>
 8013e9c:	f1c0 0320 	rsb	r3, r0, #32
 8013ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8013ea4:	430b      	orrs	r3, r1
 8013ea6:	40c2      	lsrs	r2, r0
 8013ea8:	6163      	str	r3, [r4, #20]
 8013eaa:	9201      	str	r2, [sp, #4]
 8013eac:	9b01      	ldr	r3, [sp, #4]
 8013eae:	61a3      	str	r3, [r4, #24]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	bf0c      	ite	eq
 8013eb4:	2201      	moveq	r2, #1
 8013eb6:	2202      	movne	r2, #2
 8013eb8:	6122      	str	r2, [r4, #16]
 8013eba:	b1a5      	cbz	r5, 8013ee6 <__d2b+0x92>
 8013ebc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013ec0:	4405      	add	r5, r0
 8013ec2:	603d      	str	r5, [r7, #0]
 8013ec4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013ec8:	6030      	str	r0, [r6, #0]
 8013eca:	4620      	mov	r0, r4
 8013ecc:	b003      	add	sp, #12
 8013ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ed2:	6161      	str	r1, [r4, #20]
 8013ed4:	e7ea      	b.n	8013eac <__d2b+0x58>
 8013ed6:	a801      	add	r0, sp, #4
 8013ed8:	f7ff fd59 	bl	801398e <__lo0bits>
 8013edc:	9b01      	ldr	r3, [sp, #4]
 8013ede:	6163      	str	r3, [r4, #20]
 8013ee0:	3020      	adds	r0, #32
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	e7e8      	b.n	8013eb8 <__d2b+0x64>
 8013ee6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013eea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013eee:	6038      	str	r0, [r7, #0]
 8013ef0:	6918      	ldr	r0, [r3, #16]
 8013ef2:	f7ff fd2d 	bl	8013950 <__hi0bits>
 8013ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013efa:	e7e5      	b.n	8013ec8 <__d2b+0x74>
 8013efc:	080171d0 	.word	0x080171d0
 8013f00:	080171e1 	.word	0x080171e1

08013f04 <__ssputs_r>:
 8013f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f08:	688e      	ldr	r6, [r1, #8]
 8013f0a:	461f      	mov	r7, r3
 8013f0c:	42be      	cmp	r6, r7
 8013f0e:	680b      	ldr	r3, [r1, #0]
 8013f10:	4682      	mov	sl, r0
 8013f12:	460c      	mov	r4, r1
 8013f14:	4690      	mov	r8, r2
 8013f16:	d82d      	bhi.n	8013f74 <__ssputs_r+0x70>
 8013f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013f20:	d026      	beq.n	8013f70 <__ssputs_r+0x6c>
 8013f22:	6965      	ldr	r5, [r4, #20]
 8013f24:	6909      	ldr	r1, [r1, #16]
 8013f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f2a:	eba3 0901 	sub.w	r9, r3, r1
 8013f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f32:	1c7b      	adds	r3, r7, #1
 8013f34:	444b      	add	r3, r9
 8013f36:	106d      	asrs	r5, r5, #1
 8013f38:	429d      	cmp	r5, r3
 8013f3a:	bf38      	it	cc
 8013f3c:	461d      	movcc	r5, r3
 8013f3e:	0553      	lsls	r3, r2, #21
 8013f40:	d527      	bpl.n	8013f92 <__ssputs_r+0x8e>
 8013f42:	4629      	mov	r1, r5
 8013f44:	f7fd ffae 	bl	8011ea4 <_malloc_r>
 8013f48:	4606      	mov	r6, r0
 8013f4a:	b360      	cbz	r0, 8013fa6 <__ssputs_r+0xa2>
 8013f4c:	6921      	ldr	r1, [r4, #16]
 8013f4e:	464a      	mov	r2, r9
 8013f50:	f7fe fe1f 	bl	8012b92 <memcpy>
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f5e:	81a3      	strh	r3, [r4, #12]
 8013f60:	6126      	str	r6, [r4, #16]
 8013f62:	6165      	str	r5, [r4, #20]
 8013f64:	444e      	add	r6, r9
 8013f66:	eba5 0509 	sub.w	r5, r5, r9
 8013f6a:	6026      	str	r6, [r4, #0]
 8013f6c:	60a5      	str	r5, [r4, #8]
 8013f6e:	463e      	mov	r6, r7
 8013f70:	42be      	cmp	r6, r7
 8013f72:	d900      	bls.n	8013f76 <__ssputs_r+0x72>
 8013f74:	463e      	mov	r6, r7
 8013f76:	6820      	ldr	r0, [r4, #0]
 8013f78:	4632      	mov	r2, r6
 8013f7a:	4641      	mov	r1, r8
 8013f7c:	f000 f9c6 	bl	801430c <memmove>
 8013f80:	68a3      	ldr	r3, [r4, #8]
 8013f82:	1b9b      	subs	r3, r3, r6
 8013f84:	60a3      	str	r3, [r4, #8]
 8013f86:	6823      	ldr	r3, [r4, #0]
 8013f88:	4433      	add	r3, r6
 8013f8a:	6023      	str	r3, [r4, #0]
 8013f8c:	2000      	movs	r0, #0
 8013f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f92:	462a      	mov	r2, r5
 8013f94:	f000 fa18 	bl	80143c8 <_realloc_r>
 8013f98:	4606      	mov	r6, r0
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d1e0      	bne.n	8013f60 <__ssputs_r+0x5c>
 8013f9e:	6921      	ldr	r1, [r4, #16]
 8013fa0:	4650      	mov	r0, sl
 8013fa2:	f7ff fbe3 	bl	801376c <_free_r>
 8013fa6:	230c      	movs	r3, #12
 8013fa8:	f8ca 3000 	str.w	r3, [sl]
 8013fac:	89a3      	ldrh	r3, [r4, #12]
 8013fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fb2:	81a3      	strh	r3, [r4, #12]
 8013fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fb8:	e7e9      	b.n	8013f8e <__ssputs_r+0x8a>
	...

08013fbc <_svfiprintf_r>:
 8013fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc0:	4698      	mov	r8, r3
 8013fc2:	898b      	ldrh	r3, [r1, #12]
 8013fc4:	061b      	lsls	r3, r3, #24
 8013fc6:	b09d      	sub	sp, #116	@ 0x74
 8013fc8:	4607      	mov	r7, r0
 8013fca:	460d      	mov	r5, r1
 8013fcc:	4614      	mov	r4, r2
 8013fce:	d510      	bpl.n	8013ff2 <_svfiprintf_r+0x36>
 8013fd0:	690b      	ldr	r3, [r1, #16]
 8013fd2:	b973      	cbnz	r3, 8013ff2 <_svfiprintf_r+0x36>
 8013fd4:	2140      	movs	r1, #64	@ 0x40
 8013fd6:	f7fd ff65 	bl	8011ea4 <_malloc_r>
 8013fda:	6028      	str	r0, [r5, #0]
 8013fdc:	6128      	str	r0, [r5, #16]
 8013fde:	b930      	cbnz	r0, 8013fee <_svfiprintf_r+0x32>
 8013fe0:	230c      	movs	r3, #12
 8013fe2:	603b      	str	r3, [r7, #0]
 8013fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe8:	b01d      	add	sp, #116	@ 0x74
 8013fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fee:	2340      	movs	r3, #64	@ 0x40
 8013ff0:	616b      	str	r3, [r5, #20]
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ff6:	2320      	movs	r3, #32
 8013ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014000:	2330      	movs	r3, #48	@ 0x30
 8014002:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80141a0 <_svfiprintf_r+0x1e4>
 8014006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801400a:	f04f 0901 	mov.w	r9, #1
 801400e:	4623      	mov	r3, r4
 8014010:	469a      	mov	sl, r3
 8014012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014016:	b10a      	cbz	r2, 801401c <_svfiprintf_r+0x60>
 8014018:	2a25      	cmp	r2, #37	@ 0x25
 801401a:	d1f9      	bne.n	8014010 <_svfiprintf_r+0x54>
 801401c:	ebba 0b04 	subs.w	fp, sl, r4
 8014020:	d00b      	beq.n	801403a <_svfiprintf_r+0x7e>
 8014022:	465b      	mov	r3, fp
 8014024:	4622      	mov	r2, r4
 8014026:	4629      	mov	r1, r5
 8014028:	4638      	mov	r0, r7
 801402a:	f7ff ff6b 	bl	8013f04 <__ssputs_r>
 801402e:	3001      	adds	r0, #1
 8014030:	f000 80a7 	beq.w	8014182 <_svfiprintf_r+0x1c6>
 8014034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014036:	445a      	add	r2, fp
 8014038:	9209      	str	r2, [sp, #36]	@ 0x24
 801403a:	f89a 3000 	ldrb.w	r3, [sl]
 801403e:	2b00      	cmp	r3, #0
 8014040:	f000 809f 	beq.w	8014182 <_svfiprintf_r+0x1c6>
 8014044:	2300      	movs	r3, #0
 8014046:	f04f 32ff 	mov.w	r2, #4294967295
 801404a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801404e:	f10a 0a01 	add.w	sl, sl, #1
 8014052:	9304      	str	r3, [sp, #16]
 8014054:	9307      	str	r3, [sp, #28]
 8014056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801405a:	931a      	str	r3, [sp, #104]	@ 0x68
 801405c:	4654      	mov	r4, sl
 801405e:	2205      	movs	r2, #5
 8014060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014064:	484e      	ldr	r0, [pc, #312]	@ (80141a0 <_svfiprintf_r+0x1e4>)
 8014066:	f7ec f93b 	bl	80002e0 <memchr>
 801406a:	9a04      	ldr	r2, [sp, #16]
 801406c:	b9d8      	cbnz	r0, 80140a6 <_svfiprintf_r+0xea>
 801406e:	06d0      	lsls	r0, r2, #27
 8014070:	bf44      	itt	mi
 8014072:	2320      	movmi	r3, #32
 8014074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014078:	0711      	lsls	r1, r2, #28
 801407a:	bf44      	itt	mi
 801407c:	232b      	movmi	r3, #43	@ 0x2b
 801407e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014082:	f89a 3000 	ldrb.w	r3, [sl]
 8014086:	2b2a      	cmp	r3, #42	@ 0x2a
 8014088:	d015      	beq.n	80140b6 <_svfiprintf_r+0xfa>
 801408a:	9a07      	ldr	r2, [sp, #28]
 801408c:	4654      	mov	r4, sl
 801408e:	2000      	movs	r0, #0
 8014090:	f04f 0c0a 	mov.w	ip, #10
 8014094:	4621      	mov	r1, r4
 8014096:	f811 3b01 	ldrb.w	r3, [r1], #1
 801409a:	3b30      	subs	r3, #48	@ 0x30
 801409c:	2b09      	cmp	r3, #9
 801409e:	d94b      	bls.n	8014138 <_svfiprintf_r+0x17c>
 80140a0:	b1b0      	cbz	r0, 80140d0 <_svfiprintf_r+0x114>
 80140a2:	9207      	str	r2, [sp, #28]
 80140a4:	e014      	b.n	80140d0 <_svfiprintf_r+0x114>
 80140a6:	eba0 0308 	sub.w	r3, r0, r8
 80140aa:	fa09 f303 	lsl.w	r3, r9, r3
 80140ae:	4313      	orrs	r3, r2
 80140b0:	9304      	str	r3, [sp, #16]
 80140b2:	46a2      	mov	sl, r4
 80140b4:	e7d2      	b.n	801405c <_svfiprintf_r+0xa0>
 80140b6:	9b03      	ldr	r3, [sp, #12]
 80140b8:	1d19      	adds	r1, r3, #4
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	9103      	str	r1, [sp, #12]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	bfbb      	ittet	lt
 80140c2:	425b      	neglt	r3, r3
 80140c4:	f042 0202 	orrlt.w	r2, r2, #2
 80140c8:	9307      	strge	r3, [sp, #28]
 80140ca:	9307      	strlt	r3, [sp, #28]
 80140cc:	bfb8      	it	lt
 80140ce:	9204      	strlt	r2, [sp, #16]
 80140d0:	7823      	ldrb	r3, [r4, #0]
 80140d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80140d4:	d10a      	bne.n	80140ec <_svfiprintf_r+0x130>
 80140d6:	7863      	ldrb	r3, [r4, #1]
 80140d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80140da:	d132      	bne.n	8014142 <_svfiprintf_r+0x186>
 80140dc:	9b03      	ldr	r3, [sp, #12]
 80140de:	1d1a      	adds	r2, r3, #4
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	9203      	str	r2, [sp, #12]
 80140e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80140e8:	3402      	adds	r4, #2
 80140ea:	9305      	str	r3, [sp, #20]
 80140ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80141b0 <_svfiprintf_r+0x1f4>
 80140f0:	7821      	ldrb	r1, [r4, #0]
 80140f2:	2203      	movs	r2, #3
 80140f4:	4650      	mov	r0, sl
 80140f6:	f7ec f8f3 	bl	80002e0 <memchr>
 80140fa:	b138      	cbz	r0, 801410c <_svfiprintf_r+0x150>
 80140fc:	9b04      	ldr	r3, [sp, #16]
 80140fe:	eba0 000a 	sub.w	r0, r0, sl
 8014102:	2240      	movs	r2, #64	@ 0x40
 8014104:	4082      	lsls	r2, r0
 8014106:	4313      	orrs	r3, r2
 8014108:	3401      	adds	r4, #1
 801410a:	9304      	str	r3, [sp, #16]
 801410c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014110:	4824      	ldr	r0, [pc, #144]	@ (80141a4 <_svfiprintf_r+0x1e8>)
 8014112:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014116:	2206      	movs	r2, #6
 8014118:	f7ec f8e2 	bl	80002e0 <memchr>
 801411c:	2800      	cmp	r0, #0
 801411e:	d036      	beq.n	801418e <_svfiprintf_r+0x1d2>
 8014120:	4b21      	ldr	r3, [pc, #132]	@ (80141a8 <_svfiprintf_r+0x1ec>)
 8014122:	bb1b      	cbnz	r3, 801416c <_svfiprintf_r+0x1b0>
 8014124:	9b03      	ldr	r3, [sp, #12]
 8014126:	3307      	adds	r3, #7
 8014128:	f023 0307 	bic.w	r3, r3, #7
 801412c:	3308      	adds	r3, #8
 801412e:	9303      	str	r3, [sp, #12]
 8014130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014132:	4433      	add	r3, r6
 8014134:	9309      	str	r3, [sp, #36]	@ 0x24
 8014136:	e76a      	b.n	801400e <_svfiprintf_r+0x52>
 8014138:	fb0c 3202 	mla	r2, ip, r2, r3
 801413c:	460c      	mov	r4, r1
 801413e:	2001      	movs	r0, #1
 8014140:	e7a8      	b.n	8014094 <_svfiprintf_r+0xd8>
 8014142:	2300      	movs	r3, #0
 8014144:	3401      	adds	r4, #1
 8014146:	9305      	str	r3, [sp, #20]
 8014148:	4619      	mov	r1, r3
 801414a:	f04f 0c0a 	mov.w	ip, #10
 801414e:	4620      	mov	r0, r4
 8014150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014154:	3a30      	subs	r2, #48	@ 0x30
 8014156:	2a09      	cmp	r2, #9
 8014158:	d903      	bls.n	8014162 <_svfiprintf_r+0x1a6>
 801415a:	2b00      	cmp	r3, #0
 801415c:	d0c6      	beq.n	80140ec <_svfiprintf_r+0x130>
 801415e:	9105      	str	r1, [sp, #20]
 8014160:	e7c4      	b.n	80140ec <_svfiprintf_r+0x130>
 8014162:	fb0c 2101 	mla	r1, ip, r1, r2
 8014166:	4604      	mov	r4, r0
 8014168:	2301      	movs	r3, #1
 801416a:	e7f0      	b.n	801414e <_svfiprintf_r+0x192>
 801416c:	ab03      	add	r3, sp, #12
 801416e:	9300      	str	r3, [sp, #0]
 8014170:	462a      	mov	r2, r5
 8014172:	4b0e      	ldr	r3, [pc, #56]	@ (80141ac <_svfiprintf_r+0x1f0>)
 8014174:	a904      	add	r1, sp, #16
 8014176:	4638      	mov	r0, r7
 8014178:	f7fd ffae 	bl	80120d8 <_printf_float>
 801417c:	1c42      	adds	r2, r0, #1
 801417e:	4606      	mov	r6, r0
 8014180:	d1d6      	bne.n	8014130 <_svfiprintf_r+0x174>
 8014182:	89ab      	ldrh	r3, [r5, #12]
 8014184:	065b      	lsls	r3, r3, #25
 8014186:	f53f af2d 	bmi.w	8013fe4 <_svfiprintf_r+0x28>
 801418a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801418c:	e72c      	b.n	8013fe8 <_svfiprintf_r+0x2c>
 801418e:	ab03      	add	r3, sp, #12
 8014190:	9300      	str	r3, [sp, #0]
 8014192:	462a      	mov	r2, r5
 8014194:	4b05      	ldr	r3, [pc, #20]	@ (80141ac <_svfiprintf_r+0x1f0>)
 8014196:	a904      	add	r1, sp, #16
 8014198:	4638      	mov	r0, r7
 801419a:	f7fe fa25 	bl	80125e8 <_printf_i>
 801419e:	e7ed      	b.n	801417c <_svfiprintf_r+0x1c0>
 80141a0:	08017338 	.word	0x08017338
 80141a4:	08017342 	.word	0x08017342
 80141a8:	080120d9 	.word	0x080120d9
 80141ac:	08013f05 	.word	0x08013f05
 80141b0:	0801733e 	.word	0x0801733e

080141b4 <__sflush_r>:
 80141b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80141b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141bc:	0716      	lsls	r6, r2, #28
 80141be:	4605      	mov	r5, r0
 80141c0:	460c      	mov	r4, r1
 80141c2:	d454      	bmi.n	801426e <__sflush_r+0xba>
 80141c4:	684b      	ldr	r3, [r1, #4]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	dc02      	bgt.n	80141d0 <__sflush_r+0x1c>
 80141ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	dd48      	ble.n	8014262 <__sflush_r+0xae>
 80141d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80141d2:	2e00      	cmp	r6, #0
 80141d4:	d045      	beq.n	8014262 <__sflush_r+0xae>
 80141d6:	2300      	movs	r3, #0
 80141d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80141dc:	682f      	ldr	r7, [r5, #0]
 80141de:	6a21      	ldr	r1, [r4, #32]
 80141e0:	602b      	str	r3, [r5, #0]
 80141e2:	d030      	beq.n	8014246 <__sflush_r+0x92>
 80141e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80141e6:	89a3      	ldrh	r3, [r4, #12]
 80141e8:	0759      	lsls	r1, r3, #29
 80141ea:	d505      	bpl.n	80141f8 <__sflush_r+0x44>
 80141ec:	6863      	ldr	r3, [r4, #4]
 80141ee:	1ad2      	subs	r2, r2, r3
 80141f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80141f2:	b10b      	cbz	r3, 80141f8 <__sflush_r+0x44>
 80141f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80141f6:	1ad2      	subs	r2, r2, r3
 80141f8:	2300      	movs	r3, #0
 80141fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80141fc:	6a21      	ldr	r1, [r4, #32]
 80141fe:	4628      	mov	r0, r5
 8014200:	47b0      	blx	r6
 8014202:	1c43      	adds	r3, r0, #1
 8014204:	89a3      	ldrh	r3, [r4, #12]
 8014206:	d106      	bne.n	8014216 <__sflush_r+0x62>
 8014208:	6829      	ldr	r1, [r5, #0]
 801420a:	291d      	cmp	r1, #29
 801420c:	d82b      	bhi.n	8014266 <__sflush_r+0xb2>
 801420e:	4a2a      	ldr	r2, [pc, #168]	@ (80142b8 <__sflush_r+0x104>)
 8014210:	410a      	asrs	r2, r1
 8014212:	07d6      	lsls	r6, r2, #31
 8014214:	d427      	bmi.n	8014266 <__sflush_r+0xb2>
 8014216:	2200      	movs	r2, #0
 8014218:	6062      	str	r2, [r4, #4]
 801421a:	04d9      	lsls	r1, r3, #19
 801421c:	6922      	ldr	r2, [r4, #16]
 801421e:	6022      	str	r2, [r4, #0]
 8014220:	d504      	bpl.n	801422c <__sflush_r+0x78>
 8014222:	1c42      	adds	r2, r0, #1
 8014224:	d101      	bne.n	801422a <__sflush_r+0x76>
 8014226:	682b      	ldr	r3, [r5, #0]
 8014228:	b903      	cbnz	r3, 801422c <__sflush_r+0x78>
 801422a:	6560      	str	r0, [r4, #84]	@ 0x54
 801422c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801422e:	602f      	str	r7, [r5, #0]
 8014230:	b1b9      	cbz	r1, 8014262 <__sflush_r+0xae>
 8014232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014236:	4299      	cmp	r1, r3
 8014238:	d002      	beq.n	8014240 <__sflush_r+0x8c>
 801423a:	4628      	mov	r0, r5
 801423c:	f7ff fa96 	bl	801376c <_free_r>
 8014240:	2300      	movs	r3, #0
 8014242:	6363      	str	r3, [r4, #52]	@ 0x34
 8014244:	e00d      	b.n	8014262 <__sflush_r+0xae>
 8014246:	2301      	movs	r3, #1
 8014248:	4628      	mov	r0, r5
 801424a:	47b0      	blx	r6
 801424c:	4602      	mov	r2, r0
 801424e:	1c50      	adds	r0, r2, #1
 8014250:	d1c9      	bne.n	80141e6 <__sflush_r+0x32>
 8014252:	682b      	ldr	r3, [r5, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d0c6      	beq.n	80141e6 <__sflush_r+0x32>
 8014258:	2b1d      	cmp	r3, #29
 801425a:	d001      	beq.n	8014260 <__sflush_r+0xac>
 801425c:	2b16      	cmp	r3, #22
 801425e:	d11e      	bne.n	801429e <__sflush_r+0xea>
 8014260:	602f      	str	r7, [r5, #0]
 8014262:	2000      	movs	r0, #0
 8014264:	e022      	b.n	80142ac <__sflush_r+0xf8>
 8014266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801426a:	b21b      	sxth	r3, r3
 801426c:	e01b      	b.n	80142a6 <__sflush_r+0xf2>
 801426e:	690f      	ldr	r7, [r1, #16]
 8014270:	2f00      	cmp	r7, #0
 8014272:	d0f6      	beq.n	8014262 <__sflush_r+0xae>
 8014274:	0793      	lsls	r3, r2, #30
 8014276:	680e      	ldr	r6, [r1, #0]
 8014278:	bf08      	it	eq
 801427a:	694b      	ldreq	r3, [r1, #20]
 801427c:	600f      	str	r7, [r1, #0]
 801427e:	bf18      	it	ne
 8014280:	2300      	movne	r3, #0
 8014282:	eba6 0807 	sub.w	r8, r6, r7
 8014286:	608b      	str	r3, [r1, #8]
 8014288:	f1b8 0f00 	cmp.w	r8, #0
 801428c:	dde9      	ble.n	8014262 <__sflush_r+0xae>
 801428e:	6a21      	ldr	r1, [r4, #32]
 8014290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014292:	4643      	mov	r3, r8
 8014294:	463a      	mov	r2, r7
 8014296:	4628      	mov	r0, r5
 8014298:	47b0      	blx	r6
 801429a:	2800      	cmp	r0, #0
 801429c:	dc08      	bgt.n	80142b0 <__sflush_r+0xfc>
 801429e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142a6:	81a3      	strh	r3, [r4, #12]
 80142a8:	f04f 30ff 	mov.w	r0, #4294967295
 80142ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142b0:	4407      	add	r7, r0
 80142b2:	eba8 0800 	sub.w	r8, r8, r0
 80142b6:	e7e7      	b.n	8014288 <__sflush_r+0xd4>
 80142b8:	dfbffffe 	.word	0xdfbffffe

080142bc <_fflush_r>:
 80142bc:	b538      	push	{r3, r4, r5, lr}
 80142be:	690b      	ldr	r3, [r1, #16]
 80142c0:	4605      	mov	r5, r0
 80142c2:	460c      	mov	r4, r1
 80142c4:	b913      	cbnz	r3, 80142cc <_fflush_r+0x10>
 80142c6:	2500      	movs	r5, #0
 80142c8:	4628      	mov	r0, r5
 80142ca:	bd38      	pop	{r3, r4, r5, pc}
 80142cc:	b118      	cbz	r0, 80142d6 <_fflush_r+0x1a>
 80142ce:	6a03      	ldr	r3, [r0, #32]
 80142d0:	b90b      	cbnz	r3, 80142d6 <_fflush_r+0x1a>
 80142d2:	f7fe fb35 	bl	8012940 <__sinit>
 80142d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d0f3      	beq.n	80142c6 <_fflush_r+0xa>
 80142de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80142e0:	07d0      	lsls	r0, r2, #31
 80142e2:	d404      	bmi.n	80142ee <_fflush_r+0x32>
 80142e4:	0599      	lsls	r1, r3, #22
 80142e6:	d402      	bmi.n	80142ee <_fflush_r+0x32>
 80142e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142ea:	f7fe fc50 	bl	8012b8e <__retarget_lock_acquire_recursive>
 80142ee:	4628      	mov	r0, r5
 80142f0:	4621      	mov	r1, r4
 80142f2:	f7ff ff5f 	bl	80141b4 <__sflush_r>
 80142f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142f8:	07da      	lsls	r2, r3, #31
 80142fa:	4605      	mov	r5, r0
 80142fc:	d4e4      	bmi.n	80142c8 <_fflush_r+0xc>
 80142fe:	89a3      	ldrh	r3, [r4, #12]
 8014300:	059b      	lsls	r3, r3, #22
 8014302:	d4e1      	bmi.n	80142c8 <_fflush_r+0xc>
 8014304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014306:	f7fe fc43 	bl	8012b90 <__retarget_lock_release_recursive>
 801430a:	e7dd      	b.n	80142c8 <_fflush_r+0xc>

0801430c <memmove>:
 801430c:	4288      	cmp	r0, r1
 801430e:	b510      	push	{r4, lr}
 8014310:	eb01 0402 	add.w	r4, r1, r2
 8014314:	d902      	bls.n	801431c <memmove+0x10>
 8014316:	4284      	cmp	r4, r0
 8014318:	4623      	mov	r3, r4
 801431a:	d807      	bhi.n	801432c <memmove+0x20>
 801431c:	1e43      	subs	r3, r0, #1
 801431e:	42a1      	cmp	r1, r4
 8014320:	d008      	beq.n	8014334 <memmove+0x28>
 8014322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014326:	f803 2f01 	strb.w	r2, [r3, #1]!
 801432a:	e7f8      	b.n	801431e <memmove+0x12>
 801432c:	4402      	add	r2, r0
 801432e:	4601      	mov	r1, r0
 8014330:	428a      	cmp	r2, r1
 8014332:	d100      	bne.n	8014336 <memmove+0x2a>
 8014334:	bd10      	pop	{r4, pc}
 8014336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801433a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801433e:	e7f7      	b.n	8014330 <memmove+0x24>

08014340 <__assert_func>:
 8014340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014342:	4614      	mov	r4, r2
 8014344:	461a      	mov	r2, r3
 8014346:	4b09      	ldr	r3, [pc, #36]	@ (801436c <__assert_func+0x2c>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	4605      	mov	r5, r0
 801434c:	68d8      	ldr	r0, [r3, #12]
 801434e:	b954      	cbnz	r4, 8014366 <__assert_func+0x26>
 8014350:	4b07      	ldr	r3, [pc, #28]	@ (8014370 <__assert_func+0x30>)
 8014352:	461c      	mov	r4, r3
 8014354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014358:	9100      	str	r1, [sp, #0]
 801435a:	462b      	mov	r3, r5
 801435c:	4905      	ldr	r1, [pc, #20]	@ (8014374 <__assert_func+0x34>)
 801435e:	f000 f86f 	bl	8014440 <fiprintf>
 8014362:	f000 f87f 	bl	8014464 <abort>
 8014366:	4b04      	ldr	r3, [pc, #16]	@ (8014378 <__assert_func+0x38>)
 8014368:	e7f4      	b.n	8014354 <__assert_func+0x14>
 801436a:	bf00      	nop
 801436c:	24000138 	.word	0x24000138
 8014370:	0801738e 	.word	0x0801738e
 8014374:	08017360 	.word	0x08017360
 8014378:	08017353 	.word	0x08017353

0801437c <_calloc_r>:
 801437c:	b570      	push	{r4, r5, r6, lr}
 801437e:	fba1 5402 	umull	r5, r4, r1, r2
 8014382:	b93c      	cbnz	r4, 8014394 <_calloc_r+0x18>
 8014384:	4629      	mov	r1, r5
 8014386:	f7fd fd8d 	bl	8011ea4 <_malloc_r>
 801438a:	4606      	mov	r6, r0
 801438c:	b928      	cbnz	r0, 801439a <_calloc_r+0x1e>
 801438e:	2600      	movs	r6, #0
 8014390:	4630      	mov	r0, r6
 8014392:	bd70      	pop	{r4, r5, r6, pc}
 8014394:	220c      	movs	r2, #12
 8014396:	6002      	str	r2, [r0, #0]
 8014398:	e7f9      	b.n	801438e <_calloc_r+0x12>
 801439a:	462a      	mov	r2, r5
 801439c:	4621      	mov	r1, r4
 801439e:	f7fe fb68 	bl	8012a72 <memset>
 80143a2:	e7f5      	b.n	8014390 <_calloc_r+0x14>

080143a4 <__ascii_mbtowc>:
 80143a4:	b082      	sub	sp, #8
 80143a6:	b901      	cbnz	r1, 80143aa <__ascii_mbtowc+0x6>
 80143a8:	a901      	add	r1, sp, #4
 80143aa:	b142      	cbz	r2, 80143be <__ascii_mbtowc+0x1a>
 80143ac:	b14b      	cbz	r3, 80143c2 <__ascii_mbtowc+0x1e>
 80143ae:	7813      	ldrb	r3, [r2, #0]
 80143b0:	600b      	str	r3, [r1, #0]
 80143b2:	7812      	ldrb	r2, [r2, #0]
 80143b4:	1e10      	subs	r0, r2, #0
 80143b6:	bf18      	it	ne
 80143b8:	2001      	movne	r0, #1
 80143ba:	b002      	add	sp, #8
 80143bc:	4770      	bx	lr
 80143be:	4610      	mov	r0, r2
 80143c0:	e7fb      	b.n	80143ba <__ascii_mbtowc+0x16>
 80143c2:	f06f 0001 	mvn.w	r0, #1
 80143c6:	e7f8      	b.n	80143ba <__ascii_mbtowc+0x16>

080143c8 <_realloc_r>:
 80143c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143cc:	4680      	mov	r8, r0
 80143ce:	4615      	mov	r5, r2
 80143d0:	460c      	mov	r4, r1
 80143d2:	b921      	cbnz	r1, 80143de <_realloc_r+0x16>
 80143d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143d8:	4611      	mov	r1, r2
 80143da:	f7fd bd63 	b.w	8011ea4 <_malloc_r>
 80143de:	b92a      	cbnz	r2, 80143ec <_realloc_r+0x24>
 80143e0:	f7ff f9c4 	bl	801376c <_free_r>
 80143e4:	2400      	movs	r4, #0
 80143e6:	4620      	mov	r0, r4
 80143e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ec:	f000 f841 	bl	8014472 <_malloc_usable_size_r>
 80143f0:	4285      	cmp	r5, r0
 80143f2:	4606      	mov	r6, r0
 80143f4:	d802      	bhi.n	80143fc <_realloc_r+0x34>
 80143f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80143fa:	d8f4      	bhi.n	80143e6 <_realloc_r+0x1e>
 80143fc:	4629      	mov	r1, r5
 80143fe:	4640      	mov	r0, r8
 8014400:	f7fd fd50 	bl	8011ea4 <_malloc_r>
 8014404:	4607      	mov	r7, r0
 8014406:	2800      	cmp	r0, #0
 8014408:	d0ec      	beq.n	80143e4 <_realloc_r+0x1c>
 801440a:	42b5      	cmp	r5, r6
 801440c:	462a      	mov	r2, r5
 801440e:	4621      	mov	r1, r4
 8014410:	bf28      	it	cs
 8014412:	4632      	movcs	r2, r6
 8014414:	f7fe fbbd 	bl	8012b92 <memcpy>
 8014418:	4621      	mov	r1, r4
 801441a:	4640      	mov	r0, r8
 801441c:	f7ff f9a6 	bl	801376c <_free_r>
 8014420:	463c      	mov	r4, r7
 8014422:	e7e0      	b.n	80143e6 <_realloc_r+0x1e>

08014424 <__ascii_wctomb>:
 8014424:	4603      	mov	r3, r0
 8014426:	4608      	mov	r0, r1
 8014428:	b141      	cbz	r1, 801443c <__ascii_wctomb+0x18>
 801442a:	2aff      	cmp	r2, #255	@ 0xff
 801442c:	d904      	bls.n	8014438 <__ascii_wctomb+0x14>
 801442e:	228a      	movs	r2, #138	@ 0x8a
 8014430:	601a      	str	r2, [r3, #0]
 8014432:	f04f 30ff 	mov.w	r0, #4294967295
 8014436:	4770      	bx	lr
 8014438:	700a      	strb	r2, [r1, #0]
 801443a:	2001      	movs	r0, #1
 801443c:	4770      	bx	lr
	...

08014440 <fiprintf>:
 8014440:	b40e      	push	{r1, r2, r3}
 8014442:	b503      	push	{r0, r1, lr}
 8014444:	4601      	mov	r1, r0
 8014446:	ab03      	add	r3, sp, #12
 8014448:	4805      	ldr	r0, [pc, #20]	@ (8014460 <fiprintf+0x20>)
 801444a:	f853 2b04 	ldr.w	r2, [r3], #4
 801444e:	6800      	ldr	r0, [r0, #0]
 8014450:	9301      	str	r3, [sp, #4]
 8014452:	f000 f83f 	bl	80144d4 <_vfiprintf_r>
 8014456:	b002      	add	sp, #8
 8014458:	f85d eb04 	ldr.w	lr, [sp], #4
 801445c:	b003      	add	sp, #12
 801445e:	4770      	bx	lr
 8014460:	24000138 	.word	0x24000138

08014464 <abort>:
 8014464:	b508      	push	{r3, lr}
 8014466:	2006      	movs	r0, #6
 8014468:	f000 fa08 	bl	801487c <raise>
 801446c:	2001      	movs	r0, #1
 801446e:	f7ed f8b7 	bl	80015e0 <_exit>

08014472 <_malloc_usable_size_r>:
 8014472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014476:	1f18      	subs	r0, r3, #4
 8014478:	2b00      	cmp	r3, #0
 801447a:	bfbc      	itt	lt
 801447c:	580b      	ldrlt	r3, [r1, r0]
 801447e:	18c0      	addlt	r0, r0, r3
 8014480:	4770      	bx	lr

08014482 <__sfputc_r>:
 8014482:	6893      	ldr	r3, [r2, #8]
 8014484:	3b01      	subs	r3, #1
 8014486:	2b00      	cmp	r3, #0
 8014488:	b410      	push	{r4}
 801448a:	6093      	str	r3, [r2, #8]
 801448c:	da08      	bge.n	80144a0 <__sfputc_r+0x1e>
 801448e:	6994      	ldr	r4, [r2, #24]
 8014490:	42a3      	cmp	r3, r4
 8014492:	db01      	blt.n	8014498 <__sfputc_r+0x16>
 8014494:	290a      	cmp	r1, #10
 8014496:	d103      	bne.n	80144a0 <__sfputc_r+0x1e>
 8014498:	f85d 4b04 	ldr.w	r4, [sp], #4
 801449c:	f000 b932 	b.w	8014704 <__swbuf_r>
 80144a0:	6813      	ldr	r3, [r2, #0]
 80144a2:	1c58      	adds	r0, r3, #1
 80144a4:	6010      	str	r0, [r2, #0]
 80144a6:	7019      	strb	r1, [r3, #0]
 80144a8:	4608      	mov	r0, r1
 80144aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144ae:	4770      	bx	lr

080144b0 <__sfputs_r>:
 80144b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144b2:	4606      	mov	r6, r0
 80144b4:	460f      	mov	r7, r1
 80144b6:	4614      	mov	r4, r2
 80144b8:	18d5      	adds	r5, r2, r3
 80144ba:	42ac      	cmp	r4, r5
 80144bc:	d101      	bne.n	80144c2 <__sfputs_r+0x12>
 80144be:	2000      	movs	r0, #0
 80144c0:	e007      	b.n	80144d2 <__sfputs_r+0x22>
 80144c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144c6:	463a      	mov	r2, r7
 80144c8:	4630      	mov	r0, r6
 80144ca:	f7ff ffda 	bl	8014482 <__sfputc_r>
 80144ce:	1c43      	adds	r3, r0, #1
 80144d0:	d1f3      	bne.n	80144ba <__sfputs_r+0xa>
 80144d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144d4 <_vfiprintf_r>:
 80144d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d8:	460d      	mov	r5, r1
 80144da:	b09d      	sub	sp, #116	@ 0x74
 80144dc:	4614      	mov	r4, r2
 80144de:	4698      	mov	r8, r3
 80144e0:	4606      	mov	r6, r0
 80144e2:	b118      	cbz	r0, 80144ec <_vfiprintf_r+0x18>
 80144e4:	6a03      	ldr	r3, [r0, #32]
 80144e6:	b90b      	cbnz	r3, 80144ec <_vfiprintf_r+0x18>
 80144e8:	f7fe fa2a 	bl	8012940 <__sinit>
 80144ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144ee:	07d9      	lsls	r1, r3, #31
 80144f0:	d405      	bmi.n	80144fe <_vfiprintf_r+0x2a>
 80144f2:	89ab      	ldrh	r3, [r5, #12]
 80144f4:	059a      	lsls	r2, r3, #22
 80144f6:	d402      	bmi.n	80144fe <_vfiprintf_r+0x2a>
 80144f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144fa:	f7fe fb48 	bl	8012b8e <__retarget_lock_acquire_recursive>
 80144fe:	89ab      	ldrh	r3, [r5, #12]
 8014500:	071b      	lsls	r3, r3, #28
 8014502:	d501      	bpl.n	8014508 <_vfiprintf_r+0x34>
 8014504:	692b      	ldr	r3, [r5, #16]
 8014506:	b99b      	cbnz	r3, 8014530 <_vfiprintf_r+0x5c>
 8014508:	4629      	mov	r1, r5
 801450a:	4630      	mov	r0, r6
 801450c:	f000 f938 	bl	8014780 <__swsetup_r>
 8014510:	b170      	cbz	r0, 8014530 <_vfiprintf_r+0x5c>
 8014512:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014514:	07dc      	lsls	r4, r3, #31
 8014516:	d504      	bpl.n	8014522 <_vfiprintf_r+0x4e>
 8014518:	f04f 30ff 	mov.w	r0, #4294967295
 801451c:	b01d      	add	sp, #116	@ 0x74
 801451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014522:	89ab      	ldrh	r3, [r5, #12]
 8014524:	0598      	lsls	r0, r3, #22
 8014526:	d4f7      	bmi.n	8014518 <_vfiprintf_r+0x44>
 8014528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801452a:	f7fe fb31 	bl	8012b90 <__retarget_lock_release_recursive>
 801452e:	e7f3      	b.n	8014518 <_vfiprintf_r+0x44>
 8014530:	2300      	movs	r3, #0
 8014532:	9309      	str	r3, [sp, #36]	@ 0x24
 8014534:	2320      	movs	r3, #32
 8014536:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801453a:	f8cd 800c 	str.w	r8, [sp, #12]
 801453e:	2330      	movs	r3, #48	@ 0x30
 8014540:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80146f0 <_vfiprintf_r+0x21c>
 8014544:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014548:	f04f 0901 	mov.w	r9, #1
 801454c:	4623      	mov	r3, r4
 801454e:	469a      	mov	sl, r3
 8014550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014554:	b10a      	cbz	r2, 801455a <_vfiprintf_r+0x86>
 8014556:	2a25      	cmp	r2, #37	@ 0x25
 8014558:	d1f9      	bne.n	801454e <_vfiprintf_r+0x7a>
 801455a:	ebba 0b04 	subs.w	fp, sl, r4
 801455e:	d00b      	beq.n	8014578 <_vfiprintf_r+0xa4>
 8014560:	465b      	mov	r3, fp
 8014562:	4622      	mov	r2, r4
 8014564:	4629      	mov	r1, r5
 8014566:	4630      	mov	r0, r6
 8014568:	f7ff ffa2 	bl	80144b0 <__sfputs_r>
 801456c:	3001      	adds	r0, #1
 801456e:	f000 80a7 	beq.w	80146c0 <_vfiprintf_r+0x1ec>
 8014572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014574:	445a      	add	r2, fp
 8014576:	9209      	str	r2, [sp, #36]	@ 0x24
 8014578:	f89a 3000 	ldrb.w	r3, [sl]
 801457c:	2b00      	cmp	r3, #0
 801457e:	f000 809f 	beq.w	80146c0 <_vfiprintf_r+0x1ec>
 8014582:	2300      	movs	r3, #0
 8014584:	f04f 32ff 	mov.w	r2, #4294967295
 8014588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801458c:	f10a 0a01 	add.w	sl, sl, #1
 8014590:	9304      	str	r3, [sp, #16]
 8014592:	9307      	str	r3, [sp, #28]
 8014594:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014598:	931a      	str	r3, [sp, #104]	@ 0x68
 801459a:	4654      	mov	r4, sl
 801459c:	2205      	movs	r2, #5
 801459e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145a2:	4853      	ldr	r0, [pc, #332]	@ (80146f0 <_vfiprintf_r+0x21c>)
 80145a4:	f7eb fe9c 	bl	80002e0 <memchr>
 80145a8:	9a04      	ldr	r2, [sp, #16]
 80145aa:	b9d8      	cbnz	r0, 80145e4 <_vfiprintf_r+0x110>
 80145ac:	06d1      	lsls	r1, r2, #27
 80145ae:	bf44      	itt	mi
 80145b0:	2320      	movmi	r3, #32
 80145b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145b6:	0713      	lsls	r3, r2, #28
 80145b8:	bf44      	itt	mi
 80145ba:	232b      	movmi	r3, #43	@ 0x2b
 80145bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145c0:	f89a 3000 	ldrb.w	r3, [sl]
 80145c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80145c6:	d015      	beq.n	80145f4 <_vfiprintf_r+0x120>
 80145c8:	9a07      	ldr	r2, [sp, #28]
 80145ca:	4654      	mov	r4, sl
 80145cc:	2000      	movs	r0, #0
 80145ce:	f04f 0c0a 	mov.w	ip, #10
 80145d2:	4621      	mov	r1, r4
 80145d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145d8:	3b30      	subs	r3, #48	@ 0x30
 80145da:	2b09      	cmp	r3, #9
 80145dc:	d94b      	bls.n	8014676 <_vfiprintf_r+0x1a2>
 80145de:	b1b0      	cbz	r0, 801460e <_vfiprintf_r+0x13a>
 80145e0:	9207      	str	r2, [sp, #28]
 80145e2:	e014      	b.n	801460e <_vfiprintf_r+0x13a>
 80145e4:	eba0 0308 	sub.w	r3, r0, r8
 80145e8:	fa09 f303 	lsl.w	r3, r9, r3
 80145ec:	4313      	orrs	r3, r2
 80145ee:	9304      	str	r3, [sp, #16]
 80145f0:	46a2      	mov	sl, r4
 80145f2:	e7d2      	b.n	801459a <_vfiprintf_r+0xc6>
 80145f4:	9b03      	ldr	r3, [sp, #12]
 80145f6:	1d19      	adds	r1, r3, #4
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	9103      	str	r1, [sp, #12]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	bfbb      	ittet	lt
 8014600:	425b      	neglt	r3, r3
 8014602:	f042 0202 	orrlt.w	r2, r2, #2
 8014606:	9307      	strge	r3, [sp, #28]
 8014608:	9307      	strlt	r3, [sp, #28]
 801460a:	bfb8      	it	lt
 801460c:	9204      	strlt	r2, [sp, #16]
 801460e:	7823      	ldrb	r3, [r4, #0]
 8014610:	2b2e      	cmp	r3, #46	@ 0x2e
 8014612:	d10a      	bne.n	801462a <_vfiprintf_r+0x156>
 8014614:	7863      	ldrb	r3, [r4, #1]
 8014616:	2b2a      	cmp	r3, #42	@ 0x2a
 8014618:	d132      	bne.n	8014680 <_vfiprintf_r+0x1ac>
 801461a:	9b03      	ldr	r3, [sp, #12]
 801461c:	1d1a      	adds	r2, r3, #4
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	9203      	str	r2, [sp, #12]
 8014622:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014626:	3402      	adds	r4, #2
 8014628:	9305      	str	r3, [sp, #20]
 801462a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014700 <_vfiprintf_r+0x22c>
 801462e:	7821      	ldrb	r1, [r4, #0]
 8014630:	2203      	movs	r2, #3
 8014632:	4650      	mov	r0, sl
 8014634:	f7eb fe54 	bl	80002e0 <memchr>
 8014638:	b138      	cbz	r0, 801464a <_vfiprintf_r+0x176>
 801463a:	9b04      	ldr	r3, [sp, #16]
 801463c:	eba0 000a 	sub.w	r0, r0, sl
 8014640:	2240      	movs	r2, #64	@ 0x40
 8014642:	4082      	lsls	r2, r0
 8014644:	4313      	orrs	r3, r2
 8014646:	3401      	adds	r4, #1
 8014648:	9304      	str	r3, [sp, #16]
 801464a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801464e:	4829      	ldr	r0, [pc, #164]	@ (80146f4 <_vfiprintf_r+0x220>)
 8014650:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014654:	2206      	movs	r2, #6
 8014656:	f7eb fe43 	bl	80002e0 <memchr>
 801465a:	2800      	cmp	r0, #0
 801465c:	d03f      	beq.n	80146de <_vfiprintf_r+0x20a>
 801465e:	4b26      	ldr	r3, [pc, #152]	@ (80146f8 <_vfiprintf_r+0x224>)
 8014660:	bb1b      	cbnz	r3, 80146aa <_vfiprintf_r+0x1d6>
 8014662:	9b03      	ldr	r3, [sp, #12]
 8014664:	3307      	adds	r3, #7
 8014666:	f023 0307 	bic.w	r3, r3, #7
 801466a:	3308      	adds	r3, #8
 801466c:	9303      	str	r3, [sp, #12]
 801466e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014670:	443b      	add	r3, r7
 8014672:	9309      	str	r3, [sp, #36]	@ 0x24
 8014674:	e76a      	b.n	801454c <_vfiprintf_r+0x78>
 8014676:	fb0c 3202 	mla	r2, ip, r2, r3
 801467a:	460c      	mov	r4, r1
 801467c:	2001      	movs	r0, #1
 801467e:	e7a8      	b.n	80145d2 <_vfiprintf_r+0xfe>
 8014680:	2300      	movs	r3, #0
 8014682:	3401      	adds	r4, #1
 8014684:	9305      	str	r3, [sp, #20]
 8014686:	4619      	mov	r1, r3
 8014688:	f04f 0c0a 	mov.w	ip, #10
 801468c:	4620      	mov	r0, r4
 801468e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014692:	3a30      	subs	r2, #48	@ 0x30
 8014694:	2a09      	cmp	r2, #9
 8014696:	d903      	bls.n	80146a0 <_vfiprintf_r+0x1cc>
 8014698:	2b00      	cmp	r3, #0
 801469a:	d0c6      	beq.n	801462a <_vfiprintf_r+0x156>
 801469c:	9105      	str	r1, [sp, #20]
 801469e:	e7c4      	b.n	801462a <_vfiprintf_r+0x156>
 80146a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80146a4:	4604      	mov	r4, r0
 80146a6:	2301      	movs	r3, #1
 80146a8:	e7f0      	b.n	801468c <_vfiprintf_r+0x1b8>
 80146aa:	ab03      	add	r3, sp, #12
 80146ac:	9300      	str	r3, [sp, #0]
 80146ae:	462a      	mov	r2, r5
 80146b0:	4b12      	ldr	r3, [pc, #72]	@ (80146fc <_vfiprintf_r+0x228>)
 80146b2:	a904      	add	r1, sp, #16
 80146b4:	4630      	mov	r0, r6
 80146b6:	f7fd fd0f 	bl	80120d8 <_printf_float>
 80146ba:	4607      	mov	r7, r0
 80146bc:	1c78      	adds	r0, r7, #1
 80146be:	d1d6      	bne.n	801466e <_vfiprintf_r+0x19a>
 80146c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80146c2:	07d9      	lsls	r1, r3, #31
 80146c4:	d405      	bmi.n	80146d2 <_vfiprintf_r+0x1fe>
 80146c6:	89ab      	ldrh	r3, [r5, #12]
 80146c8:	059a      	lsls	r2, r3, #22
 80146ca:	d402      	bmi.n	80146d2 <_vfiprintf_r+0x1fe>
 80146cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146ce:	f7fe fa5f 	bl	8012b90 <__retarget_lock_release_recursive>
 80146d2:	89ab      	ldrh	r3, [r5, #12]
 80146d4:	065b      	lsls	r3, r3, #25
 80146d6:	f53f af1f 	bmi.w	8014518 <_vfiprintf_r+0x44>
 80146da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80146dc:	e71e      	b.n	801451c <_vfiprintf_r+0x48>
 80146de:	ab03      	add	r3, sp, #12
 80146e0:	9300      	str	r3, [sp, #0]
 80146e2:	462a      	mov	r2, r5
 80146e4:	4b05      	ldr	r3, [pc, #20]	@ (80146fc <_vfiprintf_r+0x228>)
 80146e6:	a904      	add	r1, sp, #16
 80146e8:	4630      	mov	r0, r6
 80146ea:	f7fd ff7d 	bl	80125e8 <_printf_i>
 80146ee:	e7e4      	b.n	80146ba <_vfiprintf_r+0x1e6>
 80146f0:	08017338 	.word	0x08017338
 80146f4:	08017342 	.word	0x08017342
 80146f8:	080120d9 	.word	0x080120d9
 80146fc:	080144b1 	.word	0x080144b1
 8014700:	0801733e 	.word	0x0801733e

08014704 <__swbuf_r>:
 8014704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014706:	460e      	mov	r6, r1
 8014708:	4614      	mov	r4, r2
 801470a:	4605      	mov	r5, r0
 801470c:	b118      	cbz	r0, 8014716 <__swbuf_r+0x12>
 801470e:	6a03      	ldr	r3, [r0, #32]
 8014710:	b90b      	cbnz	r3, 8014716 <__swbuf_r+0x12>
 8014712:	f7fe f915 	bl	8012940 <__sinit>
 8014716:	69a3      	ldr	r3, [r4, #24]
 8014718:	60a3      	str	r3, [r4, #8]
 801471a:	89a3      	ldrh	r3, [r4, #12]
 801471c:	071a      	lsls	r2, r3, #28
 801471e:	d501      	bpl.n	8014724 <__swbuf_r+0x20>
 8014720:	6923      	ldr	r3, [r4, #16]
 8014722:	b943      	cbnz	r3, 8014736 <__swbuf_r+0x32>
 8014724:	4621      	mov	r1, r4
 8014726:	4628      	mov	r0, r5
 8014728:	f000 f82a 	bl	8014780 <__swsetup_r>
 801472c:	b118      	cbz	r0, 8014736 <__swbuf_r+0x32>
 801472e:	f04f 37ff 	mov.w	r7, #4294967295
 8014732:	4638      	mov	r0, r7
 8014734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014736:	6823      	ldr	r3, [r4, #0]
 8014738:	6922      	ldr	r2, [r4, #16]
 801473a:	1a98      	subs	r0, r3, r2
 801473c:	6963      	ldr	r3, [r4, #20]
 801473e:	b2f6      	uxtb	r6, r6
 8014740:	4283      	cmp	r3, r0
 8014742:	4637      	mov	r7, r6
 8014744:	dc05      	bgt.n	8014752 <__swbuf_r+0x4e>
 8014746:	4621      	mov	r1, r4
 8014748:	4628      	mov	r0, r5
 801474a:	f7ff fdb7 	bl	80142bc <_fflush_r>
 801474e:	2800      	cmp	r0, #0
 8014750:	d1ed      	bne.n	801472e <__swbuf_r+0x2a>
 8014752:	68a3      	ldr	r3, [r4, #8]
 8014754:	3b01      	subs	r3, #1
 8014756:	60a3      	str	r3, [r4, #8]
 8014758:	6823      	ldr	r3, [r4, #0]
 801475a:	1c5a      	adds	r2, r3, #1
 801475c:	6022      	str	r2, [r4, #0]
 801475e:	701e      	strb	r6, [r3, #0]
 8014760:	6962      	ldr	r2, [r4, #20]
 8014762:	1c43      	adds	r3, r0, #1
 8014764:	429a      	cmp	r2, r3
 8014766:	d004      	beq.n	8014772 <__swbuf_r+0x6e>
 8014768:	89a3      	ldrh	r3, [r4, #12]
 801476a:	07db      	lsls	r3, r3, #31
 801476c:	d5e1      	bpl.n	8014732 <__swbuf_r+0x2e>
 801476e:	2e0a      	cmp	r6, #10
 8014770:	d1df      	bne.n	8014732 <__swbuf_r+0x2e>
 8014772:	4621      	mov	r1, r4
 8014774:	4628      	mov	r0, r5
 8014776:	f7ff fda1 	bl	80142bc <_fflush_r>
 801477a:	2800      	cmp	r0, #0
 801477c:	d0d9      	beq.n	8014732 <__swbuf_r+0x2e>
 801477e:	e7d6      	b.n	801472e <__swbuf_r+0x2a>

08014780 <__swsetup_r>:
 8014780:	b538      	push	{r3, r4, r5, lr}
 8014782:	4b29      	ldr	r3, [pc, #164]	@ (8014828 <__swsetup_r+0xa8>)
 8014784:	4605      	mov	r5, r0
 8014786:	6818      	ldr	r0, [r3, #0]
 8014788:	460c      	mov	r4, r1
 801478a:	b118      	cbz	r0, 8014794 <__swsetup_r+0x14>
 801478c:	6a03      	ldr	r3, [r0, #32]
 801478e:	b90b      	cbnz	r3, 8014794 <__swsetup_r+0x14>
 8014790:	f7fe f8d6 	bl	8012940 <__sinit>
 8014794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014798:	0719      	lsls	r1, r3, #28
 801479a:	d422      	bmi.n	80147e2 <__swsetup_r+0x62>
 801479c:	06da      	lsls	r2, r3, #27
 801479e:	d407      	bmi.n	80147b0 <__swsetup_r+0x30>
 80147a0:	2209      	movs	r2, #9
 80147a2:	602a      	str	r2, [r5, #0]
 80147a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147a8:	81a3      	strh	r3, [r4, #12]
 80147aa:	f04f 30ff 	mov.w	r0, #4294967295
 80147ae:	e033      	b.n	8014818 <__swsetup_r+0x98>
 80147b0:	0758      	lsls	r0, r3, #29
 80147b2:	d512      	bpl.n	80147da <__swsetup_r+0x5a>
 80147b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147b6:	b141      	cbz	r1, 80147ca <__swsetup_r+0x4a>
 80147b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147bc:	4299      	cmp	r1, r3
 80147be:	d002      	beq.n	80147c6 <__swsetup_r+0x46>
 80147c0:	4628      	mov	r0, r5
 80147c2:	f7fe ffd3 	bl	801376c <_free_r>
 80147c6:	2300      	movs	r3, #0
 80147c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80147ca:	89a3      	ldrh	r3, [r4, #12]
 80147cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80147d0:	81a3      	strh	r3, [r4, #12]
 80147d2:	2300      	movs	r3, #0
 80147d4:	6063      	str	r3, [r4, #4]
 80147d6:	6923      	ldr	r3, [r4, #16]
 80147d8:	6023      	str	r3, [r4, #0]
 80147da:	89a3      	ldrh	r3, [r4, #12]
 80147dc:	f043 0308 	orr.w	r3, r3, #8
 80147e0:	81a3      	strh	r3, [r4, #12]
 80147e2:	6923      	ldr	r3, [r4, #16]
 80147e4:	b94b      	cbnz	r3, 80147fa <__swsetup_r+0x7a>
 80147e6:	89a3      	ldrh	r3, [r4, #12]
 80147e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80147ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80147f0:	d003      	beq.n	80147fa <__swsetup_r+0x7a>
 80147f2:	4621      	mov	r1, r4
 80147f4:	4628      	mov	r0, r5
 80147f6:	f000 f883 	bl	8014900 <__smakebuf_r>
 80147fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147fe:	f013 0201 	ands.w	r2, r3, #1
 8014802:	d00a      	beq.n	801481a <__swsetup_r+0x9a>
 8014804:	2200      	movs	r2, #0
 8014806:	60a2      	str	r2, [r4, #8]
 8014808:	6962      	ldr	r2, [r4, #20]
 801480a:	4252      	negs	r2, r2
 801480c:	61a2      	str	r2, [r4, #24]
 801480e:	6922      	ldr	r2, [r4, #16]
 8014810:	b942      	cbnz	r2, 8014824 <__swsetup_r+0xa4>
 8014812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014816:	d1c5      	bne.n	80147a4 <__swsetup_r+0x24>
 8014818:	bd38      	pop	{r3, r4, r5, pc}
 801481a:	0799      	lsls	r1, r3, #30
 801481c:	bf58      	it	pl
 801481e:	6962      	ldrpl	r2, [r4, #20]
 8014820:	60a2      	str	r2, [r4, #8]
 8014822:	e7f4      	b.n	801480e <__swsetup_r+0x8e>
 8014824:	2000      	movs	r0, #0
 8014826:	e7f7      	b.n	8014818 <__swsetup_r+0x98>
 8014828:	24000138 	.word	0x24000138

0801482c <_raise_r>:
 801482c:	291f      	cmp	r1, #31
 801482e:	b538      	push	{r3, r4, r5, lr}
 8014830:	4605      	mov	r5, r0
 8014832:	460c      	mov	r4, r1
 8014834:	d904      	bls.n	8014840 <_raise_r+0x14>
 8014836:	2316      	movs	r3, #22
 8014838:	6003      	str	r3, [r0, #0]
 801483a:	f04f 30ff 	mov.w	r0, #4294967295
 801483e:	bd38      	pop	{r3, r4, r5, pc}
 8014840:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014842:	b112      	cbz	r2, 801484a <_raise_r+0x1e>
 8014844:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014848:	b94b      	cbnz	r3, 801485e <_raise_r+0x32>
 801484a:	4628      	mov	r0, r5
 801484c:	f000 f830 	bl	80148b0 <_getpid_r>
 8014850:	4622      	mov	r2, r4
 8014852:	4601      	mov	r1, r0
 8014854:	4628      	mov	r0, r5
 8014856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801485a:	f000 b817 	b.w	801488c <_kill_r>
 801485e:	2b01      	cmp	r3, #1
 8014860:	d00a      	beq.n	8014878 <_raise_r+0x4c>
 8014862:	1c59      	adds	r1, r3, #1
 8014864:	d103      	bne.n	801486e <_raise_r+0x42>
 8014866:	2316      	movs	r3, #22
 8014868:	6003      	str	r3, [r0, #0]
 801486a:	2001      	movs	r0, #1
 801486c:	e7e7      	b.n	801483e <_raise_r+0x12>
 801486e:	2100      	movs	r1, #0
 8014870:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014874:	4620      	mov	r0, r4
 8014876:	4798      	blx	r3
 8014878:	2000      	movs	r0, #0
 801487a:	e7e0      	b.n	801483e <_raise_r+0x12>

0801487c <raise>:
 801487c:	4b02      	ldr	r3, [pc, #8]	@ (8014888 <raise+0xc>)
 801487e:	4601      	mov	r1, r0
 8014880:	6818      	ldr	r0, [r3, #0]
 8014882:	f7ff bfd3 	b.w	801482c <_raise_r>
 8014886:	bf00      	nop
 8014888:	24000138 	.word	0x24000138

0801488c <_kill_r>:
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4d07      	ldr	r5, [pc, #28]	@ (80148ac <_kill_r+0x20>)
 8014890:	2300      	movs	r3, #0
 8014892:	4604      	mov	r4, r0
 8014894:	4608      	mov	r0, r1
 8014896:	4611      	mov	r1, r2
 8014898:	602b      	str	r3, [r5, #0]
 801489a:	f7ec fe91 	bl	80015c0 <_kill>
 801489e:	1c43      	adds	r3, r0, #1
 80148a0:	d102      	bne.n	80148a8 <_kill_r+0x1c>
 80148a2:	682b      	ldr	r3, [r5, #0]
 80148a4:	b103      	cbz	r3, 80148a8 <_kill_r+0x1c>
 80148a6:	6023      	str	r3, [r4, #0]
 80148a8:	bd38      	pop	{r3, r4, r5, pc}
 80148aa:	bf00      	nop
 80148ac:	24009688 	.word	0x24009688

080148b0 <_getpid_r>:
 80148b0:	f7ec be7e 	b.w	80015b0 <_getpid>

080148b4 <__swhatbuf_r>:
 80148b4:	b570      	push	{r4, r5, r6, lr}
 80148b6:	460c      	mov	r4, r1
 80148b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148bc:	2900      	cmp	r1, #0
 80148be:	b096      	sub	sp, #88	@ 0x58
 80148c0:	4615      	mov	r5, r2
 80148c2:	461e      	mov	r6, r3
 80148c4:	da0d      	bge.n	80148e2 <__swhatbuf_r+0x2e>
 80148c6:	89a3      	ldrh	r3, [r4, #12]
 80148c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80148cc:	f04f 0100 	mov.w	r1, #0
 80148d0:	bf14      	ite	ne
 80148d2:	2340      	movne	r3, #64	@ 0x40
 80148d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80148d8:	2000      	movs	r0, #0
 80148da:	6031      	str	r1, [r6, #0]
 80148dc:	602b      	str	r3, [r5, #0]
 80148de:	b016      	add	sp, #88	@ 0x58
 80148e0:	bd70      	pop	{r4, r5, r6, pc}
 80148e2:	466a      	mov	r2, sp
 80148e4:	f000 f848 	bl	8014978 <_fstat_r>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	dbec      	blt.n	80148c6 <__swhatbuf_r+0x12>
 80148ec:	9901      	ldr	r1, [sp, #4]
 80148ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80148f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80148f6:	4259      	negs	r1, r3
 80148f8:	4159      	adcs	r1, r3
 80148fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80148fe:	e7eb      	b.n	80148d8 <__swhatbuf_r+0x24>

08014900 <__smakebuf_r>:
 8014900:	898b      	ldrh	r3, [r1, #12]
 8014902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014904:	079d      	lsls	r5, r3, #30
 8014906:	4606      	mov	r6, r0
 8014908:	460c      	mov	r4, r1
 801490a:	d507      	bpl.n	801491c <__smakebuf_r+0x1c>
 801490c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014910:	6023      	str	r3, [r4, #0]
 8014912:	6123      	str	r3, [r4, #16]
 8014914:	2301      	movs	r3, #1
 8014916:	6163      	str	r3, [r4, #20]
 8014918:	b003      	add	sp, #12
 801491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801491c:	ab01      	add	r3, sp, #4
 801491e:	466a      	mov	r2, sp
 8014920:	f7ff ffc8 	bl	80148b4 <__swhatbuf_r>
 8014924:	9f00      	ldr	r7, [sp, #0]
 8014926:	4605      	mov	r5, r0
 8014928:	4639      	mov	r1, r7
 801492a:	4630      	mov	r0, r6
 801492c:	f7fd faba 	bl	8011ea4 <_malloc_r>
 8014930:	b948      	cbnz	r0, 8014946 <__smakebuf_r+0x46>
 8014932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014936:	059a      	lsls	r2, r3, #22
 8014938:	d4ee      	bmi.n	8014918 <__smakebuf_r+0x18>
 801493a:	f023 0303 	bic.w	r3, r3, #3
 801493e:	f043 0302 	orr.w	r3, r3, #2
 8014942:	81a3      	strh	r3, [r4, #12]
 8014944:	e7e2      	b.n	801490c <__smakebuf_r+0xc>
 8014946:	89a3      	ldrh	r3, [r4, #12]
 8014948:	6020      	str	r0, [r4, #0]
 801494a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801494e:	81a3      	strh	r3, [r4, #12]
 8014950:	9b01      	ldr	r3, [sp, #4]
 8014952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014956:	b15b      	cbz	r3, 8014970 <__smakebuf_r+0x70>
 8014958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801495c:	4630      	mov	r0, r6
 801495e:	f000 f81d 	bl	801499c <_isatty_r>
 8014962:	b128      	cbz	r0, 8014970 <__smakebuf_r+0x70>
 8014964:	89a3      	ldrh	r3, [r4, #12]
 8014966:	f023 0303 	bic.w	r3, r3, #3
 801496a:	f043 0301 	orr.w	r3, r3, #1
 801496e:	81a3      	strh	r3, [r4, #12]
 8014970:	89a3      	ldrh	r3, [r4, #12]
 8014972:	431d      	orrs	r5, r3
 8014974:	81a5      	strh	r5, [r4, #12]
 8014976:	e7cf      	b.n	8014918 <__smakebuf_r+0x18>

08014978 <_fstat_r>:
 8014978:	b538      	push	{r3, r4, r5, lr}
 801497a:	4d07      	ldr	r5, [pc, #28]	@ (8014998 <_fstat_r+0x20>)
 801497c:	2300      	movs	r3, #0
 801497e:	4604      	mov	r4, r0
 8014980:	4608      	mov	r0, r1
 8014982:	4611      	mov	r1, r2
 8014984:	602b      	str	r3, [r5, #0]
 8014986:	f7ec fe7b 	bl	8001680 <_fstat>
 801498a:	1c43      	adds	r3, r0, #1
 801498c:	d102      	bne.n	8014994 <_fstat_r+0x1c>
 801498e:	682b      	ldr	r3, [r5, #0]
 8014990:	b103      	cbz	r3, 8014994 <_fstat_r+0x1c>
 8014992:	6023      	str	r3, [r4, #0]
 8014994:	bd38      	pop	{r3, r4, r5, pc}
 8014996:	bf00      	nop
 8014998:	24009688 	.word	0x24009688

0801499c <_isatty_r>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	4d06      	ldr	r5, [pc, #24]	@ (80149b8 <_isatty_r+0x1c>)
 80149a0:	2300      	movs	r3, #0
 80149a2:	4604      	mov	r4, r0
 80149a4:	4608      	mov	r0, r1
 80149a6:	602b      	str	r3, [r5, #0]
 80149a8:	f7ec fe7a 	bl	80016a0 <_isatty>
 80149ac:	1c43      	adds	r3, r0, #1
 80149ae:	d102      	bne.n	80149b6 <_isatty_r+0x1a>
 80149b0:	682b      	ldr	r3, [r5, #0]
 80149b2:	b103      	cbz	r3, 80149b6 <_isatty_r+0x1a>
 80149b4:	6023      	str	r3, [r4, #0]
 80149b6:	bd38      	pop	{r3, r4, r5, pc}
 80149b8:	24009688 	.word	0x24009688
 80149bc:	00000000 	.word	0x00000000

080149c0 <fmod>:
 80149c0:	b508      	push	{r3, lr}
 80149c2:	ed2d 8b04 	vpush	{d8-d9}
 80149c6:	eeb0 9b40 	vmov.f64	d9, d0
 80149ca:	eeb0 8b41 	vmov.f64	d8, d1
 80149ce:	f000 f899 	bl	8014b04 <__ieee754_fmod>
 80149d2:	eeb4 9b48 	vcmp.f64	d9, d8
 80149d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149da:	d60c      	bvs.n	80149f6 <fmod+0x36>
 80149dc:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014a00 <fmod+0x40>
 80149e0:	eeb4 8b49 	vcmp.f64	d8, d9
 80149e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e8:	d105      	bne.n	80149f6 <fmod+0x36>
 80149ea:	f7fe f8a5 	bl	8012b38 <__errno>
 80149ee:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80149f2:	2321      	movs	r3, #33	@ 0x21
 80149f4:	6003      	str	r3, [r0, #0]
 80149f6:	ecbd 8b04 	vpop	{d8-d9}
 80149fa:	bd08      	pop	{r3, pc}
 80149fc:	f3af 8000 	nop.w
	...

08014a08 <sqrt>:
 8014a08:	b508      	push	{r3, lr}
 8014a0a:	ed2d 8b04 	vpush	{d8-d9}
 8014a0e:	eeb0 8b40 	vmov.f64	d8, d0
 8014a12:	f000 f871 	bl	8014af8 <__ieee754_sqrt>
 8014a16:	eeb4 8b48 	vcmp.f64	d8, d8
 8014a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a1e:	d60c      	bvs.n	8014a3a <sqrt+0x32>
 8014a20:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014a40 <sqrt+0x38>
 8014a24:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a2c:	d505      	bpl.n	8014a3a <sqrt+0x32>
 8014a2e:	f7fe f883 	bl	8012b38 <__errno>
 8014a32:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014a36:	2321      	movs	r3, #33	@ 0x21
 8014a38:	6003      	str	r3, [r0, #0]
 8014a3a:	ecbd 8b04 	vpop	{d8-d9}
 8014a3e:	bd08      	pop	{r3, pc}
	...

08014a48 <acosf>:
 8014a48:	b508      	push	{r3, lr}
 8014a4a:	ed2d 8b02 	vpush	{d8}
 8014a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8014a52:	f000 f963 	bl	8014d1c <__ieee754_acosf>
 8014a56:	eeb4 8a48 	vcmp.f32	s16, s16
 8014a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a5e:	eef0 8a40 	vmov.f32	s17, s0
 8014a62:	d615      	bvs.n	8014a90 <acosf+0x48>
 8014a64:	eeb0 0a48 	vmov.f32	s0, s16
 8014a68:	f000 f838 	bl	8014adc <fabsf>
 8014a6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014a70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a78:	dd0a      	ble.n	8014a90 <acosf+0x48>
 8014a7a:	f7fe f85d 	bl	8012b38 <__errno>
 8014a7e:	ecbd 8b02 	vpop	{d8}
 8014a82:	2321      	movs	r3, #33	@ 0x21
 8014a84:	6003      	str	r3, [r0, #0]
 8014a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014a8a:	4804      	ldr	r0, [pc, #16]	@ (8014a9c <acosf+0x54>)
 8014a8c:	f000 b82e 	b.w	8014aec <nanf>
 8014a90:	eeb0 0a68 	vmov.f32	s0, s17
 8014a94:	ecbd 8b02 	vpop	{d8}
 8014a98:	bd08      	pop	{r3, pc}
 8014a9a:	bf00      	nop
 8014a9c:	0801738e 	.word	0x0801738e

08014aa0 <sqrtf>:
 8014aa0:	b508      	push	{r3, lr}
 8014aa2:	ed2d 8b02 	vpush	{d8}
 8014aa6:	eeb0 8a40 	vmov.f32	s16, s0
 8014aaa:	f000 f828 	bl	8014afe <__ieee754_sqrtf>
 8014aae:	eeb4 8a48 	vcmp.f32	s16, s16
 8014ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab6:	d60c      	bvs.n	8014ad2 <sqrtf+0x32>
 8014ab8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014ad8 <sqrtf+0x38>
 8014abc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac4:	d505      	bpl.n	8014ad2 <sqrtf+0x32>
 8014ac6:	f7fe f837 	bl	8012b38 <__errno>
 8014aca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014ace:	2321      	movs	r3, #33	@ 0x21
 8014ad0:	6003      	str	r3, [r0, #0]
 8014ad2:	ecbd 8b02 	vpop	{d8}
 8014ad6:	bd08      	pop	{r3, pc}
 8014ad8:	00000000 	.word	0x00000000

08014adc <fabsf>:
 8014adc:	ee10 3a10 	vmov	r3, s0
 8014ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014ae4:	ee00 3a10 	vmov	s0, r3
 8014ae8:	4770      	bx	lr
	...

08014aec <nanf>:
 8014aec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014af4 <nanf+0x8>
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	7fc00000 	.word	0x7fc00000

08014af8 <__ieee754_sqrt>:
 8014af8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014afc:	4770      	bx	lr

08014afe <__ieee754_sqrtf>:
 8014afe:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014b02:	4770      	bx	lr

08014b04 <__ieee754_fmod>:
 8014b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014b08:	ed8d 1b00 	vstr	d1, [sp]
 8014b0c:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014b10:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014b14:	ea56 0307 	orrs.w	r3, r6, r7
 8014b18:	46b6      	mov	lr, r6
 8014b1a:	d00d      	beq.n	8014b38 <__ieee754_fmod+0x34>
 8014b1c:	ee10 ca90 	vmov	ip, s1
 8014b20:	4b78      	ldr	r3, [pc, #480]	@ (8014d04 <__ieee754_fmod+0x200>)
 8014b22:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014b26:	4598      	cmp	r8, r3
 8014b28:	d806      	bhi.n	8014b38 <__ieee754_fmod+0x34>
 8014b2a:	4273      	negs	r3, r6
 8014b2c:	4a76      	ldr	r2, [pc, #472]	@ (8014d08 <__ieee754_fmod+0x204>)
 8014b2e:	4333      	orrs	r3, r6
 8014b30:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014b34:	4293      	cmp	r3, r2
 8014b36:	d908      	bls.n	8014b4a <__ieee754_fmod+0x46>
 8014b38:	ed9d 7b00 	vldr	d7, [sp]
 8014b3c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014b40:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014b44:	b003      	add	sp, #12
 8014b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b4a:	ee10 9a10 	vmov	r9, s0
 8014b4e:	45b8      	cmp	r8, r7
 8014b50:	4649      	mov	r1, r9
 8014b52:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014b56:	dc09      	bgt.n	8014b6c <__ieee754_fmod+0x68>
 8014b58:	dbf4      	blt.n	8014b44 <__ieee754_fmod+0x40>
 8014b5a:	454e      	cmp	r6, r9
 8014b5c:	d8f2      	bhi.n	8014b44 <__ieee754_fmod+0x40>
 8014b5e:	d105      	bne.n	8014b6c <__ieee754_fmod+0x68>
 8014b60:	4b6a      	ldr	r3, [pc, #424]	@ (8014d0c <__ieee754_fmod+0x208>)
 8014b62:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014b66:	ed93 0b00 	vldr	d0, [r3]
 8014b6a:	e7eb      	b.n	8014b44 <__ieee754_fmod+0x40>
 8014b6c:	4a66      	ldr	r2, [pc, #408]	@ (8014d08 <__ieee754_fmod+0x204>)
 8014b6e:	ea1c 0f02 	tst.w	ip, r2
 8014b72:	d14a      	bne.n	8014c0a <__ieee754_fmod+0x106>
 8014b74:	f1b8 0f00 	cmp.w	r8, #0
 8014b78:	d13f      	bne.n	8014bfa <__ieee754_fmod+0xf6>
 8014b7a:	4865      	ldr	r0, [pc, #404]	@ (8014d10 <__ieee754_fmod+0x20c>)
 8014b7c:	464b      	mov	r3, r9
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	dc38      	bgt.n	8014bf4 <__ieee754_fmod+0xf0>
 8014b82:	4215      	tst	r5, r2
 8014b84:	d150      	bne.n	8014c28 <__ieee754_fmod+0x124>
 8014b86:	2f00      	cmp	r7, #0
 8014b88:	d147      	bne.n	8014c1a <__ieee754_fmod+0x116>
 8014b8a:	4a61      	ldr	r2, [pc, #388]	@ (8014d10 <__ieee754_fmod+0x20c>)
 8014b8c:	4633      	mov	r3, r6
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	dc40      	bgt.n	8014c14 <__ieee754_fmod+0x110>
 8014b92:	4b60      	ldr	r3, [pc, #384]	@ (8014d14 <__ieee754_fmod+0x210>)
 8014b94:	4298      	cmp	r0, r3
 8014b96:	db4b      	blt.n	8014c30 <__ieee754_fmod+0x12c>
 8014b98:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014b9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014ba0:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8014d14 <__ieee754_fmod+0x210>
 8014ba4:	4562      	cmp	r2, ip
 8014ba6:	db58      	blt.n	8014c5a <__ieee754_fmod+0x156>
 8014ba8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014bac:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014bb0:	1a80      	subs	r0, r0, r2
 8014bb2:	1b5e      	subs	r6, r3, r5
 8014bb4:	eba1 070e 	sub.w	r7, r1, lr
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d164      	bne.n	8014c86 <__ieee754_fmod+0x182>
 8014bbc:	4571      	cmp	r1, lr
 8014bbe:	bf38      	it	cc
 8014bc0:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014bc4:	2e00      	cmp	r6, #0
 8014bc6:	bfa4      	itt	ge
 8014bc8:	4639      	movge	r1, r7
 8014bca:	4633      	movge	r3, r6
 8014bcc:	ea53 0001 	orrs.w	r0, r3, r1
 8014bd0:	d0c6      	beq.n	8014b60 <__ieee754_fmod+0x5c>
 8014bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014bd6:	db6b      	blt.n	8014cb0 <__ieee754_fmod+0x1ac>
 8014bd8:	484e      	ldr	r0, [pc, #312]	@ (8014d14 <__ieee754_fmod+0x210>)
 8014bda:	4282      	cmp	r2, r0
 8014bdc:	db6e      	blt.n	8014cbc <__ieee754_fmod+0x1b8>
 8014bde:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014be2:	4323      	orrs	r3, r4
 8014be4:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014be8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014bec:	460c      	mov	r4, r1
 8014bee:	ec45 4b10 	vmov	d0, r4, r5
 8014bf2:	e7a7      	b.n	8014b44 <__ieee754_fmod+0x40>
 8014bf4:	3801      	subs	r0, #1
 8014bf6:	005b      	lsls	r3, r3, #1
 8014bf8:	e7c1      	b.n	8014b7e <__ieee754_fmod+0x7a>
 8014bfa:	4846      	ldr	r0, [pc, #280]	@ (8014d14 <__ieee754_fmod+0x210>)
 8014bfc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	ddbe      	ble.n	8014b82 <__ieee754_fmod+0x7e>
 8014c04:	3801      	subs	r0, #1
 8014c06:	005b      	lsls	r3, r3, #1
 8014c08:	e7fa      	b.n	8014c00 <__ieee754_fmod+0xfc>
 8014c0a:	ea4f 5028 	mov.w	r0, r8, asr #20
 8014c0e:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014c12:	e7b6      	b.n	8014b82 <__ieee754_fmod+0x7e>
 8014c14:	3a01      	subs	r2, #1
 8014c16:	005b      	lsls	r3, r3, #1
 8014c18:	e7b9      	b.n	8014b8e <__ieee754_fmod+0x8a>
 8014c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8014d14 <__ieee754_fmod+0x210>)
 8014c1c:	02fb      	lsls	r3, r7, #11
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	ddb7      	ble.n	8014b92 <__ieee754_fmod+0x8e>
 8014c22:	3a01      	subs	r2, #1
 8014c24:	005b      	lsls	r3, r3, #1
 8014c26:	e7fa      	b.n	8014c1e <__ieee754_fmod+0x11a>
 8014c28:	153a      	asrs	r2, r7, #20
 8014c2a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014c2e:	e7b0      	b.n	8014b92 <__ieee754_fmod+0x8e>
 8014c30:	eba3 0c00 	sub.w	ip, r3, r0
 8014c34:	f1bc 0f1f 	cmp.w	ip, #31
 8014c38:	dc09      	bgt.n	8014c4e <__ieee754_fmod+0x14a>
 8014c3a:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8014c3e:	fa08 f10c 	lsl.w	r1, r8, ip
 8014c42:	fa29 f303 	lsr.w	r3, r9, r3
 8014c46:	430b      	orrs	r3, r1
 8014c48:	fa09 f10c 	lsl.w	r1, r9, ip
 8014c4c:	e7a8      	b.n	8014ba0 <__ieee754_fmod+0x9c>
 8014c4e:	4b32      	ldr	r3, [pc, #200]	@ (8014d18 <__ieee754_fmod+0x214>)
 8014c50:	1a1b      	subs	r3, r3, r0
 8014c52:	fa09 f303 	lsl.w	r3, r9, r3
 8014c56:	2100      	movs	r1, #0
 8014c58:	e7a2      	b.n	8014ba0 <__ieee754_fmod+0x9c>
 8014c5a:	ebac 0c02 	sub.w	ip, ip, r2
 8014c5e:	f1bc 0f1f 	cmp.w	ip, #31
 8014c62:	dc09      	bgt.n	8014c78 <__ieee754_fmod+0x174>
 8014c64:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8014c68:	fa07 f70c 	lsl.w	r7, r7, ip
 8014c6c:	fa26 f505 	lsr.w	r5, r6, r5
 8014c70:	433d      	orrs	r5, r7
 8014c72:	fa06 fe0c 	lsl.w	lr, r6, ip
 8014c76:	e79b      	b.n	8014bb0 <__ieee754_fmod+0xac>
 8014c78:	4d27      	ldr	r5, [pc, #156]	@ (8014d18 <__ieee754_fmod+0x214>)
 8014c7a:	1aad      	subs	r5, r5, r2
 8014c7c:	fa06 f505 	lsl.w	r5, r6, r5
 8014c80:	f04f 0e00 	mov.w	lr, #0
 8014c84:	e794      	b.n	8014bb0 <__ieee754_fmod+0xac>
 8014c86:	4571      	cmp	r1, lr
 8014c88:	bf38      	it	cc
 8014c8a:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014c8e:	2e00      	cmp	r6, #0
 8014c90:	da05      	bge.n	8014c9e <__ieee754_fmod+0x19a>
 8014c92:	0fce      	lsrs	r6, r1, #31
 8014c94:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014c98:	0049      	lsls	r1, r1, #1
 8014c9a:	3801      	subs	r0, #1
 8014c9c:	e789      	b.n	8014bb2 <__ieee754_fmod+0xae>
 8014c9e:	ea56 0307 	orrs.w	r3, r6, r7
 8014ca2:	f43f af5d 	beq.w	8014b60 <__ieee754_fmod+0x5c>
 8014ca6:	0ffb      	lsrs	r3, r7, #31
 8014ca8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014cac:	0079      	lsls	r1, r7, #1
 8014cae:	e7f4      	b.n	8014c9a <__ieee754_fmod+0x196>
 8014cb0:	0fc8      	lsrs	r0, r1, #31
 8014cb2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014cb6:	0049      	lsls	r1, r1, #1
 8014cb8:	3a01      	subs	r2, #1
 8014cba:	e78a      	b.n	8014bd2 <__ieee754_fmod+0xce>
 8014cbc:	1a80      	subs	r0, r0, r2
 8014cbe:	2814      	cmp	r0, #20
 8014cc0:	dc0c      	bgt.n	8014cdc <__ieee754_fmod+0x1d8>
 8014cc2:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014cc6:	fa03 f202 	lsl.w	r2, r3, r2
 8014cca:	40c1      	lsrs	r1, r0
 8014ccc:	430a      	orrs	r2, r1
 8014cce:	4103      	asrs	r3, r0
 8014cd0:	ea43 0104 	orr.w	r1, r3, r4
 8014cd4:	4610      	mov	r0, r2
 8014cd6:	ec41 0b10 	vmov	d0, r0, r1
 8014cda:	e733      	b.n	8014b44 <__ieee754_fmod+0x40>
 8014cdc:	281f      	cmp	r0, #31
 8014cde:	dc07      	bgt.n	8014cf0 <__ieee754_fmod+0x1ec>
 8014ce0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014ce4:	40c1      	lsrs	r1, r0
 8014ce6:	fa03 f202 	lsl.w	r2, r3, r2
 8014cea:	430a      	orrs	r2, r1
 8014cec:	4623      	mov	r3, r4
 8014cee:	e7ef      	b.n	8014cd0 <__ieee754_fmod+0x1cc>
 8014cf0:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8014cf4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8014cf8:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8014cfc:	32e2      	adds	r2, #226	@ 0xe2
 8014cfe:	fa43 f202 	asr.w	r2, r3, r2
 8014d02:	e7f3      	b.n	8014cec <__ieee754_fmod+0x1e8>
 8014d04:	7fefffff 	.word	0x7fefffff
 8014d08:	7ff00000 	.word	0x7ff00000
 8014d0c:	08017490 	.word	0x08017490
 8014d10:	fffffbed 	.word	0xfffffbed
 8014d14:	fffffc02 	.word	0xfffffc02
 8014d18:	fffffbe2 	.word	0xfffffbe2

08014d1c <__ieee754_acosf>:
 8014d1c:	b508      	push	{r3, lr}
 8014d1e:	ee10 3a10 	vmov	r3, s0
 8014d22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014d26:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8014d2a:	ed2d 8b0c 	vpush	{d8-d13}
 8014d2e:	d109      	bne.n	8014d44 <__ieee754_acosf+0x28>
 8014d30:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8014ec8 <__ieee754_acosf+0x1ac>
 8014d34:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8014ecc <__ieee754_acosf+0x1b0>
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	fe37 0a80 	vselgt.f32	s0, s15, s0
 8014d3e:	ecbd 8b0c 	vpop	{d8-d13}
 8014d42:	bd08      	pop	{r3, pc}
 8014d44:	d904      	bls.n	8014d50 <__ieee754_acosf+0x34>
 8014d46:	ee30 8a40 	vsub.f32	s16, s0, s0
 8014d4a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014d4e:	e7f6      	b.n	8014d3e <__ieee754_acosf+0x22>
 8014d50:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8014d54:	d23c      	bcs.n	8014dd0 <__ieee754_acosf+0xb4>
 8014d56:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8014d5a:	f240 80b1 	bls.w	8014ec0 <__ieee754_acosf+0x1a4>
 8014d5e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014d62:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8014ed0 <__ieee754_acosf+0x1b4>
 8014d66:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8014ed4 <__ieee754_acosf+0x1b8>
 8014d6a:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 8014ed8 <__ieee754_acosf+0x1bc>
 8014d6e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014d72:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8014edc <__ieee754_acosf+0x1c0>
 8014d76:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014d7a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8014ee0 <__ieee754_acosf+0x1c4>
 8014d7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014d82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8014ee4 <__ieee754_acosf+0x1c8>
 8014d86:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014d8a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8014ee8 <__ieee754_acosf+0x1cc>
 8014d8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014d92:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8014eec <__ieee754_acosf+0x1d0>
 8014d96:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8014d9a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8014ef0 <__ieee754_acosf+0x1d4>
 8014d9e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014da2:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8014ef4 <__ieee754_acosf+0x1d8>
 8014da6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014dae:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014db6:	eddf 7a50 	vldr	s15, [pc, #320]	@ 8014ef8 <__ieee754_acosf+0x1dc>
 8014dba:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8014dbe:	eee0 7a46 	vfms.f32	s15, s0, s12
 8014dc2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014dc6:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8014efc <__ieee754_acosf+0x1e0>
 8014dca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014dce:	e7b6      	b.n	8014d3e <__ieee754_acosf+0x22>
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	eddf da3f 	vldr	s27, [pc, #252]	@ 8014ed0 <__ieee754_acosf+0x1b4>
 8014dd6:	eddf ca3f 	vldr	s25, [pc, #252]	@ 8014ed4 <__ieee754_acosf+0x1b8>
 8014dda:	ed9f ca40 	vldr	s24, [pc, #256]	@ 8014edc <__ieee754_acosf+0x1c0>
 8014dde:	eddf ba40 	vldr	s23, [pc, #256]	@ 8014ee0 <__ieee754_acosf+0x1c4>
 8014de2:	ed9f ba40 	vldr	s22, [pc, #256]	@ 8014ee4 <__ieee754_acosf+0x1c8>
 8014de6:	eddf 8a40 	vldr	s17, [pc, #256]	@ 8014ee8 <__ieee754_acosf+0x1cc>
 8014dea:	ed9f da40 	vldr	s26, [pc, #256]	@ 8014eec <__ieee754_acosf+0x1d0>
 8014dee:	eddf aa3a 	vldr	s21, [pc, #232]	@ 8014ed8 <__ieee754_acosf+0x1bc>
 8014df2:	ed9f aa3f 	vldr	s20, [pc, #252]	@ 8014ef0 <__ieee754_acosf+0x1d4>
 8014df6:	eddf 9a3f 	vldr	s19, [pc, #252]	@ 8014ef4 <__ieee754_acosf+0x1d8>
 8014dfa:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8014dfe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014e02:	da28      	bge.n	8014e56 <__ieee754_acosf+0x13a>
 8014e04:	ee30 8a09 	vadd.f32	s16, s0, s18
 8014e08:	ee28 0a27 	vmul.f32	s0, s16, s15
 8014e0c:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8014e10:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8014e14:	eeac ca80 	vfma.f32	s24, s25, s0
 8014e18:	eeaa aa80 	vfma.f32	s20, s21, s0
 8014e1c:	eeec ba00 	vfma.f32	s23, s24, s0
 8014e20:	eeea 9a00 	vfma.f32	s19, s20, s0
 8014e24:	eeab ba80 	vfma.f32	s22, s23, s0
 8014e28:	eea9 9a80 	vfma.f32	s18, s19, s0
 8014e2c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8014e30:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014e34:	f7ff fe63 	bl	8014afe <__ieee754_sqrtf>
 8014e38:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8014e3c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8014f00 <__ieee754_acosf+0x1e4>
 8014e40:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014e44:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8014e48:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014e4c:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8014f04 <__ieee754_acosf+0x1e8>
 8014e50:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014e54:	e773      	b.n	8014d3e <__ieee754_acosf+0x22>
 8014e56:	ee39 8a40 	vsub.f32	s16, s18, s0
 8014e5a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014e5e:	eeb0 0a48 	vmov.f32	s0, s16
 8014e62:	f7ff fe4c 	bl	8014afe <__ieee754_sqrtf>
 8014e66:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8014e6a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8014e6e:	eeac ca88 	vfma.f32	s24, s25, s16
 8014e72:	eeaa aa88 	vfma.f32	s20, s21, s16
 8014e76:	eeec ba08 	vfma.f32	s23, s24, s16
 8014e7a:	ee10 3a10 	vmov	r3, s0
 8014e7e:	eeab ba88 	vfma.f32	s22, s23, s16
 8014e82:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8014e86:	f023 030f 	bic.w	r3, r3, #15
 8014e8a:	eeea 9a08 	vfma.f32	s19, s20, s16
 8014e8e:	ee07 3a90 	vmov	s15, r3
 8014e92:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8014e96:	eeb0 6a48 	vmov.f32	s12, s16
 8014e9a:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8014e9e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8014ea2:	ee70 6a27 	vadd.f32	s13, s0, s15
 8014ea6:	ee68 8a88 	vmul.f32	s17, s17, s16
 8014eaa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014eae:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8014eb2:	eea0 7a26 	vfma.f32	s14, s0, s13
 8014eb6:	ee37 0a87 	vadd.f32	s0, s15, s14
 8014eba:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ebe:	e73e      	b.n	8014d3e <__ieee754_acosf+0x22>
 8014ec0:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8014f08 <__ieee754_acosf+0x1ec>
 8014ec4:	e73b      	b.n	8014d3e <__ieee754_acosf+0x22>
 8014ec6:	bf00      	nop
 8014ec8:	40490fdb 	.word	0x40490fdb
 8014ecc:	00000000 	.word	0x00000000
 8014ed0:	3811ef08 	.word	0x3811ef08
 8014ed4:	3a4f7f04 	.word	0x3a4f7f04
 8014ed8:	bf303361 	.word	0xbf303361
 8014edc:	bd241146 	.word	0xbd241146
 8014ee0:	3e4e0aa8 	.word	0x3e4e0aa8
 8014ee4:	bea6b090 	.word	0xbea6b090
 8014ee8:	3e2aaaab 	.word	0x3e2aaaab
 8014eec:	3d9dc62e 	.word	0x3d9dc62e
 8014ef0:	4001572d 	.word	0x4001572d
 8014ef4:	c019d139 	.word	0xc019d139
 8014ef8:	33a22168 	.word	0x33a22168
 8014efc:	3fc90fda 	.word	0x3fc90fda
 8014f00:	b3a22168 	.word	0xb3a22168
 8014f04:	40490fda 	.word	0x40490fda
 8014f08:	3fc90fdb 	.word	0x3fc90fdb

08014f0c <_init>:
 8014f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f0e:	bf00      	nop
 8014f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f12:	bc08      	pop	{r3}
 8014f14:	469e      	mov	lr, r3
 8014f16:	4770      	bx	lr

08014f18 <_fini>:
 8014f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f1a:	bf00      	nop
 8014f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f1e:	bc08      	pop	{r3}
 8014f20:	469e      	mov	lr, r3
 8014f22:	4770      	bx	lr
